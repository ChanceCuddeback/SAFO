
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00010000 <_vector_table>:
   10000:	20 36 00 20 69 2f 01 00 77 8b 02 00 99 2f 01 00      6. i/..w..../..
   10010:	99 2f 01 00 99 2f 01 00 99 2f 01 00 00 00 00 00     ./.../.../......
	...
   1002c:	d1 2c 01 00 99 2f 01 00 00 00 00 00 7d 2c 01 00     .,.../......},..
   1003c:	0f 87 02 00                                         ....

00010040 <_irq_vector_table>:
   10040:	29 2f 01 00 29 2b 02 00 29 2f 01 00 29 2f 01 00     )/..)+..)/..)/..
   10050:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   10060:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   10070:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   10080:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   10090:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   100a0:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   100b0:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   100c0:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   100d0:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   100e0:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..
   100f0:	29 2f 01 00 29 2f 01 00 29 2f 01 00 29 2f 01 00     )/..)/..)/..)/..

Disassembly of section text:

00010100 <__aeabi_uldivmod>:
   10100:	b953      	cbnz	r3, 10118 <__aeabi_uldivmod+0x18>
   10102:	b94a      	cbnz	r2, 10118 <__aeabi_uldivmod+0x18>
   10104:	2900      	cmp	r1, #0
   10106:	bf08      	it	eq
   10108:	2800      	cmpeq	r0, #0
   1010a:	bf1c      	itt	ne
   1010c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   10110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   10114:	f000 b974 	b.w	10400 <__aeabi_idiv0>
   10118:	f1ad 0c08 	sub.w	ip, sp, #8
   1011c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   10120:	f000 f806 	bl	10130 <__udivmoddi4>
   10124:	f8dd e004 	ldr.w	lr, [sp, #4]
   10128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1012c:	b004      	add	sp, #16
   1012e:	4770      	bx	lr

00010130 <__udivmoddi4>:
   10130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10134:	9e08      	ldr	r6, [sp, #32]
   10136:	460d      	mov	r5, r1
   10138:	4604      	mov	r4, r0
   1013a:	4688      	mov	r8, r1
   1013c:	2b00      	cmp	r3, #0
   1013e:	d14d      	bne.n	101dc <__udivmoddi4+0xac>
   10140:	428a      	cmp	r2, r1
   10142:	4694      	mov	ip, r2
   10144:	d968      	bls.n	10218 <__udivmoddi4+0xe8>
   10146:	fab2 f282 	clz	r2, r2
   1014a:	b152      	cbz	r2, 10162 <__udivmoddi4+0x32>
   1014c:	fa01 f302 	lsl.w	r3, r1, r2
   10150:	f1c2 0120 	rsb	r1, r2, #32
   10154:	fa20 f101 	lsr.w	r1, r0, r1
   10158:	fa0c fc02 	lsl.w	ip, ip, r2
   1015c:	ea41 0803 	orr.w	r8, r1, r3
   10160:	4094      	lsls	r4, r2
   10162:	ea4f 451c 	mov.w	r5, ip, lsr #16
   10166:	0c21      	lsrs	r1, r4, #16
   10168:	fbb8 fef5 	udiv	lr, r8, r5
   1016c:	fa1f f78c 	uxth.w	r7, ip
   10170:	fb05 831e 	mls	r3, r5, lr, r8
   10174:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   10178:	fb0e f107 	mul.w	r1, lr, r7
   1017c:	4299      	cmp	r1, r3
   1017e:	d90b      	bls.n	10198 <__udivmoddi4+0x68>
   10180:	eb1c 0303 	adds.w	r3, ip, r3
   10184:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
   10188:	f080 811e 	bcs.w	103c8 <__udivmoddi4+0x298>
   1018c:	4299      	cmp	r1, r3
   1018e:	f240 811b 	bls.w	103c8 <__udivmoddi4+0x298>
   10192:	f1ae 0e02 	sub.w	lr, lr, #2
   10196:	4463      	add	r3, ip
   10198:	1a5b      	subs	r3, r3, r1
   1019a:	b2a4      	uxth	r4, r4
   1019c:	fbb3 f0f5 	udiv	r0, r3, r5
   101a0:	fb05 3310 	mls	r3, r5, r0, r3
   101a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   101a8:	fb00 f707 	mul.w	r7, r0, r7
   101ac:	42a7      	cmp	r7, r4
   101ae:	d90a      	bls.n	101c6 <__udivmoddi4+0x96>
   101b0:	eb1c 0404 	adds.w	r4, ip, r4
   101b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   101b8:	f080 8108 	bcs.w	103cc <__udivmoddi4+0x29c>
   101bc:	42a7      	cmp	r7, r4
   101be:	f240 8105 	bls.w	103cc <__udivmoddi4+0x29c>
   101c2:	4464      	add	r4, ip
   101c4:	3802      	subs	r0, #2
   101c6:	1be4      	subs	r4, r4, r7
   101c8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
   101cc:	2100      	movs	r1, #0
   101ce:	b11e      	cbz	r6, 101d8 <__udivmoddi4+0xa8>
   101d0:	40d4      	lsrs	r4, r2
   101d2:	2300      	movs	r3, #0
   101d4:	e9c6 4300 	strd	r4, r3, [r6]
   101d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101dc:	428b      	cmp	r3, r1
   101de:	d908      	bls.n	101f2 <__udivmoddi4+0xc2>
   101e0:	2e00      	cmp	r6, #0
   101e2:	f000 80ee 	beq.w	103c2 <__udivmoddi4+0x292>
   101e6:	2100      	movs	r1, #0
   101e8:	e9c6 0500 	strd	r0, r5, [r6]
   101ec:	4608      	mov	r0, r1
   101ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   101f2:	fab3 f183 	clz	r1, r3
   101f6:	2900      	cmp	r1, #0
   101f8:	d14a      	bne.n	10290 <__udivmoddi4+0x160>
   101fa:	42ab      	cmp	r3, r5
   101fc:	d302      	bcc.n	10204 <__udivmoddi4+0xd4>
   101fe:	4282      	cmp	r2, r0
   10200:	f200 80f9 	bhi.w	103f6 <__udivmoddi4+0x2c6>
   10204:	1a84      	subs	r4, r0, r2
   10206:	eb65 0303 	sbc.w	r3, r5, r3
   1020a:	2001      	movs	r0, #1
   1020c:	4698      	mov	r8, r3
   1020e:	2e00      	cmp	r6, #0
   10210:	d0e2      	beq.n	101d8 <__udivmoddi4+0xa8>
   10212:	e9c6 4800 	strd	r4, r8, [r6]
   10216:	e7df      	b.n	101d8 <__udivmoddi4+0xa8>
   10218:	b902      	cbnz	r2, 1021c <__udivmoddi4+0xec>
   1021a:	deff      	udf	#255	; 0xff
   1021c:	fab2 f282 	clz	r2, r2
   10220:	2a00      	cmp	r2, #0
   10222:	f040 8091 	bne.w	10348 <__udivmoddi4+0x218>
   10226:	eba1 050c 	sub.w	r5, r1, ip
   1022a:	ea4f 471c 	mov.w	r7, ip, lsr #16
   1022e:	fa1f fe8c 	uxth.w	lr, ip
   10232:	2101      	movs	r1, #1
   10234:	fbb5 f3f7 	udiv	r3, r5, r7
   10238:	fb07 5013 	mls	r0, r7, r3, r5
   1023c:	0c25      	lsrs	r5, r4, #16
   1023e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   10242:	fb0e f003 	mul.w	r0, lr, r3
   10246:	42a8      	cmp	r0, r5
   10248:	d908      	bls.n	1025c <__udivmoddi4+0x12c>
   1024a:	eb1c 0505 	adds.w	r5, ip, r5
   1024e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   10252:	d202      	bcs.n	1025a <__udivmoddi4+0x12a>
   10254:	42a8      	cmp	r0, r5
   10256:	f200 80cb 	bhi.w	103f0 <__udivmoddi4+0x2c0>
   1025a:	4643      	mov	r3, r8
   1025c:	1a2d      	subs	r5, r5, r0
   1025e:	b2a4      	uxth	r4, r4
   10260:	fbb5 f0f7 	udiv	r0, r5, r7
   10264:	fb07 5510 	mls	r5, r7, r0, r5
   10268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   1026c:	fb0e fe00 	mul.w	lr, lr, r0
   10270:	45a6      	cmp	lr, r4
   10272:	d908      	bls.n	10286 <__udivmoddi4+0x156>
   10274:	eb1c 0404 	adds.w	r4, ip, r4
   10278:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
   1027c:	d202      	bcs.n	10284 <__udivmoddi4+0x154>
   1027e:	45a6      	cmp	lr, r4
   10280:	f200 80bb 	bhi.w	103fa <__udivmoddi4+0x2ca>
   10284:	4628      	mov	r0, r5
   10286:	eba4 040e 	sub.w	r4, r4, lr
   1028a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   1028e:	e79e      	b.n	101ce <__udivmoddi4+0x9e>
   10290:	f1c1 0720 	rsb	r7, r1, #32
   10294:	408b      	lsls	r3, r1
   10296:	fa22 fc07 	lsr.w	ip, r2, r7
   1029a:	ea4c 0c03 	orr.w	ip, ip, r3
   1029e:	fa20 f407 	lsr.w	r4, r0, r7
   102a2:	fa05 f301 	lsl.w	r3, r5, r1
   102a6:	431c      	orrs	r4, r3
   102a8:	40fd      	lsrs	r5, r7
   102aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
   102ae:	fa00 f301 	lsl.w	r3, r0, r1
   102b2:	fbb5 f8f9 	udiv	r8, r5, r9
   102b6:	0c20      	lsrs	r0, r4, #16
   102b8:	fa1f fe8c 	uxth.w	lr, ip
   102bc:	fb09 5518 	mls	r5, r9, r8, r5
   102c0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
   102c4:	fb08 f00e 	mul.w	r0, r8, lr
   102c8:	42a8      	cmp	r0, r5
   102ca:	fa02 f201 	lsl.w	r2, r2, r1
   102ce:	d90b      	bls.n	102e8 <__udivmoddi4+0x1b8>
   102d0:	eb1c 0505 	adds.w	r5, ip, r5
   102d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   102d8:	f080 8088 	bcs.w	103ec <__udivmoddi4+0x2bc>
   102dc:	42a8      	cmp	r0, r5
   102de:	f240 8085 	bls.w	103ec <__udivmoddi4+0x2bc>
   102e2:	f1a8 0802 	sub.w	r8, r8, #2
   102e6:	4465      	add	r5, ip
   102e8:	1a2d      	subs	r5, r5, r0
   102ea:	b2a4      	uxth	r4, r4
   102ec:	fbb5 f0f9 	udiv	r0, r5, r9
   102f0:	fb09 5510 	mls	r5, r9, r0, r5
   102f4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
   102f8:	fb00 fe0e 	mul.w	lr, r0, lr
   102fc:	45ae      	cmp	lr, r5
   102fe:	d908      	bls.n	10312 <__udivmoddi4+0x1e2>
   10300:	eb1c 0505 	adds.w	r5, ip, r5
   10304:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   10308:	d26c      	bcs.n	103e4 <__udivmoddi4+0x2b4>
   1030a:	45ae      	cmp	lr, r5
   1030c:	d96a      	bls.n	103e4 <__udivmoddi4+0x2b4>
   1030e:	3802      	subs	r0, #2
   10310:	4465      	add	r5, ip
   10312:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   10316:	fba0 9402 	umull	r9, r4, r0, r2
   1031a:	eba5 050e 	sub.w	r5, r5, lr
   1031e:	42a5      	cmp	r5, r4
   10320:	46c8      	mov	r8, r9
   10322:	46a6      	mov	lr, r4
   10324:	d356      	bcc.n	103d4 <__udivmoddi4+0x2a4>
   10326:	d053      	beq.n	103d0 <__udivmoddi4+0x2a0>
   10328:	b15e      	cbz	r6, 10342 <__udivmoddi4+0x212>
   1032a:	ebb3 0208 	subs.w	r2, r3, r8
   1032e:	eb65 050e 	sbc.w	r5, r5, lr
   10332:	fa05 f707 	lsl.w	r7, r5, r7
   10336:	fa22 f301 	lsr.w	r3, r2, r1
   1033a:	40cd      	lsrs	r5, r1
   1033c:	431f      	orrs	r7, r3
   1033e:	e9c6 7500 	strd	r7, r5, [r6]
   10342:	2100      	movs	r1, #0
   10344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10348:	f1c2 0320 	rsb	r3, r2, #32
   1034c:	fa20 f103 	lsr.w	r1, r0, r3
   10350:	fa0c fc02 	lsl.w	ip, ip, r2
   10354:	fa25 f303 	lsr.w	r3, r5, r3
   10358:	4095      	lsls	r5, r2
   1035a:	430d      	orrs	r5, r1
   1035c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   10360:	fa1f fe8c 	uxth.w	lr, ip
   10364:	fbb3 f1f7 	udiv	r1, r3, r7
   10368:	fb07 3011 	mls	r0, r7, r1, r3
   1036c:	0c2b      	lsrs	r3, r5, #16
   1036e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
   10372:	fb01 f00e 	mul.w	r0, r1, lr
   10376:	4298      	cmp	r0, r3
   10378:	fa04 f402 	lsl.w	r4, r4, r2
   1037c:	d908      	bls.n	10390 <__udivmoddi4+0x260>
   1037e:	eb1c 0303 	adds.w	r3, ip, r3
   10382:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
   10386:	d22f      	bcs.n	103e8 <__udivmoddi4+0x2b8>
   10388:	4298      	cmp	r0, r3
   1038a:	d92d      	bls.n	103e8 <__udivmoddi4+0x2b8>
   1038c:	3902      	subs	r1, #2
   1038e:	4463      	add	r3, ip
   10390:	1a1b      	subs	r3, r3, r0
   10392:	b2ad      	uxth	r5, r5
   10394:	fbb3 f0f7 	udiv	r0, r3, r7
   10398:	fb07 3310 	mls	r3, r7, r0, r3
   1039c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
   103a0:	fb00 f30e 	mul.w	r3, r0, lr
   103a4:	42ab      	cmp	r3, r5
   103a6:	d908      	bls.n	103ba <__udivmoddi4+0x28a>
   103a8:	eb1c 0505 	adds.w	r5, ip, r5
   103ac:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   103b0:	d216      	bcs.n	103e0 <__udivmoddi4+0x2b0>
   103b2:	42ab      	cmp	r3, r5
   103b4:	d914      	bls.n	103e0 <__udivmoddi4+0x2b0>
   103b6:	3802      	subs	r0, #2
   103b8:	4465      	add	r5, ip
   103ba:	1aed      	subs	r5, r5, r3
   103bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   103c0:	e738      	b.n	10234 <__udivmoddi4+0x104>
   103c2:	4631      	mov	r1, r6
   103c4:	4630      	mov	r0, r6
   103c6:	e707      	b.n	101d8 <__udivmoddi4+0xa8>
   103c8:	4686      	mov	lr, r0
   103ca:	e6e5      	b.n	10198 <__udivmoddi4+0x68>
   103cc:	4618      	mov	r0, r3
   103ce:	e6fa      	b.n	101c6 <__udivmoddi4+0x96>
   103d0:	454b      	cmp	r3, r9
   103d2:	d2a9      	bcs.n	10328 <__udivmoddi4+0x1f8>
   103d4:	ebb9 0802 	subs.w	r8, r9, r2
   103d8:	eb64 0e0c 	sbc.w	lr, r4, ip
   103dc:	3801      	subs	r0, #1
   103de:	e7a3      	b.n	10328 <__udivmoddi4+0x1f8>
   103e0:	4640      	mov	r0, r8
   103e2:	e7ea      	b.n	103ba <__udivmoddi4+0x28a>
   103e4:	4620      	mov	r0, r4
   103e6:	e794      	b.n	10312 <__udivmoddi4+0x1e2>
   103e8:	4641      	mov	r1, r8
   103ea:	e7d1      	b.n	10390 <__udivmoddi4+0x260>
   103ec:	46d0      	mov	r8, sl
   103ee:	e77b      	b.n	102e8 <__udivmoddi4+0x1b8>
   103f0:	3b02      	subs	r3, #2
   103f2:	4465      	add	r5, ip
   103f4:	e732      	b.n	1025c <__udivmoddi4+0x12c>
   103f6:	4608      	mov	r0, r1
   103f8:	e709      	b.n	1020e <__udivmoddi4+0xde>
   103fa:	4464      	add	r4, ip
   103fc:	3802      	subs	r0, #2
   103fe:	e742      	b.n	10286 <__udivmoddi4+0x156>

00010400 <__aeabi_idiv0>:
   10400:	4770      	bx	lr
   10402:	bf00      	nop
   10404:	0000      	movs	r0, r0
	...

00010408 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
   10408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
   1040c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
   10410:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
   10412:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
   10414:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
   10416:	42a6      	cmp	r6, r4
{
   10418:	4688      	mov	r8, r1
   1041a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
   1041c:	d818      	bhi.n	10450 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   1041e:	4d1c      	ldr	r5, [pc, #112]	; (10490 <ull_drift_ticks_get+0x88>)
   10420:	fba3 0105 	umull	r0, r1, r3, r5
   10424:	a318      	add	r3, pc, #96	; (adr r3, 10488 <ull_drift_ticks_get+0x80>)
   10426:	e9d3 2300 	ldrd	r2, r3, [r3]
   1042a:	f7ff fe69 	bl	10100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   1042e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
   10430:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   10434:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
   10438:	a313      	add	r3, pc, #76	; (adr r3, 10488 <ull_drift_ticks_get+0x80>)
   1043a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1043e:	fba4 0105 	umull	r0, r1, r4, r5
   10442:	f7ff fe5d 	bl	10100 <__aeabi_uldivmod>
   10446:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   1044a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
   1044c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   10450:	4c0f      	ldr	r4, [pc, #60]	; (10490 <ull_drift_ticks_get+0x88>)
   10452:	a30d      	add	r3, pc, #52	; (adr r3, 10488 <ull_drift_ticks_get+0x80>)
   10454:	e9d3 2300 	ldrd	r2, r3, [r3]
   10458:	fba6 0104 	umull	r0, r1, r6, r4
   1045c:	f7ff fe50 	bl	10100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   10460:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
   10464:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
   10468:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
   1046c:	a306      	add	r3, pc, #24	; (adr r3, 10488 <ull_drift_ticks_get+0x80>)
   1046e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10472:	fba1 0104 	umull	r0, r1, r1, r4
   10476:	f7ff fe43 	bl	10100 <__aeabi_uldivmod>
   1047a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
   1047e:	6038      	str	r0, [r7, #0]
}
   10480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10484:	f3af 8000 	nop.w
   10488:	1afd498d 	.word	0x1afd498d
   1048c:	00000007 	.word	0x00000007
   10490:	3b9aca00 	.word	0x3b9aca00
   10494:	00000000 	.word	0x00000000

00010498 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
   10498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1049c:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
   1049e:	2800      	cmp	r0, #0
   104a0:	f000 815c 	beq.w	1075c <ll_adv_enable+0x2c4>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
   104a4:	4cba      	ldr	r4, [pc, #744]	; (10790 <ll_adv_enable+0x2f8>)
   104a6:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
   104aa:	f016 0601 	ands.w	r6, r6, #1
   104ae:	d136      	bne.n	1051e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   104b0:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   104b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	ull_filter_adv_update(lll->filter_policy);
   104b8:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
   104bc:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   104be:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   104c2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   104c6:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
   104ca:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   104ce:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   104d2:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   104d6:	f011 ff43 	bl	22360 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   104da:	f894 004a 	ldrb.w	r0, [r4, #74]	; 0x4a
   104de:	0741      	lsls	r1, r0, #29
   104e0:	f100 8121 	bmi.w	10726 <ll_adv_enable+0x28e>
	if (pdu_adv_to_update) {
   104e4:	f1b8 0f00 	cmp.w	r8, #0
   104e8:	d011      	beq.n	1050e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
   104ea:	48a9      	ldr	r0, [pc, #676]	; (10790 <ll_adv_enable+0x2f8>)
   104ec:	4641      	mov	r1, r8
   104ee:	f00c fb97 	bl	1cc20 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
   104f2:	f898 3000 	ldrb.w	r3, [r8]
   104f6:	065a      	lsls	r2, r3, #25
   104f8:	d505      	bpl.n	10506 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
   104fa:	2106      	movs	r1, #6
   104fc:	f007 fed4 	bl	182a8 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
   10500:	2800      	cmp	r0, #0
   10502:	f000 81f5 	beq.w	108f0 <ll_adv_enable+0x458>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
   10506:	48a2      	ldr	r0, [pc, #648]	; (10790 <ll_adv_enable+0x2f8>)
   10508:	4649      	mov	r1, r9
   1050a:	f00c fb89 	bl	1cc20 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   1050e:	f898 3000 	ldrb.w	r3, [r8]
   10512:	f013 0f0e 	tst.w	r3, #14
   10516:	f040 80df 	bne.w	106d8 <ll_adv_enable+0x240>
		if (lll->conn) {
   1051a:	6a23      	ldr	r3, [r4, #32]
   1051c:	b123      	cbz	r3, 10528 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1051e:	260c      	movs	r6, #12
}
   10520:	4630      	mov	r0, r6
   10522:	b00f      	add	sp, #60	; 0x3c
   10524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
   10528:	f00b fc40 	bl	1bdac <ll_rx_link_alloc>
		if (!link) {
   1052c:	4682      	mov	sl, r0
   1052e:	2800      	cmp	r0, #0
   10530:	f000 81ed 	beq.w	1090e <ll_adv_enable+0x476>
		node_rx = ll_rx_alloc();
   10534:	f00b fc46 	bl	1bdc4 <ll_rx_alloc>
		if (!node_rx) {
   10538:	4683      	mov	fp, r0
   1053a:	2800      	cmp	r0, #0
   1053c:	f000 81ec 	beq.w	10918 <ll_adv_enable+0x480>
		conn = ll_conn_acquire();
   10540:	f00d f98e 	bl	1d860 <ll_conn_acquire>
		if (!conn) {
   10544:	4605      	mov	r5, r0
   10546:	2800      	cmp	r0, #0
   10548:	f000 81e3 	beq.w	10912 <ll_adv_enable+0x47a>
		if (!conn_lll->link_tx_free) {
   1054c:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
   1054e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   10552:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
   10554:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
   10558:	2800      	cmp	r0, #0
   1055a:	f000 81d4 	beq.w	10906 <ll_adv_enable+0x46e>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
   1055e:	f105 0268 	add.w	r2, r5, #104	; 0x68
   10562:	f105 0164 	add.w	r1, r5, #100	; 0x64
   10566:	930b      	str	r3, [sp, #44]	; 0x2c
   10568:	f007 feaa 	bl	182c0 <memq_init>
			conn_lll->phy_tx = PHY_1M;
   1056c:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   10570:	4b88      	ldr	r3, [pc, #544]	; (10794 <ll_adv_enable+0x2fc>)
			conn_lll->phy_tx = PHY_1M;
   10572:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
   10576:	f022 0207 	bic.w	r2, r2, #7
   1057a:	f442 7288 	orr.w	r2, r2, #272	; 0x110
   1057e:	f042 0201 	orr.w	r2, r2, #1
   10582:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
   10586:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1058a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
   1058e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10592:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
   10596:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
   1059a:	f022 0207 	bic.w	r2, r2, #7
   1059e:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->slave.initiated = 0;
   105a2:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
   105a6:	f022 0207 	bic.w	r2, r2, #7
   105aa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
   105ae:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
   105b2:	f022 0207 	bic.w	r2, r2, #7
   105b6:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   105ba:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
   105be:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   105c0:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
   105c4:	2206      	movs	r2, #6
   105c6:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->slave.window_widening_event_us = 0;
   105ca:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
   105ce:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
   105d0:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
   105d4:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
   105d6:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
   105d8:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
   105dc:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
   105de:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
   105e2:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
   105e6:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
   105ea:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
   105ee:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
   105f2:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
   105f6:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
   105fa:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
   105fe:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
   10602:	f00a fd03 	bl	1b00c <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   10606:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
   1060a:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
   1060e:	f022 0203 	bic.w	r2, r2, #3
   10612:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   10616:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
   1061a:	f8a5 7140 	strh.w	r7, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
   1061e:	f022 0218 	bic.w	r2, r2, #24
   10622:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   10626:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
   1062a:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
   1062e:	f022 0207 	bic.w	r2, r2, #7
   10632:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
   10636:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
   1063a:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
   1063e:	f367 1204 	bfi	r2, r7, #4, #1
   10642:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
   10646:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
   1064a:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
   1064e:	f367 02c3 	bfi	r2, r7, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
   10652:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
   10656:	2100      	movs	r1, #0
   10658:	2000      	movs	r0, #0
   1065a:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
   1065e:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->slave.llcp_type = 0U;
   10662:	f885 70d9 	strb.w	r7, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
   10666:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->slave.ticks_to_offset = 0;
   1066a:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
   1066e:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
   10672:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
   10676:	f00d fc35 	bl	1dee4 <ull_conn_default_tx_octets_get>
   1067a:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
   1067e:	f00d fc37 	bl	1def0 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   10682:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
   10686:	4a44      	ldr	r2, [pc, #272]	; (10798 <ll_adv_enable+0x300>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
   10688:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
   1068c:	400a      	ands	r2, r1
   1068e:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
   10692:	f00d fc33 	bl	1defc <ull_conn_default_phy_tx_get>
   10696:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
   1069a:	f360 0202 	bfi	r2, r0, #0, #3
   1069e:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   106a2:	f00d fc31 	bl	1df08 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
   106a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   106a8:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   106aa:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   106ae:	f8c5 71c4 	str.w	r7, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   106b2:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
   106b6:	e9c4 ab10 	strd	sl, fp, [r4, #64]	; 0x40
		conn->tx_data = conn->tx_data_last = 0;
   106ba:	e9c5 7774 	strd	r7, r7, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
   106be:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
   106c2:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
   106c6:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
   106c8:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
   106ca:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
   106ce:	f012 fe83 	bl	233d8 <lll_clock_wait>
		if (err) {
   106d2:	2800      	cmp	r0, #0
   106d4:	f040 810e 	bne.w	108f4 <ll_adv_enable+0x45c>
	uint8_t ch_map = lll->chan_map;
   106d8:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   106dc:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
   106de:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   106e2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
   106e6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
   106ea:	f007 ff63 	bl	185b4 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
   106ee:	b370      	cbz	r0, 1074e <ll_adv_enable+0x2b6>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   106f0:	f898 2000 	ldrb.w	r2, [r8]
   106f4:	f002 020f 	and.w	r2, r2, #15
   106f8:	2a02      	cmp	r2, #2
   106fa:	d04f      	beq.n	1079c <ll_adv_enable+0x304>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   106fc:	2a01      	cmp	r2, #1
   106fe:	f000 80fd 	beq.w	108fc <ll_adv_enable+0x464>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
   10702:	f899 3001 	ldrb.w	r3, [r9, #1]
   10706:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
   10708:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
   1070a:	2a00      	cmp	r2, #0
   1070c:	f000 80e5 	beq.w	108da <ll_adv_enable+0x442>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
   10710:	2a06      	cmp	r2, #6
   10712:	f000 8106 	beq.w	10922 <ll_adv_enable+0x48a>
   10716:	f44f 71da 	mov.w	r1, #436	; 0x1b4
   1071a:	f44f 731b 	mov.w	r3, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
   1071e:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
   10720:	fb01 3100 	mla	r1, r1, r0, r3
   10724:	e046      	b.n	107b4 <ll_adv_enable+0x31c>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   10726:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1072a:	4632      	mov	r2, r6
   1072c:	f104 014b 	add.w	r1, r4, #75	; 0x4b
   10730:	f011 ff80 	bl	22634 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
   10734:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
   10736:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
   1073a:	f43f aed3 	beq.w	104e4 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
   1073e:	4630      	mov	r0, r6
   10740:	f011 fe28 	bl	22394 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
   10744:	f1b8 0f00 	cmp.w	r8, #0
   10748:	f47f aecf 	bne.w	104ea <ll_adv_enable+0x52>
   1074c:	e6df      	b.n	1050e <ll_adv_enable+0x76>
	if (adv->lll.conn) {
   1074e:	6a23      	ldr	r3, [r4, #32]
   10750:	2b00      	cmp	r3, #0
   10752:	f43f aee4 	beq.w	1051e <ll_adv_enable+0x86>
		conn_release(adv);
   10756:	f00b ffd9 	bl	1c70c <conn_release.constprop.0>
   1075a:	e6e0      	b.n	1051e <ll_adv_enable+0x86>
	if (!adv || !adv->is_enabled) {
   1075c:	4b0c      	ldr	r3, [pc, #48]	; (10790 <ll_adv_enable+0x2f8>)
   1075e:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   10762:	07d4      	lsls	r4, r2, #31
   10764:	f57f aedb 	bpl.w	1051e <ll_adv_enable+0x86>
	if (!adv) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
   10768:	6a1a      	ldr	r2, [r3, #32]
   1076a:	b15a      	cbz	r2, 10784 <ll_adv_enable+0x2ec>
		/* Indicate to LLL that a cancellation is requested */
		adv->lll.conn->slave.cancelled = 1U;
   1076c:	f892 1020 	ldrb.w	r1, [r2, #32]
   10770:	f041 0102 	orr.w	r1, r1, #2
   10774:	f882 1020 	strb.w	r1, [r2, #32]
		cpu_dmb();

		/* Check if a connection was initiated (connection
		 * establishment race between LLL and ULL).
		 */
		if (unlikely(adv->lll.conn->slave.initiated)) {
   10778:	6a1b      	ldr	r3, [r3, #32]
   1077a:	f893 3020 	ldrb.w	r3, [r3, #32]
   1077e:	07d8      	lsls	r0, r3, #31
   10780:	f53f aecd 	bmi.w	1051e <ll_adv_enable+0x86>
}
   10784:	b00f      	add	sp, #60	; 0x3c
   10786:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1078a:	f00c b801 	b.w	1c790 <disable.part.0>
   1078e:	bf00      	nop
   10790:	20001c14 	.word	0x20001c14
   10794:	01480148 	.word	0x01480148
   10798:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
   1079c:	f898 3001 	ldrb.w	r3, [r8, #1]
   107a0:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
   107a2:	00db      	lsls	r3, r3, #3
   107a4:	fb00 f303 	mul.w	r3, r0, r3
   107a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
   107ac:	3801      	subs	r0, #1
   107ae:	2164      	movs	r1, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
   107b0:	fb01 3100 	mla	r1, r1, r0, r3
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   107b4:	4862      	ldr	r0, [pc, #392]	; (10940 <ll_adv_enable+0x4a8>)
   107b6:	61e4      	str	r4, [r4, #28]
   107b8:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
   107ba:	2331      	movs	r3, #49	; 0x31
   107bc:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
   107be:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   107c2:	a35d      	add	r3, pc, #372	; (adr r3, 10938 <ll_adv_enable+0x4a0>)
   107c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   107c8:	fba1 0100 	umull	r0, r1, r1, r0
	hdr->ref = 0U;
   107cc:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
   107ce:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
   107d0:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
   107d2:	f7ff fc95 	bl	10100 <__aeabi_uldivmod>
   107d6:	6120      	str	r0, [r4, #16]
	uint16_t interval = adv->interval;
   107d8:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
	ticks_anchor = ticker_ticks_now_get();
   107dc:	f009 f800 	bl	197e0 <ticker_ticks_now_get>
   107e0:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   107e2:	b947      	cbnz	r7, 107f6 <ll_adv_enable+0x35e>
   107e4:	f898 5000 	ldrb.w	r5, [r8]
   107e8:	f005 050f 	and.w	r5, r5, #15
   107ec:	f1a5 0501 	sub.w	r5, r5, #1
   107f0:	fab5 f585 	clz	r5, r5
   107f4:	096d      	lsrs	r5, r5, #5
   107f6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   107fa:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
   107fe:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
   10802:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
   10806:	d03e      	beq.n	10886 <ll_adv_enable+0x3ee>
				   (adv->ull.ticks_slot + ticks_slot_overhead),
   10808:	6923      	ldr	r3, [r4, #16]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1080a:	4a4e      	ldr	r2, [pc, #312]	; (10944 <ll_adv_enable+0x4ac>)
   1080c:	f8df 8138 	ldr.w	r8, [pc, #312]	; 10948 <ll_adv_enable+0x4b0>
   10810:	9304      	str	r3, [sp, #16]
   10812:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
   10814:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10816:	af0d      	add	r7, sp, #52	; 0x34
   10818:	9301      	str	r3, [sp, #4]
   1081a:	9205      	str	r2, [sp, #20]
   1081c:	2103      	movs	r1, #3
   1081e:	e9cd 0002 	strd	r0, r0, [sp, #8]
   10822:	9406      	str	r4, [sp, #24]
   10824:	464b      	mov	r3, r9
   10826:	9000      	str	r0, [sp, #0]
   10828:	9708      	str	r7, [sp, #32]
   1082a:	f8cd 801c 	str.w	r8, [sp, #28]
   1082e:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
   10830:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10832:	f008 ff09 	bl	19648 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
   10836:	4639      	mov	r1, r7
   10838:	f00b fb48 	bl	1becc <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
   1083c:	2800      	cmp	r0, #0
   1083e:	d186      	bne.n	1074e <ll_adv_enable+0x2b6>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10840:	4a42      	ldr	r2, [pc, #264]	; (1094c <ll_adv_enable+0x4b4>)
   10842:	9205      	str	r2, [sp, #20]
   10844:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
   10848:	9200      	str	r2, [sp, #0]
   1084a:	e9cd 0003 	strd	r0, r0, [sp, #12]
   1084e:	e9cd 0001 	strd	r0, r0, [sp, #4]
   10852:	f8cd 801c 	str.w	r8, [sp, #28]
   10856:	9708      	str	r7, [sp, #32]
   10858:	9406      	str	r4, [sp, #24]
   1085a:	464b      	mov	r3, r9
   1085c:	2201      	movs	r2, #1
   1085e:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
   10860:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   10862:	f008 fef1 	bl	19648 <ticker_start>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10866:	4639      	mov	r1, r7
   10868:	f00b fb30 	bl	1becc <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
   1086c:	2800      	cmp	r0, #0
   1086e:	f47f af6e 	bne.w	1074e <ll_adv_enable+0x2b6>
	adv->is_enabled = 1;
   10872:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
}
   10876:	4630      	mov	r0, r6
	adv->is_enabled = 1;
   10878:	f043 0301 	orr.w	r3, r3, #1
   1087c:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   10880:	b00f      	add	sp, #60	; 0x3c
   10882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ret = ticker_start_ext(
   10886:	9406      	str	r4, [sp, #24]
   10888:	9502      	str	r5, [sp, #8]
		const uint32_t ticks_slot = adv->ull.ticks_slot +
   1088a:	6923      	ldr	r3, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
   1088c:	4a30      	ldr	r2, [pc, #192]	; (10950 <ll_adv_enable+0x4b8>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   1088e:	4831      	ldr	r0, [pc, #196]	; (10954 <ll_adv_enable+0x4bc>)
		ret = ticker_start_ext(
   10890:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
   10892:	f203 1347 	addw	r3, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
   10896:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   10898:	fba7 0100 	umull	r0, r1, r7, r0
   1089c:	2391      	movs	r3, #145	; 0x91
   1089e:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
   108a2:	4b29      	ldr	r3, [pc, #164]	; (10948 <ll_adv_enable+0x4b0>)
   108a4:	9307      	str	r3, [sp, #28]
   108a6:	4b27      	ldr	r3, [pc, #156]	; (10944 <ll_adv_enable+0x4ac>)
   108a8:	9305      	str	r3, [sp, #20]
   108aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   108ae:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
   108b0:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
   108b4:	9303      	str	r3, [sp, #12]
   108b6:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   108b8:	a31f      	add	r3, pc, #124	; (adr r3, 10938 <ll_adv_enable+0x4a0>)
   108ba:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
   108be:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
   108c2:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
   108c4:	f7ff fc1c 	bl	10100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
   108c8:	464b      	mov	r3, r9
   108ca:	e9cd 5000 	strd	r5, r0, [sp]
   108ce:	4642      	mov	r2, r8
   108d0:	4628      	mov	r0, r5
   108d2:	2103      	movs	r1, #3
   108d4:	f008 fe62 	bl	1959c <ticker_start_ext>
   108d8:	e7c5      	b.n	10866 <ll_adv_enable+0x3ce>
				adv_size += pdu_adv->len;
   108da:	f898 1001 	ldrb.w	r1, [r8, #1]
   108de:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
   108e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
   108e4:	00c9      	lsls	r1, r1, #3
   108e6:	f503 734d 	add.w	r3, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
   108ea:	f501 719a 	add.w	r1, r1, #308	; 0x134
   108ee:	e716      	b.n	1071e <ll_adv_enable+0x286>
			return BT_HCI_ERR_INVALID_PARAM;
   108f0:	2612      	movs	r6, #18
   108f2:	e615      	b.n	10520 <ll_adv_enable+0x88>
			conn_release(adv);
   108f4:	f00b ff0a 	bl	1c70c <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
   108f8:	2603      	movs	r6, #3
   108fa:	e611      	b.n	10520 <ll_adv_enable+0x88>
   108fc:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
   10900:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   10904:	e70b      	b.n	1071e <ll_adv_enable+0x286>
			conn_lll->link_tx_free = &conn_lll->link_tx;
   10906:	f105 006c 	add.w	r0, r5, #108	; 0x6c
   1090a:	6768      	str	r0, [r5, #116]	; 0x74
   1090c:	e627      	b.n	1055e <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1090e:	2607      	movs	r6, #7
   10910:	e606      	b.n	10520 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
   10912:	4658      	mov	r0, fp
   10914:	f00b fa5c 	bl	1bdd0 <ll_rx_release>
			ll_rx_link_release(link);
   10918:	4650      	mov	r0, sl
   1091a:	f00b fa4d 	bl	1bdb8 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1091e:	2607      	movs	r6, #7
   10920:	e5fe      	b.n	10520 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
   10922:	f898 2001 	ldrb.w	r2, [r8, #1]
   10926:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
   10928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
   1092c:	00d1      	lsls	r1, r2, #3
   1092e:	f503 734d 	add.w	r3, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
   10932:	f501 719a 	add.w	r1, r1, #308	; 0x134
   10936:	e6f2      	b.n	1071e <ll_adv_enable+0x286>
   10938:	1afd498d 	.word	0x1afd498d
   1093c:	00000007 	.word	0x00000007
   10940:	3b9aca00 	.word	0x3b9aca00
   10944:	0001c495 	.word	0x0001c495
   10948:	0001b0ad 	.word	0x0001b0ad
   1094c:	0001c379 	.word	0x0001c379
   10950:	20001c68 	.word	0x20001c68
   10954:	84e72a00 	.word	0x84e72a00

00010958 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
   10958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
   1095c:	4dc2      	ldr	r5, [pc, #776]	; (10c68 <event_conn_upd_prep+0x310>)

	/* set mutex */
	if (!conn_upd) {
   1095e:	682b      	ldr	r3, [r5, #0]
{
   10960:	b08b      	sub	sp, #44	; 0x2c
   10962:	4604      	mov	r4, r0
   10964:	460f      	mov	r7, r1
   10966:	4690      	mov	r8, r2
	if (!conn_upd) {
   10968:	2b00      	cmp	r3, #0
   1096a:	f000 820c 	beq.w	10d86 <event_conn_upd_prep+0x42e>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   1096e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   10970:	8e66      	ldrh	r6, [r4, #50]	; 0x32
   10972:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   10974:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   10978:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   1097a:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
   1097e:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
   10980:	f040 818e 	bne.w	10ca0 <event_conn_upd_prep+0x348>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   10984:	f8b4 90e8 	ldrh.w	r9, [r4, #232]	; 0xe8
   10988:	eba6 0209 	sub.w	r2, r6, r9
   1098c:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
   10990:	0412      	lsls	r2, r2, #16
   10992:	f100 8253 	bmi.w	10e3c <event_conn_upd_prep+0x4e4>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10996:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   1099a:	2a00      	cmp	r2, #0
   1099c:	f2c0 812b 	blt.w	10bf6 <event_conn_upd_prep+0x29e>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
   109a0:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   109a4:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   109a8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   109ac:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
   109b0:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
   109b4:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   109b8:	4293      	cmp	r3, r2
   109ba:	d006      	beq.n	109ca <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   109bc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   109c0:	f003 0307 	and.w	r3, r3, #7
   109c4:	2b05      	cmp	r3, #5
   109c6:	f000 8244 	beq.w	10e52 <event_conn_upd_prep+0x4fa>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
   109ca:	682b      	ldr	r3, [r5, #0]
   109cc:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
   109ce:	bf04      	itt	eq
   109d0:	2300      	moveq	r3, #0
   109d2:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
   109d4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   109d8:	2d00      	cmp	r5, #0
   109da:	f000 8130 	beq.w	10c3e <event_conn_upd_prep+0x2e6>
   109de:	6828      	ldr	r0, [r5, #0]
   109e0:	2800      	cmp	r0, #0
   109e2:	f000 812c 	beq.w	10c3e <event_conn_upd_prep+0x2e6>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
   109e6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   109e8:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
		conn->llcp_rx = rx->hdr.link->mem;
   109ec:	6841      	ldr	r1, [r0, #4]
   109ee:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
   109f2:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
   109f4:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		if ((conn->llcp_cu.interval != lll->interval) ||
   109f8:	f000 8105 	beq.w	10c06 <event_conn_upd_prep+0x2ae>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   109fc:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
   10a00:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
   10a04:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   10a06:	2316      	movs	r3, #22
   10a08:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
   10a0a:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
   10a0c:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
   10a10:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
   10a12:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
   10a14:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
   10a16:	4629      	mov	r1, r5
   10a18:	f00b f9e0 	bl	1bddc <ll_rx_put>
		ll_rx_sched();
   10a1c:	f00b f9e8 	bl	1bdf0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
   10a20:	68a3      	ldr	r3, [r4, #8]
   10a22:	2b00      	cmp	r3, #0
   10a24:	da0a      	bge.n	10a3c <event_conn_upd_prep+0xe4>
			uint32_t ticks_prepare_to_start =
   10a26:	68e1      	ldr	r1, [r4, #12]
   10a28:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
   10a2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10a2e:	4291      	cmp	r1, r2
   10a30:	bf2c      	ite	cs
   10a32:	4488      	addcs	r8, r1
   10a34:	4490      	addcc	r8, r2
   10a36:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
   10a38:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
   10a3c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
   10a3e:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
   10a42:	fb10 f00b 	smulbb	r0, r0, fp
   10a46:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
   10a48:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
   10a4c:	fb15 f301 	smulbb	r3, r5, r1
   10a50:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
   10a52:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
   10a54:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
   10a58:	f080 8183 	bcs.w	10d62 <event_conn_upd_prep+0x40a>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
   10a5c:	1a1b      	subs	r3, r3, r0
   10a5e:	4983      	ldr	r1, [pc, #524]	; (10c6c <event_conn_upd_prep+0x314>)
   10a60:	f240 40e2 	movw	r0, #1250	; 0x4e2
   10a64:	fb03 f000 	mul.w	r0, r3, r0
   10a68:	fba0 0101 	umull	r0, r1, r0, r1
   10a6c:	a37c      	add	r3, pc, #496	; (adr r3, 10c60 <event_conn_upd_prep+0x308>)
   10a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10a72:	f7ff fb45 	bl	10100 <__aeabi_uldivmod>
   10a76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10a7a:	4480      	add	r8, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
   10a7c:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
   10a7e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
   10a82:	eba9 0906 	sub.w	r9, r9, r6
   10a86:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
   10a88:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
   10a8a:	444f      	add	r7, r9
   10a8c:	85e7      	strh	r7, [r4, #46]	; 0x2e
		} else if (lll->role) {
   10a8e:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
   10a90:	f240 47e2 	movw	r7, #1250	; 0x4e2
   10a94:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
   10a98:	f2c0 8177 	blt.w	10d8a <event_conn_upd_prep+0x432>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
   10a9c:	4a74      	ldr	r2, [pc, #464]	; (10c70 <event_conn_upd_prep+0x318>)
   10a9e:	4975      	ldr	r1, [pc, #468]	; (10c74 <event_conn_upd_prep+0x31c>)
   10aa0:	4875      	ldr	r0, [pc, #468]	; (10c78 <event_conn_upd_prep+0x320>)
   10aa2:	f640 23d5 	movw	r3, #2773	; 0xad5
   10aa6:	f017 f84c 	bl	27b42 <printk>
   10aaa:	4040      	eors	r0, r0
   10aac:	f380 8811 	msr	BASEPRI, r0
   10ab0:	f04f 0003 	mov.w	r0, #3
   10ab4:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
   10ab6:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
   10ab8:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10aba:	4a70      	ldr	r2, [pc, #448]	; (10c7c <event_conn_upd_prep+0x324>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   10abc:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10ac0:	486f      	ldr	r0, [pc, #444]	; (10c80 <event_conn_upd_prep+0x328>)
		lll->latency = conn->llcp_cu.latency;
   10ac2:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112
   10ac6:	85a1      	strh	r1, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   10ac8:	4432      	add	r2, r6
   10aca:	fbb2 f2f6 	udiv	r2, r2, r6
   10ace:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   10ad2:	f242 7210 	movw	r2, #10000	; 0x2710
   10ad6:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10ada:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   10adc:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10ade:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   10ae2:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
   10ae6:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   10aea:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10aec:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   10aee:	1d88      	adds	r0, r1, #6
   10af0:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
   10af2:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   10af6:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   10afa:	dd02      	ble.n	10b02 <event_conn_upd_prep+0x1aa>
				     (conn->apto_reload - (lll->latency + 6)) :
   10afc:	1a5b      	subs	r3, r3, r1
   10afe:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   10b00:	b29b      	uxth	r3, r3
   10b02:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
   10b06:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
   10b0a:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
   10b0c:	bf44      	itt	mi
   10b0e:	2300      	movmi	r3, #0
   10b10:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   10b14:	2102      	movs	r1, #2
   10b16:	2001      	movs	r0, #1
   10b18:	f014 fbe2 	bl	252e0 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   10b1c:	2200      	movs	r2, #0
   10b1e:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
   10b20:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
   10b22:	2001      	movs	r0, #1
   10b24:	f007 fc1c 	bl	18360 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10b28:	4956      	ldr	r1, [pc, #344]	; (10c84 <event_conn_upd_prep+0x32c>)
   10b2a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10b2e:	4620      	mov	r0, r4
   10b30:	f007 fba6 	bl	18280 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   10b34:	f100 0a03 	add.w	sl, r0, #3
   10b38:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
   10b3c:	4b52      	ldr	r3, [pc, #328]	; (10c88 <event_conn_upd_prep+0x330>)
   10b3e:	9400      	str	r4, [sp, #0]
   10b40:	4652      	mov	r2, sl
   10b42:	2101      	movs	r1, #1
   10b44:	2000      	movs	r0, #0
   10b46:	f008 fe09 	bl	1975c <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10b4a:	f030 0302 	bics.w	r3, r0, #2
   10b4e:	d00c      	beq.n	10b6a <event_conn_upd_prep+0x212>
   10b50:	4a47      	ldr	r2, [pc, #284]	; (10c70 <event_conn_upd_prep+0x318>)
   10b52:	494e      	ldr	r1, [pc, #312]	; (10c8c <event_conn_upd_prep+0x334>)
   10b54:	4848      	ldr	r0, [pc, #288]	; (10c78 <event_conn_upd_prep+0x320>)
   10b56:	f640 3304 	movw	r3, #2820	; 0xb04
   10b5a:	f016 fff2 	bl	27b42 <printk>
   10b5e:	4040      	eors	r0, r0
   10b60:	f380 8811 	msr	BASEPRI, r0
   10b64:	f04f 0003 	mov.w	r0, #3
   10b68:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
   10b6a:	4e40      	ldr	r6, [pc, #256]	; (10c6c <event_conn_upd_prep+0x314>)
   10b6c:	fbab 6b06 	umull	r6, fp, fp, r6
   10b70:	a33b      	add	r3, pc, #236	; (adr r3, 10c60 <event_conn_upd_prep+0x308>)
   10b72:	e9d3 2300 	ldrd	r2, r3, [r3]
   10b76:	4630      	mov	r0, r6
   10b78:	4659      	mov	r1, fp
   10b7a:	f7ff fac1 	bl	10100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10b7e:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
   10b80:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10b84:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
   10b86:	4842      	ldr	r0, [pc, #264]	; (10c90 <event_conn_upd_prep+0x338>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10b88:	6923      	ldr	r3, [r4, #16]
   10b8a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
   10b8c:	fba5 0100 	umull	r0, r1, r5, r0
   10b90:	2307      	movs	r3, #7
   10b92:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10b96:	4b3f      	ldr	r3, [pc, #252]	; (10c94 <event_conn_upd_prep+0x33c>)
   10b98:	9307      	str	r3, [sp, #28]
   10b9a:	4b3f      	ldr	r3, [pc, #252]	; (10c98 <event_conn_upd_prep+0x340>)
   10b9c:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
   10b9e:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10ba0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
   10ba4:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10ba8:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
   10baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10bae:	2300      	movs	r3, #0
   10bb0:	f7ff faa6 	bl	10100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
   10bb4:	4643      	mov	r3, r8
   10bb6:	e9cd 5001 	strd	r5, r0, [sp, #4]
   10bba:	9700      	str	r7, [sp, #0]
   10bbc:	4652      	mov	r2, sl
   10bbe:	2101      	movs	r1, #1
   10bc0:	2000      	movs	r0, #0
   10bc2:	f008 fd41 	bl	19648 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   10bc6:	f030 0302 	bics.w	r3, r0, #2
   10bca:	d00c      	beq.n	10be6 <event_conn_upd_prep+0x28e>
   10bcc:	4a28      	ldr	r2, [pc, #160]	; (10c70 <event_conn_upd_prep+0x318>)
   10bce:	492f      	ldr	r1, [pc, #188]	; (10c8c <event_conn_upd_prep+0x334>)
   10bd0:	4829      	ldr	r0, [pc, #164]	; (10c78 <event_conn_upd_prep+0x320>)
   10bd2:	f640 331e 	movw	r3, #2846	; 0xb1e
   10bd6:	f016 ffb4 	bl	27b42 <printk>
   10bda:	4040      	eors	r0, r0
   10bdc:	f380 8811 	msr	BASEPRI, r0
   10be0:	f04f 0003 	mov.w	r0, #3
   10be4:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
   10be6:	f1b9 0f00 	cmp.w	r9, #0
   10bea:	f040 812c 	bne.w	10e46 <event_conn_upd_prep+0x4ee>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
   10bee:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
   10bf0:	b00b      	add	sp, #44	; 0x2c
   10bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10bf6:	f894 20d9 	ldrb.w	r2, [r4, #217]	; 0xd9
   10bfa:	2a00      	cmp	r2, #0
   10bfc:	f43f aed0 	beq.w	109a0 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
   10c00:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   10c04:	e6d0      	b.n	109a8 <event_conn_upd_prep+0x50>
		if ((conn->llcp_cu.interval != lll->interval) ||
   10c06:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   10c08:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   10c0a:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
   10c0e:	f47f aef7 	bne.w	10a00 <event_conn_upd_prep+0xa8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
   10c12:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   10c16:	fb0c fe03 	mul.w	lr, ip, r3
   10c1a:	f242 7c10 	movw	ip, #10000	; 0x2710
   10c1e:	fb0c ec01 	mla	ip, ip, r1, lr
   10c22:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   10c26:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
   10c2a:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
   10c2e:	fa1f fc8c 	uxth.w	ip, ip
   10c32:	45e6      	cmp	lr, ip
   10c34:	f47f aee4 	bne.w	10a00 <event_conn_upd_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10c38:	2301      	movs	r3, #1
   10c3a:	712b      	strb	r3, [r5, #4]
   10c3c:	e6eb      	b.n	10a16 <event_conn_upd_prep+0xbe>
		LL_ASSERT(rx && rx->hdr.link);
   10c3e:	4a0c      	ldr	r2, [pc, #48]	; (10c70 <event_conn_upd_prep+0x318>)
   10c40:	4916      	ldr	r1, [pc, #88]	; (10c9c <event_conn_upd_prep+0x344>)
   10c42:	480d      	ldr	r0, [pc, #52]	; (10c78 <event_conn_upd_prep+0x320>)
   10c44:	f640 2359 	movw	r3, #2649	; 0xa59
   10c48:	f016 ff7b 	bl	27b42 <printk>
   10c4c:	4040      	eors	r0, r0
   10c4e:	f380 8811 	msr	BASEPRI, r0
   10c52:	f04f 0003 	mov.w	r0, #3
   10c56:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   10c58:	6828      	ldr	r0, [r5, #0]
   10c5a:	e6c4      	b.n	109e6 <event_conn_upd_prep+0x8e>
   10c5c:	f3af 8000 	nop.w
   10c60:	1afd498d 	.word	0x1afd498d
   10c64:	00000007 	.word	0x00000007
   10c68:	20001c88 	.word	0x20001c88
   10c6c:	3b9aca00 	.word	0x3b9aca00
   10c70:	0002be34 	.word	0x0002be34
   10c74:	0002b974 	.word	0x0002b974
   10c78:	0002b8dc 	.word	0x0002b8dc
   10c7c:	026259ff 	.word	0x026259ff
   10c80:	01c9c37f 	.word	0x01c9c37f
   10c84:	20000dc8 	.word	0x20000dc8
   10c88:	0001d111 	.word	0x0001d111
   10c8c:	0002bf14 	.word	0x0002bf14
   10c90:	1afd498d 	.word	0x1afd498d
   10c94:	0001d0b9 	.word	0x0001d0b9
   10c98:	00021841 	.word	0x00021841
   10c9c:	0002bf00 	.word	0x0002bf00
		rx = ll_pdu_rx_alloc_peek(1);
   10ca0:	2001      	movs	r0, #1
   10ca2:	f00b f8ab 	bl	1bdfc <ll_pdu_rx_alloc_peek>
		if (!rx) {
   10ca6:	4607      	mov	r7, r0
   10ca8:	2800      	cmp	r0, #0
   10caa:	f000 80d8 	beq.w	10e5e <event_conn_upd_prep+0x506>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10cae:	487e      	ldr	r0, [pc, #504]	; (10ea8 <event_conn_upd_prep+0x550>)
   10cb0:	f007 fab0 	bl	18214 <mem_acquire>
		if (!tx) {
   10cb4:	4605      	mov	r5, r0
   10cb6:	2800      	cmp	r0, #0
   10cb8:	f000 80d1 	beq.w	10e5e <event_conn_upd_prep+0x506>
		(void)ll_pdu_rx_alloc();
   10cbc:	f00b f8bc 	bl	1be38 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10cc0:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
   10cc2:	683a      	ldr	r2, [r7, #0]
   10cc4:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
   10cc8:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10cca:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
   10cce:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   10cd2:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10cd4:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
   10cd6:	230c      	movs	r3, #12
   10cd8:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
   10cda:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
   10cdc:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
   10ce0:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
   10ce2:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   10ce4:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
		conn->llcp.conn_upd.instant = event_counter +
   10ce8:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   10cea:	4b70      	ldr	r3, [pc, #448]	; (10eac <event_conn_upd_prep+0x554>)
   10cec:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
   10cf0:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
   10cf4:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
   10cf8:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   10cfa:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
   10cfe:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
   10d02:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10d06:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
   10d0a:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
   10d0e:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
   10d12:	3606      	adds	r6, #6
	    conn->tx_head &&
   10d14:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
   10d18:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10d1a:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
   10d1e:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10d22:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
   10d26:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
   10d2a:	2b00      	cmp	r3, #0
   10d2c:	d078      	beq.n	10e20 <event_conn_upd_prep+0x4c8>
	    !conn->llcp_enc.pause_tx &&
   10d2e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10d32:	0790      	lsls	r0, r2, #30
   10d34:	d474      	bmi.n	10e20 <event_conn_upd_prep+0x4c8>
	    !conn->llcp_phy.pause_tx &&
   10d36:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10d3a:	07d1      	lsls	r1, r2, #31
   10d3c:	d470      	bmi.n	10e20 <event_conn_upd_prep+0x4c8>
		if (conn->tx_head == conn->tx_data) {
   10d3e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10d42:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   10d44:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10d48:	f000 8094 	beq.w	10e74 <event_conn_upd_prep+0x51c>
		} else if (!conn->tx_ctrl) {
   10d4c:	2a00      	cmp	r2, #0
   10d4e:	d16a      	bne.n	10e26 <event_conn_upd_prep+0x4ce>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10d50:	791a      	ldrb	r2, [r3, #4]
   10d52:	f002 0203 	and.w	r2, r2, #3
   10d56:	2a03      	cmp	r2, #3
   10d58:	f000 8098 	beq.w	10e8c <event_conn_upd_prep+0x534>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   10d5c:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   10d60:	e063      	b.n	10e2a <event_conn_upd_prep+0x4d2>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   10d62:	fb05 0111 	mls	r1, r5, r1, r0
   10d66:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10d6a:	4851      	ldr	r0, [pc, #324]	; (10eb0 <event_conn_upd_prep+0x558>)
   10d6c:	b289      	uxth	r1, r1
   10d6e:	fb03 f101 	mul.w	r1, r3, r1
   10d72:	fba1 0100 	umull	r0, r1, r1, r0
   10d76:	a34a      	add	r3, pc, #296	; (adr r3, 10ea0 <event_conn_upd_prep+0x548>)
   10d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d7c:	f7ff f9c0 	bl	10100 <__aeabi_uldivmod>
   10d80:	eba8 0800 	sub.w	r8, r8, r0
   10d84:	e67a      	b.n	10a7c <event_conn_upd_prep+0x124>
		conn_upd_curr = conn;
   10d86:	6028      	str	r0, [r5, #0]
   10d88:	e5f1      	b.n	1096e <event_conn_upd_prep+0x16>
				lll->slave.window_widening_periodic_us *
   10d8a:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->slave.window_widening_prepare_us -=
   10d8c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   10d8e:	fb02 331b 	mls	r3, r2, fp, r3
   10d92:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
   10d94:	f012 fb72 	bl	2347c <lll_clock_ppm_local_get>
   10d98:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
   10d9a:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   10d9e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   10da2:	f012 fb6d 	bl	23480 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
   10da6:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
   10da8:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
   10dac:	4b41      	ldr	r3, [pc, #260]	; (10eb4 <event_conn_upd_prep+0x55c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   10dae:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
   10db2:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
   10db6:	f205 253f 	addw	r5, r5, #575	; 0x23f
   10dba:	fba3 3505 	umull	r3, r5, r3, r5
   10dbe:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
   10dc0:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
   10dc4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->slave.window_size_prepare_us =
   10dc6:	6522      	str	r2, [r4, #80]	; 0x50
				lll->slave.window_widening_periodic_us *
   10dc8:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
   10dcc:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
   10dce:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
   10dd0:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
   10dd2:	4293      	cmp	r3, r2
   10dd4:	bf28      	it	cs
   10dd6:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
   10dd8:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->slave.window_widening_periodic_us;
   10dda:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   10dde:	4d34      	ldr	r5, [pc, #208]	; (10eb0 <event_conn_upd_prep+0x558>)
			lll->slave.window_widening_prepare_us +=
   10de0:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->slave.ticks_to_offset = 0U;
   10de4:	2300      	movs	r3, #0
   10de6:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   10dea:	fba0 0105 	umull	r0, r1, r0, r5
   10dee:	a32c      	add	r3, pc, #176	; (adr r3, 10ea0 <event_conn_upd_prep+0x548>)
   10df0:	e9d3 2300 	ldrd	r2, r3, [r3]
   10df4:	f7ff f984 	bl	10100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   10df8:	492c      	ldr	r1, [pc, #176]	; (10eac <event_conn_upd_prep+0x554>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
   10dfa:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
   10dfe:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
   10e02:	fba1 3000 	umull	r3, r0, r1, r0
   10e06:	0a80      	lsrs	r0, r0, #10
   10e08:	fb07 f000 	mul.w	r0, r7, r0
   10e0c:	a324      	add	r3, pc, #144	; (adr r3, 10ea0 <event_conn_upd_prep+0x548>)
   10e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e12:	fba0 0105 	umull	r0, r1, r0, r5
   10e16:	f7ff f973 	bl	10100 <__aeabi_uldivmod>
   10e1a:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
   10e1e:	e64c      	b.n	10aba <event_conn_upd_prep+0x162>
		if (!conn->tx_ctrl) {
   10e20:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10e24:	b302      	cbz	r2, 10e68 <event_conn_upd_prep+0x510>
	tx->next = conn->tx_ctrl_last->next;
   10e26:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10e2a:	681a      	ldr	r2, [r3, #0]
   10e2c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   10e2e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   10e30:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   10e32:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10e36:	b90b      	cbnz	r3, 10e3c <event_conn_upd_prep+0x4e4>
		conn->tx_data_last = tx;
   10e38:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
   10e3c:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
   10e40:	b00b      	add	sp, #44	; 0x2c
   10e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
   10e46:	2201      	movs	r2, #1
   10e48:	2102      	movs	r1, #2
   10e4a:	4610      	mov	r0, r2
   10e4c:	f007 fa88 	bl	18360 <mayfly_enable>
   10e50:	e6cd      	b.n	10bee <event_conn_upd_prep+0x296>
			conn->procedure_expire = 0U;
   10e52:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   10e54:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
   10e58:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   10e5c:	e5b5      	b.n	109ca <event_conn_upd_prep+0x72>
			return -ENOBUFS;
   10e5e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10e62:	b00b      	add	sp, #44	; 0x2c
   10e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
   10e68:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   10e6a:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10e6e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   10e72:	e7e0      	b.n	10e36 <event_conn_upd_prep+0x4de>
			conn->tx_data = conn->tx_data->next;
   10e74:	6819      	ldr	r1, [r3, #0]
   10e76:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10e7a:	2a00      	cmp	r2, #0
   10e7c:	d1d3      	bne.n	10e26 <event_conn_upd_prep+0x4ce>
			tx->next = conn->tx_head->next;
   10e7e:	681a      	ldr	r2, [r3, #0]
   10e80:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   10e82:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   10e84:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   10e86:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   10e8a:	e7d4      	b.n	10e36 <event_conn_upd_prep+0x4de>
	    ((pdu_data_tx->llctrl.opcode !=
   10e8c:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10e8e:	2a03      	cmp	r2, #3
   10e90:	d0f5      	beq.n	10e7e <event_conn_upd_prep+0x526>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   10e92:	2a0a      	cmp	r2, #10
   10e94:	f47f af62 	bne.w	10d5c <event_conn_upd_prep+0x404>
   10e98:	e7f1      	b.n	10e7e <event_conn_upd_prep+0x526>
   10e9a:	bf00      	nop
   10e9c:	f3af 8000 	nop.w
   10ea0:	1afd498d 	.word	0x1afd498d
   10ea4:	00000007 	.word	0x00000007
   10ea8:	20001d1c 	.word	0x20001d1c
   10eac:	d1b71759 	.word	0xd1b71759
   10eb0:	3b9aca00 	.word	0x3b9aca00
   10eb4:	431bde83 	.word	0x431bde83

00010eb8 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_slave_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
   10eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   10ebc:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
   10ebe:	f8d2 a000 	ldr.w	sl, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   10ec2:	681b      	ldr	r3, [r3, #0]
{
   10ec4:	b097      	sub	sp, #92	; 0x5c
   10ec6:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
   10ec8:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
   10eca:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   10ecc:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
   10ed0:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
   10ed4:	4605      	mov	r5, r0
   10ed6:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   10ed8:	a814      	add	r0, sp, #80	; 0x50
   10eda:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
   10edc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
   10ee0:	f017 fe99 	bl	28c16 <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
   10ee4:	f894 9012 	ldrb.w	r9, [r4, #18]

	if (rl_idx != FILTER_IDX_NONE) {
   10ee8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   10eec:	ae12      	add	r6, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
   10eee:	d059      	beq.n	10fa4 <ull_slave_setup+0xec>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
   10ef0:	4632      	mov	r2, r6
   10ef2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   10ef6:	4648      	mov	r0, r9
   10ef8:	f010 ffc6 	bl	21e88 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
   10efc:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   10f00:	3302      	adds	r3, #2
   10f02:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
   10f06:	4629      	mov	r1, r5
	memcpy(conn->peer_addr, peer_id_addr, sizeof(conn->peer_addr));
	conn->own_addr_type = own_addr_type;
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   10f08:	2203      	movs	r2, #3
	link = rx->link;
   10f0a:	f851 3b2e 	ldr.w	r3, [r1], #46
   10f0e:	930a      	str	r3, [sp, #40]	; 0x28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   10f10:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   10f14:	f107 0b04 	add.w	fp, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
   10f18:	f017 fe7d 	bl	28c16 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   10f1c:	f107 0818 	add.w	r8, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
   10f20:	2204      	movs	r2, #4
   10f22:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   10f26:	4658      	mov	r0, fp
   10f28:	f017 fe75 	bl	28c16 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
   10f2c:	2205      	movs	r2, #5
   10f2e:	f105 013a 	add.w	r1, r5, #58	; 0x3a
   10f32:	4640      	mov	r0, r8
   10f34:	f017 fe6f 	bl	28c16 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   10f38:	4640      	mov	r0, r8
   10f3a:	2105      	movs	r1, #5
   10f3c:	f007 fb3a 	bl	185b4 <util_ones_count_get>
   10f40:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   10f42:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
   10f46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   10f4a:	f360 0305 	bfi	r3, r0, #0, #6
   10f4e:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   10f50:	f3c1 0304 	ubfx	r3, r1, #0, #5
   10f54:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   10f56:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
   10f5a:	f8a7 800e 	strh.w	r8, [r7, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
   10f5e:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
   10f60:	fa1f f288 	uxth.w	r2, r8
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
   10f64:	f001 031f 	and.w	r3, r1, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
   10f68:	d905      	bls.n	10f76 <ull_slave_setup+0xbe>
   10f6a:	331b      	adds	r3, #27
   10f6c:	f003 031f 	and.w	r3, r3, #31
   10f70:	2b0b      	cmp	r3, #11
   10f72:	d800      	bhi.n	10f76 <ull_slave_setup+0xbe>
	    (lll->data_chan_hop > 16) || !lll->interval) {
   10f74:	b9e2      	cbnz	r2, 10fb0 <ull_slave_setup+0xf8>
		lll->slave.initiated = 0U;
   10f76:	f897 3020 	ldrb.w	r3, [r7, #32]
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
   10f7a:	980a      	ldr	r0, [sp, #40]	; 0x28
		lll->slave.initiated = 0U;
   10f7c:	f36f 0300 	bfc	r3, #0, #1
		rx->type = NODE_RX_TYPE_RELEASE;
   10f80:	2601      	movs	r6, #1
		lll->slave.initiated = 0U;
   10f82:	f887 3020 	strb.w	r3, [r7, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
   10f86:	712e      	strb	r6, [r5, #4]
			rx_csa = (void *)ftr->extra;
   10f88:	6864      	ldr	r4, [r4, #4]
			ll_rx_put(link, rx);
   10f8a:	4629      	mov	r1, r5
   10f8c:	f00a ff26 	bl	1bddc <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
   10f90:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
   10f92:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
   10f94:	4621      	mov	r1, r4
   10f96:	f00a ff21 	bl	1bddc <ll_rx_put>
		ll_rx_sched();
   10f9a:	f00a ff29 	bl	1bdf0 <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
   10f9e:	b017      	add	sp, #92	; 0x5c
   10fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
   10fa4:	2206      	movs	r2, #6
   10fa6:	a914      	add	r1, sp, #80	; 0x50
   10fa8:	4630      	mov	r0, r6
   10faa:	f017 fe34 	bl	28c16 <memcpy>
   10fae:	e7aa      	b.n	10f06 <ull_slave_setup+0x4e>
	((struct lll_adv *)ftr->param)->conn = NULL;
   10fb0:	6823      	ldr	r3, [r4, #0]
   10fb2:	2000      	movs	r0, #0
   10fb4:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
   10fb6:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
   10fba:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
   10fbe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   10fc2:	823b      	strh	r3, [r7, #16]
	conn->slave.sca = pdu_adv->connect_ind.sca;
   10fc4:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
   10fc8:	0949      	lsrs	r1, r1, #5
   10fca:	f361 03c5 	bfi	r3, r1, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   10fce:	8e69      	ldrh	r1, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
   10fd0:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
   10fd4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   10fd8:	fb03 f802 	mul.w	r8, r3, r2
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
   10fdc:	910d      	str	r1, [sp, #52]	; 0x34
		(((lll_clock_ppm_local_get() +
   10fde:	f012 fa4d 	bl	2347c <lll_clock_ppm_local_get>
   10fe2:	900c      	str	r0, [sp, #48]	; 0x30
		   lll_clock_ppm_get(conn->slave.sca)) *
   10fe4:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
   10fe8:	f3c0 00c2 	ubfx	r0, r0, #3, #3
   10fec:	f012 fa48 	bl	23480 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
   10ff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
   10ff2:	49b7      	ldr	r1, [pc, #732]	; (112d0 <ull_slave_setup+0x418>)
		(((lll_clock_ppm_local_get() +
   10ff4:	4402      	add	r2, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
   10ff6:	fb08 f202 	mul.w	r2, r8, r2
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
   10ffa:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
   10ffe:	f202 223f 	addw	r2, r2, #575	; 0x23f
   11002:	fba1 3202 	umull	r3, r2, r1, r2
   11006:	0c92      	lsrs	r2, r2, #18
	lll->slave.window_widening_periodic_us =
   11008:	627a      	str	r2, [r7, #36]	; 0x24
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
   1100a:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   1100e:	8a39      	ldrh	r1, [r7, #16]
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
   11010:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11014:	fb02 f303 	mul.w	r3, r2, r3
   11018:	63bb      	str	r3, [r7, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
   1101a:	ea4f 0358 	mov.w	r3, r8, lsr #1
   1101e:	3b96      	subs	r3, #150	; 0x96
   11020:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   11022:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11024:	4aab      	ldr	r2, [pc, #684]	; (112d4 <ull_slave_setup+0x41c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   11026:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
   1102a:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   1102c:	4442      	add	r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1102e:	4baa      	ldr	r3, [pc, #680]	; (112d8 <ull_slave_setup+0x420>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   11030:	fbb2 f2f8 	udiv	r2, r2, r8
   11034:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
   11038:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   1103a:	f242 7010 	movw	r0, #10000	; 0x2710
   1103e:	fb00 8202 	mla	r2, r0, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11042:	4443      	add	r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   11044:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   11046:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   11048:	fbb2 f2f8 	udiv	r2, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1104c:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
   11050:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11054:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   11056:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   11058:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   1105c:	dd02      	ble.n	11064 <ull_slave_setup+0x1ac>
			     (conn->apto_reload - (lll->latency + 6)) :
   1105e:	1a52      	subs	r2, r2, r1
   11060:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
   11062:	b292      	uxth	r2, r2
   11064:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
   11068:	4659      	mov	r1, fp
   1106a:	2204      	movs	r2, #4
   1106c:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
   11070:	f017 fdd1 	bl	28c16 <memcpy>
	cc->status = 0U;
   11074:	f44f 7280 	mov.w	r2, #256	; 0x100
		chan_sel = pdu_adv->chan_sel;
   11078:	7f2b      	ldrb	r3, [r5, #28]
	cc->status = 0U;
   1107a:	83aa      	strh	r2, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   1107c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1107e:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
   11082:	f3c3 1240 	ubfx	r2, r3, #5, #1
   11086:	920f      	str	r2, [sp, #60]	; 0x3c
   11088:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
   1108a:	f011 fc65 	bl	22958 <ull_filter_lll_lrpa_used>
   1108e:	2800      	cmp	r0, #0
   11090:	f000 80e5 	beq.w	1125e <ull_slave_setup+0x3a6>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
   11094:	2206      	movs	r2, #6
   11096:	f105 0124 	add.w	r1, r5, #36	; 0x24
   1109a:	f105 002b 	add.w	r0, r5, #43	; 0x2b
   1109e:	f017 fdba 	bl	28c16 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
   110a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   110a6:	f000 80e1 	beq.w	1126c <ull_slave_setup+0x3b4>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
   110aa:	a914      	add	r1, sp, #80	; 0x50
   110ac:	2206      	movs	r2, #6
   110ae:	f105 0025 	add.w	r0, r5, #37	; 0x25
   110b2:	f017 fdb0 	bl	28c16 <memcpy>
	cc->peer_addr_type = peer_addr_type;
   110b6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   110ba:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
   110bc:	4631      	mov	r1, r6
   110be:	2206      	movs	r2, #6
   110c0:	f105 001f 	add.w	r0, r5, #31
   110c4:	f017 fda7 	bl	28c16 <memcpy>
	cc->sca = conn->slave.sca;
   110c8:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
	cc->interval = lll->interval;
   110cc:	89fa      	ldrh	r2, [r7, #14]
   110ce:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
   110d0:	8a3a      	ldrh	r2, [r7, #16]
   110d2:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
   110d4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
   110d8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->slave.sca;
   110dc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
   110e0:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
   110e2:	4650      	mov	r0, sl
   110e4:	f00c fbc8 	bl	1d878 <ll_conn_handle_get>
		ll_rx_put(link, rx);
   110e8:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
   110ea:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
   110ec:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
   110ee:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
   110f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   110f2:	f00a fe73 	bl	1bddc <ll_rx_put>
		rx->handle = lll->handle;
   110f6:	89bb      	ldrh	r3, [r7, #12]
   110f8:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
   110fa:	2319      	movs	r3, #25
   110fc:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
   110fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
   11100:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
   11102:	2b00      	cmp	r3, #0
   11104:	f040 80c1 	bne.w	1128a <ull_slave_setup+0x3d2>
			cs->csa = 0x00;
   11108:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   1110c:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
   1110e:	4629      	mov	r1, r5
   11110:	4630      	mov	r0, r6
   11112:	f00a fe63 	bl	1bddc <ll_rx_put>
	ll_rx_sched();
   11116:	f00a fe6b 	bl	1bdf0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
   1111a:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
   1111e:	2101      	movs	r1, #1
   11120:	f000 0007 	and.w	r0, r0, #7
   11124:	f011 ffbc 	bl	230a0 <lll_radio_rx_ready_delay_get>
   11128:	4681      	mov	r9, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   1112a:	486c      	ldr	r0, [pc, #432]	; (112dc <ull_slave_setup+0x424>)
	conn->ull.ticks_active_to_start = 0U;
   1112c:	2600      	movs	r6, #0
	conn->ull.ticks_prepare_to_start =
   1112e:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   11130:	f209 4152 	addw	r1, r9, #1106	; 0x452
	conn->ull.ticks_prepare_to_start =
   11134:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   11138:	fba1 0100 	umull	r0, r1, r1, r0
   1113c:	a362      	add	r3, pc, #392	; (adr r3, 112c8 <ull_slave_setup+0x410>)
   1113e:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
   11142:	f8ca 6004 	str.w	r6, [sl, #4]
	conn->ull.ticks_preempt_to_start =
   11146:	f8ca 600c 	str.w	r6, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   1114a:	f7fe ffd9 	bl	10100 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
   1114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   11150:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
   11152:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
   11154:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->slave.window_widening_periodic_us;
   11158:	eba8 0803 	sub.w	r8, r8, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
   1115c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11160:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   11164:	2102      	movs	r1, #2
   11166:	4632      	mov	r2, r6
	conn->ull.ticks_slot =
   11168:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
   1116c:	2001      	movs	r0, #1
   1116e:	f007 f8f7 	bl	18360 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
   11172:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   11174:	4638      	mov	r0, r7
   11176:	f00b fcd9 	bl	1cb2c <ull_adv_handle_get>
   1117a:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1117c:	4b58      	ldr	r3, [pc, #352]	; (112e0 <ull_slave_setup+0x428>)
   1117e:	9700      	str	r7, [sp, #0]
   11180:	b2d2      	uxtb	r2, r2
   11182:	4630      	mov	r0, r6
   11184:	2101      	movs	r1, #1
   11186:	f008 fae9 	bl	1975c <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
   1118a:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1118e:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
   11190:	eba5 0509 	sub.w	r5, r5, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   11194:	f000 8084 	beq.w	112a0 <ull_slave_setup+0x3e8>
	if (adv->lll.is_hdcd) {
   11198:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1119a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1119e:	07db      	lsls	r3, r3, #31
   111a0:	d46b      	bmi.n	1127a <ull_slave_setup+0x3c2>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   111a2:	4650      	mov	r0, sl
   111a4:	f00c fb68 	bl	1d878 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   111a8:	f8df 9130 	ldr.w	r9, [pc, #304]	; 112dc <ull_slave_setup+0x424>
   111ac:	fba8 8609 	umull	r8, r6, r8, r9
   111b0:	a345      	add	r3, pc, #276	; (adr r3, 112c8 <ull_slave_setup+0x410>)
   111b2:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   111b6:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
   111b8:	4631      	mov	r1, r6
   111ba:	4640      	mov	r0, r8
   111bc:	f7fe ffa0 	bl	10100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   111c0:	68a3      	ldr	r3, [r4, #8]
   111c2:	f8cd a018 	str.w	sl, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
   111c6:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   111ca:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
   111ce:	4b45      	ldr	r3, [pc, #276]	; (112e4 <ull_slave_setup+0x42c>)
   111d0:	9307      	str	r3, [sp, #28]
   111d2:	4b45      	ldr	r3, [pc, #276]	; (112e8 <ull_slave_setup+0x430>)
   111d4:	9305      	str	r3, [sp, #20]
   111d6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   111da:	9308      	str	r3, [sp, #32]
   111dc:	f8da 3010 	ldr.w	r3, [sl, #16]
   111e0:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   111e2:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
   111e6:	4841      	ldr	r0, [pc, #260]	; (112ec <ull_slave_setup+0x434>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   111e8:	2300      	movs	r3, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
   111ea:	fba7 0100 	umull	r0, r1, r7, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   111ee:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
   111f0:	2307      	movs	r3, #7
   111f2:	ebb8 0000 	subs.w	r0, r8, r0
   111f6:	fb03 1107 	mla	r1, r3, r7, r1
   111fa:	eb66 0101 	sbc.w	r1, r6, r1
   111fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   11202:	2300      	movs	r3, #0
   11204:	f7fe ff7c 	bl	10100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   11208:	a32f      	add	r3, pc, #188	; (adr r3, 112c8 <ull_slave_setup+0x410>)
   1120a:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1120e:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
   11212:	fba5 0109 	umull	r0, r1, r5, r9
   11216:	f7fe ff73 	bl	10100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1121a:	b2e4      	uxtb	r4, r4
   1121c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11220:	9000      	str	r0, [sp, #0]
   11222:	465b      	mov	r3, fp
   11224:	4622      	mov	r2, r4
   11226:	2101      	movs	r1, #1
   11228:	2000      	movs	r0, #0
   1122a:	f008 fa0d 	bl	19648 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1122e:	f030 0302 	bics.w	r3, r0, #2
   11232:	d00c      	beq.n	1124e <ull_slave_setup+0x396>
   11234:	4a2e      	ldr	r2, [pc, #184]	; (112f0 <ull_slave_setup+0x438>)
   11236:	492f      	ldr	r1, [pc, #188]	; (112f4 <ull_slave_setup+0x43c>)
   11238:	482f      	ldr	r0, [pc, #188]	; (112f8 <ull_slave_setup+0x440>)
   1123a:	f240 13ab 	movw	r3, #427	; 0x1ab
   1123e:	f016 fc80 	bl	27b42 <printk>
   11242:	4040      	eors	r0, r0
   11244:	f380 8811 	msr	BASEPRI, r0
   11248:	f04f 0003 	mov.w	r0, #3
   1124c:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
   1124e:	2201      	movs	r2, #1
   11250:	2102      	movs	r1, #2
   11252:	4610      	mov	r0, r2
   11254:	f007 f884 	bl	18360 <mayfly_enable>
}
   11258:	b017      	add	sp, #92	; 0x5c
   1125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
   1125e:	4601      	mov	r1, r0
   11260:	2206      	movs	r2, #6
   11262:	f105 002b 	add.w	r0, r5, #43	; 0x2b
   11266:	f017 fd01 	bl	28c6c <memset>
   1126a:	e71a      	b.n	110a2 <ull_slave_setup+0x1ea>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
   1126c:	2206      	movs	r2, #6
   1126e:	2100      	movs	r1, #0
   11270:	f105 0025 	add.w	r0, r5, #37	; 0x25
   11274:	f017 fcfa 	bl	28c6c <memset>
   11278:	e71d      	b.n	110b6 <ull_slave_setup+0x1fe>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1127a:	2300      	movs	r3, #0
   1127c:	2201      	movs	r2, #1
   1127e:	9300      	str	r3, [sp, #0]
   11280:	4618      	mov	r0, r3
   11282:	4611      	mov	r1, r2
   11284:	f008 fa6a 	bl	1975c <ticker_stop>
   11288:	e78b      	b.n	111a2 <ull_slave_setup+0x2ea>
			lll->data_chan_sel = 1;
   1128a:	7f7b      	ldrb	r3, [r7, #29]
   1128c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11290:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   11292:	4658      	mov	r0, fp
   11294:	f010 fbf0 	bl	21a78 <lll_chan_id>
			cs->csa = 0x01;
   11298:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
   1129a:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
   1129c:	772b      	strb	r3, [r5, #28]
   1129e:	e736      	b.n	1110e <ull_slave_setup+0x256>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   112a0:	f00a fe52 	bl	1bf48 <ull_disable_mark_get>
   112a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   112a6:	4283      	cmp	r3, r0
   112a8:	f43f af76 	beq.w	11198 <ull_slave_setup+0x2e0>
   112ac:	4a10      	ldr	r2, [pc, #64]	; (112f0 <ull_slave_setup+0x438>)
   112ae:	4913      	ldr	r1, [pc, #76]	; (112fc <ull_slave_setup+0x444>)
   112b0:	4811      	ldr	r0, [pc, #68]	; (112f8 <ull_slave_setup+0x440>)
   112b2:	f240 2347 	movw	r3, #583	; 0x247
   112b6:	f016 fc44 	bl	27b42 <printk>
   112ba:	4040      	eors	r0, r0
   112bc:	f380 8811 	msr	BASEPRI, r0
   112c0:	f04f 0003 	mov.w	r0, #3
   112c4:	df02      	svc	2
		  param == ull_disable_mark_get());
}
   112c6:	e767      	b.n	11198 <ull_slave_setup+0x2e0>
   112c8:	1afd498d 	.word	0x1afd498d
   112cc:	00000007 	.word	0x00000007
   112d0:	431bde83 	.word	0x431bde83
   112d4:	026259ff 	.word	0x026259ff
   112d8:	01c9c37f 	.word	0x01c9c37f
   112dc:	3b9aca00 	.word	0x3b9aca00
   112e0:	00021805 	.word	0x00021805
   112e4:	000217d5 	.word	0x000217d5
   112e8:	00021841 	.word	0x00021841
   112ec:	1afd498d 	.word	0x1afd498d
   112f0:	0002c05c 	.word	0x0002c05c
   112f4:	0002bf14 	.word	0x0002bf14
   112f8:	0002b8dc 	.word	0x0002b8dc
   112fc:	0002c0b4 	.word	0x0002c0b4

00011300 <config_leds>:
const struct device *b_led;
const struct device *g_led;
const struct device *r_led;

int config_leds(void) 
{
   11300:	b570      	push	{r4, r5, r6, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   11302:	4814      	ldr	r0, [pc, #80]	; (11354 <config_leds+0x54>)
    int ret;
    b_led = device_get_binding(LED_B);
   11304:	4e14      	ldr	r6, [pc, #80]	; (11358 <config_leds+0x58>)
   11306:	f015 f971 	bl	265ec <z_impl_device_get_binding>
   1130a:	6030      	str	r0, [r6, #0]
   1130c:	4811      	ldr	r0, [pc, #68]	; (11354 <config_leds+0x54>)
    g_led = device_get_binding(LED_G);
   1130e:	4c13      	ldr	r4, [pc, #76]	; (1135c <config_leds+0x5c>)
   11310:	f015 f96c 	bl	265ec <z_impl_device_get_binding>
   11314:	6020      	str	r0, [r4, #0]
   11316:	480f      	ldr	r0, [pc, #60]	; (11354 <config_leds+0x54>)
    r_led = device_get_binding(LED_R);
   11318:	4d11      	ldr	r5, [pc, #68]	; (11360 <config_leds+0x60>)
   1131a:	f015 f967 	bl	265ec <z_impl_device_get_binding>
   1131e:	4603      	mov	r3, r0
   11320:	6028      	str	r0, [r5, #0]
    if ((b_led || g_led || r_led ) == NULL) {
   11322:	6830      	ldr	r0, [r6, #0]
   11324:	b910      	cbnz	r0, 1132c <config_leds+0x2c>
   11326:	6822      	ldr	r2, [r4, #0]
   11328:	b902      	cbnz	r2, 1132c <config_leds+0x2c>
   1132a:	b183      	cbz	r3, 1134e <config_leds+0x4e>
        return -1;
    }

    ret = gpio_pin_configure(b_led, PIN_B, GPIO_OUTPUT_ACTIVE | FLAGS_B);
   1132c:	2106      	movs	r1, #6
   1132e:	f016 fba7 	bl	27a80 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(g_led, PIN_G, GPIO_OUTPUT_ACTIVE | FLAGS_G);
   11332:	2110      	movs	r1, #16
   11334:	6820      	ldr	r0, [r4, #0]
   11336:	f016 fba3 	bl	27a80 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(r_led, PIN_R, GPIO_OUTPUT_ACTIVE | FLAGS_R);
   1133a:	6828      	ldr	r0, [r5, #0]
   1133c:	2118      	movs	r1, #24
   1133e:	f016 fb9f 	bl	27a80 <gpio_pin_configure.constprop.0>
    if (ret < 0) {
        return -2;
   11342:	2800      	cmp	r0, #0
   11344:	bfac      	ite	ge
   11346:	2000      	movge	r0, #0
   11348:	f06f 0001 	mvnlt.w	r0, #1
    }

    return 0;
}
   1134c:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
   1134e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   11352:	e7fb      	b.n	1134c <config_leds+0x4c>
   11354:	0002c810 	.word	0x0002c810
   11358:	20001188 	.word	0x20001188
   1135c:	2000118c 	.word	0x2000118c
   11360:	20001190 	.word	0x20001190

00011364 <set_led>:

void set_led(bool to, RGB_t color) 
{

    switch (color) {
   11364:	2901      	cmp	r1, #1
   11366:	d009      	beq.n	1137c <set_led+0x18>
   11368:	2902      	cmp	r1, #2
   1136a:	d00c      	beq.n	11386 <set_led+0x22>
   1136c:	b981      	cbnz	r1, 11390 <set_led+0x2c>
        case (BLUE):
            gpio_pin_set(b_led, PIN_B, (int)!to);
   1136e:	4b09      	ldr	r3, [pc, #36]	; (11394 <set_led+0x30>)
   11370:	f080 0201 	eor.w	r2, r0, #1
   11374:	2106      	movs	r1, #6
            break;
        case (GREEN):
            gpio_pin_set(g_led, PIN_G, (int)!to);
            break;
        case (RED):
            gpio_pin_set(r_led, PIN_R, (int)!to);
   11376:	6818      	ldr	r0, [r3, #0]
   11378:	f016 bb91 	b.w	27a9e <gpio_pin_set.isra.0>
            gpio_pin_set(g_led, PIN_G, (int)!to);
   1137c:	4b06      	ldr	r3, [pc, #24]	; (11398 <set_led+0x34>)
   1137e:	f080 0201 	eor.w	r2, r0, #1
   11382:	2110      	movs	r1, #16
   11384:	e7f7      	b.n	11376 <set_led+0x12>
            gpio_pin_set(r_led, PIN_R, (int)!to);
   11386:	4b05      	ldr	r3, [pc, #20]	; (1139c <set_led+0x38>)
   11388:	f080 0201 	eor.w	r2, r0, #1
   1138c:	2118      	movs	r1, #24
   1138e:	e7f2      	b.n	11376 <set_led+0x12>
            break;
    }

   11390:	4770      	bx	lr
   11392:	bf00      	nop
   11394:	20001188 	.word	0x20001188
   11398:	2000118c 	.word	0x2000118c
   1139c:	20001190 	.word	0x20001190

000113a0 <disconnected>:
	set_led(false, GREEN);
	set_led(true, BLUE);
}

static void disconnected(struct bt_conn *conn, uint8_t reason)
{
   113a0:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
   113a2:	4806      	ldr	r0, [pc, #24]	; (113bc <disconnected+0x1c>)
   113a4:	f016 fbcd 	bl	27b42 <printk>
	set_led(false, BLUE);
   113a8:	2100      	movs	r1, #0
   113aa:	4608      	mov	r0, r1
   113ac:	f7ff ffda 	bl	11364 <set_led>
	set_led(true, GREEN);
   113b0:	2101      	movs	r1, #1
}
   113b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_led(true, GREEN);
   113b6:	4608      	mov	r0, r1
   113b8:	f7ff bfd4 	b.w	11364 <set_led>
   113bc:	0002c817 	.word	0x0002c817

000113c0 <connected>:
{
   113c0:	b508      	push	{r3, lr}
	if (err) {
   113c2:	b161      	cbz	r1, 113de <connected+0x1e>
		printk("Connection failed (err 0x%02x)\n", err);
   113c4:	4808      	ldr	r0, [pc, #32]	; (113e8 <connected+0x28>)
   113c6:	f016 fbbc 	bl	27b42 <printk>
	set_led(false, GREEN);
   113ca:	2101      	movs	r1, #1
   113cc:	2000      	movs	r0, #0
   113ce:	f7ff ffc9 	bl	11364 <set_led>
}
   113d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_led(true, BLUE);
   113d6:	2100      	movs	r1, #0
   113d8:	2001      	movs	r0, #1
   113da:	f7ff bfc3 	b.w	11364 <set_led>
		printk("Connected\n");
   113de:	4803      	ldr	r0, [pc, #12]	; (113ec <connected+0x2c>)
   113e0:	f016 fbaf 	bl	27b42 <printk>
   113e4:	e7f1      	b.n	113ca <connected+0xa>
   113e6:	bf00      	nop
   113e8:	0002c835 	.word	0x0002c835
   113ec:	0002c855 	.word	0x0002c855

000113f0 <main>:

	bt_bas_set_battery_level(battery_level);
}

void main(void)
{
   113f0:	b570      	push	{r4, r5, r6, lr}
   113f2:	b088      	sub	sp, #32
	int err;
	err = config_leds();
   113f4:	f7ff ff84 	bl	11300 <config_leds>
	err = bt_enable(NULL);
   113f8:	2000      	movs	r0, #0
   113fa:	f003 fd4d 	bl	14e98 <bt_enable>
	if (err) {
   113fe:	4606      	mov	r6, r0
   11400:	b150      	cbz	r0, 11418 <main+0x28>
		printk("Bluetooth init failed (err %d)\n", err);
   11402:	4601      	mov	r1, r0
   11404:	481e      	ldr	r0, [pc, #120]	; (11480 <main+0x90>)
   11406:	f016 fb9c 	bl	27b42 <printk>
		set_led(true, RED);
   1140a:	2102      	movs	r1, #2
   1140c:	2001      	movs	r0, #1
		k_sleep(K_SECONDS(1));

		/* Battery level simulation */
		bas_notify();
	}
   1140e:	b008      	add	sp, #32
   11410:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		set_led(true, RED);
   11414:	f7ff bfa6 	b.w	11364 <set_led>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   11418:	4d1a      	ldr	r5, [pc, #104]	; (11484 <main+0x94>)
	printk("Bluetooth initialized\n");
   1141a:	481b      	ldr	r0, [pc, #108]	; (11488 <main+0x98>)
   1141c:	f016 fb91 	bl	27b42 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
   11420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11422:	ac03      	add	r4, sp, #12
   11424:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   11426:	682b      	ldr	r3, [r5, #0]
   11428:	6023      	str	r3, [r4, #0]
   1142a:	4918      	ldr	r1, [pc, #96]	; (1148c <main+0x9c>)
   1142c:	9600      	str	r6, [sp, #0]
   1142e:	4633      	mov	r3, r6
   11430:	2202      	movs	r2, #2
   11432:	a803      	add	r0, sp, #12
   11434:	f004 fa0a 	bl	1584c <bt_le_adv_start>
	if (err) {
   11438:	4601      	mov	r1, r0
   1143a:	b1c0      	cbz	r0, 1146e <main+0x7e>
		printk("Advertising failed to start (err %d)\n", err);
   1143c:	4814      	ldr	r0, [pc, #80]	; (11490 <main+0xa0>)
   1143e:	f016 fb80 	bl	27b42 <printk>
		set_led(true, RED);
   11442:	2102      	movs	r1, #2
   11444:	2001      	movs	r0, #1
   11446:	f7ff ff8d 	bl	11364 <set_led>
	bt_conn_cb_register(&conn_callbacks);
   1144a:	4812      	ldr	r0, [pc, #72]	; (11494 <main+0xa4>)
   1144c:	f004 fb62 	bl	15b14 <bt_conn_cb_register>
		parm0.val = timeout;
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
   11450:	2100      	movs	r1, #0
   11452:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11456:	f016 f80d 	bl	27474 <z_impl_k_sleep>
	uint8_t battery_level = bt_bas_get_battery_level();
   1145a:	f001 f84b 	bl	124f4 <bt_bas_get_battery_level>
	battery_level--;
   1145e:	3801      	subs	r0, #1
		battery_level = 100U;
   11460:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
	bt_bas_set_battery_level(battery_level);
   11464:	bf08      	it	eq
   11466:	2064      	moveq	r0, #100	; 0x64
   11468:	f001 f84a 	bl	12500 <bt_bas_set_battery_level>
	while (1) {
   1146c:	e7f0      	b.n	11450 <main+0x60>
	set_led(true, GREEN);
   1146e:	2101      	movs	r1, #1
   11470:	4608      	mov	r0, r1
   11472:	f7ff ff77 	bl	11364 <set_led>
	printk("Advertising successfully started\n");
   11476:	4808      	ldr	r0, [pc, #32]	; (11498 <main+0xa8>)
   11478:	f016 fb63 	bl	27b42 <printk>
   1147c:	e7e5      	b.n	1144a <main+0x5a>
   1147e:	bf00      	nop
   11480:	0002c860 	.word	0x0002c860
   11484:	0002b3c0 	.word	0x0002b3c0
   11488:	0002c880 	.word	0x0002c880
   1148c:	0002b458 	.word	0x0002b458
   11490:	0002c897 	.word	0x0002c897
   11494:	20000130 	.word	0x20000130
   11498:	0002c8bd 	.word	0x0002c8bd

0001149c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   1149c:	680b      	ldr	r3, [r1, #0]
   1149e:	3301      	adds	r3, #1
   114a0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   114a2:	4b01      	ldr	r3, [pc, #4]	; (114a8 <char_out+0xc>)
   114a4:	681b      	ldr	r3, [r3, #0]
   114a6:	4718      	bx	r3
   114a8:	20000144 	.word	0x20000144

000114ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   114ac:	b507      	push	{r0, r1, r2, lr}
   114ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   114b0:	2100      	movs	r1, #0
{
   114b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   114b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   114b6:	4803      	ldr	r0, [pc, #12]	; (114c4 <vprintk+0x18>)
   114b8:	a901      	add	r1, sp, #4
   114ba:	f000 f8f9 	bl	116b0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   114be:	b003      	add	sp, #12
   114c0:	f85d fb04 	ldr.w	pc, [sp], #4
   114c4:	0001149d 	.word	0x0001149d

000114c8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   114c8:	b530      	push	{r4, r5, lr}
   114ca:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   114cc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   114d0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   114d2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   114d4:	a901      	add	r1, sp, #4
   114d6:	4805      	ldr	r0, [pc, #20]	; (114ec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   114d8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   114da:	f000 f8e9 	bl	116b0 <cbvprintf>

	if (ctx.count < ctx.max) {
   114de:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   114e2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   114e4:	bfb8      	it	lt
   114e6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   114e8:	b005      	add	sp, #20
   114ea:	bd30      	pop	{r4, r5, pc}
   114ec:	00027b1d 	.word	0x00027b1d

000114f0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   114f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   114f4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   114f8:	f019 0808 	ands.w	r8, r9, #8
{
   114fc:	4604      	mov	r4, r0
   114fe:	4693      	mov	fp, r2
	if (processing) {
   11500:	d00d      	beq.n	1151e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
   11502:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11504:	bf0c      	ite	eq
   11506:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1150a:	f049 0920 	orrne.w	r9, r9, #32
   1150e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   11512:	f38b 8811 	msr	BASEPRI, fp
   11516:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
   1151a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1151e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   11522:	2902      	cmp	r1, #2
   11524:	d107      	bne.n	11536 <process_event+0x46>
			evt = process_recheck(mgr);
   11526:	4620      	mov	r0, r4
   11528:	f016 fb25 	bl	27b76 <process_recheck>
		if (evt == EVT_NOP) {
   1152c:	2800      	cmp	r0, #0
   1152e:	d0f0      	beq.n	11512 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
   11530:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11532:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
   11534:	d14e      	bne.n	115d4 <process_event+0xe4>
			res = mgr->last_res;
   11536:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11538:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
   1153a:	2f00      	cmp	r7, #0
   1153c:	da15      	bge.n	1156a <process_event+0x7a>
		*clients = mgr->clients;
   1153e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11540:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
   11544:	e9c4 8800 	strd	r8, r8, [r4]
   11548:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   1154c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
   1154e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11550:	8b21      	ldrh	r1, [r4, #24]
   11552:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   11556:	45ca      	cmp	sl, r9
   11558:	d002      	beq.n	11560 <process_event+0x70>
		if (do_monitors
   1155a:	68a3      	ldr	r3, [r4, #8]
   1155c:	2b00      	cmp	r3, #0
   1155e:	d15a      	bne.n	11616 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
   11560:	b90d      	cbnz	r5, 11566 <process_event+0x76>
		    || (transit != NULL)) {
   11562:	2e00      	cmp	r6, #0
   11564:	d071      	beq.n	1164a <process_event+0x15a>
   11566:	2300      	movs	r3, #0
   11568:	e056      	b.n	11618 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1156a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   1156e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   11570:	2a01      	cmp	r2, #1
   11572:	d81e      	bhi.n	115b2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11574:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
   11578:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
   1157a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1157c:	b289      	uxth	r1, r1
   1157e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   11582:	d10a      	bne.n	1159a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11584:	b13d      	cbz	r5, 11596 <process_event+0xa6>
   11586:	8b63      	ldrh	r3, [r4, #26]
   11588:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
   1158a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
   1158c:	3301      	adds	r3, #1
   1158e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11590:	2a00      	cmp	r2, #0
   11592:	d1fa      	bne.n	1158a <process_event+0x9a>
   11594:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11596:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1159a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   1159c:	4620      	mov	r0, r4
   1159e:	f016 faea 	bl	27b76 <process_recheck>
   115a2:	4606      	mov	r6, r0
   115a4:	2800      	cmp	r0, #0
   115a6:	d0d3      	beq.n	11550 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   115a8:	8b23      	ldrh	r3, [r4, #24]
   115aa:	f043 0320 	orr.w	r3, r3, #32
   115ae:	8323      	strh	r3, [r4, #24]
   115b0:	e7cd      	b.n	1154e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
   115b2:	2b04      	cmp	r3, #4
   115b4:	d10c      	bne.n	115d0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115b6:	f021 0107 	bic.w	r1, r1, #7
   115ba:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
   115bc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
   115be:	4620      	mov	r0, r4
   115c0:	f016 fad9 	bl	27b76 <process_recheck>
   115c4:	4605      	mov	r5, r0
   115c6:	2800      	cmp	r0, #0
   115c8:	d0c1      	beq.n	1154e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   115ca:	f041 0120 	orr.w	r1, r1, #32
   115ce:	8321      	strh	r1, [r4, #24]
   115d0:	2500      	movs	r5, #0
   115d2:	e7bc      	b.n	1154e <process_event+0x5e>
		} else if (evt == EVT_START) {
   115d4:	2803      	cmp	r0, #3
   115d6:	d109      	bne.n	115ec <process_event+0xfc>
			transit = mgr->transitions->start;
   115d8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115da:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
   115de:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115e0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   115e4:	8323      	strh	r3, [r4, #24]
}
   115e6:	2500      	movs	r5, #0
		res = 0;
   115e8:	462f      	mov	r7, r5
   115ea:	e7b1      	b.n	11550 <process_event+0x60>
		} else if (evt == EVT_STOP) {
   115ec:	2804      	cmp	r0, #4
   115ee:	d106      	bne.n	115fe <process_event+0x10e>
			transit = mgr->transitions->stop;
   115f0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115f2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
   115f6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   115f8:	f043 0304 	orr.w	r3, r3, #4
   115fc:	e7f2      	b.n	115e4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
   115fe:	2805      	cmp	r0, #5
   11600:	d106      	bne.n	11610 <process_event+0x120>
			transit = mgr->transitions->reset;
   11602:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11604:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
   11608:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1160a:	f043 0305 	orr.w	r3, r3, #5
   1160e:	e7e9      	b.n	115e4 <process_event+0xf4>
   11610:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   11612:	462e      	mov	r6, r5
   11614:	e7e8      	b.n	115e8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
   11616:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11618:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
   1161c:	8321      	strh	r1, [r4, #24]
   1161e:	f38b 8811 	msr	BASEPRI, fp
   11622:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11626:	b9fb      	cbnz	r3, 11668 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
   11628:	bb85      	cbnz	r5, 1168c <process_event+0x19c>
			if (transit != NULL) {
   1162a:	b116      	cbz	r6, 11632 <process_event+0x142>
				transit(mgr, transition_complete);
   1162c:	491f      	ldr	r1, [pc, #124]	; (116ac <process_event+0x1bc>)
   1162e:	4620      	mov	r0, r4
   11630:	47b0      	blx	r6
	__asm__ volatile(
   11632:	f04f 0320 	mov.w	r3, #32
   11636:	f3ef 8b11 	mrs	fp, BASEPRI
   1163a:	f383 8811 	msr	BASEPRI, r3
   1163e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   11642:	8b23      	ldrh	r3, [r4, #24]
   11644:	f023 0308 	bic.w	r3, r3, #8
   11648:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   1164a:	8b23      	ldrh	r3, [r4, #24]
   1164c:	06da      	lsls	r2, r3, #27
   1164e:	d525      	bpl.n	1169c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   11650:	f023 0310 	bic.w	r3, r3, #16
   11654:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
   11656:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   11658:	f8b4 9018 	ldrh.w	r9, [r4, #24]
   1165c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   11660:	2900      	cmp	r1, #0
   11662:	f47f af5e 	bne.w	11522 <process_event+0x32>
out:
   11666:	e754      	b.n	11512 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   11668:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1166a:	2900      	cmp	r1, #0
   1166c:	d0dc      	beq.n	11628 <process_event+0x138>
	return node->next;
   1166e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
   11672:	f8d1 b004 	ldr.w	fp, [r1, #4]
   11676:	463b      	mov	r3, r7
   11678:	4652      	mov	r2, sl
   1167a:	4620      	mov	r0, r4
   1167c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   1167e:	f1b9 0f00 	cmp.w	r9, #0
   11682:	d0d1      	beq.n	11628 <process_event+0x138>
   11684:	4649      	mov	r1, r9
   11686:	f8d9 9000 	ldr.w	r9, [r9]
   1168a:	e7f2      	b.n	11672 <process_event+0x182>
   1168c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   1168e:	463b      	mov	r3, r7
   11690:	4652      	mov	r2, sl
   11692:	4620      	mov	r0, r4
   11694:	682d      	ldr	r5, [r5, #0]
   11696:	f016 fa8a 	bl	27bae <notify_one>
   1169a:	e7c5      	b.n	11628 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1169c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   116a0:	bf1e      	ittt	ne
   116a2:	f023 0320 	bicne.w	r3, r3, #32
   116a6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
   116a8:	2102      	movne	r1, #2
   116aa:	e7d5      	b.n	11658 <process_event+0x168>
   116ac:	00027bdb 	.word	0x00027bdb

000116b0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   116b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116b4:	b091      	sub	sp, #68	; 0x44
   116b6:	468b      	mov	fp, r1
   116b8:	9002      	str	r0, [sp, #8]
   116ba:	4692      	mov	sl, r2
   116bc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   116be:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   116c0:	f89a 0000 	ldrb.w	r0, [sl]
   116c4:	b908      	cbnz	r0, 116ca <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   116c6:	4628      	mov	r0, r5
   116c8:	e35f      	b.n	11d8a <cbvprintf+0x6da>
		if (*fp != '%') {
   116ca:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
   116cc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
   116d0:	d007      	beq.n	116e2 <cbvprintf+0x32>
			OUTC('%');
   116d2:	9b02      	ldr	r3, [sp, #8]
   116d4:	4659      	mov	r1, fp
   116d6:	4798      	blx	r3
   116d8:	2800      	cmp	r0, #0
   116da:	f2c0 8356 	blt.w	11d8a <cbvprintf+0x6da>
   116de:	3501      	adds	r5, #1
			break;
   116e0:	e212      	b.n	11b08 <cbvprintf+0x458>
		} state = {
   116e2:	2218      	movs	r2, #24
   116e4:	2100      	movs	r1, #0
   116e6:	a80a      	add	r0, sp, #40	; 0x28
   116e8:	f017 fac0 	bl	28c6c <memset>
	if (*sp == '%') {
   116ec:	f89a 3001 	ldrb.w	r3, [sl, #1]
   116f0:	2b25      	cmp	r3, #37	; 0x25
   116f2:	d078      	beq.n	117e6 <cbvprintf+0x136>
   116f4:	2200      	movs	r2, #0
   116f6:	4610      	mov	r0, r2
   116f8:	4696      	mov	lr, r2
   116fa:	4694      	mov	ip, r2
   116fc:	4616      	mov	r6, r2
   116fe:	4639      	mov	r1, r7
		switch (*sp) {
   11700:	f817 3b01 	ldrb.w	r3, [r7], #1
   11704:	2b2b      	cmp	r3, #43	; 0x2b
   11706:	f000 809d 	beq.w	11844 <cbvprintf+0x194>
   1170a:	f200 8094 	bhi.w	11836 <cbvprintf+0x186>
   1170e:	2b20      	cmp	r3, #32
   11710:	f000 809b 	beq.w	1184a <cbvprintf+0x19a>
   11714:	2b23      	cmp	r3, #35	; 0x23
   11716:	f000 809b 	beq.w	11850 <cbvprintf+0x1a0>
   1171a:	b12e      	cbz	r6, 11728 <cbvprintf+0x78>
   1171c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   11720:	f046 0604 	orr.w	r6, r6, #4
   11724:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   11728:	f1bc 0f00 	cmp.w	ip, #0
   1172c:	d005      	beq.n	1173a <cbvprintf+0x8a>
   1172e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   11732:	f046 0608 	orr.w	r6, r6, #8
   11736:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   1173a:	f1be 0f00 	cmp.w	lr, #0
   1173e:	d005      	beq.n	1174c <cbvprintf+0x9c>
   11740:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
   11744:	f046 0610 	orr.w	r6, r6, #16
   11748:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
   1174c:	b128      	cbz	r0, 1175a <cbvprintf+0xaa>
   1174e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
   11752:	f040 0020 	orr.w	r0, r0, #32
   11756:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
   1175a:	b12a      	cbz	r2, 11768 <cbvprintf+0xb8>
   1175c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11760:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   11764:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
   11768:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   1176c:	f002 0044 	and.w	r0, r2, #68	; 0x44
   11770:	2844      	cmp	r0, #68	; 0x44
   11772:	d103      	bne.n	1177c <cbvprintf+0xcc>
		conv->flag_zero = false;
   11774:	f36f 1286 	bfc	r2, #6, #1
   11778:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
   1177c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   11780:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
   11782:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11786:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
   1178a:	d17b      	bne.n	11884 <cbvprintf+0x1d4>
		conv->width_star = true;
   1178c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11790:	f042 0201 	orr.w	r2, r2, #1
			++sp;
   11794:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
   11796:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
   1179a:	781a      	ldrb	r2, [r3, #0]
   1179c:	2a2e      	cmp	r2, #46	; 0x2e
   1179e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   117a2:	bf0c      	ite	eq
   117a4:	2101      	moveq	r1, #1
   117a6:	2100      	movne	r1, #0
   117a8:	f361 0241 	bfi	r2, r1, #1, #1
   117ac:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
   117b0:	d174      	bne.n	1189c <cbvprintf+0x1ec>
	if (*sp == '*') {
   117b2:	785a      	ldrb	r2, [r3, #1]
   117b4:	2a2a      	cmp	r2, #42	; 0x2a
   117b6:	d06a      	beq.n	1188e <cbvprintf+0x1de>
	++sp;
   117b8:	3301      	adds	r3, #1
	size_t val = 0;
   117ba:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
   117bc:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   117be:	4618      	mov	r0, r3
   117c0:	f810 2b01 	ldrb.w	r2, [r0], #1
   117c4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   117c8:	2f09      	cmp	r7, #9
   117ca:	f240 808e 	bls.w	118ea <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
   117ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
   117d2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
   117d4:	f3c2 0040 	ubfx	r0, r2, #1, #1
   117d8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
   117dc:	f361 0241 	bfi	r2, r1, #1, #1
   117e0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   117e4:	e05a      	b.n	1189c <cbvprintf+0x1ec>
		conv->specifier = *sp++;
   117e6:	f10a 0702 	add.w	r7, sl, #2
   117ea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
   117ee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   117f2:	07d9      	lsls	r1, r3, #31
   117f4:	f140 8149 	bpl.w	11a8a <cbvprintf+0x3da>
			width = va_arg(ap, int);
   117f8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
   117fc:	f1b9 0f00 	cmp.w	r9, #0
   11800:	da07      	bge.n	11812 <cbvprintf+0x162>
				conv->flag_dash = true;
   11802:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11806:	f042 0204 	orr.w	r2, r2, #4
   1180a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
   1180e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
   11812:	075a      	lsls	r2, r3, #29
   11814:	f140 8142 	bpl.w	11a9c <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
   11818:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
   1181c:	f1b8 0f00 	cmp.w	r8, #0
   11820:	f280 8141 	bge.w	11aa6 <cbvprintf+0x3f6>
				conv->prec_present = false;
   11824:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11828:	f36f 0341 	bfc	r3, #1, #1
   1182c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
   11830:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   11834:	e137      	b.n	11aa6 <cbvprintf+0x3f6>
		switch (*sp) {
   11836:	2b2d      	cmp	r3, #45	; 0x2d
   11838:	d00c      	beq.n	11854 <cbvprintf+0x1a4>
   1183a:	2b30      	cmp	r3, #48	; 0x30
   1183c:	f47f af6d 	bne.w	1171a <cbvprintf+0x6a>
			conv->flag_zero = true;
   11840:	2201      	movs	r2, #1
	} while (loop);
   11842:	e75c      	b.n	116fe <cbvprintf+0x4e>
			conv->flag_plus = true;
   11844:	f04f 0c01 	mov.w	ip, #1
   11848:	e759      	b.n	116fe <cbvprintf+0x4e>
			conv->flag_space = true;
   1184a:	f04f 0e01 	mov.w	lr, #1
   1184e:	e756      	b.n	116fe <cbvprintf+0x4e>
			conv->flag_hash = true;
   11850:	2001      	movs	r0, #1
   11852:	e754      	b.n	116fe <cbvprintf+0x4e>
		switch (*sp) {
   11854:	2601      	movs	r6, #1
   11856:	e752      	b.n	116fe <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
   11858:	fb0c 0202 	mla	r2, ip, r2, r0
   1185c:	3a30      	subs	r2, #48	; 0x30
   1185e:	4633      	mov	r3, r6
   11860:	461e      	mov	r6, r3
   11862:	f816 0b01 	ldrb.w	r0, [r6], #1
   11866:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
   1186a:	2f09      	cmp	r7, #9
   1186c:	d9f4      	bls.n	11858 <cbvprintf+0x1a8>
	if (sp != wp) {
   1186e:	4299      	cmp	r1, r3
   11870:	d093      	beq.n	1179a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
   11872:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
   11876:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
   11878:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
   1187a:	f362 0141 	bfi	r1, r2, #1, #1
   1187e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   11882:	e78a      	b.n	1179a <cbvprintf+0xea>
   11884:	460b      	mov	r3, r1
	size_t val = 0;
   11886:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
   11888:	f04f 0c0a 	mov.w	ip, #10
   1188c:	e7e8      	b.n	11860 <cbvprintf+0x1b0>
		conv->prec_star = true;
   1188e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11892:	f042 0204 	orr.w	r2, r2, #4
   11896:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
   1189a:	3302      	adds	r3, #2
	switch (*sp) {
   1189c:	461f      	mov	r7, r3
   1189e:	f817 2b01 	ldrb.w	r2, [r7], #1
   118a2:	2a6c      	cmp	r2, #108	; 0x6c
   118a4:	d041      	beq.n	1192a <cbvprintf+0x27a>
   118a6:	d825      	bhi.n	118f4 <cbvprintf+0x244>
   118a8:	2a68      	cmp	r2, #104	; 0x68
   118aa:	d02b      	beq.n	11904 <cbvprintf+0x254>
   118ac:	2a6a      	cmp	r2, #106	; 0x6a
   118ae:	d046      	beq.n	1193e <cbvprintf+0x28e>
   118b0:	2a4c      	cmp	r2, #76	; 0x4c
   118b2:	d04c      	beq.n	1194e <cbvprintf+0x29e>
   118b4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
   118b6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   118ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
   118be:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
   118c2:	2a78      	cmp	r2, #120	; 0x78
   118c4:	f200 80d9 	bhi.w	11a7a <cbvprintf+0x3ca>
   118c8:	2a57      	cmp	r2, #87	; 0x57
   118ca:	d84d      	bhi.n	11968 <cbvprintf+0x2b8>
   118cc:	2a41      	cmp	r2, #65	; 0x41
   118ce:	d003      	beq.n	118d8 <cbvprintf+0x228>
   118d0:	3a45      	subs	r2, #69	; 0x45
   118d2:	2a02      	cmp	r2, #2
   118d4:	f200 80d1 	bhi.w	11a7a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
   118d8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   118dc:	2204      	movs	r2, #4
   118de:	f362 0302 	bfi	r3, r2, #0, #3
   118e2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
   118e6:	2301      	movs	r3, #1
			break;
   118e8:	e09e      	b.n	11a28 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
   118ea:	fb06 2101 	mla	r1, r6, r1, r2
   118ee:	3930      	subs	r1, #48	; 0x30
   118f0:	4603      	mov	r3, r0
   118f2:	e764      	b.n	117be <cbvprintf+0x10e>
	switch (*sp) {
   118f4:	2a74      	cmp	r2, #116	; 0x74
   118f6:	d026      	beq.n	11946 <cbvprintf+0x296>
   118f8:	2a7a      	cmp	r2, #122	; 0x7a
   118fa:	d1db      	bne.n	118b4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
   118fc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11900:	2206      	movs	r2, #6
   11902:	e00d      	b.n	11920 <cbvprintf+0x270>
		if (*++sp == 'h') {
   11904:	785a      	ldrb	r2, [r3, #1]
   11906:	2a68      	cmp	r2, #104	; 0x68
   11908:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   1190c:	d106      	bne.n	1191c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
   1190e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11910:	f361 02c6 	bfi	r2, r1, #3, #4
   11914:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
   11918:	1c9f      	adds	r7, r3, #2
   1191a:	e7cc      	b.n	118b6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
   1191c:	4613      	mov	r3, r2
   1191e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
   11920:	f362 03c6 	bfi	r3, r2, #3, #4
   11924:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
   11928:	e7c5      	b.n	118b6 <cbvprintf+0x206>
		if (*++sp == 'l') {
   1192a:	785a      	ldrb	r2, [r3, #1]
   1192c:	2a6c      	cmp	r2, #108	; 0x6c
   1192e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
   11932:	d101      	bne.n	11938 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
   11934:	2104      	movs	r1, #4
   11936:	e7eb      	b.n	11910 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
   11938:	4613      	mov	r3, r2
   1193a:	2203      	movs	r2, #3
   1193c:	e7f0      	b.n	11920 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
   1193e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   11942:	2205      	movs	r2, #5
   11944:	e7ec      	b.n	11920 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
   11946:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
   1194a:	2207      	movs	r2, #7
   1194c:	e7e8      	b.n	11920 <cbvprintf+0x270>
		conv->unsupported = true;
   1194e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   11952:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   11956:	f023 0302 	bic.w	r3, r3, #2
   1195a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   1195e:	f043 0302 	orr.w	r3, r3, #2
   11962:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
   11966:	e7a6      	b.n	118b6 <cbvprintf+0x206>
   11968:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   1196c:	2920      	cmp	r1, #32
   1196e:	f200 8084 	bhi.w	11a7a <cbvprintf+0x3ca>
   11972:	a001      	add	r0, pc, #4	; (adr r0, 11978 <cbvprintf+0x2c8>)
   11974:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11978:	00011a3d 	.word	0x00011a3d
   1197c:	00011a7b 	.word	0x00011a7b
   11980:	00011a7b 	.word	0x00011a7b
   11984:	00011a7b 	.word	0x00011a7b
   11988:	00011a7b 	.word	0x00011a7b
   1198c:	00011a7b 	.word	0x00011a7b
   11990:	00011a7b 	.word	0x00011a7b
   11994:	00011a7b 	.word	0x00011a7b
   11998:	00011a7b 	.word	0x00011a7b
   1199c:	000118d9 	.word	0x000118d9
   119a0:	00011a7b 	.word	0x00011a7b
   119a4:	00011a3d 	.word	0x00011a3d
   119a8:	000119fd 	.word	0x000119fd
   119ac:	000118d9 	.word	0x000118d9
   119b0:	000118d9 	.word	0x000118d9
   119b4:	000118d9 	.word	0x000118d9
   119b8:	00011a7b 	.word	0x00011a7b
   119bc:	000119fd 	.word	0x000119fd
   119c0:	00011a7b 	.word	0x00011a7b
   119c4:	00011a7b 	.word	0x00011a7b
   119c8:	00011a7b 	.word	0x00011a7b
   119cc:	00011a7b 	.word	0x00011a7b
   119d0:	00011a45 	.word	0x00011a45
   119d4:	00011a3d 	.word	0x00011a3d
   119d8:	00011a61 	.word	0x00011a61
   119dc:	00011a7b 	.word	0x00011a7b
   119e0:	00011a7b 	.word	0x00011a7b
   119e4:	00011a61 	.word	0x00011a61
   119e8:	00011a7b 	.word	0x00011a7b
   119ec:	00011a3d 	.word	0x00011a3d
   119f0:	00011a7b 	.word	0x00011a7b
   119f4:	00011a7b 	.word	0x00011a7b
   119f8:	00011a3d 	.word	0x00011a3d
		conv->specifier_cat = SPECIFIER_SINT;
   119fc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11a00:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a02:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11a06:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a0a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11a0c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
   11a10:	bf02      	ittt	eq
   11a12:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
   11a16:	f041 0101 	orreq.w	r1, r1, #1
   11a1a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
   11a1e:	2a63      	cmp	r2, #99	; 0x63
   11a20:	d131      	bne.n	11a86 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11a22:	3b00      	subs	r3, #0
   11a24:	bf18      	it	ne
   11a26:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   11a28:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
   11a2c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11a30:	430b      	orrs	r3, r1
   11a32:	f363 0241 	bfi	r2, r3, #1, #1
   11a36:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
   11a3a:	e6d8      	b.n	117ee <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
   11a3c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
   11a40:	2002      	movs	r0, #2
   11a42:	e7de      	b.n	11a02 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
   11a44:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a48:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11a4c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   11a50:	2103      	movs	r1, #3
   11a52:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a56:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11a58:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
   11a5c:	4143      	adcs	r3, r0
   11a5e:	e7e3      	b.n	11a28 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
   11a60:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11a64:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   11a66:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11a6a:	f361 0202 	bfi	r2, r1, #0, #3
   11a6e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
   11a72:	bf14      	ite	ne
   11a74:	2301      	movne	r3, #1
   11a76:	2300      	moveq	r3, #0
   11a78:	e7d6      	b.n	11a28 <cbvprintf+0x378>
		conv->invalid = true;
   11a7a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11a7e:	f043 0301 	orr.w	r3, r3, #1
   11a82:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
   11a86:	2300      	movs	r3, #0
   11a88:	e7ce      	b.n	11a28 <cbvprintf+0x378>
		} else if (conv->width_present) {
   11a8a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
   11a8e:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11a90:	bfb4      	ite	lt
   11a92:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
   11a96:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
   11a9a:	e6ba      	b.n	11812 <cbvprintf+0x162>
		} else if (conv->prec_present) {
   11a9c:	079b      	lsls	r3, r3, #30
   11a9e:	f57f aec7 	bpl.w	11830 <cbvprintf+0x180>
			precision = conv->prec_value;
   11aa2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
   11aa6:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
   11aaa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   11aac:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
   11ab0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
   11ab4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   11ab8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   11aba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11abe:	d138      	bne.n	11b32 <cbvprintf+0x482>
			switch (length_mod) {
   11ac0:	1ecb      	subs	r3, r1, #3
   11ac2:	2b04      	cmp	r3, #4
   11ac4:	d822      	bhi.n	11b0c <cbvprintf+0x45c>
   11ac6:	e8df f003 	tbb	[pc, r3]
   11aca:	0903      	.short	0x0903
   11acc:	2109      	.short	0x2109
   11ace:	21          	.byte	0x21
   11acf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11ad0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
   11ad4:	17da      	asrs	r2, r3, #31
   11ad6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
   11ada:	e006      	b.n	11aea <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
   11adc:	3407      	adds	r4, #7
   11ade:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   11ae2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
   11ae6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
   11aea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   11aee:	f013 0603 	ands.w	r6, r3, #3
   11af2:	d056      	beq.n	11ba2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
   11af4:	9802      	ldr	r0, [sp, #8]
   11af6:	463b      	mov	r3, r7
   11af8:	4652      	mov	r2, sl
   11afa:	4659      	mov	r1, fp
   11afc:	f016 fc06 	bl	2830c <outs>
   11b00:	2800      	cmp	r0, #0
   11b02:	f2c0 8142 	blt.w	11d8a <cbvprintf+0x6da>
   11b06:	4405      	add	r5, r0
			continue;
   11b08:	46ba      	mov	sl, r7
   11b0a:	e5d9      	b.n	116c0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11b0c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
   11b10:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11b12:	ea4f 72e3 	mov.w	r2, r3, asr #31
   11b16:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11b1a:	d105      	bne.n	11b28 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
   11b1c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
   11b20:	930a      	str	r3, [sp, #40]	; 0x28
   11b22:	2300      	movs	r3, #0
   11b24:	930b      	str	r3, [sp, #44]	; 0x2c
   11b26:	e7e0      	b.n	11aea <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
   11b28:	2902      	cmp	r1, #2
   11b2a:	d1de      	bne.n	11aea <cbvprintf+0x43a>
				value->sint = (short)value->sint;
   11b2c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   11b30:	e7d0      	b.n	11ad4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
   11b32:	2b02      	cmp	r3, #2
   11b34:	d123      	bne.n	11b7e <cbvprintf+0x4ce>
			switch (length_mod) {
   11b36:	1ecb      	subs	r3, r1, #3
   11b38:	2b04      	cmp	r3, #4
   11b3a:	d813      	bhi.n	11b64 <cbvprintf+0x4b4>
   11b3c:	e8df f003 	tbb	[pc, r3]
   11b40:	120a0a03 	.word	0x120a0a03
   11b44:	12          	.byte	0x12
   11b45:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   11b46:	6822      	ldr	r2, [r4, #0]
   11b48:	920a      	str	r2, [sp, #40]	; 0x28
   11b4a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
   11b4c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
   11b4e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
   11b50:	4604      	mov	r4, r0
   11b52:	e7ca      	b.n	11aea <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
   11b54:	1de0      	adds	r0, r4, #7
   11b56:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
   11b5a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   11b5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
   11b62:	e7f5      	b.n	11b50 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
   11b64:	f854 3b04 	ldr.w	r3, [r4], #4
   11b68:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
   11b6a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   11b6c:	f04f 0300 	mov.w	r3, #0
   11b70:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
   11b72:	d0d3      	beq.n	11b1c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
   11b74:	2902      	cmp	r1, #2
   11b76:	d1b8      	bne.n	11aea <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
   11b78:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   11b7c:	e7d0      	b.n	11b20 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
   11b7e:	2b04      	cmp	r3, #4
   11b80:	d109      	bne.n	11b96 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
   11b82:	1de3      	adds	r3, r4, #7
   11b84:	f023 0307 	bic.w	r3, r3, #7
   11b88:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
   11b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b90:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   11b94:	e7a9      	b.n	11aea <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11b96:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11b98:	bf04      	itt	eq
   11b9a:	f854 3b04 	ldreq.w	r3, [r4], #4
   11b9e:	930a      	streq	r3, [sp, #40]	; 0x28
   11ba0:	e7a3      	b.n	11aea <cbvprintf+0x43a>
		switch (conv->specifier) {
   11ba2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11ba6:	2878      	cmp	r0, #120	; 0x78
   11ba8:	d8ae      	bhi.n	11b08 <cbvprintf+0x458>
   11baa:	2862      	cmp	r0, #98	; 0x62
   11bac:	d822      	bhi.n	11bf4 <cbvprintf+0x544>
   11bae:	2825      	cmp	r0, #37	; 0x25
   11bb0:	f43f ad8f 	beq.w	116d2 <cbvprintf+0x22>
   11bb4:	2858      	cmp	r0, #88	; 0x58
   11bb6:	d1a7      	bne.n	11b08 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11bb8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11bbc:	9300      	str	r3, [sp, #0]
   11bbe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11bc2:	ab04      	add	r3, sp, #16
   11bc4:	aa0c      	add	r2, sp, #48	; 0x30
   11bc6:	f016 fb5b 	bl	28280 <encode_uint>
   11bca:	4682      	mov	sl, r0
			if (precision >= 0) {
   11bcc:	f1b8 0f00 	cmp.w	r8, #0
   11bd0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
   11bd4:	db0c      	blt.n	11bf0 <cbvprintf+0x540>
				conv->flag_zero = false;
   11bd6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
   11bda:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
   11bde:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   11be2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
   11be4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
   11be8:	d902      	bls.n	11bf0 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
   11bea:	eba8 0303 	sub.w	r3, r8, r3
   11bee:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
   11bf0:	4680      	mov	r8, r0
   11bf2:	e03d      	b.n	11c70 <cbvprintf+0x5c0>
   11bf4:	3863      	subs	r0, #99	; 0x63
   11bf6:	2815      	cmp	r0, #21
   11bf8:	d886      	bhi.n	11b08 <cbvprintf+0x458>
   11bfa:	a201      	add	r2, pc, #4	; (adr r2, 11c00 <cbvprintf+0x550>)
   11bfc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11c00:	00011c81 	.word	0x00011c81
   11c04:	00011ce5 	.word	0x00011ce5
   11c08:	00011b09 	.word	0x00011b09
   11c0c:	00011b09 	.word	0x00011b09
   11c10:	00011b09 	.word	0x00011b09
   11c14:	00011b09 	.word	0x00011b09
   11c18:	00011ce5 	.word	0x00011ce5
   11c1c:	00011b09 	.word	0x00011b09
   11c20:	00011b09 	.word	0x00011b09
   11c24:	00011b09 	.word	0x00011b09
   11c28:	00011b09 	.word	0x00011b09
   11c2c:	00011d3f 	.word	0x00011d3f
   11c30:	00011d0d 	.word	0x00011d0d
   11c34:	00011d11 	.word	0x00011d11
   11c38:	00011b09 	.word	0x00011b09
   11c3c:	00011b09 	.word	0x00011b09
   11c40:	00011c59 	.word	0x00011c59
   11c44:	00011b09 	.word	0x00011b09
   11c48:	00011d0d 	.word	0x00011d0d
   11c4c:	00011b09 	.word	0x00011b09
   11c50:	00011b09 	.word	0x00011b09
   11c54:	00011d0d 	.word	0x00011d0d
			if (precision >= 0) {
   11c58:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
   11c5c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
   11c60:	db0a      	blt.n	11c78 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
   11c62:	4641      	mov	r1, r8
   11c64:	4650      	mov	r0, sl
   11c66:	f016 ffb0 	bl	28bca <strnlen>
			bpe = bps + len;
   11c6a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
   11c6e:	2600      	movs	r6, #0
		if (bps == NULL) {
   11c70:	f1ba 0f00 	cmp.w	sl, #0
   11c74:	d10c      	bne.n	11c90 <cbvprintf+0x5e0>
   11c76:	e747      	b.n	11b08 <cbvprintf+0x458>
				len = strlen(bps);
   11c78:	4650      	mov	r0, sl
   11c7a:	f016 ff9f 	bl	28bbc <strlen>
   11c7e:	e7f4      	b.n	11c6a <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   11c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c82:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
   11c86:	2600      	movs	r6, #0
			bps = buf;
   11c88:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
   11c8c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
   11c90:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
   11c94:	b106      	cbz	r6, 11c98 <cbvprintf+0x5e8>
			nj_len += 1U;
   11c96:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   11c98:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
   11c9c:	06d0      	lsls	r0, r2, #27
   11c9e:	d568      	bpl.n	11d72 <cbvprintf+0x6c2>
			nj_len += 2U;
   11ca0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   11ca2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   11ca4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
   11ca6:	bf48      	it	mi
   11ca8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
   11caa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   11cac:	bf48      	it	mi
   11cae:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   11cb0:	f1b9 0f00 	cmp.w	r9, #0
   11cb4:	dd76      	ble.n	11da4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
   11cb6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
   11cba:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
   11cbe:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11cc2:	9303      	str	r3, [sp, #12]
   11cc4:	0753      	lsls	r3, r2, #29
   11cc6:	d46d      	bmi.n	11da4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
   11cc8:	0650      	lsls	r0, r2, #25
   11cca:	d561      	bpl.n	11d90 <cbvprintf+0x6e0>
					if (sign != 0) {
   11ccc:	b146      	cbz	r6, 11ce0 <cbvprintf+0x630>
						OUTC(sign);
   11cce:	9b02      	ldr	r3, [sp, #8]
   11cd0:	4659      	mov	r1, fp
   11cd2:	4630      	mov	r0, r6
   11cd4:	4798      	blx	r3
   11cd6:	2800      	cmp	r0, #0
   11cd8:	db57      	blt.n	11d8a <cbvprintf+0x6da>
						sign = 0;
   11cda:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11cdc:	3501      	adds	r5, #1
						sign = 0;
   11cde:	461e      	mov	r6, r3
					pad = '0';
   11ce0:	2330      	movs	r3, #48	; 0x30
   11ce2:	e056      	b.n	11d92 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
   11ce4:	071e      	lsls	r6, r3, #28
   11ce6:	d40f      	bmi.n	11d08 <cbvprintf+0x658>
				sign = ' ';
   11ce8:	f013 0610 	ands.w	r6, r3, #16
   11cec:	bf18      	it	ne
   11cee:	2620      	movne	r6, #32
			sint = value->sint;
   11cf0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
   11cf4:	2b00      	cmp	r3, #0
   11cf6:	f6bf af5f 	bge.w	11bb8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
   11cfa:	4252      	negs	r2, r2
   11cfc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11d00:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
   11d04:	262d      	movs	r6, #45	; 0x2d
   11d06:	e757      	b.n	11bb8 <cbvprintf+0x508>
				sign = '+';
   11d08:	262b      	movs	r6, #43	; 0x2b
   11d0a:	e7f1      	b.n	11cf0 <cbvprintf+0x640>
		switch (conv->specifier) {
   11d0c:	2600      	movs	r6, #0
   11d0e:	e753      	b.n	11bb8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
   11d10:	980a      	ldr	r0, [sp, #40]	; 0x28
   11d12:	b340      	cbz	r0, 11d66 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11d14:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   11d18:	9300      	str	r3, [sp, #0]
   11d1a:	aa0c      	add	r2, sp, #48	; 0x30
   11d1c:	ab04      	add	r3, sp, #16
   11d1e:	2100      	movs	r1, #0
   11d20:	f016 faae 	bl	28280 <encode_uint>
				conv->altform_0c = true;
   11d24:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
   11d28:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   11d2c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   11d30:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   11d34:	4682      	mov	sl, r0
				conv->altform_0c = true;
   11d36:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
   11d3a:	2600      	movs	r6, #0
				goto prec_int_pad0;
   11d3c:	e746      	b.n	11bcc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
   11d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
   11d40:	2907      	cmp	r1, #7
   11d42:	f63f aee1 	bhi.w	11b08 <cbvprintf+0x458>
   11d46:	e8df f001 	tbb	[pc, r1]
   11d4a:	040c      	.short	0x040c
   11d4c:	08080c06 	.word	0x08080c06
   11d50:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
   11d52:	701d      	strb	r5, [r3, #0]
		break;
   11d54:	e6d8      	b.n	11b08 <cbvprintf+0x458>
		*(short *)dp = (short)count;
   11d56:	801d      	strh	r5, [r3, #0]
		break;
   11d58:	e6d6      	b.n	11b08 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
   11d5a:	17ea      	asrs	r2, r5, #31
   11d5c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
   11d60:	e6d2      	b.n	11b08 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   11d62:	601d      	str	r5, [r3, #0]
		break;
   11d64:	e6d0      	b.n	11b08 <cbvprintf+0x458>
			bps = "(nil)";
   11d66:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 11e30 <cbvprintf+0x780>
   11d6a:	4606      	mov	r6, r0
			bpe = bps + 5;
   11d6c:	f10a 0805 	add.w	r8, sl, #5
   11d70:	e78e      	b.n	11c90 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
   11d72:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   11d74:	bf48      	it	mi
   11d76:	3301      	addmi	r3, #1
   11d78:	e793      	b.n	11ca2 <cbvprintf+0x5f2>
					OUTC(pad);
   11d7a:	4618      	mov	r0, r3
   11d7c:	9303      	str	r3, [sp, #12]
   11d7e:	4659      	mov	r1, fp
   11d80:	9b02      	ldr	r3, [sp, #8]
   11d82:	4798      	blx	r3
   11d84:	2800      	cmp	r0, #0
   11d86:	9b03      	ldr	r3, [sp, #12]
   11d88:	da04      	bge.n	11d94 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
   11d8a:	b011      	add	sp, #68	; 0x44
   11d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11d90:	2320      	movs	r3, #32
   11d92:	444d      	add	r5, r9
   11d94:	464a      	mov	r2, r9
				while (width-- > 0) {
   11d96:	2a00      	cmp	r2, #0
   11d98:	eba5 0109 	sub.w	r1, r5, r9
   11d9c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   11da0:	dceb      	bgt.n	11d7a <cbvprintf+0x6ca>
   11da2:	460d      	mov	r5, r1
		if (sign != 0) {
   11da4:	b136      	cbz	r6, 11db4 <cbvprintf+0x704>
			OUTC(sign);
   11da6:	9b02      	ldr	r3, [sp, #8]
   11da8:	4659      	mov	r1, fp
   11daa:	4630      	mov	r0, r6
   11dac:	4798      	blx	r3
   11dae:	2800      	cmp	r0, #0
   11db0:	dbeb      	blt.n	11d8a <cbvprintf+0x6da>
   11db2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11db4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11db8:	06d9      	lsls	r1, r3, #27
   11dba:	d401      	bmi.n	11dc0 <cbvprintf+0x710>
   11dbc:	071a      	lsls	r2, r3, #28
   11dbe:	d506      	bpl.n	11dce <cbvprintf+0x71e>
				OUTC('0');
   11dc0:	9b02      	ldr	r3, [sp, #8]
   11dc2:	4659      	mov	r1, fp
   11dc4:	2030      	movs	r0, #48	; 0x30
   11dc6:	4798      	blx	r3
   11dc8:	2800      	cmp	r0, #0
   11dca:	dbde      	blt.n	11d8a <cbvprintf+0x6da>
   11dcc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11dce:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
   11dd2:	06db      	lsls	r3, r3, #27
   11dd4:	d507      	bpl.n	11de6 <cbvprintf+0x736>
				OUTC(conv->specifier);
   11dd6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   11dda:	9b02      	ldr	r3, [sp, #8]
   11ddc:	4659      	mov	r1, fp
   11dde:	4798      	blx	r3
   11de0:	2800      	cmp	r0, #0
   11de2:	dbd2      	blt.n	11d8a <cbvprintf+0x6da>
   11de4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11de6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   11de8:	442e      	add	r6, r5
   11dea:	1b73      	subs	r3, r6, r5
   11dec:	2b00      	cmp	r3, #0
   11dee:	dc16      	bgt.n	11e1e <cbvprintf+0x76e>
			OUTS(bps, bpe);
   11df0:	9802      	ldr	r0, [sp, #8]
   11df2:	4643      	mov	r3, r8
   11df4:	4652      	mov	r2, sl
   11df6:	4659      	mov	r1, fp
   11df8:	f016 fa88 	bl	2830c <outs>
   11dfc:	2800      	cmp	r0, #0
   11dfe:	dbc4      	blt.n	11d8a <cbvprintf+0x6da>
   11e00:	4405      	add	r5, r0
		while (width > 0) {
   11e02:	44a9      	add	r9, r5
   11e04:	eba9 0305 	sub.w	r3, r9, r5
   11e08:	2b00      	cmp	r3, #0
   11e0a:	f77f ae7d 	ble.w	11b08 <cbvprintf+0x458>
			OUTC(' ');
   11e0e:	9b02      	ldr	r3, [sp, #8]
   11e10:	4659      	mov	r1, fp
   11e12:	2020      	movs	r0, #32
   11e14:	4798      	blx	r3
   11e16:	2800      	cmp	r0, #0
   11e18:	dbb7      	blt.n	11d8a <cbvprintf+0x6da>
   11e1a:	3501      	adds	r5, #1
			--width;
   11e1c:	e7f2      	b.n	11e04 <cbvprintf+0x754>
				OUTC('0');
   11e1e:	9b02      	ldr	r3, [sp, #8]
   11e20:	4659      	mov	r1, fp
   11e22:	2030      	movs	r0, #48	; 0x30
   11e24:	4798      	blx	r3
   11e26:	2800      	cmp	r0, #0
   11e28:	dbaf      	blt.n	11d8a <cbvprintf+0x6da>
   11e2a:	3501      	adds	r5, #1
   11e2c:	e7dd      	b.n	11dea <cbvprintf+0x73a>
   11e2e:	bf00      	nop
   11e30:	0002c8df 	.word	0x0002c8df

00011e34 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   11e34:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   11e36:	4910      	ldr	r1, [pc, #64]	; (11e78 <enable_logger+0x44>)
   11e38:	4810      	ldr	r0, [pc, #64]	; (11e7c <enable_logger+0x48>)
{
   11e3a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   11e3c:	2200      	movs	r2, #0
   11e3e:	f018 ff67 	bl	2ad10 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11e42:	4d0f      	ldr	r5, [pc, #60]	; (11e80 <enable_logger+0x4c>)
   11e44:	490f      	ldr	r1, [pc, #60]	; (11e84 <enable_logger+0x50>)
   11e46:	2200      	movs	r2, #0
   11e48:	2300      	movs	r3, #0
   11e4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   11e4e:	2400      	movs	r4, #0
   11e50:	230e      	movs	r3, #14
   11e52:	e9cd 3403 	strd	r3, r4, [sp, #12]
   11e56:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11e5a:	4b0b      	ldr	r3, [pc, #44]	; (11e88 <enable_logger+0x54>)
   11e5c:	9400      	str	r4, [sp, #0]
   11e5e:	f44f 7240 	mov.w	r2, #768	; 0x300
   11e62:	4628      	mov	r0, r5
   11e64:	f014 fda4 	bl	269b0 <z_impl_k_thread_create>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&thread, *(uintptr_t *)&str, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
   11e68:	4908      	ldr	r1, [pc, #32]	; (11e8c <enable_logger+0x58>)
   11e6a:	4628      	mov	r0, r5
   11e6c:	f018 fbf9 	bl	2a662 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   11e70:	4620      	mov	r0, r4
   11e72:	b009      	add	sp, #36	; 0x24
   11e74:	bd30      	pop	{r4, r5, pc}
   11e76:	bf00      	nop
   11e78:	00011e91 	.word	0x00011e91
   11e7c:	20000838 	.word	0x20000838
   11e80:	20000870 	.word	0x20000870
   11e84:	20002660 	.word	0x20002660
   11e88:	000121f9 	.word	0x000121f9
   11e8c:	0002c8e5 	.word	0x0002c8e5

00011e90 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
   11e90:	4801      	ldr	r0, [pc, #4]	; (11e98 <log_process_thread_timer_expiry_fn+0x8>)
   11e92:	f014 be5f 	b.w	26b54 <z_impl_k_sem_give>
   11e96:	bf00      	nop
   11e98:	200006e4 	.word	0x200006e4

00011e9c <log_core_init>:
{
   11e9c:	b510      	push	{r4, lr}
	panic_mode = false;
   11e9e:	4b0b      	ldr	r3, [pc, #44]	; (11ecc <log_core_init+0x30>)
   11ea0:	2200      	movs	r2, #0
   11ea2:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
   11ea4:	4b0a      	ldr	r3, [pc, #40]	; (11ed0 <log_core_init+0x34>)
   11ea6:	4a0b      	ldr	r2, [pc, #44]	; (11ed4 <log_core_init+0x38>)
   11ea8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   11eaa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11eae:	f000 fadb 	bl	12468 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   11eb2:	f000 fa65 	bl	12380 <log_msg_pool_init>
		log_list_init(&list);
   11eb6:	4808      	ldr	r0, [pc, #32]	; (11ed8 <log_core_init+0x3c>)
   11eb8:	f016 fa3f 	bl	2833a <log_list_init>
}
   11ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   11ec0:	4906      	ldr	r1, [pc, #24]	; (11edc <log_core_init+0x40>)
   11ec2:	4807      	ldr	r0, [pc, #28]	; (11ee0 <log_core_init+0x44>)
   11ec4:	2308      	movs	r3, #8
   11ec6:	2248      	movs	r2, #72	; 0x48
   11ec8:	f018 bb81 	b.w	2a5ce <k_mem_slab_init>
   11ecc:	20002595 	.word	0x20002595
   11ed0:	20000148 	.word	0x20000148
   11ed4:	00028379 	.word	0x00028379
   11ed8:	200011a0 	.word	0x200011a0
   11edc:	20004528 	.word	0x20004528
   11ee0:	200011a8 	.word	0x200011a8

00011ee4 <get_msg>:
{
   11ee4:	b510      	push	{r4, lr}
   11ee6:	f04f 0320 	mov.w	r3, #32
   11eea:	f3ef 8411 	mrs	r4, BASEPRI
   11eee:	f383 8811 	msr	BASEPRI, r3
   11ef2:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11ef6:	4804      	ldr	r0, [pc, #16]	; (11f08 <get_msg+0x24>)
   11ef8:	f016 fa2f 	bl	2835a <log_list_head_get>
	__asm__ volatile(
   11efc:	f384 8811 	msr	BASEPRI, r4
   11f00:	f3bf 8f6f 	isb	sy
}
   11f04:	bd10      	pop	{r4, pc}
   11f06:	bf00      	nop
   11f08:	200011a0 	.word	0x200011a0

00011f0c <z_log_dropped>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11f0c:	4b06      	ldr	r3, [pc, #24]	; (11f28 <z_log_dropped+0x1c>)
   11f0e:	f3bf 8f5b 	dmb	ish
   11f12:	e853 2f00 	ldrex	r2, [r3]
   11f16:	3201      	adds	r2, #1
   11f18:	e843 2100 	strex	r1, r2, [r3]
   11f1c:	2900      	cmp	r1, #0
   11f1e:	d1f8      	bne.n	11f12 <z_log_dropped+0x6>
   11f20:	f3bf 8f5b 	dmb	ish
}
   11f24:	4770      	bx	lr
   11f26:	bf00      	nop
   11f28:	20001198 	.word	0x20001198

00011f2c <z_log_dropped_read_and_clear>:
}
   11f2c:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   11f2e:	4b06      	ldr	r3, [pc, #24]	; (11f48 <z_log_dropped_read_and_clear+0x1c>)
   11f30:	f3bf 8f5b 	dmb	ish
   11f34:	4602      	mov	r2, r0
   11f36:	e853 0f00 	ldrex	r0, [r3]
   11f3a:	e843 2100 	strex	r1, r2, [r3]
   11f3e:	2900      	cmp	r1, #0
   11f40:	d1f9      	bne.n	11f36 <z_log_dropped_read_and_clear+0xa>
   11f42:	f3bf 8f5b 	dmb	ish
   11f46:	4770      	bx	lr
   11f48:	20001198 	.word	0x20001198

00011f4c <dropped_notify>:
{
   11f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   11f4e:	f7ff ffed 	bl	11f2c <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   11f52:	4c0a      	ldr	r4, [pc, #40]	; (11f7c <dropped_notify+0x30>)
   11f54:	4d0a      	ldr	r5, [pc, #40]	; (11f80 <dropped_notify+0x34>)
   11f56:	1b2d      	subs	r5, r5, r4
   11f58:	4607      	mov	r7, r0
   11f5a:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11f5c:	2600      	movs	r6, #0
   11f5e:	42ae      	cmp	r6, r5
   11f60:	db00      	blt.n	11f64 <dropped_notify+0x18>
}
   11f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
   11f64:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   11f66:	795b      	ldrb	r3, [r3, #5]
   11f68:	b12b      	cbz	r3, 11f76 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
   11f6a:	6823      	ldr	r3, [r4, #0]
   11f6c:	691b      	ldr	r3, [r3, #16]
   11f6e:	b113      	cbz	r3, 11f76 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
   11f70:	4639      	mov	r1, r7
   11f72:	4620      	mov	r0, r4
   11f74:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11f76:	3601      	adds	r6, #1
   11f78:	3410      	adds	r4, #16
   11f7a:	e7f0      	b.n	11f5e <dropped_notify+0x12>
   11f7c:	0002b388 	.word	0x0002b388
   11f80:	0002b388 	.word	0x0002b388

00011f84 <log_backend_enable>:
	id += backend - log_backend_get(0);
   11f84:	4a09      	ldr	r2, [pc, #36]	; (11fac <log_backend_enable+0x28>)
	backend->cb->id = id;
   11f86:	6843      	ldr	r3, [r0, #4]
   11f88:	1a80      	subs	r0, r0, r2
{
   11f8a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
   11f8c:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11f8e:	4c08      	ldr	r4, [pc, #32]	; (11fb0 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
   11f90:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
   11f92:	3001      	adds	r0, #1
	backend->cb->active = true;
   11f94:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
   11f96:	7118      	strb	r0, [r3, #4]
   11f98:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   11f9a:	7823      	ldrb	r3, [r4, #0]
   11f9c:	b913      	cbnz	r3, 11fa4 <log_backend_enable+0x20>
   11f9e:	4805      	ldr	r0, [pc, #20]	; (11fb4 <log_backend_enable+0x30>)
   11fa0:	f014 fdd8 	bl	26b54 <z_impl_k_sem_give>
	backend_attached = true;
   11fa4:	2301      	movs	r3, #1
   11fa6:	7023      	strb	r3, [r4, #0]
}
   11fa8:	bd10      	pop	{r4, pc}
   11faa:	bf00      	nop
   11fac:	0002b388 	.word	0x0002b388
   11fb0:	20002594 	.word	0x20002594
   11fb4:	200006e4 	.word	0x200006e4

00011fb8 <log_init>:
{
   11fb8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11fba:	4b12      	ldr	r3, [pc, #72]	; (12004 <log_init+0x4c>)
   11fbc:	f3bf 8f5b 	dmb	ish
   11fc0:	e853 5f00 	ldrex	r5, [r3]
   11fc4:	1c6a      	adds	r2, r5, #1
   11fc6:	e843 2100 	strex	r1, r2, [r3]
   11fca:	2900      	cmp	r1, #0
   11fcc:	d1f8      	bne.n	11fc0 <log_init+0x8>
   11fce:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11fd2:	b92d      	cbnz	r5, 11fe0 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
   11fd4:	4c0c      	ldr	r4, [pc, #48]	; (12008 <log_init+0x50>)
   11fd6:	4e0d      	ldr	r6, [pc, #52]	; (1200c <log_init+0x54>)
   11fd8:	1b36      	subs	r6, r6, r4
   11fda:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
   11fdc:	42b5      	cmp	r5, r6
   11fde:	db00      	blt.n	11fe2 <log_init+0x2a>
}
   11fe0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   11fe2:	7b23      	ldrb	r3, [r4, #12]
   11fe4:	b153      	cbz	r3, 11ffc <log_init+0x44>
			if (backend->api->init != NULL) {
   11fe6:	6823      	ldr	r3, [r4, #0]
   11fe8:	699b      	ldr	r3, [r3, #24]
   11fea:	b10b      	cbz	r3, 11ff0 <log_init+0x38>
				backend->api->init(backend);
   11fec:	4620      	mov	r0, r4
   11fee:	4798      	blx	r3
			log_backend_enable(backend,
   11ff0:	6863      	ldr	r3, [r4, #4]
   11ff2:	2204      	movs	r2, #4
   11ff4:	6819      	ldr	r1, [r3, #0]
   11ff6:	4620      	mov	r0, r4
   11ff8:	f7ff ffc4 	bl	11f84 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11ffc:	3501      	adds	r5, #1
   11ffe:	3410      	adds	r4, #16
   12000:	e7ec      	b.n	11fdc <log_init+0x24>
   12002:	bf00      	nop
   12004:	2000119c 	.word	0x2000119c
   12008:	0002b388 	.word	0x0002b388
   1200c:	0002b388 	.word	0x0002b388

00012010 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12010:	4b16      	ldr	r3, [pc, #88]	; (1206c <z_log_strdup+0x5c>)
   12012:	4298      	cmp	r0, r3
{
   12014:	b537      	push	{r0, r1, r2, r4, r5, lr}
   12016:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   12018:	d302      	bcc.n	12020 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1201a:	4b15      	ldr	r3, [pc, #84]	; (12070 <z_log_strdup+0x60>)
   1201c:	4298      	cmp	r0, r3
   1201e:	d320      	bcc.n	12062 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12020:	4814      	ldr	r0, [pc, #80]	; (12074 <z_log_strdup+0x64>)
   12022:	2200      	movs	r2, #0
   12024:	2300      	movs	r3, #0
   12026:	a901      	add	r1, sp, #4
   12028:	f014 fc62 	bl	268f0 <k_mem_slab_alloc>
	if (err != 0) {
   1202c:	4605      	mov	r5, r0
   1202e:	b9d8      	cbnz	r0, 12068 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12030:	2201      	movs	r2, #1
   12032:	9b01      	ldr	r3, [sp, #4]
   12034:	f3bf 8f5b 	dmb	ish
   12038:	e853 1f00 	ldrex	r1, [r3]
   1203c:	e843 2000 	strex	r0, r2, [r3]
   12040:	2800      	cmp	r0, #0
   12042:	d1f9      	bne.n	12038 <z_log_strdup+0x28>
   12044:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   12048:	9801      	ldr	r0, [sp, #4]
   1204a:	4621      	mov	r1, r4
   1204c:	2241      	movs	r2, #65	; 0x41
   1204e:	3004      	adds	r0, #4
   12050:	f016 fda2 	bl	28b98 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   12054:	9c01      	ldr	r4, [sp, #4]
   12056:	237e      	movs	r3, #126	; 0x7e
   12058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1205c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
   12060:	3404      	adds	r4, #4
}
   12062:	4620      	mov	r0, r4
   12064:	b003      	add	sp, #12
   12066:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
   12068:	4c03      	ldr	r4, [pc, #12]	; (12078 <z_log_strdup+0x68>)
   1206a:	e7fa      	b.n	12062 <z_log_strdup+0x52>
   1206c:	0002b01c 	.word	0x0002b01c
   12070:	0002df24 	.word	0x0002df24
   12074:	200011a8 	.word	0x200011a8
   12078:	0002c8ed 	.word	0x0002c8ed

0001207c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   1207c:	b150      	cbz	r0, 12094 <log_is_strdup+0x18>
   1207e:	4b06      	ldr	r3, [pc, #24]	; (12098 <log_is_strdup+0x1c>)
   12080:	4298      	cmp	r0, r3
   12082:	d306      	bcc.n	12092 <log_is_strdup+0x16>
   12084:	f503 7310 	add.w	r3, r3, #576	; 0x240
   12088:	4298      	cmp	r0, r3
   1208a:	bf2c      	ite	cs
   1208c:	2000      	movcs	r0, #0
   1208e:	2001      	movcc	r0, #1
   12090:	4770      	bx	lr
   12092:	2000      	movs	r0, #0
}
   12094:	4770      	bx	lr
   12096:	bf00      	nop
   12098:	20004528 	.word	0x20004528

0001209c <z_impl_log_process>:
{
   1209c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   120a0:	4b47      	ldr	r3, [pc, #284]	; (121c0 <z_impl_log_process+0x124>)
   120a2:	781b      	ldrb	r3, [r3, #0]
{
   120a4:	b085      	sub	sp, #20
   120a6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
   120a8:	b903      	cbnz	r3, 120ac <z_impl_log_process+0x10>
   120aa:	b300      	cbz	r0, 120ee <z_impl_log_process+0x52>
	msg = get_msg();
   120ac:	f7ff ff1a 	bl	11ee4 <get_msg>
	if (msg.msg) {
   120b0:	4605      	mov	r5, r0
   120b2:	b178      	cbz	r0, 120d4 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   120b4:	f3bf 8f5b 	dmb	ish
   120b8:	4b42      	ldr	r3, [pc, #264]	; (121c4 <z_impl_log_process+0x128>)
   120ba:	e853 2f00 	ldrex	r2, [r3]
   120be:	3a01      	subs	r2, #1
   120c0:	e843 2100 	strex	r1, r2, [r3]
   120c4:	2900      	cmp	r1, #0
   120c6:	d1f8      	bne.n	120ba <z_impl_log_process+0x1e>
   120c8:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
   120cc:	b19c      	cbz	r4, 120f6 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
   120ce:	4628      	mov	r0, r5
   120d0:	f016 f9f9 	bl	284c6 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   120d4:	b92c      	cbnz	r4, 120e2 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
   120d6:	4b3c      	ldr	r3, [pc, #240]	; (121c8 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
   120d8:	681b      	ldr	r3, [r3, #0]
   120da:	2b00      	cmp	r3, #0
   120dc:	dd01      	ble.n	120e2 <z_impl_log_process+0x46>
		dropped_notify();
   120de:	f7ff ff35 	bl	11f4c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   120e2:	483a      	ldr	r0, [pc, #232]	; (121cc <z_impl_log_process+0x130>)
   120e4:	f016 f937 	bl	28356 <log_list_head_peek>
   120e8:	1e04      	subs	r4, r0, #0
   120ea:	bf18      	it	ne
   120ec:	2401      	movne	r4, #1
}
   120ee:	4620      	mov	r0, r4
   120f0:	b005      	add	sp, #20
   120f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
   120f6:	4b36      	ldr	r3, [pc, #216]	; (121d0 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   120f8:	781b      	ldrb	r3, [r3, #0]
   120fa:	b9e3      	cbnz	r3, 12136 <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   120fc:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
   120fe:	07db      	lsls	r3, r3, #31
   12100:	d419      	bmi.n	12136 <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
   12102:	f016 f9f3 	bl	284ec <log_msg_str_get>
   12106:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12108:	4628      	mov	r0, r5
   1210a:	f016 f9ba 	bl	28482 <log_msg_nargs_get>
   1210e:	4601      	mov	r1, r0
   12110:	4638      	mov	r0, r7
   12112:	f016 f935 	bl	28380 <z_log_get_s_mask>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12116:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 121d4 <z_impl_log_process+0x138>
   1211a:	4b2f      	ldr	r3, [pc, #188]	; (121d8 <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   1211c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 121dc <z_impl_log_process+0x140>
   12120:	eba3 0308 	sub.w	r3, r3, r8
   12124:	08db      	lsrs	r3, r3, #3
   12126:	9303      	str	r3, [sp, #12]
   12128:	4b2d      	ldr	r3, [pc, #180]	; (121e0 <z_impl_log_process+0x144>)
   1212a:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1212e:	4606      	mov	r6, r0
   12130:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
   12134:	b936      	cbnz	r6, 12144 <z_impl_log_process+0xa8>
   12136:	4e2b      	ldr	r6, [pc, #172]	; (121e4 <z_impl_log_process+0x148>)
   12138:	4f2b      	ldr	r7, [pc, #172]	; (121e8 <z_impl_log_process+0x14c>)
   1213a:	1bbf      	subs	r7, r7, r6
   1213c:	113f      	asrs	r7, r7, #4
   1213e:	f04f 0800 	mov.w	r8, #0
   12142:	e03a      	b.n	121ba <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
   12144:	fab6 f186 	clz	r1, r6
   12148:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1214c:	4649      	mov	r1, r9
   1214e:	4628      	mov	r0, r5
   12150:	f016 f99a 	bl	28488 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12154:	4b25      	ldr	r3, [pc, #148]	; (121ec <z_impl_log_process+0x150>)
   12156:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   12158:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1215a:	d302      	bcc.n	12162 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1215c:	4a24      	ldr	r2, [pc, #144]	; (121f0 <z_impl_log_process+0x154>)
   1215e:	4290      	cmp	r0, r2
   12160:	d31a      	bcc.n	12198 <z_impl_log_process+0xfc>
   12162:	4608      	mov	r0, r1
   12164:	f7ff ff8a 	bl	1207c <log_is_strdup>
   12168:	4602      	mov	r2, r0
   1216a:	b9a8      	cbnz	r0, 12198 <z_impl_log_process+0xfc>
   1216c:	4b21      	ldr	r3, [pc, #132]	; (121f4 <z_impl_log_process+0x158>)
   1216e:	4299      	cmp	r1, r3
   12170:	d012      	beq.n	12198 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
   12172:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
   12174:	9903      	ldr	r1, [sp, #12]
   12176:	f3c3 1389 	ubfx	r3, r3, #6, #10
   1217a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
   1217c:	bf38      	it	cc
   1217e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
   12182:	ea4f 138a 	mov.w	r3, sl, lsl #6
   12186:	f043 0301 	orr.w	r3, r3, #1
   1218a:	f8ad 3000 	strh.w	r3, [sp]
   1218e:	4649      	mov	r1, r9
   12190:	463b      	mov	r3, r7
   12192:	4658      	mov	r0, fp
   12194:	f016 f94e 	bl	28434 <log_3>
		mask &= ~BIT(idx);
   12198:	2301      	movs	r3, #1
   1219a:	fa03 f109 	lsl.w	r1, r3, r9
   1219e:	ea26 0601 	bic.w	r6, r6, r1
   121a2:	e7c7      	b.n	12134 <z_impl_log_process+0x98>
	return backend->cb->active;
   121a4:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
   121a6:	795b      	ldrb	r3, [r3, #5]
   121a8:	b123      	cbz	r3, 121b4 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
   121aa:	6833      	ldr	r3, [r6, #0]
   121ac:	4629      	mov	r1, r5
   121ae:	685b      	ldr	r3, [r3, #4]
   121b0:	4630      	mov	r0, r6
   121b2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   121b4:	f108 0801 	add.w	r8, r8, #1
   121b8:	3610      	adds	r6, #16
   121ba:	45b8      	cmp	r8, r7
   121bc:	dbf2      	blt.n	121a4 <z_impl_log_process+0x108>
   121be:	e786      	b.n	120ce <z_impl_log_process+0x32>
   121c0:	20002594 	.word	0x20002594
   121c4:	20001194 	.word	0x20001194
   121c8:	20001198 	.word	0x20001198
   121cc:	200011a0 	.word	0x200011a0
   121d0:	20002595 	.word	0x20002595
   121d4:	0002b248 	.word	0x0002b248
   121d8:	0002b388 	.word	0x0002b388
   121dc:	0002c907 	.word	0x0002c907
   121e0:	0002b358 	.word	0x0002b358
   121e4:	0002b388 	.word	0x0002b388
   121e8:	0002b388 	.word	0x0002b388
   121ec:	0002b01c 	.word	0x0002b01c
   121f0:	0002df24 	.word	0x0002df24
   121f4:	0002c8ed 	.word	0x0002c8ed

000121f8 <log_process_thread_func>:
{
   121f8:	b510      	push	{r4, lr}
	log_init();
   121fa:	f7ff fedd 	bl	11fb8 <log_init>
	return z_impl_k_current_get();
   121fe:	f015 f953 	bl	274a8 <z_impl_k_current_get>
	proc_tid = process_tid;
   12202:	4b0c      	ldr	r3, [pc, #48]	; (12234 <log_process_thread_func+0x3c>)
   12204:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12206:	b130      	cbz	r0, 12216 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12208:	4b0b      	ldr	r3, [pc, #44]	; (12238 <log_process_thread_func+0x40>)
	    process_tid &&
   1220a:	681b      	ldr	r3, [r3, #0]
   1220c:	2b09      	cmp	r3, #9
   1220e:	dd02      	ble.n	12216 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
   12210:	480a      	ldr	r0, [pc, #40]	; (1223c <log_process_thread_func+0x44>)
   12212:	f014 fc9f 	bl	26b54 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12216:	4c09      	ldr	r4, [pc, #36]	; (1223c <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12218:	2000      	movs	r0, #0
   1221a:	f7ff ff3f 	bl	1209c <z_impl_log_process>
		if (log_process(false) == false) {
   1221e:	2800      	cmp	r0, #0
   12220:	d1fa      	bne.n	12218 <log_process_thread_func+0x20>
   12222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   12226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1222a:	4620      	mov	r0, r4
   1222c:	f014 fcb8 	bl	26ba0 <z_impl_k_sem_take>
   12230:	e7f2      	b.n	12218 <log_process_thread_func+0x20>
   12232:	bf00      	nop
   12234:	200011c4 	.word	0x200011c4
   12238:	20001194 	.word	0x20001194
   1223c:	200006e4 	.word	0x200006e4

00012240 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12240:	4b29      	ldr	r3, [pc, #164]	; (122e8 <msg_finalize+0xa8>)
{
   12242:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   12244:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   12246:	8141      	strh	r1, [r0, #10]
{
   12248:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1224a:	4798      	blx	r3
   1224c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1224e:	f04f 0320 	mov.w	r3, #32
   12252:	f3ef 8511 	mrs	r5, BASEPRI
   12256:	f383 8811 	msr	BASEPRI, r3
   1225a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   1225e:	4823      	ldr	r0, [pc, #140]	; (122ec <msg_finalize+0xac>)
   12260:	4621      	mov	r1, r4
   12262:	f016 f86e 	bl	28342 <log_list_add_tail>
	__asm__ volatile(
   12266:	f385 8811 	msr	BASEPRI, r5
   1226a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1226e:	f3bf 8f5b 	dmb	ish
   12272:	4b1f      	ldr	r3, [pc, #124]	; (122f0 <msg_finalize+0xb0>)
   12274:	e853 2f00 	ldrex	r2, [r3]
   12278:	3201      	adds	r2, #1
   1227a:	e843 2100 	strex	r1, r2, [r3]
   1227e:	2900      	cmp	r1, #0
   12280:	d1f8      	bne.n	12274 <msg_finalize+0x34>
   12282:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   12286:	4a1b      	ldr	r2, [pc, #108]	; (122f4 <msg_finalize+0xb4>)
   12288:	7812      	ldrb	r2, [r2, #0]
   1228a:	b182      	cbz	r2, 122ae <msg_finalize+0x6e>
	__asm__ volatile(
   1228c:	f04f 0320 	mov.w	r3, #32
   12290:	f3ef 8411 	mrs	r4, BASEPRI
   12294:	f383 8811 	msr	BASEPRI, r3
   12298:	f3bf 8f6f 	isb	sy
   1229c:	2000      	movs	r0, #0
   1229e:	f7ff fefd 	bl	1209c <z_impl_log_process>
	__asm__ volatile(
   122a2:	f384 8811 	msr	BASEPRI, r4
   122a6:	f3bf 8f6f 	isb	sy
}
   122aa:	b003      	add	sp, #12
   122ac:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
   122ae:	4a12      	ldr	r2, [pc, #72]	; (122f8 <msg_finalize+0xb8>)
   122b0:	681b      	ldr	r3, [r3, #0]
   122b2:	6812      	ldr	r2, [r2, #0]
   122b4:	2a00      	cmp	r2, #0
   122b6:	d0f8      	beq.n	122aa <msg_finalize+0x6a>
   122b8:	2b01      	cmp	r3, #1
   122ba:	d10a      	bne.n	122d2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
   122bc:	2200      	movs	r2, #0
   122be:	2300      	movs	r3, #0
   122c0:	e9cd 2300 	strd	r2, r3, [sp]
   122c4:	480d      	ldr	r0, [pc, #52]	; (122fc <msg_finalize+0xbc>)
   122c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   122ca:	2300      	movs	r3, #0
   122cc:	f015 fae4 	bl	27898 <z_impl_k_timer_start>
   122d0:	e7eb      	b.n	122aa <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   122d2:	2b0a      	cmp	r3, #10
   122d4:	d1e9      	bne.n	122aa <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   122d6:	4809      	ldr	r0, [pc, #36]	; (122fc <msg_finalize+0xbc>)
   122d8:	f018 fd26 	bl	2ad28 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   122dc:	4808      	ldr	r0, [pc, #32]	; (12300 <msg_finalize+0xc0>)
}
   122de:	b003      	add	sp, #12
   122e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   122e4:	f014 bc36 	b.w	26b54 <z_impl_k_sem_give>
   122e8:	20000148 	.word	0x20000148
   122ec:	200011a0 	.word	0x200011a0
   122f0:	20001194 	.word	0x20001194
   122f4:	20002595 	.word	0x20002595
   122f8:	200011c4 	.word	0x200011c4
   122fc:	20000838 	.word	0x20000838
   12300:	200006e4 	.word	0x200006e4

00012304 <z_impl_log_panic>:
{
   12304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12306:	4f0e      	ldr	r7, [pc, #56]	; (12340 <z_impl_log_panic+0x3c>)
   12308:	783d      	ldrb	r5, [r7, #0]
   1230a:	b975      	cbnz	r5, 1232a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
   1230c:	4c0d      	ldr	r4, [pc, #52]	; (12344 <z_impl_log_panic+0x40>)
   1230e:	4e0e      	ldr	r6, [pc, #56]	; (12348 <z_impl_log_panic+0x44>)
	log_init();
   12310:	f7ff fe52 	bl	11fb8 <log_init>
   12314:	1b36      	subs	r6, r6, r4
   12316:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12318:	42b5      	cmp	r5, r6
   1231a:	db07      	blt.n	1232c <z_impl_log_panic+0x28>
   1231c:	2000      	movs	r0, #0
   1231e:	f7ff febd 	bl	1209c <z_impl_log_process>
		while (log_process(false) == true) {
   12322:	2800      	cmp	r0, #0
   12324:	d1fa      	bne.n	1231c <z_impl_log_panic+0x18>
	panic_mode = true;
   12326:	2301      	movs	r3, #1
   12328:	703b      	strb	r3, [r7, #0]
}
   1232a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
   1232c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
   1232e:	795b      	ldrb	r3, [r3, #5]
   12330:	b11b      	cbz	r3, 1233a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
   12332:	6823      	ldr	r3, [r4, #0]
   12334:	4620      	mov	r0, r4
   12336:	695b      	ldr	r3, [r3, #20]
   12338:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   1233a:	3501      	adds	r5, #1
   1233c:	3410      	adds	r4, #16
   1233e:	e7eb      	b.n	12318 <z_impl_log_panic+0x14>
   12340:	20002595 	.word	0x20002595
   12344:	0002b388 	.word	0x0002b388
   12348:	0002b388 	.word	0x0002b388

0001234c <log_free>:
{
   1234c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   1234e:	3804      	subs	r0, #4
   12350:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12352:	f3bf 8f5b 	dmb	ish
   12356:	e850 3f00 	ldrex	r3, [r0]
   1235a:	1e5a      	subs	r2, r3, #1
   1235c:	e840 2100 	strex	r1, r2, [r0]
   12360:	2900      	cmp	r1, #0
   12362:	d1f8      	bne.n	12356 <log_free+0xa>
   12364:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   12368:	2b01      	cmp	r3, #1
   1236a:	d103      	bne.n	12374 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   1236c:	4803      	ldr	r0, [pc, #12]	; (1237c <log_free+0x30>)
   1236e:	a901      	add	r1, sp, #4
   12370:	f018 f948 	bl	2a604 <k_mem_slab_free>
}
   12374:	b003      	add	sp, #12
   12376:	f85d fb04 	ldr.w	pc, [sp], #4
   1237a:	bf00      	nop
   1237c:	200011a8 	.word	0x200011a8

00012380 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12380:	2320      	movs	r3, #32
   12382:	4902      	ldr	r1, [pc, #8]	; (1238c <log_msg_pool_init+0xc>)
   12384:	4802      	ldr	r0, [pc, #8]	; (12390 <log_msg_pool_init+0x10>)
   12386:	461a      	mov	r2, r3
   12388:	f018 b921 	b.w	2a5ce <k_mem_slab_init>
   1238c:	20004768 	.word	0x20004768
   12390:	200011c8 	.word	0x200011c8

00012394 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   12394:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   12396:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12398:	4d09      	ldr	r5, [pc, #36]	; (123c0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   1239a:	9301      	str	r3, [sp, #4]
   1239c:	2001      	movs	r0, #1
   1239e:	f7ff fe7d 	bl	1209c <z_impl_log_process>
   123a2:	4604      	mov	r4, r0
			z_log_dropped();
   123a4:	f7ff fdb2 	bl	11f0c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   123a8:	2200      	movs	r2, #0
   123aa:	2300      	movs	r3, #0
   123ac:	a901      	add	r1, sp, #4
   123ae:	4628      	mov	r0, r5
   123b0:	f014 fa9e 	bl	268f0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   123b4:	b108      	cbz	r0, 123ba <log_msg_no_space_handle+0x26>
   123b6:	2c00      	cmp	r4, #0
   123b8:	d1f0      	bne.n	1239c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   123ba:	9801      	ldr	r0, [sp, #4]
   123bc:	b003      	add	sp, #12
   123be:	bd30      	pop	{r4, r5, pc}
   123c0:	200011c8 	.word	0x200011c8

000123c4 <log_msg_chunk_alloc>:
{
   123c4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   123c6:	2300      	movs	r3, #0
   123c8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   123ca:	4807      	ldr	r0, [pc, #28]	; (123e8 <log_msg_chunk_alloc+0x24>)
   123cc:	2200      	movs	r2, #0
   123ce:	2300      	movs	r3, #0
   123d0:	a901      	add	r1, sp, #4
   123d2:	f014 fa8d 	bl	268f0 <k_mem_slab_alloc>
	if (err != 0) {
   123d6:	b110      	cbz	r0, 123de <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   123d8:	f7ff ffdc 	bl	12394 <log_msg_no_space_handle>
   123dc:	9001      	str	r0, [sp, #4]
}
   123de:	9801      	ldr	r0, [sp, #4]
   123e0:	b003      	add	sp, #12
   123e2:	f85d fb04 	ldr.w	pc, [sp], #4
   123e6:	bf00      	nop
   123e8:	200011c8 	.word	0x200011c8

000123ec <msg_free>:
{
   123ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   123ee:	7a03      	ldrb	r3, [r0, #8]
   123f0:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
   123f2:	07dc      	lsls	r4, r3, #31
{
   123f4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   123f6:	d41e      	bmi.n	12436 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   123f8:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
   123fa:	092d      	lsrs	r5, r5, #4
   123fc:	d01b      	beq.n	12436 <msg_free+0x4a>
		uint32_t smask = 0U;
   123fe:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   12400:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12402:	9801      	ldr	r0, [sp, #4]
   12404:	4631      	mov	r1, r6
   12406:	f016 f83f 	bl	28488 <log_msg_arg_get>
   1240a:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   1240c:	f7ff fe36 	bl	1207c <log_is_strdup>
   12410:	b170      	cbz	r0, 12430 <msg_free+0x44>
				if (smask == 0U) {
   12412:	b934      	cbnz	r4, 12422 <msg_free+0x36>
					smask = z_log_get_s_mask(
   12414:	9b01      	ldr	r3, [sp, #4]
   12416:	4629      	mov	r1, r5
   12418:	6918      	ldr	r0, [r3, #16]
   1241a:	f015 ffb1 	bl	28380 <z_log_get_s_mask>
					if (smask == 0U) {
   1241e:	4604      	mov	r4, r0
   12420:	b148      	cbz	r0, 12436 <msg_free+0x4a>
				if (smask & BIT(i)) {
   12422:	fa24 f306 	lsr.w	r3, r4, r6
   12426:	07d9      	lsls	r1, r3, #31
   12428:	d502      	bpl.n	12430 <msg_free+0x44>
					log_free(buf);
   1242a:	4638      	mov	r0, r7
   1242c:	f7ff ff8e 	bl	1234c <log_free>
		for (i = 0U; i < nargs; i++) {
   12430:	3601      	adds	r6, #1
   12432:	42ae      	cmp	r6, r5
   12434:	d3e5      	bcc.n	12402 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   12436:	9b01      	ldr	r3, [sp, #4]
   12438:	7a1a      	ldrb	r2, [r3, #8]
   1243a:	0792      	lsls	r2, r2, #30
   1243c:	d504      	bpl.n	12448 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   1243e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12440:	4c08      	ldr	r4, [pc, #32]	; (12464 <msg_free+0x78>)
   12442:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12444:	9b03      	ldr	r3, [sp, #12]
   12446:	b92b      	cbnz	r3, 12454 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12448:	4806      	ldr	r0, [pc, #24]	; (12464 <msg_free+0x78>)
   1244a:	a901      	add	r1, sp, #4
   1244c:	f018 f8da 	bl	2a604 <k_mem_slab_free>
}
   12450:	b005      	add	sp, #20
   12452:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12454:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12456:	a903      	add	r1, sp, #12
   12458:	4620      	mov	r0, r4
   1245a:	f018 f8d3 	bl	2a604 <k_mem_slab_free>
		cont = next;
   1245e:	9503      	str	r5, [sp, #12]
   12460:	e7f0      	b.n	12444 <msg_free+0x58>
   12462:	bf00      	nop
   12464:	200011c8 	.word	0x200011c8

00012468 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   12468:	4a08      	ldr	r2, [pc, #32]	; (1248c <log_output_timestamp_freq_set+0x24>)
{
   1246a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   1246c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   1246e:	4c08      	ldr	r4, [pc, #32]	; (12490 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   12470:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   12472:	2100      	movs	r1, #0
   12474:	42a0      	cmp	r0, r4
   12476:	d804      	bhi.n	12482 <log_output_timestamp_freq_set+0x1a>
   12478:	b101      	cbz	r1, 1247c <log_output_timestamp_freq_set+0x14>
   1247a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   1247c:	4b05      	ldr	r3, [pc, #20]	; (12494 <log_output_timestamp_freq_set+0x2c>)
   1247e:	6018      	str	r0, [r3, #0]
}
   12480:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   12482:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   12484:	005b      	lsls	r3, r3, #1
   12486:	2101      	movs	r1, #1
   12488:	e7f4      	b.n	12474 <log_output_timestamp_freq_set+0xc>
   1248a:	bf00      	nop
   1248c:	200011e8 	.word	0x200011e8
   12490:	000f4240 	.word	0x000f4240
   12494:	200011e4 	.word	0x200011e4

00012498 <blvl_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
   12498:	4b07      	ldr	r3, [pc, #28]	; (124b8 <blvl_ccc_cfg_changed+0x20>)
   1249a:	4a08      	ldr	r2, [pc, #32]	; (124bc <blvl_ccc_cfg_changed+0x24>)
{
	ARG_UNUSED(attr);

	bool notif_enabled = (value == BT_GATT_CCC_NOTIFY);

	LOG_INF("BAS Notifications %s", notif_enabled ? "enabled" : "disabled");
   1249c:	4808      	ldr	r0, [pc, #32]	; (124c0 <blvl_ccc_cfg_changed+0x28>)
   1249e:	1ad2      	subs	r2, r2, r3
   124a0:	08d2      	lsrs	r2, r2, #3
   124a2:	4b08      	ldr	r3, [pc, #32]	; (124c4 <blvl_ccc_cfg_changed+0x2c>)
   124a4:	0192      	lsls	r2, r2, #6
   124a6:	2901      	cmp	r1, #1
   124a8:	bf14      	ite	ne
   124aa:	4601      	movne	r1, r0
   124ac:	4619      	moveq	r1, r3
   124ae:	f042 0203 	orr.w	r2, r2, #3
   124b2:	4805      	ldr	r0, [pc, #20]	; (124c8 <blvl_ccc_cfg_changed+0x30>)
   124b4:	f015 bf91 	b.w	283da <log_1>
   124b8:	0002b248 	.word	0x0002b248
   124bc:	0002b248 	.word	0x0002b248
   124c0:	0002c973 	.word	0x0002c973
   124c4:	0002c96b 	.word	0x0002c96b
   124c8:	0002c97c 	.word	0x0002c97c

000124cc <read_blvl>:
}

static ssize_t read_blvl(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, void *buf,
			       uint16_t len, uint16_t offset)
{
   124cc:	b510      	push	{r4, lr}
	uint8_t lvl8 = battery_level;
   124ce:	4c08      	ldr	r4, [pc, #32]	; (124f0 <read_blvl+0x24>)
{
   124d0:	b086      	sub	sp, #24
	uint8_t lvl8 = battery_level;
   124d2:	7824      	ldrb	r4, [r4, #0]
   124d4:	f88d 4017 	strb.w	r4, [sp, #23]

	return bt_gatt_attr_read(conn, attr, buf, len, offset, &lvl8,
   124d8:	2401      	movs	r4, #1
   124da:	9402      	str	r4, [sp, #8]
   124dc:	f10d 0417 	add.w	r4, sp, #23
   124e0:	9401      	str	r4, [sp, #4]
   124e2:	f8bd 4020 	ldrh.w	r4, [sp, #32]
   124e6:	9400      	str	r4, [sp, #0]
   124e8:	f017 fd8d 	bl	2a006 <bt_gatt_attr_read>
				 sizeof(lvl8));
}
   124ec:	b006      	add	sp, #24
   124ee:	bd10      	pop	{r4, pc}
   124f0:	200005fd 	.word	0x200005fd

000124f4 <bt_bas_get_battery_level>:
}

uint8_t bt_bas_get_battery_level(void)
{
	return battery_level;
}
   124f4:	4b01      	ldr	r3, [pc, #4]	; (124fc <bt_bas_get_battery_level+0x8>)
   124f6:	7818      	ldrb	r0, [r3, #0]
   124f8:	4770      	bx	lr
   124fa:	bf00      	nop
   124fc:	200005fd 	.word	0x200005fd

00012500 <bt_bas_set_battery_level>:

int bt_bas_set_battery_level(uint8_t level)
{
   12500:	b500      	push	{lr}
   12502:	b089      	sub	sp, #36	; 0x24
	int rc;

	if (level > 100U) {
   12504:	2864      	cmp	r0, #100	; 0x64
{
   12506:	f88d 0007 	strb.w	r0, [sp, #7]
	if (level > 100U) {
   1250a:	d819      	bhi.n	12540 <bt_bas_set_battery_level+0x40>
		return -EINVAL;
	}

	battery_level = level;
   1250c:	4b0e      	ldr	r3, [pc, #56]	; (12548 <bt_bas_set_battery_level+0x48>)
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   1250e:	2218      	movs	r2, #24
   12510:	7018      	strb	r0, [r3, #0]
   12512:	2100      	movs	r1, #0
   12514:	a802      	add	r0, sp, #8
   12516:	f016 fba9 	bl	28c6c <memset>

	params.attr = attr;
   1251a:	4b0c      	ldr	r3, [pc, #48]	; (1254c <bt_bas_set_battery_level+0x4c>)
   1251c:	9303      	str	r3, [sp, #12]
	params.data = data;
   1251e:	f10d 0307 	add.w	r3, sp, #7
   12522:	9304      	str	r3, [sp, #16]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
   12524:	a902      	add	r1, sp, #8
	params.len = len;
   12526:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
   12528:	2000      	movs	r0, #0
	params.len = len;
   1252a:	f8ad 3014 	strh.w	r3, [sp, #20]
	return bt_gatt_notify_cb(conn, &params);
   1252e:	f005 fc43 	bl	17db8 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &bas.attrs[1], &level, sizeof(level));

	return rc == -ENOTCONN ? 0 : rc;
   12532:	f110 0f80 	cmn.w	r0, #128	; 0x80
   12536:	bf08      	it	eq
   12538:	2000      	moveq	r0, #0
}
   1253a:	b009      	add	sp, #36	; 0x24
   1253c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -EINVAL;
   12540:	f06f 0015 	mvn.w	r0, #21
   12544:	e7f9      	b.n	1253a <bt_bas_set_battery_level+0x3a>
   12546:	bf00      	nop
   12548:	200005fd 	.word	0x200005fd
   1254c:	0002b4e0 	.word	0x0002b4e0

00012550 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   12550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12552:	4605      	mov	r5, r0
	__asm__ volatile(
   12554:	f04f 0320 	mov.w	r3, #32
   12558:	f3ef 8611 	mrs	r6, BASEPRI
   1255c:	f383 8811 	msr	BASEPRI, r3
   12560:	f3bf 8f6f 	isb	sy
	return list->head;
   12564:	4b09      	ldr	r3, [pc, #36]	; (1258c <pm_state_notify+0x3c>)
   12566:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   12568:	b15c      	cbz	r4, 12582 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
   1256a:	4f09      	ldr	r7, [pc, #36]	; (12590 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
   1256c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   12570:	2d00      	cmp	r5, #0
   12572:	bf08      	it	eq
   12574:	4613      	moveq	r3, r2
		if (callback) {
   12576:	b10b      	cbz	r3, 1257c <pm_state_notify+0x2c>
			callback(z_power_state.state);
   12578:	7838      	ldrb	r0, [r7, #0]
   1257a:	4798      	blx	r3
	return node->next;
   1257c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   1257e:	2c00      	cmp	r4, #0
   12580:	d1f4      	bne.n	1256c <pm_state_notify+0x1c>
	__asm__ volatile(
   12582:	f386 8811 	msr	BASEPRI, r6
   12586:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   1258a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1258c:	200011ec 	.word	0x200011ec
   12590:	200011f4 	.word	0x200011f4

00012594 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
   12594:	4b08      	ldr	r3, [pc, #32]	; (125b8 <pm_system_resume+0x24>)
{
   12596:	b510      	push	{r4, lr}
	if (!post_ops_done) {
   12598:	681c      	ldr	r4, [r3, #0]
   1259a:	b95c      	cbnz	r4, 125b4 <pm_system_resume+0x20>
		post_ops_done = 1;
   1259c:	2201      	movs	r2, #1
   1259e:	601a      	str	r2, [r3, #0]
		pm_power_state_exit_post_ops(z_power_state);
   125a0:	4b06      	ldr	r3, [pc, #24]	; (125bc <pm_system_resume+0x28>)
   125a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   125a6:	f016 fb99 	bl	28cdc <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   125aa:	4620      	mov	r0, r4
	}
}
   125ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		pm_state_notify(false);
   125b0:	f7ff bfce 	b.w	12550 <pm_state_notify>
}
   125b4:	bd10      	pop	{r4, pc}
   125b6:	bf00      	nop
   125b8:	2000017c 	.word	0x2000017c
   125bc:	200011f4 	.word	0x200011f4

000125c0 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
   125c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   125c2:	b085      	sub	sp, #20
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
   125c4:	466e      	mov	r6, sp
   125c6:	4601      	mov	r1, r0
{
   125c8:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
   125ca:	4630      	mov	r0, r6
   125cc:	f016 f808 	bl	285e0 <pm_policy_next_state>
   125d0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   125d4:	4c14      	ldr	r4, [pc, #80]	; (12628 <pm_system_suspend+0x68>)
   125d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
   125da:	7820      	ldrb	r0, [r4, #0]
   125dc:	4627      	mov	r7, r4
   125de:	b300      	cbz	r0, 12622 <pm_system_suspend+0x62>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
   125e0:	4b12      	ldr	r3, [pc, #72]	; (1262c <pm_system_suspend+0x6c>)
   125e2:	2100      	movs	r1, #0
   125e4:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
   125e6:	1c6b      	adds	r3, r5, #1
   125e8:	d00d      	beq.n	12606 <pm_system_suspend+0x46>
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
   125ea:	4811      	ldr	r0, [pc, #68]	; (12630 <pm_system_suspend+0x70>)
   125ec:	4616      	mov	r6, r2
   125ee:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   125f2:	4a10      	ldr	r2, [pc, #64]	; (12634 <pm_system_suspend+0x74>)
   125f4:	2300      	movs	r3, #0
   125f6:	fbe6 010c 	umlal	r0, r1, r6, ip
   125fa:	f7fd fd81 	bl	10100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   125fe:	2101      	movs	r1, #1
   12600:	1a28      	subs	r0, r5, r0
   12602:	f018 fb36 	bl	2ac72 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   12606:	f014 fd0b 	bl	27020 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
   1260a:	2001      	movs	r0, #1
   1260c:	f7ff ffa0 	bl	12550 <pm_state_notify>
	pm_power_state_set(z_power_state);
   12610:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
   12614:	f016 fb4f 	bl	28cb6 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
   12618:	f7ff ffbc 	bl	12594 <pm_system_resume>
	k_sched_unlock();
   1261c:	f014 fdb8 	bl	27190 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
   12620:	7820      	ldrb	r0, [r4, #0]
}
   12622:	b005      	add	sp, #20
   12624:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12626:	bf00      	nop
   12628:	200011f4 	.word	0x200011f4
   1262c:	2000017c 	.word	0x2000017c
   12630:	000f423f 	.word	0x000f423f
   12634:	000f4240 	.word	0x000f4240

00012638 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
   12638:	4b08      	ldr	r3, [pc, #32]	; (1265c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   1263a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1263c:	1ac3      	subs	r3, r0, r3
{
   1263e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12640:	4907      	ldr	r1, [pc, #28]	; (12660 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
   12642:	109b      	asrs	r3, r3, #2
{
   12644:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12646:	4359      	muls	r1, r3
   12648:	4806      	ldr	r0, [pc, #24]	; (12664 <onoff_stop+0x2c>)
   1264a:	2240      	movs	r2, #64	; 0x40
   1264c:	f015 ffe9 	bl	28622 <stop>
	notify(mgr, res);
   12650:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   12652:	4601      	mov	r1, r0
	notify(mgr, res);
   12654:	4620      	mov	r0, r4
}
   12656:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   1265a:	4718      	bx	r3
   1265c:	20001214 	.word	0x20001214
   12660:	b6db6db7 	.word	0xb6db6db7
   12664:	20000600 	.word	0x20000600

00012668 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   12668:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   1266a:	4c0c      	ldr	r4, [pc, #48]	; (1269c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1266c:	4a0c      	ldr	r2, [pc, #48]	; (126a0 <onoff_start+0x38>)
   1266e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
   12670:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12672:	9300      	str	r3, [sp, #0]
{
   12674:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12676:	460b      	mov	r3, r1
   12678:	490a      	ldr	r1, [pc, #40]	; (126a4 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
   1267a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   1267c:	4361      	muls	r1, r4
{
   1267e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
   12680:	4809      	ldr	r0, [pc, #36]	; (126a8 <onoff_start+0x40>)
   12682:	f015 fffb 	bl	2867c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
   12686:	1e01      	subs	r1, r0, #0
   12688:	da05      	bge.n	12696 <onoff_start+0x2e>
		notify(mgr, err);
   1268a:	4630      	mov	r0, r6
   1268c:	462b      	mov	r3, r5
	}
}
   1268e:	b002      	add	sp, #8
   12690:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
   12694:	4718      	bx	r3
}
   12696:	b002      	add	sp, #8
   12698:	bd70      	pop	{r4, r5, r6, pc}
   1269a:	bf00      	nop
   1269c:	20001214 	.word	0x20001214
   126a0:	000286eb 	.word	0x000286eb
   126a4:	b6db6db7 	.word	0xb6db6db7
   126a8:	20000600 	.word	0x20000600

000126ac <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   126ac:	2200      	movs	r2, #0
{
   126ae:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   126b0:	2101      	movs	r1, #1
{
   126b2:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   126b4:	4610      	mov	r0, r2
   126b6:	f000 fb4d 	bl	12d54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   126ba:	2000      	movs	r0, #0
   126bc:	f000 fb18 	bl	12cf0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   126c0:	480f      	ldr	r0, [pc, #60]	; (12700 <clk_init+0x54>)
   126c2:	f013 fe9b 	bl	263fc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   126c6:	4b0f      	ldr	r3, [pc, #60]	; (12704 <clk_init+0x58>)
   126c8:	4298      	cmp	r0, r3
   126ca:	d115      	bne.n	126f8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   126cc:	f017 fecf 	bl	2a46e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
   126d0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
   126d2:	490d      	ldr	r1, [pc, #52]	; (12708 <clk_init+0x5c>)
   126d4:	4630      	mov	r0, r6
   126d6:	f015 fa9d 	bl	27c14 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   126da:	2800      	cmp	r0, #0
   126dc:	db0b      	blt.n	126f6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
   126de:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   126e0:	4909      	ldr	r1, [pc, #36]	; (12708 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   126e2:	2501      	movs	r5, #1
   126e4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
   126e6:	f104 001c 	add.w	r0, r4, #28
   126ea:	f015 fa93 	bl	27c14 <onoff_manager_init>
		if (err < 0) {
   126ee:	2800      	cmp	r0, #0
   126f0:	db01      	blt.n	126f6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   126f2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
   126f4:	2000      	movs	r0, #0
}
   126f6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   126f8:	f06f 0004 	mvn.w	r0, #4
   126fc:	e7fb      	b.n	126f6 <clk_init+0x4a>
   126fe:	bf00      	nop
   12700:	00012741 	.word	0x00012741
   12704:	0bad0000 	.word	0x0bad0000
   12708:	0002b548 	.word	0x0002b548

0001270c <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   1270c:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   1270e:	230c      	movs	r3, #12
   12710:	4809      	ldr	r0, [pc, #36]	; (12738 <clkstarted_handle.constprop.0+0x2c>)
   12712:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   12714:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   12716:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   12718:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
   1271c:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   1271e:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
   12720:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
   12722:	4418      	add	r0, r3
   12724:	f015 ff6a 	bl	285fc <set_on_state>
	if (callback) {
   12728:	b12d      	cbz	r5, 12736 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1272a:	4632      	mov	r2, r6
   1272c:	462b      	mov	r3, r5
   1272e:	4803      	ldr	r0, [pc, #12]	; (1273c <clkstarted_handle.constprop.0+0x30>)
}
   12730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   12734:	4718      	bx	r3
}
   12736:	bd70      	pop	{r4, r5, r6, pc}
   12738:	20001214 	.word	0x20001214
   1273c:	20000600 	.word	0x20000600

00012740 <clock_event_handler>:
	switch (event) {
   12740:	b110      	cbz	r0, 12748 <clock_event_handler+0x8>
   12742:	2801      	cmp	r0, #1
   12744:	d004      	beq.n	12750 <clock_event_handler+0x10>
   12746:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   12748:	4b03      	ldr	r3, [pc, #12]	; (12758 <clock_event_handler+0x18>)
   1274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1274c:	075b      	lsls	r3, r3, #29
   1274e:	d101      	bne.n	12754 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   12750:	f7ff bfdc 	b.w	1270c <clkstarted_handle.constprop.0>
}
   12754:	4770      	bx	lr
   12756:	bf00      	nop
   12758:	20001214 	.word	0x20001214

0001275c <generic_hfclk_start>:
{
   1275c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1275e:	f04f 0320 	mov.w	r3, #32
   12762:	f3ef 8111 	mrs	r1, BASEPRI
   12766:	f383 8811 	msr	BASEPRI, r3
   1276a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   1276e:	4a12      	ldr	r2, [pc, #72]	; (127b8 <generic_hfclk_start+0x5c>)
   12770:	6813      	ldr	r3, [r2, #0]
   12772:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   12776:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   1277a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   1277c:	d00c      	beq.n	12798 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1277e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   12782:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   12786:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   1278a:	f013 0301 	ands.w	r3, r3, #1
   1278e:	d003      	beq.n	12798 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   12790:	480a      	ldr	r0, [pc, #40]	; (127bc <generic_hfclk_start+0x60>)
   12792:	f015 ff33 	bl	285fc <set_on_state>
			already_started = true;
   12796:	2301      	movs	r3, #1
	__asm__ volatile(
   12798:	f381 8811 	msr	BASEPRI, r1
   1279c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   127a0:	b123      	cbz	r3, 127ac <generic_hfclk_start+0x50>
}
   127a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   127a6:	2000      	movs	r0, #0
   127a8:	f7ff bfb0 	b.w	1270c <clkstarted_handle.constprop.0>
}
   127ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   127b0:	2001      	movs	r0, #1
   127b2:	f017 be66 	b.w	2a482 <nrfx_clock_start>
   127b6:	bf00      	nop
   127b8:	20001264 	.word	0x20001264
   127bc:	20001254 	.word	0x20001254

000127c0 <api_blocking_start>:
{
   127c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   127c2:	2200      	movs	r2, #0
   127c4:	2301      	movs	r3, #1
   127c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   127ca:	ab04      	add	r3, sp, #16
   127cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   127d0:	4a09      	ldr	r2, [pc, #36]	; (127f8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   127d2:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   127d6:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   127d8:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   127dc:	f015 ff7e 	bl	286dc <api_start>
	if (err < 0) {
   127e0:	2800      	cmp	r0, #0
   127e2:	db05      	blt.n	127f0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   127e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   127e8:	2300      	movs	r3, #0
   127ea:	4668      	mov	r0, sp
   127ec:	f014 f9d8 	bl	26ba0 <z_impl_k_sem_take>
}
   127f0:	b007      	add	sp, #28
   127f2:	f85d fb04 	ldr.w	pc, [sp], #4
   127f6:	bf00      	nop
   127f8:	00028709 	.word	0x00028709

000127fc <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   127fc:	4b09      	ldr	r3, [pc, #36]	; (12824 <generic_hfclk_stop+0x28>)
   127fe:	f3bf 8f5b 	dmb	ish
   12802:	e853 2f00 	ldrex	r2, [r3]
   12806:	f022 0102 	bic.w	r1, r2, #2
   1280a:	e843 1000 	strex	r0, r1, [r3]
   1280e:	2800      	cmp	r0, #0
   12810:	d1f7      	bne.n	12802 <generic_hfclk_stop+0x6>
   12812:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   12816:	07d3      	lsls	r3, r2, #31
   12818:	d402      	bmi.n	12820 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   1281a:	2001      	movs	r0, #1
   1281c:	f013 bdfe 	b.w	2641c <nrfx_clock_stop>
}
   12820:	4770      	bx	lr
   12822:	bf00      	nop
   12824:	20001264 	.word	0x20001264

00012828 <z_nrf_clock_control_get_onoff>:
}
   12828:	4a02      	ldr	r2, [pc, #8]	; (12834 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
   1282a:	b2c3      	uxtb	r3, r0
}
   1282c:	201c      	movs	r0, #28
   1282e:	fb03 2000 	mla	r0, r3, r0, r2
   12832:	4770      	bx	lr
   12834:	20001214 	.word	0x20001214

00012838 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   12838:	4b09      	ldr	r3, [pc, #36]	; (12860 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
   1283a:	f3bf 8f5b 	dmb	ish
   1283e:	e853 2f00 	ldrex	r2, [r3]
   12842:	f042 0101 	orr.w	r1, r2, #1
   12846:	e843 1000 	strex	r0, r1, [r3]
   1284a:	2800      	cmp	r0, #0
   1284c:	d1f7      	bne.n	1283e <z_nrf_clock_bt_ctlr_hf_request+0x6>
   1284e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
   12852:	0793      	lsls	r3, r2, #30
   12854:	d402      	bmi.n	1285c <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   12856:	2001      	movs	r0, #1
   12858:	f017 be13 	b.w	2a482 <nrfx_clock_start>
}
   1285c:	4770      	bx	lr
   1285e:	bf00      	nop
   12860:	20001264 	.word	0x20001264

00012864 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   12864:	4b09      	ldr	r3, [pc, #36]	; (1288c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
   12866:	f3bf 8f5b 	dmb	ish
   1286a:	e853 2f00 	ldrex	r2, [r3]
   1286e:	f022 0101 	bic.w	r1, r2, #1
   12872:	e843 1000 	strex	r0, r1, [r3]
   12876:	2800      	cmp	r0, #0
   12878:	d1f7      	bne.n	1286a <z_nrf_clock_bt_ctlr_hf_release+0x6>
   1287a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
   1287e:	0793      	lsls	r3, r2, #30
   12880:	d402      	bmi.n	12888 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   12882:	2001      	movs	r0, #1
   12884:	f013 bdca 	b.w	2641c <nrfx_clock_stop>
}
   12888:	4770      	bx	lr
   1288a:	bf00      	nop
   1288c:	20001264 	.word	0x20001264

00012890 <z_nrf_clock_control_lf_on>:
{
   12890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   12894:	4939      	ldr	r1, [pc, #228]	; (1297c <z_nrf_clock_control_lf_on+0xec>)
   12896:	f3bf 8f5b 	dmb	ish
   1289a:	4607      	mov	r7, r0
   1289c:	2201      	movs	r2, #1
   1289e:	e851 3f00 	ldrex	r3, [r1]
   128a2:	e841 2000 	strex	r0, r2, [r1]
   128a6:	2800      	cmp	r0, #0
   128a8:	d1f9      	bne.n	1289e <z_nrf_clock_control_lf_on+0xe>
   128aa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   128ae:	b933      	cbnz	r3, 128be <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   128b0:	4933      	ldr	r1, [pc, #204]	; (12980 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
   128b2:	4834      	ldr	r0, [pc, #208]	; (12984 <z_nrf_clock_control_lf_on+0xf4>)
   128b4:	604b      	str	r3, [r1, #4]
   128b6:	60cb      	str	r3, [r1, #12]
   128b8:	608a      	str	r2, [r1, #8]
   128ba:	f015 f9be 	bl	27c3a <onoff_request>
	switch (start_mode) {
   128be:	1e7b      	subs	r3, r7, #1
   128c0:	2b01      	cmp	r3, #1
   128c2:	d82f      	bhi.n	12924 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   128c4:	2f01      	cmp	r7, #1
   128c6:	d107      	bne.n	128d8 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   128c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   128cc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   128d0:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   128d4:	2b01      	cmp	r3, #1
   128d6:	d025      	beq.n	12924 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   128d8:	f017 febd 	bl	2a656 <k_is_in_isr>
   128dc:	4604      	mov	r4, r0
   128de:	b918      	cbnz	r0, 128e8 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
   128e0:	4b29      	ldr	r3, [pc, #164]	; (12988 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
   128e2:	781b      	ldrb	r3, [r3, #0]
   128e4:	2b00      	cmp	r3, #0
   128e6:	d141      	bne.n	1296c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
   128e8:	f04f 0320 	mov.w	r3, #32
   128ec:	f3ef 8611 	mrs	r6, BASEPRI
   128f0:	f383 8811 	msr	BASEPRI, r3
   128f4:	f3bf 8f6f 	isb	sy
   128f8:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   128fa:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1298c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   128fe:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   12902:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   12906:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
   1290a:	03d2      	lsls	r2, r2, #15
   1290c:	d50c      	bpl.n	12928 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1290e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   12912:	2b01      	cmp	r3, #1
   12914:	d001      	beq.n	1291a <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   12916:	2f01      	cmp	r7, #1
   12918:	d106      	bne.n	12928 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
   1291a:	b30c      	cbz	r4, 12960 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
   1291c:	f386 8811 	msr	BASEPRI, r6
   12920:	f3bf 8f6f 	isb	sy
}
   12924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   12928:	b1ac      	cbz	r4, 12956 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   1292a:	4630      	mov	r0, r6
   1292c:	f000 fa94 	bl	12e58 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   12930:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   12934:	2b00      	cmp	r3, #0
   12936:	d1e4      	bne.n	12902 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   12938:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
   1293c:	2a00      	cmp	r2, #0
   1293e:	d0e0      	beq.n	12902 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12940:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   12944:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
   12948:	2301      	movs	r3, #1
   1294a:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
   1294e:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   12952:	60ab      	str	r3, [r5, #8]
}
   12954:	e7d5      	b.n	12902 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
   12956:	2100      	movs	r1, #0
   12958:	2021      	movs	r0, #33	; 0x21
   1295a:	f014 fd8b 	bl	27474 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1295e:	e7e7      	b.n	12930 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
   12960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12964:	2202      	movs	r2, #2
   12966:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1296a:	e7db      	b.n	12924 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
   1296c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12970:	2202      	movs	r2, #2
   12972:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   12976:	4606      	mov	r6, r0
}
   12978:	e7bf      	b.n	128fa <z_nrf_clock_control_lf_on+0x6a>
   1297a:	bf00      	nop
   1297c:	20001268 	.word	0x20001268
   12980:	20001204 	.word	0x20001204
   12984:	20001230 	.word	0x20001230
   12988:	20002643 	.word	0x20002643
   1298c:	e000e100 	.word	0xe000e100

00012990 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
   12990:	4a04      	ldr	r2, [pc, #16]	; (129a4 <sys_clock_timeout_handler+0x14>)
   12992:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
   12994:	1ac8      	subs	r0, r1, r3
   12996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
   1299a:	4403      	add	r3, r0
   1299c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   1299e:	f014 bedd 	b.w	2775c <sys_clock_announce>
   129a2:	bf00      	nop
   129a4:	2000127c 	.word	0x2000127c

000129a8 <set_absolute_alarm>:
{
   129a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   129ac:	0086      	lsls	r6, r0, #2
   129ae:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   129b2:	f100 0450 	add.w	r4, r0, #80	; 0x50
   129b6:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
   129ba:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   129bc:	b2a4      	uxth	r4, r4
   129be:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   129c2:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
   129c6:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
   129ca:	f8df 806c 	ldr.w	r8, [pc, #108]	; 12a38 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
   129ce:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   129d2:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   129d6:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
   129d8:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   129dc:	eba3 0309 	sub.w	r3, r3, r9
   129e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   129e4:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   129e8:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
   129ea:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
   129ee:	d102      	bne.n	129f6 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
   129f0:	2013      	movs	r0, #19
   129f2:	f018 f95e 	bl	2acb2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   129f6:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
   129fa:	1aab      	subs	r3, r5, r2
   129fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
   12a00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12a04:	bf88      	it	hi
   12a06:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12a08:	2300      	movs	r3, #0
   12a0a:	6023      	str	r3, [r4, #0]
   12a0c:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   12a0e:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   12a12:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   12a16:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
   12a1a:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   12a1e:	4599      	cmp	r9, r3
   12a20:	d006      	beq.n	12a30 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
   12a22:	1aeb      	subs	r3, r5, r3
   12a24:	3b02      	subs	r3, #2
   12a26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   12a2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
   12a2e:	d801      	bhi.n	12a34 <set_absolute_alarm+0x8c>
}
   12a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
   12a34:	462b      	mov	r3, r5
   12a36:	e7cf      	b.n	129d8 <set_absolute_alarm+0x30>
   12a38:	40011000 	.word	0x40011000

00012a3c <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
   12a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12a3e:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
   12a40:	4c10      	ldr	r4, [pc, #64]	; (12a84 <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12a42:	462f      	mov	r7, r5
   12a44:	4b10      	ldr	r3, [pc, #64]	; (12a88 <rtc_nrf_isr+0x4c>)
   12a46:	681e      	ldr	r6, [r3, #0]
   12a48:	b105      	cbz	r5, 12a4c <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
   12a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
   12a4c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
   12a50:	03d2      	lsls	r2, r2, #15
   12a52:	d5fa      	bpl.n	12a4a <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12a54:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
   12a58:	2a00      	cmp	r2, #0
   12a5a:	d0f6      	beq.n	12a4a <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12a5c:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
   12a60:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   12a64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   12a68:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
   12a6c:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   12a70:	2501      	movs	r5, #1
			if (handler) {
   12a72:	b126      	cbz	r6, 12a7e <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
   12a74:	685a      	ldr	r2, [r3, #4]
   12a76:	601f      	str	r7, [r3, #0]
   12a78:	2000      	movs	r0, #0
   12a7a:	47b0      	blx	r6
   12a7c:	e7e2      	b.n	12a44 <rtc_nrf_isr+0x8>
   12a7e:	601e      	str	r6, [r3, #0]
}
   12a80:	e7e3      	b.n	12a4a <rtc_nrf_isr+0xe>
   12a82:	bf00      	nop
   12a84:	40011000 	.word	0x40011000
   12a88:	20001270 	.word	0x20001270

00012a8c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
   12a8c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
   12a8e:	4c0f      	ldr	r4, [pc, #60]	; (12acc <sys_clock_driver_init+0x40>)
   12a90:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
   12a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
   12a96:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
   12a9a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   12a9e:	4b0c      	ldr	r3, [pc, #48]	; (12ad0 <sys_clock_driver_init+0x44>)
   12aa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   12aa4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   12aa8:	2101      	movs	r1, #1
   12aaa:	462a      	mov	r2, r5
   12aac:	2011      	movs	r0, #17
   12aae:	f000 f951 	bl	12d54 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   12ab2:	2011      	movs	r0, #17
   12ab4:	f000 f91c 	bl	12cf0 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   12ab8:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   12aba:	4a06      	ldr	r2, [pc, #24]	; (12ad4 <sys_clock_driver_init+0x48>)
   12abc:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
   12abe:	2002      	movs	r0, #2
   12ac0:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
   12ac2:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
   12ac4:	f7ff fee4 	bl	12890 <z_nrf_clock_control_lf_on>

	return 0;
}
   12ac8:	4628      	mov	r0, r5
   12aca:	bd38      	pop	{r3, r4, r5, pc}
   12acc:	40011000 	.word	0x40011000
   12ad0:	e000e100 	.word	0xe000e100
   12ad4:	20001278 	.word	0x20001278

00012ad8 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   12ad8:	4a13      	ldr	r2, [pc, #76]	; (12b28 <sys_clock_set_timeout+0x50>)
   12ada:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   12ade:	bf14      	ite	ne
   12ae0:	4603      	movne	r3, r0
   12ae2:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12ae4:	3b01      	subs	r3, #1
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	dd1c      	ble.n	12b24 <sys_clock_set_timeout+0x4c>
   12aea:	4293      	cmp	r3, r2
   12aec:	bfa8      	it	ge
   12aee:	4613      	movge	r3, r2
     return p_reg->COUNTER;
   12af0:	4a0e      	ldr	r2, [pc, #56]	; (12b2c <sys_clock_set_timeout+0x54>)
   12af2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
   12af6:	4a0e      	ldr	r2, [pc, #56]	; (12b30 <sys_clock_set_timeout+0x58>)
   12af8:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
   12afa:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
   12afc:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
   12b00:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
   12b04:	bf18      	it	ne
   12b06:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   12b08:	3201      	adds	r2, #1
   12b0a:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
   12b0c:	4a09      	ldr	r2, [pc, #36]	; (12b34 <sys_clock_set_timeout+0x5c>)
   12b0e:	480a      	ldr	r0, [pc, #40]	; (12b38 <sys_clock_set_timeout+0x60>)
   12b10:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
   12b12:	2000      	movs	r0, #0
   12b14:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
   12b16:	4a04      	ldr	r2, [pc, #16]	; (12b28 <sys_clock_set_timeout+0x50>)
   12b18:	4293      	cmp	r3, r2
   12b1a:	bf94      	ite	ls
   12b1c:	18c9      	addls	r1, r1, r3
   12b1e:	1889      	addhi	r1, r1, r2
   12b20:	f7ff bf42 	b.w	129a8 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   12b24:	2300      	movs	r3, #0
   12b26:	e7e3      	b.n	12af0 <sys_clock_set_timeout+0x18>
   12b28:	007fffff 	.word	0x007fffff
   12b2c:	40011000 	.word	0x40011000
   12b30:	2000127c 	.word	0x2000127c
   12b34:	20001270 	.word	0x20001270
   12b38:	00012991 	.word	0x00012991

00012b3c <sys_clock_elapsed>:
   12b3c:	4b04      	ldr	r3, [pc, #16]	; (12b50 <sys_clock_elapsed+0x14>)
   12b3e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
   12b42:	4b04      	ldr	r3, [pc, #16]	; (12b54 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
   12b44:	681b      	ldr	r3, [r3, #0]
   12b46:	1ac0      	subs	r0, r0, r3
}
   12b48:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   12b4c:	4770      	bx	lr
   12b4e:	bf00      	nop
   12b50:	40011000 	.word	0x40011000
   12b54:	2000127c 	.word	0x2000127c

00012b58 <sys_clock_cycle_get_32>:
	__asm__ volatile(
   12b58:	f04f 0320 	mov.w	r3, #32
   12b5c:	f3ef 8211 	mrs	r2, BASEPRI
   12b60:	f383 8811 	msr	BASEPRI, r3
   12b64:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
   12b68:	4906      	ldr	r1, [pc, #24]	; (12b84 <sys_clock_cycle_get_32+0x2c>)
   12b6a:	4b07      	ldr	r3, [pc, #28]	; (12b88 <sys_clock_cycle_get_32+0x30>)
   12b6c:	6808      	ldr	r0, [r1, #0]
   12b6e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
   12b72:	f382 8811 	msr	BASEPRI, r2
   12b76:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
   12b7a:	1a1b      	subs	r3, r3, r0
   12b7c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
   12b80:	4418      	add	r0, r3
   12b82:	4770      	bx	lr
   12b84:	2000127c 	.word	0x2000127c
   12b88:	40011000 	.word	0x40011000

00012b8c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
   12b8c:	4904      	ldr	r1, [pc, #16]	; (12ba0 <sub_bytes+0x14>)
   12b8e:	1e43      	subs	r3, r0, #1
   12b90:	300f      	adds	r0, #15
   12b92:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   12b96:	5c8a      	ldrb	r2, [r1, r2]
   12b98:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   12b9a:	4283      	cmp	r3, r0
   12b9c:	d1f9      	bne.n	12b92 <sub_bytes+0x6>
	}
}
   12b9e:	4770      	bx	lr
   12ba0:	0002c9c5 	.word	0x0002c9c5

00012ba4 <tc_aes128_set_encrypt_key>:
{
   12ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   12ba6:	4e26      	ldr	r6, [pc, #152]	; (12c40 <tc_aes128_set_encrypt_key+0x9c>)
{
   12ba8:	4607      	mov	r7, r0
   12baa:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   12bac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   12bae:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   12bb0:	ad01      	add	r5, sp, #4
   12bb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12bb4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   12bb8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   12bbc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
   12bc0:	4638      	mov	r0, r7
   12bc2:	2f00      	cmp	r7, #0
   12bc4:	d038      	beq.n	12c38 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
   12bc6:	2c00      	cmp	r4, #0
   12bc8:	d038      	beq.n	12c3c <tc_aes128_set_encrypt_key+0x98>
   12bca:	1f38      	subs	r0, r7, #4
   12bcc:	4621      	mov	r1, r4
   12bce:	4602      	mov	r2, r0
   12bd0:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12bd2:	784b      	ldrb	r3, [r1, #1]
   12bd4:	780d      	ldrb	r5, [r1, #0]
   12bd6:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12bd8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   12bdc:	78cd      	ldrb	r5, [r1, #3]
   12bde:	432b      	orrs	r3, r5
   12be0:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
   12be2:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   12be4:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   12be8:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   12bea:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   12bee:	d1f0      	bne.n	12bd2 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12bf0:	4c14      	ldr	r4, [pc, #80]	; (12c44 <tc_aes128_set_encrypt_key+0xa0>)
   12bf2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   12bf4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   12bf6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   12bf8:	d116      	bne.n	12c28 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   12bfa:	f3c3 4207 	ubfx	r2, r3, #16, #8
   12bfe:	5ca5      	ldrb	r5, [r4, r2]
   12c00:	0e1a      	lsrs	r2, r3, #24
   12c02:	5ca2      	ldrb	r2, [r4, r2]
   12c04:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   12c08:	f3c3 2507 	ubfx	r5, r3, #8, #8
   12c0c:	b2db      	uxtb	r3, r3
   12c0e:	5d65      	ldrb	r5, [r4, r5]
   12c10:	5ce3      	ldrb	r3, [r4, r3]
   12c12:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   12c16:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   12c1a:	ad0c      	add	r5, sp, #48	; 0x30
   12c1c:	f021 0303 	bic.w	r3, r1, #3
   12c20:	442b      	add	r3, r5
   12c22:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   12c26:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
   12c28:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   12c2c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   12c2e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   12c30:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   12c32:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   12c34:	d1de      	bne.n	12bf4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
   12c36:	2001      	movs	r0, #1
}
   12c38:	b00d      	add	sp, #52	; 0x34
   12c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   12c3c:	4620      	mov	r0, r4
   12c3e:	e7fb      	b.n	12c38 <tc_aes128_set_encrypt_key+0x94>
   12c40:	0002b3d4 	.word	0x0002b3d4
   12c44:	0002c9c5 	.word	0x0002c9c5

00012c48 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   12c48:	4a09      	ldr	r2, [pc, #36]	; (12c70 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
   12c4a:	490a      	ldr	r1, [pc, #40]	; (12c74 <arch_swap+0x2c>)
	_current->arch.basepri = key;
   12c4c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   12c4e:	6809      	ldr	r1, [r1, #0]
   12c50:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12c52:	4909      	ldr	r1, [pc, #36]	; (12c78 <arch_swap+0x30>)
	_current->arch.basepri = key;
   12c54:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   12c56:	684b      	ldr	r3, [r1, #4]
   12c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   12c5c:	604b      	str	r3, [r1, #4]
   12c5e:	2300      	movs	r3, #0
   12c60:	f383 8811 	msr	BASEPRI, r3
   12c64:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   12c68:	6893      	ldr	r3, [r2, #8]
}
   12c6a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
   12c6c:	4770      	bx	lr
   12c6e:	bf00      	nop
   12c70:	20002534 	.word	0x20002534
   12c74:	0002c7f8 	.word	0x0002c7f8
   12c78:	e000ed00 	.word	0xe000ed00

00012c7c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   12c7c:	4912      	ldr	r1, [pc, #72]	; (12cc8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   12c7e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   12c80:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
   12c84:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   12c86:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   12c8a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12c8e:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12c90:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   12c94:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   12c98:	4f0c      	ldr	r7, [pc, #48]	; (12ccc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   12c9a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   12c9e:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
   12ca0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   12ca2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   12ca4:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
   12ca6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   12ca8:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   12caa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   12cae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   12cb0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   12cb2:	f000 fbd1 	bl	13458 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   12cb6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   12cba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
   12cbe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   12cc2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   12cc6:	4770      	bx	lr
    ldr r1, =_kernel
   12cc8:	20002534 	.word	0x20002534
    ldr v4, =_SCS_ICSR
   12ccc:	e000ed04 	.word	0xe000ed04

00012cd0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
   12cd0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   12cd4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   12cd6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   12cda:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   12cde:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   12ce0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   12ce4:	2902      	cmp	r1, #2
    beq _oops
   12ce6:	d0ff      	beq.n	12ce8 <_oops>

00012ce8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   12ce8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   12cea:	f015 ff40 	bl	28b6e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   12cee:	bd01      	pop	{r0, pc}

00012cf0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   12cf0:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12cf2:	2b00      	cmp	r3, #0
   12cf4:	db08      	blt.n	12d08 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12cf6:	2201      	movs	r2, #1
   12cf8:	f000 001f 	and.w	r0, r0, #31
   12cfc:	fa02 f000 	lsl.w	r0, r2, r0
   12d00:	095b      	lsrs	r3, r3, #5
   12d02:	4a02      	ldr	r2, [pc, #8]	; (12d0c <arch_irq_enable+0x1c>)
   12d04:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   12d08:	4770      	bx	lr
   12d0a:	bf00      	nop
   12d0c:	e000e100 	.word	0xe000e100

00012d10 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   12d10:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
   12d12:	2b00      	cmp	r3, #0
   12d14:	db0d      	blt.n	12d32 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   12d16:	2201      	movs	r2, #1
   12d18:	095b      	lsrs	r3, r3, #5
   12d1a:	f000 001f 	and.w	r0, r0, #31
   12d1e:	fa02 f000 	lsl.w	r0, r2, r0
   12d22:	3320      	adds	r3, #32
   12d24:	4a03      	ldr	r2, [pc, #12]	; (12d34 <arch_irq_disable+0x24>)
   12d26:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   12d2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12d2e:	f3bf 8f6f 	isb	sy
}
   12d32:	4770      	bx	lr
   12d34:	e000e100 	.word	0xe000e100

00012d38 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   12d38:	4b05      	ldr	r3, [pc, #20]	; (12d50 <arch_irq_is_enabled+0x18>)
   12d3a:	0942      	lsrs	r2, r0, #5
   12d3c:	f000 001f 	and.w	r0, r0, #31
   12d40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   12d44:	2301      	movs	r3, #1
   12d46:	fa03 f000 	lsl.w	r0, r3, r0
}
   12d4a:	4010      	ands	r0, r2
   12d4c:	4770      	bx	lr
   12d4e:	bf00      	nop
   12d50:	e000e100 	.word	0xe000e100

00012d54 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   12d54:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   12d56:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d58:	bfa8      	it	ge
   12d5a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
   12d5e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d62:	bfb8      	it	lt
   12d64:	4b06      	ldrlt	r3, [pc, #24]	; (12d80 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d66:	ea4f 1141 	mov.w	r1, r1, lsl #5
   12d6a:	bfac      	ite	ge
   12d6c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d70:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d74:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d76:	bfb4      	ite	lt
   12d78:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   12d7a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
   12d7e:	4770      	bx	lr
   12d80:	e000ed14 	.word	0xe000ed14

00012d84 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   12d84:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   12d86:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   12d88:	4b04      	ldr	r3, [pc, #16]	; (12d9c <_arch_isr_direct_pm+0x18>)
   12d8a:	6a18      	ldr	r0, [r3, #32]
   12d8c:	b118      	cbz	r0, 12d96 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
   12d8e:	2200      	movs	r2, #0
   12d90:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
   12d92:	f017 fc6d 	bl	2a670 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   12d96:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   12d98:	bd08      	pop	{r3, pc}
   12d9a:	bf00      	nop
   12d9c:	20002534 	.word	0x20002534

00012da0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   12da0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   12da4:	9b00      	ldr	r3, [sp, #0]
   12da6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   12daa:	490a      	ldr	r1, [pc, #40]	; (12dd4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   12dac:	9b01      	ldr	r3, [sp, #4]
   12dae:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   12db2:	9b02      	ldr	r3, [sp, #8]
   12db4:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   12db8:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   12dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   12dc0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   12dc4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   12dc8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   12dca:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   12dcc:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
   12dce:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   12dd0:	4770      	bx	lr
   12dd2:	bf00      	nop
   12dd4:	00027d17 	.word	0x00027d17

00012dd8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   12dd8:	4a09      	ldr	r2, [pc, #36]	; (12e00 <z_check_thread_stack_fail+0x28>)
{
   12dda:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   12ddc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   12dde:	b170      	cbz	r0, 12dfe <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   12de0:	f113 0f16 	cmn.w	r3, #22
   12de4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   12de6:	d005      	beq.n	12df4 <z_check_thread_stack_fail+0x1c>
   12de8:	f1a0 0220 	sub.w	r2, r0, #32
   12dec:	429a      	cmp	r2, r3
   12dee:	d805      	bhi.n	12dfc <z_check_thread_stack_fail+0x24>
   12df0:	4283      	cmp	r3, r0
   12df2:	d203      	bcs.n	12dfc <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   12df4:	4281      	cmp	r1, r0
   12df6:	bf28      	it	cs
   12df8:	2000      	movcs	r0, #0
   12dfa:	4770      	bx	lr
   12dfc:	2000      	movs	r0, #0
}
   12dfe:	4770      	bx	lr
   12e00:	20002534 	.word	0x20002534

00012e04 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   12e04:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   12e06:	4b09      	ldr	r3, [pc, #36]	; (12e2c <arch_switch_to_main_thread+0x28>)
   12e08:	6098      	str	r0, [r3, #8]
{
   12e0a:	460d      	mov	r5, r1
   12e0c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   12e0e:	f000 fb23 	bl	13458 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   12e12:	4620      	mov	r0, r4
   12e14:	f385 8809 	msr	PSP, r5
   12e18:	2100      	movs	r1, #0
   12e1a:	b663      	cpsie	if
   12e1c:	f381 8811 	msr	BASEPRI, r1
   12e20:	f3bf 8f6f 	isb	sy
   12e24:	2200      	movs	r2, #0
   12e26:	2300      	movs	r3, #0
   12e28:	f014 ff75 	bl	27d16 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   12e2c:	20002534 	.word	0x20002534

00012e30 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   12e30:	4901      	ldr	r1, [pc, #4]	; (12e38 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   12e32:	2210      	movs	r2, #16
	str	r2, [r1]
   12e34:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   12e36:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   12e38:	e000ed10 	.word	0xe000ed10

00012e3c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   12e3c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   12e3e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   12e40:	f380 8811 	msr	BASEPRI, r0
	isb
   12e44:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   12e48:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   12e4c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   12e4e:	b662      	cpsie	i
	isb
   12e50:	f3bf 8f6f 	isb	sy

	bx	lr
   12e54:	4770      	bx	lr
   12e56:	bf00      	nop

00012e58 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   12e58:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   12e5a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   12e5c:	f381 8811 	msr	BASEPRI, r1

	wfe
   12e60:	bf20      	wfe

	msr	BASEPRI, r0
   12e62:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   12e66:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   12e68:	4770      	bx	lr
   12e6a:	bf00      	nop

00012e6c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12e6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12e6e:	4606      	mov	r6, r0

	if (esf != NULL) {
   12e70:	460c      	mov	r4, r1
   12e72:	b301      	cbz	r1, 12eb6 <z_arm_fatal_error+0x4a>
   12e74:	4b13      	ldr	r3, [pc, #76]	; (12ec4 <z_arm_fatal_error+0x58>)
   12e76:	4d14      	ldr	r5, [pc, #80]	; (12ec8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   12e78:	4814      	ldr	r0, [pc, #80]	; (12ecc <z_arm_fatal_error+0x60>)
   12e7a:	1aed      	subs	r5, r5, r3
   12e7c:	08ed      	lsrs	r5, r5, #3
   12e7e:	01ad      	lsls	r5, r5, #6
   12e80:	f045 0501 	orr.w	r5, r5, #1
   12e84:	f8ad 5000 	strh.w	r5, [sp]
   12e88:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   12e8c:	6809      	ldr	r1, [r1, #0]
   12e8e:	f015 fad1 	bl	28434 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   12e92:	f8ad 5000 	strh.w	r5, [sp]
   12e96:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   12e9a:	68e1      	ldr	r1, [r4, #12]
   12e9c:	480c      	ldr	r0, [pc, #48]	; (12ed0 <z_arm_fatal_error+0x64>)
   12e9e:	f015 fac9 	bl	28434 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   12ea2:	69e1      	ldr	r1, [r4, #28]
   12ea4:	480b      	ldr	r0, [pc, #44]	; (12ed4 <z_arm_fatal_error+0x68>)
   12ea6:	462a      	mov	r2, r5
   12ea8:	f015 fa97 	bl	283da <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   12eac:	69a1      	ldr	r1, [r4, #24]
   12eae:	480a      	ldr	r0, [pc, #40]	; (12ed8 <z_arm_fatal_error+0x6c>)
   12eb0:	462a      	mov	r2, r5
   12eb2:	f015 fa92 	bl	283da <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   12eb6:	4621      	mov	r1, r4
   12eb8:	4630      	mov	r0, r6
}
   12eba:	b002      	add	sp, #8
   12ebc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
   12ec0:	f013 bbd6 	b.w	26670 <z_fatal_error>
   12ec4:	0002b248 	.word	0x0002b248
   12ec8:	0002b370 	.word	0x0002b370
   12ecc:	0002cac5 	.word	0x0002cac5
   12ed0:	0002caf4 	.word	0x0002caf4
   12ed4:	0002cb23 	.word	0x0002cb23
   12ed8:	0002cb32 	.word	0x0002cb32

00012edc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   12edc:	bf30      	wfi
    b z_SysNmiOnReset
   12ede:	f7ff bffd 	b.w	12edc <z_SysNmiOnReset>
   12ee2:	bf00      	nop

00012ee4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12ee4:	4a0e      	ldr	r2, [pc, #56]	; (12f20 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   12ee6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   12ee8:	4b0e      	ldr	r3, [pc, #56]	; (12f24 <z_arm_prep_c+0x40>)
   12eea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   12eee:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   12ef0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   12ef4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   12ef8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   12efc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   12f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   12f04:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
   12f08:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
   12f0c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   12f10:	f013 fc0c 	bl	2672c <z_bss_zero>
	z_data_copy();
   12f14:	f014 fb42 	bl	2759c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   12f18:	f000 fa74 	bl	13404 <z_arm_interrupt_init>
	z_cstart();
   12f1c:	f013 fc2a 	bl	26774 <z_cstart>
   12f20:	00010000 	.word	0x00010000
   12f24:	e000ed00 	.word	0xe000ed00

00012f28 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   12f28:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   12f2a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   12f2c:	4a0b      	ldr	r2, [pc, #44]	; (12f5c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   12f2e:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
   12f30:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   12f32:	bf1e      	ittt	ne
	movne	r1, #0
   12f34:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   12f36:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
   12f38:	f017 fb9a 	blne	2a670 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   12f3c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   12f3e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   12f42:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   12f46:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   12f4a:	4905      	ldr	r1, [pc, #20]	; (12f60 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   12f4c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   12f4e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   12f50:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   12f52:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   12f56:	4903      	ldr	r1, [pc, #12]	; (12f64 <_isr_wrapper+0x3c>)
	bx r1
   12f58:	4708      	bx	r1
   12f5a:	0000      	.short	0x0000
	ldr r2, =_kernel
   12f5c:	20002534 	.word	0x20002534
	ldr r1, =_sw_isr_table
   12f60:	0002b084 	.word	0x0002b084
	ldr r1, =z_arm_int_exit
   12f64:	000133e9 	.word	0x000133e9

00012f68 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
   12f68:	f015 fea3 	bl	28cb2 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   12f6c:	2020      	movs	r0, #32
    msr BASEPRI, r0
   12f6e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   12f72:	4808      	ldr	r0, [pc, #32]	; (12f94 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   12f74:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   12f78:	1840      	adds	r0, r0, r1
    msr PSP, r0
   12f7a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   12f7e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   12f82:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   12f84:	4308      	orrs	r0, r1
    msr CONTROL, r0
   12f86:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   12f8a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   12f8e:	f7ff ffa9 	bl	12ee4 <z_arm_prep_c>
   12f92:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
   12f94:	200037a0 	.word	0x200037a0

00012f98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   12f98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   12f9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   12fa0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   12fa2:	4672      	mov	r2, lr
	bl z_arm_fault
   12fa4:	f000 f94e 	bl	13244 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   12fa8:	bd01      	pop	{r0, pc}
   12faa:	bf00      	nop

00012fac <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   12fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12fb0:	4b35      	ldr	r3, [pc, #212]	; (13088 <mem_manage_fault+0xdc>)
   12fb2:	4c36      	ldr	r4, [pc, #216]	; (1308c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12fb4:	4d36      	ldr	r5, [pc, #216]	; (13090 <mem_manage_fault+0xe4>)
   12fb6:	1ae4      	subs	r4, r4, r3
   12fb8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
   12fba:	01a4      	lsls	r4, r4, #6
   12fbc:	f044 0901 	orr.w	r9, r4, #1
{
   12fc0:	4607      	mov	r7, r0
   12fc2:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   12fc4:	4833      	ldr	r0, [pc, #204]	; (13094 <mem_manage_fault+0xe8>)
   12fc6:	4649      	mov	r1, r9
{
   12fc8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   12fca:	f015 f9f9 	bl	283c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   12fce:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12fd0:	06db      	lsls	r3, r3, #27
   12fd2:	d503      	bpl.n	12fdc <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
   12fd4:	4830      	ldr	r0, [pc, #192]	; (13098 <mem_manage_fault+0xec>)
   12fd6:	4649      	mov	r1, r9
   12fd8:	f015 f9f2 	bl	283c0 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   12fdc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12fde:	0718      	lsls	r0, r3, #28
   12fe0:	d504      	bpl.n	12fec <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
   12fe2:	482e      	ldr	r0, [pc, #184]	; (1309c <mem_manage_fault+0xf0>)
   12fe4:	f044 0101 	orr.w	r1, r4, #1
   12fe8:	f015 f9ea 	bl	283c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   12fec:	4d28      	ldr	r5, [pc, #160]	; (13090 <mem_manage_fault+0xe4>)
   12fee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12ff0:	0799      	lsls	r1, r3, #30
   12ff2:	d423      	bmi.n	1303c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
   12ff4:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   12ff8:	4d25      	ldr	r5, [pc, #148]	; (13090 <mem_manage_fault+0xe4>)
   12ffa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   12ffc:	07db      	lsls	r3, r3, #31
   12ffe:	d504      	bpl.n	1300a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
   13000:	4827      	ldr	r0, [pc, #156]	; (130a0 <mem_manage_fault+0xf4>)
   13002:	f044 0101 	orr.w	r1, r4, #1
   13006:	f015 f9db 	bl	283c0 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1300a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1300c:	0698      	lsls	r0, r3, #26
   1300e:	d504      	bpl.n	1301a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
   13010:	4824      	ldr	r0, [pc, #144]	; (130a4 <mem_manage_fault+0xf8>)
   13012:	f044 0101 	orr.w	r1, r4, #1
   13016:	f015 f9d3 	bl	283c0 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1301a:	4b1d      	ldr	r3, [pc, #116]	; (13090 <mem_manage_fault+0xe4>)
   1301c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1301e:	06d1      	lsls	r1, r2, #27
   13020:	d424      	bmi.n	1306c <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   13022:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   13024:	0792      	lsls	r2, r2, #30
   13026:	d421      	bmi.n	1306c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13028:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   1302a:	4a19      	ldr	r2, [pc, #100]	; (13090 <mem_manage_fault+0xe4>)
   1302c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1302e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   13032:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   13034:	2300      	movs	r3, #0
   13036:	7033      	strb	r3, [r6, #0]

	return reason;
}
   13038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
   1303c:	f044 0a01 	orr.w	sl, r4, #1
   13040:	4819      	ldr	r0, [pc, #100]	; (130a8 <mem_manage_fault+0xfc>)
   13042:	4651      	mov	r1, sl
   13044:	f015 f9bc 	bl	283c0 <log_0>
		uint32_t temp = SCB->MMFAR;
   13048:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   1304c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1304e:	061a      	lsls	r2, r3, #24
   13050:	d5d0      	bpl.n	12ff4 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   13052:	4816      	ldr	r0, [pc, #88]	; (130ac <mem_manage_fault+0x100>)
   13054:	4652      	mov	r2, sl
   13056:	4649      	mov	r1, r9
   13058:	f015 f9bf 	bl	283da <log_1>
			if (from_hard_fault != 0) {
   1305c:	f1b8 0f00 	cmp.w	r8, #0
   13060:	d0ca      	beq.n	12ff8 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   13062:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13068:	62ab      	str	r3, [r5, #40]	; 0x28
   1306a:	e7c5      	b.n	12ff8 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1306c:	685b      	ldr	r3, [r3, #4]
   1306e:	051b      	lsls	r3, r3, #20
   13070:	d5da      	bpl.n	13028 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   13072:	4639      	mov	r1, r7
   13074:	4648      	mov	r0, r9
   13076:	f7ff feaf 	bl	12dd8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1307a:	2800      	cmp	r0, #0
   1307c:	d0d4      	beq.n	13028 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1307e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   13082:	2002      	movs	r0, #2
   13084:	e7d1      	b.n	1302a <mem_manage_fault+0x7e>
   13086:	bf00      	nop
   13088:	0002b248 	.word	0x0002b248
   1308c:	0002b370 	.word	0x0002b370
   13090:	e000ed00 	.word	0xe000ed00
   13094:	0002cb60 	.word	0x0002cb60
   13098:	0002cb76 	.word	0x0002cb76
   1309c:	0002cba9 	.word	0x0002cba9
   130a0:	0002cbea 	.word	0x0002cbea
   130a4:	0002cc09 	.word	0x0002cc09
   130a8:	0002cbbc 	.word	0x0002cbbc
   130ac:	0002cbd4 	.word	0x0002cbd4

000130b0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   130b0:	b570      	push	{r4, r5, r6, lr}
   130b2:	4b23      	ldr	r3, [pc, #140]	; (13140 <usage_fault.constprop.0+0x90>)
   130b4:	4c23      	ldr	r4, [pc, #140]	; (13144 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   130b6:	4d24      	ldr	r5, [pc, #144]	; (13148 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
   130b8:	4824      	ldr	r0, [pc, #144]	; (1314c <usage_fault.constprop.0+0x9c>)
   130ba:	1ae4      	subs	r4, r4, r3
   130bc:	08e4      	lsrs	r4, r4, #3
   130be:	01a4      	lsls	r4, r4, #6
   130c0:	f044 0601 	orr.w	r6, r4, #1
   130c4:	4631      	mov	r1, r6
   130c6:	f015 f97b 	bl	283c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   130ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130cc:	019b      	lsls	r3, r3, #6
   130ce:	d503      	bpl.n	130d8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
   130d0:	481f      	ldr	r0, [pc, #124]	; (13150 <usage_fault.constprop.0+0xa0>)
   130d2:	4631      	mov	r1, r6
   130d4:	f015 f974 	bl	283c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   130d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130da:	01dd      	lsls	r5, r3, #7
   130dc:	d504      	bpl.n	130e8 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
   130de:	481d      	ldr	r0, [pc, #116]	; (13154 <usage_fault.constprop.0+0xa4>)
   130e0:	f044 0101 	orr.w	r1, r4, #1
   130e4:	f015 f96c 	bl	283c0 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   130e8:	4d17      	ldr	r5, [pc, #92]	; (13148 <usage_fault.constprop.0+0x98>)
   130ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130ec:	0318      	lsls	r0, r3, #12
   130ee:	d504      	bpl.n	130fa <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
   130f0:	4819      	ldr	r0, [pc, #100]	; (13158 <usage_fault.constprop.0+0xa8>)
   130f2:	f044 0101 	orr.w	r1, r4, #1
   130f6:	f015 f963 	bl	283c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   130fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
   130fc:	0359      	lsls	r1, r3, #13
   130fe:	d504      	bpl.n	1310a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   13100:	4816      	ldr	r0, [pc, #88]	; (1315c <usage_fault.constprop.0+0xac>)
   13102:	f044 0101 	orr.w	r1, r4, #1
   13106:	f015 f95b 	bl	283c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   1310a:	4d0f      	ldr	r5, [pc, #60]	; (13148 <usage_fault.constprop.0+0x98>)
   1310c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1310e:	039a      	lsls	r2, r3, #14
   13110:	d504      	bpl.n	1311c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   13112:	4813      	ldr	r0, [pc, #76]	; (13160 <usage_fault.constprop.0+0xb0>)
   13114:	f044 0101 	orr.w	r1, r4, #1
   13118:	f015 f952 	bl	283c0 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   1311c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1311e:	03db      	lsls	r3, r3, #15
   13120:	d504      	bpl.n	1312c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   13122:	4810      	ldr	r0, [pc, #64]	; (13164 <usage_fault.constprop.0+0xb4>)
   13124:	f044 0101 	orr.w	r1, r4, #1
   13128:	f015 f94a 	bl	283c0 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   1312c:	4a06      	ldr	r2, [pc, #24]	; (13148 <usage_fault.constprop.0+0x98>)
   1312e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   13130:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   13134:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   13138:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1313a:	2000      	movs	r0, #0
   1313c:	bd70      	pop	{r4, r5, r6, pc}
   1313e:	bf00      	nop
   13140:	0002b248 	.word	0x0002b248
   13144:	0002b370 	.word	0x0002b370
   13148:	e000ed00 	.word	0xe000ed00
   1314c:	0002cc38 	.word	0x0002cc38
   13150:	0002cc50 	.word	0x0002cc50
   13154:	0002cc63 	.word	0x0002cc63
   13158:	0002cc7d 	.word	0x0002cc7d
   1315c:	0002cc9b 	.word	0x0002cc9b
   13160:	0002ccc0 	.word	0x0002ccc0
   13164:	0002ccda 	.word	0x0002ccda

00013168 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   13168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1316c:	4b2a      	ldr	r3, [pc, #168]	; (13218 <bus_fault.constprop.0+0xb0>)
   1316e:	4c2b      	ldr	r4, [pc, #172]	; (1321c <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13170:	4d2b      	ldr	r5, [pc, #172]	; (13220 <bus_fault.constprop.0+0xb8>)
   13172:	1ae4      	subs	r4, r4, r3
   13174:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
   13176:	01a4      	lsls	r4, r4, #6
   13178:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1317c:	4607      	mov	r7, r0
   1317e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   13180:	4828      	ldr	r0, [pc, #160]	; (13224 <bus_fault.constprop.0+0xbc>)
   13182:	4641      	mov	r1, r8
   13184:	f015 f91c 	bl	283c0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   13188:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1318a:	04d9      	lsls	r1, r3, #19
   1318c:	d503      	bpl.n	13196 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
   1318e:	4826      	ldr	r0, [pc, #152]	; (13228 <bus_fault.constprop.0+0xc0>)
   13190:	4641      	mov	r1, r8
   13192:	f015 f915 	bl	283c0 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   13196:	6aab      	ldr	r3, [r5, #40]	; 0x28
   13198:	051a      	lsls	r2, r3, #20
   1319a:	d504      	bpl.n	131a6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
   1319c:	4823      	ldr	r0, [pc, #140]	; (1322c <bus_fault.constprop.0+0xc4>)
   1319e:	f044 0101 	orr.w	r1, r4, #1
   131a2:	f015 f90d 	bl	283c0 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   131a6:	4d1e      	ldr	r5, [pc, #120]	; (13220 <bus_fault.constprop.0+0xb8>)
   131a8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131aa:	059b      	lsls	r3, r3, #22
   131ac:	d512      	bpl.n	131d4 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
   131ae:	f044 0801 	orr.w	r8, r4, #1
   131b2:	481f      	ldr	r0, [pc, #124]	; (13230 <bus_fault.constprop.0+0xc8>)
   131b4:	4641      	mov	r1, r8
   131b6:	f015 f903 	bl	283c0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   131ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   131bc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131be:	0418      	lsls	r0, r3, #16
   131c0:	d508      	bpl.n	131d4 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   131c2:	481c      	ldr	r0, [pc, #112]	; (13234 <bus_fault.constprop.0+0xcc>)
   131c4:	4642      	mov	r2, r8
   131c6:	f015 f908 	bl	283da <log_1>
			if (from_hard_fault != 0) {
   131ca:	b11f      	cbz	r7, 131d4 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   131cc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   131d2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   131d4:	4d12      	ldr	r5, [pc, #72]	; (13220 <bus_fault.constprop.0+0xb8>)
   131d6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131d8:	0559      	lsls	r1, r3, #21
   131da:	d504      	bpl.n	131e6 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
   131dc:	4816      	ldr	r0, [pc, #88]	; (13238 <bus_fault.constprop.0+0xd0>)
   131de:	f044 0101 	orr.w	r1, r4, #1
   131e2:	f015 f8ed 	bl	283c0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   131e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   131e8:	05da      	lsls	r2, r3, #23
   131ea:	d50d      	bpl.n	13208 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
   131ec:	4813      	ldr	r0, [pc, #76]	; (1323c <bus_fault.constprop.0+0xd4>)
   131ee:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   131f2:	f015 f8e5 	bl	283c0 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   131f6:	4a0a      	ldr	r2, [pc, #40]	; (13220 <bus_fault.constprop.0+0xb8>)
   131f8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   131fa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   131fc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   13200:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   13202:	7030      	strb	r0, [r6, #0]
}
   13204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   13208:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1320a:	049b      	lsls	r3, r3, #18
   1320c:	d5f3      	bpl.n	131f6 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1320e:	480c      	ldr	r0, [pc, #48]	; (13240 <bus_fault.constprop.0+0xd8>)
   13210:	f044 0101 	orr.w	r1, r4, #1
   13214:	e7ed      	b.n	131f2 <bus_fault.constprop.0+0x8a>
   13216:	bf00      	nop
   13218:	0002b248 	.word	0x0002b248
   1321c:	0002b370 	.word	0x0002b370
   13220:	e000ed00 	.word	0xe000ed00
   13224:	0002cd05 	.word	0x0002cd05
   13228:	0002cd1b 	.word	0x0002cd1b
   1322c:	0002cba9 	.word	0x0002cba9
   13230:	0002cd2c 	.word	0x0002cd2c
   13234:	0002cd45 	.word	0x0002cd45
   13238:	0002cd5a 	.word	0x0002cd5a
   1323c:	0002cd75 	.word	0x0002cd75
   13240:	0002cc09 	.word	0x0002cc09

00013244 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   13244:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13248:	4b58      	ldr	r3, [pc, #352]	; (133ac <z_arm_fault+0x168>)
   1324a:	685e      	ldr	r6, [r3, #4]
{
   1324c:	b08b      	sub	sp, #44	; 0x2c
   1324e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   13250:	f3c6 0408 	ubfx	r4, r6, #0, #9
   13254:	2500      	movs	r5, #0
   13256:	f385 8811 	msr	BASEPRI, r5
   1325a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1325e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   13262:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   13266:	d10d      	bne.n	13284 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   13268:	f002 030c 	and.w	r3, r2, #12
   1326c:	2b08      	cmp	r3, #8
   1326e:	d10b      	bne.n	13288 <z_arm_fault+0x44>
   13270:	494f      	ldr	r1, [pc, #316]	; (133b0 <z_arm_fault+0x16c>)
   13272:	4b50      	ldr	r3, [pc, #320]	; (133b4 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   13274:	4850      	ldr	r0, [pc, #320]	; (133b8 <z_arm_fault+0x174>)
   13276:	1ac9      	subs	r1, r1, r3
   13278:	08c9      	lsrs	r1, r1, #3
   1327a:	0189      	lsls	r1, r1, #6
   1327c:	f041 0101 	orr.w	r1, r1, #1
   13280:	f015 f89e 	bl	283c0 <log_0>
		return NULL;
   13284:	462f      	mov	r7, r5
   13286:	e003      	b.n	13290 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   13288:	0712      	lsls	r2, r2, #28
   1328a:	d401      	bmi.n	13290 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
   1328c:	4607      	mov	r7, r0
			*nested_exc = true;
   1328e:	2501      	movs	r5, #1
	*recoverable = false;
   13290:	2300      	movs	r3, #0
   13292:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   13296:	1ee3      	subs	r3, r4, #3
   13298:	2b09      	cmp	r3, #9
   1329a:	d86e      	bhi.n	1337a <z_arm_fault+0x136>
   1329c:	e8df f003 	tbb	[pc, r3]
   132a0:	40605c05 	.word	0x40605c05
   132a4:	6d6d6d6d 	.word	0x6d6d6d6d
   132a8:	646d      	.short	0x646d
   132aa:	4b42      	ldr	r3, [pc, #264]	; (133b4 <z_arm_fault+0x170>)
   132ac:	4e40      	ldr	r6, [pc, #256]	; (133b0 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   132ae:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 133ac <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
   132b2:	4842      	ldr	r0, [pc, #264]	; (133bc <z_arm_fault+0x178>)
   132b4:	1af6      	subs	r6, r6, r3
   132b6:	08f6      	lsrs	r6, r6, #3
   132b8:	01b6      	lsls	r6, r6, #6
   132ba:	f046 0601 	orr.w	r6, r6, #1
   132be:	4631      	mov	r1, r6
   132c0:	f015 f87e 	bl	283c0 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   132c4:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
   132c8:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   132cc:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   132d0:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   132d4:	d005      	beq.n	132e2 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
   132d6:	483a      	ldr	r0, [pc, #232]	; (133c0 <z_arm_fault+0x17c>)
   132d8:	4631      	mov	r1, r6
	PR_FAULT_INFO(
   132da:	f015 f871 	bl	283c0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   132de:	2400      	movs	r4, #0
}
   132e0:	e021      	b.n	13326 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   132e2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
   132e6:	005b      	lsls	r3, r3, #1
   132e8:	d51d      	bpl.n	13326 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
   132ea:	4836      	ldr	r0, [pc, #216]	; (133c4 <z_arm_fault+0x180>)
   132ec:	4631      	mov	r1, r6
   132ee:	f015 f867 	bl	283c0 <log_0>
		if (SCB_MMFSR != 0) {
   132f2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
   132f6:	b133      	cbz	r3, 13306 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
   132f8:	f10d 0207 	add.w	r2, sp, #7
   132fc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   132fe:	4638      	mov	r0, r7
   13300:	f7ff fe54 	bl	12fac <mem_manage_fault>
   13304:	e00e      	b.n	13324 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
   13306:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
   1330a:	b12b      	cbz	r3, 13318 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
   1330c:	f10d 0107 	add.w	r1, sp, #7
   13310:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   13312:	f7ff ff29 	bl	13168 <bus_fault.constprop.0>
   13316:	e005      	b.n	13324 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
   13318:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
   1331c:	b29b      	uxth	r3, r3
   1331e:	b113      	cbz	r3, 13326 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
   13320:	f7ff fec6 	bl	130b0 <usage_fault.constprop.0>
   13324:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   13326:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1332a:	b993      	cbnz	r3, 13352 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1332c:	2220      	movs	r2, #32
   1332e:	4639      	mov	r1, r7
   13330:	a802      	add	r0, sp, #8
   13332:	f015 fc70 	bl	28c16 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   13336:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13338:	b39d      	cbz	r5, 133a2 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   1333a:	f3c3 0208 	ubfx	r2, r3, #0, #9
   1333e:	b922      	cbnz	r2, 1334a <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   13340:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   13344:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   13348:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   1334a:	a902      	add	r1, sp, #8
   1334c:	4620      	mov	r0, r4
   1334e:	f7ff fd8d 	bl	12e6c <z_arm_fatal_error>
}
   13352:	b00b      	add	sp, #44	; 0x2c
   13354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   13358:	f10d 0207 	add.w	r2, sp, #7
   1335c:	2100      	movs	r1, #0
   1335e:	e7ce      	b.n	132fe <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
   13360:	f10d 0107 	add.w	r1, sp, #7
   13364:	2000      	movs	r0, #0
   13366:	e7d4      	b.n	13312 <z_arm_fault+0xce>
   13368:	4911      	ldr	r1, [pc, #68]	; (133b0 <z_arm_fault+0x16c>)
   1336a:	4b12      	ldr	r3, [pc, #72]	; (133b4 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
   1336c:	4816      	ldr	r0, [pc, #88]	; (133c8 <z_arm_fault+0x184>)
   1336e:	1ac9      	subs	r1, r1, r3
   13370:	08c9      	lsrs	r1, r1, #3
   13372:	0189      	lsls	r1, r1, #6
   13374:	f041 0101 	orr.w	r1, r1, #1
   13378:	e7af      	b.n	132da <z_arm_fault+0x96>
   1337a:	4a0e      	ldr	r2, [pc, #56]	; (133b4 <z_arm_fault+0x170>)
   1337c:	4b0c      	ldr	r3, [pc, #48]	; (133b0 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
   1337e:	4813      	ldr	r0, [pc, #76]	; (133cc <z_arm_fault+0x188>)
   13380:	4913      	ldr	r1, [pc, #76]	; (133d0 <z_arm_fault+0x18c>)
   13382:	1a9b      	subs	r3, r3, r2
   13384:	08db      	lsrs	r3, r3, #3
   13386:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   1338a:	ea4f 1383 	mov.w	r3, r3, lsl #6
   1338e:	bf18      	it	ne
   13390:	4601      	movne	r1, r0
   13392:	f043 0301 	orr.w	r3, r3, #1
   13396:	480f      	ldr	r0, [pc, #60]	; (133d4 <z_arm_fault+0x190>)
   13398:	f1a4 0210 	sub.w	r2, r4, #16
   1339c:	f015 f831 	bl	28402 <log_2>
   133a0:	e79d      	b.n	132de <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   133a2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   133a6:	f023 0301 	bic.w	r3, r3, #1
   133aa:	e7cd      	b.n	13348 <z_arm_fault+0x104>
   133ac:	e000ed00 	.word	0xe000ed00
   133b0:	0002b370 	.word	0x0002b370
   133b4:	0002b248 	.word	0x0002b248
   133b8:	0002cd8d 	.word	0x0002cd8d
   133bc:	0002cdb8 	.word	0x0002cdb8
   133c0:	0002cdcf 	.word	0x0002cdcf
   133c4:	0002cdf0 	.word	0x0002cdf0
   133c8:	0002ce0f 	.word	0x0002ce0f
   133cc:	0002ce48 	.word	0x0002ce48
   133d0:	0002ce33 	.word	0x0002ce33
   133d4:	0002ce61 	.word	0x0002ce61

000133d8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   133d8:	4a02      	ldr	r2, [pc, #8]	; (133e4 <z_arm_fault_init+0xc>)
   133da:	6953      	ldr	r3, [r2, #20]
   133dc:	f043 0310 	orr.w	r3, r3, #16
   133e0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   133e2:	4770      	bx	lr
   133e4:	e000ed00 	.word	0xe000ed00

000133e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   133e8:	4b04      	ldr	r3, [pc, #16]	; (133fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   133ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   133ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
   133ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   133f0:	d003      	beq.n	133fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   133f2:	4903      	ldr	r1, [pc, #12]	; (13400 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   133f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   133f8:	600a      	str	r2, [r1, #0]

000133fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   133fa:	4770      	bx	lr
	ldr r3, =_kernel
   133fc:	20002534 	.word	0x20002534
	ldr r1, =_SCS_ICSR
   13400:	e000ed04 	.word	0xe000ed04

00013404 <z_arm_interrupt_init>:
   13404:	4804      	ldr	r0, [pc, #16]	; (13418 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   13406:	2300      	movs	r3, #0
   13408:	2120      	movs	r1, #32
   1340a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   1340c:	3301      	adds	r3, #1
   1340e:	2b30      	cmp	r3, #48	; 0x30
   13410:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   13414:	d1f9      	bne.n	1340a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   13416:	4770      	bx	lr
   13418:	e000e100 	.word	0xe000e100

0001341c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   1341c:	4b06      	ldr	r3, [pc, #24]	; (13438 <z_impl_k_thread_abort+0x1c>)
   1341e:	689b      	ldr	r3, [r3, #8]
   13420:	4283      	cmp	r3, r0
   13422:	d107      	bne.n	13434 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   13424:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   13428:	b123      	cbz	r3, 13434 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1342a:	4a04      	ldr	r2, [pc, #16]	; (1343c <z_impl_k_thread_abort+0x20>)
   1342c:	6853      	ldr	r3, [r2, #4]
   1342e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   13432:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   13434:	f014 b84e 	b.w	274d4 <z_thread_abort>
   13438:	20002534 	.word	0x20002534
   1343c:	e000ed00 	.word	0xe000ed00

00013440 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   13440:	4b02      	ldr	r3, [pc, #8]	; (1344c <z_arm_configure_static_mpu_regions+0xc>)
   13442:	4a03      	ldr	r2, [pc, #12]	; (13450 <z_arm_configure_static_mpu_regions+0x10>)
   13444:	4803      	ldr	r0, [pc, #12]	; (13454 <z_arm_configure_static_mpu_regions+0x14>)
   13446:	2101      	movs	r1, #1
   13448:	f000 b88c 	b.w	13564 <arm_core_mpu_configure_static_mpu_regions>
   1344c:	20040000 	.word	0x20040000
   13450:	20000000 	.word	0x20000000
   13454:	0002b554 	.word	0x0002b554

00013458 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   13458:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   1345a:	4b05      	ldr	r3, [pc, #20]	; (13470 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
   1345c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   1345e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   13460:	4a04      	ldr	r2, [pc, #16]	; (13474 <z_arm_configure_dynamic_mpu_regions+0x1c>)
   13462:	2120      	movs	r1, #32
   13464:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   13468:	4618      	mov	r0, r3
   1346a:	2101      	movs	r1, #1
   1346c:	f000 b884 	b.w	13578 <arm_core_mpu_configure_dynamic_mpu_regions>
   13470:	20001280 	.word	0x20001280
   13474:	150b0000 	.word	0x150b0000

00013478 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   13478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
   1347a:	4f2a      	ldr	r7, [pc, #168]	; (13524 <mpu_configure_regions+0xac>)
   1347c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   1347e:	2100      	movs	r1, #0
   13480:	42b1      	cmp	r1, r6
   13482:	da14      	bge.n	134ae <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
   13484:	6844      	ldr	r4, [r0, #4]
   13486:	2c00      	cmp	r4, #0
   13488:	d048      	beq.n	1351c <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
   1348a:	b1c3      	cbz	r3, 134be <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   1348c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   13490:	ea14 0f0c 	tst.w	r4, ip
   13494:	d00d      	beq.n	134b2 <mpu_configure_regions+0x3a>
   13496:	4a24      	ldr	r2, [pc, #144]	; (13528 <mpu_configure_regions+0xb0>)
   13498:	4b24      	ldr	r3, [pc, #144]	; (1352c <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
   1349a:	4825      	ldr	r0, [pc, #148]	; (13530 <mpu_configure_regions+0xb8>)
   1349c:	1ad2      	subs	r2, r2, r3
   1349e:	08d2      	lsrs	r2, r2, #3
   134a0:	0192      	lsls	r2, r2, #6
   134a2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   134a6:	f014 ff98 	bl	283da <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
   134aa:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   134ae:	4610      	mov	r0, r2
   134b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
   134b2:	2c1f      	cmp	r4, #31
   134b4:	d9ef      	bls.n	13496 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
   134b6:	6805      	ldr	r5, [r0, #0]
		&&
   134b8:	ea1c 0f05 	tst.w	ip, r5
   134bc:	d1eb      	bne.n	13496 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   134be:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   134c0:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   134c2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   134c6:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
   134c8:	d916      	bls.n	134f8 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
   134ca:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   134ce:	d815      	bhi.n	134fc <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   134d0:	3c01      	subs	r4, #1
   134d2:	fab4 f484 	clz	r4, r4
   134d6:	f1c4 041f 	rsb	r4, r4, #31
   134da:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   134dc:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   134de:	ea4c 0404 	orr.w	r4, ip, r4
   134e2:	d90d      	bls.n	13500 <mpu_configure_regions+0x88>
   134e4:	4a10      	ldr	r2, [pc, #64]	; (13528 <mpu_configure_regions+0xb0>)
   134e6:	4b11      	ldr	r3, [pc, #68]	; (1352c <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   134e8:	4812      	ldr	r0, [pc, #72]	; (13534 <mpu_configure_regions+0xbc>)
   134ea:	1ad2      	subs	r2, r2, r3
   134ec:	08d2      	lsrs	r2, r2, #3
   134ee:	0192      	lsls	r2, r2, #6
   134f0:	f042 0201 	orr.w	r2, r2, #1
   134f4:	4629      	mov	r1, r5
   134f6:	e7d6      	b.n	134a6 <mpu_configure_regions+0x2e>
		return REGION_32B;
   134f8:	2408      	movs	r4, #8
   134fa:	e7ef      	b.n	134dc <mpu_configure_regions+0x64>
		return REGION_4G;
   134fc:	243e      	movs	r4, #62	; 0x3e
   134fe:	e7ed      	b.n	134dc <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13500:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   13504:	432a      	orrs	r2, r5
   13506:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   1350a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
   1350e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   13512:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   13516:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
   1351a:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   1351c:	3101      	adds	r1, #1
   1351e:	300c      	adds	r0, #12
   13520:	e7ae      	b.n	13480 <mpu_configure_regions+0x8>
   13522:	bf00      	nop
   13524:	e000ed00 	.word	0xe000ed00
   13528:	0002b360 	.word	0x0002b360
   1352c:	0002b248 	.word	0x0002b248
   13530:	0002ce78 	.word	0x0002ce78
   13534:	0002ce9b 	.word	0x0002ce9b

00013538 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   13538:	4b04      	ldr	r3, [pc, #16]	; (1354c <arm_core_mpu_enable+0x14>)
   1353a:	2205      	movs	r2, #5
   1353c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
   13540:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   13544:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   13548:	4770      	bx	lr
   1354a:	bf00      	nop
   1354c:	e000ed00 	.word	0xe000ed00

00013550 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   13550:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   13554:	4b02      	ldr	r3, [pc, #8]	; (13560 <arm_core_mpu_disable+0x10>)
   13556:	2200      	movs	r2, #0
   13558:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
   1355c:	4770      	bx	lr
   1355e:	bf00      	nop
   13560:	e000ed00 	.word	0xe000ed00

00013564 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   13564:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   13566:	4c03      	ldr	r4, [pc, #12]	; (13574 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   13568:	2301      	movs	r3, #1
   1356a:	7822      	ldrb	r2, [r4, #0]
   1356c:	f7ff ff84 	bl	13478 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   13570:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
   13572:	bd10      	pop	{r4, pc}
   13574:	20002596 	.word	0x20002596

00013578 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   13578:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   1357a:	4a09      	ldr	r2, [pc, #36]	; (135a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
   1357c:	2300      	movs	r3, #0
   1357e:	7812      	ldrb	r2, [r2, #0]
   13580:	f7ff ff7a 	bl	13478 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   13584:	f110 0f16 	cmn.w	r0, #22
   13588:	d003      	beq.n	13592 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
   1358a:	4b06      	ldr	r3, [pc, #24]	; (135a4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
   1358c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   1358e:	2807      	cmp	r0, #7
   13590:	dd00      	ble.n	13594 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   13592:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
   13594:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
   13598:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
   1359c:	3001      	adds	r0, #1
   1359e:	e7f6      	b.n	1358e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
   135a0:	20002596 	.word	0x20002596
   135a4:	e000ed00 	.word	0xe000ed00

000135a8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   135a8:	4914      	ldr	r1, [pc, #80]	; (135fc <z_arm_mpu_init+0x54>)
   135aa:	6808      	ldr	r0, [r1, #0]
   135ac:	2808      	cmp	r0, #8
{
   135ae:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   135b0:	d821      	bhi.n	135f6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
   135b2:	f7ff ffcd 	bl	13550 <arm_core_mpu_disable>
	MPU->RNR = index;
   135b6:	4c12      	ldr	r4, [pc, #72]	; (13600 <z_arm_mpu_init+0x58>)
   135b8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   135ba:	2200      	movs	r2, #0
   135bc:	4290      	cmp	r0, r2
   135be:	f101 010c 	add.w	r1, r1, #12
   135c2:	d105      	bne.n	135d0 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
   135c4:	4b0f      	ldr	r3, [pc, #60]	; (13604 <z_arm_mpu_init+0x5c>)
   135c6:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
   135c8:	f7ff ffb6 	bl	13538 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
   135cc:	2000      	movs	r0, #0
}
   135ce:	bd10      	pop	{r4, pc}
   135d0:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   135d4:	f851 3c0c 	ldr.w	r3, [r1, #-12]
   135d8:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   135dc:	4313      	orrs	r3, r2
   135de:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   135e2:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   135e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
   135ea:	f043 0301 	orr.w	r3, r3, #1
   135ee:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   135f2:	3201      	adds	r2, #1
   135f4:	e7e2      	b.n	135bc <z_arm_mpu_init+0x14>
		return -1;
   135f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   135fa:	e7e8      	b.n	135ce <z_arm_mpu_init+0x26>
   135fc:	0002b560 	.word	0x0002b560
   13600:	e000ed00 	.word	0xe000ed00
   13604:	20002596 	.word	0x20002596

00013608 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   13608:	f04f 0220 	mov.w	r2, #32
   1360c:	f3ef 8311 	mrs	r3, BASEPRI
   13610:	f382 8811 	msr	BASEPRI, r2
   13614:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   13618:	4a04      	ldr	r2, [pc, #16]	; (1362c <nordicsemi_nrf52_init+0x24>)
   1361a:	2101      	movs	r1, #1
   1361c:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	__asm__ volatile(
   13620:	f383 8811 	msr	BASEPRI, r3
   13624:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   13628:	2000      	movs	r0, #0
   1362a:	4770      	bx	lr
   1362c:	4001e000 	.word	0x4001e000

00013630 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   13630:	b120      	cbz	r0, 1363c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   13632:	4b03      	ldr	r3, [pc, #12]	; (13640 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   13634:	0180      	lsls	r0, r0, #6
   13636:	f043 0301 	orr.w	r3, r3, #1
   1363a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   1363c:	4770      	bx	lr
   1363e:	bf00      	nop
   13640:	0002b450 	.word	0x0002b450

00013644 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   13644:	4b0e      	ldr	r3, [pc, #56]	; (13680 <bt_hex_real+0x3c>)
   13646:	2940      	cmp	r1, #64	; 0x40
{
   13648:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   1364a:	bf28      	it	cs
   1364c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   1364e:	4c0d      	ldr	r4, [pc, #52]	; (13684 <bt_hex_real+0x40>)
   13650:	1846      	adds	r6, r0, r1
   13652:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   13654:	42b0      	cmp	r0, r6
   13656:	f103 0302 	add.w	r3, r3, #2
   1365a:	d104      	bne.n	13666 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   1365c:	2300      	movs	r3, #0
   1365e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   13662:	4807      	ldr	r0, [pc, #28]	; (13680 <bt_hex_real+0x3c>)
   13664:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   13666:	7802      	ldrb	r2, [r0, #0]
   13668:	0912      	lsrs	r2, r2, #4
   1366a:	5ca2      	ldrb	r2, [r4, r2]
   1366c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   13670:	f810 2b01 	ldrb.w	r2, [r0], #1
   13674:	f002 020f 	and.w	r2, r2, #15
   13678:	5ca2      	ldrb	r2, [r4, r2]
   1367a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   1367e:	e7e9      	b.n	13654 <bt_hex_real+0x10>
   13680:	200025b5 	.word	0x200025b5
   13684:	0002cf19 	.word	0x0002cf19

00013688 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   13688:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   1368a:	7803      	ldrb	r3, [r0, #0]
   1368c:	b08b      	sub	sp, #44	; 0x2c
   1368e:	4604      	mov	r4, r0
   13690:	ad07      	add	r5, sp, #28
   13692:	2b03      	cmp	r3, #3
   13694:	d821      	bhi.n	136da <bt_addr_le_str_real+0x52>
   13696:	e8df f003 	tbb	[pc, r3]
   1369a:	1a02      	.short	0x1a02
   1369c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   1369e:	4912      	ldr	r1, [pc, #72]	; (136e8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   136a0:	4628      	mov	r0, r5
   136a2:	f015 fa6f 	bl	28b84 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   136a6:	7863      	ldrb	r3, [r4, #1]
   136a8:	9304      	str	r3, [sp, #16]
   136aa:	78a3      	ldrb	r3, [r4, #2]
   136ac:	9303      	str	r3, [sp, #12]
   136ae:	78e3      	ldrb	r3, [r4, #3]
   136b0:	9302      	str	r3, [sp, #8]
   136b2:	7923      	ldrb	r3, [r4, #4]
   136b4:	9301      	str	r3, [sp, #4]
   136b6:	7963      	ldrb	r3, [r4, #5]
   136b8:	9300      	str	r3, [sp, #0]
   136ba:	4a0c      	ldr	r2, [pc, #48]	; (136ec <bt_addr_le_str_real+0x64>)
   136bc:	79a3      	ldrb	r3, [r4, #6]
   136be:	9505      	str	r5, [sp, #20]
   136c0:	211e      	movs	r1, #30
   136c2:	480b      	ldr	r0, [pc, #44]	; (136f0 <bt_addr_le_str_real+0x68>)
   136c4:	f014 fa4a 	bl	27b5c <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   136c8:	4809      	ldr	r0, [pc, #36]	; (136f0 <bt_addr_le_str_real+0x68>)
   136ca:	b00b      	add	sp, #44	; 0x2c
   136cc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   136ce:	4909      	ldr	r1, [pc, #36]	; (136f4 <bt_addr_le_str_real+0x6c>)
   136d0:	e7e6      	b.n	136a0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   136d2:	4909      	ldr	r1, [pc, #36]	; (136f8 <bt_addr_le_str_real+0x70>)
   136d4:	e7e4      	b.n	136a0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   136d6:	4909      	ldr	r1, [pc, #36]	; (136fc <bt_addr_le_str_real+0x74>)
   136d8:	e7e2      	b.n	136a0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   136da:	4a09      	ldr	r2, [pc, #36]	; (13700 <bt_addr_le_str_real+0x78>)
   136dc:	210a      	movs	r1, #10
   136de:	4628      	mov	r0, r5
   136e0:	f014 fa3c 	bl	27b5c <snprintk>
		break;
   136e4:	e7df      	b.n	136a6 <bt_addr_le_str_real+0x1e>
   136e6:	bf00      	nop
   136e8:	0002ced4 	.word	0x0002ced4
   136ec:	0002cef6 	.word	0x0002cef6
   136f0:	20002597 	.word	0x20002597
   136f4:	0002cedb 	.word	0x0002cedb
   136f8:	0002cee2 	.word	0x0002cee2
   136fc:	0002ceec 	.word	0x0002ceec
   13700:	0002dc6e 	.word	0x0002dc6e

00013704 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   13704:	b430      	push	{r4, r5}
   13706:	4603      	mov	r3, r0
   13708:	4608      	mov	r0, r1
	switch (src->type) {
   1370a:	781a      	ldrb	r2, [r3, #0]
   1370c:	2a01      	cmp	r2, #1
   1370e:	d013      	beq.n	13738 <uuid_to_uuid128+0x34>
   13710:	2a02      	cmp	r2, #2
   13712:	d026      	beq.n	13762 <uuid_to_uuid128+0x5e>
   13714:	b972      	cbnz	r2, 13734 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   13716:	4a15      	ldr	r2, [pc, #84]	; (1376c <uuid_to_uuid128+0x68>)
   13718:	f102 0410 	add.w	r4, r2, #16
   1371c:	f852 5b04 	ldr.w	r5, [r2], #4
   13720:	f841 5b04 	str.w	r5, [r1], #4
   13724:	42a2      	cmp	r2, r4
   13726:	d1f9      	bne.n	1371c <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
   13728:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
   1372a:	7812      	ldrb	r2, [r2, #0]
   1372c:	700a      	strb	r2, [r1, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1372e:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
   13730:	0a1b      	lsrs	r3, r3, #8
   13732:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   13734:	bc30      	pop	{r4, r5}
   13736:	4770      	bx	lr
		*dst = uuid128_base;
   13738:	4a0c      	ldr	r2, [pc, #48]	; (1376c <uuid_to_uuid128+0x68>)
   1373a:	f102 0410 	add.w	r4, r2, #16
   1373e:	f852 5b04 	ldr.w	r5, [r2], #4
   13742:	f841 5b04 	str.w	r5, [r1], #4
   13746:	42a2      	cmp	r2, r4
   13748:	d1f9      	bne.n	1373e <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
   1374a:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
   1374c:	7812      	ldrb	r2, [r2, #0]
   1374e:	700a      	strb	r2, [r1, #0]
   13750:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
   13754:	7343      	strb	r3, [r0, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   13756:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
   13758:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
   1375a:	0a1b      	lsrs	r3, r3, #8
   1375c:	7382      	strb	r2, [r0, #14]
   1375e:	7403      	strb	r3, [r0, #16]
}
   13760:	e7e8      	b.n	13734 <uuid_to_uuid128+0x30>
}
   13762:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
   13764:	2211      	movs	r2, #17
   13766:	4619      	mov	r1, r3
   13768:	f015 ba55 	b.w	28c16 <memcpy>
   1376c:	0002cf31 	.word	0x0002cf31

00013770 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   13770:	b538      	push	{r3, r4, r5, lr}
   13772:	4605      	mov	r5, r0
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf *net_buf_alloc(struct net_buf_pool *pool,
					    k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   13774:	4805      	ldr	r0, [pc, #20]	; (1378c <bt_buf_get_rx+0x1c>)
   13776:	f016 fd39 	bl	2a1ec <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   1377a:	4604      	mov	r4, r0
   1377c:	b120      	cbz	r0, 13788 <bt_buf_get_rx+0x18>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   1377e:	2100      	movs	r1, #0
   13780:	3008      	adds	r0, #8
   13782:	f016 fd52 	bl	2a22a <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   13786:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   13788:	4620      	mov	r0, r4
   1378a:	bd38      	pop	{r3, r4, r5, pc}
   1378c:	200007e4 	.word	0x200007e4

00013790 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   13790:	b570      	push	{r4, r5, r6, lr}
   13792:	4602      	mov	r2, r0
   13794:	460b      	mov	r3, r1
	__asm__ volatile(
   13796:	f04f 0120 	mov.w	r1, #32
   1379a:	f3ef 8511 	mrs	r5, BASEPRI
   1379e:	f381 8811 	msr	BASEPRI, r1
   137a2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
   137a6:	480c      	ldr	r0, [pc, #48]	; (137d8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
   137a8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
   137aa:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
   137ae:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
   137b2:	f385 8811 	msr	BASEPRI, r5
   137b6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
   137ba:	b924      	cbnz	r4, 137c6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   137bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   137c0:	2001      	movs	r0, #1
   137c2:	f7ff bfd5 	b.w	13770 <bt_buf_get_rx>
   137c6:	2301      	movs	r3, #1
   137c8:	f104 0008 	add.w	r0, r4, #8
   137cc:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
   137ce:	81a1      	strh	r1, [r4, #12]
   137d0:	f016 fd2b 	bl	2a22a <net_buf_simple_reserve>
}
   137d4:	4620      	mov	r0, r4
   137d6:	bd70      	pop	{r4, r5, r6, pc}
   137d8:	20000000 	.word	0x20000000

000137dc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   137dc:	b570      	push	{r4, r5, r6, lr}
   137de:	4604      	mov	r4, r0
	switch (evt) {
   137e0:	2c0f      	cmp	r4, #15
{
   137e2:	460d      	mov	r5, r1
   137e4:	4610      	mov	r0, r2
   137e6:	4619      	mov	r1, r3
	switch (evt) {
   137e8:	d805      	bhi.n	137f6 <bt_buf_get_evt+0x1a>
   137ea:	2c0d      	cmp	r4, #13
   137ec:	d912      	bls.n	13814 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   137ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   137f2:	f7ff bfcd 	b.w	13790 <bt_buf_get_cmd_complete>
	switch (evt) {
   137f6:	2c13      	cmp	r4, #19
   137f8:	d10c      	bne.n	13814 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   137fa:	480b      	ldr	r0, [pc, #44]	; (13828 <bt_buf_get_evt+0x4c>)
   137fc:	f016 fcf6 	bl	2a1ec <net_buf_alloc_fixed>
			if (buf) {
   13800:	4604      	mov	r4, r0
   13802:	b128      	cbz	r0, 13810 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   13804:	2100      	movs	r1, #0
   13806:	3008      	adds	r0, #8
   13808:	f016 fd0f 	bl	2a22a <net_buf_simple_reserve>
   1380c:	2301      	movs	r3, #1
   1380e:	7523      	strb	r3, [r4, #20]
}
   13810:	4620      	mov	r0, r4
   13812:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   13814:	4602      	mov	r2, r0
   13816:	460b      	mov	r3, r1
		if (discardable) {
   13818:	b10d      	cbz	r5, 1381e <bt_buf_get_evt+0x42>
   1381a:	4804      	ldr	r0, [pc, #16]	; (1382c <bt_buf_get_evt+0x50>)
   1381c:	e7ee      	b.n	137fc <bt_buf_get_evt+0x20>
}
   1381e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   13822:	2001      	movs	r0, #1
   13824:	f7ff bfa4 	b.w	13770 <bt_buf_get_rx>
   13828:	2000080c 	.word	0x2000080c
   1382c:	2000076c 	.word	0x2000076c

00013830 <ver_str>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
}

#if defined(CONFIG_BT_DEBUG)
static const char *ver_str(uint8_t ver)
{
   13830:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
   13832:	4d0b      	ldr	r5, [pc, #44]	; (13860 <ver_str+0x30>)
{
   13834:	4606      	mov	r6, r0
	const char * const str[] = {
   13836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   13838:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
   1383a:	466c      	mov	r4, sp
   1383c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1383e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   13840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   13842:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   13846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		"1.0b", "1.1", "1.2", "2.0", "2.1", "3.0", "4.0", "4.1", "4.2",
		"5.0", "5.1", "5.2"
	};

	if (ver < ARRAY_SIZE(str)) {
   1384a:	2e0b      	cmp	r6, #11
		return str[ver];
   1384c:	bf9b      	ittet	ls
   1384e:	ab0c      	addls	r3, sp, #48	; 0x30
   13850:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	}

	return "unknown";
   13854:	4803      	ldrhi	r0, [pc, #12]	; (13864 <ver_str+0x34>)
		return str[ver];
   13856:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
   1385a:	b00c      	add	sp, #48	; 0x30
   1385c:	bd70      	pop	{r4, r5, r6, pc}
   1385e:	bf00      	nop
   13860:	0002b400 	.word	0x0002b400
   13864:	0002d034 	.word	0x0002d034

00013868 <hci_data_buf_overflow>:
   13868:	4905      	ldr	r1, [pc, #20]	; (13880 <hci_data_buf_overflow+0x18>)
   1386a:	4a06      	ldr	r2, [pc, #24]	; (13884 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   1386c:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   1386e:	4806      	ldr	r0, [pc, #24]	; (13888 <hci_data_buf_overflow+0x20>)
   13870:	1a52      	subs	r2, r2, r1
   13872:	08d2      	lsrs	r2, r2, #3
   13874:	0192      	lsls	r2, r2, #6
   13876:	7819      	ldrb	r1, [r3, #0]
   13878:	f042 0202 	orr.w	r2, r2, #2
   1387c:	f014 bdad 	b.w	283da <log_1>
   13880:	0002b248 	.word	0x0002b248
   13884:	0002b328 	.word	0x0002b328
   13888:	0002d03c 	.word	0x0002d03c

0001388c <hci_disconn_complete_prio>:
{
   1388c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1388e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   13890:	781a      	ldrb	r2, [r3, #0]
   13892:	b972      	cbnz	r2, 138b2 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13894:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   13898:	4620      	mov	r0, r4
   1389a:	f002 fa93 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   1389e:	4605      	mov	r5, r0
   138a0:	b940      	cbnz	r0, 138b4 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   138a2:	4b08      	ldr	r3, [pc, #32]	; (138c4 <hci_disconn_complete_prio+0x38>)
   138a4:	881a      	ldrh	r2, [r3, #0]
   138a6:	b922      	cbnz	r2, 138b2 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   138a8:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   138ac:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   138b0:	8018      	strh	r0, [r3, #0]
}
   138b2:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   138b4:	2101      	movs	r1, #1
   138b6:	f002 fa8d 	bl	15dd4 <bt_conn_set_state>
	bt_conn_unref(conn);
   138ba:	4628      	mov	r0, r5
}
   138bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   138c0:	f015 bd67 	b.w	29392 <bt_conn_unref>
   138c4:	2000257c 	.word	0x2000257c

000138c8 <hci_disconn_complete>:
{
   138c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   138ca:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   138cc:	7835      	ldrb	r5, [r6, #0]
   138ce:	b9f5      	cbnz	r5, 1390e <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   138d0:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   138d4:	4638      	mov	r0, r7
   138d6:	f002 fa75 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   138da:	4604      	mov	r4, r0
   138dc:	b960      	cbnz	r0, 138f8 <hci_disconn_complete+0x30>
   138de:	4b0c      	ldr	r3, [pc, #48]	; (13910 <hci_disconn_complete+0x48>)
   138e0:	4a0c      	ldr	r2, [pc, #48]	; (13914 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
   138e2:	480d      	ldr	r0, [pc, #52]	; (13918 <hci_disconn_complete+0x50>)
   138e4:	1ad2      	subs	r2, r2, r3
   138e6:	08d2      	lsrs	r2, r2, #3
   138e8:	0192      	lsls	r2, r2, #6
   138ea:	4639      	mov	r1, r7
   138ec:	f042 0201 	orr.w	r2, r2, #1
}
   138f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   138f4:	f014 bd71 	b.w	283da <log_1>
	conn->err = evt->reason;
   138f8:	78f3      	ldrb	r3, [r6, #3]
   138fa:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   138fc:	4629      	mov	r1, r5
   138fe:	f002 fa69 	bl	15dd4 <bt_conn_set_state>
	conn->handle = 0U;
   13902:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   13904:	4620      	mov	r0, r4
}
   13906:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1390a:	f015 bd42 	b.w	29392 <bt_conn_unref>
}
   1390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13910:	0002b248 	.word	0x0002b248
   13914:	0002b328 	.word	0x0002b328
   13918:	0002d064 	.word	0x0002d064

0001391c <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1391c:	6883      	ldr	r3, [r0, #8]
{
   1391e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   13920:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
   13922:	4620      	mov	r0, r4
   13924:	f002 fa4e 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   13928:	b960      	cbnz	r0, 13944 <le_data_len_change+0x28>
   1392a:	4a08      	ldr	r2, [pc, #32]	; (1394c <le_data_len_change+0x30>)
   1392c:	4b08      	ldr	r3, [pc, #32]	; (13950 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1392e:	4809      	ldr	r0, [pc, #36]	; (13954 <le_data_len_change+0x38>)
   13930:	1ad2      	subs	r2, r2, r3
   13932:	08d2      	lsrs	r2, r2, #3
   13934:	0192      	lsls	r2, r2, #6
   13936:	4621      	mov	r1, r4
   13938:	f042 0201 	orr.w	r2, r2, #1
}
   1393c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   13940:	f014 bd4b 	b.w	283da <log_1>
}
   13944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   13948:	f015 bd23 	b.w	29392 <bt_conn_unref>
   1394c:	0002b328 	.word	0x0002b328
   13950:	0002b248 	.word	0x0002b248
   13954:	0002d08a 	.word	0x0002d08a

00013958 <hci_hardware_error>:
{
   13958:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   1395a:	2101      	movs	r1, #1
   1395c:	3008      	adds	r0, #8
   1395e:	f016 fcce 	bl	2a2fe <net_buf_simple_pull_mem>
   13962:	4b06      	ldr	r3, [pc, #24]	; (1397c <hci_hardware_error+0x24>)
   13964:	4a06      	ldr	r2, [pc, #24]	; (13980 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13966:	7801      	ldrb	r1, [r0, #0]
   13968:	4806      	ldr	r0, [pc, #24]	; (13984 <hci_hardware_error+0x2c>)
   1396a:	1ad2      	subs	r2, r2, r3
   1396c:	08d2      	lsrs	r2, r2, #3
   1396e:	0192      	lsls	r2, r2, #6
}
   13970:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   13974:	f042 0201 	orr.w	r2, r2, #1
   13978:	f014 bd2f 	b.w	283da <log_1>
   1397c:	0002b248 	.word	0x0002b248
   13980:	0002b328 	.word	0x0002b328
   13984:	0002d0ae 	.word	0x0002d0ae

00013988 <hci_vendor_event>:
{
   13988:	b510      	push	{r4, lr}
   1398a:	4a0a      	ldr	r2, [pc, #40]	; (139b4 <hci_vendor_event+0x2c>)
   1398c:	4c0a      	ldr	r4, [pc, #40]	; (139b8 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
   1398e:	8981      	ldrh	r1, [r0, #12]
   13990:	6880      	ldr	r0, [r0, #8]
   13992:	1aa4      	subs	r4, r4, r2
   13994:	f7ff fe56 	bl	13644 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   13998:	f7fe fb3a 	bl	12010 <z_log_strdup>
   1399c:	08e4      	lsrs	r4, r4, #3
   1399e:	01a4      	lsls	r4, r4, #6
   139a0:	f044 0402 	orr.w	r4, r4, #2
   139a4:	4601      	mov	r1, r0
   139a6:	4622      	mov	r2, r4
   139a8:	4804      	ldr	r0, [pc, #16]	; (139bc <hci_vendor_event+0x34>)
}
   139aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   139ae:	f014 bd14 	b.w	283da <log_1>
   139b2:	bf00      	nop
   139b4:	0002b248 	.word	0x0002b248
   139b8:	0002b328 	.word	0x0002b328
   139bc:	0002d0d0 	.word	0x0002d0d0

000139c0 <le_conn_update_complete>:
{
   139c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   139c2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   139c4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   139c8:	4630      	mov	r0, r6
   139ca:	f002 f9fb 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   139ce:	4604      	mov	r4, r0
   139d0:	b968      	cbnz	r0, 139ee <le_conn_update_complete+0x2e>
   139d2:	4b25      	ldr	r3, [pc, #148]	; (13a68 <le_conn_update_complete+0xa8>)
   139d4:	4a25      	ldr	r2, [pc, #148]	; (13a6c <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   139d6:	4826      	ldr	r0, [pc, #152]	; (13a70 <le_conn_update_complete+0xb0>)
   139d8:	1ad2      	subs	r2, r2, r3
   139da:	08d2      	lsrs	r2, r2, #3
   139dc:	0192      	lsls	r2, r2, #6
   139de:	f042 0201 	orr.w	r2, r2, #1
   139e2:	4631      	mov	r1, r6
}
   139e4:	b002      	add	sp, #8
   139e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   139ea:	f014 bcf6 	b.w	283da <log_1>
	if (!evt->status) {
   139ee:	782b      	ldrb	r3, [r5, #0]
   139f0:	b9cb      	cbnz	r3, 13a26 <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   139f2:	792a      	ldrb	r2, [r5, #4]
   139f4:	78eb      	ldrb	r3, [r5, #3]
   139f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   139fa:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   139fe:	79aa      	ldrb	r2, [r5, #6]
   13a00:	796b      	ldrb	r3, [r5, #5]
   13a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13a06:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   13a0a:	79eb      	ldrb	r3, [r5, #7]
   13a0c:	7a2a      	ldrb	r2, [r5, #8]
   13a0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   13a12:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   13a16:	f002 f825 	bl	15a64 <notify_le_param_updated>
	bt_conn_unref(conn);
   13a1a:	4620      	mov	r0, r4
}
   13a1c:	b002      	add	sp, #8
   13a1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   13a22:	f015 bcb6 	b.w	29392 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   13a26:	2b1a      	cmp	r3, #26
   13a28:	d1f7      	bne.n	13a1a <le_conn_update_complete+0x5a>
   13a2a:	78c3      	ldrb	r3, [r0, #3]
   13a2c:	2b01      	cmp	r3, #1
   13a2e:	d1f4      	bne.n	13a1a <le_conn_update_complete+0x5a>
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   13a30:	f44f 6180 	mov.w	r1, #1024	; 0x400
   13a34:	3004      	adds	r0, #4
   13a36:	f015 f9f9 	bl	28e2c <atomic_or>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   13a3a:	0543      	lsls	r3, r0, #21
   13a3c:	d4ed      	bmi.n	13a1a <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
   13a3e:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
   13a42:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
   13a46:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
   13a4a:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
   13a4e:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
   13a52:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   13a56:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
   13a58:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
   13a5c:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
   13a60:	4620      	mov	r0, r4
   13a62:	f002 fdf3 	bl	1664c <bt_l2cap_update_conn_param>
   13a66:	e7d8      	b.n	13a1a <le_conn_update_complete+0x5a>
   13a68:	0002b248 	.word	0x0002b248
   13a6c:	0002b328 	.word	0x0002b328
   13a70:	0002d08a 	.word	0x0002d08a

00013a74 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13a74:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13a76:	4c0d      	ldr	r4, [pc, #52]	; (13aac <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
   13a78:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
   13a7a:	2205      	movs	r2, #5
   13a7c:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
   13a80:	f002 fad0 	bl	16024 <bt_conn_lookup_state_le>
		if (!conn) {
   13a84:	b978      	cbnz	r0, 13aa6 <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
   13a86:	4b0a      	ldr	r3, [pc, #40]	; (13ab0 <find_pending_connect.part.0+0x3c>)
   13a88:	6b18      	ldr	r0, [r3, #48]	; 0x30
   13a8a:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
   13a8c:	9000      	str	r0, [sp, #0]
   13a8e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
   13a92:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13a96:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
   13a9a:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
   13a9e:	2204      	movs	r2, #4
   13aa0:	4669      	mov	r1, sp
   13aa2:	f002 fabf 	bl	16024 <bt_conn_lookup_state_le>
}
   13aa6:	b002      	add	sp, #8
   13aa8:	bd10      	pop	{r4, pc}
   13aaa:	bf00      	nop
   13aac:	20000000 	.word	0x20000000
   13ab0:	0002b400 	.word	0x0002b400

00013ab4 <handle_event>:
{
   13ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13ab6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   13aba:	4605      	mov	r5, r0
   13abc:	4608      	mov	r0, r1
		if (handler->event != event) {
   13abe:	7811      	ldrb	r1, [r2, #0]
   13ac0:	42a9      	cmp	r1, r5
   13ac2:	d01a      	beq.n	13afa <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
   13ac4:	3208      	adds	r2, #8
   13ac6:	429a      	cmp	r2, r3
   13ac8:	d1f9      	bne.n	13abe <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   13aca:	8986      	ldrh	r6, [r0, #12]
   13acc:	4b16      	ldr	r3, [pc, #88]	; (13b28 <handle_event+0x74>)
   13ace:	4c17      	ldr	r4, [pc, #92]	; (13b2c <handle_event+0x78>)
   13ad0:	6880      	ldr	r0, [r0, #8]
   13ad2:	4631      	mov	r1, r6
   13ad4:	1ae4      	subs	r4, r4, r3
   13ad6:	f7ff fdb5 	bl	13644 <bt_hex_real>
   13ada:	f7fe fa99 	bl	12010 <z_log_strdup>
   13ade:	08e4      	lsrs	r4, r4, #3
   13ae0:	01a4      	lsls	r4, r4, #6
   13ae2:	f044 0402 	orr.w	r4, r4, #2
   13ae6:	4603      	mov	r3, r0
   13ae8:	f8ad 4000 	strh.w	r4, [sp]
   13aec:	4810      	ldr	r0, [pc, #64]	; (13b30 <handle_event+0x7c>)
   13aee:	4632      	mov	r2, r6
   13af0:	4629      	mov	r1, r5
   13af2:	f014 fc9f 	bl	28434 <log_3>
}
   13af6:	b002      	add	sp, #8
   13af8:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   13afa:	8981      	ldrh	r1, [r0, #12]
   13afc:	7853      	ldrb	r3, [r2, #1]
   13afe:	428b      	cmp	r3, r1
   13b00:	d90d      	bls.n	13b1e <handle_event+0x6a>
   13b02:	4a09      	ldr	r2, [pc, #36]	; (13b28 <handle_event+0x74>)
   13b04:	4b09      	ldr	r3, [pc, #36]	; (13b2c <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13b06:	480b      	ldr	r0, [pc, #44]	; (13b34 <handle_event+0x80>)
   13b08:	1a9b      	subs	r3, r3, r2
   13b0a:	08db      	lsrs	r3, r3, #3
   13b0c:	019b      	lsls	r3, r3, #6
   13b0e:	f043 0301 	orr.w	r3, r3, #1
   13b12:	462a      	mov	r2, r5
}
   13b14:	b002      	add	sp, #8
   13b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   13b1a:	f014 bc72 	b.w	28402 <log_2>
		handler->handler(buf);
   13b1e:	6853      	ldr	r3, [r2, #4]
}
   13b20:	b002      	add	sp, #8
   13b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   13b26:	4718      	bx	r3
   13b28:	0002b248 	.word	0x0002b248
   13b2c:	0002b328 	.word	0x0002b328
   13b30:	0002d116 	.word	0x0002d116
   13b34:	0002d0f4 	.word	0x0002d0f4

00013b38 <hci_le_meta_event>:
{
   13b38:	b510      	push	{r4, lr}
   13b3a:	2101      	movs	r1, #1
   13b3c:	4604      	mov	r4, r0
   13b3e:	3008      	adds	r0, #8
   13b40:	f016 fbdd 	bl	2a2fe <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13b44:	4621      	mov	r1, r4
   13b46:	4a03      	ldr	r2, [pc, #12]	; (13b54 <hci_le_meta_event+0x1c>)
   13b48:	7800      	ldrb	r0, [r0, #0]
}
   13b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   13b4e:	2307      	movs	r3, #7
   13b50:	f7ff bfb0 	b.w	13ab4 <handle_event>
   13b54:	0002b5b0 	.word	0x0002b5b0

00013b58 <hci_cmd_done>:
{
   13b58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13b5c:	4607      	mov	r7, r0
   13b5e:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13b60:	7990      	ldrb	r0, [r2, #6]
   13b62:	4e41      	ldr	r6, [pc, #260]	; (13c68 <hci_cmd_done+0x110>)
{
   13b64:	4688      	mov	r8, r1
   13b66:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   13b68:	f011 fdb2 	bl	256d0 <net_buf_pool_get>
   13b6c:	4286      	cmp	r6, r0
   13b6e:	d016      	beq.n	13b9e <hci_cmd_done+0x46>
   13b70:	4b3e      	ldr	r3, [pc, #248]	; (13c6c <hci_cmd_done+0x114>)
   13b72:	4d3f      	ldr	r5, [pc, #252]	; (13c70 <hci_cmd_done+0x118>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   13b74:	79a0      	ldrb	r0, [r4, #6]
   13b76:	9700      	str	r7, [sp, #0]
   13b78:	1aed      	subs	r5, r5, r3
   13b7a:	08ed      	lsrs	r5, r5, #3
   13b7c:	9001      	str	r0, [sp, #4]
   13b7e:	f011 fda7 	bl	256d0 <net_buf_pool_get>
   13b82:	01ad      	lsls	r5, r5, #6
   13b84:	f045 0502 	orr.w	r5, r5, #2
   13b88:	e9cd 0602 	strd	r0, r6, [sp, #8]
   13b8c:	462b      	mov	r3, r5
   13b8e:	4839      	ldr	r0, [pc, #228]	; (13c74 <hci_cmd_done+0x11c>)
   13b90:	2204      	movs	r2, #4
   13b92:	4669      	mov	r1, sp
   13b94:	f014 fc6a 	bl	2846c <log_n>
}
   13b98:	b005      	add	sp, #20
   13b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   13b9e:	4620      	mov	r0, r4
   13ba0:	f011 fd9e 	bl	256e0 <net_buf_id>
   13ba4:	4d34      	ldr	r5, [pc, #208]	; (13c78 <hci_cmd_done+0x120>)
   13ba6:	f04f 090c 	mov.w	r9, #12
   13baa:	fb09 5000 	mla	r0, r9, r0, r5
   13bae:	8843      	ldrh	r3, [r0, #2]
   13bb0:	42bb      	cmp	r3, r7
   13bb2:	d011      	beq.n	13bd8 <hci_cmd_done+0x80>
   13bb4:	4b2d      	ldr	r3, [pc, #180]	; (13c6c <hci_cmd_done+0x114>)
   13bb6:	4e2e      	ldr	r6, [pc, #184]	; (13c70 <hci_cmd_done+0x118>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   13bb8:	4620      	mov	r0, r4
   13bba:	1af6      	subs	r6, r6, r3
   13bbc:	f011 fd90 	bl	256e0 <net_buf_id>
   13bc0:	08f6      	lsrs	r6, r6, #3
   13bc2:	fb09 5000 	mla	r0, r9, r0, r5
   13bc6:	01b6      	lsls	r6, r6, #6
   13bc8:	f046 0602 	orr.w	r6, r6, #2
   13bcc:	8842      	ldrh	r2, [r0, #2]
   13bce:	482b      	ldr	r0, [pc, #172]	; (13c7c <hci_cmd_done+0x124>)
   13bd0:	4633      	mov	r3, r6
   13bd2:	4639      	mov	r1, r7
   13bd4:	f014 fc15 	bl	28402 <log_2>
	if (cmd(buf)->state && !status) {
   13bd8:	4620      	mov	r0, r4
   13bda:	f011 fd81 	bl	256e0 <net_buf_id>
   13bde:	260c      	movs	r6, #12
   13be0:	fb06 5000 	mla	r0, r6, r0, r5
   13be4:	6843      	ldr	r3, [r0, #4]
   13be6:	b1ab      	cbz	r3, 13c14 <hci_cmd_done+0xbc>
   13be8:	f1b8 0f00 	cmp.w	r8, #0
   13bec:	d112      	bne.n	13c14 <hci_cmd_done+0xbc>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   13bee:	4620      	mov	r0, r4
   13bf0:	f011 fd76 	bl	256e0 <net_buf_id>
   13bf4:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   13bf8:	2101      	movs	r1, #1
   13bfa:	6842      	ldr	r2, [r0, #4]
   13bfc:	e9d2 3000 	ldrd	r3, r0, [r2]

	if (val) {
   13c00:	7a12      	ldrb	r2, [r2, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   13c02:	f000 061f 	and.w	r6, r0, #31
   13c06:	40b1      	lsls	r1, r6
	if (val) {
   13c08:	0940      	lsrs	r0, r0, #5
   13c0a:	b1ea      	cbz	r2, 13c48 <hci_cmd_done+0xf0>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   13c0c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   13c10:	f015 f90c 	bl	28e2c <atomic_or>
	if (cmd(buf)->sync) {
   13c14:	4620      	mov	r0, r4
   13c16:	f011 fd63 	bl	256e0 <net_buf_id>
   13c1a:	260c      	movs	r6, #12
   13c1c:	fb06 5000 	mla	r0, r6, r0, r5
   13c20:	6883      	ldr	r3, [r0, #8]
   13c22:	2b00      	cmp	r3, #0
   13c24:	d0b8      	beq.n	13b98 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
   13c26:	4620      	mov	r0, r4
   13c28:	f011 fd5a 	bl	256e0 <net_buf_id>
   13c2c:	4370      	muls	r0, r6
   13c2e:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   13c32:	4620      	mov	r0, r4
   13c34:	f011 fd54 	bl	256e0 <net_buf_id>
   13c38:	fb06 5500 	mla	r5, r6, r0, r5
   13c3c:	68a8      	ldr	r0, [r5, #8]
}
   13c3e:	b005      	add	sp, #20
   13c40:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
   13c44:	f012 bf86 	b.w	26b54 <z_impl_k_sem_give>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   13c48:	43c9      	mvns	r1, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   13c4a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   13c4e:	f3bf 8f5b 	dmb	ish
   13c52:	e853 2f00 	ldrex	r2, [r3]
   13c56:	400a      	ands	r2, r1
   13c58:	e843 2000 	strex	r0, r2, [r3]
   13c5c:	2800      	cmp	r0, #0
   13c5e:	d1f8      	bne.n	13c52 <hci_cmd_done+0xfa>
   13c60:	f3bf 8f5b 	dmb	ish
   13c64:	e7d6      	b.n	13c14 <hci_cmd_done+0xbc>
   13c66:	bf00      	nop
   13c68:	200007bc 	.word	0x200007bc
   13c6c:	0002b248 	.word	0x0002b248
   13c70:	0002b328 	.word	0x0002b328
   13c74:	0002d138 	.word	0x0002d138
   13c78:	2000128c 	.word	0x2000128c
   13c7c:	0002d16d 	.word	0x0002d16d

00013c80 <hci_cmd_status>:
{
   13c80:	b538      	push	{r3, r4, r5, lr}
   13c82:	2104      	movs	r1, #4
   13c84:	4604      	mov	r4, r0
   13c86:	3008      	adds	r0, #8
   13c88:	f016 fb39 	bl	2a2fe <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   13c8c:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   13c8e:	7801      	ldrb	r1, [r0, #0]
   13c90:	8840      	ldrh	r0, [r0, #2]
   13c92:	4622      	mov	r2, r4
   13c94:	f7ff ff60 	bl	13b58 <hci_cmd_done>
	if (ncmd) {
   13c98:	b125      	cbz	r5, 13ca4 <hci_cmd_status+0x24>
   13c9a:	4803      	ldr	r0, [pc, #12]	; (13ca8 <hci_cmd_status+0x28>)
}
   13c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13ca0:	f012 bf58 	b.w	26b54 <z_impl_k_sem_give>
   13ca4:	bd38      	pop	{r3, r4, r5, pc}
   13ca6:	bf00      	nop
   13ca8:	200000e8 	.word	0x200000e8

00013cac <hci_cmd_complete>:
{
   13cac:	b538      	push	{r3, r4, r5, lr}
   13cae:	2103      	movs	r1, #3
   13cb0:	4604      	mov	r4, r0
   13cb2:	3008      	adds	r0, #8
   13cb4:	f016 fb23 	bl	2a2fe <net_buf_simple_pull_mem>
	status = buf->data[0];
   13cb8:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   13cba:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   13cbc:	7819      	ldrb	r1, [r3, #0]
   13cbe:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13cc2:	4622      	mov	r2, r4
   13cc4:	f7ff ff48 	bl	13b58 <hci_cmd_done>
	if (ncmd) {
   13cc8:	b125      	cbz	r5, 13cd4 <hci_cmd_complete+0x28>
   13cca:	4803      	ldr	r0, [pc, #12]	; (13cd8 <hci_cmd_complete+0x2c>)
}
   13ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   13cd0:	f012 bf40 	b.w	26b54 <z_impl_k_sem_give>
   13cd4:	bd38      	pop	{r3, r4, r5, pc}
   13cd6:	bf00      	nop
   13cd8:	200000e8 	.word	0x200000e8

00013cdc <hci_num_completed_packets>:
{
   13cdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce0:	4d39      	ldr	r5, [pc, #228]	; (13dc8 <hci_num_completed_packets+0xec>)
   13ce2:	4b3a      	ldr	r3, [pc, #232]	; (13dcc <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   13ce4:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   13ce8:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 13dd0 <hci_num_completed_packets+0xf4>
   13cec:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
   13cee:	2600      	movs	r6, #0
   13cf0:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
   13cf2:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
   13cf4:	f898 3000 	ldrb.w	r3, [r8]
   13cf8:	429e      	cmp	r6, r3
   13cfa:	db01      	blt.n	13d00 <hci_num_completed_packets+0x24>
}
   13cfc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   13d00:	eb08 0386 	add.w	r3, r8, r6, lsl #2
   13d04:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   13d08:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   13d0c:	4658      	mov	r0, fp
   13d0e:	f002 f859 	bl	15dc4 <bt_conn_lookup_handle>
		if (!conn) {
   13d12:	4604      	mov	r4, r0
   13d14:	b1d8      	cbz	r0, 13d4e <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
   13d16:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   13d1a:	2f00      	cmp	r7, #0
   13d1c:	d033      	beq.n	13d86 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
   13d1e:	f04f 0320 	mov.w	r3, #32
   13d22:	f3ef 8211 	mrs	r2, BASEPRI
   13d26:	f383 8811 	msr	BASEPRI, r3
   13d2a:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   13d2e:	69e3      	ldr	r3, [r4, #28]
   13d30:	b1b3      	cbz	r3, 13d60 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
   13d32:	3b01      	subs	r3, #1
   13d34:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   13d36:	f382 8811 	msr	BASEPRI, r2
   13d3a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   13d3e:	4620      	mov	r0, r4
   13d40:	f001 fe8c 	bl	15a5c <bt_conn_get_pkts>
   13d44:	3f01      	subs	r7, #1
   13d46:	f012 ff05 	bl	26b54 <z_impl_k_sem_give>
   13d4a:	b2bf      	uxth	r7, r7
   13d4c:	e7e5      	b.n	13d1a <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
   13d4e:	01aa      	lsls	r2, r5, #6
   13d50:	4820      	ldr	r0, [pc, #128]	; (13dd4 <hci_num_completed_packets+0xf8>)
   13d52:	f042 0201 	orr.w	r2, r2, #1
   13d56:	4659      	mov	r1, fp
   13d58:	f014 fb3f 	bl	283da <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   13d5c:	3601      	adds	r6, #1
   13d5e:	e7c9      	b.n	13cf4 <hci_num_completed_packets+0x18>
	return list->head;
   13d60:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   13d62:	b12b      	cbz	r3, 13d70 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13d64:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   13d66:	6818      	ldr	r0, [r3, #0]
	list->head = node;
   13d68:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   13d6a:	428b      	cmp	r3, r1
	list->tail = node;
   13d6c:	bf08      	it	eq
   13d6e:	61a0      	streq	r0, [r4, #24]
   13d70:	f382 8811 	msr	BASEPRI, r2
   13d74:	f3bf 8f6f 	isb	sy
			if (!node) {
   13d78:	b94b      	cbnz	r3, 13d8e <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
   13d7a:	01a9      	lsls	r1, r5, #6
   13d7c:	f041 0101 	orr.w	r1, r1, #1
   13d80:	4650      	mov	r0, sl
   13d82:	f014 fb1d 	bl	283c0 <log_0>
		bt_conn_unref(conn);
   13d86:	4620      	mov	r0, r4
   13d88:	f015 fb03 	bl	29392 <bt_conn_unref>
   13d8c:	e7e6      	b.n	13d5c <hci_num_completed_packets+0x80>
	__asm__ volatile(
   13d8e:	f04f 0220 	mov.w	r2, #32
   13d92:	f3ef 8111 	mrs	r1, BASEPRI
   13d96:	f382 8811 	msr	BASEPRI, r2
   13d9a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   13d9e:	68da      	ldr	r2, [r3, #12]
   13da0:	61e2      	str	r2, [r4, #28]
	return list->tail;
   13da2:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   13da4:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
   13da8:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
   13dac:	b94a      	cbnz	r2, 13dc2 <hci_num_completed_packets+0xe6>
	list->head = node;
   13dae:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
   13db2:	f381 8811 	msr	BASEPRI, r1
   13db6:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   13dba:	4658      	mov	r0, fp
   13dbc:	f013 f836 	bl	26e2c <k_work_submit>
   13dc0:	e7bd      	b.n	13d3e <hci_num_completed_packets+0x62>
	parent->next = child;
   13dc2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   13dc4:	6263      	str	r3, [r4, #36]	; 0x24
}
   13dc6:	e7f4      	b.n	13db2 <hci_num_completed_packets+0xd6>
   13dc8:	0002b328 	.word	0x0002b328
   13dcc:	0002b248 	.word	0x0002b248
   13dd0:	0002d1bc 	.word	0x0002d1bc
   13dd4:	0002d1a0 	.word	0x0002d1a0

00013dd8 <bt_hci_cmd_state_set_init>:
{
   13dd8:	b510      	push	{r4, lr}
	state->bit = bit;
   13dda:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   13dde:	f89d 3008 	ldrb.w	r3, [sp, #8]
   13de2:	720b      	strb	r3, [r1, #8]
{
   13de4:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   13de6:	f011 fc7b 	bl	256e0 <net_buf_id>
   13dea:	4b03      	ldr	r3, [pc, #12]	; (13df8 <bt_hci_cmd_state_set_init+0x20>)
   13dec:	220c      	movs	r2, #12
   13dee:	fb02 3300 	mla	r3, r2, r0, r3
   13df2:	605c      	str	r4, [r3, #4]
}
   13df4:	bd10      	pop	{r4, pc}
   13df6:	bf00      	nop
   13df8:	2000128c 	.word	0x2000128c

00013dfc <bt_hci_cmd_create>:
{
   13dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
   13e00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e08:	4606      	mov	r6, r0
   13e0a:	4817      	ldr	r0, [pc, #92]	; (13e68 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
   13e0c:	4d17      	ldr	r5, [pc, #92]	; (13e6c <bt_hci_cmd_create+0x70>)
{
   13e0e:	460f      	mov	r7, r1
   13e10:	f016 f9ec 	bl	2a1ec <net_buf_alloc_fixed>
   13e14:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
   13e16:	f100 0a08 	add.w	sl, r0, #8
   13e1a:	2100      	movs	r1, #0
   13e1c:	f04f 0800 	mov.w	r8, #0
   13e20:	4650      	mov	r0, sl
   13e22:	f016 fa02 	bl	2a22a <net_buf_simple_reserve>
   13e26:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
   13e2a:	4620      	mov	r0, r4
   13e2c:	f011 fc58 	bl	256e0 <net_buf_id>
   13e30:	f04f 090c 	mov.w	r9, #12
   13e34:	fb09 5000 	mla	r0, r9, r0, r5
   13e38:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
   13e3a:	4620      	mov	r0, r4
   13e3c:	f011 fc50 	bl	256e0 <net_buf_id>
   13e40:	fb09 5000 	mla	r0, r9, r0, r5
   13e44:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
   13e48:	4620      	mov	r0, r4
   13e4a:	f011 fc49 	bl	256e0 <net_buf_id>
   13e4e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
   13e52:	2103      	movs	r1, #3
   13e54:	f8c5 8004 	str.w	r8, [r5, #4]
   13e58:	4650      	mov	r0, sl
   13e5a:	f016 fa29 	bl	2a2b0 <net_buf_simple_add>
	hdr->param_len = param_len;
   13e5e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   13e60:	8006      	strh	r6, [r0, #0]
}
   13e62:	4620      	mov	r0, r4
   13e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   13e68:	200007bc 	.word	0x200007bc
   13e6c:	2000128c 	.word	0x2000128c

00013e70 <bt_hci_cmd_send_sync>:
{
   13e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e74:	4607      	mov	r7, r0
   13e76:	b086      	sub	sp, #24
   13e78:	4615      	mov	r5, r2
	if (!buf) {
   13e7a:	460c      	mov	r4, r1
   13e7c:	b921      	cbnz	r1, 13e88 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   13e7e:	f7ff ffbd 	bl	13dfc <bt_hci_cmd_create>
		if (!buf) {
   13e82:	4604      	mov	r4, r0
   13e84:	2800      	cmp	r0, #0
   13e86:	d057      	beq.n	13f38 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13e88:	2201      	movs	r2, #1
   13e8a:	2100      	movs	r1, #0
   13e8c:	4668      	mov	r0, sp
   13e8e:	f016 fcc3 	bl	2a818 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   13e92:	4620      	mov	r0, r4
   13e94:	f011 fc24 	bl	256e0 <net_buf_id>
   13e98:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 13f40 <bt_hci_cmd_send_sync+0xd0>
   13e9c:	230c      	movs	r3, #12
   13e9e:	fb03 8000 	mla	r0, r3, r0, r8
   13ea2:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
   13ea6:	4620      	mov	r0, r4
   13ea8:	f016 f9d0 	bl	2a24c <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   13eac:	4825      	ldr	r0, [pc, #148]	; (13f44 <bt_hci_cmd_send_sync+0xd4>)
   13eae:	4621      	mov	r1, r4
   13eb0:	f016 f9bf 	bl	2a232 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   13eb4:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   13eb8:	2300      	movs	r3, #0
   13eba:	4668      	mov	r0, sp
   13ebc:	f012 fe70 	bl	26ba0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   13ec0:	4606      	mov	r6, r0
   13ec2:	b180      	cbz	r0, 13ee6 <bt_hci_cmd_send_sync+0x76>
   13ec4:	4a20      	ldr	r2, [pc, #128]	; (13f48 <bt_hci_cmd_send_sync+0xd8>)
   13ec6:	4921      	ldr	r1, [pc, #132]	; (13f4c <bt_hci_cmd_send_sync+0xdc>)
   13ec8:	4821      	ldr	r0, [pc, #132]	; (13f50 <bt_hci_cmd_send_sync+0xe0>)
   13eca:	f44f 739c 	mov.w	r3, #312	; 0x138
   13ece:	f013 fe38 	bl	27b42 <printk>
   13ed2:	4820      	ldr	r0, [pc, #128]	; (13f54 <bt_hci_cmd_send_sync+0xe4>)
   13ed4:	4631      	mov	r1, r6
   13ed6:	f013 fe34 	bl	27b42 <printk>
   13eda:	4040      	eors	r0, r0
   13edc:	f380 8811 	msr	BASEPRI, r0
   13ee0:	f04f 0003 	mov.w	r0, #3
   13ee4:	df02      	svc	2
	status = cmd(buf)->status;
   13ee6:	4620      	mov	r0, r4
   13ee8:	f011 fbfa 	bl	256e0 <net_buf_id>
   13eec:	230c      	movs	r3, #12
   13eee:	4358      	muls	r0, r3
   13ef0:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
   13ef4:	b1be      	cbz	r6, 13f26 <bt_hci_cmd_send_sync+0xb6>
   13ef6:	4a18      	ldr	r2, [pc, #96]	; (13f58 <bt_hci_cmd_send_sync+0xe8>)
   13ef8:	4b18      	ldr	r3, [pc, #96]	; (13f5c <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   13efa:	4819      	ldr	r0, [pc, #100]	; (13f60 <bt_hci_cmd_send_sync+0xf0>)
   13efc:	1a9b      	subs	r3, r3, r2
   13efe:	08db      	lsrs	r3, r3, #3
   13f00:	019b      	lsls	r3, r3, #6
   13f02:	f043 0302 	orr.w	r3, r3, #2
   13f06:	4632      	mov	r2, r6
   13f08:	4639      	mov	r1, r7
   13f0a:	f014 fa7a 	bl	28402 <log_2>
		net_buf_unref(buf);
   13f0e:	4620      	mov	r0, r4
   13f10:	f011 fc9c 	bl	2584c <net_buf_unref>
			return -EIO;
   13f14:	2e09      	cmp	r6, #9
   13f16:	bf0c      	ite	eq
   13f18:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   13f1c:	f06f 0004 	mvnne.w	r0, #4
}
   13f20:	b006      	add	sp, #24
   13f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   13f26:	b115      	cbz	r5, 13f2e <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
   13f28:	602c      	str	r4, [r5, #0]
	return 0;
   13f2a:	4630      	mov	r0, r6
   13f2c:	e7f8      	b.n	13f20 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
   13f2e:	4620      	mov	r0, r4
   13f30:	f011 fc8c 	bl	2584c <net_buf_unref>
	return 0;
   13f34:	4628      	mov	r0, r5
   13f36:	e7f3      	b.n	13f20 <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
   13f38:	f06f 0068 	mvn.w	r0, #104	; 0x68
   13f3c:	e7f0      	b.n	13f20 <bt_hci_cmd_send_sync+0xb0>
   13f3e:	bf00      	nop
   13f40:	2000128c 	.word	0x2000128c
   13f44:	20000104 	.word	0x20000104
   13f48:	0002d1d3 	.word	0x0002d1d3
   13f4c:	0002d207 	.word	0x0002d207
   13f50:	0002d210 	.word	0x0002d210
   13f54:	0002d22d 	.word	0x0002d22d
   13f58:	0002b248 	.word	0x0002b248
   13f5c:	0002b328 	.word	0x0002b328
   13f60:	0002d24d 	.word	0x0002d24d

00013f64 <hci_le_read_max_data_len>:
{
   13f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   13f66:	4606      	mov	r6, r0
   13f68:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   13f6a:	aa01      	add	r2, sp, #4
   13f6c:	2100      	movs	r1, #0
   13f6e:	f242 002f 	movw	r0, #8239	; 0x202f
   13f72:	f7ff ff7d 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   13f76:	4604      	mov	r4, r0
   13f78:	b160      	cbz	r0, 13f94 <hci_le_read_max_data_len+0x30>
   13f7a:	490c      	ldr	r1, [pc, #48]	; (13fac <hci_le_read_max_data_len+0x48>)
   13f7c:	4b0c      	ldr	r3, [pc, #48]	; (13fb0 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
   13f7e:	480d      	ldr	r0, [pc, #52]	; (13fb4 <hci_le_read_max_data_len+0x50>)
   13f80:	1ac9      	subs	r1, r1, r3
   13f82:	08c9      	lsrs	r1, r1, #3
   13f84:	0189      	lsls	r1, r1, #6
   13f86:	f041 0101 	orr.w	r1, r1, #1
   13f8a:	f014 fa19 	bl	283c0 <log_0>
}
   13f8e:	4620      	mov	r0, r4
   13f90:	b002      	add	sp, #8
   13f92:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   13f94:	9801      	ldr	r0, [sp, #4]
   13f96:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   13f98:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   13f9c:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   13f9e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   13fa2:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   13fa4:	f011 fc52 	bl	2584c <net_buf_unref>
	return 0;
   13fa8:	e7f1      	b.n	13f8e <hci_le_read_max_data_len+0x2a>
   13faa:	bf00      	nop
   13fac:	0002b328 	.word	0x0002b328
   13fb0:	0002b248 	.word	0x0002b248
   13fb4:	0002d269 	.word	0x0002d269

00013fb8 <bt_send>:

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		return bt_hci_ecc_send(buf);
	}

	return bt_dev.drv->send(buf);
   13fb8:	4b02      	ldr	r3, [pc, #8]	; (13fc4 <bt_send+0xc>)
   13fba:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   13fbe:	691b      	ldr	r3, [r3, #16]
   13fc0:	4718      	bx	r3
   13fc2:	bf00      	nop
   13fc4:	20000000 	.word	0x20000000

00013fc8 <bt_hci_cmd_send>:
{
   13fc8:	b538      	push	{r3, r4, r5, lr}
   13fca:	4605      	mov	r5, r0
	if (!buf) {
   13fcc:	460c      	mov	r4, r1
   13fce:	b919      	cbnz	r1, 13fd8 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   13fd0:	f7ff ff14 	bl	13dfc <bt_hci_cmd_create>
		if (!buf) {
   13fd4:	4604      	mov	r4, r0
   13fd6:	b1f0      	cbz	r0, 14016 <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   13fd8:	f640 4335 	movw	r3, #3125	; 0xc35
   13fdc:	429d      	cmp	r5, r3
   13fde:	d114      	bne.n	1400a <bt_hci_cmd_send+0x42>
		err = bt_send(buf);
   13fe0:	4620      	mov	r0, r4
   13fe2:	f7ff ffe9 	bl	13fb8 <bt_send>
		if (err) {
   13fe6:	4605      	mov	r5, r0
   13fe8:	b168      	cbz	r0, 14006 <bt_hci_cmd_send+0x3e>
   13fea:	4b0c      	ldr	r3, [pc, #48]	; (1401c <bt_hci_cmd_send+0x54>)
   13fec:	4a0c      	ldr	r2, [pc, #48]	; (14020 <bt_hci_cmd_send+0x58>)
   13fee:	1ad2      	subs	r2, r2, r3
   13ff0:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
   13ff2:	0192      	lsls	r2, r2, #6
   13ff4:	4601      	mov	r1, r0
   13ff6:	f042 0201 	orr.w	r2, r2, #1
   13ffa:	480a      	ldr	r0, [pc, #40]	; (14024 <bt_hci_cmd_send+0x5c>)
   13ffc:	f014 f9ed 	bl	283da <log_1>
			net_buf_unref(buf);
   14000:	4620      	mov	r0, r4
   14002:	f011 fc23 	bl	2584c <net_buf_unref>
}
   14006:	4628      	mov	r0, r5
   14008:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   1400a:	4807      	ldr	r0, [pc, #28]	; (14028 <bt_hci_cmd_send+0x60>)
   1400c:	4621      	mov	r1, r4
   1400e:	f016 f910 	bl	2a232 <net_buf_put>
	return 0;
   14012:	2500      	movs	r5, #0
   14014:	e7f7      	b.n	14006 <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
   14016:	f06f 0568 	mvn.w	r5, #104	; 0x68
   1401a:	e7f4      	b.n	14006 <bt_hci_cmd_send+0x3e>
   1401c:	0002b248 	.word	0x0002b248
   14020:	0002b328 	.word	0x0002b328
   14024:	0002d289 	.word	0x0002d289
   14028:	20000104 	.word	0x20000104

0001402c <conn_auto_initiate>:
{
   1402c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1402e:	7a83      	ldrb	r3, [r0, #10]
   14030:	2b07      	cmp	r3, #7
{
   14032:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   14034:	d16e      	bne.n	14114 <conn_auto_initiate+0xe8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14036:	f3bf 8f5b 	dmb	ish
   1403a:	6843      	ldr	r3, [r0, #4]
   1403c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   14040:	049b      	lsls	r3, r3, #18
   14042:	f100 0604 	add.w	r6, r0, #4
   14046:	d41b      	bmi.n	14080 <conn_auto_initiate+0x54>
   14048:	78c3      	ldrb	r3, [r0, #3]
   1404a:	b123      	cbz	r3, 14056 <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
   1404c:	4b32      	ldr	r3, [pc, #200]	; (14118 <conn_auto_initiate+0xec>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
   1404e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   14052:	071d      	lsls	r5, r3, #28
   14054:	d514      	bpl.n	14080 <conn_auto_initiate+0x54>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   14056:	2102      	movs	r1, #2
   14058:	f242 0016 	movw	r0, #8214	; 0x2016
   1405c:	f7ff fece 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   14060:	4605      	mov	r5, r0
   14062:	b168      	cbz	r0, 14080 <conn_auto_initiate+0x54>
   14064:	2102      	movs	r1, #2
   14066:	3008      	adds	r0, #8
   14068:	f016 f922 	bl	2a2b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1406c:	8823      	ldrh	r3, [r4, #0]
   1406e:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   14070:	4629      	mov	r1, r5
   14072:	f242 0016 	movw	r0, #8214	; 0x2016
}
   14076:	b004      	add	sp, #16
   14078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   1407c:	f7ff bfa4 	b.w	13fc8 <bt_hci_cmd_send>
   14080:	f3bf 8f5b 	dmb	ish
   14084:	6863      	ldr	r3, [r4, #4]
   14086:	4d24      	ldr	r5, [pc, #144]	; (14118 <conn_auto_initiate+0xec>)
   14088:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1408c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   14090:	f3c3 3100 	ubfx	r1, r3, #12, #1
   14094:	d11c      	bne.n	140d0 <conn_auto_initiate+0xa4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   14096:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
   1409a:	07d8      	lsls	r0, r3, #31
   1409c:	d518      	bpl.n	140d0 <conn_auto_initiate+0xa4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   1409e:	2302      	movs	r3, #2
   140a0:	9100      	str	r1, [sp, #0]
   140a2:	461a      	mov	r2, r3
   140a4:	4620      	mov	r0, r4
   140a6:	f014 ff29 	bl	28efc <bt_le_set_phy>
		if (!err) {
   140aa:	4601      	mov	r1, r0
   140ac:	b930      	cbnz	r0, 140bc <conn_auto_initiate+0x90>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   140ae:	2180      	movs	r1, #128	; 0x80
   140b0:	4630      	mov	r0, r6
}
   140b2:	b004      	add	sp, #16
   140b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   140b8:	f014 beb8 	b.w	28e2c <atomic_or>
   140bc:	4a17      	ldr	r2, [pc, #92]	; (1411c <conn_auto_initiate+0xf0>)
   140be:	4b18      	ldr	r3, [pc, #96]	; (14120 <conn_auto_initiate+0xf4>)
		BT_ERR("Failed to set LE PHY (%d)", err);
   140c0:	4818      	ldr	r0, [pc, #96]	; (14124 <conn_auto_initiate+0xf8>)
   140c2:	1ad2      	subs	r2, r2, r3
   140c4:	08d2      	lsrs	r2, r2, #3
   140c6:	0192      	lsls	r2, r2, #6
   140c8:	f042 0201 	orr.w	r2, r2, #1
   140cc:	f014 f985 	bl	283da <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   140d0:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   140d4:	069a      	lsls	r2, r3, #26
   140d6:	d51d      	bpl.n	14114 <conn_auto_initiate+0xe8>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   140d8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   140dc:	689b      	ldr	r3, [r3, #8]
   140de:	079b      	lsls	r3, r3, #30
   140e0:	d518      	bpl.n	14114 <conn_auto_initiate+0xe8>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   140e2:	f10d 010e 	add.w	r1, sp, #14
   140e6:	a803      	add	r0, sp, #12
   140e8:	f7ff ff3c 	bl	13f64 <hci_le_read_max_data_len>
			if (!err) {
   140ec:	b990      	cbnz	r0, 14114 <conn_auto_initiate+0xe8>
				err = bt_le_set_data_len(conn,
   140ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   140f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   140f6:	4620      	mov	r0, r4
   140f8:	f014 fee3 	bl	28ec2 <bt_le_set_data_len>
				if (err) {
   140fc:	4601      	mov	r1, r0
   140fe:	b148      	cbz	r0, 14114 <conn_auto_initiate+0xe8>
   14100:	4a06      	ldr	r2, [pc, #24]	; (1411c <conn_auto_initiate+0xf0>)
   14102:	4b07      	ldr	r3, [pc, #28]	; (14120 <conn_auto_initiate+0xf4>)
					BT_ERR("Failed to set data len (%d)", err);
   14104:	4808      	ldr	r0, [pc, #32]	; (14128 <conn_auto_initiate+0xfc>)
   14106:	1ad2      	subs	r2, r2, r3
   14108:	08d2      	lsrs	r2, r2, #3
   1410a:	0192      	lsls	r2, r2, #6
   1410c:	f042 0201 	orr.w	r2, r2, #1
   14110:	f014 f963 	bl	283da <log_1>
}
   14114:	b004      	add	sp, #16
   14116:	bd70      	pop	{r4, r5, r6, pc}
   14118:	20000000 	.word	0x20000000
   1411c:	0002b328 	.word	0x0002b328
   14120:	0002b248 	.word	0x0002b248
   14124:	0002d2ab 	.word	0x0002d2ab
   14128:	0002d2c5 	.word	0x0002d2c5

0001412c <bt_hci_le_enh_conn_complete>:
{
   1412c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14130:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   14134:	4a7f      	ldr	r2, [pc, #508]	; (14334 <bt_hci_le_enh_conn_complete+0x208>)
	if (evt->status) {
   14136:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   14138:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   1413a:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   1413e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   14142:	b29b      	uxth	r3, r3
   14144:	4299      	cmp	r1, r3
   14146:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   1414a:	bf08      	it	eq
   1414c:	f8a2 8000 	strheq.w	r8, [r2]
{
   14150:	b085      	sub	sp, #20
   14152:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14154:	fa1f f789 	uxth.w	r7, r9
			return true;
   14158:	bf08      	it	eq
   1415a:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   1415e:	2c00      	cmp	r4, #0
   14160:	d03a      	beq.n	141d8 <bt_hci_le_enh_conn_complete+0xac>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14162:	2c3c      	cmp	r4, #60	; 0x3c
   14164:	d12a      	bne.n	141bc <bt_hci_le_enh_conn_complete+0x90>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14166:	f001 fa3b 	bl	155e0 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1416a:	f3bf 8f5b 	dmb	ish
   1416e:	3010      	adds	r0, #16
   14170:	e850 3f00 	ldrex	r3, [r0]
   14174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14178:	e840 3200 	strex	r2, r3, [r0]
   1417c:	2a00      	cmp	r2, #0
   1417e:	d1f7      	bne.n	14170 <bt_hci_le_enh_conn_complete+0x44>
   14180:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   14184:	2000      	movs	r0, #0
   14186:	f7ff fc75 	bl	13a74 <find_pending_connect.part.0>
		if (!conn) {
   1418a:	4605      	mov	r5, r0
   1418c:	b960      	cbnz	r0, 141a8 <bt_hci_le_enh_conn_complete+0x7c>
   1418e:	4b6a      	ldr	r3, [pc, #424]	; (14338 <bt_hci_le_enh_conn_complete+0x20c>)
   14190:	496a      	ldr	r1, [pc, #424]	; (1433c <bt_hci_le_enh_conn_complete+0x210>)
			BT_ERR("No pending slave connection");
   14192:	486b      	ldr	r0, [pc, #428]	; (14340 <bt_hci_le_enh_conn_complete+0x214>)
   14194:	1ac9      	subs	r1, r1, r3
   14196:	08c9      	lsrs	r1, r1, #3
   14198:	0189      	lsls	r1, r1, #6
   1419a:	f041 0101 	orr.w	r1, r1, #1
}
   1419e:	b005      	add	sp, #20
   141a0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("No pending slave connection");
   141a4:	f014 b90c 	b.w	283c0 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
   141a8:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   141aa:	2100      	movs	r1, #0
   141ac:	f001 fe12 	bl	15dd4 <bt_conn_set_state>
		bt_conn_unref(conn);
   141b0:	4628      	mov	r0, r5
}
   141b2:	b005      	add	sp, #20
   141b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
   141b8:	f015 b8eb 	b.w	29392 <bt_conn_unref>
   141bc:	4b5e      	ldr	r3, [pc, #376]	; (14338 <bt_hci_le_enh_conn_complete+0x20c>)
   141be:	4a5f      	ldr	r2, [pc, #380]	; (1433c <bt_hci_le_enh_conn_complete+0x210>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
   141c0:	4860      	ldr	r0, [pc, #384]	; (14344 <bt_hci_le_enh_conn_complete+0x218>)
   141c2:	1ad2      	subs	r2, r2, r3
   141c4:	08d2      	lsrs	r2, r2, #3
   141c6:	0192      	lsls	r2, r2, #6
   141c8:	f042 0202 	orr.w	r2, r2, #2
   141cc:	4621      	mov	r1, r4
}
   141ce:	b005      	add	sp, #20
   141d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
   141d4:	f014 b901 	b.w	283da <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   141d8:	7903      	ldrb	r3, [r0, #4]
   141da:	3b02      	subs	r3, #2
   141dc:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   141de:	f100 0604 	add.w	r6, r0, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   141e2:	d845      	bhi.n	14270 <bt_hci_le_enh_conn_complete+0x144>
	memcpy(dst, src, sizeof(*dst));
   141e4:	2207      	movs	r2, #7
   141e6:	4631      	mov	r1, r6
   141e8:	a802      	add	r0, sp, #8
   141ea:	f014 fd14 	bl	28c16 <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   141ee:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
   141f2:	2206      	movs	r2, #6
   141f4:	3b02      	subs	r3, #2
   141f6:	f105 0111 	add.w	r1, r5, #17
   141fa:	f10d 0001 	add.w	r0, sp, #1
   141fe:	f88d 3008 	strb.w	r3, [sp, #8]
   14202:	f014 fd08 	bl	28c16 <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   14206:	2301      	movs	r3, #1
   14208:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
   1420c:	78eb      	ldrb	r3, [r5, #3]
   1420e:	2b01      	cmp	r3, #1
   14210:	d116      	bne.n	14240 <bt_hci_le_enh_conn_complete+0x114>
   14212:	a802      	add	r0, sp, #8
   14214:	f7ff fc2e 	bl	13a74 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   14218:	78eb      	ldrb	r3, [r5, #3]
   1421a:	2b01      	cmp	r3, #1
   1421c:	4604      	mov	r4, r0
   1421e:	d10e      	bne.n	1423e <bt_hci_le_enh_conn_complete+0x112>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   14220:	f001 f9de 	bl	155e0 <bt_le_adv_lookup_legacy>
   14224:	f3bf 8f5b 	dmb	ish
   14228:	3010      	adds	r0, #16
   1422a:	e850 3f00 	ldrex	r3, [r0]
   1422e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   14232:	e840 3200 	strex	r2, r3, [r0]
   14236:	2a00      	cmp	r2, #0
   14238:	d1f7      	bne.n	1422a <bt_hci_le_enh_conn_complete+0xfe>
   1423a:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   1423e:	bb64      	cbnz	r4, 1429a <bt_hci_le_enh_conn_complete+0x16e>
   14240:	4a3d      	ldr	r2, [pc, #244]	; (14338 <bt_hci_le_enh_conn_complete+0x20c>)
   14242:	4c3e      	ldr	r4, [pc, #248]	; (1433c <bt_hci_le_enh_conn_complete+0x210>)
		BT_ERR("No pending conn for peer %s",
   14244:	4630      	mov	r0, r6
   14246:	1aa4      	subs	r4, r4, r2
   14248:	f7ff fa1e 	bl	13688 <bt_addr_le_str_real>
   1424c:	f7fd fee0 	bl	12010 <z_log_strdup>
   14250:	08e4      	lsrs	r4, r4, #3
   14252:	01a4      	lsls	r4, r4, #6
   14254:	f044 0401 	orr.w	r4, r4, #1
   14258:	4601      	mov	r1, r0
   1425a:	4622      	mov	r2, r4
   1425c:	483a      	ldr	r0, [pc, #232]	; (14348 <bt_hci_le_enh_conn_complete+0x21c>)
   1425e:	f014 f8bc 	bl	283da <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   14262:	211f      	movs	r1, #31
   14264:	4638      	mov	r0, r7
   14266:	f014 fdf0 	bl	28e4a <bt_hci_disconnect>
}
   1426a:	b005      	add	sp, #20
   1426c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
   14270:	78c3      	ldrb	r3, [r0, #3]
   14272:	2b01      	cmp	r3, #1
   14274:	bf04      	itt	eq
   14276:	4b35      	ldreq	r3, [pc, #212]	; (1434c <bt_hci_le_enh_conn_complete+0x220>)
   14278:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
   1427c:	4631      	mov	r1, r6
   1427e:	4620      	mov	r0, r4
   14280:	f014 fed7 	bl	29032 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
   14284:	2207      	movs	r2, #7
   14286:	4601      	mov	r1, r0
   14288:	a802      	add	r0, sp, #8
   1428a:	f014 fcc4 	bl	28c16 <memcpy>
   1428e:	2207      	movs	r2, #7
   14290:	4631      	mov	r1, r6
   14292:	4668      	mov	r0, sp
   14294:	f014 fcbf 	bl	28c16 <memcpy>
}
   14298:	e7b8      	b.n	1420c <bt_hci_le_enh_conn_complete+0xe0>
	conn->handle = handle;
   1429a:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
   1429c:	2207      	movs	r2, #7
   1429e:	f820 9b88 	strh.w	r9, [r0], #136
   142a2:	a902      	add	r1, sp, #8
   142a4:	f014 fcb7 	bl	28c16 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   142a8:	7e2a      	ldrb	r2, [r5, #24]
   142aa:	7deb      	ldrb	r3, [r5, #23]
   142ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   142b0:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   142b4:	7eaa      	ldrb	r2, [r5, #26]
   142b6:	7e6b      	ldrb	r3, [r5, #25]
   142b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   142bc:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   142c0:	7f2a      	ldrb	r2, [r5, #28]
   142c2:	7eeb      	ldrb	r3, [r5, #27]
   142c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   142c8:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->role = evt->role;
   142cc:	78eb      	ldrb	r3, [r5, #3]
   142ce:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   142d0:	2200      	movs	r2, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   142d2:	2b01      	cmp	r3, #1
	conn->err = 0U;
   142d4:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   142d6:	d117      	bne.n	14308 <bt_hci_le_enh_conn_complete+0x1dc>
   142d8:	2207      	movs	r2, #7
   142da:	4669      	mov	r1, sp
   142dc:	f104 008f 	add.w	r0, r4, #143	; 0x8f
   142e0:	f014 fc99 	bl	28c16 <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
   142e4:	f001 f97c 	bl	155e0 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
   142e8:	7a21      	ldrb	r1, [r4, #8]
   142ea:	4d18      	ldr	r5, [pc, #96]	; (1434c <bt_hci_le_enh_conn_complete+0x220>)
   142ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   142f0:	2207      	movs	r2, #7
   142f2:	4429      	add	r1, r5
   142f4:	f104 0096 	add.w	r0, r4, #150	; 0x96
   142f8:	f014 fc8d 	bl	28c16 <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
   142fc:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
   14300:	065b      	lsls	r3, r3, #25
   14302:	d501      	bpl.n	14308 <bt_hci_le_enh_conn_complete+0x1dc>
			bt_le_adv_resume();
   14304:	f001 fab0 	bl	15868 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   14308:	2107      	movs	r1, #7
   1430a:	4620      	mov	r0, r4
   1430c:	f001 fd62 	bl	15dd4 <bt_conn_set_state>
	if (is_disconnected) {
   14310:	f1b8 0f00 	cmp.w	r8, #0
   14314:	d003      	beq.n	1431e <bt_hci_le_enh_conn_complete+0x1f2>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   14316:	2101      	movs	r1, #1
   14318:	4620      	mov	r0, r4
   1431a:	f001 fd5b 	bl	15dd4 <bt_conn_set_state>
	bt_conn_connected(conn);
   1431e:	4620      	mov	r0, r4
   14320:	f014 fff3 	bl	2930a <bt_conn_connected>
	conn_auto_initiate(conn);
   14324:	4620      	mov	r0, r4
   14326:	f7ff fe81 	bl	1402c <conn_auto_initiate>
	bt_conn_unref(conn);
   1432a:	4620      	mov	r0, r4
   1432c:	f015 f831 	bl	29392 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   14330:	e79b      	b.n	1426a <bt_hci_le_enh_conn_complete+0x13e>
   14332:	bf00      	nop
   14334:	2000257c 	.word	0x2000257c
   14338:	0002b248 	.word	0x0002b248
   1433c:	0002b328 	.word	0x0002b328
   14340:	0002d2e1 	.word	0x0002d2e1
   14344:	0002d2fd 	.word	0x0002d2fd
   14348:	0002d316 	.word	0x0002d316
   1434c:	20000000 	.word	0x20000000

00014350 <le_phy_update_complete>:
{
   14350:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   14352:	6883      	ldr	r3, [r0, #8]
   14354:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   14358:	4628      	mov	r0, r5
   1435a:	f001 fd33 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   1435e:	4604      	mov	r4, r0
   14360:	b960      	cbnz	r0, 1437c <le_phy_update_complete+0x2c>
   14362:	4b14      	ldr	r3, [pc, #80]	; (143b4 <le_phy_update_complete+0x64>)
   14364:	4a14      	ldr	r2, [pc, #80]	; (143b8 <le_phy_update_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14366:	4815      	ldr	r0, [pc, #84]	; (143bc <le_phy_update_complete+0x6c>)
   14368:	1ad2      	subs	r2, r2, r3
   1436a:	08d2      	lsrs	r2, r2, #3
   1436c:	0192      	lsls	r2, r2, #6
   1436e:	4629      	mov	r1, r5
   14370:	f042 0201 	orr.w	r2, r2, #1
}
   14374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   14378:	f014 b82f 	b.w	283da <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1437c:	3004      	adds	r0, #4
   1437e:	f3bf 8f5b 	dmb	ish
   14382:	e850 3f00 	ldrex	r3, [r0]
   14386:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   1438a:	e840 2100 	strex	r1, r2, [r0]
   1438e:	2900      	cmp	r1, #0
   14390:	d1f7      	bne.n	14382 <le_phy_update_complete+0x32>
   14392:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   14396:	061b      	lsls	r3, r3, #24
   14398:	d506      	bpl.n	143a8 <le_phy_update_complete+0x58>
   1439a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1439e:	f014 fd45 	bl	28e2c <atomic_or>
		conn_auto_initiate(conn);
   143a2:	4620      	mov	r0, r4
   143a4:	f7ff fe42 	bl	1402c <conn_auto_initiate>
	bt_conn_unref(conn);
   143a8:	4620      	mov	r0, r4
}
   143aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   143ae:	f014 bff0 	b.w	29392 <bt_conn_unref>
   143b2:	bf00      	nop
   143b4:	0002b248 	.word	0x0002b248
   143b8:	0002b328 	.word	0x0002b328
   143bc:	0002d08a 	.word	0x0002d08a

000143c0 <le_remote_feat_complete>:
{
   143c0:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   143c2:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   143c4:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   143c8:	4630      	mov	r0, r6
   143ca:	f001 fcfb 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   143ce:	4604      	mov	r4, r0
   143d0:	b960      	cbnz	r0, 143ec <le_remote_feat_complete+0x2c>
   143d2:	4a10      	ldr	r2, [pc, #64]	; (14414 <le_remote_feat_complete+0x54>)
   143d4:	4b10      	ldr	r3, [pc, #64]	; (14418 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   143d6:	4811      	ldr	r0, [pc, #68]	; (1441c <le_remote_feat_complete+0x5c>)
   143d8:	1ad2      	subs	r2, r2, r3
   143da:	08d2      	lsrs	r2, r2, #3
   143dc:	0192      	lsls	r2, r2, #6
   143de:	4631      	mov	r1, r6
   143e0:	f042 0201 	orr.w	r2, r2, #1
}
   143e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   143e8:	f013 bff7 	b.w	283da <log_1>
	if (!evt->status) {
   143ec:	782b      	ldrb	r3, [r5, #0]
   143ee:	b923      	cbnz	r3, 143fa <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
   143f0:	2208      	movs	r2, #8
   143f2:	1ce9      	adds	r1, r5, #3
   143f4:	30ac      	adds	r0, #172	; 0xac
   143f6:	f014 fc0e 	bl	28c16 <memcpy>
   143fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   143fe:	1d20      	adds	r0, r4, #4
   14400:	f014 fd14 	bl	28e2c <atomic_or>
	conn_auto_initiate(conn);
   14404:	4620      	mov	r0, r4
   14406:	f7ff fe11 	bl	1402c <conn_auto_initiate>
	bt_conn_unref(conn);
   1440a:	4620      	mov	r0, r4
}
   1440c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   14410:	f014 bfbf 	b.w	29392 <bt_conn_unref>
   14414:	0002b328 	.word	0x0002b328
   14418:	0002b248 	.word	0x0002b248
   1441c:	0002d08a 	.word	0x0002d08a

00014420 <le_conn_param_neg_reply>:
{
   14420:	b570      	push	{r4, r5, r6, lr}
   14422:	4606      	mov	r6, r0
   14424:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   14426:	f242 0021 	movw	r0, #8225	; 0x2021
   1442a:	2103      	movs	r1, #3
   1442c:	f7ff fce6 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   14430:	4604      	mov	r4, r0
   14432:	b958      	cbnz	r0, 1444c <le_conn_param_neg_reply+0x2c>
   14434:	490c      	ldr	r1, [pc, #48]	; (14468 <le_conn_param_neg_reply+0x48>)
   14436:	4b0d      	ldr	r3, [pc, #52]	; (1446c <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
   14438:	480d      	ldr	r0, [pc, #52]	; (14470 <le_conn_param_neg_reply+0x50>)
   1443a:	1ac9      	subs	r1, r1, r3
   1443c:	08c9      	lsrs	r1, r1, #3
   1443e:	0189      	lsls	r1, r1, #6
}
   14440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   14444:	f041 0101 	orr.w	r1, r1, #1
   14448:	f013 bfba 	b.w	283c0 <log_0>
   1444c:	2103      	movs	r1, #3
   1444e:	3008      	adds	r0, #8
   14450:	f015 ff2e 	bl	2a2b0 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   14454:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   14456:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14458:	4621      	mov	r1, r4
   1445a:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1445e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   14462:	f7ff bdb1 	b.w	13fc8 <bt_hci_cmd_send>
   14466:	bf00      	nop
   14468:	0002b328 	.word	0x0002b328
   1446c:	0002b248 	.word	0x0002b248
   14470:	0002d332 	.word	0x0002d332

00014474 <le_conn_param_req>:
{
   14474:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   14476:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   14478:	78d9      	ldrb	r1, [r3, #3]
   1447a:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1447c:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1447e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14482:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   14486:	7959      	ldrb	r1, [r3, #5]
   14488:	791a      	ldrb	r2, [r3, #4]
   1448a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1448e:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   14492:	799a      	ldrb	r2, [r3, #6]
   14494:	79d9      	ldrb	r1, [r3, #7]
   14496:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1449a:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1449e:	7a1a      	ldrb	r2, [r3, #8]
   144a0:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   144a2:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   144a4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   144a8:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   144aa:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   144ae:	f001 fc89 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   144b2:	4606      	mov	r6, r0
   144b4:	b980      	cbnz	r0, 144d8 <le_conn_param_req+0x64>
   144b6:	4b20      	ldr	r3, [pc, #128]	; (14538 <le_conn_param_req+0xc4>)
   144b8:	4a20      	ldr	r2, [pc, #128]	; (1453c <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
   144ba:	4821      	ldr	r0, [pc, #132]	; (14540 <le_conn_param_req+0xcc>)
   144bc:	1ad2      	subs	r2, r2, r3
   144be:	08d2      	lsrs	r2, r2, #3
   144c0:	0192      	lsls	r2, r2, #6
   144c2:	4621      	mov	r1, r4
   144c4:	f042 0201 	orr.w	r2, r2, #1
   144c8:	f013 ff87 	bl	283da <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   144cc:	2102      	movs	r1, #2
   144ce:	4620      	mov	r0, r4
   144d0:	f7ff ffa6 	bl	14420 <le_conn_param_neg_reply>
}
   144d4:	b003      	add	sp, #12
   144d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   144d8:	4669      	mov	r1, sp
   144da:	f001 fafb 	bl	15ad4 <le_param_req>
   144de:	b938      	cbnz	r0, 144f0 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   144e0:	211e      	movs	r1, #30
   144e2:	4620      	mov	r0, r4
   144e4:	f7ff ff9c 	bl	14420 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   144e8:	4630      	mov	r0, r6
   144ea:	f014 ff52 	bl	29392 <bt_conn_unref>
   144ee:	e7f1      	b.n	144d4 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   144f0:	210e      	movs	r1, #14
   144f2:	f242 0020 	movw	r0, #8224	; 0x2020
   144f6:	f7ff fc81 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   144fa:	4605      	mov	r5, r0
   144fc:	2800      	cmp	r0, #0
   144fe:	d0f3      	beq.n	144e8 <le_conn_param_req+0x74>
   14500:	210e      	movs	r1, #14
   14502:	3008      	adds	r0, #8
   14504:	f015 fed4 	bl	2a2b0 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   14508:	220e      	movs	r2, #14
   1450a:	4604      	mov	r4, r0
   1450c:	2100      	movs	r1, #0
   1450e:	f014 fbad 	bl	28c6c <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   14512:	f8bd 3000 	ldrh.w	r3, [sp]
   14516:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   14518:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1451c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1451e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   14522:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   14524:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   14528:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1452a:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1452c:	4629      	mov	r1, r5
   1452e:	f242 0020 	movw	r0, #8224	; 0x2020
   14532:	f7ff fd49 	bl	13fc8 <bt_hci_cmd_send>
   14536:	e7d7      	b.n	144e8 <le_conn_param_req+0x74>
   14538:	0002b248 	.word	0x0002b248
   1453c:	0002b328 	.word	0x0002b328
   14540:	0002d08a 	.word	0x0002d08a

00014544 <hci_tx_thread>:
{
   14544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14548:	4d51      	ldr	r5, [pc, #324]	; (14690 <hci_tx_thread+0x14c>)
   1454a:	4b52      	ldr	r3, [pc, #328]	; (14694 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1454c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 14698 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
   14550:	f8df a148 	ldr.w	sl, [pc, #328]	; 1469c <hci_tx_thread+0x158>
   14554:	1aed      	subs	r5, r5, r3
   14556:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
   14558:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1455c:	4850      	ldr	r0, [pc, #320]	; (146a0 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1455e:	f36f 3352 	bfc	r3, #13, #6
   14562:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   14566:	f001 fbc7 	bl	15cf8 <bt_conn_prepare_events>
   1456a:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
   1456c:	484a      	ldr	r0, [pc, #296]	; (14698 <hci_tx_thread+0x154>)
   1456e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   14572:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14576:	4639      	mov	r1, r7
   14578:	f013 f9de 	bl	27938 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1457c:	b160      	cbz	r0, 14598 <hci_tx_thread+0x54>
   1457e:	4949      	ldr	r1, [pc, #292]	; (146a4 <hci_tx_thread+0x160>)
   14580:	4849      	ldr	r0, [pc, #292]	; (146a8 <hci_tx_thread+0x164>)
   14582:	f640 1374 	movw	r3, #2420	; 0x974
   14586:	4652      	mov	r2, sl
   14588:	f013 fadb 	bl	27b42 <printk>
   1458c:	4040      	eors	r0, r0
   1458e:	f380 8811 	msr	BASEPRI, r0
   14592:	f04f 0003 	mov.w	r0, #3
   14596:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   14598:	4e44      	ldr	r6, [pc, #272]	; (146ac <hci_tx_thread+0x168>)
{
   1459a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 14698 <hci_tx_thread+0x154>
   1459e:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
   145a2:	b917      	cbnz	r7, 145aa <hci_tx_thread+0x66>
	z_impl_k_yield();
   145a4:	f012 feea 	bl	2737c <z_impl_k_yield>
	while (1) {
   145a8:	e7d6      	b.n	14558 <hci_tx_thread+0x14>
		switch (ev->state) {
   145aa:	f8d8 100c 	ldr.w	r1, [r8, #12]
   145ae:	f3c1 3145 	ubfx	r1, r1, #13, #6
   145b2:	2901      	cmp	r1, #1
   145b4:	d959      	bls.n	1466a <hci_tx_thread+0x126>
   145b6:	2904      	cmp	r1, #4
   145b8:	d163      	bne.n	14682 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   145ba:	f898 300c 	ldrb.w	r3, [r8, #12]
   145be:	2b00      	cmp	r3, #0
   145c0:	d157      	bne.n	14672 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   145c2:	483b      	ldr	r0, [pc, #236]	; (146b0 <hci_tx_thread+0x16c>)
   145c4:	2200      	movs	r2, #0
   145c6:	2300      	movs	r3, #0
   145c8:	f015 fe15 	bl	2a1f6 <net_buf_get>
	BT_ASSERT(buf);
   145cc:	4604      	mov	r4, r0
   145ce:	b960      	cbnz	r0, 145ea <hci_tx_thread+0xa6>
   145d0:	4938      	ldr	r1, [pc, #224]	; (146b4 <hci_tx_thread+0x170>)
   145d2:	4835      	ldr	r0, [pc, #212]	; (146a8 <hci_tx_thread+0x164>)
   145d4:	f640 1311 	movw	r3, #2321	; 0x911
   145d8:	4652      	mov	r2, sl
   145da:	f013 fab2 	bl	27b42 <printk>
   145de:	4040      	eors	r0, r0
   145e0:	f380 8811 	msr	BASEPRI, r0
   145e4:	f04f 0003 	mov.w	r0, #3
   145e8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   145ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   145ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   145f2:	4658      	mov	r0, fp
   145f4:	f012 fad4 	bl	26ba0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   145f8:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
   145fc:	b163      	cbz	r3, 14618 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
   145fe:	01a9      	lsls	r1, r5, #6
   14600:	482d      	ldr	r0, [pc, #180]	; (146b8 <hci_tx_thread+0x174>)
   14602:	f041 0101 	orr.w	r1, r1, #1
   14606:	f013 fedb 	bl	283c0 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   1460a:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
   1460e:	f011 f91d 	bl	2584c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   14612:	2300      	movs	r3, #0
   14614:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
   14618:	4620      	mov	r0, r4
   1461a:	f015 fe17 	bl	2a24c <net_buf_ref>
   1461e:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
	err = bt_send(buf);
   14622:	4620      	mov	r0, r4
   14624:	f7ff fcc8 	bl	13fb8 <bt_send>
	if (err) {
   14628:	4601      	mov	r1, r0
   1462a:	b1f0      	cbz	r0, 1466a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
   1462c:	01aa      	lsls	r2, r5, #6
   1462e:	4823      	ldr	r0, [pc, #140]	; (146bc <hci_tx_thread+0x178>)
   14630:	f042 0201 	orr.w	r2, r2, #1
   14634:	f013 fed1 	bl	283da <log_1>
	z_impl_k_sem_give(sem);
   14638:	4821      	ldr	r0, [pc, #132]	; (146c0 <hci_tx_thread+0x17c>)
   1463a:	f012 fa8b 	bl	26b54 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1463e:	4620      	mov	r0, r4
   14640:	f011 f84e 	bl	256e0 <net_buf_id>
   14644:	4b1f      	ldr	r3, [pc, #124]	; (146c4 <hci_tx_thread+0x180>)
   14646:	220c      	movs	r2, #12
   14648:	fb02 3000 	mla	r0, r2, r0, r3
   1464c:	211f      	movs	r1, #31
   1464e:	8840      	ldrh	r0, [r0, #2]
   14650:	4622      	mov	r2, r4
   14652:	f7ff fa81 	bl	13b58 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   14656:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
   1465a:	f011 f8f7 	bl	2584c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1465e:	2300      	movs	r3, #0
		net_buf_unref(buf);
   14660:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   14662:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
   14666:	f011 f8f1 	bl	2584c <net_buf_unref>
	for (; count; ev++, count--) {
   1466a:	f108 0814 	add.w	r8, r8, #20
   1466e:	3f01      	subs	r7, #1
   14670:	e797      	b.n	145a2 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   14672:	2b01      	cmp	r3, #1
   14674:	d1f9      	bne.n	1466a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
   14676:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
   1467a:	3838      	subs	r0, #56	; 0x38
   1467c:	f001 fde0 	bl	16240 <bt_conn_process_tx>
   14680:	e7f3      	b.n	1466a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   14682:	01aa      	lsls	r2, r5, #6
   14684:	4810      	ldr	r0, [pc, #64]	; (146c8 <hci_tx_thread+0x184>)
   14686:	f042 0202 	orr.w	r2, r2, #2
   1468a:	f013 fea6 	bl	283da <log_1>
   1468e:	e7ec      	b.n	1466a <hci_tx_thread+0x126>
   14690:	0002b328 	.word	0x0002b328
   14694:	0002b248 	.word	0x0002b248
   14698:	20000180 	.word	0x20000180
   1469c:	0002d1d3 	.word	0x0002d1d3
   146a0:	20000194 	.word	0x20000194
   146a4:	0002d207 	.word	0x0002d207
   146a8:	0002d210 	.word	0x0002d210
   146ac:	20000000 	.word	0x20000000
   146b0:	20000104 	.word	0x20000104
   146b4:	0002cf45 	.word	0x0002cf45
   146b8:	0002d34c 	.word	0x0002d34c
   146bc:	0002d289 	.word	0x0002d289
   146c0:	200000e8 	.word	0x200000e8
   146c4:	2000128c 	.word	0x2000128c
   146c8:	0002d367 	.word	0x0002d367

000146cc <hci_event_prio>:

#endif /* CONFIG_BT_CONN */
};

void hci_event_prio(struct net_buf *buf)
{
   146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146d0:	4604      	mov	r4, r0
	struct net_buf_simple_state state;
	struct bt_hci_evt_hdr *hdr;
	uint8_t evt_flags;

	net_buf_simple_save(&buf->b, &state);
   146d2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   146d6:	4630      	mov	r0, r6
   146d8:	f015 fe21 	bl	2a31e <net_buf_simple_headroom>
	state->len = buf->len;
   146dc:	f8b4 800c 	ldrh.w	r8, [r4, #12]

	BT_ASSERT(buf->len >= sizeof(*hdr));
   146e0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   146e4:	4605      	mov	r5, r0
   146e6:	d80c      	bhi.n	14702 <hci_event_prio+0x36>
   146e8:	4a1c      	ldr	r2, [pc, #112]	; (1475c <hci_event_prio+0x90>)
   146ea:	491d      	ldr	r1, [pc, #116]	; (14760 <hci_event_prio+0x94>)
   146ec:	481d      	ldr	r0, [pc, #116]	; (14764 <hci_event_prio+0x98>)
   146ee:	f640 43e1 	movw	r3, #3297	; 0xce1
   146f2:	f013 fa26 	bl	27b42 <printk>
   146f6:	4040      	eors	r0, r0
   146f8:	f380 8811 	msr	BASEPRI, r0
   146fc:	f04f 0003 	mov.w	r0, #3
   14700:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   14702:	4630      	mov	r0, r6
   14704:	2102      	movs	r1, #2
   14706:	f015 fdfa 	bl	2a2fe <net_buf_simple_pull_mem>
   1470a:	4607      	mov	r7, r0

	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1470c:	7800      	ldrb	r0, [r0, #0]
   1470e:	f014 fb7b 	bl	28e08 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14712:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   14714:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   14716:	d40c      	bmi.n	14732 <hci_event_prio+0x66>
   14718:	4a10      	ldr	r2, [pc, #64]	; (1475c <hci_event_prio+0x90>)
   1471a:	4913      	ldr	r1, [pc, #76]	; (14768 <hci_event_prio+0x9c>)
   1471c:	4811      	ldr	r0, [pc, #68]	; (14764 <hci_event_prio+0x98>)
   1471e:	f640 43e5 	movw	r3, #3301	; 0xce5
   14722:	f013 fa0e 	bl	27b42 <printk>
   14726:	4040      	eors	r0, r0
   14728:	f380 8811 	msr	BASEPRI, r0
   1472c:	f04f 0003 	mov.w	r0, #3
   14730:	df02      	svc	2

	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   14732:	2305      	movs	r3, #5
   14734:	4a0d      	ldr	r2, [pc, #52]	; (1476c <hci_event_prio+0xa0>)
   14736:	7838      	ldrb	r0, [r7, #0]
   14738:	4621      	mov	r1, r4
   1473a:	f7ff f9bb 	bl	13ab4 <handle_event>

	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   1473e:	07b3      	lsls	r3, r6, #30
   14740:	d507      	bpl.n	14752 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   14742:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   14744:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   14748:	fa10 f585 	uxtah	r5, r0, r5
   1474c:	60a5      	str	r5, [r4, #8]
		net_buf_simple_restore(&buf->b, &state);
	} else {
		net_buf_unref(buf);
	}
}
   1474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   14752:	4620      	mov	r0, r4
}
   14754:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   14758:	f011 b878 	b.w	2584c <net_buf_unref>
   1475c:	0002d1d3 	.word	0x0002d1d3
   14760:	0002d388 	.word	0x0002d388
   14764:	0002d210 	.word	0x0002d210
   14768:	0002d3a1 	.word	0x0002d3a1
   1476c:	0002b638 	.word	0x0002b638

00014770 <bt_recv>:

int bt_recv(struct net_buf *buf)
{
   14770:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   14772:	7d01      	ldrb	r1, [r0, #20]
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_DBG("buf %p len %u", buf, buf->len);

	switch (bt_buf_get_type(buf)) {
   14774:	2901      	cmp	r1, #1
{
   14776:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
   14778:	d04b      	beq.n	14812 <bt_recv+0xa2>
   1477a:	2903      	cmp	r1, #3
   1477c:	d178      	bne.n	14870 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   1477e:	8983      	ldrh	r3, [r0, #12]
   14780:	2b03      	cmp	r3, #3
   14782:	d80c      	bhi.n	1479e <bt_recv+0x2e>
   14784:	4a42      	ldr	r2, [pc, #264]	; (14890 <bt_recv+0x120>)
   14786:	4943      	ldr	r1, [pc, #268]	; (14894 <bt_recv+0x124>)
   14788:	4843      	ldr	r0, [pc, #268]	; (14898 <bt_recv+0x128>)
   1478a:	f44f 73bf 	mov.w	r3, #382	; 0x17e
   1478e:	f013 f9d8 	bl	27b42 <printk>
   14792:	4040      	eors	r0, r0
   14794:	f380 8811 	msr	BASEPRI, r0
   14798:	f04f 0003 	mov.w	r0, #3
   1479c:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   1479e:	2104      	movs	r1, #4
   147a0:	f104 0008 	add.w	r0, r4, #8
   147a4:	f015 fdab 	bl	2a2fe <net_buf_simple_pull_mem>
	if (buf->len != len) {
   147a8:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   147aa:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   147ac:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   147ae:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   147b0:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
   147b4:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   147b6:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   147b8:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   147ba:	d00d      	beq.n	147d8 <bt_recv+0x68>
   147bc:	4837      	ldr	r0, [pc, #220]	; (1489c <bt_recv+0x12c>)
   147be:	4b38      	ldr	r3, [pc, #224]	; (148a0 <bt_recv+0x130>)
   147c0:	1a1b      	subs	r3, r3, r0
   147c2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   147c4:	019b      	lsls	r3, r3, #6
   147c6:	4837      	ldr	r0, [pc, #220]	; (148a4 <bt_recv+0x134>)
   147c8:	f043 0301 	orr.w	r3, r3, #1
   147cc:	f013 fe19 	bl	28402 <log_2>
	net_buf_unref(buf);
   147d0:	4620      	mov	r0, r4
   147d2:	f011 f83b 	bl	2584c <net_buf_unref>
   147d6:	e01a      	b.n	1480e <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   147d8:	f001 faf4 	bl	15dc4 <bt_conn_lookup_handle>
	if (!conn) {
   147dc:	4605      	mov	r5, r0
   147de:	b958      	cbnz	r0, 147f8 <bt_recv+0x88>
   147e0:	4b2e      	ldr	r3, [pc, #184]	; (1489c <bt_recv+0x12c>)
   147e2:	4a2f      	ldr	r2, [pc, #188]	; (148a0 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   147e4:	8ae1      	ldrh	r1, [r4, #22]
   147e6:	4830      	ldr	r0, [pc, #192]	; (148a8 <bt_recv+0x138>)
   147e8:	1ad2      	subs	r2, r2, r3
   147ea:	08d2      	lsrs	r2, r2, #3
   147ec:	0192      	lsls	r2, r2, #6
   147ee:	f042 0201 	orr.w	r2, r2, #1
   147f2:	f013 fdf2 	bl	283da <log_1>
		net_buf_unref(buf);
   147f6:	e7eb      	b.n	147d0 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
   147f8:	f001 fd88 	bl	1630c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   147fc:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
   147fe:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   14800:	4621      	mov	r1, r4
   14802:	4628      	mov	r0, r5
   14804:	f001 f98e 	bl	15b24 <bt_conn_recv>
	bt_conn_unref(conn);
   14808:	4628      	mov	r0, r5
   1480a:	f014 fdc2 	bl	29392 <bt_conn_unref>

		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
			net_buf_put(&bt_dev.rx_queue, buf);
		}
#endif
		return 0;
   1480e:	2000      	movs	r0, #0
	default:
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
		net_buf_unref(buf);
		return -EINVAL;
	}
}
   14810:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
   14812:	8983      	ldrh	r3, [r0, #12]
   14814:	2b01      	cmp	r3, #1
   14816:	d80c      	bhi.n	14832 <bt_recv+0xc2>
   14818:	4a1d      	ldr	r2, [pc, #116]	; (14890 <bt_recv+0x120>)
   1481a:	491e      	ldr	r1, [pc, #120]	; (14894 <bt_recv+0x124>)
   1481c:	481e      	ldr	r0, [pc, #120]	; (14898 <bt_recv+0x128>)
   1481e:	f640 03fe 	movw	r3, #2302	; 0x8fe
   14822:	f013 f98e 	bl	27b42 <printk>
   14826:	4040      	eors	r0, r0
   14828:	f380 8811 	msr	BASEPRI, r0
   1482c:	f04f 0003 	mov.w	r0, #3
   14830:	df02      	svc	2
   14832:	2102      	movs	r1, #2
   14834:	f104 0008 	add.w	r0, r4, #8
   14838:	f015 fd61 	bl	2a2fe <net_buf_simple_pull_mem>
   1483c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   1483e:	7800      	ldrb	r0, [r0, #0]
   14840:	f014 fae2 	bl	28e08 <bt_hci_evt_get_flags>
   14844:	0783      	lsls	r3, r0, #30
   14846:	d40c      	bmi.n	14862 <bt_recv+0xf2>
   14848:	4a11      	ldr	r2, [pc, #68]	; (14890 <bt_recv+0x120>)
   1484a:	4918      	ldr	r1, [pc, #96]	; (148ac <bt_recv+0x13c>)
   1484c:	4812      	ldr	r0, [pc, #72]	; (14898 <bt_recv+0x128>)
   1484e:	f640 1302 	movw	r3, #2306	; 0x902
   14852:	f013 f976 	bl	27b42 <printk>
   14856:	4040      	eors	r0, r0
   14858:	f380 8811 	msr	BASEPRI, r0
   1485c:	f04f 0003 	mov.w	r0, #3
   14860:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   14862:	4a13      	ldr	r2, [pc, #76]	; (148b0 <bt_recv+0x140>)
   14864:	7828      	ldrb	r0, [r5, #0]
   14866:	2304      	movs	r3, #4
   14868:	4621      	mov	r1, r4
   1486a:	f7ff f923 	bl	13ab4 <handle_event>
   1486e:	e7af      	b.n	147d0 <bt_recv+0x60>
   14870:	4b0a      	ldr	r3, [pc, #40]	; (1489c <bt_recv+0x12c>)
   14872:	4a0b      	ldr	r2, [pc, #44]	; (148a0 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   14874:	480f      	ldr	r0, [pc, #60]	; (148b4 <bt_recv+0x144>)
   14876:	1ad2      	subs	r2, r2, r3
   14878:	08d2      	lsrs	r2, r2, #3
   1487a:	0192      	lsls	r2, r2, #6
   1487c:	f042 0201 	orr.w	r2, r2, #1
   14880:	f013 fdab 	bl	283da <log_1>
		net_buf_unref(buf);
   14884:	4620      	mov	r0, r4
   14886:	f010 ffe1 	bl	2584c <net_buf_unref>
		return -EINVAL;
   1488a:	f06f 0015 	mvn.w	r0, #21
   1488e:	e7bf      	b.n	14810 <bt_recv+0xa0>
   14890:	0002d1d3 	.word	0x0002d1d3
   14894:	0002d388 	.word	0x0002d388
   14898:	0002d210 	.word	0x0002d210
   1489c:	0002b248 	.word	0x0002b248
   148a0:	0002b328 	.word	0x0002b328
   148a4:	0002d3ba 	.word	0x0002d3ba
   148a8:	0002d3de 	.word	0x0002d3de
   148ac:	0002d400 	.word	0x0002d400
   148b0:	0002b608 	.word	0x0002b608
   148b4:	0002d42e 	.word	0x0002d42e

000148b8 <bt_recv_prio>:

#if defined(CONFIG_BT_RECV_IS_RX_THREAD)
int bt_recv_prio(struct net_buf *buf)
{
   148b8:	b510      	push	{r4, lr}
	bt_monitor_send(bt_monitor_opcode(buf), buf->data, buf->len);

	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   148ba:	7d03      	ldrb	r3, [r0, #20]
   148bc:	2b01      	cmp	r3, #1
{
   148be:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
   148c0:	d00c      	beq.n	148dc <bt_recv_prio+0x24>
   148c2:	4a09      	ldr	r2, [pc, #36]	; (148e8 <bt_recv_prio+0x30>)
   148c4:	4909      	ldr	r1, [pc, #36]	; (148ec <bt_recv_prio+0x34>)
   148c6:	480a      	ldr	r0, [pc, #40]	; (148f0 <bt_recv_prio+0x38>)
   148c8:	f640 5328 	movw	r3, #3368	; 0xd28
   148cc:	f013 f939 	bl	27b42 <printk>
   148d0:	4040      	eors	r0, r0
   148d2:	f380 8811 	msr	BASEPRI, r0
   148d6:	f04f 0003 	mov.w	r0, #3
   148da:	df02      	svc	2

	hci_event_prio(buf);
   148dc:	4620      	mov	r0, r4
   148de:	f7ff fef5 	bl	146cc <hci_event_prio>

	return 0;
}
   148e2:	2000      	movs	r0, #0
   148e4:	bd10      	pop	{r4, pc}
   148e6:	bf00      	nop
   148e8:	0002d1d3 	.word	0x0002d1d3
   148ec:	0002d442 	.word	0x0002d442
   148f0:	0002d210 	.word	0x0002d210

000148f4 <bt_hci_driver_register>:
#endif /* defined(CONFIG_BT_RECV_IS_RX_THREAD) */

int bt_hci_driver_register(const struct bt_hci_driver *drv)
{
	if (bt_dev.drv) {
   148f4:	4a08      	ldr	r2, [pc, #32]	; (14918 <bt_hci_driver_register+0x24>)
{
   148f6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   148f8:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
   148fc:	b930      	cbnz	r0, 1490c <bt_hci_driver_register+0x18>
		return -EALREADY;
	}

	if (!drv->open || !drv->send) {
   148fe:	68d9      	ldr	r1, [r3, #12]
   14900:	b139      	cbz	r1, 14912 <bt_hci_driver_register+0x1e>
   14902:	6919      	ldr	r1, [r3, #16]
   14904:	b129      	cbz	r1, 14912 <bt_hci_driver_register+0x1e>
		return -EINVAL;
	}

	bt_dev.drv = drv;
   14906:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	BT_DBG("Registered %s", drv->name ? drv->name : "");

	bt_monitor_new_index(BT_MONITOR_TYPE_PRIMARY, drv->bus,
			     BT_ADDR_ANY, drv->name ? drv->name : "bt0");

	return 0;
   1490a:	4770      	bx	lr
		return -EALREADY;
   1490c:	f06f 0077 	mvn.w	r0, #119	; 0x77
   14910:	4770      	bx	lr
		return -EINVAL;
   14912:	f06f 0015 	mvn.w	r0, #21
}
   14916:	4770      	bx	lr
   14918:	20000000 	.word	0x20000000

0001491c <bt_finalize_init>:

void bt_finalize_init(void)
{
   1491c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14920:	4d2b      	ldr	r5, [pc, #172]	; (149d0 <bt_finalize_init+0xb4>)
   14922:	4c2c      	ldr	r4, [pc, #176]	; (149d4 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   14924:	4e2c      	ldr	r6, [pc, #176]	; (149d8 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
   14926:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 149dc <bt_finalize_init+0xc0>
{
   1492a:	b087      	sub	sp, #28
   1492c:	2102      	movs	r1, #2
   1492e:	f105 0098 	add.w	r0, r5, #152	; 0x98
   14932:	f014 fa7b 	bl	28e2c <atomic_or>
   14936:	4b2a      	ldr	r3, [pc, #168]	; (149e0 <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
   14938:	492a      	ldr	r1, [pc, #168]	; (149e4 <bt_finalize_init+0xc8>)
   1493a:	1ae4      	subs	r4, r4, r3
   1493c:	79eb      	ldrb	r3, [r5, #7]
   1493e:	4628      	mov	r0, r5
   14940:	2b01      	cmp	r3, #1
   14942:	bf88      	it	hi
   14944:	460e      	movhi	r6, r1
   14946:	f7fe fe9f 	bl	13688 <bt_addr_le_str_real>
   1494a:	f7fd fb61 	bl	12010 <z_log_strdup>
   1494e:	08e4      	lsrs	r4, r4, #3
   14950:	01a4      	lsls	r4, r4, #6
   14952:	f044 0803 	orr.w	r8, r4, #3
   14956:	4602      	mov	r2, r0
   14958:	4631      	mov	r1, r6
   1495a:	4823      	ldr	r0, [pc, #140]	; (149e8 <bt_finalize_init+0xcc>)
   1495c:	4643      	mov	r3, r8
   1495e:	f013 fd50 	bl	28402 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   14962:	462f      	mov	r7, r5
   14964:	2601      	movs	r6, #1
   14966:	79eb      	ldrb	r3, [r5, #7]
   14968:	429e      	cmp	r6, r3
   1496a:	f107 0707 	add.w	r7, r7, #7
   1496e:	db22      	blt.n	149b6 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
   14970:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
   14974:	4630      	mov	r0, r6
   14976:	f7fe ff5b 	bl	13830 <ver_str>
   1497a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   1497c:	9304      	str	r3, [sp, #16]
   1497e:	f044 0403 	orr.w	r4, r4, #3
   14982:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
   14984:	9305      	str	r3, [sp, #20]
   14986:	e9cd 0602 	strd	r0, r6, [sp, #8]
   1498a:	4623      	mov	r3, r4
   1498c:	a902      	add	r1, sp, #8
   1498e:	2204      	movs	r2, #4
   14990:	4816      	ldr	r0, [pc, #88]	; (149ec <bt_finalize_init+0xd0>)
   14992:	f013 fd6b 	bl	2846c <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
   14996:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
   1499a:	4630      	mov	r0, r6
   1499c:	f7fe ff48 	bl	13830 <ver_str>
   149a0:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
   149a2:	f8ad 4000 	strh.w	r4, [sp]
   149a6:	4601      	mov	r1, r0
   149a8:	4632      	mov	r2, r6
   149aa:	4811      	ldr	r0, [pc, #68]	; (149f0 <bt_finalize_init+0xd4>)
   149ac:	f013 fd42 	bl	28434 <log_3>
	if (IS_ENABLED(CONFIG_BT_OBSERVER)) {
		bt_le_scan_update(false);
	}

	bt_dev_show_info();
}
   149b0:	b007      	add	sp, #28
   149b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
   149b6:	4638      	mov	r0, r7
   149b8:	f7fe fe66 	bl	13688 <bt_addr_le_str_real>
   149bc:	f7fd fb28 	bl	12010 <z_log_strdup>
   149c0:	4631      	mov	r1, r6
   149c2:	4602      	mov	r2, r0
   149c4:	4643      	mov	r3, r8
   149c6:	4648      	mov	r0, r9
   149c8:	f013 fd1b 	bl	28402 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
   149cc:	3601      	adds	r6, #1
   149ce:	e7ca      	b.n	14966 <bt_finalize_init+0x4a>
   149d0:	20000000 	.word	0x20000000
   149d4:	0002b328 	.word	0x0002b328
   149d8:	0002c87f 	.word	0x0002c87f
   149dc:	0002d478 	.word	0x0002d478
   149e0:	0002b248 	.word	0x0002b248
   149e4:	0002d465 	.word	0x0002d465
   149e8:	0002d469 	.word	0x0002d469
   149ec:	0002d489 	.word	0x0002d489
   149f0:	0002d4c7 	.word	0x0002d4c7

000149f4 <bt_init>:

static int bt_init(void)
{
   149f4:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   149f6:	4d42      	ldr	r5, [pc, #264]	; (14b00 <bt_init+0x10c>)
   149f8:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   149fc:	6899      	ldr	r1, [r3, #8]
   149fe:	f011 0101 	ands.w	r1, r1, #1
{
   14a02:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   14a04:	d121      	bne.n	14a4a <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   14a06:	aa03      	add	r2, sp, #12
   14a08:	f640 4003 	movw	r0, #3075	; 0xc03
   14a0c:	f7ff fa30 	bl	13e70 <bt_hci_cmd_send_sync>
		if (err) {
   14a10:	4604      	mov	r4, r0
   14a12:	2800      	cmp	r0, #0
   14a14:	d170      	bne.n	14af8 <bt_init+0x104>
	uint8_t status = buf->data[0];
   14a16:	9b03      	ldr	r3, [sp, #12]
   14a18:	689b      	ldr	r3, [r3, #8]
	if (status) {
   14a1a:	781b      	ldrb	r3, [r3, #0]
   14a1c:	b993      	cbnz	r3, 14a44 <bt_init+0x50>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   14a1e:	f3bf 8f5b 	dmb	ish
   14a22:	462b      	mov	r3, r5
   14a24:	f853 2f98 	ldr.w	r2, [r3, #152]!
   14a28:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   14a2c:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   14a30:	f3bf 8f5b 	dmb	ish
   14a34:	e853 1f00 	ldrex	r1, [r3]
   14a38:	e843 2000 	strex	r0, r2, [r3]
   14a3c:	2800      	cmp	r0, #0
   14a3e:	d1f9      	bne.n	14a34 <bt_init+0x40>
   14a40:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   14a44:	9803      	ldr	r0, [sp, #12]
   14a46:	f010 ff01 	bl	2584c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   14a4a:	aa03      	add	r2, sp, #12
   14a4c:	2100      	movs	r1, #0
   14a4e:	f241 0003 	movw	r0, #4099	; 0x1003
   14a52:	f7ff fa0d 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14a56:	4604      	mov	r4, r0
   14a58:	2800      	cmp	r0, #0
   14a5a:	d14d      	bne.n	14af8 <bt_init+0x104>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   14a5c:	9b03      	ldr	r3, [sp, #12]
   14a5e:	4829      	ldr	r0, [pc, #164]	; (14b04 <bt_init+0x110>)
   14a60:	6899      	ldr	r1, [r3, #8]
   14a62:	2208      	movs	r2, #8
   14a64:	3101      	adds	r1, #1
   14a66:	f014 f8d6 	bl	28c16 <memcpy>
	net_buf_unref(rsp);
   14a6a:	9803      	ldr	r0, [sp, #12]
   14a6c:	f010 feee 	bl	2584c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   14a70:	4621      	mov	r1, r4
   14a72:	aa03      	add	r2, sp, #12
   14a74:	f241 0001 	movw	r0, #4097	; 0x1001
   14a78:	f7ff f9fa 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14a7c:	4604      	mov	r4, r0
   14a7e:	2800      	cmp	r0, #0
   14a80:	d13a      	bne.n	14af8 <bt_init+0x104>
	read_local_ver_complete(rsp);
   14a82:	9803      	ldr	r0, [sp, #12]
   14a84:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   14a86:	785a      	ldrb	r2, [r3, #1]
   14a88:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   14a8c:	78d9      	ldrb	r1, [r3, #3]
   14a8e:	789a      	ldrb	r2, [r3, #2]
   14a90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14a94:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
   14a96:	791a      	ldrb	r2, [r3, #4]
   14a98:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   14a9c:	7a19      	ldrb	r1, [r3, #8]
   14a9e:	79da      	ldrb	r2, [r3, #7]
   14aa0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14aa4:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   14aa6:	795a      	ldrb	r2, [r3, #5]
   14aa8:	799b      	ldrb	r3, [r3, #6]
   14aaa:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   14aae:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
   14ab0:	f010 fecc 	bl	2584c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   14ab4:	4621      	mov	r1, r4
   14ab6:	aa03      	add	r2, sp, #12
   14ab8:	f241 0002 	movw	r0, #4098	; 0x1002
   14abc:	f7ff f9d8 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14ac0:	4604      	mov	r4, r0
   14ac2:	b9c8      	cbnz	r0, 14af8 <bt_init+0x104>
	memcpy(bt_dev.supported_commands, rp->commands,
   14ac4:	9b03      	ldr	r3, [sp, #12]
   14ac6:	4810      	ldr	r0, [pc, #64]	; (14b08 <bt_init+0x114>)
   14ac8:	6899      	ldr	r1, [r3, #8]
   14aca:	2240      	movs	r2, #64	; 0x40
   14acc:	3101      	adds	r1, #1
   14ace:	f014 f8a2 	bl	28c16 <memcpy>
	net_buf_unref(rsp);
   14ad2:	9803      	ldr	r0, [sp, #12]
   14ad4:	f010 feba 	bl	2584c <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   14ad8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   14adc:	065e      	lsls	r6, r3, #25
   14ade:	d41b      	bmi.n	14b18 <bt_init+0x124>
   14ae0:	4b0a      	ldr	r3, [pc, #40]	; (14b0c <bt_init+0x118>)
   14ae2:	490b      	ldr	r1, [pc, #44]	; (14b10 <bt_init+0x11c>)
		BT_ERR("Non-LE capable controller detected!");
   14ae4:	480b      	ldr	r0, [pc, #44]	; (14b14 <bt_init+0x120>)
   14ae6:	1ac9      	subs	r1, r1, r3
   14ae8:	08c9      	lsrs	r1, r1, #3
   14aea:	0189      	lsls	r1, r1, #6
   14aec:	f041 0101 	orr.w	r1, r1, #1
   14af0:	f013 fc66 	bl	283c0 <log_0>
		return -ENODEV;
   14af4:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
   14af8:	4620      	mov	r0, r4
   14afa:	b008      	add	sp, #32
   14afc:	bd70      	pop	{r4, r5, r6, pc}
   14afe:	bf00      	nop
   14b00:	20000000 	.word	0x20000000
   14b04:	2000003c 	.word	0x2000003c
   14b08:	20000044 	.word	0x20000044
   14b0c:	0002b248 	.word	0x0002b248
   14b10:	0002b328 	.word	0x0002b328
   14b14:	0002d4ee 	.word	0x0002d4ee
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   14b18:	4621      	mov	r1, r4
   14b1a:	aa03      	add	r2, sp, #12
   14b1c:	f242 0003 	movw	r0, #8195	; 0x2003
   14b20:	f7ff f9a6 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14b24:	4604      	mov	r4, r0
   14b26:	2800      	cmp	r0, #0
   14b28:	d1e6      	bne.n	14af8 <bt_init+0x104>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   14b2a:	9b03      	ldr	r3, [sp, #12]
   14b2c:	48be      	ldr	r0, [pc, #760]	; (14e28 <bt_init+0x434>)
   14b2e:	6899      	ldr	r1, [r3, #8]
   14b30:	2208      	movs	r2, #8
   14b32:	3101      	adds	r1, #1
   14b34:	f014 f86f 	bl	28c16 <memcpy>
	net_buf_unref(rsp);
   14b38:	9803      	ldr	r0, [sp, #12]
   14b3a:	f010 fe87 	bl	2584c <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   14b3e:	4621      	mov	r1, r4
   14b40:	aa03      	add	r2, sp, #12
   14b42:	f242 0002 	movw	r0, #8194	; 0x2002
   14b46:	f7ff f993 	bl	13e70 <bt_hci_cmd_send_sync>
		if (err) {
   14b4a:	4604      	mov	r4, r0
   14b4c:	2800      	cmp	r0, #0
   14b4e:	d1d3      	bne.n	14af8 <bt_init+0x104>
		le_read_buffer_size_complete(rsp);
   14b50:	9b03      	ldr	r3, [sp, #12]
   14b52:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   14b54:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   14b58:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
   14b5c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   14b5e:	b121      	cbz	r1, 14b6a <bt_init+0x176>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   14b60:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   14b62:	48b2      	ldr	r0, [pc, #712]	; (14e2c <bt_init+0x438>)
   14b64:	4611      	mov	r1, r2
   14b66:	f015 fe57 	bl	2a818 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   14b6a:	9803      	ldr	r0, [sp, #12]
   14b6c:	f010 fe6e 	bl	2584c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14b70:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
   14b74:	f016 0620 	ands.w	r6, r6, #32
   14b78:	f000 80d8 	beq.w	14d2c <bt_init+0x338>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   14b7c:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
   14b80:	071c      	lsls	r4, r3, #28
   14b82:	d512      	bpl.n	14baa <bt_init+0x1b6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   14b84:	aa03      	add	r2, sp, #12
   14b86:	2100      	movs	r1, #0
   14b88:	f242 001c 	movw	r0, #8220	; 0x201c
   14b8c:	f7ff f970 	bl	13e70 <bt_hci_cmd_send_sync>
		if (err) {
   14b90:	4604      	mov	r4, r0
   14b92:	2800      	cmp	r0, #0
   14b94:	d1b0      	bne.n	14af8 <bt_init+0x104>
		le_read_supp_states_complete(rsp);
   14b96:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   14b98:	6883      	ldr	r3, [r0, #8]
   14b9a:	f8d3 2001 	ldr.w	r2, [r3, #1]
   14b9e:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   14ba2:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
   14ba6:	f010 fe51 	bl	2584c <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   14baa:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
   14bae:	0698      	lsls	r0, r3, #26
   14bb0:	d524      	bpl.n	14bfc <bt_init+0x208>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   14bb2:	a902      	add	r1, sp, #8
   14bb4:	f10d 0006 	add.w	r0, sp, #6
   14bb8:	f7ff f9d4 	bl	13f64 <hci_le_read_max_data_len>
		if (err) {
   14bbc:	4604      	mov	r4, r0
   14bbe:	2800      	cmp	r0, #0
   14bc0:	d19a      	bne.n	14af8 <bt_init+0x104>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14bc2:	2104      	movs	r1, #4
   14bc4:	f242 0024 	movw	r0, #8228	; 0x2024
   14bc8:	f7ff f918 	bl	13dfc <bt_hci_cmd_create>
		if (!buf) {
   14bcc:	4606      	mov	r6, r0
   14bce:	2800      	cmp	r0, #0
   14bd0:	f000 80b3 	beq.w	14d3a <bt_init+0x346>
	return net_buf_simple_add(&buf->b, len);
   14bd4:	2104      	movs	r1, #4
   14bd6:	3008      	adds	r0, #8
   14bd8:	f015 fb6a 	bl	2a2b0 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   14bdc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   14be0:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   14be2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   14be6:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   14be8:	4622      	mov	r2, r4
   14bea:	4631      	mov	r1, r6
   14bec:	f242 0024 	movw	r0, #8228	; 0x2024
   14bf0:	f7ff f93e 	bl	13e70 <bt_hci_cmd_send_sync>
		if (err) {
   14bf4:	4604      	mov	r4, r0
   14bf6:	2800      	cmp	r0, #0
   14bf8:	f47f af7e 	bne.w	14af8 <bt_init+0x104>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   14bfc:	2108      	movs	r1, #8
   14bfe:	f242 0001 	movw	r0, #8193	; 0x2001
   14c02:	f7ff f8fb 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   14c06:	4604      	mov	r4, r0
   14c08:	2800      	cmp	r0, #0
   14c0a:	f000 8096 	beq.w	14d3a <bt_init+0x346>
   14c0e:	2108      	movs	r1, #8
   14c10:	4408      	add	r0, r1
   14c12:	f015 fb4d 	bl	2a2b0 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   14c16:	f895 20a0 	ldrb.w	r2, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   14c1a:	f012 0f02 	tst.w	r2, #2
   14c1e:	bf14      	ite	ne
   14c20:	232f      	movne	r3, #47	; 0x2f
   14c22:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   14c24:	0691      	lsls	r1, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14c26:	f895 20a1 	ldrb.w	r2, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   14c2a:	bf48      	it	mi
   14c2c:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   14c30:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   14c34:	bf18      	it	ne
   14c36:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   14c3a:	2200      	movs	r2, #0
   14c3c:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14c3e:	f3c3 2307 	ubfx	r3, r3, #8, #8
   14c42:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   14c44:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   14c46:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   14c48:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14c4a:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14c4c:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14c4e:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   14c50:	4621      	mov	r1, r4
   14c52:	f242 0001 	movw	r0, #8193	; 0x2001
   14c56:	f7ff f90b 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14c5a:	4604      	mov	r4, r0
   14c5c:	2800      	cmp	r0, #0
   14c5e:	f47f af4b 	bne.w	14af8 <bt_init+0x104>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   14c62:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
   14c66:	069a      	lsls	r2, r3, #26
   14c68:	d41e      	bmi.n	14ca8 <bt_init+0x2b4>
	if (bt_dev.le.acl_mtu) {
   14c6a:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
   14c6e:	b9d9      	cbnz	r1, 14ca8 <bt_init+0x2b4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   14c70:	aa03      	add	r2, sp, #12
   14c72:	f241 0005 	movw	r0, #4101	; 0x1005
   14c76:	f7ff f8fb 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14c7a:	4604      	mov	r4, r0
   14c7c:	2800      	cmp	r0, #0
   14c7e:	f47f af3b 	bne.w	14af8 <bt_init+0x104>
	if (bt_dev.le.acl_mtu) {
   14c82:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
   14c86:	b963      	cbnz	r3, 14ca2 <bt_init+0x2ae>
   14c88:	9b03      	ldr	r3, [sp, #12]
   14c8a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   14c8c:	785a      	ldrb	r2, [r3, #1]
   14c8e:	7899      	ldrb	r1, [r3, #2]
   14c90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   14c94:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   14c98:	889a      	ldrh	r2, [r3, #4]
   14c9a:	4864      	ldr	r0, [pc, #400]	; (14e2c <bt_init+0x438>)
   14c9c:	4611      	mov	r1, r2
   14c9e:	f015 fdbb 	bl	2a818 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   14ca2:	9803      	ldr	r0, [sp, #12]
   14ca4:	f010 fdd2 	bl	2584c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   14ca8:	2108      	movs	r1, #8
   14caa:	f640 4001 	movw	r0, #3073	; 0xc01
   14cae:	f7ff f8a5 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   14cb2:	4604      	mov	r4, r0
   14cb4:	2800      	cmp	r0, #0
   14cb6:	d040      	beq.n	14d3a <bt_init+0x346>
   14cb8:	2108      	movs	r1, #8
   14cba:	4408      	add	r0, r1
   14cbc:	f015 faf8 	bl	2a2b0 <net_buf_simple_add>
	dst[0] = val;
   14cc0:	2310      	movs	r3, #16
   14cc2:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   14cc4:	2388      	movs	r3, #136	; 0x88
   14cc6:	7043      	strb	r3, [r0, #1]
   14cc8:	2302      	movs	r3, #2
	dst[0] = val;
   14cca:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   14ccc:	70c3      	strb	r3, [r0, #3]
   14cce:	2320      	movs	r3, #32
	dst[0] = val;
   14cd0:	7082      	strb	r2, [r0, #2]
   14cd2:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   14cd4:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   14cd6:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   14cd8:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   14cda:	4621      	mov	r1, r4
   14cdc:	f640 4001 	movw	r0, #3073	; 0xc01
   14ce0:	f7ff f8c6 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14ce4:	4604      	mov	r4, r0
   14ce6:	2800      	cmp	r0, #0
   14ce8:	f47f af06 	bne.w	14af8 <bt_init+0x104>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   14cec:	4601      	mov	r1, r0
   14cee:	aa02      	add	r2, sp, #8
   14cf0:	f64f 4001 	movw	r0, #64513	; 0xfc01
   14cf4:	f7ff f8bc 	bl	13e70 <bt_hci_cmd_send_sync>
   14cf8:	4c4d      	ldr	r4, [pc, #308]	; (14e30 <bt_init+0x43c>)
   14cfa:	4b4e      	ldr	r3, [pc, #312]	; (14e34 <bt_init+0x440>)
   14cfc:	1ae4      	subs	r4, r4, r3
   14cfe:	08e4      	lsrs	r4, r4, #3
   14d00:	01a4      	lsls	r4, r4, #6
	if (err) {
   14d02:	b378      	cbz	r0, 14d64 <bt_init+0x370>
		BT_WARN("Vendor HCI extensions not available");
   14d04:	484c      	ldr	r0, [pc, #304]	; (14e38 <bt_init+0x444>)
   14d06:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
   14d0a:	f013 fb59 	bl	283c0 <log_0>
	err = bt_id_init();
   14d0e:	f000 fb39 	bl	15384 <bt_id_init>
	if (err) {
   14d12:	4604      	mov	r4, r0
   14d14:	2800      	cmp	r0, #0
   14d16:	f47f aeef 	bne.w	14af8 <bt_init+0x104>
		err = bt_conn_init();
   14d1a:	f001 fb03 	bl	16324 <bt_conn_init>
		if (err) {
   14d1e:	4604      	mov	r4, r0
   14d20:	2800      	cmp	r0, #0
   14d22:	f47f aee9 	bne.w	14af8 <bt_init+0x104>
	bt_finalize_init();
   14d26:	f7ff fdf9 	bl	1491c <bt_finalize_init>
	return 0;
   14d2a:	e6e5      	b.n	14af8 <bt_init+0x104>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   14d2c:	2102      	movs	r1, #2
   14d2e:	f640 406d 	movw	r0, #3181	; 0xc6d
   14d32:	f7ff f863 	bl	13dfc <bt_hci_cmd_create>
		if (!buf) {
   14d36:	4604      	mov	r4, r0
   14d38:	b910      	cbnz	r0, 14d40 <bt_init+0x34c>
		return -ENOBUFS;
   14d3a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14d3e:	e6db      	b.n	14af8 <bt_init+0x104>
   14d40:	2102      	movs	r1, #2
   14d42:	3008      	adds	r0, #8
   14d44:	f015 fab4 	bl	2a2b0 <net_buf_simple_add>
		cp_le->le = 0x01;
   14d48:	2301      	movs	r3, #1
   14d4a:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   14d4c:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   14d4e:	4621      	mov	r1, r4
   14d50:	4632      	mov	r2, r6
   14d52:	f640 406d 	movw	r0, #3181	; 0xc6d
   14d56:	f7ff f88b 	bl	13e70 <bt_hci_cmd_send_sync>
		if (err) {
   14d5a:	4604      	mov	r4, r0
   14d5c:	2800      	cmp	r0, #0
   14d5e:	f43f af0d 	beq.w	14b7c <bt_init+0x188>
   14d62:	e6c9      	b.n	14af8 <bt_init+0x104>
	rp.info = (void *)rsp->data;
   14d64:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   14d66:	4835      	ldr	r0, [pc, #212]	; (14e3c <bt_init+0x448>)
	rp.info = (void *)rsp->data;
   14d68:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
   14d6a:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
   14d6e:	2a03      	cmp	r2, #3
		return plat_str[platform];
   14d70:	bf96      	itet	ls
   14d72:	4933      	ldrls	r1, [pc, #204]	; (14e40 <bt_init+0x44c>)
	return "unknown";
   14d74:	4933      	ldrhi	r1, [pc, #204]	; (14e44 <bt_init+0x450>)
		return plat_str[platform];
   14d76:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
   14d7a:	f044 0303 	orr.w	r3, r4, #3
   14d7e:	f013 fb40 	bl	28402 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   14d82:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
   14d86:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   14d8a:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
   14d8c:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
   14d90:	d12e      	bne.n	14df0 <bt_init+0x3fc>
	if (variant < ARRAY_SIZE(nordic_str)) {
   14d92:	2a03      	cmp	r2, #3
   14d94:	d82c      	bhi.n	14df0 <bt_init+0x3fc>
		return nordic_str[variant];
   14d96:	492c      	ldr	r1, [pc, #176]	; (14e48 <bt_init+0x454>)
   14d98:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
   14d9c:	482b      	ldr	r0, [pc, #172]	; (14e4c <bt_init+0x458>)
   14d9e:	f013 fb30 	bl	28402 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   14da2:	7972      	ldrb	r2, [r6, #5]
   14da4:	482a      	ldr	r0, [pc, #168]	; (14e50 <bt_init+0x45c>)
	if (variant < ARRAY_SIZE(var_str)) {
   14da6:	2a03      	cmp	r2, #3
		return var_str[variant];
   14da8:	bf96      	itet	ls
   14daa:	492a      	ldrls	r1, [pc, #168]	; (14e54 <bt_init+0x460>)
	return "unknown";
   14dac:	4925      	ldrhi	r1, [pc, #148]	; (14e44 <bt_init+0x450>)
		return var_str[variant];
   14dae:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
   14db2:	e9cd 1203 	strd	r1, r2, [sp, #12]
   14db6:	79b2      	ldrb	r2, [r6, #6]
   14db8:	9205      	str	r2, [sp, #20]
   14dba:	f8b6 2007 	ldrh.w	r2, [r6, #7]
   14dbe:	9206      	str	r2, [sp, #24]
   14dc0:	f8d6 2009 	ldr.w	r2, [r6, #9]
   14dc4:	9207      	str	r2, [sp, #28]
   14dc6:	f044 0303 	orr.w	r3, r4, #3
   14dca:	2205      	movs	r2, #5
   14dcc:	a903      	add	r1, sp, #12
   14dce:	f013 fb4d 	bl	2846c <log_n>
	net_buf_unref(rsp);
   14dd2:	9802      	ldr	r0, [sp, #8]
   14dd4:	f010 fd3a 	bl	2584c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   14dd8:	aa02      	add	r2, sp, #8
   14dda:	2100      	movs	r1, #0
   14ddc:	f64f 4002 	movw	r0, #64514	; 0xfc02
   14de0:	f7ff f846 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14de4:	4606      	mov	r6, r0
   14de6:	b128      	cbz	r0, 14df4 <bt_init+0x400>
		BT_WARN("Failed to read supported vendor commands");
   14de8:	481b      	ldr	r0, [pc, #108]	; (14e58 <bt_init+0x464>)
   14dea:	f044 0102 	orr.w	r1, r4, #2
   14dee:	e78c      	b.n	14d0a <bt_init+0x316>
		return "unknown";
   14df0:	4914      	ldr	r1, [pc, #80]	; (14e44 <bt_init+0x450>)
   14df2:	e7d3      	b.n	14d9c <bt_init+0x3a8>
	rp.cmds = (void *)rsp->data;
   14df4:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   14df6:	4819      	ldr	r0, [pc, #100]	; (14e5c <bt_init+0x468>)
   14df8:	6899      	ldr	r1, [r3, #8]
   14dfa:	2202      	movs	r2, #2
   14dfc:	3101      	adds	r1, #1
   14dfe:	f013 ff0a 	bl	28c16 <memcpy>
	net_buf_unref(rsp);
   14e02:	9802      	ldr	r0, [sp, #8]
   14e04:	f010 fd22 	bl	2584c <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   14e08:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
   14e0c:	075b      	lsls	r3, r3, #29
   14e0e:	f57f af7e 	bpl.w	14d0e <bt_init+0x31a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   14e12:	aa02      	add	r2, sp, #8
   14e14:	4631      	mov	r1, r6
   14e16:	f64f 4003 	movw	r0, #64515	; 0xfc03
   14e1a:	f7ff f829 	bl	13e70 <bt_hci_cmd_send_sync>
		if (err) {
   14e1e:	b308      	cbz	r0, 14e64 <bt_init+0x470>
			BT_WARN("Failed to read supported vendor features");
   14e20:	480f      	ldr	r0, [pc, #60]	; (14e60 <bt_init+0x46c>)
   14e22:	f044 0102 	orr.w	r1, r4, #2
   14e26:	e770      	b.n	14d0a <bt_init+0x316>
   14e28:	200000a0 	.word	0x200000a0
   14e2c:	200000d0 	.word	0x200000d0
   14e30:	0002b328 	.word	0x0002b328
   14e34:	0002b248 	.word	0x0002b248
   14e38:	0002d512 	.word	0x0002d512
   14e3c:	0002d536 	.word	0x0002d536
   14e40:	0002b628 	.word	0x0002b628
   14e44:	0002d034 	.word	0x0002d034
   14e48:	0002b5f8 	.word	0x0002b5f8
   14e4c:	0002d54f 	.word	0x0002d54f
   14e50:	0002d567 	.word	0x0002d567
   14e54:	0002b660 	.word	0x0002b660
   14e58:	0002d594 	.word	0x0002d594
   14e5c:	20000085 	.word	0x20000085
   14e60:	0002d5bd 	.word	0x0002d5bd
		rp.feat = (void *)rsp->data;
   14e64:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
   14e66:	4805      	ldr	r0, [pc, #20]	; (14e7c <bt_init+0x488>)
   14e68:	6899      	ldr	r1, [r3, #8]
   14e6a:	2201      	movs	r2, #1
   14e6c:	4411      	add	r1, r2
   14e6e:	f013 fed2 	bl	28c16 <memcpy>
		net_buf_unref(rsp);
   14e72:	9802      	ldr	r0, [sp, #8]
   14e74:	f010 fcea 	bl	2584c <net_buf_unref>
   14e78:	e749      	b.n	14d0e <bt_init+0x31a>
   14e7a:	bf00      	nop
   14e7c:	20000084 	.word	0x20000084

00014e80 <init_work>:

static void init_work(struct k_work *work)
{
   14e80:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
   14e82:	f7ff fdb7 	bl	149f4 <bt_init>
	if (ready_cb) {
   14e86:	4b03      	ldr	r3, [pc, #12]	; (14e94 <init_work+0x14>)
   14e88:	681b      	ldr	r3, [r3, #0]
   14e8a:	b113      	cbz	r3, 14e92 <init_work+0x12>
		ready_cb(err);
	}
}
   14e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   14e90:	4718      	bx	r3
}
   14e92:	bd10      	pop	{r4, pc}
   14e94:	200012a4 	.word	0x200012a4

00014e98 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   14e98:	b570      	push	{r4, r5, r6, lr}
	int err;

	if (!bt_dev.drv) {
   14e9a:	4d2a      	ldr	r5, [pc, #168]	; (14f44 <bt_enable+0xac>)
   14e9c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
   14ea0:	b088      	sub	sp, #32
   14ea2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   14ea4:	b973      	cbnz	r3, 14ec4 <bt_enable+0x2c>
   14ea6:	4b28      	ldr	r3, [pc, #160]	; (14f48 <bt_enable+0xb0>)
   14ea8:	4928      	ldr	r1, [pc, #160]	; (14f4c <bt_enable+0xb4>)
		BT_ERR("No HCI driver registered");
   14eaa:	4829      	ldr	r0, [pc, #164]	; (14f50 <bt_enable+0xb8>)
   14eac:	1ac9      	subs	r1, r1, r3
   14eae:	08c9      	lsrs	r1, r1, #3
   14eb0:	0189      	lsls	r1, r1, #6
   14eb2:	f041 0101 	orr.w	r1, r1, #1
   14eb6:	f013 fa83 	bl	283c0 <log_0>
		return -ENODEV;
   14eba:	f06f 0412 	mvn.w	r4, #18
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   14ebe:	4620      	mov	r0, r4
   14ec0:	b008      	add	sp, #32
   14ec2:	bd70      	pop	{r4, r5, r6, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   14ec4:	2101      	movs	r1, #1
   14ec6:	f105 0098 	add.w	r0, r5, #152	; 0x98
   14eca:	f013 ffaf 	bl	28e2c <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   14ece:	ea10 0301 	ands.w	r3, r0, r1
   14ed2:	d134      	bne.n	14f3e <bt_enable+0xa6>
	ready_cb = cb;
   14ed4:	4a1f      	ldr	r2, [pc, #124]	; (14f54 <bt_enable+0xbc>)
   14ed6:	6016      	str	r6, [r2, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   14ed8:	2000      	movs	r0, #0
   14eda:	2100      	movs	r1, #0
   14edc:	f06f 0208 	mvn.w	r2, #8
   14ee0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   14ee4:	e9cd 3202 	strd	r3, r2, [sp, #8]
   14ee8:	e9cd 3300 	strd	r3, r3, [sp]
   14eec:	9304      	str	r3, [sp, #16]
   14eee:	491a      	ldr	r1, [pc, #104]	; (14f58 <bt_enable+0xc0>)
   14ef0:	4b1a      	ldr	r3, [pc, #104]	; (14f5c <bt_enable+0xc4>)
   14ef2:	481b      	ldr	r0, [pc, #108]	; (14f60 <bt_enable+0xc8>)
   14ef4:	f44f 7220 	mov.w	r2, #640	; 0x280
   14ef8:	f011 fd5a 	bl	269b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   14efc:	4919      	ldr	r1, [pc, #100]	; (14f64 <bt_enable+0xcc>)
   14efe:	4818      	ldr	r0, [pc, #96]	; (14f60 <bt_enable+0xc8>)
   14f00:	f015 fbaf 	bl	2a662 <z_impl_k_thread_name_set>
	err = bt_dev.drv->open();
   14f04:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
   14f08:	68db      	ldr	r3, [r3, #12]
   14f0a:	4798      	blx	r3
	if (err) {
   14f0c:	4604      	mov	r4, r0
   14f0e:	b158      	cbz	r0, 14f28 <bt_enable+0x90>
   14f10:	4b0d      	ldr	r3, [pc, #52]	; (14f48 <bt_enable+0xb0>)
   14f12:	4a0e      	ldr	r2, [pc, #56]	; (14f4c <bt_enable+0xb4>)
   14f14:	1ad2      	subs	r2, r2, r3
   14f16:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
   14f18:	0192      	lsls	r2, r2, #6
   14f1a:	4601      	mov	r1, r0
   14f1c:	f042 0201 	orr.w	r2, r2, #1
   14f20:	4811      	ldr	r0, [pc, #68]	; (14f68 <bt_enable+0xd0>)
   14f22:	f013 fa5a 	bl	283da <log_1>
		return err;
   14f26:	e7ca      	b.n	14ebe <bt_enable+0x26>
	if (!cb) {
   14f28:	b926      	cbnz	r6, 14f34 <bt_enable+0x9c>
}
   14f2a:	b008      	add	sp, #32
   14f2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
   14f30:	f7ff bd60 	b.w	149f4 <bt_init>
	k_work_submit(&bt_dev.init);
   14f34:	f105 0088 	add.w	r0, r5, #136	; 0x88
   14f38:	f011 ff78 	bl	26e2c <k_work_submit>
	return 0;
   14f3c:	e7bf      	b.n	14ebe <bt_enable+0x26>
		return -EALREADY;
   14f3e:	f06f 0477 	mvn.w	r4, #119	; 0x77
   14f42:	e7bc      	b.n	14ebe <bt_enable+0x26>
   14f44:	20000000 	.word	0x20000000
   14f48:	0002b248 	.word	0x0002b248
   14f4c:	0002b328 	.word	0x0002b328
   14f50:	0002d5e6 	.word	0x0002d5e6
   14f54:	200012a4 	.word	0x200012a4
   14f58:	20002980 	.word	0x20002980
   14f5c:	00014545 	.word	0x00014545
   14f60:	200008f0 	.word	0x200008f0
   14f64:	0002d5ff 	.word	0x0002d5ff
   14f68:	0002d605 	.word	0x0002d605

00014f6c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   14f6c:	4800      	ldr	r0, [pc, #0]	; (14f70 <bt_get_name+0x4>)
   14f6e:	4770      	bx	lr
   14f70:	0002d621 	.word	0x0002d621

00014f74 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   14f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   14f76:	4f0b      	ldr	r7, [pc, #44]	; (14fa4 <id_find+0x30>)
{
   14f78:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   14f7a:	2500      	movs	r5, #0
   14f7c:	79fb      	ldrb	r3, [r7, #7]
   14f7e:	b2ec      	uxtb	r4, r5
   14f80:	42a3      	cmp	r3, r4
   14f82:	d802      	bhi.n	14f8a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   14f84:	f06f 0401 	mvn.w	r4, #1
   14f88:	e009      	b.n	14f9e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   14f8a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   14f8e:	2207      	movs	r2, #7
   14f90:	4439      	add	r1, r7
   14f92:	4630      	mov	r0, r6
   14f94:	f013 fe2e 	bl	28bf4 <memcmp>
   14f98:	3501      	adds	r5, #1
   14f9a:	2800      	cmp	r0, #0
   14f9c:	d1ee      	bne.n	14f7c <id_find+0x8>
}
   14f9e:	4620      	mov	r0, r4
   14fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14fa2:	bf00      	nop
   14fa4:	20000000 	.word	0x20000000

00014fa8 <set_random_address>:
{
   14fa8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   14faa:	4914      	ldr	r1, [pc, #80]	; (14ffc <set_random_address+0x54>)
   14fac:	2206      	movs	r2, #6
   14fae:	4605      	mov	r5, r0
   14fb0:	f013 fe20 	bl	28bf4 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   14fb4:	4604      	mov	r4, r0
   14fb6:	b1e0      	cbz	r0, 14ff2 <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   14fb8:	2106      	movs	r1, #6
   14fba:	f242 0005 	movw	r0, #8197	; 0x2005
   14fbe:	f7fe ff1d 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   14fc2:	4604      	mov	r4, r0
   14fc4:	b1b8      	cbz	r0, 14ff6 <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   14fc6:	2206      	movs	r2, #6
   14fc8:	4629      	mov	r1, r5
   14fca:	3008      	adds	r0, #8
   14fcc:	f015 f976 	bl	2a2bc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   14fd0:	4621      	mov	r1, r4
   14fd2:	2200      	movs	r2, #0
   14fd4:	f242 0005 	movw	r0, #8197	; 0x2005
   14fd8:	f7fe ff4a 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   14fdc:	4604      	mov	r4, r0
   14fde:	b940      	cbnz	r0, 14ff2 <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
   14fe0:	2206      	movs	r2, #6
   14fe2:	4806      	ldr	r0, [pc, #24]	; (14ffc <set_random_address+0x54>)
   14fe4:	4629      	mov	r1, r5
   14fe6:	f013 fe16 	bl	28c16 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   14fea:	4b05      	ldr	r3, [pc, #20]	; (15000 <set_random_address+0x58>)
   14fec:	2201      	movs	r2, #1
   14fee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
   14ff2:	4620      	mov	r0, r4
   14ff4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   14ff6:	f06f 0468 	mvn.w	r4, #104	; 0x68
   14ffa:	e7fa      	b.n	14ff2 <set_random_address+0x4a>
   14ffc:	2000002d 	.word	0x2000002d
   15000:	20000000 	.word	0x20000000

00015004 <id_create.constprop.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   15004:	b530      	push	{r4, r5, lr}
		do {
			bt_addr_le_create_static(&new_addr);
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   15006:	4c15      	ldr	r4, [pc, #84]	; (1505c <id_create.constprop.0+0x58>)
   15008:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   1500c:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   1500e:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15010:	460d      	mov	r5, r1
   15012:	b181      	cbz	r1, 15036 <id_create.constprop.0+0x32>
   15014:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   15016:	2207      	movs	r2, #7
   15018:	4669      	mov	r1, sp
   1501a:	4628      	mov	r0, r5
   1501c:	9300      	str	r3, [sp, #0]
   1501e:	f8cd 3003 	str.w	r3, [sp, #3]
   15022:	f013 fde7 	bl	28bf4 <memcmp>
   15026:	b130      	cbz	r0, 15036 <id_create.constprop.0+0x32>
	memcpy(dst, src, sizeof(*dst));
   15028:	2207      	movs	r2, #7
   1502a:	4629      	mov	r1, r5
   1502c:	4620      	mov	r0, r4
   1502e:	f013 fdf2 	bl	28c16 <memcpy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
   15032:	b005      	add	sp, #20
   15034:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
   15036:	a802      	add	r0, sp, #8
   15038:	f013 fed8 	bl	28dec <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
   1503c:	a802      	add	r0, sp, #8
   1503e:	f7ff ff99 	bl	14f74 <id_find>
   15042:	2800      	cmp	r0, #0
   15044:	daf7      	bge.n	15036 <id_create.constprop.0+0x32>
   15046:	2207      	movs	r2, #7
   15048:	a902      	add	r1, sp, #8
   1504a:	4620      	mov	r0, r4
   1504c:	f013 fde3 	bl	28c16 <memcpy>
		if (addr) {
   15050:	2d00      	cmp	r5, #0
   15052:	d0ee      	beq.n	15032 <id_create.constprop.0+0x2e>
   15054:	2207      	movs	r2, #7
   15056:	4621      	mov	r1, r4
   15058:	4628      	mov	r0, r5
   1505a:	e7e8      	b.n	1502e <id_create.constprop.0+0x2a>
   1505c:	20000000 	.word	0x20000000

00015060 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   15060:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15062:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15064:	4605      	mov	r5, r0
   15066:	b918      	cbnz	r0, 15070 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   15068:	b34c      	cbz	r4, 150be <bt_id_create+0x5e>
		return -EINVAL;
   1506a:	f06f 0415 	mvn.w	r4, #21
   1506e:	e023      	b.n	150b8 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   15070:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   15072:	2207      	movs	r2, #7
   15074:	4669      	mov	r1, sp
   15076:	9300      	str	r3, [sp, #0]
   15078:	f8cd 3003 	str.w	r3, [sp, #3]
   1507c:	f013 fdba 	bl	28bf4 <memcmp>
   15080:	2800      	cmp	r0, #0
   15082:	d0f1      	beq.n	15068 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   15084:	782b      	ldrb	r3, [r5, #0]
   15086:	2b01      	cmp	r3, #1
   15088:	d104      	bne.n	15094 <bt_id_create+0x34>
   1508a:	79ab      	ldrb	r3, [r5, #6]
   1508c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15090:	2bc0      	cmp	r3, #192	; 0xc0
   15092:	d00a      	beq.n	150aa <bt_id_create+0x4a>
   15094:	4b1b      	ldr	r3, [pc, #108]	; (15104 <bt_id_create+0xa4>)
   15096:	491c      	ldr	r1, [pc, #112]	; (15108 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
   15098:	481c      	ldr	r0, [pc, #112]	; (1510c <bt_id_create+0xac>)
   1509a:	1ac9      	subs	r1, r1, r3
   1509c:	08c9      	lsrs	r1, r1, #3
   1509e:	0189      	lsls	r1, r1, #6
   150a0:	f041 0101 	orr.w	r1, r1, #1
   150a4:	f013 f98c 	bl	283c0 <log_0>
			return -EINVAL;
   150a8:	e7df      	b.n	1506a <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   150aa:	4628      	mov	r0, r5
   150ac:	f7ff ff62 	bl	14f74 <id_find>
   150b0:	2800      	cmp	r0, #0
   150b2:	dbd9      	blt.n	15068 <bt_id_create+0x8>
			return -EALREADY;
   150b4:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
   150b8:	4620      	mov	r0, r4
   150ba:	b002      	add	sp, #8
   150bc:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   150be:	4e14      	ldr	r6, [pc, #80]	; (15110 <bt_id_create+0xb0>)
   150c0:	79f3      	ldrb	r3, [r6, #7]
   150c2:	2b01      	cmp	r3, #1
   150c4:	d01b      	beq.n	150fe <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   150c6:	f3bf 8f5b 	dmb	ish
   150ca:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
   150ce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   150d2:	07db      	lsls	r3, r3, #31
   150d4:	d40b      	bmi.n	150ee <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   150d6:	2d00      	cmp	r5, #0
   150d8:	d0c7      	beq.n	1506a <bt_id_create+0xa>
   150da:	2207      	movs	r2, #7
   150dc:	4669      	mov	r1, sp
   150de:	4628      	mov	r0, r5
   150e0:	9400      	str	r4, [sp, #0]
   150e2:	f8cd 4003 	str.w	r4, [sp, #3]
   150e6:	f013 fd85 	bl	28bf4 <memcmp>
   150ea:	2800      	cmp	r0, #0
   150ec:	d0bd      	beq.n	1506a <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   150ee:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
   150f0:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
   150f2:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
   150f4:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
   150f6:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
   150f8:	f7ff ff84 	bl	15004 <id_create.constprop.0>
	return new_id;
   150fc:	e7dc      	b.n	150b8 <bt_id_create+0x58>
		return -ENOMEM;
   150fe:	f06f 040b 	mvn.w	r4, #11
   15102:	e7d9      	b.n	150b8 <bt_id_create+0x58>
   15104:	0002b248 	.word	0x0002b248
   15108:	0002b330 	.word	0x0002b330
   1510c:	0002d634 	.word	0x0002d634
   15110:	20000000 	.word	0x20000000

00015114 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   15114:	b570      	push	{r4, r5, r6, lr}
   15116:	b086      	sub	sp, #24
   15118:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   1511a:	aa01      	add	r2, sp, #4
   1511c:	2100      	movs	r1, #0
   1511e:	f241 0009 	movw	r0, #4105	; 0x1009
   15122:	f7fe fea5 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   15126:	4604      	mov	r4, r0
   15128:	b160      	cbz	r0, 15144 <bt_id_read_public_addr+0x30>
   1512a:	491e      	ldr	r1, [pc, #120]	; (151a4 <bt_id_read_public_addr+0x90>)
   1512c:	4b1e      	ldr	r3, [pc, #120]	; (151a8 <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
   1512e:	481f      	ldr	r0, [pc, #124]	; (151ac <bt_id_read_public_addr+0x98>)
   15130:	1ac9      	subs	r1, r1, r3
   15132:	08c9      	lsrs	r1, r1, #3
   15134:	0189      	lsls	r1, r1, #6
   15136:	f041 0102 	orr.w	r1, r1, #2
   1513a:	f013 f941 	bl	283c0 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   1513e:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   15140:	b006      	add	sp, #24
   15142:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   15144:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15146:	9002      	str	r0, [sp, #8]
   15148:	689d      	ldr	r5, [r3, #8]
   1514a:	f8ad 000c 	strh.w	r0, [sp, #12]
   1514e:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   15150:	2206      	movs	r2, #6
   15152:	a902      	add	r1, sp, #8
   15154:	4628      	mov	r0, r5
   15156:	f013 fd4d 	bl	28bf4 <memcmp>
   1515a:	b918      	cbnz	r0, 15164 <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
   1515c:	9801      	ldr	r0, [sp, #4]
   1515e:	f010 fb75 	bl	2584c <net_buf_unref>
   15162:	e7ec      	b.n	1513e <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   15164:	23ff      	movs	r3, #255	; 0xff
   15166:	2206      	movs	r2, #6
   15168:	a904      	add	r1, sp, #16
   1516a:	4628      	mov	r0, r5
   1516c:	f88d 3010 	strb.w	r3, [sp, #16]
   15170:	f88d 3011 	strb.w	r3, [sp, #17]
   15174:	f88d 3012 	strb.w	r3, [sp, #18]
   15178:	f88d 3013 	strb.w	r3, [sp, #19]
   1517c:	f88d 3014 	strb.w	r3, [sp, #20]
   15180:	f88d 3015 	strb.w	r3, [sp, #21]
   15184:	f013 fd36 	bl	28bf4 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   15188:	2800      	cmp	r0, #0
   1518a:	d0e7      	beq.n	1515c <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   1518c:	2206      	movs	r2, #6
   1518e:	4629      	mov	r1, r5
   15190:	1c70      	adds	r0, r6, #1
   15192:	f013 fd40 	bl	28c16 <memcpy>
	net_buf_unref(rsp);
   15196:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   15198:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   1519a:	f010 fb57 	bl	2584c <net_buf_unref>
	return 1U;
   1519e:	2001      	movs	r0, #1
   151a0:	e7ce      	b.n	15140 <bt_id_read_public_addr+0x2c>
   151a2:	bf00      	nop
   151a4:	0002b330 	.word	0x0002b330
   151a8:	0002b248 	.word	0x0002b248
   151ac:	0002d662 	.word	0x0002d662

000151b0 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
   151b0:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   151b2:	4668      	mov	r0, sp
   151b4:	f7ff ffae 	bl	15114 <bt_id_read_public_addr>
   151b8:	4b04      	ldr	r3, [pc, #16]	; (151cc <bt_setup_public_id_addr+0x1c>)
   151ba:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   151bc:	b118      	cbz	r0, 151c6 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
   151be:	4669      	mov	r1, sp
   151c0:	2000      	movs	r0, #0
   151c2:	f7ff ff1f 	bl	15004 <id_create.constprop.0>
}
   151c6:	b003      	add	sp, #12
   151c8:	f85d fb04 	ldr.w	pc, [sp], #4
   151cc:	20000000 	.word	0x20000000

000151d0 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   151d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   151d4:	4b25      	ldr	r3, [pc, #148]	; (1526c <bt_read_static_addr+0x9c>)
   151d6:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
   151da:	f014 0401 	ands.w	r4, r4, #1
{
   151de:	4607      	mov	r7, r0
   151e0:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   151e2:	d10a      	bne.n	151fa <bt_read_static_addr+0x2a>
   151e4:	4922      	ldr	r1, [pc, #136]	; (15270 <bt_read_static_addr+0xa0>)
   151e6:	4b23      	ldr	r3, [pc, #140]	; (15274 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
   151e8:	4823      	ldr	r0, [pc, #140]	; (15278 <bt_read_static_addr+0xa8>)
   151ea:	1ac9      	subs	r1, r1, r3
   151ec:	08c9      	lsrs	r1, r1, #3
   151ee:	0189      	lsls	r1, r1, #6
   151f0:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   151f4:	f013 f8e4 	bl	283c0 <log_0>
   151f8:	e012      	b.n	15220 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   151fa:	aa01      	add	r2, sp, #4
   151fc:	2100      	movs	r1, #0
   151fe:	f64f 4009 	movw	r0, #64521	; 0xfc09
   15202:	f7fe fe35 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   15206:	4605      	mov	r5, r0
   15208:	b170      	cbz	r0, 15228 <bt_read_static_addr+0x58>
   1520a:	4b1a      	ldr	r3, [pc, #104]	; (15274 <bt_read_static_addr+0xa4>)
   1520c:	4918      	ldr	r1, [pc, #96]	; (15270 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
   1520e:	481b      	ldr	r0, [pc, #108]	; (1527c <bt_read_static_addr+0xac>)
   15210:	1ac9      	subs	r1, r1, r3
   15212:	08c9      	lsrs	r1, r1, #3
   15214:	0189      	lsls	r1, r1, #6
   15216:	f041 0102 	orr.w	r1, r1, #2
   1521a:	f013 f8d1 	bl	283c0 <log_0>
		return 0;
   1521e:	2400      	movs	r4, #0
	}

	return cnt;
}
   15220:	4620      	mov	r0, r4
   15222:	b002      	add	sp, #8
   15224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
   15228:	9b01      	ldr	r3, [sp, #4]
   1522a:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
   1522c:	785c      	ldrb	r4, [r3, #1]
   1522e:	42b4      	cmp	r4, r6
   15230:	bf28      	it	cs
   15232:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   15234:	f04f 0816 	mov.w	r8, #22
   15238:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
   1523a:	42a5      	cmp	r5, r4
   1523c:	db0d      	blt.n	1525a <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
   1523e:	9801      	ldr	r0, [sp, #4]
   15240:	f010 fb04 	bl	2584c <net_buf_unref>
	if (!cnt) {
   15244:	2c00      	cmp	r4, #0
   15246:	d1eb      	bne.n	15220 <bt_read_static_addr+0x50>
   15248:	4909      	ldr	r1, [pc, #36]	; (15270 <bt_read_static_addr+0xa0>)
   1524a:	4b0a      	ldr	r3, [pc, #40]	; (15274 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
   1524c:	480c      	ldr	r0, [pc, #48]	; (15280 <bt_read_static_addr+0xb0>)
   1524e:	1ac9      	subs	r1, r1, r3
   15250:	08c9      	lsrs	r1, r1, #3
   15252:	0189      	lsls	r1, r1, #6
   15254:	f041 0102 	orr.w	r1, r1, #2
   15258:	e7cc      	b.n	151f4 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
   1525a:	fb08 7005 	mla	r0, r8, r5, r7
   1525e:	2216      	movs	r2, #22
   15260:	4631      	mov	r1, r6
   15262:	f013 fcd8 	bl	28c16 <memcpy>
	for (i = 0; i < cnt; i++) {
   15266:	3501      	adds	r5, #1
   15268:	e7e7      	b.n	1523a <bt_read_static_addr+0x6a>
   1526a:	bf00      	nop
   1526c:	20000000 	.word	0x20000000
   15270:	0002b330 	.word	0x0002b330
   15274:	0002b248 	.word	0x0002b248
   15278:	0002d680 	.word	0x0002d680
   1527c:	0002d6ac 	.word	0x0002d6ac
   15280:	0002d6cc 	.word	0x0002d6cc

00015284 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   15284:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   15286:	4d15      	ldr	r5, [pc, #84]	; (152dc <bt_setup_random_id_addr+0x58>)
   15288:	79ec      	ldrb	r4, [r5, #7]
{
   1528a:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
   1528c:	b9f4      	cbnz	r4, 152cc <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1528e:	2101      	movs	r1, #1
   15290:	a802      	add	r0, sp, #8
   15292:	f7ff ff9d 	bl	151d0 <bt_read_static_addr>
   15296:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   15298:	b1c0      	cbz	r0, 152cc <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1529a:	2716      	movs	r7, #22
   1529c:	b2e6      	uxtb	r6, r4
   1529e:	ab02      	add	r3, sp, #8
   152a0:	2206      	movs	r2, #6
   152a2:	fb07 3106 	mla	r1, r7, r6, r3
   152a6:	f10d 0001 	add.w	r0, sp, #1
   152aa:	f013 fcb4 	bl	28c16 <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
   152ae:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
   152b0:	4669      	mov	r1, sp
   152b2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
   152b4:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   152b8:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
   152ba:	f7ff fea3 	bl	15004 <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   152be:	79ea      	ldrb	r2, [r5, #7]
   152c0:	b2e3      	uxtb	r3, r4
   152c2:	429a      	cmp	r2, r3
   152c4:	d8ea      	bhi.n	1529c <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
   152c6:	2000      	movs	r0, #0
   152c8:	b009      	add	sp, #36	; 0x24
   152ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
   152cc:	2100      	movs	r1, #0
   152ce:	4608      	mov	r0, r1
}
   152d0:	b009      	add	sp, #36	; 0x24
   152d2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
   152d6:	f7ff bec3 	b.w	15060 <bt_id_create>
   152da:	bf00      	nop
   152dc:	20000000 	.word	0x20000000

000152e0 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
   152e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   152e4:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
   152e8:	7805      	ldrb	r5, [r0, #0]
{
   152ea:	460e      	mov	r6, r1
   152ec:	4690      	mov	r8, r2
   152ee:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
   152f0:	d026      	beq.n	15340 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
   152f2:	4c23      	ldr	r4, [pc, #140]	; (15380 <bt_id_set_adv_own_addr+0xa0>)
   152f4:	b12a      	cbz	r2, 15302 <bt_id_set_adv_own_addr+0x22>
   152f6:	0688      	lsls	r0, r1, #26
   152f8:	d503      	bpl.n	15302 <bt_id_set_adv_own_addr+0x22>
   152fa:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   152fe:	0659      	lsls	r1, r3, #25
   15300:	d53a      	bpl.n	15378 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15302:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   15306:	ea4f 09c5 	mov.w	r9, r5, lsl #3
   1530a:	5ce3      	ldrb	r3, [r4, r3]
   1530c:	2b01      	cmp	r3, #1
   1530e:	d008      	beq.n	15322 <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
   15310:	eba9 0505 	sub.w	r5, r9, r5
   15314:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15316:	f1b8 0f00 	cmp.w	r8, #0
   1531a:	d10c      	bne.n	15336 <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   1531c:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
   1531e:	2000      	movs	r0, #0
   15320:	e007      	b.n	15332 <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   15322:	2007      	movs	r0, #7
   15324:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   15328:	4420      	add	r0, r4
   1532a:	f7ff fe3d 	bl	14fa8 <set_random_address>
				if (err) {
   1532e:	2800      	cmp	r0, #0
   15330:	d0ee      	beq.n	15310 <bt_id_set_adv_own_addr+0x30>
}
   15332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
   15336:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
   15338:	bf48      	it	mi
   1533a:	f043 0302 	orrmi.w	r3, r3, #2
   1533e:	e7ed      	b.n	1531c <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
   15340:	074b      	lsls	r3, r1, #29
   15342:	d515      	bpl.n	15370 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
   15344:	f8df 8038 	ldr.w	r8, [pc, #56]	; 15380 <bt_id_set_adv_own_addr+0xa0>
   15348:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
   1534c:	00ee      	lsls	r6, r5, #3
   1534e:	f818 3003 	ldrb.w	r3, [r8, r3]
   15352:	2b01      	cmp	r3, #1
   15354:	d10a      	bne.n	1536c <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
   15356:	2007      	movs	r0, #7
   15358:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
   1535c:	4440      	add	r0, r8
   1535e:	f7ff fe23 	bl	14fa8 <set_random_address>
			*own_addr_type = id_addr->type;
   15362:	1b75      	subs	r5, r6, r5
   15364:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15368:	703b      	strb	r3, [r7, #0]
		if (err) {
   1536a:	e7e2      	b.n	15332 <bt_id_set_adv_own_addr+0x52>
	int err = 0;
   1536c:	4620      	mov	r0, r4
   1536e:	e7f8      	b.n	15362 <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
   15370:	f013 fe61 	bl	29036 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
   15374:	2301      	movs	r3, #1
   15376:	e7f7      	b.n	15368 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
   15378:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1537c:	e7d9      	b.n	15332 <bt_id_set_adv_own_addr+0x52>
   1537e:	bf00      	nop
   15380:	20000000 	.word	0x20000000

00015384 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   15384:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15386:	4d14      	ldr	r5, [pc, #80]	; (153d8 <bt_id_init+0x54>)
   15388:	79eb      	ldrb	r3, [r5, #7]
   1538a:	b113      	cbz	r3, 15392 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1538c:	2400      	movs	r4, #0
}
   1538e:	4620      	mov	r0, r4
   15390:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
   15392:	f7ff ff0d 	bl	151b0 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   15396:	79eb      	ldrb	r3, [r5, #7]
   15398:	2b00      	cmp	r3, #0
   1539a:	d1f7      	bne.n	1538c <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1539c:	f7ff ff72 	bl	15284 <bt_setup_random_id_addr>
		if (err) {
   153a0:	4604      	mov	r4, r0
   153a2:	b150      	cbz	r0, 153ba <bt_id_init+0x36>
   153a4:	490d      	ldr	r1, [pc, #52]	; (153dc <bt_id_init+0x58>)
   153a6:	4b0e      	ldr	r3, [pc, #56]	; (153e0 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
   153a8:	480e      	ldr	r0, [pc, #56]	; (153e4 <bt_id_init+0x60>)
   153aa:	1ac9      	subs	r1, r1, r3
   153ac:	08c9      	lsrs	r1, r1, #3
   153ae:	0189      	lsls	r1, r1, #6
   153b0:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   153b4:	f013 f804 	bl	283c0 <log_0>
			return err;
   153b8:	e7e9      	b.n	1538e <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
   153ba:	1c68      	adds	r0, r5, #1
   153bc:	f7ff fdf4 	bl	14fa8 <set_random_address>
		if (err) {
   153c0:	4604      	mov	r4, r0
   153c2:	2800      	cmp	r0, #0
   153c4:	d0e3      	beq.n	1538e <bt_id_init+0xa>
   153c6:	4905      	ldr	r1, [pc, #20]	; (153dc <bt_id_init+0x58>)
   153c8:	4b05      	ldr	r3, [pc, #20]	; (153e0 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
   153ca:	4807      	ldr	r0, [pc, #28]	; (153e8 <bt_id_init+0x64>)
   153cc:	1ac9      	subs	r1, r1, r3
   153ce:	08c9      	lsrs	r1, r1, #3
   153d0:	0189      	lsls	r1, r1, #6
   153d2:	f041 0101 	orr.w	r1, r1, #1
   153d6:	e7ed      	b.n	153b4 <bt_id_init+0x30>
   153d8:	20000000 	.word	0x20000000
   153dc:	0002b330 	.word	0x0002b330
   153e0:	0002b248 	.word	0x0002b248
   153e4:	0002d6f5 	.word	0x0002d6f5
   153e8:	0002d714 	.word	0x0002d714

000153ec <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   153ec:	6843      	ldr	r3, [r0, #4]
{
   153ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
   153f0:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
   153f2:	0558      	lsls	r0, r3, #21
   153f4:	d502      	bpl.n	153fc <valid_adv_param+0x10>
		return false;
   153f6:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
   153f8:	b003      	add	sp, #12
   153fa:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   153fc:	6922      	ldr	r2, [r4, #16]
   153fe:	b10a      	cbz	r2, 15404 <valid_adv_param+0x18>
   15400:	07d9      	lsls	r1, r3, #31
   15402:	d5f8      	bpl.n	153f6 <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
   15404:	4d1a      	ldr	r5, [pc, #104]	; (15470 <valid_adv_param+0x84>)
   15406:	7820      	ldrb	r0, [r4, #0]
   15408:	79eb      	ldrb	r3, [r5, #7]
   1540a:	4283      	cmp	r3, r0
   1540c:	d9f3      	bls.n	153f6 <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
   1540e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   15412:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   15414:	2207      	movs	r2, #7
   15416:	4669      	mov	r1, sp
   15418:	4428      	add	r0, r5
   1541a:	9300      	str	r3, [sp, #0]
   1541c:	f8cd 3003 	str.w	r3, [sp, #3]
   15420:	f013 fbe8 	bl	28bf4 <memcmp>
	if (param->id >= bt_dev.id_count ||
   15424:	2800      	cmp	r0, #0
   15426:	d0e6      	beq.n	153f6 <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15428:	6860      	ldr	r0, [r4, #4]
   1542a:	07c2      	lsls	r2, r0, #31
   1542c:	d406      	bmi.n	1543c <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
   1542e:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
   15432:	2b08      	cmp	r3, #8
   15434:	d802      	bhi.n	1543c <valid_adv_param+0x50>
   15436:	68a3      	ldr	r3, [r4, #8]
   15438:	2b9f      	cmp	r3, #159	; 0x9f
   1543a:	d9dc      	bls.n	153f6 <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
   1543c:	f010 0f30 	tst.w	r0, #48	; 0x30
   15440:	d002      	beq.n	15448 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
   15442:	6923      	ldr	r3, [r4, #16]
   15444:	2b00      	cmp	r3, #0
   15446:	d0d6      	beq.n	153f6 <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
   15448:	06c3      	lsls	r3, r0, #27
   1544a:	d401      	bmi.n	15450 <valid_adv_param+0x64>
   1544c:	6923      	ldr	r3, [r4, #16]
   1544e:	b943      	cbnz	r3, 15462 <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
   15450:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   15454:	429a      	cmp	r2, r3
   15456:	d8ce      	bhi.n	153f6 <valid_adv_param+0xa>
   15458:	2a1f      	cmp	r2, #31
   1545a:	d9cc      	bls.n	153f6 <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
   1545c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
   15460:	d8c9      	bhi.n	153f6 <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
   15462:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
   15466:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
   1546a:	bf18      	it	ne
   1546c:	2001      	movne	r0, #1
   1546e:	e7c3      	b.n	153f8 <valid_adv_param+0xc>
   15470:	20000000 	.word	0x20000000

00015474 <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
   15474:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15478:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1547a:	2120      	movs	r1, #32
{
   1547c:	4682      	mov	sl, r0
   1547e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   15480:	f7fe fcbc 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   15484:	4606      	mov	r6, r0
   15486:	2800      	cmp	r0, #0
   15488:	d05c      	beq.n	15544 <hci_set_ad+0xd0>
	return net_buf_simple_add(&buf->b, len);
   1548a:	2120      	movs	r1, #32
   1548c:	3008      	adds	r0, #8
   1548e:	f014 ff0f 	bl	2a2b0 <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
   15492:	2220      	movs	r2, #32
   15494:	2100      	movs	r1, #0
   15496:	4681      	mov	r9, r0
   15498:	f013 fbe8 	bl	28c6c <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1549c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
   154a0:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
   154a4:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
   154a6:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
   154a8:	f8d4 8000 	ldr.w	r8, [r4]
   154ac:	2300      	movs	r3, #0
   154ae:	6862      	ldr	r2, [r4, #4]
   154b0:	4293      	cmp	r3, r2
   154b2:	d30d      	bcc.n	154d0 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
   154b4:	9b00      	ldr	r3, [sp, #0]
   154b6:	3408      	adds	r4, #8
   154b8:	429c      	cmp	r4, r3
   154ba:	d1f5      	bne.n	154a8 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   154bc:	2200      	movs	r2, #0
   154be:	4631      	mov	r1, r6
   154c0:	4650      	mov	r0, sl
	*data_len = set_data_len;
   154c2:	f889 5000 	strb.w	r5, [r9]
}
   154c6:	b003      	add	sp, #12
   154c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   154cc:	f7fe bcd0 	b.w	13e70 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
   154d0:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   154d4:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   154d8:	1ca8      	adds	r0, r5, #2
   154da:	1881      	adds	r1, r0, r2
   154dc:	291f      	cmp	r1, #31
   154de:	d91a      	bls.n	15516 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   154e0:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   154e4:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
   154e8:	d101      	bne.n	154ee <hci_set_ad+0x7a>
   154ea:	2a00      	cmp	r2, #0
   154ec:	dc11      	bgt.n	15512 <hci_set_ad+0x9e>
   154ee:	4b17      	ldr	r3, [pc, #92]	; (1554c <hci_set_ad+0xd8>)
   154f0:	4917      	ldr	r1, [pc, #92]	; (15550 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
   154f2:	4818      	ldr	r0, [pc, #96]	; (15554 <hci_set_ad+0xe0>)
   154f4:	1ac9      	subs	r1, r1, r3
   154f6:	08c9      	lsrs	r1, r1, #3
   154f8:	0189      	lsls	r1, r1, #6
   154fa:	f041 0101 	orr.w	r1, r1, #1
   154fe:	f012 ff5f 	bl	283c0 <log_0>
		net_buf_unref(buf);
   15502:	4630      	mov	r0, r6
   15504:	f010 f9a2 	bl	2584c <net_buf_unref>
					return -EINVAL;
   15508:	f06f 0015 	mvn.w	r0, #21
}
   1550c:	b003      	add	sp, #12
   1550e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
   15512:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   15516:	b2d7      	uxtb	r7, r2
   15518:	1c79      	adds	r1, r7, #1
   1551a:	f80b 1005 	strb.w	r1, [fp, r5]
   1551e:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   15520:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
   15522:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
   15526:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1552a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1552e:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   15530:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
   15532:	f013 fb70 	bl	28c16 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
   15536:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
   15538:	443d      	add	r5, r7
   1553a:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1553c:	3301      	adds	r3, #1
   1553e:	f108 0808 	add.w	r8, r8, #8
   15542:	e7b4      	b.n	154ae <hci_set_ad+0x3a>
		return -ENOBUFS;
   15544:	f06f 0068 	mvn.w	r0, #104	; 0x68
   15548:	e7e0      	b.n	1550c <hci_set_ad+0x98>
   1554a:	bf00      	nop
   1554c:	0002b248 	.word	0x0002b248
   15550:	0002b250 	.word	0x0002b250
   15554:	0002d737 	.word	0x0002d737

00015558 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
   15558:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
   1555a:	4606      	mov	r6, r0
   1555c:	4b1e      	ldr	r3, [pc, #120]	; (155d8 <le_adv_start_add_conn+0x80>)
   1555e:	f816 2b09 	ldrb.w	r2, [r6], #9
   15562:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
   15566:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15568:	2300      	movs	r3, #0
{
   1556a:	4605      	mov	r5, r0
   1556c:	2207      	movs	r2, #7
   1556e:	460f      	mov	r7, r1
   15570:	4630      	mov	r0, r6
   15572:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
   15574:	9300      	str	r3, [sp, #0]
   15576:	f8cd 3003 	str.w	r3, [sp, #3]
   1557a:	f013 fb3b 	bl	28bf4 <memcmp>
   1557e:	782a      	ldrb	r2, [r5, #0]
   15580:	4604      	mov	r4, r0
   15582:	b9a8      	cbnz	r0, 155b0 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
   15584:	4b15      	ldr	r3, [pc, #84]	; (155dc <le_adv_start_add_conn+0x84>)
   15586:	6818      	ldr	r0, [r3, #0]
   15588:	8899      	ldrh	r1, [r3, #4]
   1558a:	9002      	str	r0, [sp, #8]
   1558c:	799b      	ldrb	r3, [r3, #6]
   1558e:	f8ad 100c 	strh.w	r1, [sp, #12]
   15592:	4610      	mov	r0, r2
   15594:	a902      	add	r1, sp, #8
   15596:	f88d 300e 	strb.w	r3, [sp, #14]
   1559a:	f000 fbeb 	bl	15d74 <bt_conn_add_le>
		if (!conn) {
   1559e:	4605      	mov	r5, r0
   155a0:	b1b8      	cbz	r0, 155d2 <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
   155a2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   155a4:	f000 fc16 	bl	15dd4 <bt_conn_set_state>
	*out_conn = conn;
   155a8:	603d      	str	r5, [r7, #0]
	return 0;
}
   155aa:	4620      	mov	r0, r4
   155ac:	b005      	add	sp, #20
   155ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
   155b0:	4631      	mov	r1, r6
   155b2:	4610      	mov	r0, r2
   155b4:	f000 fd10 	bl	15fd8 <bt_conn_exists_le>
   155b8:	4604      	mov	r4, r0
   155ba:	b938      	cbnz	r0, 155cc <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
   155bc:	7828      	ldrb	r0, [r5, #0]
   155be:	4631      	mov	r1, r6
   155c0:	f000 fbd8 	bl	15d74 <bt_conn_add_le>
	if (!conn) {
   155c4:	4605      	mov	r5, r0
   155c6:	b120      	cbz	r0, 155d2 <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
   155c8:	2105      	movs	r1, #5
   155ca:	e7eb      	b.n	155a4 <le_adv_start_add_conn+0x4c>
		return -EINVAL;
   155cc:	f06f 0415 	mvn.w	r4, #21
   155d0:	e7eb      	b.n	155aa <le_adv_start_add_conn+0x52>
		return -ENOMEM;
   155d2:	f06f 040b 	mvn.w	r4, #11
   155d6:	e7e8      	b.n	155aa <le_adv_start_add_conn+0x52>
   155d8:	20000000 	.word	0x20000000
   155dc:	0002b446 	.word	0x0002b446

000155e0 <bt_le_adv_lookup_legacy>:
}
   155e0:	4800      	ldr	r0, [pc, #0]	; (155e4 <bt_le_adv_lookup_legacy+0x4>)
   155e2:	4770      	bx	lr
   155e4:	20000018 	.word	0x20000018

000155e8 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
   155e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
   155ec:	690e      	ldr	r6, [r1, #16]
{
   155ee:	b08f      	sub	sp, #60	; 0x3c
   155f0:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
   155f2:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
   155f4:	ebb6 0b03 	subs.w	fp, r6, r3
{
   155f8:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   155fa:	488f      	ldr	r0, [pc, #572]	; (15838 <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
   155fc:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
   155fe:	bf18      	it	ne
   15600:	f04f 0b01 	movne.w	fp, #1
   15604:	f013 fd3a 	bl	2907c <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   15608:	0787      	lsls	r7, r0, #30
{
   1560a:	460c      	mov	r4, r1
   1560c:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1560e:	f140 8108 	bpl.w	15822 <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
   15612:	4608      	mov	r0, r1
   15614:	f7ff feea 	bl	153ec <valid_adv_param>
   15618:	b928      	cbnz	r0, 15626 <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
   1561a:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
   1561e:	4658      	mov	r0, fp
   15620:	b00f      	add	sp, #60	; 0x3c
   15622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
   15626:	4620      	mov	r0, r4
   15628:	f013 fd17 	bl	2905a <bt_id_adv_random_addr_check>
   1562c:	4680      	mov	r8, r0
   1562e:	2800      	cmp	r0, #0
   15630:	d0f3      	beq.n	1561a <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   15632:	f105 0710 	add.w	r7, r5, #16
   15636:	4638      	mov	r0, r7
   15638:	f013 fd20 	bl	2907c <atomic_get>
   1563c:	f3c0 1180 	ubfx	r1, r0, #6, #1
   15640:	0640      	lsls	r0, r0, #25
   15642:	f100 80f1 	bmi.w	15828 <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
   15646:	220f      	movs	r2, #15
   15648:	a80a      	add	r0, sp, #40	; 0x28
   1564a:	9105      	str	r1, [sp, #20]
   1564c:	f013 fb0e 	bl	28c6c <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
   15650:	68a3      	ldr	r3, [r4, #8]
   15652:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
   15656:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
   15658:	68e3      	ldr	r3, [r4, #12]
   1565a:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
   1565e:	f013 fcfe 	bl	2905e <get_adv_channel_map>
	if (adv->id != param->id) {
   15662:	782a      	ldrb	r2, [r5, #0]
   15664:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
   15666:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
   15668:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
   1566c:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
   1566e:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
   15672:	d004      	beq.n	1567e <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15674:	4870      	ldr	r0, [pc, #448]	; (15838 <bt_le_adv_start_legacy+0x250>)
   15676:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   1567a:	f013 fd05 	bl	29088 <atomic_and>
	bt_dev.adv_conn_id = adv->id;
   1567e:	4a6f      	ldr	r2, [pc, #444]	; (1583c <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
   15680:	7823      	ldrb	r3, [r4, #0]
   15682:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
   15684:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
   15688:	6861      	ldr	r1, [r4, #4]
   1568a:	465a      	mov	r2, fp
   1568c:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
   15690:	4628      	mov	r0, r5
   15692:	f7ff fe25 	bl	152e0 <bt_id_set_adv_own_addr>
	if (err) {
   15696:	4683      	mov	fp, r0
   15698:	2800      	cmp	r0, #0
   1569a:	d1c0      	bne.n	1561e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
   1569c:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
   156a0:	2e00      	cmp	r6, #0
   156a2:	d04d      	beq.n	15740 <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
   156a4:	6921      	ldr	r1, [r4, #16]
   156a6:	2207      	movs	r2, #7
   156a8:	f013 fab5 	bl	28c16 <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
   156ac:	6860      	ldr	r0, [r4, #4]
   156ae:	07c1      	lsls	r1, r0, #31
   156b0:	d54f      	bpl.n	15752 <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
   156b2:	2e00      	cmp	r6, #0
   156b4:	d04a      	beq.n	1574c <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
   156b6:	f010 0f10 	tst.w	r0, #16
   156ba:	bf14      	ite	ne
   156bc:	2304      	movne	r3, #4
   156be:	2301      	moveq	r3, #1
   156c0:	6921      	ldr	r1, [r4, #16]
   156c2:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   156c6:	2207      	movs	r2, #7
   156c8:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   156cc:	f013 faa3 	bl	28c16 <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
   156d0:	210f      	movs	r1, #15
   156d2:	f242 0006 	movw	r0, #8198	; 0x2006
   156d6:	f7fe fb91 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   156da:	4683      	mov	fp, r0
   156dc:	2800      	cmp	r0, #0
   156de:	f000 80a6 	beq.w	1582e <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   156e2:	220f      	movs	r2, #15
   156e4:	a90a      	add	r1, sp, #40	; 0x28
   156e6:	3008      	adds	r0, #8
   156e8:	f014 fde8 	bl	2a2bc <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
   156ec:	2200      	movs	r2, #0
   156ee:	4659      	mov	r1, fp
   156f0:	f242 0006 	movw	r0, #8198	; 0x2006
   156f4:	f7fe fbbc 	bl	13e70 <bt_hci_cmd_send_sync>
	if (err) {
   156f8:	2800      	cmp	r0, #0
   156fa:	f040 809b 	bne.w	15834 <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
   156fe:	2e00      	cmp	r6, #0
   15700:	d033      	beq.n	1576a <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
   15702:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15704:	07da      	lsls	r2, r3, #31
   15706:	d444      	bmi.n	15792 <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
   15708:	2101      	movs	r1, #1
   1570a:	4628      	mov	r0, r5
   1570c:	f013 fd63 	bl	291d6 <bt_le_adv_set_enable_legacy>
	if (err) {
   15710:	4683      	mov	fp, r0
   15712:	2800      	cmp	r0, #0
   15714:	d07e      	beq.n	15814 <bt_le_adv_start_legacy+0x22c>
   15716:	4b4a      	ldr	r3, [pc, #296]	; (15840 <bt_le_adv_start_legacy+0x258>)
   15718:	494a      	ldr	r1, [pc, #296]	; (15844 <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
   1571a:	484b      	ldr	r0, [pc, #300]	; (15848 <bt_le_adv_start_legacy+0x260>)
   1571c:	1ac9      	subs	r1, r1, r3
   1571e:	08c9      	lsrs	r1, r1, #3
   15720:	0189      	lsls	r1, r1, #6
   15722:	f041 0101 	orr.w	r1, r1, #1
   15726:	f012 fe4b 	bl	283c0 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   1572a:	9807      	ldr	r0, [sp, #28]
   1572c:	2800      	cmp	r0, #0
   1572e:	f43f af76 	beq.w	1561e <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   15732:	2100      	movs	r1, #0
   15734:	f000 fb4e 	bl	15dd4 <bt_conn_set_state>
			bt_conn_unref(conn);
   15738:	9807      	ldr	r0, [sp, #28]
   1573a:	f013 fe2a 	bl	29392 <bt_conn_unref>
   1573e:	e76e      	b.n	1561e <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
   15740:	9608      	str	r6, [sp, #32]
   15742:	2207      	movs	r2, #7
   15744:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
   15748:	a908      	add	r1, sp, #32
   1574a:	e7ad      	b.n	156a8 <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
   1574c:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
   15750:	e7be      	b.n	156d0 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15752:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15754:	b933      	cbnz	r3, 15764 <bt_le_adv_start_legacy+0x17c>
   15756:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
   1575a:	f1c8 0303 	rsb	r3, r8, #3
   1575e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
   15762:	e7b5      	b.n	156d0 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
   15764:	f04f 0801 	mov.w	r8, #1
   15768:	e7f7      	b.n	1575a <bt_le_adv_start_legacy+0x172>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
   1576a:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
   1576c:	f3c3 4280 	ubfx	r2, r3, #18, #1
   15770:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   15774:	e9cd 8301 	strd	r8, r3, [sp, #4]
   15778:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1577a:	9203      	str	r2, [sp, #12]
   1577c:	9300      	str	r3, [sp, #0]
   1577e:	4652      	mov	r2, sl
   15780:	9b18      	ldr	r3, [sp, #96]	; 0x60
   15782:	4649      	mov	r1, r9
   15784:	4628      	mov	r0, r5
   15786:	f013 fca5 	bl	290d4 <le_adv_update.constprop.0>
		if (err) {
   1578a:	4683      	mov	fp, r0
   1578c:	2800      	cmp	r0, #0
   1578e:	d0b8      	beq.n	15702 <bt_le_adv_start_legacy+0x11a>
   15790:	e745      	b.n	1561e <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
   15792:	a907      	add	r1, sp, #28
   15794:	4628      	mov	r0, r5
   15796:	f7ff fedf 	bl	15558 <le_adv_start_add_conn>
		if (err) {
   1579a:	4683      	mov	fp, r0
   1579c:	2800      	cmp	r0, #0
   1579e:	d0b3      	beq.n	15708 <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
   157a0:	f110 0f0c 	cmn.w	r0, #12
   157a4:	f47f af3b 	bne.w	1561e <bt_le_adv_start_legacy+0x36>
   157a8:	2e00      	cmp	r6, #0
   157aa:	f47f af38 	bne.w	1561e <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
   157ae:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
   157b0:	079b      	lsls	r3, r3, #30
   157b2:	f53f af34 	bmi.w	1561e <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   157b6:	6860      	ldr	r0, [r4, #4]
   157b8:	f080 0002 	eor.w	r0, r0, #2
   157bc:	f3c0 0b40 	ubfx	fp, r0, #1, #1
   157c0:	f00b 0201 	and.w	r2, fp, #1
   157c4:	210c      	movs	r1, #12
   157c6:	4638      	mov	r0, r7
   157c8:	f013 fc6d 	bl	290a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
   157cc:	6862      	ldr	r2, [r4, #4]
   157ce:	2107      	movs	r1, #7
   157d0:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   157d4:	4638      	mov	r0, r7
   157d6:	f013 fc66 	bl	290a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
   157da:	6862      	ldr	r2, [r4, #4]
   157dc:	2112      	movs	r1, #18
   157de:	f3c2 4280 	ubfx	r2, r2, #18, #1
   157e2:	4638      	mov	r0, r7
   157e4:	f013 fc5f 	bl	290a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
   157e8:	6862      	ldr	r2, [r4, #4]
   157ea:	2108      	movs	r1, #8
   157ec:	f002 0201 	and.w	r2, r2, #1
   157f0:	4638      	mov	r0, r7
   157f2:	f013 fc58 	bl	290a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
   157f6:	4642      	mov	r2, r8
   157f8:	2109      	movs	r1, #9
   157fa:	4638      	mov	r0, r7
   157fc:	f013 fc53 	bl	290a6 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
   15800:	6862      	ldr	r2, [r4, #4]
   15802:	210b      	movs	r1, #11
   15804:	f3c2 0280 	ubfx	r2, r2, #2, #1
   15808:	4638      	mov	r0, r7
   1580a:	f013 fc4c 	bl	290a6 <atomic_set_bit_to>
	return 0;
   1580e:	f04f 0b00 	mov.w	fp, #0
   15812:	e704      	b.n	1561e <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
   15814:	9807      	ldr	r0, [sp, #28]
   15816:	b108      	cbz	r0, 1581c <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
   15818:	f013 fdbb 	bl	29392 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
   1581c:	2e00      	cmp	r6, #0
   1581e:	d1cf      	bne.n	157c0 <bt_le_adv_start_legacy+0x1d8>
   15820:	e7c9      	b.n	157b6 <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
   15822:	f06f 0b0a 	mvn.w	fp, #10
   15826:	e6fa      	b.n	1561e <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
   15828:	f06f 0b77 	mvn.w	fp, #119	; 0x77
   1582c:	e6f7      	b.n	1561e <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
   1582e:	f06f 0b68 	mvn.w	fp, #104	; 0x68
   15832:	e6f4      	b.n	1561e <bt_le_adv_start_legacy+0x36>
   15834:	4683      	mov	fp, r0
   15836:	e6f2      	b.n	1561e <bt_le_adv_start_legacy+0x36>
   15838:	20000098 	.word	0x20000098
   1583c:	20000000 	.word	0x20000000
   15840:	0002b248 	.word	0x0002b248
   15844:	0002b250 	.word	0x0002b250
   15848:	0002d750 	.word	0x0002d750

0001584c <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
   1584c:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
   1584e:	9c04      	ldr	r4, [sp, #16]
   15850:	e9cd 3400 	strd	r3, r4, [sp]
   15854:	4613      	mov	r3, r2
   15856:	460a      	mov	r2, r1
   15858:	4601      	mov	r1, r0
   1585a:	4802      	ldr	r0, [pc, #8]	; (15864 <bt_le_adv_start+0x18>)
   1585c:	f7ff fec4 	bl	155e8 <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
   15860:	b002      	add	sp, #8
   15862:	bd10      	pop	{r4, pc}
   15864:	20000018 	.word	0x20000018

00015868 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
   15868:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1586a:	481e      	ldr	r0, [pc, #120]	; (158e4 <bt_le_adv_resume+0x7c>)
   1586c:	4c1d      	ldr	r4, [pc, #116]	; (158e4 <bt_le_adv_resume+0x7c>)
   1586e:	f013 fc05 	bl	2907c <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
   15872:	f410 5f80 	tst.w	r0, #4096	; 0x1000
   15876:	d032      	beq.n	158de <bt_le_adv_resume+0x76>
   15878:	4620      	mov	r0, r4
   1587a:	f013 fbff 	bl	2907c <atomic_get>
   1587e:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   15880:	f3c0 1580 	ubfx	r5, r0, #6, #1
   15884:	d42b      	bmi.n	158de <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   15886:	4620      	mov	r0, r4
   15888:	f013 fbf8 	bl	2907c <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
   1588c:	05c3      	lsls	r3, r0, #23
   1588e:	d526      	bpl.n	158de <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
   15890:	a901      	add	r1, sp, #4
   15892:	f1a4 0010 	sub.w	r0, r4, #16
   15896:	f7ff fe5f 	bl	15558 <le_adv_start_add_conn>
	if (err) {
   1589a:	bb00      	cbnz	r0, 158de <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
   1589c:	2101      	movs	r1, #1
   1589e:	f1a4 0010 	sub.w	r0, r4, #16
   158a2:	f013 fc98 	bl	291d6 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
   158a6:	b150      	cbz	r0, 158be <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   158a8:	4629      	mov	r1, r5
   158aa:	9801      	ldr	r0, [sp, #4]
   158ac:	f000 fa92 	bl	15dd4 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   158b0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   158b4:	4620      	mov	r0, r4
   158b6:	f013 fbe7 	bl	29088 <atomic_and>
	return (old & mask) != 0;
   158ba:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
   158be:	9801      	ldr	r0, [sp, #4]
   158c0:	f013 fd67 	bl	29392 <bt_conn_unref>
	if (persist_paused) {
   158c4:	b15d      	cbz	r5, 158de <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   158c6:	f3bf 8f5b 	dmb	ish
   158ca:	e854 3f00 	ldrex	r3, [r4]
   158ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   158d2:	e844 3200 	strex	r2, r3, [r4]
   158d6:	2a00      	cmp	r2, #0
   158d8:	d1f7      	bne.n	158ca <bt_le_adv_resume+0x62>
   158da:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
   158de:	b003      	add	sp, #12
   158e0:	bd30      	pop	{r4, r5, pc}
   158e2:	bf00      	nop
   158e4:	20000028 	.word	0x20000028

000158e8 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   158e8:	2300      	movs	r3, #0
	tx->user_data = NULL;
   158ea:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   158ee:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   158f0:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   158f2:	4801      	ldr	r0, [pc, #4]	; (158f8 <tx_free+0x10>)
   158f4:	f014 bf3f 	b.w	2a776 <k_queue_append>
   158f8:	20000714 	.word	0x20000714

000158fc <notify_connected>:
{
   158fc:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   158fe:	4b09      	ldr	r3, [pc, #36]	; (15924 <notify_connected+0x28>)
   15900:	681d      	ldr	r5, [r3, #0]
{
   15902:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
   15904:	7a61      	ldrb	r1, [r4, #9]
	for (cb = callback_list; cb; cb = cb->_next) {
   15906:	b92d      	cbnz	r5, 15914 <notify_connected+0x18>
	if (!conn->err) {
   15908:	b951      	cbnz	r1, 15920 <notify_connected+0x24>
		bt_gatt_connected(conn);
   1590a:	4620      	mov	r0, r4
}
   1590c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
   15910:	f002 bbbe 	b.w	18090 <bt_gatt_connected>
		if (cb->connected) {
   15914:	682b      	ldr	r3, [r5, #0]
   15916:	b10b      	cbz	r3, 1591c <notify_connected+0x20>
			cb->connected(conn, conn->err);
   15918:	4620      	mov	r0, r4
   1591a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1591c:	692d      	ldr	r5, [r5, #16]
   1591e:	e7f1      	b.n	15904 <notify_connected+0x8>
}
   15920:	bd38      	pop	{r3, r4, r5, pc}
   15922:	bf00      	nop
   15924:	200012a8 	.word	0x200012a8

00015928 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
   15928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1592c:	694d      	ldr	r5, [r1, #20]
{
   1592e:	4604      	mov	r4, r0
   15930:	460e      	mov	r6, r1
   15932:	4691      	mov	r9, r2
   15934:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   15936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1593a:	4844      	ldr	r0, [pc, #272]	; (15a4c <send_frag+0x124>)
   1593c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   15940:	f011 f92e 	bl	26ba0 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
   15944:	7aa3      	ldrb	r3, [r4, #10]
   15946:	2b07      	cmp	r3, #7
   15948:	d151      	bne.n	159ee <send_frag+0xc6>
	__asm__ volatile(
   1594a:	f04f 0320 	mov.w	r3, #32
   1594e:	f3ef 8211 	mrs	r2, BASEPRI
   15952:	f383 8811 	msr	BASEPRI, r3
   15956:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
   1595a:	69a3      	ldr	r3, [r4, #24]
   1595c:	2d00      	cmp	r5, #0
   1595e:	d058      	beq.n	15a12 <send_frag+0xea>
	parent->next = child;
   15960:	2100      	movs	r1, #0
   15962:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   15964:	2b00      	cmp	r3, #0
   15966:	d151      	bne.n	15a0c <send_frag+0xe4>
	list->head = node;
   15968:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1596c:	f382 8811 	msr	BASEPRI, r2
   15970:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   15974:	2104      	movs	r1, #4
   15976:	f106 0008 	add.w	r0, r6, #8
   1597a:	f014 fcb0 	bl	2a2de <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1597e:	8823      	ldrh	r3, [r4, #0]
   15980:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   15984:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   15988:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1598a:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1598e:	3b04      	subs	r3, #4
   15990:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   15992:	2302      	movs	r3, #2
   15994:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   15996:	4630      	mov	r0, r6
   15998:	f7fe fb0e 	bl	13fb8 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
   1599c:	4601      	mov	r1, r0
   1599e:	2800      	cmp	r0, #0
   159a0:	d051      	beq.n	15a46 <send_frag+0x11e>
   159a2:	4b2b      	ldr	r3, [pc, #172]	; (15a50 <send_frag+0x128>)
   159a4:	4a2b      	ldr	r2, [pc, #172]	; (15a54 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
   159a6:	482c      	ldr	r0, [pc, #176]	; (15a58 <send_frag+0x130>)
   159a8:	1ad2      	subs	r2, r2, r3
   159aa:	08d2      	lsrs	r2, r2, #3
   159ac:	0192      	lsls	r2, r2, #6
   159ae:	f042 0201 	orr.w	r2, r2, #1
   159b2:	f012 fd12 	bl	283da <log_1>
	__asm__ volatile(
   159b6:	f04f 0320 	mov.w	r3, #32
   159ba:	f3ef 8011 	mrs	r0, BASEPRI
   159be:	f383 8811 	msr	BASEPRI, r3
   159c2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
   159c6:	2d00      	cmp	r5, #0
   159c8:	d037      	beq.n	15a3a <send_frag+0x112>
	return list->head;
   159ca:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   159cc:	2200      	movs	r2, #0
   159ce:	b153      	cbz	r3, 159e6 <send_frag+0xbe>
   159d0:	429d      	cmp	r5, r3
   159d2:	d12f      	bne.n	15a34 <send_frag+0x10c>
	return node->next;
   159d4:	682b      	ldr	r3, [r5, #0]
	return list->tail;
   159d6:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
   159d8:	bb3a      	cbnz	r2, 15a2a <send_frag+0x102>
   159da:	42a9      	cmp	r1, r5
	list->head = node;
   159dc:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   159de:	d100      	bne.n	159e2 <send_frag+0xba>
	list->tail = node;
   159e0:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   159e2:	2300      	movs	r3, #0
   159e4:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   159e6:	f380 8811 	msr	BASEPRI, r0
   159ea:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   159ee:	4817      	ldr	r0, [pc, #92]	; (15a4c <send_frag+0x124>)
   159f0:	f011 f8b0 	bl	26b54 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
   159f4:	b115      	cbz	r5, 159fc <send_frag+0xd4>
		tx_free(tx);
   159f6:	4628      	mov	r0, r5
   159f8:	f7ff ff76 	bl	158e8 <tx_free>
	}

	if (always_consume) {
   159fc:	b11f      	cbz	r7, 15a06 <send_frag+0xde>
		net_buf_unref(buf);
   159fe:	4630      	mov	r0, r6
   15a00:	f00f ff24 	bl	2584c <net_buf_unref>
	}
	return false;
   15a04:	2700      	movs	r7, #0
}
   15a06:	4638      	mov	r0, r7
   15a08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15a0c:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15a0e:	61a5      	str	r5, [r4, #24]
}
   15a10:	e7ac      	b.n	1596c <send_frag+0x44>
		if (tail_tx) {
   15a12:	b133      	cbz	r3, 15a22 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
   15a14:	f103 080c 	add.w	r8, r3, #12
   15a18:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   15a1a:	3301      	adds	r3, #1
   15a1c:	f8c8 3000 	str.w	r3, [r8]
   15a20:	e7a4      	b.n	1596c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   15a22:	69e3      	ldr	r3, [r4, #28]
   15a24:	f104 081c 	add.w	r8, r4, #28
   15a28:	e7f7      	b.n	15a1a <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
   15a2a:	42a9      	cmp	r1, r5
	parent->next = child;
   15a2c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15a2e:	bf08      	it	eq
   15a30:	61a2      	streq	r2, [r4, #24]
}
   15a32:	e7d6      	b.n	159e2 <send_frag+0xba>
	return node->next;
   15a34:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   15a36:	681b      	ldr	r3, [r3, #0]
   15a38:	e7c9      	b.n	159ce <send_frag+0xa6>
			(*pending_no_cb)--;
   15a3a:	f8d8 3000 	ldr.w	r3, [r8]
   15a3e:	3b01      	subs	r3, #1
   15a40:	f8c8 3000 	str.w	r3, [r8]
   15a44:	e7cf      	b.n	159e6 <send_frag+0xbe>
	return true;
   15a46:	2701      	movs	r7, #1
   15a48:	e7dd      	b.n	15a06 <send_frag+0xde>
   15a4a:	bf00      	nop
   15a4c:	200000d0 	.word	0x200000d0
   15a50:	0002b248 	.word	0x0002b248
   15a54:	0002b268 	.word	0x0002b268
   15a58:	0002d289 	.word	0x0002d289

00015a5c <bt_conn_get_pkts>:
}
   15a5c:	4800      	ldr	r0, [pc, #0]	; (15a60 <bt_conn_get_pkts+0x4>)
   15a5e:	4770      	bx	lr
   15a60:	200000d0 	.word	0x200000d0

00015a64 <notify_le_param_updated>:
{
   15a64:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15a66:	f3bf 8f5b 	dmb	ish
   15a6a:	6842      	ldr	r2, [r0, #4]
   15a6c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15a70:	0592      	lsls	r2, r2, #22
{
   15a72:	4604      	mov	r4, r0
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15a74:	f100 0304 	add.w	r3, r0, #4
   15a78:	d519      	bpl.n	15aae <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15a7a:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
   15a7e:	f8b0 10a0 	ldrh.w	r1, [r0, #160]	; 0xa0
   15a82:	4291      	cmp	r1, r2
   15a84:	d813      	bhi.n	15aae <notify_le_param_updated+0x4a>
	    conn->le.interval >= conn->le.interval_min &&
   15a86:	f8b0 10a2 	ldrh.w	r1, [r0, #162]	; 0xa2
   15a8a:	4291      	cmp	r1, r2
   15a8c:	d30f      	bcc.n	15aae <notify_le_param_updated+0x4a>
	    conn->le.latency == conn->le.pending_latency &&
   15a8e:	e9d0 1229 	ldrd	r1, r2, [r0, #164]	; 0xa4
   15a92:	4291      	cmp	r1, r2
   15a94:	d10b      	bne.n	15aae <notify_le_param_updated+0x4a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15a96:	f3bf 8f5b 	dmb	ish
   15a9a:	e853 2f00 	ldrex	r2, [r3]
   15a9e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   15aa2:	e843 2100 	strex	r1, r2, [r3]
   15aa6:	2900      	cmp	r1, #0
   15aa8:	d1f7      	bne.n	15a9a <notify_le_param_updated+0x36>
   15aaa:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
   15aae:	4b08      	ldr	r3, [pc, #32]	; (15ad0 <notify_le_param_updated+0x6c>)
   15ab0:	681d      	ldr	r5, [r3, #0]
   15ab2:	b905      	cbnz	r5, 15ab6 <notify_le_param_updated+0x52>
}
   15ab4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
   15ab6:	68ee      	ldr	r6, [r5, #12]
   15ab8:	b13e      	cbz	r6, 15aca <notify_le_param_updated+0x66>
			cb->le_param_updated(conn, conn->le.interval,
   15aba:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
   15abe:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
   15ac2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
   15ac6:	4620      	mov	r0, r4
   15ac8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   15aca:	692d      	ldr	r5, [r5, #16]
   15acc:	e7f1      	b.n	15ab2 <notify_le_param_updated+0x4e>
   15ace:	bf00      	nop
   15ad0:	200012a8 	.word	0x200012a8

00015ad4 <le_param_req>:
{
   15ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15ad6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
   15ad8:	4608      	mov	r0, r1
{
   15ada:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   15adc:	f013 f9d0 	bl	28e80 <bt_le_conn_params_valid>
   15ae0:	4604      	mov	r4, r0
   15ae2:	b910      	cbnz	r0, 15aea <le_param_req+0x16>
		return false;
   15ae4:	2400      	movs	r4, #0
}
   15ae6:	4620      	mov	r0, r4
   15ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   15aea:	4b09      	ldr	r3, [pc, #36]	; (15b10 <le_param_req+0x3c>)
   15aec:	681e      	ldr	r6, [r3, #0]
   15aee:	2e00      	cmp	r6, #0
   15af0:	d0f9      	beq.n	15ae6 <le_param_req+0x12>
		if (!cb->le_param_req) {
   15af2:	68b3      	ldr	r3, [r6, #8]
   15af4:	b90b      	cbnz	r3, 15afa <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
   15af6:	6936      	ldr	r6, [r6, #16]
   15af8:	e7f9      	b.n	15aee <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
   15afa:	4629      	mov	r1, r5
   15afc:	4638      	mov	r0, r7
   15afe:	4798      	blx	r3
   15b00:	2800      	cmp	r0, #0
   15b02:	d0ef      	beq.n	15ae4 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
   15b04:	4628      	mov	r0, r5
   15b06:	f013 f9bb 	bl	28e80 <bt_le_conn_params_valid>
   15b0a:	2800      	cmp	r0, #0
   15b0c:	d1f3      	bne.n	15af6 <le_param_req+0x22>
   15b0e:	e7e9      	b.n	15ae4 <le_param_req+0x10>
   15b10:	200012a8 	.word	0x200012a8

00015b14 <bt_conn_cb_register>:
	cb->_next = callback_list;
   15b14:	4b02      	ldr	r3, [pc, #8]	; (15b20 <bt_conn_cb_register+0xc>)
   15b16:	681a      	ldr	r2, [r3, #0]
   15b18:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   15b1a:	6018      	str	r0, [r3, #0]
}
   15b1c:	4770      	bx	lr
   15b1e:	bf00      	nop
   15b20:	200012a8 	.word	0x200012a8

00015b24 <bt_conn_recv>:
{
   15b24:	b570      	push	{r4, r5, r6, lr}
   15b26:	4616      	mov	r6, r2
   15b28:	4604      	mov	r4, r0
   15b2a:	460d      	mov	r5, r1
	tx_notify(conn);
   15b2c:	f013 fb78 	bl	29220 <tx_notify>
	switch (flags) {
   15b30:	2e01      	cmp	r6, #1
   15b32:	d02b      	beq.n	15b8c <bt_conn_recv+0x68>
   15b34:	2e02      	cmp	r6, #2
   15b36:	d158      	bne.n	15bea <bt_conn_recv+0xc6>
		if (conn->rx) {
   15b38:	6923      	ldr	r3, [r4, #16]
   15b3a:	b163      	cbz	r3, 15b56 <bt_conn_recv+0x32>
   15b3c:	4b35      	ldr	r3, [pc, #212]	; (15c14 <bt_conn_recv+0xf0>)
   15b3e:	4936      	ldr	r1, [pc, #216]	; (15c18 <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
   15b40:	4836      	ldr	r0, [pc, #216]	; (15c1c <bt_conn_recv+0xf8>)
   15b42:	1ac9      	subs	r1, r1, r3
   15b44:	08c9      	lsrs	r1, r1, #3
   15b46:	0189      	lsls	r1, r1, #6
   15b48:	f041 0101 	orr.w	r1, r1, #1
   15b4c:	f012 fc38 	bl	283c0 <log_0>
			bt_conn_reset_rx_state(conn);
   15b50:	4620      	mov	r0, r4
   15b52:	f013 fbb3 	bl	292bc <bt_conn_reset_rx_state>
		conn->rx = buf;
   15b56:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   15b58:	6923      	ldr	r3, [r4, #16]
   15b5a:	8999      	ldrh	r1, [r3, #12]
   15b5c:	2901      	cmp	r1, #1
   15b5e:	d958      	bls.n	15c12 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   15b60:	689a      	ldr	r2, [r3, #8]
   15b62:	8812      	ldrh	r2, [r2, #0]
   15b64:	3204      	adds	r2, #4
   15b66:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   15b68:	4291      	cmp	r1, r2
   15b6a:	d352      	bcc.n	15c12 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
   15b6c:	d949      	bls.n	15c02 <bt_conn_recv+0xde>
   15b6e:	4829      	ldr	r0, [pc, #164]	; (15c14 <bt_conn_recv+0xf0>)
   15b70:	4b29      	ldr	r3, [pc, #164]	; (15c18 <bt_conn_recv+0xf4>)
   15b72:	1a1b      	subs	r3, r3, r0
   15b74:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
   15b76:	019b      	lsls	r3, r3, #6
   15b78:	4829      	ldr	r0, [pc, #164]	; (15c20 <bt_conn_recv+0xfc>)
   15b7a:	f043 0301 	orr.w	r3, r3, #1
   15b7e:	f012 fc40 	bl	28402 <log_2>
		bt_conn_reset_rx_state(conn);
   15b82:	4620      	mov	r0, r4
}
   15b84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   15b88:	f013 bb98 	b.w	292bc <bt_conn_reset_rx_state>
		if (!conn->rx) {
   15b8c:	6920      	ldr	r0, [r4, #16]
   15b8e:	b968      	cbnz	r0, 15bac <bt_conn_recv+0x88>
   15b90:	4921      	ldr	r1, [pc, #132]	; (15c18 <bt_conn_recv+0xf4>)
   15b92:	4b20      	ldr	r3, [pc, #128]	; (15c14 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
   15b94:	4823      	ldr	r0, [pc, #140]	; (15c24 <bt_conn_recv+0x100>)
   15b96:	1ac9      	subs	r1, r1, r3
   15b98:	08c9      	lsrs	r1, r1, #3
   15b9a:	0189      	lsls	r1, r1, #6
   15b9c:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
   15ba0:	f012 fc0e 	bl	283c0 <log_0>
			bt_conn_reset_rx_state(conn);
   15ba4:	4620      	mov	r0, r4
   15ba6:	f013 fb89 	bl	292bc <bt_conn_reset_rx_state>
   15baa:	e001      	b.n	15bb0 <bt_conn_recv+0x8c>
		if (!buf->len) {
   15bac:	89ae      	ldrh	r6, [r5, #12]
   15bae:	b926      	cbnz	r6, 15bba <bt_conn_recv+0x96>
			net_buf_unref(buf);
   15bb0:	4628      	mov	r0, r5
}
   15bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   15bb6:	f00f be49 	b.w	2584c <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   15bba:	3008      	adds	r0, #8
   15bbc:	f014 fbb3 	bl	2a326 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   15bc0:	4286      	cmp	r6, r0
   15bc2:	d908      	bls.n	15bd6 <bt_conn_recv+0xb2>
   15bc4:	4914      	ldr	r1, [pc, #80]	; (15c18 <bt_conn_recv+0xf4>)
   15bc6:	4b13      	ldr	r3, [pc, #76]	; (15c14 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
   15bc8:	4817      	ldr	r0, [pc, #92]	; (15c28 <bt_conn_recv+0x104>)
   15bca:	1ac9      	subs	r1, r1, r3
   15bcc:	08c9      	lsrs	r1, r1, #3
   15bce:	0189      	lsls	r1, r1, #6
   15bd0:	f041 0101 	orr.w	r1, r1, #1
   15bd4:	e7e4      	b.n	15ba0 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   15bd6:	6920      	ldr	r0, [r4, #16]
   15bd8:	89aa      	ldrh	r2, [r5, #12]
   15bda:	68a9      	ldr	r1, [r5, #8]
   15bdc:	3008      	adds	r0, #8
   15bde:	f014 fb6d 	bl	2a2bc <net_buf_simple_add_mem>
		net_buf_unref(buf);
   15be2:	4628      	mov	r0, r5
   15be4:	f00f fe32 	bl	2584c <net_buf_unref>
		break;
   15be8:	e7b6      	b.n	15b58 <bt_conn_recv+0x34>
   15bea:	4a0a      	ldr	r2, [pc, #40]	; (15c14 <bt_conn_recv+0xf0>)
   15bec:	4b0a      	ldr	r3, [pc, #40]	; (15c18 <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   15bee:	480f      	ldr	r0, [pc, #60]	; (15c2c <bt_conn_recv+0x108>)
   15bf0:	1a9b      	subs	r3, r3, r2
   15bf2:	08db      	lsrs	r3, r3, #3
   15bf4:	019b      	lsls	r3, r3, #6
   15bf6:	f043 0201 	orr.w	r2, r3, #1
   15bfa:	4631      	mov	r1, r6
   15bfc:	f012 fbed 	bl	283da <log_1>
		bt_conn_reset_rx_state(conn);
   15c00:	e7d0      	b.n	15ba4 <bt_conn_recv+0x80>
	conn->rx = NULL;
   15c02:	2200      	movs	r2, #0
   15c04:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
   15c06:	4620      	mov	r0, r4
   15c08:	4619      	mov	r1, r3
}
   15c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   15c0e:	f000 bce5 	b.w	165dc <bt_l2cap_recv>
}
   15c12:	bd70      	pop	{r4, r5, r6, pc}
   15c14:	0002b248 	.word	0x0002b248
   15c18:	0002b268 	.word	0x0002b268
   15c1c:	0002d772 	.word	0x0002d772
   15c20:	0002d7f2 	.word	0x0002d7f2
   15c24:	0002d78f 	.word	0x0002d78f
   15c28:	0002d7ad 	.word	0x0002d7ad
   15c2c:	0002d7d4 	.word	0x0002d7d4

00015c30 <bt_conn_send_cb>:
{
   15c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c34:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   15c36:	7a83      	ldrb	r3, [r0, #10]
   15c38:	2b07      	cmp	r3, #7
{
   15c3a:	4605      	mov	r5, r0
   15c3c:	460e      	mov	r6, r1
   15c3e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   15c40:	d00c      	beq.n	15c5c <bt_conn_send_cb+0x2c>
   15c42:	4926      	ldr	r1, [pc, #152]	; (15cdc <bt_conn_send_cb+0xac>)
   15c44:	4b26      	ldr	r3, [pc, #152]	; (15ce0 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
   15c46:	4827      	ldr	r0, [pc, #156]	; (15ce4 <bt_conn_send_cb+0xb4>)
   15c48:	1ac9      	subs	r1, r1, r3
   15c4a:	08c9      	lsrs	r1, r1, #3
   15c4c:	0189      	lsls	r1, r1, #6
   15c4e:	f041 0101 	orr.w	r1, r1, #1
   15c52:	f012 fbb5 	bl	283c0 <log_0>
			return -ENOTCONN;
   15c56:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   15c5a:	e01d      	b.n	15c98 <bt_conn_send_cb+0x68>
	if (cb) {
   15c5c:	2a00      	cmp	r2, #0
   15c5e:	d03a      	beq.n	15cd6 <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
   15c60:	f011 fc22 	bl	274a8 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   15c64:	4b20      	ldr	r3, [pc, #128]	; (15ce8 <bt_conn_send_cb+0xb8>)
   15c66:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   15c68:	4820      	ldr	r0, [pc, #128]	; (15cec <bt_conn_send_cb+0xbc>)
   15c6a:	bf07      	ittee	eq
   15c6c:	2200      	moveq	r2, #0
   15c6e:	2300      	moveq	r3, #0
   15c70:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
   15c74:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   15c78:	f010 ff38 	bl	26aec <z_impl_k_queue_get>
   15c7c:	4604      	mov	r4, r0
		if (!tx) {
   15c7e:	b968      	cbnz	r0, 15c9c <bt_conn_send_cb+0x6c>
   15c80:	4b17      	ldr	r3, [pc, #92]	; (15ce0 <bt_conn_send_cb+0xb0>)
   15c82:	4916      	ldr	r1, [pc, #88]	; (15cdc <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
   15c84:	481a      	ldr	r0, [pc, #104]	; (15cf0 <bt_conn_send_cb+0xc0>)
   15c86:	1ac9      	subs	r1, r1, r3
   15c88:	08c9      	lsrs	r1, r1, #3
   15c8a:	0189      	lsls	r1, r1, #6
   15c8c:	f041 0101 	orr.w	r1, r1, #1
   15c90:	f012 fb96 	bl	283c0 <log_0>
			return -ENOBUFS;
   15c94:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   15c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
   15c9c:	7aab      	ldrb	r3, [r5, #10]
   15c9e:	2b07      	cmp	r3, #7
   15ca0:	d00d      	beq.n	15cbe <bt_conn_send_cb+0x8e>
   15ca2:	4b0f      	ldr	r3, [pc, #60]	; (15ce0 <bt_conn_send_cb+0xb0>)
   15ca4:	490d      	ldr	r1, [pc, #52]	; (15cdc <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
   15ca6:	4813      	ldr	r0, [pc, #76]	; (15cf4 <bt_conn_send_cb+0xc4>)
   15ca8:	1ac9      	subs	r1, r1, r3
   15caa:	08c9      	lsrs	r1, r1, #3
   15cac:	0189      	lsls	r1, r1, #6
   15cae:	f041 0102 	orr.w	r1, r1, #2
   15cb2:	f012 fb85 	bl	283c0 <log_0>
			tx_free(tx);
   15cb6:	4620      	mov	r0, r4
   15cb8:	f7ff fe16 	bl	158e8 <tx_free>
   15cbc:	e7cb      	b.n	15c56 <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
   15cbe:	2300      	movs	r3, #0
		tx->user_data = user_data;
   15cc0:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   15cc4:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   15cc6:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   15cc8:	f105 0038 	add.w	r0, r5, #56	; 0x38
   15ccc:	4631      	mov	r1, r6
   15cce:	f014 fab0 	bl	2a232 <net_buf_put>
	return 0;
   15cd2:	2000      	movs	r0, #0
   15cd4:	e7e0      	b.n	15c98 <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
   15cd6:	614a      	str	r2, [r1, #20]
   15cd8:	e7f6      	b.n	15cc8 <bt_conn_send_cb+0x98>
   15cda:	bf00      	nop
   15cdc:	0002b268 	.word	0x0002b268
   15ce0:	0002b248 	.word	0x0002b248
   15ce4:	0002d80d 	.word	0x0002d80d
   15ce8:	200010e0 	.word	0x200010e0
   15cec:	20000714 	.word	0x20000714
   15cf0:	0002d81c 	.word	0x0002d81c
   15cf4:	0002d83a 	.word	0x0002d83a

00015cf8 <bt_conn_prepare_events>:
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
   15cf8:	4b1b      	ldr	r3, [pc, #108]	; (15d68 <bt_conn_prepare_events+0x70>)
{
   15cfa:	b510      	push	{r4, lr}
	conn_change.signaled = 0U;
   15cfc:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15cfe:	2101      	movs	r1, #1
	conn_change.signaled = 0U;
   15d00:	609a      	str	r2, [r3, #8]
{
   15d02:	4604      	mov	r4, r0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   15d04:	f015 f95f 	bl	2afc6 <k_poll_event_init>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   15d08:	f3bf 8f5b 	dmb	ish
   15d0c:	4b17      	ldr	r3, [pc, #92]	; (15d6c <bt_conn_prepare_events+0x74>)
   15d0e:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
   15d12:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
   15d16:	f104 0014 	add.w	r0, r4, #20
	if (!atomic_get(&conn->ref)) {
   15d1a:	b90a      	cbnz	r2, 15d20 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
   15d1c:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
   15d1e:	bd10      	pop	{r4, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   15d20:	7a9a      	ldrb	r2, [r3, #10]
   15d22:	b99a      	cbnz	r2, 15d4c <bt_conn_prepare_events+0x54>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15d24:	f3bf 8f5b 	dmb	ish
   15d28:	1d1a      	adds	r2, r3, #4
   15d2a:	e852 1f00 	ldrex	r1, [r2]
   15d2e:	f021 0c40 	bic.w	ip, r1, #64	; 0x40
   15d32:	e842 ce00 	strex	lr, ip, [r2]
   15d36:	f1be 0f00 	cmp.w	lr, #0
   15d3a:	d1f6      	bne.n	15d2a <bt_conn_prepare_events+0x32>
   15d3c:	f3bf 8f5b 	dmb	ish
   15d40:	064a      	lsls	r2, r1, #25
   15d42:	d503      	bpl.n	15d4c <bt_conn_prepare_events+0x54>
		conn_cleanup(conn);
   15d44:	4618      	mov	r0, r3
   15d46:	f013 fac2 	bl	292ce <conn_cleanup>
   15d4a:	e7e7      	b.n	15d1c <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
   15d4c:	7a9b      	ldrb	r3, [r3, #10]
   15d4e:	2b07      	cmp	r3, #7
   15d50:	d1e4      	bne.n	15d1c <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
   15d52:	4b07      	ldr	r3, [pc, #28]	; (15d70 <bt_conn_prepare_events+0x78>)
   15d54:	2200      	movs	r2, #0
   15d56:	2104      	movs	r1, #4
   15d58:	f015 f935 	bl	2afc6 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   15d5c:	2301      	movs	r3, #1
   15d5e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   15d62:	2002      	movs	r0, #2
	return ev_count;
   15d64:	e7db      	b.n	15d1e <bt_conn_prepare_events+0x26>
   15d66:	bf00      	nop
   15d68:	200001bc 	.word	0x200001bc
   15d6c:	20000970 	.word	0x20000970
   15d70:	200009a8 	.word	0x200009a8

00015d74 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   15d74:	b570      	push	{r4, r5, r6, lr}
   15d76:	4606      	mov	r6, r0
   15d78:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   15d7a:	480e      	ldr	r0, [pc, #56]	; (15db4 <bt_conn_add_le+0x40>)
   15d7c:	2101      	movs	r1, #1
   15d7e:	f013 fa75 	bl	2926c <bt_conn_new>
	if (!conn) {
   15d82:	4604      	mov	r4, r0
   15d84:	b1a0      	cbz	r0, 15db0 <bt_conn_add_le+0x3c>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   15d86:	490c      	ldr	r1, [pc, #48]	; (15db8 <bt_conn_add_le+0x44>)
   15d88:	3058      	adds	r0, #88	; 0x58
   15d8a:	f014 fdeb 	bl	2a964 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   15d8e:	490b      	ldr	r1, [pc, #44]	; (15dbc <bt_conn_add_le+0x48>)
   15d90:	f104 0028 	add.w	r0, r4, #40	; 0x28
   15d94:	f014 fdc0 	bl	2a918 <k_work_init>

	if (!conn) {
		return NULL;
	}

	conn->id = id;
   15d98:	7226      	strb	r6, [r4, #8]
   15d9a:	2207      	movs	r2, #7
   15d9c:	4629      	mov	r1, r5
   15d9e:	f104 0088 	add.w	r0, r4, #136	; 0x88
   15da2:	f012 ff38 	bl	28c16 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   15da6:	2301      	movs	r3, #1
   15da8:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   15daa:	4b05      	ldr	r3, [pc, #20]	; (15dc0 <bt_conn_add_le+0x4c>)
   15dac:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   15db0:	4620      	mov	r0, r4
   15db2:	bd70      	pop	{r4, r5, r6, pc}
   15db4:	20000970 	.word	0x20000970
   15db8:	000160c9 	.word	0x000160c9
   15dbc:	00029267 	.word	0x00029267
   15dc0:	00280018 	.word	0x00280018

00015dc4 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
   15dc4:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   15dc6:	2101      	movs	r1, #1
   15dc8:	4801      	ldr	r0, [pc, #4]	; (15dd0 <bt_conn_lookup_handle+0xc>)
   15dca:	f013 baf9 	b.w	293c0 <conn_lookup_handle>
   15dce:	bf00      	nop
   15dd0:	20000970 	.word	0x20000970

00015dd4 <bt_conn_set_state>:
{
   15dd4:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
   15dd6:	7a86      	ldrb	r6, [r0, #10]
   15dd8:	428e      	cmp	r6, r1
{
   15dda:	4604      	mov	r4, r0
   15ddc:	460d      	mov	r5, r1
	if (conn->state == state) {
   15dde:	d112      	bne.n	15e06 <bt_conn_set_state+0x32>
   15de0:	4b65      	ldr	r3, [pc, #404]	; (15f78 <bt_conn_set_state+0x1a4>)
   15de2:	4a66      	ldr	r2, [pc, #408]	; (15f7c <bt_conn_set_state+0x1a8>)
		BT_WARN("no transition %s", state2str(state));
   15de4:	4866      	ldr	r0, [pc, #408]	; (15f80 <bt_conn_set_state+0x1ac>)
   15de6:	2e08      	cmp	r6, #8
   15de8:	eba2 0203 	sub.w	r2, r2, r3
   15dec:	bf96      	itet	ls
   15dee:	4b65      	ldrls	r3, [pc, #404]	; (15f84 <bt_conn_set_state+0x1b0>)
   15df0:	4965      	ldrhi	r1, [pc, #404]	; (15f88 <bt_conn_set_state+0x1b4>)
   15df2:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   15df6:	08d2      	lsrs	r2, r2, #3
   15df8:	0192      	lsls	r2, r2, #6
   15dfa:	f042 0202 	orr.w	r2, r2, #2
}
   15dfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
   15e02:	f012 baea 	b.w	283da <log_1>
	conn->state = state;
   15e06:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   15e08:	b90e      	cbnz	r6, 15e0e <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
   15e0a:	f013 faa7 	bl	2935c <bt_conn_ref>
	switch (conn->state) {
   15e0e:	7aa3      	ldrb	r3, [r4, #10]
   15e10:	2b08      	cmp	r3, #8
   15e12:	f200 80a6 	bhi.w	15f62 <bt_conn_set_state+0x18e>
   15e16:	e8df f003 	tbb	[pc, r3]
   15e1a:	0537      	.short	0x0537
   15e1c:	aeaeaeae 	.word	0xaeaeaeae
   15e20:	1cae      	.short	0x1cae
   15e22:	ae          	.byte	0xae
   15e23:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
   15e24:	4d59      	ldr	r5, [pc, #356]	; (15f8c <bt_conn_set_state+0x1b8>)
		tx->pending_no_cb = 0U;
   15e26:	2600      	movs	r6, #0
	__asm__ volatile(
   15e28:	f04f 0320 	mov.w	r3, #32
   15e2c:	f3ef 8211 	mrs	r2, BASEPRI
   15e30:	f383 8811 	msr	BASEPRI, r3
   15e34:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   15e38:	69e3      	ldr	r3, [r4, #28]
   15e3a:	2b00      	cmp	r3, #0
   15e3c:	d072      	beq.n	15f24 <bt_conn_set_state+0x150>
			conn->pending_no_cb--;
   15e3e:	3b01      	subs	r3, #1
   15e40:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   15e42:	f382 8811 	msr	BASEPRI, r2
   15e46:	f3bf 8f6f 	isb	sy
   15e4a:	4628      	mov	r0, r5
   15e4c:	f010 fe82 	bl	26b54 <z_impl_k_sem_give>
}
   15e50:	e7ea      	b.n	15e28 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15e52:	78a3      	ldrb	r3, [r4, #2]
   15e54:	2b04      	cmp	r3, #4
   15e56:	f000 808e 	beq.w	15f76 <bt_conn_set_state+0x1a2>
	z_impl_k_queue_init(queue);
   15e5a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   15e5e:	f014 fc7e 	bl	2a75e <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   15e62:	484b      	ldr	r0, [pc, #300]	; (15f90 <bt_conn_set_state+0x1bc>)
   15e64:	2100      	movs	r1, #0
   15e66:	f011 fdc3 	bl	279f0 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   15e6a:	2300      	movs	r3, #0
	list->tail = NULL;
   15e6c:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e70:	78e3      	ldrb	r3, [r4, #3]
   15e72:	2b01      	cmp	r3, #1
   15e74:	d17f      	bne.n	15f76 <bt_conn_set_state+0x1a2>
			k_work_schedule(&conn->deferred_work,
   15e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15e7a:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
   15e7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
   15e82:	2300      	movs	r3, #0
   15e84:	f011 b83a 	b.w	26efc <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_SCO) {
   15e88:	78a3      	ldrb	r3, [r4, #2]
   15e8a:	2b04      	cmp	r3, #4
   15e8c:	d104      	bne.n	15e98 <bt_conn_set_state+0xc4>
			bt_conn_unref(conn);
   15e8e:	4620      	mov	r0, r4
}
   15e90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
   15e94:	f013 ba7d 	b.w	29392 <bt_conn_unref>
		switch (old_state) {
   15e98:	2e08      	cmp	r6, #8
   15e9a:	d86c      	bhi.n	15f76 <bt_conn_set_state+0x1a2>
   15e9c:	a301      	add	r3, pc, #4	; (adr r3, 15ea4 <bt_conn_set_state+0xd0>)
   15e9e:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   15ea2:	bf00      	nop
   15ea4:	00015f11 	.word	0x00015f11
   15ea8:	00015ec9 	.word	0x00015ec9
   15eac:	00015f03 	.word	0x00015f03
   15eb0:	00015e8f 	.word	0x00015e8f
   15eb4:	00015e8f 	.word	0x00015e8f
   15eb8:	00015f03 	.word	0x00015f03
   15ebc:	00015f03 	.word	0x00015f03
   15ec0:	00015f11 	.word	0x00015f11
   15ec4:	00015f11 	.word	0x00015f11
			tx_notify(conn);
   15ec8:	4620      	mov	r0, r4
   15eca:	f013 f9a9 	bl	29220 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   15ece:	78a3      	ldrb	r3, [r4, #2]
   15ed0:	2b01      	cmp	r3, #1
   15ed2:	d103      	bne.n	15edc <bt_conn_set_state+0x108>
				k_work_cancel_delayable(&conn->deferred_work);
   15ed4:	f104 0058 	add.w	r0, r4, #88	; 0x58
   15ed8:	f014 fd50 	bl	2a97c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15edc:	f3bf 8f5b 	dmb	ish
   15ee0:	3404      	adds	r4, #4
   15ee2:	e854 3f00 	ldrex	r3, [r4]
   15ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15eea:	e844 3200 	strex	r2, r3, [r4]
   15eee:	2a00      	cmp	r2, #0
   15ef0:	d1f7      	bne.n	15ee2 <bt_conn_set_state+0x10e>
   15ef2:	f3bf 8f5b 	dmb	ish
   15ef6:	4826      	ldr	r0, [pc, #152]	; (15f90 <bt_conn_set_state+0x1bc>)
}
   15ef8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15efc:	2100      	movs	r1, #0
   15efe:	f011 bd77 	b.w	279f0 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   15f02:	7a63      	ldrb	r3, [r4, #9]
   15f04:	2b00      	cmp	r3, #0
   15f06:	d0c2      	beq.n	15e8e <bt_conn_set_state+0xba>
				notify_connected(conn);
   15f08:	4620      	mov	r0, r4
   15f0a:	f7ff fcf7 	bl	158fc <notify_connected>
   15f0e:	e7be      	b.n	15e8e <bt_conn_set_state+0xba>
   15f10:	4a1a      	ldr	r2, [pc, #104]	; (15f7c <bt_conn_set_state+0x1a8>)
   15f12:	4b19      	ldr	r3, [pc, #100]	; (15f78 <bt_conn_set_state+0x1a4>)
			BT_WARN("Invalid (%u) old state", state);
   15f14:	481f      	ldr	r0, [pc, #124]	; (15f94 <bt_conn_set_state+0x1c0>)
   15f16:	1ad2      	subs	r2, r2, r3
   15f18:	08d2      	lsrs	r2, r2, #3
   15f1a:	0192      	lsls	r2, r2, #6
   15f1c:	f042 0202 	orr.w	r2, r2, #2
   15f20:	4629      	mov	r1, r5
   15f22:	e76c      	b.n	15dfe <bt_conn_set_state+0x2a>
	return list->head;
   15f24:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   15f26:	b128      	cbz	r0, 15f34 <bt_conn_set_state+0x160>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15f28:	69a1      	ldr	r1, [r4, #24]
	return node->next;
   15f2a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   15f2c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   15f2e:	4288      	cmp	r0, r1
	list->tail = node;
   15f30:	bf08      	it	eq
   15f32:	61a3      	streq	r3, [r4, #24]
   15f34:	f382 8811 	msr	BASEPRI, r2
   15f38:	f3bf 8f6f 	isb	sy
		if (!node) {
   15f3c:	b1d8      	cbz	r0, 15f76 <bt_conn_set_state+0x1a2>
	__asm__ volatile(
   15f3e:	f04f 0220 	mov.w	r2, #32
   15f42:	f3ef 8311 	mrs	r3, BASEPRI
   15f46:	f382 8811 	msr	BASEPRI, r2
   15f4a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   15f4e:	68c2      	ldr	r2, [r0, #12]
   15f50:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   15f52:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   15f54:	f383 8811 	msr	BASEPRI, r3
   15f58:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   15f5c:	f7ff fcc4 	bl	158e8 <tx_free>
   15f60:	e773      	b.n	15e4a <bt_conn_set_state+0x76>
   15f62:	4a06      	ldr	r2, [pc, #24]	; (15f7c <bt_conn_set_state+0x1a8>)
   15f64:	4b04      	ldr	r3, [pc, #16]	; (15f78 <bt_conn_set_state+0x1a4>)
		BT_WARN("no valid (%u) state was set", state);
   15f66:	480c      	ldr	r0, [pc, #48]	; (15f98 <bt_conn_set_state+0x1c4>)
   15f68:	1ad2      	subs	r2, r2, r3
   15f6a:	08d2      	lsrs	r2, r2, #3
   15f6c:	0192      	lsls	r2, r2, #6
   15f6e:	f042 0202 	orr.w	r2, r2, #2
   15f72:	4629      	mov	r1, r5
   15f74:	e743      	b.n	15dfe <bt_conn_set_state+0x2a>
}
   15f76:	bd70      	pop	{r4, r5, r6, pc}
   15f78:	0002b248 	.word	0x0002b248
   15f7c:	0002b268 	.word	0x0002b268
   15f80:	0002d86a 	.word	0x0002d86a
   15f84:	0002b670 	.word	0x0002b670
   15f88:	0002d860 	.word	0x0002d860
   15f8c:	200000d0 	.word	0x200000d0
   15f90:	200001bc 	.word	0x200001bc
   15f94:	0002d87b 	.word	0x0002d87b
   15f98:	0002d892 	.word	0x0002d892

00015f9c <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   15f9c:	b570      	push	{r4, r5, r6, lr}
   15f9e:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15fa0:	480c      	ldr	r0, [pc, #48]	; (15fd4 <bt_conn_lookup_addr_le+0x38>)
{
   15fa2:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   15fa4:	f013 f9da 	bl	2935c <bt_conn_ref>

		if (!conn) {
   15fa8:	4604      	mov	r4, r0
   15faa:	b128      	cbz	r0, 15fb8 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   15fac:	7883      	ldrb	r3, [r0, #2]
   15fae:	2b01      	cmp	r3, #1
   15fb0:	d004      	beq.n	15fbc <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   15fb2:	f013 f9ee 	bl	29392 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   15fb6:	2400      	movs	r4, #0
}
   15fb8:	4620      	mov	r0, r4
   15fba:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   15fbc:	4629      	mov	r1, r5
   15fbe:	4632      	mov	r2, r6
   15fc0:	f013 f9ac 	bl	2931c <bt_conn_is_peer_addr_le>
   15fc4:	4605      	mov	r5, r0
   15fc6:	2800      	cmp	r0, #0
   15fc8:	d1f6      	bne.n	15fb8 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   15fca:	4620      	mov	r0, r4
   15fcc:	f013 f9e1 	bl	29392 <bt_conn_unref>
	return NULL;
   15fd0:	462c      	mov	r4, r5
			continue;
   15fd2:	e7f1      	b.n	15fb8 <bt_conn_lookup_addr_le+0x1c>
   15fd4:	20000970 	.word	0x20000970

00015fd8 <bt_conn_exists_le>:
{
   15fd8:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   15fda:	f7ff ffdf 	bl	15f9c <bt_conn_lookup_addr_le>
	if (conn) {
   15fde:	4604      	mov	r4, r0
   15fe0:	b1a0      	cbz	r0, 1600c <bt_conn_exists_le+0x34>
   15fe2:	4b0b      	ldr	r3, [pc, #44]	; (16010 <bt_conn_exists_le+0x38>)
   15fe4:	4a0b      	ldr	r2, [pc, #44]	; (16014 <bt_conn_exists_le+0x3c>)
   15fe6:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
   15fe8:	7a83      	ldrb	r3, [r0, #10]
   15fea:	480b      	ldr	r0, [pc, #44]	; (16018 <bt_conn_exists_le+0x40>)
   15fec:	2b08      	cmp	r3, #8
   15fee:	bf96      	itet	ls
   15ff0:	490a      	ldrls	r1, [pc, #40]	; (1601c <bt_conn_exists_le+0x44>)
   15ff2:	490b      	ldrhi	r1, [pc, #44]	; (16020 <bt_conn_exists_le+0x48>)
   15ff4:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   15ff8:	08d2      	lsrs	r2, r2, #3
   15ffa:	0192      	lsls	r2, r2, #6
   15ffc:	f042 0202 	orr.w	r2, r2, #2
   16000:	f012 f9eb 	bl	283da <log_1>
		bt_conn_unref(conn);
   16004:	4620      	mov	r0, r4
   16006:	f013 f9c4 	bl	29392 <bt_conn_unref>
		return true;
   1600a:	2001      	movs	r0, #1
}
   1600c:	bd10      	pop	{r4, pc}
   1600e:	bf00      	nop
   16010:	0002b248 	.word	0x0002b248
   16014:	0002b268 	.word	0x0002b268
   16018:	0002d8ae 	.word	0x0002d8ae
   1601c:	0002b670 	.word	0x0002b670
   16020:	0002d860 	.word	0x0002d860

00016024 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   16024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16026:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   16028:	480e      	ldr	r0, [pc, #56]	; (16064 <bt_conn_lookup_state_le+0x40>)
{
   1602a:	460e      	mov	r6, r1
   1602c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1602e:	f013 f995 	bl	2935c <bt_conn_ref>

		if (!conn) {
   16032:	4604      	mov	r4, r0
   16034:	b1a0      	cbz	r0, 16060 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   16036:	7883      	ldrb	r3, [r0, #2]
   16038:	2b01      	cmp	r3, #1
   1603a:	d003      	beq.n	16044 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1603c:	f013 f9a9 	bl	29392 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   16040:	2400      	movs	r4, #0
			continue;
   16042:	e00d      	b.n	16060 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   16044:	b136      	cbz	r6, 16054 <bt_conn_lookup_state_le+0x30>
   16046:	4632      	mov	r2, r6
   16048:	4629      	mov	r1, r5
   1604a:	f013 f967 	bl	2931c <bt_conn_is_peer_addr_le>
   1604e:	b908      	cbnz	r0, 16054 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   16050:	4620      	mov	r0, r4
   16052:	e7f3      	b.n	1603c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   16054:	7aa3      	ldrb	r3, [r4, #10]
   16056:	42bb      	cmp	r3, r7
   16058:	d1fa      	bne.n	16050 <bt_conn_lookup_state_le+0x2c>
   1605a:	7a23      	ldrb	r3, [r4, #8]
   1605c:	42ab      	cmp	r3, r5
   1605e:	d1f7      	bne.n	16050 <bt_conn_lookup_state_le+0x2c>
}
   16060:	4620      	mov	r0, r4
   16062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16064:	20000970 	.word	0x20000970

00016068 <send_conn_le_param_update>:
{
   16068:	b538      	push	{r3, r4, r5, lr}
   1606a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1606c:	4608      	mov	r0, r1
{
   1606e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   16070:	f012 ff06 	bl	28e80 <bt_le_conn_params_valid>
   16074:	b318      	cbz	r0, 160be <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16076:	4b13      	ldr	r3, [pc, #76]	; (160c4 <send_conn_le_param_update+0x5c>)
   16078:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
   1607c:	0799      	lsls	r1, r3, #30
   1607e:	d407      	bmi.n	16090 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
   16080:	78e3      	ldrb	r3, [r4, #3]
   16082:	b183      	cbz	r3, 160a6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
   16084:	4629      	mov	r1, r5
   16086:	4620      	mov	r0, r4
}
   16088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1608c:	f000 bade 	b.w	1664c <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   16090:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
   16094:	079a      	lsls	r2, r3, #30
   16096:	d5f3      	bpl.n	16080 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16098:	f3bf 8f5b 	dmb	ish
   1609c:	6863      	ldr	r3, [r4, #4]
   1609e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   160a2:	055b      	lsls	r3, r3, #21
   160a4:	d4ec      	bmi.n	16080 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   160a6:	4629      	mov	r1, r5
   160a8:	4620      	mov	r0, r4
   160aa:	f013 f9ab 	bl	29404 <bt_conn_le_conn_update>
		if (rc == 0) {
   160ae:	b928      	cbnz	r0, 160bc <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
   160b0:	88ab      	ldrh	r3, [r5, #4]
   160b2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
   160b6:	88eb      	ldrh	r3, [r5, #6]
   160b8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
   160bc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   160be:	f06f 0015 	mvn.w	r0, #21
   160c2:	e7fb      	b.n	160bc <send_conn_le_param_update+0x54>
   160c4:	20000000 	.word	0x20000000

000160c8 <deferred_work>:
{
   160c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   160ca:	f810 3c4e 	ldrb.w	r3, [r0, #-78]
{
   160ce:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   160d0:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
   160d4:	b99b      	cbnz	r3, 160fe <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
   160d6:	4630      	mov	r0, r6
   160d8:	f013 f9f6 	bl	294c8 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   160dc:	4b26      	ldr	r3, [pc, #152]	; (16178 <deferred_work+0xb0>)
   160de:	681d      	ldr	r5, [r3, #0]
   160e0:	b92d      	cbnz	r5, 160ee <deferred_work+0x26>
		bt_conn_unref(conn);
   160e2:	4630      	mov	r0, r6
}
   160e4:	b002      	add	sp, #8
   160e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
   160ea:	f013 b952 	b.w	29392 <bt_conn_unref>
		if (cb->disconnected) {
   160ee:	686b      	ldr	r3, [r5, #4]
   160f0:	b11b      	cbz	r3, 160fa <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
   160f2:	f814 1c4f 	ldrb.w	r1, [r4, #-79]
   160f6:	4630      	mov	r0, r6
   160f8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   160fa:	692d      	ldr	r5, [r5, #16]
   160fc:	e7f0      	b.n	160e0 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
   160fe:	f810 3c56 	ldrb.w	r3, [r0, #-86]
   16102:	2b01      	cmp	r3, #1
   16104:	d12f      	bne.n	16166 <deferred_work+0x9e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16106:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(conn->flags,
   1610a:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
   1610e:	e855 3f00 	ldrex	r3, [r5]
   16112:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   16116:	e845 2100 	strex	r1, r2, [r5]
   1611a:	2900      	cmp	r1, #0
   1611c:	d1f7      	bne.n	1610e <deferred_work+0x46>
   1611e:	f3bf 8f5b 	dmb	ish
   16122:	059b      	lsls	r3, r3, #22
   16124:	d521      	bpl.n	1616a <deferred_work+0xa2>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   16126:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1612a:	f8ad 3000 	strh.w	r3, [sp]
   1612e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   16132:	f8ad 3002 	strh.w	r3, [sp, #2]
   16136:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
   1613a:	f8ad 3004 	strh.w	r3, [sp, #4]
   1613e:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
   16142:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
   16146:	4669      	mov	r1, sp
   16148:	4630      	mov	r0, r6
   1614a:	f7ff ff8d 	bl	16068 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1614e:	f3bf 8f5b 	dmb	ish
   16152:	e855 3f00 	ldrex	r3, [r5]
   16156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1615a:	e845 3200 	strex	r2, r3, [r5]
   1615e:	2a00      	cmp	r2, #0
   16160:	d1f7      	bne.n	16152 <deferred_work+0x8a>
   16162:	f3bf 8f5b 	dmb	ish
}
   16166:	b002      	add	sp, #8
   16168:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
   1616a:	4a04      	ldr	r2, [pc, #16]	; (1617c <deferred_work+0xb4>)
   1616c:	6810      	ldr	r0, [r2, #0]
   1616e:	6851      	ldr	r1, [r2, #4]
   16170:	466b      	mov	r3, sp
   16172:	c303      	stmia	r3!, {r0, r1}
   16174:	e7e7      	b.n	16146 <deferred_work+0x7e>
   16176:	bf00      	nop
   16178:	200012a8 	.word	0x200012a8
   1617c:	0002b43e 	.word	0x0002b43e

00016180 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
   16180:	b538      	push	{r3, r4, r5, lr}
   16182:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
   16184:	490c      	ldr	r1, [pc, #48]	; (161b8 <bt_conn_create_pdu_timeout+0x38>)
   16186:	2800      	cmp	r0, #0
   16188:	bf08      	it	eq
   1618a:	4608      	moveq	r0, r1
   1618c:	f014 f82e 	bl	2a1ec <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
   16190:	4604      	mov	r4, r0
   16192:	b958      	cbnz	r0, 161ac <bt_conn_create_pdu_timeout+0x2c>
   16194:	4909      	ldr	r1, [pc, #36]	; (161bc <bt_conn_create_pdu_timeout+0x3c>)
   16196:	4b0a      	ldr	r3, [pc, #40]	; (161c0 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
   16198:	480a      	ldr	r0, [pc, #40]	; (161c4 <bt_conn_create_pdu_timeout+0x44>)
   1619a:	1ac9      	subs	r1, r1, r3
   1619c:	08c9      	lsrs	r1, r1, #3
   1619e:	0189      	lsls	r1, r1, #6
   161a0:	f041 0102 	orr.w	r1, r1, #2
   161a4:	f012 f90c 	bl	283c0 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
   161a8:	4620      	mov	r0, r4
   161aa:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   161ac:	1d29      	adds	r1, r5, #4
   161ae:	3008      	adds	r0, #8
   161b0:	f014 f83b 	bl	2a22a <net_buf_simple_reserve>
	return buf;
   161b4:	e7f8      	b.n	161a8 <bt_conn_create_pdu_timeout+0x28>
   161b6:	bf00      	nop
   161b8:	20000744 	.word	0x20000744
   161bc:	0002b268 	.word	0x0002b268
   161c0:	0002b248 	.word	0x0002b248
   161c4:	0002d8d1 	.word	0x0002d8d1

000161c8 <bt_conn_create_frag_timeout>:
{
   161c8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   161ca:	4801      	ldr	r0, [pc, #4]	; (161d0 <bt_conn_create_frag_timeout+0x8>)
   161cc:	f7ff bfd8 	b.w	16180 <bt_conn_create_pdu_timeout>
   161d0:	20000794 	.word	0x20000794

000161d4 <create_frag>:
{
   161d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   161d8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   161da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   161de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   161e2:	2000      	movs	r0, #0
{
   161e4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   161e6:	f7ff ffef 	bl	161c8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   161ea:	7ab3      	ldrb	r3, [r6, #10]
   161ec:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   161ee:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   161f0:	f04f 0600 	mov.w	r6, #0
   161f4:	d005      	beq.n	16202 <create_frag+0x2e>
		net_buf_unref(frag);
   161f6:	f00f fb29 	bl	2584c <net_buf_unref>
		return NULL;
   161fa:	4635      	mov	r5, r6
}
   161fc:	4628      	mov	r0, r5
   161fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   16202:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   16204:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   16208:	4e0c      	ldr	r6, [pc, #48]	; (1623c <create_frag+0x68>)
   1620a:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1620c:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
   16210:	f014 f889 	bl	2a326 <net_buf_simple_tailroom>
   16214:	4580      	cmp	r8, r0
   16216:	d20c      	bcs.n	16232 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
   16218:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1621c:	f854 1f08 	ldr.w	r1, [r4, #8]!
   16220:	4632      	mov	r2, r6
   16222:	4638      	mov	r0, r7
   16224:	f014 f84a 	bl	2a2bc <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   16228:	4631      	mov	r1, r6
   1622a:	4620      	mov	r0, r4
   1622c:	f014 f85f 	bl	2a2ee <net_buf_simple_pull>
   16230:	e7e4      	b.n	161fc <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
   16232:	4638      	mov	r0, r7
   16234:	f014 f877 	bl	2a326 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   16238:	b286      	uxth	r6, r0
   1623a:	e7ef      	b.n	1621c <create_frag+0x48>
   1623c:	20000000 	.word	0x20000000

00016240 <bt_conn_process_tx>:
{
   16240:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   16242:	7a83      	ldrb	r3, [r0, #10]
{
   16244:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   16246:	b993      	cbnz	r3, 1626e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   16248:	f3bf 8f5b 	dmb	ish
   1624c:	1d03      	adds	r3, r0, #4
   1624e:	e853 2f00 	ldrex	r2, [r3]
   16252:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   16256:	e843 1500 	strex	r5, r1, [r3]
   1625a:	2d00      	cmp	r5, #0
   1625c:	d1f7      	bne.n	1624e <bt_conn_process_tx+0xe>
   1625e:	f3bf 8f5b 	dmb	ish
   16262:	0653      	lsls	r3, r2, #25
   16264:	d503      	bpl.n	1626e <bt_conn_process_tx+0x2e>
}
   16266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
   1626a:	f013 b830 	b.w	292ce <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1626e:	2200      	movs	r2, #0
   16270:	2300      	movs	r3, #0
   16272:	f104 0038 	add.w	r0, r4, #56	; 0x38
   16276:	f013 ffbe 	bl	2a1f6 <net_buf_get>
	BT_ASSERT(buf);
   1627a:	4605      	mov	r5, r0
   1627c:	b960      	cbnz	r0, 16298 <bt_conn_process_tx+0x58>
   1627e:	4a1f      	ldr	r2, [pc, #124]	; (162fc <bt_conn_process_tx+0xbc>)
   16280:	491f      	ldr	r1, [pc, #124]	; (16300 <bt_conn_process_tx+0xc0>)
   16282:	4820      	ldr	r0, [pc, #128]	; (16304 <bt_conn_process_tx+0xc4>)
   16284:	f240 5357 	movw	r3, #1367	; 0x557
   16288:	f011 fc5b 	bl	27b42 <printk>
   1628c:	4040      	eors	r0, r0
   1628e:	f380 8811 	msr	BASEPRI, r0
   16292:	f04f 0003 	mov.w	r0, #3
   16296:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   16298:	4e1b      	ldr	r6, [pc, #108]	; (16308 <bt_conn_process_tx+0xc8>)
	if (buf->len <= conn_mtu(conn)) {
   1629a:	89aa      	ldrh	r2, [r5, #12]
   1629c:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
   162a0:	429a      	cmp	r2, r3
   162a2:	d807      	bhi.n	162b4 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   162a4:	2300      	movs	r3, #0
   162a6:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   162a8:	4629      	mov	r1, r5
   162aa:	4620      	mov	r0, r4
   162ac:	f7ff fb3c 	bl	15928 <send_frag>
	if (!send_buf(conn, buf)) {
   162b0:	b130      	cbz	r0, 162c0 <bt_conn_process_tx+0x80>
}
   162b2:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
   162b4:	4629      	mov	r1, r5
   162b6:	4620      	mov	r0, r4
   162b8:	f7ff ff8c 	bl	161d4 <create_frag>
	if (!frag) {
   162bc:	4601      	mov	r1, r0
   162be:	b920      	cbnz	r0, 162ca <bt_conn_process_tx+0x8a>
		net_buf_unref(buf);
   162c0:	4628      	mov	r0, r5
}
   162c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   162c6:	f00f bac1 	b.w	2584c <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   162ca:	2301      	movs	r3, #1
   162cc:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   162ce:	4620      	mov	r0, r4
   162d0:	f7ff fb2a 	bl	15928 <send_frag>
   162d4:	2800      	cmp	r0, #0
   162d6:	d0f3      	beq.n	162c0 <bt_conn_process_tx+0x80>
	while (buf->len > conn_mtu(conn)) {
   162d8:	89aa      	ldrh	r2, [r5, #12]
   162da:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
   162de:	429a      	cmp	r2, r3
   162e0:	d802      	bhi.n	162e8 <bt_conn_process_tx+0xa8>
	return send_frag(conn, buf, FRAG_END, false);
   162e2:	2300      	movs	r3, #0
   162e4:	2203      	movs	r2, #3
   162e6:	e7df      	b.n	162a8 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   162e8:	4629      	mov	r1, r5
   162ea:	4620      	mov	r0, r4
   162ec:	f7ff ff72 	bl	161d4 <create_frag>
		if (!frag) {
   162f0:	4601      	mov	r1, r0
   162f2:	2800      	cmp	r0, #0
   162f4:	d0e4      	beq.n	162c0 <bt_conn_process_tx+0x80>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   162f6:	2301      	movs	r3, #1
   162f8:	461a      	mov	r2, r3
   162fa:	e7e8      	b.n	162ce <bt_conn_process_tx+0x8e>
   162fc:	0002d8fa 	.word	0x0002d8fa
   16300:	0002cf45 	.word	0x0002cf45
   16304:	0002d210 	.word	0x0002d210
   16308:	20000000 	.word	0x20000000

0001630c <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
   1630c:	4b03      	ldr	r3, [pc, #12]	; (1631c <bt_conn_index+0x10>)
   1630e:	1ac0      	subs	r0, r0, r3
   16310:	4b03      	ldr	r3, [pc, #12]	; (16320 <bt_conn_index+0x14>)
   16312:	1180      	asrs	r0, r0, #6
   16314:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
   16316:	b2c0      	uxtb	r0, r0
   16318:	4770      	bx	lr
   1631a:	bf00      	nop
   1631c:	20000970 	.word	0x20000970
   16320:	aaaaaaab 	.word	0xaaaaaaab

00016324 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   16324:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   16326:	490b      	ldr	r1, [pc, #44]	; (16354 <bt_conn_init+0x30>)
   16328:	480b      	ldr	r0, [pc, #44]	; (16358 <bt_conn_init+0x34>)
   1632a:	f014 fa24 	bl	2a776 <k_queue_append>
   1632e:	490b      	ldr	r1, [pc, #44]	; (1635c <bt_conn_init+0x38>)
   16330:	4809      	ldr	r0, [pc, #36]	; (16358 <bt_conn_init+0x34>)
   16332:	f014 fa20 	bl	2a776 <k_queue_append>
   16336:	490a      	ldr	r1, [pc, #40]	; (16360 <bt_conn_init+0x3c>)
   16338:	4807      	ldr	r0, [pc, #28]	; (16358 <bt_conn_init+0x34>)
   1633a:	f014 fa1c 	bl	2a776 <k_queue_append>
	}

	bt_att_init();
   1633e:	f013 fc42 	bl	29bc6 <bt_att_init>

	err = bt_smp_init();
   16342:	f013 ff50 	bl	2a1e6 <bt_smp_init>
	if (err) {
   16346:	4604      	mov	r4, r0
   16348:	b908      	cbnz	r0, 1634e <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
   1634a:	f013 f90f 	bl	2956c <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
   1634e:	4620      	mov	r0, r4
   16350:	bd10      	pop	{r4, pc}
   16352:	bf00      	nop
   16354:	200012ac 	.word	0x200012ac
   16358:	20000714 	.word	0x20000714
   1635c:	200012bc 	.word	0x200012bc
   16360:	200012cc 	.word	0x200012cc

00016364 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   16364:	4a0b      	ldr	r2, [pc, #44]	; (16394 <l2cap_accept+0x30>)
{
   16366:	b508      	push	{r3, lr}
   16368:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1636a:	6810      	ldr	r0, [r2, #0]
   1636c:	b918      	cbnz	r0, 16376 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1636e:	4b0a      	ldr	r3, [pc, #40]	; (16398 <l2cap_accept+0x34>)
   16370:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   16372:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   16374:	bd08      	pop	{r3, pc}
   16376:	4909      	ldr	r1, [pc, #36]	; (1639c <l2cap_accept+0x38>)
   16378:	4a09      	ldr	r2, [pc, #36]	; (163a0 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
   1637a:	480a      	ldr	r0, [pc, #40]	; (163a4 <l2cap_accept+0x40>)
   1637c:	1a52      	subs	r2, r2, r1
   1637e:	08d2      	lsrs	r2, r2, #3
   16380:	0192      	lsls	r2, r2, #6
   16382:	f042 0201 	orr.w	r2, r2, #1
   16386:	4619      	mov	r1, r3
   16388:	f012 f827 	bl	283da <log_1>
	return -ENOMEM;
   1638c:	f06f 000b 	mvn.w	r0, #11
   16390:	e7f0      	b.n	16374 <l2cap_accept+0x10>
   16392:	bf00      	nop
   16394:	20000a30 	.word	0x20000a30
   16398:	0002b6b4 	.word	0x0002b6b4
   1639c:	0002b248 	.word	0x0002b248
   163a0:	0002b338 	.word	0x0002b338
   163a4:	0002d987 	.word	0x0002d987

000163a8 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   163aa:	4605      	mov	r5, r0
   163ac:	460f      	mov	r7, r1
   163ae:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   163b0:	2300      	movs	r3, #0
   163b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   163b6:	2104      	movs	r1, #4
   163b8:	2000      	movs	r0, #0
   163ba:	f7ff fee1 	bl	16180 <bt_conn_create_pdu_timeout>
	if (!buf) {
   163be:	4604      	mov	r4, r0
   163c0:	b960      	cbnz	r0, 163dc <l2cap_create_le_sig_pdu.constprop.0+0x34>
   163c2:	4a0a      	ldr	r2, [pc, #40]	; (163ec <l2cap_create_le_sig_pdu.constprop.0+0x44>)
   163c4:	4b0a      	ldr	r3, [pc, #40]	; (163f0 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   163c6:	480b      	ldr	r0, [pc, #44]	; (163f4 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
   163c8:	1ad2      	subs	r2, r2, r3
   163ca:	08d2      	lsrs	r2, r2, #3
   163cc:	0192      	lsls	r2, r2, #6
   163ce:	f042 0201 	orr.w	r2, r2, #1
   163d2:	4629      	mov	r1, r5
   163d4:	f012 f801 	bl	283da <log_1>
}
   163d8:	4620      	mov	r0, r4
   163da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   163dc:	2104      	movs	r1, #4
   163de:	3008      	adds	r0, #8
   163e0:	f013 ff66 	bl	2a2b0 <net_buf_simple_add>
	hdr->code = code;
   163e4:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   163e6:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   163e8:	8046      	strh	r6, [r0, #2]
	return buf;
   163ea:	e7f5      	b.n	163d8 <l2cap_create_le_sig_pdu.constprop.0+0x30>
   163ec:	0002b338 	.word	0x0002b338
   163f0:	0002b248 	.word	0x0002b248
   163f4:	0002d9ae 	.word	0x0002d9ae

000163f8 <l2cap_rtx_timeout>:
{
   163f8:	b538      	push	{r3, r4, r5, lr}
   163fa:	4a0b      	ldr	r2, [pc, #44]	; (16428 <l2cap_rtx_timeout+0x30>)
   163fc:	4b0b      	ldr	r3, [pc, #44]	; (1642c <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
   163fe:	4604      	mov	r4, r0
   16400:	1ad2      	subs	r2, r2, r3
   16402:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   16406:	480a      	ldr	r0, [pc, #40]	; (16430 <l2cap_rtx_timeout+0x38>)
   16408:	08d2      	lsrs	r2, r2, #3
   1640a:	0192      	lsls	r2, r2, #6
   1640c:	4621      	mov	r1, r4
   1640e:	f042 0201 	orr.w	r2, r2, #1
   16412:	f011 ffe2 	bl	283da <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   16416:	4628      	mov	r0, r5
   16418:	4621      	mov	r1, r4
   1641a:	f013 f81f 	bl	2945c <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1641e:	4620      	mov	r0, r4
}
   16420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   16424:	f013 b83b 	b.w	2949e <bt_l2cap_chan_del>
   16428:	0002b338 	.word	0x0002b338
   1642c:	0002b248 	.word	0x0002b248
   16430:	0002d9d6 	.word	0x0002d9d6

00016434 <bt_l2cap_connected>:
{
   16434:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16438:	4e29      	ldr	r6, [pc, #164]	; (164e0 <bt_l2cap_connected+0xac>)
   1643a:	4f2a      	ldr	r7, [pc, #168]	; (164e4 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1643c:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 164e8 <bt_l2cap_connected+0xb4>
{
   16440:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   16442:	42be      	cmp	r6, r7
   16444:	d302      	bcc.n	1644c <bt_l2cap_connected+0x18>
}
   16446:	b003      	add	sp, #12
   16448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1644c:	6873      	ldr	r3, [r6, #4]
   1644e:	a901      	add	r1, sp, #4
   16450:	4620      	mov	r0, r4
   16452:	4798      	blx	r3
   16454:	2800      	cmp	r0, #0
   16456:	db3d      	blt.n	164d4 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
   16458:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1645a:	8833      	ldrh	r3, [r6, #0]
   1645c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   16460:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   16464:	4641      	mov	r1, r8
   16466:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1646a:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1646e:	f014 fa79 	bl	2a964 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16472:	f3bf 8f5b 	dmb	ish
   16476:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1647a:	2200      	movs	r2, #0
   1647c:	e853 1f00 	ldrex	r1, [r3]
   16480:	e843 2000 	strex	r0, r2, [r3]
   16484:	2800      	cmp	r0, #0
   16486:	d1f9      	bne.n	1647c <bt_l2cap_connected+0x48>
   16488:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1648c:	60aa      	str	r2, [r5, #8]
	return list->tail;
   1648e:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
   16490:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
   16494:	bb02      	cbnz	r2, 164d8 <bt_l2cap_connected+0xa4>
	list->head = node;
   16496:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
   1649a:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1649c:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1649e:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   164a0:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
   164a4:	681b      	ldr	r3, [r3, #0]
   164a6:	b103      	cbz	r3, 164aa <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
   164a8:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   164aa:	9b01      	ldr	r3, [sp, #4]
   164ac:	f3bf 8f5b 	dmb	ish
   164b0:	3368      	adds	r3, #104	; 0x68
   164b2:	e853 2f00 	ldrex	r2, [r3]
   164b6:	f042 0201 	orr.w	r2, r2, #1
   164ba:	e843 2100 	strex	r1, r2, [r3]
   164be:	2900      	cmp	r1, #0
   164c0:	d1f7      	bne.n	164b2 <bt_l2cap_connected+0x7e>
   164c2:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   164c6:	9801      	ldr	r0, [sp, #4]
   164c8:	6843      	ldr	r3, [r0, #4]
   164ca:	699b      	ldr	r3, [r3, #24]
   164cc:	b113      	cbz	r3, 164d4 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
   164ce:	f100 0168 	add.w	r1, r0, #104	; 0x68
   164d2:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   164d4:	360c      	adds	r6, #12
   164d6:	e7b4      	b.n	16442 <bt_l2cap_connected+0xe>
	parent->next = child;
   164d8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   164da:	6563      	str	r3, [r4, #84]	; 0x54
}
   164dc:	e7dd      	b.n	1649a <bt_l2cap_connected+0x66>
   164de:	bf00      	nop
   164e0:	0002b204 	.word	0x0002b204
   164e4:	0002b228 	.word	0x0002b228
   164e8:	000163f9 	.word	0x000163f9

000164ec <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   164ec:	898b      	ldrh	r3, [r1, #12]
   164ee:	2b03      	cmp	r3, #3
{
   164f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   164f2:	4606      	mov	r6, r0
   164f4:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   164f6:	d80a      	bhi.n	1650e <l2cap_recv+0x22>
   164f8:	4931      	ldr	r1, [pc, #196]	; (165c0 <l2cap_recv+0xd4>)
   164fa:	4b32      	ldr	r3, [pc, #200]	; (165c4 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
   164fc:	4832      	ldr	r0, [pc, #200]	; (165c8 <l2cap_recv+0xdc>)
   164fe:	1ac9      	subs	r1, r1, r3
   16500:	08c9      	lsrs	r1, r1, #3
   16502:	0189      	lsls	r1, r1, #6
   16504:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   16508:	f011 ff5a 	bl	283c0 <log_0>
		return 0;
   1650c:	e013      	b.n	16536 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
   1650e:	2104      	movs	r1, #4
   16510:	f105 0008 	add.w	r0, r5, #8
   16514:	f013 fef3 	bl	2a2fe <net_buf_simple_pull_mem>
	if (buf->len != len) {
   16518:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1651a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   1651c:	428a      	cmp	r2, r1
   1651e:	4604      	mov	r4, r0
   16520:	d00c      	beq.n	1653c <l2cap_recv+0x50>
   16522:	4828      	ldr	r0, [pc, #160]	; (165c4 <l2cap_recv+0xd8>)
   16524:	4b26      	ldr	r3, [pc, #152]	; (165c0 <l2cap_recv+0xd4>)
   16526:	1a1b      	subs	r3, r3, r0
   16528:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1652a:	019b      	lsls	r3, r3, #6
   1652c:	4827      	ldr	r0, [pc, #156]	; (165cc <l2cap_recv+0xe0>)
   1652e:	f043 0301 	orr.w	r3, r3, #1
   16532:	f011 ff66 	bl	28402 <log_2>
}
   16536:	2000      	movs	r0, #0
   16538:	b002      	add	sp, #8
   1653a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
   1653c:	7843      	ldrb	r3, [r0, #1]
   1653e:	b943      	cbnz	r3, 16552 <l2cap_recv+0x66>
   16540:	491f      	ldr	r1, [pc, #124]	; (165c0 <l2cap_recv+0xd4>)
   16542:	4b20      	ldr	r3, [pc, #128]	; (165c4 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
   16544:	4822      	ldr	r0, [pc, #136]	; (165d0 <l2cap_recv+0xe4>)
   16546:	1ac9      	subs	r1, r1, r3
   16548:	08c9      	lsrs	r1, r1, #3
   1654a:	0189      	lsls	r1, r1, #6
   1654c:	f041 0101 	orr.w	r1, r1, #1
   16550:	e7da      	b.n	16508 <l2cap_recv+0x1c>
	switch (hdr->code) {
   16552:	7801      	ldrb	r1, [r0, #0]
   16554:	2901      	cmp	r1, #1
   16556:	d0ee      	beq.n	16536 <l2cap_recv+0x4a>
   16558:	2913      	cmp	r1, #19
   1655a:	d10a      	bne.n	16572 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
   1655c:	2a01      	cmp	r2, #1
   1655e:	d8ea      	bhi.n	16536 <l2cap_recv+0x4a>
   16560:	4917      	ldr	r1, [pc, #92]	; (165c0 <l2cap_recv+0xd4>)
   16562:	4b18      	ldr	r3, [pc, #96]	; (165c4 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
   16564:	481b      	ldr	r0, [pc, #108]	; (165d4 <l2cap_recv+0xe8>)
   16566:	1ac9      	subs	r1, r1, r3
   16568:	08c9      	lsrs	r1, r1, #3
   1656a:	0189      	lsls	r1, r1, #6
   1656c:	f041 0101 	orr.w	r1, r1, #1
   16570:	e7ca      	b.n	16508 <l2cap_recv+0x1c>
   16572:	4b14      	ldr	r3, [pc, #80]	; (165c4 <l2cap_recv+0xd8>)
   16574:	4a12      	ldr	r2, [pc, #72]	; (165c0 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   16576:	4818      	ldr	r0, [pc, #96]	; (165d8 <l2cap_recv+0xec>)
   16578:	1ad2      	subs	r2, r2, r3
   1657a:	08d2      	lsrs	r2, r2, #3
   1657c:	0192      	lsls	r2, r2, #6
   1657e:	f042 0202 	orr.w	r2, r2, #2
   16582:	f011 ff2a 	bl	283da <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   16586:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
   16588:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1658a:	2202      	movs	r2, #2
   1658c:	2001      	movs	r0, #1
   1658e:	f7ff ff0b 	bl	163a8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   16592:	4604      	mov	r4, r0
   16594:	2800      	cmp	r0, #0
   16596:	d0ce      	beq.n	16536 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
   16598:	2102      	movs	r1, #2
   1659a:	3008      	adds	r0, #8
   1659c:	f013 fe88 	bl	2a2b0 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   165a0:	2300      	movs	r3, #0
   165a2:	7003      	strb	r3, [r0, #0]
   165a4:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   165a6:	4622      	mov	r2, r4
   165a8:	9300      	str	r3, [sp, #0]
   165aa:	2105      	movs	r1, #5
   165ac:	4628      	mov	r0, r5
   165ae:	f012 ffa4 	bl	294fa <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   165b2:	2800      	cmp	r0, #0
   165b4:	d0bf      	beq.n	16536 <l2cap_recv+0x4a>
		net_buf_unref(buf);
   165b6:	4620      	mov	r0, r4
   165b8:	f00f f948 	bl	2584c <net_buf_unref>
   165bc:	e7bb      	b.n	16536 <l2cap_recv+0x4a>
   165be:	bf00      	nop
   165c0:	0002b338 	.word	0x0002b338
   165c4:	0002b248 	.word	0x0002b248
   165c8:	0002d9e6 	.word	0x0002d9e6
   165cc:	0002da04 	.word	0x0002da04
   165d0:	0002da25 	.word	0x0002da25
   165d4:	0002da46 	.word	0x0002da46
   165d8:	0002da62 	.word	0x0002da62

000165dc <bt_l2cap_recv>:
{
   165dc:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   165de:	898b      	ldrh	r3, [r1, #12]
   165e0:	2b03      	cmp	r3, #3
{
   165e2:	4605      	mov	r5, r0
   165e4:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   165e6:	d80e      	bhi.n	16606 <bt_l2cap_recv+0x2a>
   165e8:	4914      	ldr	r1, [pc, #80]	; (1663c <bt_l2cap_recv+0x60>)
   165ea:	4b15      	ldr	r3, [pc, #84]	; (16640 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
   165ec:	4815      	ldr	r0, [pc, #84]	; (16644 <bt_l2cap_recv+0x68>)
   165ee:	1ac9      	subs	r1, r1, r3
   165f0:	08c9      	lsrs	r1, r1, #3
   165f2:	0189      	lsls	r1, r1, #6
   165f4:	f041 0101 	orr.w	r1, r1, #1
   165f8:	f011 fee2 	bl	283c0 <log_0>
	net_buf_unref(buf);
   165fc:	4620      	mov	r0, r4
}
   165fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   16602:	f00f b923 	b.w	2584c <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   16606:	2104      	movs	r1, #4
   16608:	f104 0008 	add.w	r0, r4, #8
   1660c:	f013 fe77 	bl	2a2fe <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   16610:	8841      	ldrh	r1, [r0, #2]
   16612:	4628      	mov	r0, r5
   16614:	f012 ff9a 	bl	2954c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16618:	b950      	cbnz	r0, 16630 <bt_l2cap_recv+0x54>
   1661a:	4b09      	ldr	r3, [pc, #36]	; (16640 <bt_l2cap_recv+0x64>)
   1661c:	4a07      	ldr	r2, [pc, #28]	; (1663c <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1661e:	480a      	ldr	r0, [pc, #40]	; (16648 <bt_l2cap_recv+0x6c>)
   16620:	1ad2      	subs	r2, r2, r3
   16622:	08d2      	lsrs	r2, r2, #3
   16624:	0192      	lsls	r2, r2, #6
   16626:	f042 0202 	orr.w	r2, r2, #2
   1662a:	f011 fed6 	bl	283da <log_1>
		net_buf_unref(buf);
   1662e:	e7e5      	b.n	165fc <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
   16630:	6843      	ldr	r3, [r0, #4]
   16632:	4621      	mov	r1, r4
   16634:	691b      	ldr	r3, [r3, #16]
   16636:	4798      	blx	r3
   16638:	e7e0      	b.n	165fc <bt_l2cap_recv+0x20>
   1663a:	bf00      	nop
   1663c:	0002b338 	.word	0x0002b338
   16640:	0002b248 	.word	0x0002b248
   16644:	0002da80 	.word	0x0002da80
   16648:	0002da9d 	.word	0x0002da9d

0001664c <bt_l2cap_update_conn_param>:
{
   1664c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1664e:	460d      	mov	r5, r1
	ident++;
   16650:	4916      	ldr	r1, [pc, #88]	; (166ac <bt_l2cap_update_conn_param+0x60>)
   16652:	780b      	ldrb	r3, [r1, #0]
   16654:	3301      	adds	r3, #1
	if (!ident) {
   16656:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
   1665a:	bf08      	it	eq
   1665c:	2301      	moveq	r3, #1
   1665e:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   16660:	7809      	ldrb	r1, [r1, #0]
{
   16662:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   16664:	2208      	movs	r2, #8
   16666:	2012      	movs	r0, #18
   16668:	f7ff fe9e 	bl	163a8 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
   1666c:	4604      	mov	r4, r0
   1666e:	b1d0      	cbz	r0, 166a6 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   16670:	2108      	movs	r1, #8
   16672:	4408      	add	r0, r1
   16674:	f013 fe1c 	bl	2a2b0 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   16678:	882b      	ldrh	r3, [r5, #0]
   1667a:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1667c:	886b      	ldrh	r3, [r5, #2]
   1667e:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   16680:	88ab      	ldrh	r3, [r5, #4]
   16682:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   16684:	88eb      	ldrh	r3, [r5, #6]
   16686:	80c3      	strh	r3, [r0, #6]
   16688:	2300      	movs	r3, #0
   1668a:	9300      	str	r3, [sp, #0]
   1668c:	4622      	mov	r2, r4
   1668e:	2105      	movs	r1, #5
   16690:	4630      	mov	r0, r6
   16692:	f012 ff32 	bl	294fa <bt_l2cap_send_cb>
	if (err) {
   16696:	4605      	mov	r5, r0
   16698:	b110      	cbz	r0, 166a0 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1669a:	4620      	mov	r0, r4
   1669c:	f00f f8d6 	bl	2584c <net_buf_unref>
}
   166a0:	4628      	mov	r0, r5
   166a2:	b002      	add	sp, #8
   166a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   166a6:	f06f 050b 	mvn.w	r5, #11
   166aa:	e7f9      	b.n	166a0 <bt_l2cap_update_conn_param+0x54>
   166ac:	20002636 	.word	0x20002636

000166b0 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   166b0:	4b02      	ldr	r3, [pc, #8]	; (166bc <att_cfm_sent+0xc>)
   166b2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   166b6:	f012 bf6c 	b.w	29592 <att_sent>
   166ba:	bf00      	nop
   166bc:	00029929 	.word	0x00029929

000166c0 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   166c0:	4b02      	ldr	r3, [pc, #8]	; (166cc <att_rsp_sent+0xc>)
   166c2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   166c6:	f012 bf64 	b.w	29592 <att_sent>
   166ca:	bf00      	nop
   166cc:	0002990d 	.word	0x0002990d

000166d0 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   166d0:	4b02      	ldr	r3, [pc, #8]	; (166dc <att_req_sent+0xc>)
   166d2:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
   166d6:	f012 bf5c 	b.w	29592 <att_sent>
   166da:	bf00      	nop
   166dc:	000296eb 	.word	0x000296eb

000166e0 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
   166e0:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
   166e2:	7a83      	ldrb	r3, [r0, #10]
   166e4:	2b07      	cmp	r3, #7
   166e6:	d00b      	beq.n	16700 <att_get+0x20>
   166e8:	4918      	ldr	r1, [pc, #96]	; (1674c <att_get+0x6c>)
   166ea:	4b19      	ldr	r3, [pc, #100]	; (16750 <att_get+0x70>)
		BT_WARN("Not connected");
   166ec:	4819      	ldr	r0, [pc, #100]	; (16754 <att_get+0x74>)
   166ee:	1ac9      	subs	r1, r1, r3
   166f0:	08c9      	lsrs	r1, r1, #3
   166f2:	0189      	lsls	r1, r1, #6
   166f4:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
   166f8:	f011 fe62 	bl	283c0 <log_0>
		return NULL;
   166fc:	2400      	movs	r4, #0
   166fe:	e00e      	b.n	1671e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   16700:	2104      	movs	r1, #4
   16702:	f012 ff23 	bl	2954c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   16706:	4604      	mov	r4, r0
   16708:	b958      	cbnz	r0, 16722 <att_get+0x42>
   1670a:	4910      	ldr	r1, [pc, #64]	; (1674c <att_get+0x6c>)
   1670c:	4b10      	ldr	r3, [pc, #64]	; (16750 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
   1670e:	4812      	ldr	r0, [pc, #72]	; (16758 <att_get+0x78>)
   16710:	1ac9      	subs	r1, r1, r3
   16712:	08c9      	lsrs	r1, r1, #3
   16714:	0189      	lsls	r1, r1, #6
   16716:	f041 0101 	orr.w	r1, r1, #1
   1671a:	f011 fe51 	bl	283c0 <log_0>
	}

	return att_chan->att;
}
   1671e:	4620      	mov	r0, r4
   16720:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16722:	f3bf 8f5b 	dmb	ish
   16726:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
   1672a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1672e:	075b      	lsls	r3, r3, #29
   16730:	d508      	bpl.n	16744 <att_get+0x64>
   16732:	4906      	ldr	r1, [pc, #24]	; (1674c <att_get+0x6c>)
   16734:	4b06      	ldr	r3, [pc, #24]	; (16750 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
   16736:	4809      	ldr	r0, [pc, #36]	; (1675c <att_get+0x7c>)
   16738:	1ac9      	subs	r1, r1, r3
   1673a:	08c9      	lsrs	r1, r1, #3
   1673c:	0189      	lsls	r1, r1, #6
   1673e:	f041 0102 	orr.w	r1, r1, #2
   16742:	e7d9      	b.n	166f8 <att_get+0x18>
	return att_chan->att;
   16744:	f850 4c08 	ldr.w	r4, [r0, #-8]
   16748:	e7e9      	b.n	1671e <att_get+0x3e>
   1674a:	bf00      	nop
   1674c:	0002b258 	.word	0x0002b258
   16750:	0002b248 	.word	0x0002b248
   16754:	0002dad9 	.word	0x0002dad9
   16758:	0002dae7 	.word	0x0002dae7
   1675c:	0002db02 	.word	0x0002db02

00016760 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   16760:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   16762:	3808      	subs	r0, #8
   16764:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   16766:	a901      	add	r1, sp, #4
   16768:	4802      	ldr	r0, [pc, #8]	; (16774 <bt_att_released+0x14>)
   1676a:	f013 ff4b 	bl	2a604 <k_mem_slab_free>
}
   1676e:	b003      	add	sp, #12
   16770:	f85d fb04 	ldr.w	pc, [sp], #4
   16774:	200006ac 	.word	0x200006ac

00016778 <find_type_cb>:
{
   16778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1677c:	f8d2 9000 	ldr.w	r9, [r2]
{
   16780:	b091      	sub	sp, #68	; 0x44
   16782:	4607      	mov	r7, r0
   16784:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16786:	2500      	movs	r5, #0
   16788:	f642 0301 	movw	r3, #10241	; 0x2801
   1678c:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1678e:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   16792:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   16796:	a90b      	add	r1, sp, #44	; 0x2c
{
   16798:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1679a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1679e:	f012 fadc 	bl	28d5a <bt_uuid_cmp>
   167a2:	2800      	cmp	r0, #0
   167a4:	d066      	beq.n	16874 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   167a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   167aa:	6838      	ldr	r0, [r7, #0]
   167ac:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   167b0:	a90b      	add	r1, sp, #44	; 0x2c
   167b2:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   167b6:	f012 fad0 	bl	28d5a <bt_uuid_cmp>
   167ba:	b138      	cbz	r0, 167cc <find_type_cb+0x54>
		if (data->group &&
   167bc:	68a3      	ldr	r3, [r4, #8]
   167be:	b11b      	cbz	r3, 167c8 <find_type_cb+0x50>
   167c0:	885a      	ldrh	r2, [r3, #2]
   167c2:	42b2      	cmp	r2, r6
   167c4:	d200      	bcs.n	167c8 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   167c6:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   167c8:	2001      	movs	r0, #1
   167ca:	e009      	b.n	167e0 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   167cc:	6861      	ldr	r1, [r4, #4]
   167ce:	4608      	mov	r0, r1
   167d0:	f012 fed7 	bl	29582 <net_buf_frags_len>
   167d4:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   167d8:	1a1b      	subs	r3, r3, r0
   167da:	2b03      	cmp	r3, #3
   167dc:	d803      	bhi.n	167e6 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   167de:	2000      	movs	r0, #0
}
   167e0:	b011      	add	sp, #68	; 0x44
   167e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   167e6:	4608      	mov	r0, r1
   167e8:	f013 fd34 	bl	2a254 <net_buf_frag_last>
   167ec:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   167ee:	6860      	ldr	r0, [r4, #4]
   167f0:	f012 fec7 	bl	29582 <net_buf_frags_len>
   167f4:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   167f8:	f105 0b08 	add.w	fp, r5, #8
   167fc:	ebaa 0a00 	sub.w	sl, sl, r0
   16800:	4658      	mov	r0, fp
   16802:	f013 fd90 	bl	2a326 <net_buf_simple_tailroom>
   16806:	4582      	cmp	sl, r0
   16808:	d237      	bcs.n	1687a <find_type_cb+0x102>
   1680a:	6860      	ldr	r0, [r4, #4]
   1680c:	f012 feb9 	bl	29582 <net_buf_frags_len>
   16810:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
   16814:	1a18      	subs	r0, r3, r0
	if (!len) {
   16816:	b970      	cbnz	r0, 16836 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   16818:	6863      	ldr	r3, [r4, #4]
   1681a:	7998      	ldrb	r0, [r3, #6]
   1681c:	f00e ff58 	bl	256d0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   16820:	2200      	movs	r2, #0
   16822:	2300      	movs	r3, #0
   16824:	f013 fce2 	bl	2a1ec <net_buf_alloc_fixed>
		if (!frag) {
   16828:	4605      	mov	r5, r0
   1682a:	2800      	cmp	r0, #0
   1682c:	d0d7      	beq.n	167de <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1682e:	4601      	mov	r1, r0
   16830:	6860      	ldr	r0, [r4, #4]
   16832:	f013 fd20 	bl	2a276 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   16836:	2300      	movs	r3, #0
   16838:	9300      	str	r3, [sp, #0]
   1683a:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1683e:	4639      	mov	r1, r7
   16840:	2310      	movs	r3, #16
   16842:	aa02      	add	r2, sp, #8
   16844:	4640      	mov	r0, r8
   16846:	47c8      	blx	r9
	if (read < 0) {
   16848:	1e07      	subs	r7, r0, #0
   1684a:	db13      	blt.n	16874 <find_type_cb+0xfc>
	if (read != data->value_len) {
   1684c:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1684e:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
   16850:	42ba      	cmp	r2, r7
   16852:	d037      	beq.n	168c4 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   16854:	4601      	mov	r1, r0
   16856:	a80b      	add	r0, sp, #44	; 0x2c
   16858:	f012 faad 	bl	28db6 <bt_uuid_create>
   1685c:	b988      	cbnz	r0, 16882 <find_type_cb+0x10a>
   1685e:	4a1b      	ldr	r2, [pc, #108]	; (168cc <find_type_cb+0x154>)
   16860:	4b1b      	ldr	r3, [pc, #108]	; (168d0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   16862:	7c21      	ldrb	r1, [r4, #16]
   16864:	481b      	ldr	r0, [pc, #108]	; (168d4 <find_type_cb+0x15c>)
   16866:	1ad2      	subs	r2, r2, r3
   16868:	08d2      	lsrs	r2, r2, #3
   1686a:	0192      	lsls	r2, r2, #6
   1686c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   16870:	f011 fdb3 	bl	283da <log_1>
	data->group = NULL;
   16874:	2300      	movs	r3, #0
   16876:	60a3      	str	r3, [r4, #8]
   16878:	e7a6      	b.n	167c8 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1687a:	4658      	mov	r0, fp
   1687c:	f013 fd53 	bl	2a326 <net_buf_simple_tailroom>
   16880:	e7c9      	b.n	16816 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   16882:	b2fa      	uxtb	r2, r7
   16884:	a902      	add	r1, sp, #8
   16886:	a806      	add	r0, sp, #24
   16888:	f012 fa95 	bl	28db6 <bt_uuid_create>
   1688c:	b948      	cbnz	r0, 168a2 <find_type_cb+0x12a>
   1688e:	4a0f      	ldr	r2, [pc, #60]	; (168cc <find_type_cb+0x154>)
   16890:	4b0f      	ldr	r3, [pc, #60]	; (168d0 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
   16892:	4811      	ldr	r0, [pc, #68]	; (168d8 <find_type_cb+0x160>)
   16894:	1ad2      	subs	r2, r2, r3
   16896:	08d2      	lsrs	r2, r2, #3
   16898:	0192      	lsls	r2, r2, #6
   1689a:	f042 0202 	orr.w	r2, r2, #2
   1689e:	4639      	mov	r1, r7
   168a0:	e7e6      	b.n	16870 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   168a2:	a906      	add	r1, sp, #24
   168a4:	a80b      	add	r0, sp, #44	; 0x2c
   168a6:	f012 fa58 	bl	28d5a <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   168aa:	2800      	cmp	r0, #0
   168ac:	d1e2      	bne.n	16874 <find_type_cb+0xfc>
	data->err = 0x00;
   168ae:	2300      	movs	r3, #0
   168b0:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   168b2:	2104      	movs	r1, #4
   168b4:	f105 0008 	add.w	r0, r5, #8
   168b8:	f013 fcfa 	bl	2a2b0 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   168bc:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   168be:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   168c0:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   168c2:	e781      	b.n	167c8 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   168c4:	a902      	add	r1, sp, #8
   168c6:	f012 f995 	bl	28bf4 <memcmp>
   168ca:	e7ee      	b.n	168aa <find_type_cb+0x132>
   168cc:	0002b258 	.word	0x0002b258
   168d0:	0002b248 	.word	0x0002b248
   168d4:	0002db26 	.word	0x0002db26
   168d8:	0002db45 	.word	0x0002db45

000168dc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   168dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   168de:	2300      	movs	r3, #0
{
   168e0:	4606      	mov	r6, r0
   168e2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   168e4:	4828      	ldr	r0, [pc, #160]	; (16988 <bt_att_accept+0xac>)
   168e6:	2200      	movs	r2, #0
   168e8:	4669      	mov	r1, sp
   168ea:	f010 f801 	bl	268f0 <k_mem_slab_alloc>
   168ee:	4604      	mov	r4, r0
   168f0:	b178      	cbz	r0, 16912 <bt_att_accept+0x36>
   168f2:	4a26      	ldr	r2, [pc, #152]	; (1698c <bt_att_accept+0xb0>)
   168f4:	4b26      	ldr	r3, [pc, #152]	; (16990 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
   168f6:	4827      	ldr	r0, [pc, #156]	; (16994 <bt_att_accept+0xb8>)
   168f8:	1ad2      	subs	r2, r2, r3
   168fa:	08d2      	lsrs	r2, r2, #3
   168fc:	0192      	lsls	r2, r2, #6
   168fe:	f042 0201 	orr.w	r2, r2, #1
   16902:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   16904:	f011 fd69 	bl	283da <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
   16908:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
   1690c:	4620      	mov	r0, r4
   1690e:	b003      	add	sp, #12
   16910:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
   16912:	4601      	mov	r1, r0
   16914:	222c      	movs	r2, #44	; 0x2c
   16916:	9800      	ldr	r0, [sp, #0]
   16918:	f012 f9a8 	bl	28c6c <memset>
	att->conn = conn;
   1691c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1691e:	481e      	ldr	r0, [pc, #120]	; (16998 <bt_att_accept+0xbc>)
	list->tail = NULL;
   16920:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   16922:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   16926:	e9c5 4409 	strd	r4, r4, [r5, #36]	; 0x24
   1692a:	2200      	movs	r2, #0
   1692c:	2300      	movs	r3, #0
   1692e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   16930:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   16932:	f00f ffdd 	bl	268f0 <k_mem_slab_alloc>
   16936:	4604      	mov	r4, r0
   16938:	b148      	cbz	r0, 1694e <bt_att_accept+0x72>
   1693a:	4a14      	ldr	r2, [pc, #80]	; (1698c <bt_att_accept+0xb0>)
   1693c:	4b14      	ldr	r3, [pc, #80]	; (16990 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1693e:	6829      	ldr	r1, [r5, #0]
   16940:	4816      	ldr	r0, [pc, #88]	; (1699c <bt_att_accept+0xc0>)
   16942:	1ad2      	subs	r2, r2, r3
   16944:	08d2      	lsrs	r2, r2, #3
   16946:	0192      	lsls	r2, r2, #6
   16948:	f042 0201 	orr.w	r2, r2, #1
   1694c:	e7da      	b.n	16904 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
   1694e:	4601      	mov	r1, r0
   16950:	f44f 72a4 	mov.w	r2, #328	; 0x148
   16954:	9801      	ldr	r0, [sp, #4]
   16956:	f012 f989 	bl	28c6c <memset>
	chan->chan.chan.ops = &ops;
   1695a:	9801      	ldr	r0, [sp, #4]
   1695c:	4b10      	ldr	r3, [pc, #64]	; (169a0 <bt_att_accept+0xc4>)
   1695e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   16960:	30f8      	adds	r0, #248	; 0xf8
   16962:	f013 fefc 	bl	2a75e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   16966:	9b01      	ldr	r3, [sp, #4]
   16968:	f3bf 8f5b 	dmb	ish
   1696c:	33f0      	adds	r3, #240	; 0xf0
   1696e:	e853 2f00 	ldrex	r2, [r3]
   16972:	e843 4100 	strex	r1, r4, [r3]
   16976:	2900      	cmp	r1, #0
   16978:	d1f9      	bne.n	1696e <bt_att_accept+0x92>
   1697a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1697e:	9b01      	ldr	r3, [sp, #4]
   16980:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
   16984:	603b      	str	r3, [r7, #0]
	return 0;
   16986:	e7c1      	b.n	1690c <bt_att_accept+0x30>
   16988:	20000690 	.word	0x20000690
   1698c:	0002b258 	.word	0x0002b258
   16990:	0002b248 	.word	0x0002b248
   16994:	0002db64 	.word	0x0002db64
   16998:	200006ac 	.word	0x200006ac
   1699c:	0002db89 	.word	0x0002db89
   169a0:	200001cc 	.word	0x200001cc

000169a4 <read_group_cb>:
{
   169a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   169a8:	4605      	mov	r5, r0
   169aa:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   169ac:	f04f 0800 	mov.w	r8, #0
   169b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   169b4:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   169b6:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   169b8:	f88d 8008 	strb.w	r8, [sp, #8]
   169bc:	a902      	add	r1, sp, #8
{
   169be:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   169c0:	f8ad 300a 	strh.w	r3, [sp, #10]
   169c4:	f012 f9c9 	bl	28d5a <bt_uuid_cmp>
   169c8:	b1a0      	cbz	r0, 169f4 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   169ca:	f642 0301 	movw	r3, #10241	; 0x2801
   169ce:	6828      	ldr	r0, [r5, #0]
   169d0:	f88d 800c 	strb.w	r8, [sp, #12]
   169d4:	a903      	add	r1, sp, #12
   169d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   169da:	f012 f9be 	bl	28d5a <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   169de:	b148      	cbz	r0, 169f4 <read_group_cb+0x50>
		if (data->group &&
   169e0:	6923      	ldr	r3, [r4, #16]
   169e2:	b11b      	cbz	r3, 169ec <read_group_cb+0x48>
   169e4:	885a      	ldrh	r2, [r3, #2]
   169e6:	42b2      	cmp	r2, r6
   169e8:	d200      	bcs.n	169ec <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   169ea:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   169ec:	2001      	movs	r0, #1
}
   169ee:	b004      	add	sp, #16
   169f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   169f4:	6861      	ldr	r1, [r4, #4]
   169f6:	6828      	ldr	r0, [r5, #0]
   169f8:	f012 f9af 	bl	28d5a <bt_uuid_cmp>
   169fc:	b110      	cbz	r0, 16a04 <read_group_cb+0x60>
		data->group = NULL;
   169fe:	2300      	movs	r3, #0
   16a00:	6123      	str	r3, [r4, #16]
   16a02:	e7f3      	b.n	169ec <read_group_cb+0x48>
	if (data->rsp->len &&
   16a04:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16a06:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
   16a08:	781a      	ldrb	r2, [r3, #0]
   16a0a:	b13a      	cbz	r2, 16a1c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   16a0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
   16a10:	8981      	ldrh	r1, [r0, #12]
   16a12:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   16a14:	4293      	cmp	r3, r2
   16a16:	da01      	bge.n	16a1c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   16a18:	2000      	movs	r0, #0
   16a1a:	e7e8      	b.n	169ee <read_group_cb+0x4a>
   16a1c:	2104      	movs	r1, #4
   16a1e:	3008      	adds	r0, #8
   16a20:	f013 fc46 	bl	2a2b0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16a24:	4b09      	ldr	r3, [pc, #36]	; (16a4c <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   16a26:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16a28:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   16a2a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   16a2c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   16a2e:	4629      	mov	r1, r5
   16a30:	9300      	str	r3, [sp, #0]
   16a32:	9401      	str	r4, [sp, #4]
   16a34:	2300      	movs	r3, #0
   16a36:	4638      	mov	r0, r7
   16a38:	f012 fe90 	bl	2975c <att_chan_read>
	if (read < 0) {
   16a3c:	2800      	cmp	r0, #0
   16a3e:	dbeb      	blt.n	16a18 <read_group_cb+0x74>
	if (!data->group) {
   16a40:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   16a42:	3800      	subs	r0, #0
   16a44:	bf18      	it	ne
   16a46:	2001      	movne	r0, #1
   16a48:	e7d1      	b.n	169ee <read_group_cb+0x4a>
   16a4a:	bf00      	nop
   16a4c:	000296cb 	.word	0x000296cb

00016a50 <chan_send>:
{
   16a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16a54:	688b      	ldr	r3, [r1, #8]
   16a56:	781b      	ldrb	r3, [r3, #0]
   16a58:	2bd2      	cmp	r3, #210	; 0xd2
{
   16a5a:	4606      	mov	r6, r0
   16a5c:	460c      	mov	r4, r1
   16a5e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   16a60:	d116      	bne.n	16a90 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
   16a62:	6803      	ldr	r3, [r0, #0]
   16a64:	6818      	ldr	r0, [r3, #0]
   16a66:	f013 fbbb 	bl	2a1e0 <bt_smp_sign>
		if (err) {
   16a6a:	4605      	mov	r5, r0
   16a6c:	b180      	cbz	r0, 16a90 <chan_send+0x40>
   16a6e:	4b24      	ldr	r3, [pc, #144]	; (16b00 <chan_send+0xb0>)
   16a70:	4924      	ldr	r1, [pc, #144]	; (16b04 <chan_send+0xb4>)
			BT_ERR("Error signing data");
   16a72:	4825      	ldr	r0, [pc, #148]	; (16b08 <chan_send+0xb8>)
   16a74:	1ac9      	subs	r1, r1, r3
   16a76:	08c9      	lsrs	r1, r1, #3
   16a78:	0189      	lsls	r1, r1, #6
   16a7a:	f041 0101 	orr.w	r1, r1, #1
   16a7e:	f011 fc9f 	bl	283c0 <log_0>
			net_buf_unref(buf);
   16a82:	4620      	mov	r0, r4
   16a84:	f00e fee2 	bl	2584c <net_buf_unref>
}
   16a88:	4628      	mov	r0, r5
   16a8a:	b003      	add	sp, #12
   16a8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   16a90:	f104 0008 	add.w	r0, r4, #8
   16a94:	f013 fc43 	bl	2a31e <net_buf_simple_headroom>
	state->len = buf->len;
   16a98:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   16a9c:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   16a9e:	b957      	cbnz	r7, 16ab6 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
   16aa0:	68a3      	ldr	r3, [r4, #8]
   16aa2:	7818      	ldrb	r0, [r3, #0]
   16aa4:	f012 fd8d 	bl	295c2 <att_op_get_type>
   16aa8:	1e43      	subs	r3, r0, #1
   16aaa:	b2db      	uxtb	r3, r3
   16aac:	2b04      	cmp	r3, #4
   16aae:	bf9c      	itt	ls
   16ab0:	4a16      	ldrls	r2, [pc, #88]	; (16b0c <chan_send+0xbc>)
   16ab2:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16ab6:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   16ab8:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16abc:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   16abe:	4b14      	ldr	r3, [pc, #80]	; (16b10 <chan_send+0xc0>)
   16ac0:	429f      	cmp	r7, r3
   16ac2:	d018      	beq.n	16af6 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
   16ac4:	4b13      	ldr	r3, [pc, #76]	; (16b14 <chan_send+0xc4>)
   16ac6:	429f      	cmp	r7, r3
   16ac8:	d017      	beq.n	16afa <chan_send+0xaa>
		return att_sent;
   16aca:	4913      	ldr	r1, [pc, #76]	; (16b18 <chan_send+0xc8>)
   16acc:	4b13      	ldr	r3, [pc, #76]	; (16b1c <chan_send+0xcc>)
   16ace:	4a14      	ldr	r2, [pc, #80]	; (16b20 <chan_send+0xd0>)
   16ad0:	428f      	cmp	r7, r1
   16ad2:	bf18      	it	ne
   16ad4:	4613      	movne	r3, r2
			       &chan->chan.chan);
   16ad6:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   16ad8:	9600      	str	r6, [sp, #0]
   16ada:	4622      	mov	r2, r4
   16adc:	2104      	movs	r1, #4
   16ade:	f012 fd0c 	bl	294fa <bt_l2cap_send_cb>
	if (err) {
   16ae2:	4605      	mov	r5, r0
   16ae4:	2800      	cmp	r0, #0
   16ae6:	d0cf      	beq.n	16a88 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
   16ae8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   16aea:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   16aee:	fa10 f088 	uxtah	r0, r0, r8
   16af2:	60a0      	str	r0, [r4, #8]
}
   16af4:	e7c8      	b.n	16a88 <chan_send+0x38>
		return att_rsp_sent;
   16af6:	4b0b      	ldr	r3, [pc, #44]	; (16b24 <chan_send+0xd4>)
   16af8:	e7ed      	b.n	16ad6 <chan_send+0x86>
		return att_cfm_sent;
   16afa:	4b0b      	ldr	r3, [pc, #44]	; (16b28 <chan_send+0xd8>)
   16afc:	e7eb      	b.n	16ad6 <chan_send+0x86>
   16afe:	bf00      	nop
   16b00:	0002b248 	.word	0x0002b248
   16b04:	0002b258 	.word	0x0002b258
   16b08:	0002dbae 	.word	0x0002dbae
   16b0c:	0002b6d4 	.word	0x0002b6d4
   16b10:	0002990d 	.word	0x0002990d
   16b14:	00029929 	.word	0x00029929
   16b18:	000296eb 	.word	0x000296eb
   16b1c:	000166d1 	.word	0x000166d1
   16b20:	00029593 	.word	0x00029593
   16b24:	000166c1 	.word	0x000166c1
   16b28:	000166b1 	.word	0x000166b1

00016b2c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   16b2c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
   16b2e:	4a07      	ldr	r2, [pc, #28]	; (16b4c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
   16b30:	4604      	mov	r4, r0
   16b32:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   16b34:	f7ff ff8c 	bl	16a50 <chan_send>
	if (err) {
   16b38:	b130      	cbz	r0, 16b48 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
   16b3a:	4629      	mov	r1, r5
   16b3c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
   16b40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   16b44:	f013 bb75 	b.w	2a232 <net_buf_put>
}
   16b48:	bd38      	pop	{r3, r4, r5, pc}
   16b4a:	bf00      	nop
   16b4c:	0002990d 	.word	0x0002990d

00016b50 <read_type_cb>:
{
   16b50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   16b54:	f8d2 8000 	ldr.w	r8, [r2]
{
   16b58:	4606      	mov	r6, r0
   16b5a:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16b5c:	6800      	ldr	r0, [r0, #0]
   16b5e:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   16b60:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   16b64:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   16b66:	f012 f8f8 	bl	28d5a <bt_uuid_cmp>
   16b6a:	4607      	mov	r7, r0
   16b6c:	2800      	cmp	r0, #0
   16b6e:	d13e      	bne.n	16bee <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   16b70:	4628      	mov	r0, r5
   16b72:	2215      	movs	r2, #21
   16b74:	4631      	mov	r1, r6
   16b76:	f013 fab8 	bl	2a0ea <bt_gatt_check_perm>
   16b7a:	4605      	mov	r5, r0
   16b7c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   16b7e:	b148      	cbz	r0, 16b94 <read_type_cb+0x44>
		if (data->rsp->len) {
   16b80:	68e3      	ldr	r3, [r4, #12]
   16b82:	781b      	ldrb	r3, [r3, #0]
   16b84:	b923      	cbnz	r3, 16b90 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   16b86:	2500      	movs	r5, #0
}
   16b88:	4628      	mov	r0, r5
   16b8a:	b003      	add	sp, #12
   16b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   16b90:	7527      	strb	r7, [r4, #20]
   16b92:	e7f8      	b.n	16b86 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16b94:	68a0      	ldr	r0, [r4, #8]
   16b96:	f013 fb5d 	bl	2a254 <net_buf_frag_last>
	return net_buf_simple_add(&buf->b, len);
   16b9a:	2102      	movs	r1, #2
   16b9c:	3008      	adds	r0, #8
   16b9e:	f013 fb87 	bl	2a2b0 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16ba2:	4b14      	ldr	r3, [pc, #80]	; (16bf4 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   16ba4:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16ba6:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   16ba8:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   16bac:	4631      	mov	r1, r6
   16bae:	9300      	str	r3, [sp, #0]
   16bb0:	9401      	str	r4, [sp, #4]
   16bb2:	462b      	mov	r3, r5
   16bb4:	4640      	mov	r0, r8
   16bb6:	f012 fdd1 	bl	2975c <att_chan_read>
	if (read < 0) {
   16bba:	2800      	cmp	r0, #0
   16bbc:	da07      	bge.n	16bce <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   16bbe:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   16bc2:	bf26      	itte	cs
   16bc4:	4240      	negcs	r0, r0
   16bc6:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   16bc8:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   16bca:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   16bcc:	e7dc      	b.n	16b88 <read_type_cb+0x38>
	if (!data->item) {
   16bce:	6923      	ldr	r3, [r4, #16]
   16bd0:	2b00      	cmp	r3, #0
   16bd2:	d0d8      	beq.n	16b86 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16bd4:	68a0      	ldr	r0, [r4, #8]
   16bd6:	f012 fcd4 	bl	29582 <net_buf_frags_len>
   16bda:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16bde:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   16be0:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   16be2:	7818      	ldrb	r0, [r3, #0]
   16be4:	4285      	cmp	r5, r0
   16be6:	bf94      	ite	ls
   16be8:	2500      	movls	r5, #0
   16bea:	2501      	movhi	r5, #1
   16bec:	e7cc      	b.n	16b88 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   16bee:	2501      	movs	r5, #1
   16bf0:	e7ca      	b.n	16b88 <read_type_cb+0x38>
   16bf2:	bf00      	nop
   16bf4:	0002959f 	.word	0x0002959f

00016bf8 <bt_att_connected>:
{
   16bf8:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16bfa:	2104      	movs	r1, #4
{
   16bfc:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   16bfe:	6800      	ldr	r0, [r0, #0]
   16c00:	f012 fc94 	bl	2952c <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
   16c04:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   16c08:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   16c0a:	b91b      	cbnz	r3, 16c14 <bt_att_connected+0x1c>
   16c0c:	f105 000c 	add.w	r0, r5, #12
   16c10:	f013 fda5 	bl	2a75e <z_impl_k_queue_init>
	parent->next = child;
   16c14:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   16c16:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
   16c1a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	sys_slist_prepend(&att->chans, &chan->node);
   16c1c:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
   16c20:	626b      	str	r3, [r5, #36]	; 0x24
Z_GENLIST_PREPEND(slist, snode)
   16c22:	b902      	cbnz	r2, 16c26 <bt_att_connected+0x2e>
	list->tail = node;
   16c24:	62ab      	str	r3, [r5, #40]	; 0x28
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   16c26:	f3bf 8f5b 	dmb	ish
   16c2a:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16c2e:	4908      	ldr	r1, [pc, #32]	; (16c50 <bt_att_connected+0x58>)
   16c30:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   16c34:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16c36:	bf5e      	ittt	pl
   16c38:	2317      	movpl	r3, #23
   16c3a:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   16c3e:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16c42:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   16c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   16c4a:	f013 be8b 	b.w	2a964 <k_work_init_delayable>
   16c4e:	bf00      	nop
   16c50:	0001751d 	.word	0x0001751d

00016c54 <bt_att_chan_create_pdu>:
{
   16c54:	b538      	push	{r3, r4, r5, lr}
   16c56:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   16c58:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
   16c5c:	3201      	adds	r2, #1
   16c5e:	428a      	cmp	r2, r1
   16c60:	d90c      	bls.n	16c7c <bt_att_chan_create_pdu+0x28>
   16c62:	481a      	ldr	r0, [pc, #104]	; (16ccc <bt_att_chan_create_pdu+0x78>)
   16c64:	4b1a      	ldr	r3, [pc, #104]	; (16cd0 <bt_att_chan_create_pdu+0x7c>)
   16c66:	1a1b      	subs	r3, r3, r0
   16c68:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   16c6a:	019b      	lsls	r3, r3, #6
   16c6c:	4819      	ldr	r0, [pc, #100]	; (16cd4 <bt_att_chan_create_pdu+0x80>)
   16c6e:	f043 0302 	orr.w	r3, r3, #2
   16c72:	f011 fbc6 	bl	28402 <log_2>
		return NULL;
   16c76:	2400      	movs	r4, #0
}
   16c78:	4620      	mov	r0, r4
   16c7a:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
   16c7c:	4628      	mov	r0, r5
   16c7e:	f012 fca0 	bl	295c2 <att_op_get_type>
   16c82:	2802      	cmp	r0, #2
   16c84:	d001      	beq.n	16c8a <bt_att_chan_create_pdu+0x36>
   16c86:	2804      	cmp	r0, #4
   16c88:	d114      	bne.n	16cb4 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   16c8a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   16c8e:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   16c90:	2100      	movs	r1, #0
   16c92:	4608      	mov	r0, r1
   16c94:	f012 fc2e 	bl	294f4 <bt_l2cap_create_pdu_timeout>
   16c98:	4604      	mov	r4, r0
	if (!buf) {
   16c9a:	b980      	cbnz	r0, 16cbe <bt_att_chan_create_pdu+0x6a>
   16c9c:	4b0b      	ldr	r3, [pc, #44]	; (16ccc <bt_att_chan_create_pdu+0x78>)
   16c9e:	4a0c      	ldr	r2, [pc, #48]	; (16cd0 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   16ca0:	480d      	ldr	r0, [pc, #52]	; (16cd8 <bt_att_chan_create_pdu+0x84>)
   16ca2:	1ad2      	subs	r2, r2, r3
   16ca4:	08d2      	lsrs	r2, r2, #3
   16ca6:	0192      	lsls	r2, r2, #6
   16ca8:	f042 0201 	orr.w	r2, r2, #1
   16cac:	4629      	mov	r1, r5
   16cae:	f011 fb94 	bl	283da <log_1>
		return NULL;
   16cb2:	e7e1      	b.n	16c78 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
   16cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16cb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16cbc:	e7e8      	b.n	16c90 <bt_att_chan_create_pdu+0x3c>
   16cbe:	2101      	movs	r1, #1
   16cc0:	3008      	adds	r0, #8
   16cc2:	f013 faf5 	bl	2a2b0 <net_buf_simple_add>
	hdr->code = op;
   16cc6:	7005      	strb	r5, [r0, #0]
	return buf;
   16cc8:	e7d6      	b.n	16c78 <bt_att_chan_create_pdu+0x24>
   16cca:	bf00      	nop
   16ccc:	0002b248 	.word	0x0002b248
   16cd0:	0002b258 	.word	0x0002b258
   16cd4:	0002dbc1 	.word	0x0002dbc1
   16cd8:	0002d9ae 	.word	0x0002d9ae

00016cdc <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   16cdc:	898b      	ldrh	r3, [r1, #12]
{
   16cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16ce2:	4604      	mov	r4, r0
   16ce4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   16ce6:	b963      	cbnz	r3, 16d02 <bt_att_recv+0x26>
   16ce8:	494c      	ldr	r1, [pc, #304]	; (16e1c <bt_att_recv+0x140>)
   16cea:	4b4d      	ldr	r3, [pc, #308]	; (16e20 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
   16cec:	484d      	ldr	r0, [pc, #308]	; (16e24 <bt_att_recv+0x148>)
   16cee:	1ac9      	subs	r1, r1, r3
   16cf0:	08c9      	lsrs	r1, r1, #3
   16cf2:	0189      	lsls	r1, r1, #6
   16cf4:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   16cf8:	f011 fb62 	bl	283c0 <log_0>
}
   16cfc:	2000      	movs	r0, #0
   16cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   16d02:	2101      	movs	r1, #1
   16d04:	f108 0008 	add.w	r0, r8, #8
   16d08:	f013 faf9 	bl	2a2fe <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   16d0c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   16d10:	4605      	mov	r5, r0
   16d12:	2b00      	cmp	r3, #0
   16d14:	d0f2      	beq.n	16cfc <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
   16d16:	7801      	ldrb	r1, [r0, #0]
   16d18:	4a43      	ldr	r2, [pc, #268]	; (16e28 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   16d1a:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16d1e:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
   16d20:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   16d24:	4288      	cmp	r0, r1
   16d26:	d11e      	bne.n	16d66 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
   16d28:	00d8      	lsls	r0, r3, #3
   16d2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   16d2e:	789f      	ldrb	r7, [r3, #2]
   16d30:	2f01      	cmp	r7, #1
   16d32:	d133      	bne.n	16d9c <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16d34:	f3bf 8f5b 	dmb	ish
   16d38:	34e8      	adds	r4, #232	; 0xe8
   16d3a:	e854 3f00 	ldrex	r3, [r4]
   16d3e:	f043 0101 	orr.w	r1, r3, #1
   16d42:	e844 1c00 	strex	ip, r1, [r4]
   16d46:	f1bc 0f00 	cmp.w	ip, #0
   16d4a:	d1f6      	bne.n	16d3a <bt_att_recv+0x5e>
   16d4c:	f3bf 8f5b 	dmb	ish
   16d50:	07d9      	lsls	r1, r3, #31
   16d52:	d53e      	bpl.n	16dd2 <bt_att_recv+0xf6>
   16d54:	4931      	ldr	r1, [pc, #196]	; (16e1c <bt_att_recv+0x140>)
   16d56:	4b32      	ldr	r3, [pc, #200]	; (16e20 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
   16d58:	4834      	ldr	r0, [pc, #208]	; (16e2c <bt_att_recv+0x150>)
   16d5a:	1ac9      	subs	r1, r1, r3
   16d5c:	08c9      	lsrs	r1, r1, #3
   16d5e:	0189      	lsls	r1, r1, #6
   16d60:	f041 0102 	orr.w	r1, r1, #2
   16d64:	e7c8      	b.n	16cf8 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   16d66:	3301      	adds	r3, #1
   16d68:	2b0d      	cmp	r3, #13
   16d6a:	d1d9      	bne.n	16d20 <bt_att_recv+0x44>
   16d6c:	4b2c      	ldr	r3, [pc, #176]	; (16e20 <bt_att_recv+0x144>)
   16d6e:	4a2b      	ldr	r2, [pc, #172]	; (16e1c <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   16d70:	482f      	ldr	r0, [pc, #188]	; (16e30 <bt_att_recv+0x154>)
   16d72:	1ad2      	subs	r2, r2, r3
   16d74:	08d2      	lsrs	r2, r2, #3
   16d76:	0192      	lsls	r2, r2, #6
   16d78:	f042 0202 	orr.w	r2, r2, #2
   16d7c:	f011 fb2d 	bl	283da <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
   16d80:	7829      	ldrb	r1, [r5, #0]
   16d82:	4608      	mov	r0, r1
   16d84:	f012 fc1d 	bl	295c2 <att_op_get_type>
   16d88:	2800      	cmp	r0, #0
   16d8a:	d0b7      	beq.n	16cfc <bt_att_recv+0x20>
	if (!req) {
   16d8c:	2900      	cmp	r1, #0
   16d8e:	d0b5      	beq.n	16cfc <bt_att_recv+0x20>
   16d90:	2306      	movs	r3, #6
   16d92:	2200      	movs	r2, #0
   16d94:	4630      	mov	r0, r6
   16d96:	f012 fe8c 	bl	29ab2 <send_err_rsp.part.0>
   16d9a:	e7af      	b.n	16cfc <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
   16d9c:	2f05      	cmp	r7, #5
   16d9e:	d118      	bne.n	16dd2 <bt_att_recv+0xf6>
   16da0:	f3bf 8f5b 	dmb	ish
   16da4:	34e8      	adds	r4, #232	; 0xe8
   16da6:	e854 3f00 	ldrex	r3, [r4]
   16daa:	f043 0102 	orr.w	r1, r3, #2
   16dae:	e844 1c00 	strex	ip, r1, [r4]
   16db2:	f1bc 0f00 	cmp.w	ip, #0
   16db6:	d1f6      	bne.n	16da6 <bt_att_recv+0xca>
   16db8:	f3bf 8f5b 	dmb	ish
   16dbc:	079b      	lsls	r3, r3, #30
   16dbe:	d508      	bpl.n	16dd2 <bt_att_recv+0xf6>
   16dc0:	4916      	ldr	r1, [pc, #88]	; (16e1c <bt_att_recv+0x140>)
   16dc2:	4b17      	ldr	r3, [pc, #92]	; (16e20 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
   16dc4:	481b      	ldr	r0, [pc, #108]	; (16e34 <bt_att_recv+0x158>)
   16dc6:	1ac9      	subs	r1, r1, r3
   16dc8:	08c9      	lsrs	r1, r1, #3
   16dca:	0189      	lsls	r1, r1, #6
   16dcc:	f041 0102 	orr.w	r1, r1, #2
   16dd0:	e792      	b.n	16cf8 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
   16dd2:	1813      	adds	r3, r2, r0
   16dd4:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   16dd8:	785a      	ldrb	r2, [r3, #1]
   16dda:	428a      	cmp	r2, r1
   16ddc:	d90e      	bls.n	16dfc <bt_att_recv+0x120>
   16dde:	4a10      	ldr	r2, [pc, #64]	; (16e20 <bt_att_recv+0x144>)
   16de0:	4b0e      	ldr	r3, [pc, #56]	; (16e1c <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   16de2:	4815      	ldr	r0, [pc, #84]	; (16e38 <bt_att_recv+0x15c>)
   16de4:	1a9b      	subs	r3, r3, r2
   16de6:	08db      	lsrs	r3, r3, #3
   16de8:	019b      	lsls	r3, r3, #6
   16dea:	782a      	ldrb	r2, [r5, #0]
   16dec:	f043 0301 	orr.w	r3, r3, #1
   16df0:	f011 fb07 	bl	28402 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   16df4:	2f01      	cmp	r7, #1
   16df6:	d181      	bne.n	16cfc <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
   16df8:	2304      	movs	r3, #4
   16dfa:	e00a      	b.n	16e12 <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
   16dfc:	685b      	ldr	r3, [r3, #4]
   16dfe:	4641      	mov	r1, r8
   16e00:	4630      	mov	r0, r6
   16e02:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   16e04:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
   16e06:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   16e08:	f47f af78 	bne.w	16cfc <bt_att_recv+0x20>
   16e0c:	2800      	cmp	r0, #0
   16e0e:	f43f af75 	beq.w	16cfc <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
   16e12:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   16e14:	2900      	cmp	r1, #0
   16e16:	f43f af71 	beq.w	16cfc <bt_att_recv+0x20>
   16e1a:	e7ba      	b.n	16d92 <bt_att_recv+0xb6>
   16e1c:	0002b258 	.word	0x0002b258
   16e20:	0002b248 	.word	0x0002b248
   16e24:	0002dbe6 	.word	0x0002dbe6
   16e28:	0002b6e8 	.word	0x0002b6e8
   16e2c:	0002dc01 	.word	0x0002dc01
   16e30:	0002dc5b 	.word	0x0002dc5b
   16e34:	0002dc1d 	.word	0x0002dc1d
   16e38:	0002dc3c 	.word	0x0002dc3c

00016e3c <att_write_rsp.constprop.0>:
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16e40:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16e42:	6803      	ldr	r3, [r0, #0]
   16e44:	460e      	mov	r6, r1
   16e46:	3900      	subs	r1, #0
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16e48:	b087      	sub	sp, #28
   16e4a:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16e4c:	bf18      	it	ne
   16e4e:	2101      	movne	r1, #1
   16e50:	6818      	ldr	r0, [r3, #0]
static uint8_t att_write_rsp(struct bt_att_chan *chan, uint8_t req, uint8_t rsp,
   16e52:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   16e54:	f013 f96c 	bl	2a130 <bt_gatt_change_aware>
   16e58:	2800      	cmp	r0, #0
   16e5a:	d04a      	beq.n	16ef2 <att_write_rsp.constprop.0+0xb6>
	if (!handle) {
   16e5c:	2f00      	cmp	r7, #0
   16e5e:	d04a      	beq.n	16ef6 <att_write_rsp.constprop.0+0xba>
	(void)memset(&data, 0, sizeof(data));
   16e60:	2218      	movs	r2, #24
   16e62:	2100      	movs	r1, #0
   16e64:	4668      	mov	r0, sp
   16e66:	f011 ff01 	bl	28c6c <memset>
	if (rsp) {
   16e6a:	f1b8 0f00 	cmp.w	r8, #0
   16e6e:	d122      	bne.n	16eb6 <att_write_rsp.constprop.0+0x7a>
	data.conn = chan->att->conn;
   16e70:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16e72:	4a22      	ldr	r2, [pc, #136]	; (16efc <att_write_rsp.constprop.0+0xc0>)
	data.conn = chan->att->conn;
   16e74:	681b      	ldr	r3, [r3, #0]
   16e76:	9300      	str	r3, [sp, #0]
	data.value = value;
   16e78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16e7a:	9303      	str	r3, [sp, #12]
	data.len = len;
   16e7c:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   16e80:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   16e84:	2301      	movs	r3, #1
   16e86:	f88d 3014 	strb.w	r3, [sp, #20]
	data.offset = offset;
   16e8a:	f04f 0900 	mov.w	r9, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16e8e:	466b      	mov	r3, sp
   16e90:	4639      	mov	r1, r7
   16e92:	4638      	mov	r0, r7
	data.req = req;
   16e94:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
   16e98:	f8ad 9012 	strh.w	r9, [sp, #18]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   16e9c:	f012 fbbe 	bl	2961c <bt_gatt_foreach_attr>
	if (data.err) {
   16ea0:	f89d 4014 	ldrb.w	r4, [sp, #20]
   16ea4:	b1f4      	cbz	r4, 16ee4 <att_write_rsp.constprop.0+0xa8>
		if (rsp) {
   16ea6:	f1b8 0f00 	cmp.w	r8, #0
   16eaa:	d10e      	bne.n	16eca <att_write_rsp.constprop.0+0x8e>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   16eac:	2400      	movs	r4, #0
}
   16eae:	4620      	mov	r0, r4
   16eb0:	b007      	add	sp, #28
   16eb2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   16eb6:	2200      	movs	r2, #0
   16eb8:	4641      	mov	r1, r8
   16eba:	4628      	mov	r0, r5
   16ebc:	f7ff feca 	bl	16c54 <bt_att_chan_create_pdu>
   16ec0:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   16ec2:	2800      	cmp	r0, #0
   16ec4:	d1d4      	bne.n	16e70 <att_write_rsp.constprop.0+0x34>
			return BT_ATT_ERR_UNLIKELY;
   16ec6:	240e      	movs	r4, #14
   16ec8:	e7f1      	b.n	16eae <att_write_rsp.constprop.0+0x72>
			net_buf_unref(data.buf);
   16eca:	9801      	ldr	r0, [sp, #4]
   16ecc:	f00e fcbe 	bl	2584c <net_buf_unref>
	if (!req) {
   16ed0:	2e00      	cmp	r6, #0
   16ed2:	d0eb      	beq.n	16eac <att_write_rsp.constprop.0+0x70>
   16ed4:	f89d 3014 	ldrb.w	r3, [sp, #20]
   16ed8:	463a      	mov	r2, r7
   16eda:	4631      	mov	r1, r6
   16edc:	4628      	mov	r0, r5
   16ede:	f012 fde8 	bl	29ab2 <send_err_rsp.part.0>
   16ee2:	e7e3      	b.n	16eac <att_write_rsp.constprop.0+0x70>
	if (data.buf) {
   16ee4:	9901      	ldr	r1, [sp, #4]
   16ee6:	2900      	cmp	r1, #0
   16ee8:	d0e0      	beq.n	16eac <att_write_rsp.constprop.0+0x70>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   16eea:	4628      	mov	r0, r5
   16eec:	f7ff fe1e 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
   16ef0:	e7dd      	b.n	16eae <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   16ef2:	2412      	movs	r4, #18
   16ef4:	e7db      	b.n	16eae <att_write_rsp.constprop.0+0x72>
		return BT_ATT_ERR_INVALID_HANDLE;
   16ef6:	2401      	movs	r4, #1
   16ef8:	e7d9      	b.n	16eae <att_write_rsp.constprop.0+0x72>
   16efa:	bf00      	nop
   16efc:	00029701 	.word	0x00029701

00016f00 <bt_att_create_pdu>:
{
   16f00:	b570      	push	{r4, r5, r6, lr}
   16f02:	460e      	mov	r6, r1
   16f04:	4615      	mov	r5, r2
	att = att_get(conn);
   16f06:	f7ff fbeb 	bl	166e0 <att_get>
	if (!att) {
   16f0a:	b1c0      	cbz	r0, 16f3e <bt_att_create_pdu+0x3e>
	return list->head;
   16f0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   16f0e:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16f10:	b15b      	cbz	r3, 16f2a <bt_att_create_pdu+0x2a>
   16f12:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   16f16:	d008      	beq.n	16f2a <bt_att_create_pdu+0x2a>
	return node->next;
   16f18:	681b      	ldr	r3, [r3, #0]
   16f1a:	b10b      	cbz	r3, 16f20 <bt_att_create_pdu+0x20>
   16f1c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   16f20:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
   16f24:	4291      	cmp	r1, r2
   16f26:	d90c      	bls.n	16f42 <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16f28:	b98b      	cbnz	r3, 16f4e <bt_att_create_pdu+0x4e>
   16f2a:	4a0e      	ldr	r2, [pc, #56]	; (16f64 <bt_att_create_pdu+0x64>)
   16f2c:	4b0e      	ldr	r3, [pc, #56]	; (16f68 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   16f2e:	480f      	ldr	r0, [pc, #60]	; (16f6c <bt_att_create_pdu+0x6c>)
   16f30:	1ad2      	subs	r2, r2, r3
   16f32:	08d2      	lsrs	r2, r2, #3
   16f34:	0192      	lsls	r2, r2, #6
   16f36:	f042 0202 	orr.w	r2, r2, #2
   16f3a:	f011 fa4e 	bl	283da <log_1>
}
   16f3e:	2000      	movs	r0, #0
   16f40:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   16f42:	462a      	mov	r2, r5
   16f44:	4631      	mov	r1, r6
}
   16f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   16f4a:	f7ff be83 	b.w	16c54 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   16f4e:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
   16f52:	d004      	beq.n	16f5e <bt_att_create_pdu+0x5e>
	return node->next;
   16f54:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   16f58:	b10c      	cbz	r4, 16f5e <bt_att_create_pdu+0x5e>
   16f5a:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
   16f5e:	4618      	mov	r0, r3
   16f60:	4623      	mov	r3, r4
   16f62:	e7dd      	b.n	16f20 <bt_att_create_pdu+0x20>
   16f64:	0002b258 	.word	0x0002b258
   16f68:	0002b248 	.word	0x0002b248
   16f6c:	0002dc75 	.word	0x0002dc75

00016f70 <att_read_group_req>:
{
   16f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   16f74:	898c      	ldrh	r4, [r1, #12]
   16f76:	3c04      	subs	r4, #4
   16f78:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   16f7a:	2c02      	cmp	r4, #2
{
   16f7c:	4605      	mov	r5, r0
   16f7e:	b08c      	sub	sp, #48	; 0x30
   16f80:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   16f82:	d001      	beq.n	16f88 <att_read_group_req+0x18>
   16f84:	2c10      	cmp	r4, #16
   16f86:	d16e      	bne.n	17066 <att_read_group_req+0xf6>
   16f88:	2104      	movs	r1, #4
   16f8a:	3008      	adds	r0, #8
   16f8c:	f013 f9b7 	bl	2a2fe <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16f90:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   16f94:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   16f96:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   16f98:	1d01      	adds	r1, r0, #4
   16f9a:	4622      	mov	r2, r4
   16f9c:	4640      	mov	r0, r8
   16f9e:	f011 ff0a 	bl	28db6 <bt_uuid_create>
   16fa2:	2800      	cmp	r0, #0
   16fa4:	d061      	beq.n	1706a <att_read_group_req+0xfa>
	if (!start || !end) {
   16fa6:	2e00      	cmp	r6, #0
   16fa8:	d03a      	beq.n	17020 <att_read_group_req+0xb0>
   16faa:	2400      	movs	r4, #0
   16fac:	2f00      	cmp	r7, #0
   16fae:	d036      	beq.n	1701e <att_read_group_req+0xae>
	if (start > end) {
   16fb0:	42b7      	cmp	r7, r6
   16fb2:	d335      	bcc.n	17020 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   16fb4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   16fb8:	a901      	add	r1, sp, #4
   16fba:	4640      	mov	r0, r8
   16fbc:	f88d 4004 	strb.w	r4, [sp, #4]
   16fc0:	f8ad 3006 	strh.w	r3, [sp, #6]
   16fc4:	f011 fec9 	bl	28d5a <bt_uuid_cmp>
   16fc8:	2800      	cmp	r0, #0
   16fca:	d134      	bne.n	17036 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   16fcc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   16fce:	2214      	movs	r2, #20
   16fd0:	2100      	movs	r1, #0
   16fd2:	a807      	add	r0, sp, #28
   16fd4:	f011 fe4a 	bl	28c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   16fd8:	2201      	movs	r2, #1
   16fda:	2111      	movs	r1, #17
   16fdc:	4620      	mov	r0, r4
   16fde:	f7ff ff8f 	bl	16f00 <bt_att_create_pdu>
   16fe2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   16fe4:	2800      	cmp	r0, #0
   16fe6:	d040      	beq.n	1706a <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
   16fe8:	2101      	movs	r1, #1
   16fea:	3008      	adds	r0, #8
	data.uuid = uuid;
   16fec:	e9cd 5807 	strd	r5, r8, [sp, #28]
   16ff0:	f013 f95e 	bl	2a2b0 <net_buf_simple_add>
	data.rsp->len = 0U;
   16ff4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   16ff8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   16ffa:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   16ffc:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17000:	4a1b      	ldr	r2, [pc, #108]	; (17070 <att_read_group_req+0x100>)
	data.group = NULL;
   17002:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   17006:	4639      	mov	r1, r7
   17008:	4630      	mov	r0, r6
   1700a:	f012 fb07 	bl	2961c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1700e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17010:	781c      	ldrb	r4, [r3, #0]
   17012:	bb1c      	cbnz	r4, 1705c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   17014:	9809      	ldr	r0, [sp, #36]	; 0x24
   17016:	f00e fc19 	bl	2584c <net_buf_unref>
	if (!req) {
   1701a:	230a      	movs	r3, #10
   1701c:	e018      	b.n	17050 <att_read_group_req+0xe0>
			*err = 0U;
   1701e:	463e      	mov	r6, r7
	if (!req) {
   17020:	2301      	movs	r3, #1
   17022:	4632      	mov	r2, r6
   17024:	2110      	movs	r1, #16
   17026:	4628      	mov	r0, r5
   17028:	f012 fd43 	bl	29ab2 <send_err_rsp.part.0>
		return 0;
   1702c:	2400      	movs	r4, #0
}
   1702e:	4620      	mov	r0, r4
   17030:	b00c      	add	sp, #48	; 0x30
   17032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   17036:	f642 0301 	movw	r3, #10241	; 0x2801
   1703a:	a907      	add	r1, sp, #28
   1703c:	4640      	mov	r0, r8
   1703e:	f88d 401c 	strb.w	r4, [sp, #28]
   17042:	f8ad 301e 	strh.w	r3, [sp, #30]
   17046:	f011 fe88 	bl	28d5a <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1704a:	2800      	cmp	r0, #0
   1704c:	d0be      	beq.n	16fcc <att_read_group_req+0x5c>
	if (!req) {
   1704e:	2310      	movs	r3, #16
   17050:	4632      	mov	r2, r6
   17052:	2110      	movs	r1, #16
   17054:	4628      	mov	r0, r5
   17056:	f012 fd2c 	bl	29ab2 <send_err_rsp.part.0>
		return 0;
   1705a:	e7e8      	b.n	1702e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1705c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1705e:	4628      	mov	r0, r5
   17060:	f7ff fd64 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   17064:	e7e2      	b.n	1702c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   17066:	2404      	movs	r4, #4
   17068:	e7e1      	b.n	1702e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1706a:	240e      	movs	r4, #14
   1706c:	e7df      	b.n	1702e <att_read_group_req+0xbe>
   1706e:	bf00      	nop
   17070:	000169a5 	.word	0x000169a5

00017074 <att_read_mult_req>:
{
   17074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   17078:	6886      	ldr	r6, [r0, #8]
{
   1707a:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
   1707c:	2210      	movs	r2, #16
{
   1707e:	4604      	mov	r4, r0
   17080:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
   17082:	4668      	mov	r0, sp
   17084:	2100      	movs	r1, #0
   17086:	f011 fdf1 	bl	28c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1708a:	2200      	movs	r2, #0
   1708c:	210f      	movs	r1, #15
   1708e:	4630      	mov	r0, r6
   17090:	f7ff ff36 	bl	16f00 <bt_att_create_pdu>
   17094:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   17096:	b358      	cbz	r0, 170f0 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   17098:	f8df 9058 	ldr.w	r9, [pc, #88]	; 170f4 <att_read_mult_req+0x80>
	data.chan = chan;
   1709c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1709e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   170a2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   170a6:	89ab      	ldrh	r3, [r5, #12]
   170a8:	2b01      	cmp	r3, #1
   170aa:	d804      	bhi.n	170b6 <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   170ac:	9902      	ldr	r1, [sp, #8]
   170ae:	4620      	mov	r0, r4
   170b0:	f7ff fd3c 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
   170b4:	e018      	b.n	170e8 <att_read_mult_req+0x74>
   170b6:	4638      	mov	r0, r7
   170b8:	f013 f929 	bl	2a30e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   170bc:	466b      	mov	r3, sp
   170be:	464a      	mov	r2, r9
   170c0:	4601      	mov	r1, r0
   170c2:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   170c4:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   170c8:	f012 faa8 	bl	2961c <bt_gatt_foreach_attr>
		if (data.err) {
   170cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   170d0:	2b00      	cmp	r3, #0
   170d2:	d0e8      	beq.n	170a6 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
   170d4:	9802      	ldr	r0, [sp, #8]
   170d6:	f00e fbb9 	bl	2584c <net_buf_unref>
	if (!req) {
   170da:	f89d 300c 	ldrb.w	r3, [sp, #12]
   170de:	4632      	mov	r2, r6
   170e0:	210e      	movs	r1, #14
   170e2:	4620      	mov	r0, r4
   170e4:	f012 fce5 	bl	29ab2 <send_err_rsp.part.0>
	return 0;
   170e8:	2000      	movs	r0, #0
}
   170ea:	b005      	add	sp, #20
   170ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
   170f0:	200e      	movs	r0, #14
   170f2:	e7fa      	b.n	170ea <att_read_mult_req+0x76>
   170f4:	00029945 	.word	0x00029945

000170f8 <att_read_rsp>:
{
   170f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   170fc:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   17100:	4605      	mov	r5, r0
   17102:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   17104:	4640      	mov	r0, r8
   17106:	2101      	movs	r1, #1
{
   17108:	4614      	mov	r4, r2
   1710a:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1710c:	f013 f810 	bl	2a130 <bt_gatt_change_aware>
   17110:	b388      	cbz	r0, 17176 <att_read_rsp+0x7e>
	if (!handle) {
   17112:	b396      	cbz	r6, 1717a <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
   17114:	2210      	movs	r2, #16
   17116:	2100      	movs	r1, #0
   17118:	4668      	mov	r0, sp
   1711a:	f011 fda7 	bl	28c6c <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1711e:	2200      	movs	r2, #0
   17120:	4621      	mov	r1, r4
   17122:	4640      	mov	r0, r8
   17124:	f7ff feec 	bl	16f00 <bt_att_create_pdu>
   17128:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1712a:	b340      	cbz	r0, 1717e <att_read_rsp+0x86>
	data.offset = offset;
   1712c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   17130:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   17134:	2301      	movs	r3, #1
   17136:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1713a:	4a12      	ldr	r2, [pc, #72]	; (17184 <att_read_rsp+0x8c>)
	data.chan = chan;
   1713c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1713e:	466b      	mov	r3, sp
   17140:	4631      	mov	r1, r6
   17142:	4630      	mov	r0, r6
   17144:	f012 fa6a 	bl	2961c <bt_gatt_foreach_attr>
	if (data.err) {
   17148:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1714c:	b174      	cbz	r4, 1716c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1714e:	9802      	ldr	r0, [sp, #8]
   17150:	f00e fb7c 	bl	2584c <net_buf_unref>
	if (!req) {
   17154:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17158:	4632      	mov	r2, r6
   1715a:	4639      	mov	r1, r7
   1715c:	4628      	mov	r0, r5
   1715e:	f012 fca8 	bl	29ab2 <send_err_rsp.part.0>
		return 0;
   17162:	2400      	movs	r4, #0
}
   17164:	4620      	mov	r0, r4
   17166:	b004      	add	sp, #16
   17168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1716c:	9902      	ldr	r1, [sp, #8]
   1716e:	4628      	mov	r0, r5
   17170:	f7ff fcdc 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   17174:	e7f6      	b.n	17164 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   17176:	2412      	movs	r4, #18
   17178:	e7f4      	b.n	17164 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1717a:	2401      	movs	r4, #1
   1717c:	e7f2      	b.n	17164 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1717e:	240e      	movs	r4, #14
   17180:	e7f0      	b.n	17164 <att_read_rsp+0x6c>
   17182:	bf00      	nop
   17184:	00029945 	.word	0x00029945

00017188 <att_read_type_req>:
{
   17188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1718c:	898c      	ldrh	r4, [r1, #12]
   1718e:	3c04      	subs	r4, #4
   17190:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   17192:	2c02      	cmp	r4, #2
{
   17194:	4605      	mov	r5, r0
   17196:	b08c      	sub	sp, #48	; 0x30
   17198:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1719a:	d001      	beq.n	171a0 <att_read_type_req+0x18>
   1719c:	2c10      	cmp	r4, #16
   1719e:	d14f      	bne.n	17240 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
   171a0:	2104      	movs	r1, #4
   171a2:	3008      	adds	r0, #8
   171a4:	f013 f8ab 	bl	2a2fe <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   171a8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   171ac:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   171ae:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   171b0:	1d01      	adds	r1, r0, #4
   171b2:	4622      	mov	r2, r4
   171b4:	4640      	mov	r0, r8
   171b6:	f011 fdfe 	bl	28db6 <bt_uuid_create>
   171ba:	b188      	cbz	r0, 171e0 <att_read_type_req+0x58>
	if (!start || !end) {
   171bc:	b19e      	cbz	r6, 171e6 <att_read_type_req+0x5e>
   171be:	b18f      	cbz	r7, 171e4 <att_read_type_req+0x5c>
	if (start > end) {
   171c0:	42be      	cmp	r6, r7
   171c2:	d810      	bhi.n	171e6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   171c4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   171c6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   171c8:	2100      	movs	r1, #0
   171ca:	eb0d 0002 	add.w	r0, sp, r2
   171ce:	f011 fd4d 	bl	28c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   171d2:	2201      	movs	r2, #1
   171d4:	2109      	movs	r1, #9
   171d6:	4620      	mov	r0, r4
   171d8:	f7ff fe92 	bl	16f00 <bt_att_create_pdu>
   171dc:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   171de:	b968      	cbnz	r0, 171fc <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   171e0:	240e      	movs	r4, #14
   171e2:	e007      	b.n	171f4 <att_read_type_req+0x6c>
			*err = 0U;
   171e4:	463e      	mov	r6, r7
	if (!req) {
   171e6:	2301      	movs	r3, #1
   171e8:	4632      	mov	r2, r6
   171ea:	2108      	movs	r1, #8
   171ec:	4628      	mov	r0, r5
   171ee:	f012 fc60 	bl	29ab2 <send_err_rsp.part.0>
		return 0;
   171f2:	2400      	movs	r4, #0
}
   171f4:	4620      	mov	r0, r4
   171f6:	b00c      	add	sp, #48	; 0x30
   171f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   171fc:	2101      	movs	r1, #1
   171fe:	3008      	adds	r0, #8
	data.uuid = uuid;
   17200:	e9cd 5806 	strd	r5, r8, [sp, #24]
   17204:	f013 f854 	bl	2a2b0 <net_buf_simple_add>
	data.rsp->len = 0U;
   17208:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1720c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1720e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17210:	4a0c      	ldr	r2, [pc, #48]	; (17244 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
   17212:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   17216:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   17218:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1721c:	4630      	mov	r0, r6
   1721e:	ab06      	add	r3, sp, #24
   17220:	f012 f9fc 	bl	2961c <bt_gatt_foreach_attr>
	if (data.err) {
   17224:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   17228:	b12c      	cbz	r4, 17236 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1722a:	9808      	ldr	r0, [sp, #32]
   1722c:	f00e fb0e 	bl	2584c <net_buf_unref>
	if (!req) {
   17230:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   17234:	e7d8      	b.n	171e8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   17236:	9908      	ldr	r1, [sp, #32]
   17238:	4628      	mov	r0, r5
   1723a:	f7ff fc77 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   1723e:	e7d9      	b.n	171f4 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   17240:	2404      	movs	r4, #4
   17242:	e7d7      	b.n	171f4 <att_read_type_req+0x6c>
   17244:	00016b51 	.word	0x00016b51

00017248 <att_find_type_req>:
{
   17248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1724c:	4688      	mov	r8, r1
   1724e:	b086      	sub	sp, #24
   17250:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   17252:	2106      	movs	r1, #6
   17254:	f108 0008 	add.w	r0, r8, #8
   17258:	f013 f851 	bl	2a2fe <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1725c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1725e:	b317      	cbz	r7, 172a6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   17260:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   17264:	f1b9 0f00 	cmp.w	r9, #0
   17268:	d01c      	beq.n	172a4 <att_find_type_req+0x5c>
	if (start > end) {
   1726a:	45b9      	cmp	r9, r7
   1726c:	d31b      	bcc.n	172a6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1726e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17270:	f8ad 3002 	strh.w	r3, [sp, #2]
   17274:	2400      	movs	r4, #0
   17276:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1727a:	a901      	add	r1, sp, #4
   1727c:	4668      	mov	r0, sp
	value = buf->data;
   1727e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   17282:	f88d 4000 	strb.w	r4, [sp]
   17286:	f88d 4004 	strb.w	r4, [sp, #4]
   1728a:	f8ad 3006 	strh.w	r3, [sp, #6]
   1728e:	f011 fd64 	bl	28d5a <bt_uuid_cmp>
   17292:	4606      	mov	r6, r0
   17294:	b190      	cbz	r0, 172bc <att_find_type_req+0x74>
	if (!req) {
   17296:	230a      	movs	r3, #10
   17298:	463a      	mov	r2, r7
   1729a:	2106      	movs	r1, #6
   1729c:	4628      	mov	r0, r5
   1729e:	f012 fc08 	bl	29ab2 <send_err_rsp.part.0>
		return 0;
   172a2:	e007      	b.n	172b4 <att_find_type_req+0x6c>
			*err = 0U;
   172a4:	464f      	mov	r7, r9
	if (!req) {
   172a6:	2301      	movs	r3, #1
   172a8:	463a      	mov	r2, r7
   172aa:	2106      	movs	r1, #6
   172ac:	4628      	mov	r0, r5
   172ae:	f012 fc00 	bl	29ab2 <send_err_rsp.part.0>
		return 0;
   172b2:	2400      	movs	r4, #0
}
   172b4:	4620      	mov	r0, r4
   172b6:	b006      	add	sp, #24
   172b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   172bc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   172c0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   172c4:	4601      	mov	r1, r0
   172c6:	2214      	movs	r2, #20
   172c8:	a801      	add	r0, sp, #4
   172ca:	f011 fccf 	bl	28c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   172ce:	4632      	mov	r2, r6
   172d0:	2107      	movs	r1, #7
   172d2:	4640      	mov	r0, r8
   172d4:	f7ff fe14 	bl	16f00 <bt_att_create_pdu>
   172d8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   172da:	b1d8      	cbz	r0, 17314 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   172dc:	230a      	movs	r3, #10
   172de:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   172e2:	4a0d      	ldr	r2, [pc, #52]	; (17318 <att_find_type_req+0xd0>)
	data.value_len = value_len;
   172e4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   172e8:	ab01      	add	r3, sp, #4
   172ea:	4649      	mov	r1, r9
   172ec:	4638      	mov	r0, r7
	data.value = value;
   172ee:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   172f2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   172f4:	f012 f992 	bl	2961c <bt_gatt_foreach_attr>
	if (data.err) {
   172f8:	f89d 4015 	ldrb.w	r4, [sp, #21]
   172fc:	b12c      	cbz	r4, 1730a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   172fe:	9802      	ldr	r0, [sp, #8]
   17300:	f00e faa4 	bl	2584c <net_buf_unref>
	if (!req) {
   17304:	f89d 3015 	ldrb.w	r3, [sp, #21]
   17308:	e7ce      	b.n	172a8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1730a:	9902      	ldr	r1, [sp, #8]
   1730c:	4628      	mov	r0, r5
   1730e:	f7ff fc0d 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
	return 0;
   17312:	e7cf      	b.n	172b4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   17314:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   17316:	e7cd      	b.n	172b4 <att_find_type_req+0x6c>
   17318:	00016779 	.word	0x00016779

0001731c <att_find_info_req>:
{
   1731c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1731e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   17320:	881e      	ldrh	r6, [r3, #0]
{
   17322:	b085      	sub	sp, #20
   17324:	4605      	mov	r5, r0
	if (!start || !end) {
   17326:	b19e      	cbz	r6, 17350 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   17328:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1732a:	b184      	cbz	r4, 1734e <att_find_info_req+0x32>
	if (start > end) {
   1732c:	42a6      	cmp	r6, r4
   1732e:	d80f      	bhi.n	17350 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   17330:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   17332:	2210      	movs	r2, #16
   17334:	2100      	movs	r1, #0
   17336:	4668      	mov	r0, sp
   17338:	f011 fc98 	bl	28c6c <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1733c:	2200      	movs	r2, #0
   1733e:	2105      	movs	r1, #5
   17340:	4638      	mov	r0, r7
   17342:	f7ff fddd 	bl	16f00 <bt_att_create_pdu>
   17346:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   17348:	b958      	cbnz	r0, 17362 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1734a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1734c:	e007      	b.n	1735e <att_find_info_req+0x42>
			*err = 0U;
   1734e:	4626      	mov	r6, r4
	if (!req) {
   17350:	2301      	movs	r3, #1
   17352:	4632      	mov	r2, r6
   17354:	2104      	movs	r1, #4
   17356:	4628      	mov	r0, r5
   17358:	f012 fbab 	bl	29ab2 <send_err_rsp.part.0>
	return 0;
   1735c:	2000      	movs	r0, #0
}
   1735e:	b005      	add	sp, #20
   17360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17362:	4621      	mov	r1, r4
   17364:	4a08      	ldr	r2, [pc, #32]	; (17388 <att_find_info_req+0x6c>)
	data.chan = chan;
   17366:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   17368:	466b      	mov	r3, sp
   1736a:	4630      	mov	r0, r6
   1736c:	f012 f956 	bl	2961c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   17370:	9c02      	ldr	r4, [sp, #8]
   17372:	b924      	cbnz	r4, 1737e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   17374:	9801      	ldr	r0, [sp, #4]
   17376:	f00e fa69 	bl	2584c <net_buf_unref>
	if (!req) {
   1737a:	230a      	movs	r3, #10
   1737c:	e7e9      	b.n	17352 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1737e:	9901      	ldr	r1, [sp, #4]
   17380:	4628      	mov	r0, r5
   17382:	f7ff fbd3 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
   17386:	e7e9      	b.n	1735c <att_find_info_req+0x40>
   17388:	00029633 	.word	0x00029633

0001738c <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1738c:	b513      	push	{r0, r1, r4, lr}
   1738e:	4602      	mov	r2, r0
   17390:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   17392:	4808      	ldr	r0, [pc, #32]	; (173b4 <bt_att_req_alloc+0x28>)
   17394:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   17396:	2400      	movs	r4, #0
   17398:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1739a:	f00f faa9 	bl	268f0 <k_mem_slab_alloc>
   1739e:	4601      	mov	r1, r0
   173a0:	b930      	cbnz	r0, 173b0 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
   173a2:	9801      	ldr	r0, [sp, #4]
   173a4:	2210      	movs	r2, #16
   173a6:	f011 fc61 	bl	28c6c <memset>

	return req;
   173aa:	9801      	ldr	r0, [sp, #4]
}
   173ac:	b002      	add	sp, #8
   173ae:	bd10      	pop	{r4, pc}
		return NULL;
   173b0:	4620      	mov	r0, r4
   173b2:	e7fb      	b.n	173ac <bt_att_req_alloc+0x20>
   173b4:	200006c8 	.word	0x200006c8

000173b8 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   173b8:	b507      	push	{r0, r1, r2, lr}
   173ba:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   173bc:	6880      	ldr	r0, [r0, #8]
   173be:	b120      	cbz	r0, 173ca <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   173c0:	f00e fa44 	bl	2584c <net_buf_unref>
		req->buf = NULL;
   173c4:	9b01      	ldr	r3, [sp, #4]
   173c6:	2200      	movs	r2, #0
   173c8:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   173ca:	4803      	ldr	r0, [pc, #12]	; (173d8 <bt_att_req_free+0x20>)
   173cc:	a901      	add	r1, sp, #4
   173ce:	f013 f919 	bl	2a604 <k_mem_slab_free>
}
   173d2:	b003      	add	sp, #12
   173d4:	f85d fb04 	ldr.w	pc, [sp], #4
   173d8:	200006c8 	.word	0x200006c8

000173dc <att_handle_rsp>:
{
   173dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173e0:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
   173e2:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
   173e6:	460f      	mov	r7, r1
   173e8:	4690      	mov	r8, r2
   173ea:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   173ec:	f013 fac6 	bl	2a97c <k_work_cancel_delayable>
	if (!chan->req) {
   173f0:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
   173f4:	b9e5      	cbnz	r5, 17430 <att_handle_rsp+0x54>
   173f6:	4919      	ldr	r1, [pc, #100]	; (1745c <att_handle_rsp+0x80>)
   173f8:	4819      	ldr	r0, [pc, #100]	; (17460 <att_handle_rsp+0x84>)
   173fa:	1a40      	subs	r0, r0, r1
   173fc:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
   173fe:	0180      	lsls	r0, r0, #6
   17400:	f040 0102 	orr.w	r1, r0, #2
   17404:	4817      	ldr	r0, [pc, #92]	; (17464 <att_handle_rsp+0x88>)
   17406:	f010 ffdb 	bl	283c0 <log_0>
	bt_att_func_t func = NULL;
   1740a:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
   1740c:	6820      	ldr	r0, [r4, #0]
   1740e:	f012 fb00 	bl	29a12 <att_req_send_process>
	if (func) {
   17412:	f1ba 0f00 	cmp.w	sl, #0
   17416:	d007      	beq.n	17428 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
   17418:	6820      	ldr	r0, [r4, #0]
   1741a:	f8cd 9000 	str.w	r9, [sp]
   1741e:	6800      	ldr	r0, [r0, #0]
   17420:	4643      	mov	r3, r8
   17422:	463a      	mov	r2, r7
   17424:	4631      	mov	r1, r6
   17426:	47d0      	blx	sl
}
   17428:	2000      	movs	r0, #0
   1742a:	b003      	add	sp, #12
   1742c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   17430:	4b0d      	ldr	r3, [pc, #52]	; (17468 <att_handle_rsp+0x8c>)
   17432:	429d      	cmp	r5, r3
   17434:	f04f 0b00 	mov.w	fp, #0
   17438:	d103      	bne.n	17442 <att_handle_rsp+0x66>
		chan->req = NULL;
   1743a:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
   1743e:	46da      	mov	sl, fp
		goto process;
   17440:	e7e4      	b.n	1740c <att_handle_rsp+0x30>
	func = chan->req->func;
   17442:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
   17446:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
   1744a:	4628      	mov	r0, r5
	params = chan->req->user_data;
   1744c:	f8d5 900c 	ldr.w	r9, [r5, #12]
	bt_att_req_free(chan->req);
   17450:	f7ff ffb2 	bl	173b8 <bt_att_req_free>
	chan->req = NULL;
   17454:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
   17458:	e7d8      	b.n	1740c <att_handle_rsp+0x30>
   1745a:	bf00      	nop
   1745c:	0002b248 	.word	0x0002b248
   17460:	0002b258 	.word	0x0002b258
   17464:	0002dc90 	.word	0x0002dc90
   17468:	200012dc 	.word	0x200012dc

0001746c <bt_att_disconnected>:
{
   1746c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1746e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   17472:	b085      	sub	sp, #20
   17474:	4604      	mov	r4, r0
	if (!att_chan->att) {
   17476:	2d00      	cmp	r5, #0
   17478:	d04b      	beq.n	17512 <bt_att_disconnected+0xa6>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1747a:	f500 719e 	add.w	r1, r0, #316	; 0x13c
   1747e:	f105 0024 	add.w	r0, r5, #36	; 0x24
   17482:	f012 fa29 	bl	298d8 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   17486:	f1a4 0608 	sub.w	r6, r4, #8
   1748a:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
   1748e:	2200      	movs	r2, #0
   17490:	2300      	movs	r3, #0
   17492:	4638      	mov	r0, r7
   17494:	f012 feaf 	bl	2a1f6 <net_buf_get>
   17498:	4602      	mov	r2, r0
   1749a:	bb10      	cbnz	r0, 174e2 <bt_att_disconnected+0x76>
	if (chan->req) {
   1749c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
   174a0:	b123      	cbz	r3, 174ac <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   174a2:	4601      	mov	r1, r0
   174a4:	230e      	movs	r3, #14
   174a6:	4630      	mov	r0, r6
   174a8:	f7ff ff98 	bl	173dc <att_handle_rsp>
	chan->att = NULL;
   174ac:	2300      	movs	r3, #0
   174ae:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   174b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   174b4:	bb6b      	cbnz	r3, 17512 <bt_att_disconnected+0xa6>
	att_reset(att);
   174b6:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   174b8:	9803      	ldr	r0, [sp, #12]
   174ba:	2200      	movs	r2, #0
   174bc:	2300      	movs	r3, #0
   174be:	300c      	adds	r0, #12
   174c0:	f012 fe99 	bl	2a1f6 <net_buf_get>
   174c4:	b980      	cbnz	r0, 174e8 <bt_att_disconnected+0x7c>
	att->conn = NULL;
   174c6:	9a03      	ldr	r2, [sp, #12]
	return list->head;
   174c8:	6855      	ldr	r5, [r2, #4]
   174ca:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   174cc:	b97d      	cbnz	r5, 174ee <bt_att_disconnected+0x82>
	k_mem_slab_free(&att_slab, (void **)&att);
   174ce:	4812      	ldr	r0, [pc, #72]	; (17518 <bt_att_disconnected+0xac>)
   174d0:	a903      	add	r1, sp, #12
   174d2:	f013 f897 	bl	2a604 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   174d6:	6820      	ldr	r0, [r4, #0]
}
   174d8:	b005      	add	sp, #20
   174da:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
   174de:	f000 be19 	b.w	18114 <bt_gatt_disconnected>
		net_buf_unref(buf);
   174e2:	f00e f9b3 	bl	2584c <net_buf_unref>
   174e6:	e7d2      	b.n	1748e <bt_att_disconnected+0x22>
		net_buf_unref(buf);
   174e8:	f00e f9b0 	bl	2584c <net_buf_unref>
   174ec:	e7e4      	b.n	174b8 <bt_att_disconnected+0x4c>
	return node->next;
   174ee:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
   174f0:	686f      	ldr	r7, [r5, #4]
   174f2:	b137      	cbz	r7, 17502 <bt_att_disconnected+0x96>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   174f4:	68eb      	ldr	r3, [r5, #12]
   174f6:	9300      	str	r3, [sp, #0]
   174f8:	2300      	movs	r3, #0
   174fa:	461a      	mov	r2, r3
   174fc:	210e      	movs	r1, #14
   174fe:	4618      	mov	r0, r3
   17500:	47b8      	blx	r7
		bt_att_req_free(req);
   17502:	4628      	mov	r0, r5
   17504:	f7ff ff58 	bl	173b8 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
   17508:	2e00      	cmp	r6, #0
   1750a:	d0e0      	beq.n	174ce <bt_att_disconnected+0x62>
   1750c:	4635      	mov	r5, r6
   1750e:	6836      	ldr	r6, [r6, #0]
   17510:	e7ee      	b.n	174f0 <bt_att_disconnected+0x84>
}
   17512:	b005      	add	sp, #20
   17514:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17516:	bf00      	nop
   17518:	20000690 	.word	0x20000690

0001751c <att_timeout>:
   1751c:	4b08      	ldr	r3, [pc, #32]	; (17540 <att_timeout+0x24>)
   1751e:	4909      	ldr	r1, [pc, #36]	; (17544 <att_timeout+0x28>)
{
   17520:	b510      	push	{r4, lr}
   17522:	1ac9      	subs	r1, r1, r3
   17524:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
   17526:	0189      	lsls	r1, r1, #6
{
   17528:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1752a:	f041 0101 	orr.w	r1, r1, #1
   1752e:	4806      	ldr	r0, [pc, #24]	; (17548 <att_timeout+0x2c>)
   17530:	f010 ff46 	bl	283c0 <log_0>
	bt_att_disconnected(&chan->chan.chan);
   17534:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
   17538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1753c:	f7ff bf96 	b.w	1746c <bt_att_disconnected>
   17540:	0002b248 	.word	0x0002b248
   17544:	0002b258 	.word	0x0002b258
   17548:	0002dca7 	.word	0x0002dca7

0001754c <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1754c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1754e:	4d0d      	ldr	r5, [pc, #52]	; (17584 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   17550:	4604      	mov	r4, r0
   17552:	b968      	cbnz	r0, 17570 <find_cf_cfg+0x24>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17554:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   17556:	2207      	movs	r2, #7
   17558:	f8cd 0003 	str.w	r0, [sp, #3]
   1755c:	4669      	mov	r1, sp
   1755e:	1c68      	adds	r0, r5, #1
   17560:	f011 fb48 	bl	28bf4 <memcmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   17564:	2800      	cmp	r0, #0
   17566:	bf08      	it	eq
   17568:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1756a:	4620      	mov	r0, r4
   1756c:	b003      	add	sp, #12
   1756e:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17570:	462a      	mov	r2, r5
   17572:	f812 1b01 	ldrb.w	r1, [r2], #1
   17576:	f011 fed1 	bl	2931c <bt_conn_is_peer_addr_le>
	return NULL;
   1757a:	2800      	cmp	r0, #0
   1757c:	bf14      	ite	ne
   1757e:	462c      	movne	r4, r5
   17580:	2400      	moveq	r4, #0
   17582:	e7f2      	b.n	1756a <find_cf_cfg+0x1e>
   17584:	200012ec 	.word	0x200012ec

00017588 <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
   17588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1758c:	4698      	mov	r8, r3
   1758e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
   17592:	2b01      	cmp	r3, #1
{
   17594:	4606      	mov	r6, r0
   17596:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   17598:	d83d      	bhi.n	17616 <cf_write+0x8e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
   1759a:	4443      	add	r3, r8
   1759c:	2b01      	cmp	r3, #1
   1759e:	4645      	mov	r5, r8
   175a0:	dc3c      	bgt.n	1761c <cf_write+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
   175a2:	f7ff ffd3 	bl	1754c <find_cf_cfg>
	if (!cfg) {
   175a6:	4604      	mov	r4, r0
   175a8:	b918      	cbnz	r0, 175b2 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
   175aa:	f7ff ffcf 	bl	1754c <find_cf_cfg>
	}

	if (!cfg) {
   175ae:	4604      	mov	r4, r0
   175b0:	b180      	cbz	r0, 175d4 <cf_write+0x4c>
{
   175b2:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   175b4:	f1b8 0f00 	cmp.w	r8, #0
   175b8:	d11b      	bne.n	175f2 <cf_write+0x6a>

	if (!cf_set_value(cfg, value, len)) {
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   175ba:	f106 0188 	add.w	r1, r6, #136	; 0x88
   175be:	1c60      	adds	r0, r4, #1
   175c0:	f012 fbdf 	bl	29d82 <bt_addr_le_copy>
	cfg->id = conn->id;
   175c4:	4620      	mov	r0, r4
   175c6:	7a33      	ldrb	r3, [r6, #8]
   175c8:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   175cc:	2100      	movs	r1, #0
   175ce:	f012 fbf8 	bl	29dc2 <atomic_set_bit>

	return len;
   175d2:	e00b      	b.n	175ec <cf_write+0x64>
   175d4:	4b14      	ldr	r3, [pc, #80]	; (17628 <cf_write+0xa0>)
   175d6:	4915      	ldr	r1, [pc, #84]	; (1762c <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
   175d8:	4815      	ldr	r0, [pc, #84]	; (17630 <cf_write+0xa8>)
   175da:	1ac9      	subs	r1, r1, r3
   175dc:	08c9      	lsrs	r1, r1, #3
   175de:	0189      	lsls	r1, r1, #6
   175e0:	f041 0102 	orr.w	r1, r1, #2
   175e4:	f010 feec 	bl	283c0 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   175e8:	f06f 0510 	mvn.w	r5, #16
}
   175ec:	4628      	mov	r0, r5
   175ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   175f2:	7a20      	ldrb	r0, [r4, #8]
   175f4:	fa20 f301 	lsr.w	r3, r0, r1
   175f8:	07da      	lsls	r2, r3, #31
   175fa:	d503      	bpl.n	17604 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
   175fc:	783b      	ldrb	r3, [r7, #0]
   175fe:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   17600:	07db      	lsls	r3, r3, #31
   17602:	d50e      	bpl.n	17622 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   17604:	3101      	adds	r1, #1
   17606:	2903      	cmp	r1, #3
   17608:	d1d4      	bne.n	175b4 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1760a:	783b      	ldrb	r3, [r7, #0]
   1760c:	f003 0307 	and.w	r3, r3, #7
   17610:	4318      	orrs	r0, r3
   17612:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   17614:	e7d1      	b.n	175ba <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   17616:	f06f 0506 	mvn.w	r5, #6
   1761a:	e7e7      	b.n	175ec <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1761c:	f06f 050c 	mvn.w	r5, #12
   17620:	e7e4      	b.n	175ec <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   17622:	f06f 0512 	mvn.w	r5, #18
   17626:	e7e1      	b.n	175ec <cf_write+0x64>
   17628:	0002b248 	.word	0x0002b248
   1762c:	0002b320 	.word	0x0002b320
   17630:	0002dcba 	.word	0x0002dcba

00017634 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
   17634:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   17638:	461f      	mov	r7, r3
   1763a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1763e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   17642:	4606      	mov	r6, r0
   17644:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	uint16_t value;

	if (offset) {
   17646:	2b00      	cmp	r3, #0
   17648:	d14e      	bne.n	176e8 <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
   1764a:	1e7b      	subs	r3, r7, #1
   1764c:	2b01      	cmp	r3, #1
   1764e:	d84e      	bhi.n	176ee <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
		value = *(uint8_t *)buf;
   17650:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
   17652:	2f01      	cmp	r7, #1
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
   17654:	4649      	mov	r1, r9
   17656:	bf14      	ite	ne
   17658:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
   1765a:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
   1765c:	f012 fc76 	bl	29f4c <find_ccc_cfg>
	if (!cfg) {
   17660:	4604      	mov	r4, r0
   17662:	b9e8      	cbnz	r0, 176a0 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
   17664:	b91d      	cbnz	r5, 1766e <bt_gatt_attr_write_ccc+0x3a>
			return len;
   17666:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
   17668:	b003      	add	sp, #12
   1766a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1766e:	4649      	mov	r1, r9
   17670:	f012 fc6c 	bl	29f4c <find_ccc_cfg>
		if (!cfg) {
   17674:	4604      	mov	r4, r0
   17676:	b960      	cbnz	r0, 17692 <bt_gatt_attr_write_ccc+0x5e>
   17678:	4b1e      	ldr	r3, [pc, #120]	; (176f4 <bt_gatt_attr_write_ccc+0xc0>)
   1767a:	491f      	ldr	r1, [pc, #124]	; (176f8 <bt_gatt_attr_write_ccc+0xc4>)
			BT_WARN("No space to store CCC cfg");
   1767c:	481f      	ldr	r0, [pc, #124]	; (176fc <bt_gatt_attr_write_ccc+0xc8>)
   1767e:	1ac9      	subs	r1, r1, r3
   17680:	08c9      	lsrs	r1, r1, #3
   17682:	0189      	lsls	r1, r1, #6
   17684:	f041 0102 	orr.w	r1, r1, #2
   17688:	f010 fe9a 	bl	283c0 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1768c:	f06f 0010 	mvn.w	r0, #16
   17690:	e7ea      	b.n	17668 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   17692:	f106 0188 	add.w	r1, r6, #136	; 0x88
   17696:	3001      	adds	r0, #1
   17698:	f012 fb73 	bl	29d82 <bt_addr_le_copy>
		cfg->id = conn->id;
   1769c:	7a33      	ldrb	r3, [r6, #8]
   1769e:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   176a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
   176a4:	b9a3      	cbnz	r3, 176d0 <bt_gatt_attr_write_ccc+0x9c>
	if (cfg->value != ccc->value) {
   176a6:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   176aa:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   176ac:	42ab      	cmp	r3, r5
   176ae:	d003      	beq.n	176b8 <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
   176b0:	4649      	mov	r1, r9
   176b2:	4640      	mov	r0, r8
   176b4:	f012 faee 	bl	29c94 <gatt_ccc_changed>
	if (!value) {
   176b8:	2d00      	cmp	r5, #0
   176ba:	d1d4      	bne.n	17666 <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   176bc:	4669      	mov	r1, sp
   176be:	1c60      	adds	r0, r4, #1
   176c0:	9500      	str	r5, [sp, #0]
   176c2:	f8cd 5003 	str.w	r5, [sp, #3]
   176c6:	f012 fb5c 	bl	29d82 <bt_addr_le_copy>
	cfg->id = 0U;
   176ca:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   176cc:	8125      	strh	r5, [r4, #8]
}
   176ce:	e7ca      	b.n	17666 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   176d0:	462a      	mov	r2, r5
   176d2:	4641      	mov	r1, r8
   176d4:	4630      	mov	r0, r6
   176d6:	4798      	blx	r3
		if (write < 0) {
   176d8:	2800      	cmp	r0, #0
   176da:	dbc5      	blt.n	17668 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
   176dc:	3801      	subs	r0, #1
   176de:	2801      	cmp	r0, #1
   176e0:	d9e1      	bls.n	176a6 <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   176e2:	f06f 000d 	mvn.w	r0, #13
   176e6:	e7bf      	b.n	17668 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   176e8:	f06f 0006 	mvn.w	r0, #6
   176ec:	e7bc      	b.n	17668 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   176ee:	f06f 000c 	mvn.w	r0, #12
   176f2:	e7b9      	b.n	17668 <bt_gatt_attr_write_ccc+0x34>
   176f4:	0002b248 	.word	0x0002b248
   176f8:	0002b320 	.word	0x0002b320
   176fc:	0002dce6 	.word	0x0002dce6

00017700 <find_sc_cfg>:
{
   17700:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   17702:	4c06      	ldr	r4, [pc, #24]	; (1771c <find_sc_cfg+0x1c>)
   17704:	7823      	ldrb	r3, [r4, #0]
   17706:	4283      	cmp	r3, r0
   17708:	d104      	bne.n	17714 <find_sc_cfg+0x14>
   1770a:	2207      	movs	r2, #7
   1770c:	1c60      	adds	r0, r4, #1
   1770e:	f011 fa71 	bl	28bf4 <memcmp>
   17712:	b108      	cbz	r0, 17718 <find_sc_cfg+0x18>
	return NULL;
   17714:	2000      	movs	r0, #0
}
   17716:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   17718:	4620      	mov	r0, r4
   1771a:	e7fc      	b.n	17716 <find_sc_cfg+0x16>
   1771c:	20002580 	.word	0x20002580

00017720 <sc_save>:
{
   17720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   17724:	4680      	mov	r8, r0
   17726:	460f      	mov	r7, r1
   17728:	4616      	mov	r6, r2
   1772a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1772c:	f7ff ffe8 	bl	17700 <find_sc_cfg>
	if (!cfg) {
   17730:	4604      	mov	r4, r0
   17732:	b9c8      	cbnz	r0, 17768 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   17734:	4669      	mov	r1, sp
   17736:	9000      	str	r0, [sp, #0]
   17738:	f8cd 0003 	str.w	r0, [sp, #3]
   1773c:	f7ff ffe0 	bl	17700 <find_sc_cfg>
		if (!cfg) {
   17740:	4604      	mov	r4, r0
   17742:	b960      	cbnz	r0, 1775e <sc_save+0x3e>
   17744:	490f      	ldr	r1, [pc, #60]	; (17784 <sc_save+0x64>)
   17746:	4b10      	ldr	r3, [pc, #64]	; (17788 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
   17748:	4810      	ldr	r0, [pc, #64]	; (1778c <sc_save+0x6c>)
   1774a:	1ac9      	subs	r1, r1, r3
   1774c:	08c9      	lsrs	r1, r1, #3
   1774e:	0189      	lsls	r1, r1, #6
   17750:	f041 0101 	orr.w	r1, r1, #1
   17754:	f010 fe34 	bl	283c0 <log_0>
}
   17758:	b002      	add	sp, #8
   1775a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1775e:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   17762:	4639      	mov	r1, r7
   17764:	f012 fb0d 	bl	29d82 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   17768:	8922      	ldrh	r2, [r4, #8]
   1776a:	8963      	ldrh	r3, [r4, #10]
   1776c:	b91a      	cbnz	r2, 17776 <sc_save+0x56>
   1776e:	b923      	cbnz	r3, 1777a <sc_save+0x5a>
		cfg->data.start = start;
   17770:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   17772:	8165      	strh	r5, [r4, #10]
   17774:	e7f0      	b.n	17758 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
   17776:	4296      	cmp	r6, r2
   17778:	d302      	bcc.n	17780 <sc_save+0x60>
   1777a:	429d      	cmp	r5, r3
   1777c:	d9ec      	bls.n	17758 <sc_save+0x38>
   1777e:	e7f8      	b.n	17772 <sc_save+0x52>
		*start = new_start;
   17780:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   17782:	e7fa      	b.n	1777a <sc_save+0x5a>
   17784:	0002b320 	.word	0x0002b320
   17788:	0002b248 	.word	0x0002b248
   1778c:	0002dd00 	.word	0x0002dd00

00017790 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
   17790:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
   17794:	4b23      	ldr	r3, [pc, #140]	; (17824 <disconnected_cb+0x94>)
{
   17796:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17798:	6882      	ldr	r2, [r0, #8]
   1779a:	429a      	cmp	r2, r3
{
   1779c:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1779e:	d102      	bne.n	177a6 <disconnected_cb+0x16>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   177a0:	68c4      	ldr	r4, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
   177a2:	8963      	ldrh	r3, [r4, #10]
   177a4:	bb03      	cbnz	r3, 177e8 <disconnected_cb+0x58>

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
   177a6:	2001      	movs	r0, #1
   177a8:	b002      	add	sp, #8
   177aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   177ae:	f105 0888 	add.w	r8, r5, #136	; 0x88
   177b2:	7a28      	ldrb	r0, [r5, #8]
   177b4:	4641      	mov	r1, r8
   177b6:	f011 fc03 	bl	28fc0 <bt_addr_le_is_bonded>
   177ba:	b980      	cbnz	r0, 177de <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   177bc:	4b1a      	ldr	r3, [pc, #104]	; (17828 <disconnected_cb+0x98>)
   177be:	429c      	cmp	r4, r3
   177c0:	d102      	bne.n	177c8 <disconnected_cb+0x38>
					sc_clear(conn);
   177c2:	4628      	mov	r0, r5
   177c4:	f012 fbfc 	bl	29fc0 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   177c8:	2500      	movs	r5, #0
   177ca:	4669      	mov	r1, sp
   177cc:	4630      	mov	r0, r6
   177ce:	9500      	str	r5, [sp, #0]
   177d0:	f8cd 5003 	str.w	r5, [sp, #3]
   177d4:	f012 fad5 	bl	29d82 <bt_addr_le_copy>
	cfg->id = 0U;
   177d8:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   177da:	8125      	strh	r5, [r4, #8]
	if (!value_used) {
   177dc:	e019      	b.n	17812 <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   177de:	4641      	mov	r1, r8
   177e0:	4630      	mov	r0, r6
   177e2:	f012 face 	bl	29d82 <bt_addr_le_copy>
	if (!value_used) {
   177e6:	e014      	b.n	17812 <disconnected_cb+0x82>
		if (!cfg->value) {
   177e8:	8923      	ldrh	r3, [r4, #8]
   177ea:	b193      	cbz	r3, 17812 <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   177ec:	4626      	mov	r6, r4
   177ee:	4628      	mov	r0, r5
   177f0:	f816 1b01 	ldrb.w	r1, [r6], #1
   177f4:	4632      	mov	r2, r6
   177f6:	f011 fd91 	bl	2931c <bt_conn_is_peer_addr_le>
   177fa:	2800      	cmp	r0, #0
   177fc:	d1d7      	bne.n	177ae <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   177fe:	7820      	ldrb	r0, [r4, #0]
   17800:	4631      	mov	r1, r6
   17802:	f7fe fbcb 	bl	15f9c <bt_conn_lookup_addr_le>
			if (tmp) {
   17806:	b120      	cbz	r0, 17812 <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   17808:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1780a:	f011 fdc2 	bl	29392 <bt_conn_unref>
	if (!value_used) {
   1780e:	2d07      	cmp	r5, #7
   17810:	d0c9      	beq.n	177a6 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   17812:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   17814:	2100      	movs	r1, #0
   17816:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   17818:	2b00      	cmp	r3, #0
   1781a:	d0c4      	beq.n	177a6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1781c:	4638      	mov	r0, r7
   1781e:	4798      	blx	r3
   17820:	e7c1      	b.n	177a6 <disconnected_cb+0x16>
   17822:	bf00      	nop
   17824:	00017635 	.word	0x00017635
   17828:	2000021c 	.word	0x2000021c

0001782c <sc_indicate_rsp>:
{
   1782c:	b510      	push	{r4, lr}
   1782e:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17830:	4814      	ldr	r0, [pc, #80]	; (17884 <sc_indicate_rsp+0x58>)
   17832:	f3bf 8f5b 	dmb	ish
   17836:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1783a:	e853 2f00 	ldrex	r2, [r3]
   1783e:	f022 0202 	bic.w	r2, r2, #2
   17842:	e843 2100 	strex	r1, r2, [r3]
   17846:	2900      	cmp	r1, #0
   17848:	d1f7      	bne.n	1783a <sc_indicate_rsp+0xe>
   1784a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1784e:	f3bf 8f5b 	dmb	ish
   17852:	6d03      	ldr	r3, [r0, #80]	; 0x50
   17854:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   17858:	07da      	lsls	r2, r3, #31
   1785a:	d504      	bpl.n	17866 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   1785c:	2200      	movs	r2, #0
   1785e:	2300      	movs	r3, #0
   17860:	3020      	adds	r0, #32
   17862:	f00f fb7f 	bl	26f64 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   17866:	4620      	mov	r0, r4
   17868:	f7ff fe70 	bl	1754c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1786c:	b140      	cbz	r0, 17880 <sc_indicate_rsp+0x54>
   1786e:	7a03      	ldrb	r3, [r0, #8]
   17870:	07db      	lsls	r3, r3, #31
   17872:	d505      	bpl.n	17880 <sc_indicate_rsp+0x54>
}
   17874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   17878:	2100      	movs	r1, #0
   1787a:	300c      	adds	r0, #12
   1787c:	f012 baa1 	b.w	29dc2 <atomic_set_bit>
}
   17880:	bd10      	pop	{r4, pc}
   17882:	bf00      	nop
   17884:	20000b80 	.word	0x20000b80

00017888 <bt_gatt_init>:
{
   17888:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1788a:	4b1e      	ldr	r3, [pc, #120]	; (17904 <bt_gatt_init+0x7c>)
   1788c:	f3bf 8f5b 	dmb	ish
   17890:	2201      	movs	r2, #1
   17892:	e853 1f00 	ldrex	r1, [r3]
   17896:	2900      	cmp	r1, #0
   17898:	d103      	bne.n	178a2 <bt_gatt_init+0x1a>
   1789a:	e843 2000 	strex	r0, r2, [r3]
   1789e:	2800      	cmp	r0, #0
   178a0:	d1f7      	bne.n	17892 <bt_gatt_init+0xa>
   178a2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   178a6:	d12c      	bne.n	17902 <bt_gatt_init+0x7a>
   178a8:	f3bf 8f5b 	dmb	ish
   178ac:	4b16      	ldr	r3, [pc, #88]	; (17908 <bt_gatt_init+0x80>)
   178ae:	e853 1f00 	ldrex	r1, [r3]
   178b2:	2900      	cmp	r1, #0
   178b4:	d103      	bne.n	178be <bt_gatt_init+0x36>
   178b6:	e843 2000 	strex	r0, r2, [r3]
   178ba:	2800      	cmp	r0, #0
   178bc:	d1f7      	bne.n	178ae <bt_gatt_init+0x26>
   178be:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   178c2:	d108      	bne.n	178d6 <bt_gatt_init+0x4e>
   178c4:	4911      	ldr	r1, [pc, #68]	; (1790c <bt_gatt_init+0x84>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178c6:	4a12      	ldr	r2, [pc, #72]	; (17910 <bt_gatt_init+0x88>)
   178c8:	880b      	ldrh	r3, [r1, #0]
   178ca:	4c12      	ldr	r4, [pc, #72]	; (17914 <bt_gatt_init+0x8c>)
	if (!atomic_cas(&service_init, 0, 1)) {
   178cc:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178ce:	42a2      	cmp	r2, r4
   178d0:	d311      	bcc.n	178f6 <bt_gatt_init+0x6e>
   178d2:	b100      	cbz	r0, 178d6 <bt_gatt_init+0x4e>
   178d4:	800b      	strh	r3, [r1, #0]
	k_work_init_delayable(&db_hash.work, db_hash_process);
   178d6:	4910      	ldr	r1, [pc, #64]	; (17918 <bt_gatt_init+0x90>)
   178d8:	4810      	ldr	r0, [pc, #64]	; (1791c <bt_gatt_init+0x94>)
   178da:	f013 f843 	bl	2a964 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   178de:	480f      	ldr	r0, [pc, #60]	; (1791c <bt_gatt_init+0x94>)
   178e0:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178e4:	2300      	movs	r3, #0
   178e6:	f00f fb09 	bl	26efc <k_work_schedule>
}
   178ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   178ee:	490c      	ldr	r1, [pc, #48]	; (17920 <bt_gatt_init+0x98>)
   178f0:	480c      	ldr	r0, [pc, #48]	; (17924 <bt_gatt_init+0x9c>)
   178f2:	f013 b837 	b.w	2a964 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   178f6:	6850      	ldr	r0, [r2, #4]
   178f8:	4403      	add	r3, r0
   178fa:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   178fc:	3208      	adds	r2, #8
   178fe:	2001      	movs	r0, #1
   17900:	e7e5      	b.n	178ce <bt_gatt_init+0x46>
}
   17902:	bd10      	pop	{r4, pc}
   17904:	200012fc 	.word	0x200012fc
   17908:	20001318 	.word	0x20001318
   1790c:	2000257e 	.word	0x2000257e
   17910:	0002b228 	.word	0x0002b228
   17914:	0002b248 	.word	0x0002b248
   17918:	0002a0e7 	.word	0x0002a0e7
   1791c:	20000b28 	.word	0x20000b28
   17920:	00017ca9 	.word	0x00017ca9
   17924:	20000ba0 	.word	0x20000ba0

00017928 <bt_gatt_attr_get_handle>:
{
   17928:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
   1792c:	4603      	mov	r3, r0
   1792e:	b148      	cbz	r0, 17944 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
   17930:	8a00      	ldrh	r0, [r0, #16]
   17932:	b938      	cbnz	r0, 17944 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17934:	4912      	ldr	r1, [pc, #72]	; (17980 <bt_gatt_attr_get_handle+0x58>)
   17936:	f8df e04c 	ldr.w	lr, [pc, #76]	; 17984 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
   1793a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1793c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17940:	4571      	cmp	r1, lr
   17942:	d301      	bcc.n	17948 <bt_gatt_attr_get_handle+0x20>
}
   17944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17948:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
   1794c:	42bb      	cmp	r3, r7
   1794e:	d304      	bcc.n	1795a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   17950:	fb0c 7206 	mla	r2, ip, r6, r7
   17954:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
   17956:	4293      	cmp	r3, r2
   17958:	d90e      	bls.n	17978 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
   1795a:	19a2      	adds	r2, r4, r6
   1795c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1795e:	3108      	adds	r1, #8
   17960:	4614      	mov	r4, r2
   17962:	e7ed      	b.n	17940 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
   17964:	fb0c 7805 	mla	r8, ip, r5, r7
   17968:	4543      	cmp	r3, r8
   1796a:	d007      	beq.n	1797c <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1796c:	3501      	adds	r5, #1
   1796e:	1962      	adds	r2, r4, r5
   17970:	42b5      	cmp	r5, r6
   17972:	b292      	uxth	r2, r2
   17974:	d1f6      	bne.n	17964 <bt_gatt_attr_get_handle+0x3c>
   17976:	e7f2      	b.n	1795e <bt_gatt_attr_get_handle+0x36>
   17978:	2500      	movs	r5, #0
   1797a:	e7f8      	b.n	1796e <bt_gatt_attr_get_handle+0x46>
   1797c:	4610      	mov	r0, r2
   1797e:	e7e1      	b.n	17944 <bt_gatt_attr_get_handle+0x1c>
   17980:	0002b228 	.word	0x0002b228
   17984:	0002b248 	.word	0x0002b248

00017988 <bt_gatt_foreach_attr_type>:
{
   17988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1798c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   17990:	9100      	str	r1, [sp, #0]
   17992:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
   17994:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17998:	2d00      	cmp	r5, #0
   1799a:	bf08      	it	eq
   1799c:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1799e:	4b24      	ldr	r3, [pc, #144]	; (17a30 <bt_gatt_foreach_attr_type+0xa8>)
   179a0:	881b      	ldrh	r3, [r3, #0]
   179a2:	4283      	cmp	r3, r0
{
   179a4:	4607      	mov	r7, r0
   179a6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   179a8:	d23c      	bcs.n	17a24 <bt_gatt_foreach_attr_type+0x9c>
}
   179aa:	b003      	add	sp, #12
   179ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   179b0:	6873      	ldr	r3, [r6, #4]
   179b2:	4423      	add	r3, r4
   179b4:	42bb      	cmp	r3, r7
   179b6:	d232      	bcs.n	17a1e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
   179b8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   179ba:	3608      	adds	r6, #8
   179bc:	4b1d      	ldr	r3, [pc, #116]	; (17a34 <bt_gatt_foreach_attr_type+0xac>)
   179be:	429e      	cmp	r6, r3
   179c0:	d3f6      	bcc.n	179b0 <bt_gatt_foreach_attr_type+0x28>
   179c2:	e7f2      	b.n	179aa <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   179c4:	5889      	ldr	r1, [r1, r2]
   179c6:	9301      	str	r3, [sp, #4]
   179c8:	4640      	mov	r0, r8
   179ca:	f011 f9c6 	bl	28d5a <bt_uuid_cmp>
   179ce:	9b01      	ldr	r3, [sp, #4]
   179d0:	b190      	cbz	r0, 179f8 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   179d2:	3401      	adds	r4, #1
   179d4:	f10a 0a01 	add.w	sl, sl, #1
   179d8:	b2a4      	uxth	r4, r4
   179da:	6873      	ldr	r3, [r6, #4]
   179dc:	4553      	cmp	r3, sl
   179de:	d9ec      	bls.n	179ba <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
   179e0:	9b00      	ldr	r3, [sp, #0]
   179e2:	429c      	cmp	r4, r3
   179e4:	d8e1      	bhi.n	179aa <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
   179e6:	42bc      	cmp	r4, r7
   179e8:	d3f3      	bcc.n	179d2 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   179ea:	6831      	ldr	r1, [r6, #0]
   179ec:	fb0b f20a 	mul.w	r2, fp, sl
   179f0:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   179f2:	f1b8 0f00 	cmp.w	r8, #0
   179f6:	d1e5      	bne.n	179c4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
   179f8:	f1b9 0f00 	cmp.w	r9, #0
   179fc:	d10b      	bne.n	17a16 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
   179fe:	3d01      	subs	r5, #1
   17a00:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   17a02:	4618      	mov	r0, r3
   17a04:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17a06:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17a08:	4621      	mov	r1, r4
   17a0a:	4798      	blx	r3
	if (!*num_matches) {
   17a0c:	2d00      	cmp	r5, #0
   17a0e:	d0cc      	beq.n	179aa <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a10:	2800      	cmp	r0, #0
   17a12:	d1de      	bne.n	179d2 <bt_gatt_foreach_attr_type+0x4a>
   17a14:	e7c9      	b.n	179aa <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
   17a16:	68da      	ldr	r2, [r3, #12]
   17a18:	4591      	cmp	r9, r2
   17a1a:	d1da      	bne.n	179d2 <bt_gatt_foreach_attr_type+0x4a>
   17a1c:	e7ef      	b.n	179fe <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   17a1e:	f04f 0a00 	mov.w	sl, #0
   17a22:	e7da      	b.n	179da <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   17a24:	4e04      	ldr	r6, [pc, #16]	; (17a38 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
   17a26:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
   17a28:	f04f 0b14 	mov.w	fp, #20
   17a2c:	e7c6      	b.n	179bc <bt_gatt_foreach_attr_type+0x34>
   17a2e:	bf00      	nop
   17a30:	2000257e 	.word	0x2000257e
   17a34:	0002b248 	.word	0x0002b248
   17a38:	0002b228 	.word	0x0002b228

00017a3c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
   17a3c:	b510      	push	{r4, lr}
   17a3e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   17a40:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17a42:	aa1c      	add	r2, sp, #112	; 0x70
   17a44:	4669      	mov	r1, sp
   17a46:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   17a48:	e9cd 4400 	strd	r4, r4, [sp]
   17a4c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   17a50:	f010 ffbe 	bl	289d0 <tc_cmac_setup>
   17a54:	b958      	cbnz	r0, 17a6e <db_hash_gen.constprop.0+0x32>
   17a56:	491d      	ldr	r1, [pc, #116]	; (17acc <db_hash_gen.constprop.0+0x90>)
   17a58:	4b1d      	ldr	r3, [pc, #116]	; (17ad0 <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to setup AES CMAC");
   17a5a:	481e      	ldr	r0, [pc, #120]	; (17ad4 <db_hash_gen.constprop.0+0x98>)
   17a5c:	1ac9      	subs	r1, r1, r3
   17a5e:	08c9      	lsrs	r1, r1, #3
   17a60:	0189      	lsls	r1, r1, #6
   17a62:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   17a66:	f010 fcab 	bl	283c0 <log_0>
}
   17a6a:	b048      	add	sp, #288	; 0x120
   17a6c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   17a6e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   17a72:	2001      	movs	r0, #1
   17a74:	4a18      	ldr	r2, [pc, #96]	; (17ad8 <db_hash_gen.constprop.0+0x9c>)
   17a76:	ab04      	add	r3, sp, #16
   17a78:	f012 fb2a 	bl	2a0d0 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   17a7c:	4817      	ldr	r0, [pc, #92]	; (17adc <db_hash_gen.constprop.0+0xa0>)
   17a7e:	a904      	add	r1, sp, #16
   17a80:	f011 f83c 	bl	28afc <tc_cmac_final>
   17a84:	b940      	cbnz	r0, 17a98 <db_hash_gen.constprop.0+0x5c>
   17a86:	4911      	ldr	r1, [pc, #68]	; (17acc <db_hash_gen.constprop.0+0x90>)
   17a88:	4b11      	ldr	r3, [pc, #68]	; (17ad0 <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to calculate hash");
   17a8a:	4815      	ldr	r0, [pc, #84]	; (17ae0 <db_hash_gen.constprop.0+0xa4>)
   17a8c:	1ac9      	subs	r1, r1, r3
   17a8e:	08c9      	lsrs	r1, r1, #3
   17a90:	0189      	lsls	r1, r1, #6
   17a92:	f041 0101 	orr.w	r1, r1, #1
   17a96:	e7e6      	b.n	17a66 <db_hash_gen.constprop.0+0x2a>
   17a98:	4b10      	ldr	r3, [pc, #64]	; (17adc <db_hash_gen.constprop.0+0xa0>)
   17a9a:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   17a9e:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   17aa0:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   17aa2:	7810      	ldrb	r0, [r2, #0]
   17aa4:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   17aa8:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   17aaa:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   17aae:	d1f6      	bne.n	17a9e <db_hash_gen.constprop.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17ab0:	f3bf 8f5b 	dmb	ish
   17ab4:	4b0b      	ldr	r3, [pc, #44]	; (17ae4 <db_hash_gen.constprop.0+0xa8>)
   17ab6:	e853 2f00 	ldrex	r2, [r3]
   17aba:	f042 0204 	orr.w	r2, r2, #4
   17abe:	e843 2100 	strex	r1, r2, [r3]
   17ac2:	2900      	cmp	r1, #0
   17ac4:	d1f7      	bne.n	17ab6 <db_hash_gen.constprop.0+0x7a>
   17ac6:	f3bf 8f5b 	dmb	ish
   17aca:	e7ce      	b.n	17a6a <db_hash_gen.constprop.0+0x2e>
   17acc:	0002b320 	.word	0x0002b320
   17ad0:	0002b248 	.word	0x0002b248
   17ad4:	0002dd1f 	.word	0x0002dd1f
   17ad8:	00029cd7 	.word	0x00029cd7
   17adc:	20000b18 	.word	0x20000b18
   17ae0:	0002dd38 	.word	0x0002dd38
   17ae4:	20000bd0 	.word	0x20000bd0

00017ae8 <gatt_indicate>:
{
   17ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17aec:	4615      	mov	r5, r2
   17aee:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   17af0:	2214      	movs	r2, #20
   17af2:	6869      	ldr	r1, [r5, #4]
{
   17af4:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   17af6:	f012 faf8 	bl	2a0ea <bt_gatt_check_perm>
   17afa:	b170      	cbz	r0, 17b1a <gatt_indicate+0x32>
   17afc:	4b28      	ldr	r3, [pc, #160]	; (17ba0 <gatt_indicate+0xb8>)
   17afe:	4929      	ldr	r1, [pc, #164]	; (17ba4 <gatt_indicate+0xbc>)
		BT_WARN("Link is not encrypted");
   17b00:	4829      	ldr	r0, [pc, #164]	; (17ba8 <gatt_indicate+0xc0>)
   17b02:	1ac9      	subs	r1, r1, r3
   17b04:	08c9      	lsrs	r1, r1, #3
   17b06:	0189      	lsls	r1, r1, #6
   17b08:	f041 0102 	orr.w	r1, r1, #2
   17b0c:	f010 fc58 	bl	283c0 <log_0>
		return -EPERM;
   17b10:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
   17b14:	4628      	mov	r0, r5
   17b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17b1a:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   17b1e:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   17b20:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   17b22:	f7ff fc33 	bl	1738c <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   17b26:	3602      	adds	r6, #2
	if (!req) {
   17b28:	4604      	mov	r4, r0
   17b2a:	b910      	cbnz	r0, 17b32 <gatt_indicate+0x4a>
		return -ENOMEM;
   17b2c:	f06f 050b 	mvn.w	r5, #11
   17b30:	e7f0      	b.n	17b14 <gatt_indicate+0x2c>
	req->func = func;
   17b32:	4b1e      	ldr	r3, [pc, #120]	; (17bac <gatt_indicate+0xc4>)
   17b34:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   17b36:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   17b38:	4632      	mov	r2, r6
   17b3a:	211d      	movs	r1, #29
   17b3c:	4640      	mov	r0, r8
   17b3e:	f7ff f9df 	bl	16f00 <bt_att_create_pdu>
	if (!buf) {
   17b42:	4606      	mov	r6, r0
   17b44:	b968      	cbnz	r0, 17b62 <gatt_indicate+0x7a>
   17b46:	4b16      	ldr	r3, [pc, #88]	; (17ba0 <gatt_indicate+0xb8>)
   17b48:	4916      	ldr	r1, [pc, #88]	; (17ba4 <gatt_indicate+0xbc>)
		BT_WARN("No buffer available to send indication");
   17b4a:	4819      	ldr	r0, [pc, #100]	; (17bb0 <gatt_indicate+0xc8>)
   17b4c:	1ac9      	subs	r1, r1, r3
   17b4e:	08c9      	lsrs	r1, r1, #3
   17b50:	0189      	lsls	r1, r1, #6
   17b52:	f041 0102 	orr.w	r1, r1, #2
   17b56:	f010 fc33 	bl	283c0 <log_0>
		bt_att_req_free(req);
   17b5a:	4620      	mov	r0, r4
   17b5c:	f7ff fc2c 	bl	173b8 <bt_att_req_free>
   17b60:	e7e4      	b.n	17b2c <gatt_indicate+0x44>
	return net_buf_simple_add(&buf->b, len);
   17b62:	f100 0a08 	add.w	sl, r0, #8
   17b66:	2102      	movs	r1, #2
   17b68:	4650      	mov	r0, sl
   17b6a:	f012 fba1 	bl	2a2b0 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   17b6e:	4607      	mov	r7, r0
   17b70:	8aa9      	ldrh	r1, [r5, #20]
   17b72:	f827 9b02 	strh.w	r9, [r7], #2
   17b76:	4650      	mov	r0, sl
   17b78:	f012 fb9a 	bl	2a2b0 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
   17b7c:	8aaa      	ldrh	r2, [r5, #20]
   17b7e:	6929      	ldr	r1, [r5, #16]
   17b80:	4638      	mov	r0, r7
   17b82:	f011 f848 	bl	28c16 <memcpy>
	req->buf = buf;
   17b86:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   17b88:	4621      	mov	r1, r4
   17b8a:	4640      	mov	r0, r8
   17b8c:	f012 f86d 	bl	29c6a <bt_att_req_send>
	if (err) {
   17b90:	4605      	mov	r5, r0
   17b92:	2800      	cmp	r0, #0
   17b94:	d0be      	beq.n	17b14 <gatt_indicate+0x2c>
		bt_att_req_free(req);
   17b96:	4620      	mov	r0, r4
   17b98:	f7ff fc0e 	bl	173b8 <bt_att_req_free>
   17b9c:	e7ba      	b.n	17b14 <gatt_indicate+0x2c>
   17b9e:	bf00      	nop
   17ba0:	0002b248 	.word	0x0002b248
   17ba4:	0002b320 	.word	0x0002b320
   17ba8:	0002dd51 	.word	0x0002dd51
   17bac:	00029ca9 	.word	0x00029ca9
   17bb0:	0002dd67 	.word	0x0002dd67

00017bb4 <bt_gatt_indicate>:
{
   17bb4:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17bb6:	4b39      	ldr	r3, [pc, #228]	; (17c9c <bt_gatt_indicate+0xe8>)
   17bb8:	f3bf 8f5b 	dmb	ish
   17bbc:	681b      	ldr	r3, [r3, #0]
   17bbe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17bc2:	079a      	lsls	r2, r3, #30
{
   17bc4:	b08b      	sub	sp, #44	; 0x2c
   17bc6:	4604      	mov	r4, r0
   17bc8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17bca:	d561      	bpl.n	17c90 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
   17bcc:	6848      	ldr	r0, [r1, #4]
   17bce:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17bd0:	b114      	cbz	r4, 17bd8 <bt_gatt_indicate+0x24>
   17bd2:	7aa3      	ldrb	r3, [r4, #10]
   17bd4:	2b07      	cmp	r3, #7
   17bd6:	d15e      	bne.n	17c96 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17bd8:	f7ff fea6 	bl	17928 <bt_gatt_attr_get_handle>
   17bdc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   17be0:	b918      	cbnz	r0, 17bea <bt_gatt_indicate+0x36>
		return -ENOENT;
   17be2:	f06f 0001 	mvn.w	r0, #1
}
   17be6:	b00b      	add	sp, #44	; 0x2c
   17be8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   17bea:	682a      	ldr	r2, [r5, #0]
   17bec:	b9ba      	cbnz	r2, 17c1e <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17bee:	9b05      	ldr	r3, [sp, #20]
   17bf0:	6818      	ldr	r0, [r3, #0]
   17bf2:	2300      	movs	r3, #0
   17bf4:	f88d 3010 	strb.w	r3, [sp, #16]
   17bf8:	a904      	add	r1, sp, #16
   17bfa:	f642 0303 	movw	r3, #10243	; 0x2803
   17bfe:	f8ad 3012 	strh.w	r3, [sp, #18]
   17c02:	f011 f8aa 	bl	28d5a <bt_uuid_cmp>
   17c06:	b1d0      	cbz	r0, 17c3e <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
   17c08:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17c0c:	b324      	cbz	r4, 17c58 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
   17c0e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   17c10:	4601      	mov	r1, r0
		params->_ref = 1;
   17c12:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
   17c14:	462a      	mov	r2, r5
   17c16:	4620      	mov	r0, r4
   17c18:	f7ff ff66 	bl	17ae8 <gatt_indicate>
   17c1c:	e7e3      	b.n	17be6 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c1e:	a905      	add	r1, sp, #20
   17c20:	9102      	str	r1, [sp, #8]
   17c22:	491f      	ldr	r1, [pc, #124]	; (17ca0 <bt_gatt_indicate+0xec>)
   17c24:	9101      	str	r1, [sp, #4]
   17c26:	2101      	movs	r1, #1
	found->attr = NULL;
   17c28:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c2a:	9100      	str	r1, [sp, #0]
   17c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17c30:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17c32:	f7ff fea9 	bl	17988 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17c36:	9b05      	ldr	r3, [sp, #20]
   17c38:	2b00      	cmp	r3, #0
   17c3a:	d1d8      	bne.n	17bee <bt_gatt_indicate+0x3a>
   17c3c:	e7d1      	b.n	17be2 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17c3e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   17c40:	68c3      	ldr	r3, [r0, #12]
   17c42:	799b      	ldrb	r3, [r3, #6]
   17c44:	069b      	lsls	r3, r3, #26
   17c46:	d402      	bmi.n	17c4e <bt_gatt_indicate+0x9a>
			return -EINVAL;
   17c48:	f06f 0015 	mvn.w	r0, #21
   17c4c:	e7cb      	b.n	17be6 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17c4e:	f012 f9f1 	bl	2a034 <bt_gatt_attr_value_handle>
   17c52:	f8ad 0018 	strh.w	r0, [sp, #24]
   17c56:	e7d7      	b.n	17c08 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
   17c58:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   17c5c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   17c5e:	2302      	movs	r3, #2
   17c60:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17c64:	f642 1302 	movw	r3, #10498	; 0x2902
   17c68:	f8ad 3012 	strh.w	r3, [sp, #18]
   17c6c:	ab05      	add	r3, sp, #20
   17c6e:	9302      	str	r3, [sp, #8]
   17c70:	4b0c      	ldr	r3, [pc, #48]	; (17ca4 <bt_gatt_indicate+0xf0>)
   17c72:	9301      	str	r3, [sp, #4]
   17c74:	2301      	movs	r3, #1
   17c76:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
   17c78:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17c7a:	4623      	mov	r3, r4
   17c7c:	aa04      	add	r2, sp, #16
   17c7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   17c82:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17c84:	f88d 4010 	strb.w	r4, [sp, #16]
   17c88:	f7ff fe7e 	bl	17988 <bt_gatt_foreach_attr_type>
	return data.err;
   17c8c:	9807      	ldr	r0, [sp, #28]
   17c8e:	e7aa      	b.n	17be6 <bt_gatt_indicate+0x32>
		return -EAGAIN;
   17c90:	f06f 000a 	mvn.w	r0, #10
   17c94:	e7a7      	b.n	17be6 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
   17c96:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17c9a:	e7a4      	b.n	17be6 <bt_gatt_indicate+0x32>
   17c9c:	20000098 	.word	0x20000098
   17ca0:	00029ccf 	.word	0x00029ccf
   17ca4:	00017ea5 	.word	0x00017ea5

00017ca8 <sc_process>:
{
   17ca8:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
   17caa:	f830 2c08 	ldrh.w	r2, [r0, #-8]
   17cae:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
   17cb2:	f830 2c06 	ldrh.w	r2, [r0, #-6]
   17cb6:	f8ad 2006 	strh.w	r2, [sp, #6]
{
   17cba:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
   17cbc:	f1a0 0120 	sub.w	r1, r0, #32
   17cc0:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17cc4:	f3bf 8f5b 	dmb	ish
   17cc8:	e854 2f00 	ldrex	r2, [r4]
   17ccc:	f022 0201 	bic.w	r2, r2, #1
   17cd0:	e844 2000 	strex	r0, r2, [r4]
   17cd4:	2800      	cmp	r0, #0
   17cd6:	d1f7      	bne.n	17cc8 <sc_process+0x20>
   17cd8:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   17cdc:	4a0c      	ldr	r2, [pc, #48]	; (17d10 <sc_process+0x68>)
   17cde:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
   17ce2:	4a0c      	ldr	r2, [pc, #48]	; (17d14 <sc_process+0x6c>)
   17ce4:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
   17ce8:	aa01      	add	r2, sp, #4
	sc->start = 0U;
   17cea:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   17cec:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
   17cf0:	2204      	movs	r2, #4
	sc->start = 0U;
   17cf2:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
   17cf6:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
   17cfa:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   17cfe:	f7ff ff59 	bl	17bb4 <bt_gatt_indicate>
   17d02:	b918      	cbnz	r0, 17d0c <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   17d04:	2101      	movs	r1, #1
   17d06:	4620      	mov	r0, r4
   17d08:	f012 f85b 	bl	29dc2 <atomic_set_bit>
}
   17d0c:	b002      	add	sp, #8
   17d0e:	bd10      	pop	{r4, pc}
   17d10:	0002b778 	.word	0x0002b778
   17d14:	0001782d 	.word	0x0001782d

00017d18 <gatt_notify>:
{
   17d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d1c:	4614      	mov	r4, r2
   17d1e:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   17d20:	2214      	movs	r2, #20
   17d22:	6861      	ldr	r1, [r4, #4]
{
   17d24:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   17d26:	f012 f9e0 	bl	2a0ea <bt_gatt_check_perm>
   17d2a:	b168      	cbz	r0, 17d48 <gatt_notify+0x30>
   17d2c:	4b1e      	ldr	r3, [pc, #120]	; (17da8 <gatt_notify+0x90>)
   17d2e:	491f      	ldr	r1, [pc, #124]	; (17dac <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
   17d30:	481f      	ldr	r0, [pc, #124]	; (17db0 <gatt_notify+0x98>)
   17d32:	1ac9      	subs	r1, r1, r3
   17d34:	08c9      	lsrs	r1, r1, #3
   17d36:	0189      	lsls	r1, r1, #6
   17d38:	f041 0102 	orr.w	r1, r1, #2
   17d3c:	f010 fb40 	bl	283c0 <log_0>
		return -EPERM;
   17d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   17d48:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   17d4a:	211b      	movs	r1, #27
   17d4c:	3202      	adds	r2, #2
   17d4e:	4638      	mov	r0, r7
   17d50:	f7ff f8d6 	bl	16f00 <bt_att_create_pdu>
	if (!buf) {
   17d54:	4605      	mov	r5, r0
   17d56:	b960      	cbnz	r0, 17d72 <gatt_notify+0x5a>
   17d58:	4b13      	ldr	r3, [pc, #76]	; (17da8 <gatt_notify+0x90>)
   17d5a:	4914      	ldr	r1, [pc, #80]	; (17dac <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
   17d5c:	4815      	ldr	r0, [pc, #84]	; (17db4 <gatt_notify+0x9c>)
   17d5e:	1ac9      	subs	r1, r1, r3
   17d60:	08c9      	lsrs	r1, r1, #3
   17d62:	0189      	lsls	r1, r1, #6
   17d64:	f041 0102 	orr.w	r1, r1, #2
   17d68:	f010 fb2a 	bl	283c0 <log_0>
		return -ENOMEM;
   17d6c:	f06f 000b 	mvn.w	r0, #11
   17d70:	e7e8      	b.n	17d44 <gatt_notify+0x2c>
   17d72:	f100 0908 	add.w	r9, r0, #8
   17d76:	2102      	movs	r1, #2
   17d78:	4648      	mov	r0, r9
   17d7a:	f012 fa99 	bl	2a2b0 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   17d7e:	4606      	mov	r6, r0
   17d80:	89a1      	ldrh	r1, [r4, #12]
   17d82:	f826 8b02 	strh.w	r8, [r6], #2
   17d86:	4648      	mov	r0, r9
   17d88:	f012 fa92 	bl	2a2b0 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   17d8c:	89a2      	ldrh	r2, [r4, #12]
   17d8e:	68a1      	ldr	r1, [r4, #8]
   17d90:	4630      	mov	r0, r6
   17d92:	f010 ff40 	bl	28c16 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   17d96:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   17d9a:	4629      	mov	r1, r5
   17d9c:	4638      	mov	r0, r7
}
   17d9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   17da2:	f011 bf17 	b.w	29bd4 <bt_att_send>
   17da6:	bf00      	nop
   17da8:	0002b248 	.word	0x0002b248
   17dac:	0002b320 	.word	0x0002b320
   17db0:	0002dd51 	.word	0x0002dd51
   17db4:	0002dd8e 	.word	0x0002dd8e

00017db8 <bt_gatt_notify_cb>:
{
   17db8:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17dba:	4b37      	ldr	r3, [pc, #220]	; (17e98 <bt_gatt_notify_cb+0xe0>)
   17dbc:	f3bf 8f5b 	dmb	ish
   17dc0:	681b      	ldr	r3, [r3, #0]
   17dc2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17dc6:	079a      	lsls	r2, r3, #30
{
   17dc8:	b08b      	sub	sp, #44	; 0x2c
   17dca:	4604      	mov	r4, r0
   17dcc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   17dce:	d55d      	bpl.n	17e8c <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
   17dd0:	6848      	ldr	r0, [r1, #4]
   17dd2:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
   17dd4:	b114      	cbz	r4, 17ddc <bt_gatt_notify_cb+0x24>
   17dd6:	7aa3      	ldrb	r3, [r4, #10]
   17dd8:	2b07      	cmp	r3, #7
   17dda:	d15a      	bne.n	17e92 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
   17ddc:	f7ff fda4 	bl	17928 <bt_gatt_attr_get_handle>
   17de0:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
   17de4:	b918      	cbnz	r0, 17dee <bt_gatt_notify_cb+0x36>
		return -ENOENT;
   17de6:	f06f 0001 	mvn.w	r0, #1
}
   17dea:	b00b      	add	sp, #44	; 0x2c
   17dec:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
   17dee:	682a      	ldr	r2, [r5, #0]
   17df0:	b9aa      	cbnz	r2, 17e1e <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   17df2:	9b05      	ldr	r3, [sp, #20]
   17df4:	6818      	ldr	r0, [r3, #0]
   17df6:	2300      	movs	r3, #0
   17df8:	f88d 3010 	strb.w	r3, [sp, #16]
   17dfc:	a904      	add	r1, sp, #16
   17dfe:	f642 0303 	movw	r3, #10243	; 0x2803
   17e02:	f8ad 3012 	strh.w	r3, [sp, #18]
   17e06:	f010 ffa8 	bl	28d5a <bt_uuid_cmp>
   17e0a:	b1c0      	cbz	r0, 17e3e <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
   17e0c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
   17e10:	b314      	cbz	r4, 17e58 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
   17e12:	4601      	mov	r1, r0
   17e14:	462a      	mov	r2, r5
   17e16:	4620      	mov	r0, r4
   17e18:	f7ff ff7e 	bl	17d18 <gatt_notify>
   17e1c:	e7e5      	b.n	17dea <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17e1e:	a905      	add	r1, sp, #20
   17e20:	9102      	str	r1, [sp, #8]
   17e22:	491e      	ldr	r1, [pc, #120]	; (17e9c <bt_gatt_notify_cb+0xe4>)
   17e24:	9101      	str	r1, [sp, #4]
   17e26:	2101      	movs	r1, #1
	found->attr = NULL;
   17e28:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17e2a:	9100      	str	r1, [sp, #0]
   17e2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   17e30:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   17e32:	f7ff fda9 	bl	17988 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   17e36:	9b05      	ldr	r3, [sp, #20]
   17e38:	2b00      	cmp	r3, #0
   17e3a:	d1da      	bne.n	17df2 <bt_gatt_notify_cb+0x3a>
   17e3c:	e7d3      	b.n	17de6 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   17e3e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
   17e40:	68c3      	ldr	r3, [r0, #12]
   17e42:	799b      	ldrb	r3, [r3, #6]
   17e44:	06db      	lsls	r3, r3, #27
   17e46:	d402      	bmi.n	17e4e <bt_gatt_notify_cb+0x96>
			return -EINVAL;
   17e48:	f06f 0015 	mvn.w	r0, #21
   17e4c:	e7cd      	b.n	17dea <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   17e4e:	f012 f8f1 	bl	2a034 <bt_gatt_attr_value_handle>
   17e52:	f8ad 0018 	strh.w	r0, [sp, #24]
   17e56:	e7d9      	b.n	17e0c <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e58:	f642 1202 	movw	r2, #10498	; 0x2902
   17e5c:	f8ad 2012 	strh.w	r2, [sp, #18]
   17e60:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
   17e62:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e66:	9202      	str	r2, [sp, #8]
   17e68:	4a0d      	ldr	r2, [pc, #52]	; (17ea0 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
   17e6a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
   17e6c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e6e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
   17e72:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e76:	aa04      	add	r2, sp, #16
   17e78:	4623      	mov	r3, r4
   17e7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
   17e7e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   17e80:	f88d 4010 	strb.w	r4, [sp, #16]
   17e84:	f7ff fd80 	bl	17988 <bt_gatt_foreach_attr_type>
	return data.err;
   17e88:	9807      	ldr	r0, [sp, #28]
   17e8a:	e7ae      	b.n	17dea <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
   17e8c:	f06f 000a 	mvn.w	r0, #10
   17e90:	e7ab      	b.n	17dea <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
   17e92:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   17e96:	e7a8      	b.n	17dea <bt_gatt_notify_cb+0x32>
   17e98:	20000098 	.word	0x20000098
   17e9c:	00029ccf 	.word	0x00029ccf
   17ea0:	00017ea5 	.word	0x00017ea5

00017ea4 <notify_cb>:
{
   17ea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17ea6:	4b37      	ldr	r3, [pc, #220]	; (17f84 <notify_cb+0xe0>)
{
   17ea8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   17eaa:	6882      	ldr	r2, [r0, #8]
   17eac:	429a      	cmp	r2, r3
{
   17eae:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17eb0:	d12e      	bne.n	17f10 <notify_cb+0x6c>
	ccc = attr->user_data;
   17eb2:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   17eb4:	4b34      	ldr	r3, [pc, #208]	; (17f88 <notify_cb+0xe4>)
   17eb6:	429f      	cmp	r7, r3
   17eb8:	d11a      	bne.n	17ef0 <notify_cb+0x4c>
   17eba:	4d34      	ldr	r5, [pc, #208]	; (17f8c <notify_cb+0xe8>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   17ebc:	2300      	movs	r3, #0
   17ebe:	2207      	movs	r2, #7
   17ec0:	4669      	mov	r1, sp
   17ec2:	1c68      	adds	r0, r5, #1
   17ec4:	9300      	str	r3, [sp, #0]
   17ec6:	f8cd 3003 	str.w	r3, [sp, #3]
   17eca:	f010 fe93 	bl	28bf4 <memcmp>
   17ece:	b178      	cbz	r0, 17ef0 <notify_cb+0x4c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   17ed0:	4629      	mov	r1, r5
   17ed2:	2207      	movs	r2, #7
   17ed4:	f811 0b01 	ldrb.w	r0, [r1], #1
   17ed8:	f7fe f8a4 	bl	16024 <bt_conn_lookup_state_le>
			if (!conn) {
   17edc:	b9e0      	cbnz	r0, 17f18 <notify_cb+0x74>
				sc = (struct sc_data *)data->ind_params->data;
   17ede:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   17ee0:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   17ee2:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   17ee4:	f811 0b01 	ldrb.w	r0, [r1], #1
   17ee8:	8853      	ldrh	r3, [r2, #2]
   17eea:	8812      	ldrh	r2, [r2, #0]
   17eec:	f7ff fc18 	bl	17720 <sc_save>
		if (cfg->value != data->type) {
   17ef0:	893a      	ldrh	r2, [r7, #8]
   17ef2:	89a3      	ldrh	r3, [r4, #12]
   17ef4:	429a      	cmp	r2, r3
   17ef6:	d10b      	bne.n	17f10 <notify_cb+0x6c>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   17ef8:	4639      	mov	r1, r7
   17efa:	f811 0b01 	ldrb.w	r0, [r1], #1
   17efe:	f7fe f84d 	bl	15f9c <bt_conn_lookup_addr_le>
		if (!conn) {
   17f02:	4605      	mov	r5, r0
   17f04:	b120      	cbz	r0, 17f10 <notify_cb+0x6c>
		if (conn->state != BT_CONN_CONNECTED) {
   17f06:	7a83      	ldrb	r3, [r0, #10]
   17f08:	2b07      	cmp	r3, #7
   17f0a:	d008      	beq.n	17f1e <notify_cb+0x7a>
			bt_conn_unref(conn);
   17f0c:	f011 fa41 	bl	29392 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   17f10:	2701      	movs	r7, #1
}
   17f12:	4638      	mov	r0, r7
   17f14:	b003      	add	sp, #12
   17f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   17f18:	f011 fa3b 	bl	29392 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   17f1c:	e7e8      	b.n	17ef0 <notify_cb+0x4c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   17f1e:	697b      	ldr	r3, [r7, #20]
   17f20:	b123      	cbz	r3, 17f2c <notify_cb+0x88>
   17f22:	4631      	mov	r1, r6
   17f24:	4798      	blx	r3
   17f26:	b908      	cbnz	r0, 17f2c <notify_cb+0x88>
			bt_conn_unref(conn);
   17f28:	4628      	mov	r0, r5
   17f2a:	e7ef      	b.n	17f0c <notify_cb+0x68>
		if (bt_gatt_check_perm(conn, attr,
   17f2c:	2214      	movs	r2, #20
   17f2e:	4631      	mov	r1, r6
   17f30:	4628      	mov	r0, r5
   17f32:	f012 f8da 	bl	2a0ea <bt_gatt_check_perm>
   17f36:	4607      	mov	r7, r0
   17f38:	b150      	cbz	r0, 17f50 <notify_cb+0xac>
   17f3a:	4b15      	ldr	r3, [pc, #84]	; (17f90 <notify_cb+0xec>)
   17f3c:	4915      	ldr	r1, [pc, #84]	; (17f94 <notify_cb+0xf0>)
			BT_WARN("Link is not encrypted");
   17f3e:	4816      	ldr	r0, [pc, #88]	; (17f98 <notify_cb+0xf4>)
   17f40:	1ac9      	subs	r1, r1, r3
   17f42:	08c9      	lsrs	r1, r1, #3
   17f44:	0189      	lsls	r1, r1, #6
   17f46:	f041 0102 	orr.w	r1, r1, #2
   17f4a:	f010 fa39 	bl	283c0 <log_0>
			continue;
   17f4e:	e7df      	b.n	17f10 <notify_cb+0x6c>
		if (data->type == BT_GATT_CCC_INDICATE) {
   17f50:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
   17f52:	88a1      	ldrh	r1, [r4, #4]
   17f54:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
   17f56:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   17f58:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   17f5a:	d10f      	bne.n	17f7c <notify_cb+0xd8>
			err = gatt_indicate(conn, data->handle,
   17f5c:	f7ff fdc4 	bl	17ae8 <gatt_indicate>
			if (err == 0) {
   17f60:	4606      	mov	r6, r0
   17f62:	b918      	cbnz	r0, 17f6c <notify_cb+0xc8>
				data->ind_params->_ref++;
   17f64:	6922      	ldr	r2, [r4, #16]
   17f66:	7d93      	ldrb	r3, [r2, #22]
   17f68:	3301      	adds	r3, #1
   17f6a:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   17f6c:	4628      	mov	r0, r5
   17f6e:	f011 fa10 	bl	29392 <bt_conn_unref>
		if (err < 0) {
   17f72:	2e00      	cmp	r6, #0
   17f74:	dbcd      	blt.n	17f12 <notify_cb+0x6e>
		data->err = 0;
   17f76:	2300      	movs	r3, #0
   17f78:	60a3      	str	r3, [r4, #8]
   17f7a:	e7c9      	b.n	17f10 <notify_cb+0x6c>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   17f7c:	f7ff fecc 	bl	17d18 <gatt_notify>
   17f80:	4606      	mov	r6, r0
   17f82:	e7f3      	b.n	17f6c <notify_cb+0xc8>
   17f84:	00017635 	.word	0x00017635
   17f88:	2000021c 	.word	0x2000021c
   17f8c:	20002580 	.word	0x20002580
   17f90:	0002b248 	.word	0x0002b248
   17f94:	0002b320 	.word	0x0002b320
   17f98:	0002dd51 	.word	0x0002dd51

00017f9c <update_ccc>:
{
   17f9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   17f9e:	4b33      	ldr	r3, [pc, #204]	; (1806c <update_ccc+0xd0>)
	struct bt_conn *conn = data->conn;
   17fa0:	6815      	ldr	r5, [r2, #0]
	if (attr->write != bt_gatt_attr_write_ccc) {
   17fa2:	6882      	ldr	r2, [r0, #8]
   17fa4:	429a      	cmp	r2, r3
{
   17fa6:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   17fa8:	d11b      	bne.n	17fe2 <update_ccc+0x46>
	ccc = attr->user_data;
   17faa:	68c6      	ldr	r6, [r0, #12]
		if (!cfg->value ||
   17fac:	8933      	ldrh	r3, [r6, #8]
   17fae:	b1c3      	cbz	r3, 17fe2 <update_ccc+0x46>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   17fb0:	4632      	mov	r2, r6
   17fb2:	4628      	mov	r0, r5
   17fb4:	f812 1b01 	ldrb.w	r1, [r2], #1
   17fb8:	f011 f9b0 	bl	2931c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   17fbc:	b188      	cbz	r0, 17fe2 <update_ccc+0x46>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   17fbe:	222a      	movs	r2, #42	; 0x2a
   17fc0:	4621      	mov	r1, r4
   17fc2:	4628      	mov	r0, r5
   17fc4:	f012 f891 	bl	2a0ea <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   17fc8:	2803      	cmp	r0, #3
   17fca:	d10d      	bne.n	17fe8 <update_ccc+0x4c>
   17fcc:	4a28      	ldr	r2, [pc, #160]	; (18070 <update_ccc+0xd4>)
   17fce:	4b29      	ldr	r3, [pc, #164]	; (18074 <update_ccc+0xd8>)
				BT_WARN("CCC %p not writable", attr);
   17fd0:	4829      	ldr	r0, [pc, #164]	; (18078 <update_ccc+0xdc>)
   17fd2:	1ad2      	subs	r2, r2, r3
   17fd4:	08d2      	lsrs	r2, r2, #3
   17fd6:	0192      	lsls	r2, r2, #6
   17fd8:	f042 0202 	orr.w	r2, r2, #2
   17fdc:	4621      	mov	r1, r4
   17fde:	f010 f9fc 	bl	283da <log_1>
}
   17fe2:	2001      	movs	r0, #1
   17fe4:	b002      	add	sp, #8
   17fe6:	bd70      	pop	{r4, r5, r6, pc}
		gatt_ccc_changed(attr, ccc);
   17fe8:	4631      	mov	r1, r6
   17fea:	4620      	mov	r0, r4
   17fec:	f011 fe52 	bl	29c94 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   17ff0:	4b22      	ldr	r3, [pc, #136]	; (1807c <update_ccc+0xe0>)
   17ff2:	429e      	cmp	r6, r3
   17ff4:	d1f5      	bne.n	17fe2 <update_ccc+0x46>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   17ff6:	7a28      	ldrb	r0, [r5, #8]
   17ff8:	f105 0188 	add.w	r1, r5, #136	; 0x88
   17ffc:	f7ff fb80 	bl	17700 <find_sc_cfg>
	if (!cfg) {
   18000:	4604      	mov	r4, r0
   18002:	2800      	cmp	r0, #0
   18004:	d0ed      	beq.n	17fe2 <update_ccc+0x46>
	if (!(cfg->data.start || cfg->data.end)) {
   18006:	8902      	ldrh	r2, [r0, #8]
   18008:	8943      	ldrh	r3, [r0, #10]
   1800a:	ea53 0102 	orrs.w	r1, r3, r2
   1800e:	d0e8      	beq.n	17fe2 <update_ccc+0x46>
	index = bt_conn_index(conn);
   18010:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   18012:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   18016:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1801a:	f7fe f977 	bl	1630c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1801e:	4918      	ldr	r1, [pc, #96]	; (18080 <update_ccc+0xe4>)
   18020:	4a18      	ldr	r2, [pc, #96]	; (18084 <update_ccc+0xe8>)
   18022:	2318      	movs	r3, #24
   18024:	fb03 1300 	mla	r3, r3, r0, r1
   18028:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1802a:	4a17      	ldr	r2, [pc, #92]	; (18088 <update_ccc+0xec>)
   1802c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1802e:	aa01      	add	r2, sp, #4
   18030:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   18032:	2204      	movs	r2, #4
   18034:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   18036:	b203      	sxth	r3, r0
   18038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1803c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   18040:	4628      	mov	r0, r5
   18042:	f7ff fdb7 	bl	17bb4 <bt_gatt_indicate>
   18046:	b148      	cbz	r0, 1805c <update_ccc+0xc0>
   18048:	4909      	ldr	r1, [pc, #36]	; (18070 <update_ccc+0xd4>)
   1804a:	4b0a      	ldr	r3, [pc, #40]	; (18074 <update_ccc+0xd8>)
		BT_ERR("SC restore indication failed");
   1804c:	480f      	ldr	r0, [pc, #60]	; (1808c <update_ccc+0xf0>)
   1804e:	1ac9      	subs	r1, r1, r3
   18050:	08c9      	lsrs	r1, r1, #3
   18052:	0189      	lsls	r1, r1, #6
   18054:	f041 0101 	orr.w	r1, r1, #1
   18058:	f010 f9b2 	bl	283c0 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
   1805c:	2204      	movs	r2, #4
   1805e:	2100      	movs	r1, #0
   18060:	f104 0008 	add.w	r0, r4, #8
   18064:	f010 fe02 	bl	28c6c <memset>
	if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
   18068:	e7bb      	b.n	17fe2 <update_ccc+0x46>
   1806a:	bf00      	nop
   1806c:	00017635 	.word	0x00017635
   18070:	0002b320 	.word	0x0002b320
   18074:	0002b248 	.word	0x0002b248
   18078:	0002ddb7 	.word	0x0002ddb7
   1807c:	2000021c 	.word	0x2000021c
   18080:	20001300 	.word	0x20001300
   18084:	0002b778 	.word	0x0002b778
   18088:	00029ddf 	.word	0x00029ddf
   1808c:	0002ddcb 	.word	0x0002ddcb

00018090 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
   18090:	b507      	push	{r0, r1, r2, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18092:	4a06      	ldr	r2, [pc, #24]	; (180ac <bt_gatt_connected+0x1c>)
	data.conn = conn;
   18094:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   18096:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   18098:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1809a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1809e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   180a2:	f012 f815 	bl	2a0d0 <bt_gatt_foreach_attr>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
   180a6:	b003      	add	sp, #12
   180a8:	f85d fb04 	ldr.w	pc, [sp], #4
   180ac:	00017f9d 	.word	0x00017f9d

000180b0 <db_hash_read>:
{
   180b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   180b2:	4915      	ldr	r1, [pc, #84]	; (18108 <db_hash_read+0x58>)
{
   180b4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   180b8:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   180ba:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   180be:	461f      	mov	r7, r3
   180c0:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   180c2:	f012 fc6f 	bl	2a9a4 <k_work_cancel_delayable_sync>
   180c6:	f3bf 8f5b 	dmb	ish
   180ca:	4b10      	ldr	r3, [pc, #64]	; (1810c <db_hash_read+0x5c>)
   180cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   180ce:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   180d2:	075b      	lsls	r3, r3, #29
   180d4:	d401      	bmi.n	180da <db_hash_read+0x2a>
		db_hash_gen(true);
   180d6:	f7ff fcb1 	bl	17a3c <db_hash_gen.constprop.0>
	bt_gatt_change_aware(conn, true);
   180da:	2101      	movs	r1, #1
   180dc:	4620      	mov	r0, r4
   180de:	f012 f827 	bl	2a130 <bt_gatt_change_aware>
	if (offset > value_len) {
   180e2:	2e10      	cmp	r6, #16
   180e4:	d80c      	bhi.n	18100 <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
   180e6:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
   180ea:	4909      	ldr	r1, [pc, #36]	; (18110 <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
   180ec:	42bc      	cmp	r4, r7
   180ee:	bfa8      	it	ge
   180f0:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   180f2:	4622      	mov	r2, r4
   180f4:	4431      	add	r1, r6
   180f6:	4628      	mov	r0, r5
   180f8:	f010 fd8d 	bl	28c16 <memcpy>
}
   180fc:	4620      	mov	r0, r4
   180fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   18100:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   18104:	e7fa      	b.n	180fc <db_hash_read+0x4c>
   18106:	bf00      	nop
   18108:	20000b58 	.word	0x20000b58
   1810c:	20000b80 	.word	0x20000b80
   18110:	20000b18 	.word	0x20000b18

00018114 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
   18114:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   18116:	4603      	mov	r3, r0
   18118:	4a14      	ldr	r2, [pc, #80]	; (1816c <bt_gatt_disconnected+0x58>)
{
   1811a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1811c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   18120:	2001      	movs	r0, #1
   18122:	f011 ffd5 	bl	2a0d0 <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
   18126:	4628      	mov	r0, r5
   18128:	f7ff fa10 	bl	1754c <find_cf_cfg>
	if (!cfg) {
   1812c:	4604      	mov	r4, r0
   1812e:	b1e0      	cbz	r0, 1816a <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   18130:	f105 0688 	add.w	r6, r5, #136	; 0x88
   18134:	7a28      	ldrb	r0, [r5, #8]
   18136:	4631      	mov	r1, r6
   18138:	f010 ff42 	bl	28fc0 <bt_addr_le_is_bonded>
   1813c:	b920      	cbnz	r0, 18148 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
   1813e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   18140:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
   18144:	f011 be20 	b.w	29d88 <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   18148:	1c60      	adds	r0, r4, #1
   1814a:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1814c:	340c      	adds	r4, #12
   1814e:	f011 fe18 	bl	29d82 <bt_addr_le_copy>
   18152:	f3bf 8f5b 	dmb	ish
   18156:	e854 3f00 	ldrex	r3, [r4]
   1815a:	f023 0302 	bic.w	r3, r3, #2
   1815e:	e844 3200 	strex	r2, r3, [r4]
   18162:	2a00      	cmp	r2, #0
   18164:	d1f7      	bne.n	18156 <bt_gatt_disconnected+0x42>
   18166:	f3bf 8f5b 	dmb	ish
}
   1816a:	bd70      	pop	{r4, r5, r6, pc}
   1816c:	00017791 	.word	0x00017791

00018170 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   18170:	4a0b      	ldr	r2, [pc, #44]	; (181a0 <bt_smp_accept+0x30>)
{
   18172:	b508      	push	{r3, lr}
   18174:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   18176:	6810      	ldr	r0, [r2, #0]
   18178:	b918      	cbnz	r0, 18182 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1817a:	4b0a      	ldr	r3, [pc, #40]	; (181a4 <bt_smp_accept+0x34>)
   1817c:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   1817e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   18180:	bd08      	pop	{r3, pc}
   18182:	4909      	ldr	r1, [pc, #36]	; (181a8 <bt_smp_accept+0x38>)
   18184:	4a09      	ldr	r2, [pc, #36]	; (181ac <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
   18186:	480a      	ldr	r0, [pc, #40]	; (181b0 <bt_smp_accept+0x40>)
   18188:	1a52      	subs	r2, r2, r1
   1818a:	08d2      	lsrs	r2, r2, #3
   1818c:	0192      	lsls	r2, r2, #6
   1818e:	f042 0201 	orr.w	r2, r2, #1
   18192:	4619      	mov	r1, r3
   18194:	f010 f921 	bl	283da <log_1>
	return -ENOMEM;
   18198:	f06f 000b 	mvn.w	r0, #11
   1819c:	e7f0      	b.n	18180 <bt_smp_accept+0x10>
   1819e:	bf00      	nop
   181a0:	20000bd8 	.word	0x20000bd8
   181a4:	0002b87c 	.word	0x0002b87c
   181a8:	0002b248 	.word	0x0002b248
   181ac:	0002b348 	.word	0x0002b348
   181b0:	0002ddf7 	.word	0x0002ddf7

000181b4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   181b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   181b8:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   181ba:	1dc2      	adds	r2, r0, #7
   181bc:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   181c0:	1e75      	subs	r5, r6, #1
{
   181c2:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   181c4:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   181c6:	6018      	str	r0, [r3, #0]
{
   181c8:	b082      	sub	sp, #8
   181ca:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   181cc:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   181ce:	2100      	movs	r1, #0
   181d0:	2204      	movs	r2, #4
   181d2:	fb07 0005 	mla	r0, r7, r5, r0
   181d6:	f010 fd49 	bl	28c6c <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   181da:	b1bd      	cbz	r5, 1820c <mem_init+0x58>
   181dc:	3e02      	subs	r6, #2
   181de:	b2b6      	uxth	r6, r6
   181e0:	fb06 7307 	mla	r3, r6, r7, r7
   181e4:	fb06 f807 	mul.w	r8, r6, r7
   181e8:	441c      	add	r4, r3
   181ea:	eba8 0803 	sub.w	r8, r8, r3
   181ee:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   181f0:	2204      	movs	r2, #4
   181f2:	eb04 0008 	add.w	r0, r4, r8
   181f6:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   181fa:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   181fc:	f010 fd0b 	bl	28c16 <memcpy>
	while (mem_count--) {
   18200:	42b5      	cmp	r5, r6
   18202:	eba4 0407 	sub.w	r4, r4, r7
   18206:	f105 0501 	add.w	r5, r5, #1
   1820a:	d1f1      	bne.n	181f0 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   1820c:	b002      	add	sp, #8
   1820e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18212:	bf00      	nop

00018214 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   18214:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   18216:	6805      	ldr	r5, [r0, #0]
{
   18218:	b082      	sub	sp, #8
	if (*mem_head) {
   1821a:	b195      	cbz	r5, 18242 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1821c:	1deb      	adds	r3, r5, #7
   1821e:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   18222:	2204      	movs	r2, #4
   18224:	4604      	mov	r4, r0
   18226:	4629      	mov	r1, r5
   18228:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   1822c:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   1822e:	f010 fcf2 	bl	28c16 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   18232:	9b01      	ldr	r3, [sp, #4]
   18234:	b123      	cbz	r3, 18240 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   18236:	1dda      	adds	r2, r3, #7
   18238:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   1823c:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1823e:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   18240:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   18242:	4628      	mov	r0, r5
   18244:	b002      	add	sp, #8
   18246:	bd70      	pop	{r4, r5, r6, pc}

00018248 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   18248:	680b      	ldr	r3, [r1, #0]
{
   1824a:	b570      	push	{r4, r5, r6, lr}
   1824c:	460c      	mov	r4, r1
   1824e:	4605      	mov	r5, r0
	if (*mem_head) {
   18250:	b183      	cbz	r3, 18274 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   18252:	3307      	adds	r3, #7
   18254:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   18258:	881e      	ldrh	r6, [r3, #0]
   1825a:	3601      	adds	r6, #1
   1825c:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   1825e:	2204      	movs	r2, #4
   18260:	4621      	mov	r1, r4
   18262:	4628      	mov	r0, r5
   18264:	f010 fcd7 	bl	28c16 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   18268:	1deb      	adds	r3, r5, #7
   1826a:	f023 0303 	bic.w	r3, r3, #3
   1826e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   18270:	6025      	str	r5, [r4, #0]
}
   18272:	bd70      	pop	{r4, r5, r6, pc}
   18274:	2601      	movs	r6, #1
   18276:	e7f2      	b.n	1825e <mem_release+0x16>

00018278 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   18278:	fb02 0001 	mla	r0, r2, r1, r0
   1827c:	4770      	bx	lr
   1827e:	bf00      	nop

00018280 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   18280:	1a40      	subs	r0, r0, r1
   18282:	b280      	uxth	r0, r0
}
   18284:	fbb0 f0f2 	udiv	r0, r0, r2
   18288:	4770      	bx	lr
   1828a:	bf00      	nop

0001828c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   1828c:	1e53      	subs	r3, r2, #1
	src += len;
   1828e:	4411      	add	r1, r2
	while (len--) {
   18290:	b29b      	uxth	r3, r3
   18292:	b142      	cbz	r2, 182a6 <mem_rcopy+0x1a>
   18294:	43db      	mvns	r3, r3
   18296:	3801      	subs	r0, #1
   18298:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1829a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1829e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   182a2:	4291      	cmp	r1, r2
   182a4:	d1f9      	bne.n	1829a <mem_rcopy+0xe>
	}
}
   182a6:	4770      	bx	lr

000182a8 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   182a8:	4401      	add	r1, r0
   182aa:	e002      	b.n	182b2 <mem_nz+0xa>
		if (*src++) {
   182ac:	f810 3b01 	ldrb.w	r3, [r0], #1
   182b0:	b91b      	cbnz	r3, 182ba <mem_nz+0x12>
	while (len--) {
   182b2:	4288      	cmp	r0, r1
   182b4:	d1fa      	bne.n	182ac <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   182b6:	2000      	movs	r0, #0
   182b8:	4770      	bx	lr
			return 1;
   182ba:	2001      	movs	r0, #1
}
   182bc:	4770      	bx	lr
   182be:	bf00      	nop

000182c0 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   182c0:	6010      	str	r0, [r2, #0]
   182c2:	6008      	str	r0, [r1, #0]

	return link;
}
   182c4:	4770      	bx	lr
   182c6:	bf00      	nop

000182c8 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   182c8:	680a      	ldr	r2, [r1, #0]
{
   182ca:	4603      	mov	r3, r0
	if (*head != *tail) {
   182cc:	6800      	ldr	r0, [r0, #0]
   182ce:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   182d0:	bf05      	ittet	eq
   182d2:	2200      	moveq	r2, #0
   182d4:	600a      	streq	r2, [r1, #0]
		return NULL;
   182d6:	2000      	movne	r0, #0
	*head = *tail = NULL;
   182d8:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   182da:	4770      	bx	lr

000182dc <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   182dc:	f8d2 c000 	ldr.w	ip, [r2]
   182e0:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   182e4:	f8d2 c000 	ldr.w	ip, [r2]
   182e8:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   182ec:	6010      	str	r0, [r2, #0]

	return link;
}
   182ee:	4770      	bx	lr

000182f0 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   182f0:	4288      	cmp	r0, r1
   182f2:	d003      	beq.n	182fc <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   182f4:	b11a      	cbz	r2, 182fe <memq_peek+0xe>
		*mem = head->mem;
   182f6:	6843      	ldr	r3, [r0, #4]
   182f8:	6013      	str	r3, [r2, #0]
   182fa:	4770      	bx	lr
		return NULL;
   182fc:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   182fe:	4770      	bx	lr

00018300 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   18300:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   18302:	4283      	cmp	r3, r0
   18304:	d009      	beq.n	1831a <memq_dequeue+0x1a>
	if (mem) {
   18306:	b12a      	cbz	r2, 18314 <memq_dequeue+0x14>
		*mem = head->mem;
   18308:	6858      	ldr	r0, [r3, #4]
   1830a:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   1830c:	681a      	ldr	r2, [r3, #0]
   1830e:	600a      	str	r2, [r1, #0]

	return old_head;
}
   18310:	4618      	mov	r0, r3
   18312:	4770      	bx	lr
	if (old_head == NULL) {
   18314:	2b00      	cmp	r3, #0
   18316:	d1f9      	bne.n	1830c <memq_dequeue+0xc>
   18318:	e7fa      	b.n	18310 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1831a:	2300      	movs	r3, #0
   1831c:	e7f8      	b.n	18310 <memq_dequeue+0x10>
   1831e:	bf00      	nop

00018320 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   18320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18324:	f8df 8030 	ldr.w	r8, [pc, #48]	; 18358 <mayfly_init+0x38>
   18328:	4e0c      	ldr	r6, [pc, #48]	; (1835c <mayfly_init+0x3c>)
   1832a:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   1832c:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   18330:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   18332:	1d22      	adds	r2, r4, #4
   18334:	4621      	mov	r1, r4
   18336:	4628      	mov	r0, r5
		while (caller_id--) {
   18338:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1833a:	f7ff ffc1 	bl	182c0 <memq_init>
		while (caller_id--) {
   1833e:	42b4      	cmp	r4, r6
   18340:	f1a5 0508 	sub.w	r5, r5, #8
   18344:	d1f5      	bne.n	18332 <mayfly_init+0x12>
	while (callee_id--) {
   18346:	3f04      	subs	r7, #4
   18348:	1d3b      	adds	r3, r7, #4
   1834a:	f1a8 0820 	sub.w	r8, r8, #32
   1834e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   18352:	d1eb      	bne.n	1832c <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   18354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18358:	20001394 	.word	0x20001394
   1835c:	20001424 	.word	0x20001424

00018360 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   18360:	b410      	push	{r4}
   18362:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   18364:	4c15      	ldr	r4, [pc, #84]	; (183bc <mayfly_enable+0x5c>)
{
   18366:	468c      	mov	ip, r1
	if (enable) {
   18368:	b192      	cbz	r2, 18390 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1836a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1836e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   18372:	0100      	lsls	r0, r0, #4
   18374:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   18378:	4421      	add	r1, r4
   1837a:	7a48      	ldrb	r0, [r1, #9]
   1837c:	7a0c      	ldrb	r4, [r1, #8]
   1837e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   18380:	bf04      	itt	eq
   18382:	3001      	addeq	r0, #1
   18384:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   18386:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   18388:	4661      	mov	r1, ip
   1838a:	4618      	mov	r0, r3
   1838c:	f00c bf88 	b.w	252a0 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   18390:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   18394:	0112      	lsls	r2, r2, #4
   18396:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1839a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1839e:	4423      	add	r3, r4
   183a0:	7a9c      	ldrb	r4, [r3, #10]
   183a2:	7ada      	ldrb	r2, [r3, #11]
   183a4:	42a2      	cmp	r2, r4
   183a6:	d001      	beq.n	183ac <mayfly_enable+0x4c>
}
   183a8:	bc10      	pop	{r4}
   183aa:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   183ac:	3201      	adds	r2, #1
   183ae:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   183b0:	4b03      	ldr	r3, [pc, #12]	; (183c0 <mayfly_enable+0x60>)
   183b2:	2201      	movs	r2, #1
   183b4:	545a      	strb	r2, [r3, r1]
}
   183b6:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   183b8:	f00c bfc8 	b.w	2534c <mayfly_pend>
   183bc:	200013a0 	.word	0x200013a0
   183c0:	2000139c 	.word	0x2000139c

000183c4 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   183c4:	b570      	push	{r4, r5, r6, lr}
   183c6:	4606      	mov	r6, r0
   183c8:	461c      	mov	r4, r3
   183ca:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   183cc:	b322      	cbz	r2, 18418 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   183ce:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   183d0:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   183d2:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   183d4:	f012 0203 	ands.w	r2, r2, #3
   183d8:	d005      	beq.n	183e6 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   183da:	2a01      	cmp	r2, #1
   183dc:	d040      	beq.n	18460 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   183de:	3301      	adds	r3, #1
   183e0:	b2db      	uxtb	r3, r3
   183e2:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   183e4:	e00f      	b.n	18406 <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   183e6:	3301      	adds	r3, #1
   183e8:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   183ea:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   183ec:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   183ee:	2304      	movs	r3, #4
   183f0:	fb11 3105 	smlabb	r1, r1, r5, r3
   183f4:	4a1b      	ldr	r2, [pc, #108]	; (18464 <mayfly_enqueue+0xa0>)
   183f6:	6860      	ldr	r0, [r4, #4]
   183f8:	230c      	movs	r3, #12
   183fa:	fb13 1306 	smlabb	r3, r3, r6, r1
   183fe:	441a      	add	r2, r3
   18400:	4621      	mov	r1, r4
   18402:	f7ff ff6b 	bl	182dc <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   18406:	4b18      	ldr	r3, [pc, #96]	; (18468 <mayfly_enqueue+0xa4>)
   18408:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1840a:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   1840c:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   1840e:	4629      	mov	r1, r5
   18410:	f00c ff9c 	bl	2534c <mayfly_pend>

	return 0;
   18414:	2000      	movs	r0, #0
}
   18416:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18418:	f00c ff82 	bl	25320 <mayfly_prio_is_equal>
   1841c:	2800      	cmp	r0, #0
   1841e:	d0d6      	beq.n	183ce <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   18420:	4629      	mov	r1, r5
   18422:	4630      	mov	r0, r6
   18424:	f00c ff5c 	bl	252e0 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   18428:	2800      	cmp	r0, #0
   1842a:	d0d0      	beq.n	183ce <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   1842c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   18430:	0112      	lsls	r2, r2, #4
   18432:	490c      	ldr	r1, [pc, #48]	; (18464 <mayfly_enqueue+0xa0>)
   18434:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   18438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1843c:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   1843e:	7a9a      	ldrb	r2, [r3, #10]
   18440:	7adb      	ldrb	r3, [r3, #11]
   18442:	429a      	cmp	r2, r3
   18444:	d1c3      	bne.n	183ce <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   18446:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   18448:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   1844a:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   1844c:	0792      	lsls	r2, r2, #30
   1844e:	d002      	beq.n	18456 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   18450:	3302      	adds	r3, #2
   18452:	b2db      	uxtb	r3, r3
   18454:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   18456:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1845a:	4798      	blx	r3
		return 0;
   1845c:	2000      	movs	r0, #0
}
   1845e:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   18460:	4610      	mov	r0, r2
}
   18462:	bd70      	pop	{r4, r5, r6, pc}
   18464:	200013a0 	.word	0x200013a0
   18468:	2000139c 	.word	0x2000139c

0001846c <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   1846c:	4a4f      	ldr	r2, [pc, #316]	; (185ac <mayfly_run+0x140>)
   1846e:	5c13      	ldrb	r3, [r2, r0]
   18470:	2b00      	cmp	r3, #0
   18472:	f000 8099 	beq.w	185a8 <mayfly_run+0x13c>
{
   18476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   1847a:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1847c:	4f4c      	ldr	r7, [pc, #304]	; (185b0 <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
   1847e:	5413      	strb	r3, [r2, r0]
{
   18480:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   18482:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18484:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   18488:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1848c:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   18490:	9303      	str	r3, [sp, #12]
   18492:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18496:	f10b 0804 	add.w	r8, fp, #4
   1849a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   1849e:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   184a2:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   184a4:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   184a8:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   184aa:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   184ac:	f7ff ff20 	bl	182f0 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   184b0:	f107 0624 	add.w	r6, r7, #36	; 0x24
   184b4:	4683      	mov	fp, r0
   184b6:	b398      	cbz	r0, 18520 <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   184b8:	9c05      	ldr	r4, [sp, #20]
   184ba:	7863      	ldrb	r3, [r4, #1]
   184bc:	7825      	ldrb	r5, [r4, #0]
   184be:	1aed      	subs	r5, r5, r3
   184c0:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   184c4:	2d01      	cmp	r5, #1
   184c6:	d106      	bne.n	184d6 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   184c8:	3b01      	subs	r3, #1
   184ca:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   184cc:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   184d0:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   184d2:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   184d4:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   184d6:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   184d8:	1ac3      	subs	r3, r0, r3
   184da:	f003 0303 	and.w	r3, r3, #3
   184de:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   184e0:	f04f 0200 	mov.w	r2, #0
   184e4:	4631      	mov	r1, r6
	req = m->_req;
   184e6:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   184ea:	d00f      	beq.n	1850c <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
   184ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   184ee:	f7ff ff07 	bl	18300 <memq_dequeue>
		ack = m->_ack;
   184f2:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   184f6:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   184f8:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   184fc:	eba3 030c 	sub.w	r3, r3, ip
   18500:	f003 0303 	and.w	r3, r3, #3
   18504:	2b01      	cmp	r3, #1
		m->_ack = req;
   18506:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   1850a:	d045      	beq.n	18598 <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   1850c:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   18510:	aa05      	add	r2, sp, #20
   18512:	f7ff feed 	bl	182f0 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   18516:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   18518:	4683      	mov	fp, r0
			if (state == 1U) {
   1851a:	d02b      	beq.n	18574 <mayfly_run+0x108>
		while (link) {
   1851c:	2800      	cmp	r0, #0
   1851e:	d1cb      	bne.n	184b8 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   18520:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   18524:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   18528:	429a      	cmp	r2, r3
   1852a:	d003      	beq.n	18534 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   1852c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   18530:	2301      	movs	r3, #1
   18532:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   18534:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   18538:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   1853c:	429a      	cmp	r2, r3
   1853e:	d003      	beq.n	18548 <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   18540:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   18544:	2301      	movs	r3, #1
   18546:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   18548:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
   1854c:	fa5f f989 	uxtb.w	r9, r9
   18550:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   18554:	f1a7 070c 	sub.w	r7, r7, #12
   18558:	d1a3      	bne.n	184a2 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   1855a:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   1855e:	b1c3      	cbz	r3, 18592 <mayfly_run+0x126>
   18560:	9b03      	ldr	r3, [sp, #12]
   18562:	b9b3      	cbnz	r3, 18592 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   18564:	461a      	mov	r2, r3
   18566:	4651      	mov	r1, sl
   18568:	4650      	mov	r0, sl
	}
}
   1856a:	b007      	add	sp, #28
   1856c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   18570:	f00c be96 	b.w	252a0 <mayfly_enable_cb>
				if (caller_id || link) {
   18574:	f1b9 0f00 	cmp.w	r9, #0
   18578:	d101      	bne.n	1857e <mayfly_run+0x112>
   1857a:	2800      	cmp	r0, #0
   1857c:	d0d0      	beq.n	18520 <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
   1857e:	f8dd a008 	ldr.w	sl, [sp, #8]
   18582:	4a0a      	ldr	r2, [pc, #40]	; (185ac <mayfly_run+0x140>)
   18584:	2301      	movs	r3, #1
   18586:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   1858a:	4651      	mov	r1, sl
   1858c:	4650      	mov	r0, sl
   1858e:	f00c fedd 	bl	2534c <mayfly_pend>
}
   18592:	b007      	add	sp, #28
   18594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   18598:	4642      	mov	r2, r8
   1859a:	4621      	mov	r1, r4
   1859c:	4658      	mov	r0, fp
			m->_ack = ack;
   1859e:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   185a2:	f7ff fe9b 	bl	182dc <memq_enqueue>
   185a6:	e7b1      	b.n	1850c <mayfly_run+0xa0>
   185a8:	4770      	bx	lr
   185aa:	bf00      	nop
   185ac:	2000139c 	.word	0x2000139c
   185b0:	200013a0 	.word	0x200013a0

000185b4 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   185b4:	1e4b      	subs	r3, r1, #1
   185b6:	b2db      	uxtb	r3, r3
   185b8:	b189      	cbz	r1, 185de <util_ones_count_get+0x2a>
   185ba:	1e41      	subs	r1, r0, #1
   185bc:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   185c0:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   185c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   185c6:	b13b      	cbz	r3, 185d8 <util_ones_count_get+0x24>
			bite &= (bite - 1);
   185c8:	b25b      	sxtb	r3, r3
   185ca:	1e5a      	subs	r2, r3, #1
   185cc:	4013      	ands	r3, r2
			one_count++;
   185ce:	3001      	adds	r0, #1
		while (bite) {
   185d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   185d4:	b2c0      	uxtb	r0, r0
		while (bite) {
   185d6:	d1f7      	bne.n	185c8 <util_ones_count_get+0x14>
	while (octets_len--) {
   185d8:	4561      	cmp	r1, ip
   185da:	d1f2      	bne.n	185c2 <util_ones_count_get+0xe>
   185dc:	4770      	bx	lr
	uint8_t one_count = 0U;
   185de:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   185e0:	4770      	bx	lr
   185e2:	bf00      	nop

000185e4 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   185e4:	eba2 0c01 	sub.w	ip, r2, r1
   185e8:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   185ec:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   185ee:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   185f0:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   185f2:	d10a      	bne.n	1860a <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   185f4:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   185f8:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   185fa:	42a3      	cmp	r3, r4
   185fc:	d914      	bls.n	18628 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   185fe:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   18600:	2100      	movs	r1, #0
}
   18602:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   18604:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   18606:	6141      	str	r1, [r0, #20]
}
   18608:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1860a:	1a89      	subs	r1, r1, r2
   1860c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   18610:	428b      	cmp	r3, r1
   18612:	d806      	bhi.n	18622 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   18614:	4421      	add	r1, r4
   18616:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   18618:	2300      	movs	r3, #0
}
   1861a:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   1861c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1861e:	6141      	str	r1, [r0, #20]
}
   18620:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   18622:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   18624:	42a3      	cmp	r3, r4
   18626:	d8ea      	bhi.n	185fe <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   18628:	1ae1      	subs	r1, r4, r3
   1862a:	e7f5      	b.n	18618 <ticks_to_expire_prep+0x34>

0001862c <ticker_job_list_insert>:
{
   1862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18630:	b087      	sub	sp, #28
   18632:	4603      	mov	r3, r0
	count_user = instance->count_user;
   18634:	7a42      	ldrb	r2, [r0, #9]
{
   18636:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   18638:	6800      	ldr	r0, [r0, #0]
   1863a:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   1863c:	6858      	ldr	r0, [r3, #4]
   1863e:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   18640:	2a00      	cmp	r2, #0
   18642:	f000 80f6 	beq.w	18832 <ticker_job_list_insert+0x206>
   18646:	1e53      	subs	r3, r2, #1
   18648:	b2db      	uxtb	r3, r3
   1864a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   1864e:	460f      	mov	r7, r1
   18650:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   18652:	9b03      	ldr	r3, [sp, #12]
   18654:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   18656:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   18658:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   1865a:	2fff      	cmp	r7, #255	; 0xff
   1865c:	d05e      	beq.n	1871c <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   1865e:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   18662:	9b02      	ldr	r3, [sp, #8]
   18664:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   18668:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   1866a:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   1866e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   18672:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   18674:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   18676:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1867a:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   1867e:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   18682:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   18684:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   18688:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   1868a:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   1868e:	d10f      	bne.n	186b0 <ticker_job_list_insert+0x84>
   18690:	e0ca      	b.n	18828 <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   18692:	1a09      	subs	r1, r1, r0
   18694:	d106      	bne.n	186a4 <ticker_job_list_insert+0x78>
   18696:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   1869a:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   1869e:	45e2      	cmp	sl, ip
   186a0:	f200 8086 	bhi.w	187b0 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   186a4:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   186a8:	2bff      	cmp	r3, #255	; 0xff
   186aa:	4691      	mov	r9, r2
   186ac:	d072      	beq.n	18794 <ticker_job_list_insert+0x168>
   186ae:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   186b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   186b4:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   186b8:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   186ba:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   186be:	4288      	cmp	r0, r1
   186c0:	d9e7      	bls.n	18692 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   186c2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   186c6:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   186ca:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   186ce:	d166      	bne.n	1879e <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   186d0:	9b01      	ldr	r3, [sp, #4]
   186d2:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   186d6:	2aff      	cmp	r2, #255	; 0xff
   186d8:	d008      	beq.n	186ec <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   186da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   186de:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   186e2:	f8de 3008 	ldr.w	r3, [lr, #8]
   186e6:	1a5b      	subs	r3, r3, r1
   186e8:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   186ec:	78a3      	ldrb	r3, [r4, #2]
   186ee:	3301      	adds	r3, #1
   186f0:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   186f2:	2d00      	cmp	r5, #0
   186f4:	d0b1      	beq.n	1865a <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   186f6:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   186fa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   186fc:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   186fe:	2200      	movs	r2, #0
   18700:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   18702:	b113      	cbz	r3, 1870a <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   18704:	6b29      	ldr	r1, [r5, #48]	; 0x30
   18706:	4610      	mov	r0, r2
   18708:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1870a:	6863      	ldr	r3, [r4, #4]
   1870c:	2b00      	cmp	r3, #0
   1870e:	d1a4      	bne.n	1865a <ticker_job_list_insert+0x2e>
					ticker->op_context =
   18710:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   18714:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   18716:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   1871a:	d1a0      	bne.n	1865e <ticker_job_list_insert+0x32>
   1871c:	9b03      	ldr	r3, [sp, #12]
   1871e:	7898      	ldrb	r0, [r3, #2]
   18720:	42b0      	cmp	r0, r6
   18722:	d02f      	beq.n	18784 <ticker_job_list_insert+0x158>
   18724:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   18728:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1872c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
   18730:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   18734:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
   18738:	3601      	adds	r6, #1
   1873a:	b2f6      	uxtb	r6, r6
					first = 0U;
   1873c:	42b1      	cmp	r1, r6
   1873e:	bf08      	it	eq
   18740:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   18742:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
   18744:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   18748:	d11a      	bne.n	18780 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   1874a:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   1874e:	9902      	ldr	r1, [sp, #8]
   18750:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   18754:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   18758:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   1875c:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   1875e:	7862      	ldrb	r2, [r4, #1]
   18760:	1a52      	subs	r2, r2, r1
   18762:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   18766:	d025      	beq.n	187b4 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   18768:	f04f 0200 	mov.w	r2, #0
   1876c:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   18770:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   18772:	2001      	movs	r0, #1
	user_op->status = status;
   18774:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   18776:	b10b      	cbz	r3, 1877c <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   18778:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1877a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   1877c:	f89b 0002 	ldrb.w	r0, [fp, #2]
   18780:	42b0      	cmp	r0, r6
   18782:	d1d1      	bne.n	18728 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   18784:	9a03      	ldr	r2, [sp, #12]
   18786:	9905      	ldr	r1, [sp, #20]
   18788:	4291      	cmp	r1, r2
   1878a:	f1a2 0308 	sub.w	r3, r2, #8
   1878e:	d050      	beq.n	18832 <ticker_job_list_insert+0x206>
   18790:	9303      	str	r3, [sp, #12]
   18792:	e75e      	b.n	18652 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   18794:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   18798:	f88b 3000 	strb.w	r3, [fp]
   1879c:	461a      	mov	r2, r3
		node[previous].next = id;
   1879e:	fa0f f989 	sxth.w	r9, r9
   187a2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   187a6:	ea4f 1909 	mov.w	r9, r9, lsl #4
   187aa:	f80e 8009 	strb.w	r8, [lr, r9]
   187ae:	e792      	b.n	186d6 <ticker_job_list_insert+0xaa>
   187b0:	4601      	mov	r1, r0
   187b2:	e786      	b.n	186c2 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   187b4:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   187b6:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   187b8:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   187bc:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   187be:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   187c0:	d02a      	beq.n	18818 <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
   187c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   187c6:	1a9a      	subs	r2, r3, r2
   187c8:	fab2 f282 	clz	r2, r2
   187cc:	0952      	lsrs	r2, r2, #5
   187ce:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   187d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   187d4:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   187d6:	68ea      	ldr	r2, [r5, #12]
   187d8:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   187da:	692a      	ldr	r2, [r5, #16]
   187dc:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   187de:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   187e2:	4293      	cmp	r3, r2
   187e4:	bf88      	it	hi
   187e6:	2300      	movhi	r3, #0
   187e8:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   187ea:	69ab      	ldr	r3, [r5, #24]
   187ec:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   187ee:	69eb      	ldr	r3, [r5, #28]
   187f0:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   187f2:	6a2b      	ldr	r3, [r5, #32]
   187f4:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   187f6:	68ab      	ldr	r3, [r5, #8]
   187f8:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   187fa:	2300      	movs	r3, #0
   187fc:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   187fe:	686a      	ldr	r2, [r5, #4]
   18800:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   18802:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   18804:	f7ff feee 	bl	185e4 <ticks_to_expire_prep>
	ticker->force = 1U;
   18808:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   1880c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   18810:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   18814:	70e3      	strb	r3, [r4, #3]
}
   18816:	e72d      	b.n	18674 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   18818:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   1881a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   1881c:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   1881e:	68ea      	ldr	r2, [r5, #12]
   18820:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   18822:	692a      	ldr	r2, [r5, #16]
   18824:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   18826:	e7df      	b.n	187e8 <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
   18828:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   1882c:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   18830:	e75c      	b.n	186ec <ticker_job_list_insert+0xc0>
}
   18832:	b007      	add	sp, #28
   18834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018838 <ticker_worker>:
{
   18838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   1883c:	7f82      	ldrb	r2, [r0, #30]
{
   1883e:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
   18840:	2301      	movs	r3, #1
	if (instance->job_guard) {
   18842:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
   18844:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   18846:	2a00      	cmp	r2, #0
   18848:	d15b      	bne.n	18902 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   1884a:	7f43      	ldrb	r3, [r0, #29]
   1884c:	2bff      	cmp	r3, #255	; 0xff
   1884e:	4681      	mov	r9, r0
   18850:	d056      	beq.n	18900 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   18852:	f00c f86d 	bl	24930 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18856:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1885a:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   1885e:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18862:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   18864:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18866:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   1886a:	f000 813f 	beq.w	18aec <ticker_worker+0x2b4>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   1886e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   18872:	42b3      	cmp	r3, r6
   18874:	bf94      	ite	ls
   18876:	2300      	movls	r3, #0
   18878:	2301      	movhi	r3, #1
   1887a:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
   1887c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   18880:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   18884:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   18888:	d046      	beq.n	18918 <ticker_worker+0xe0>
			must_expire_skip = 1U;
   1888a:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
   1888e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   18892:	eb07 140b 	add.w	r4, r7, fp, lsl #4
   18896:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   1889a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1889c:	42b3      	cmp	r3, r6
   1889e:	d839      	bhi.n	18914 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   188a0:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
   188a4:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
   188a8:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   188aa:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   188ac:	7863      	ldrb	r3, [r4, #1]
   188ae:	eba3 030a 	sub.w	r3, r3, sl
   188b2:	b2db      	uxtb	r3, r3
   188b4:	2b01      	cmp	r3, #1
   188b6:	d12a      	bne.n	1890e <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
   188b8:	69a0      	ldr	r0, [r4, #24]
   188ba:	2800      	cmp	r0, #0
   188bc:	d054      	beq.n	18968 <ticker_worker+0x130>
   188be:	9b03      	ldr	r3, [sp, #12]
   188c0:	2b00      	cmp	r3, #0
   188c2:	d04c      	beq.n	1895e <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   188c4:	8be3      	ldrh	r3, [r4, #30]
   188c6:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
   188c8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
   188ca:	b13a      	cbz	r2, 188dc <ticker_worker+0xa4>
   188cc:	6813      	ldr	r3, [r2, #0]
   188ce:	b11b      	cbz	r3, 188d8 <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
   188d0:	7a13      	ldrb	r3, [r2, #8]
   188d2:	2b00      	cmp	r3, #0
   188d4:	f000 80f0 	beq.w	18ab8 <ticker_worker+0x280>
				ext_data->reschedule_state =
   188d8:	2300      	movs	r3, #0
   188da:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
   188dc:	9b05      	ldr	r3, [sp, #20]
			if ((ticker->must_expire == 0U) ||
   188de:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   188e2:	3301      	adds	r3, #1
   188e4:	b29b      	uxth	r3, r3
   188e6:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   188e8:	b171      	cbz	r1, 18908 <ticker_worker+0xd0>
   188ea:	8ba1      	ldrh	r1, [r4, #28]
   188ec:	4299      	cmp	r1, r3
   188ee:	d20b      	bcs.n	18908 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   188f0:	2a00      	cmp	r2, #0
   188f2:	f000 80fe 	beq.w	18af2 <ticker_worker+0x2ba>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   188f6:	7a13      	ldrb	r3, [r2, #8]
   188f8:	2b01      	cmp	r3, #1
   188fa:	d005      	beq.n	18908 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   188fc:	2301      	movs	r3, #1
   188fe:	e036      	b.n	1896e <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   18900:	77c2      	strb	r2, [r0, #31]
}
   18902:	b00f      	add	sp, #60	; 0x3c
   18904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   18908:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   1890c:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   1890e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   18912:	d1bc      	bne.n	1888e <ticker_worker+0x56>
   18914:	f8dd 9010 	ldr.w	r9, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   18918:	f899 300b 	ldrb.w	r3, [r9, #11]
   1891c:	f899 200a 	ldrb.w	r2, [r9, #10]
   18920:	429a      	cmp	r2, r3
   18922:	d10a      	bne.n	1893a <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   18924:	3201      	adds	r2, #1
   18926:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   18928:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1892a:	bf1c      	itt	ne
   1892c:	4613      	movne	r3, r2
   1892e:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
   18930:	9a06      	ldr	r2, [sp, #24]
   18932:	f889 200b 	strb.w	r2, [r9, #11]
   18936:	bf08      	it	eq
   18938:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   1893a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1893e:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   18942:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   18946:	2200      	movs	r2, #0
   18948:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1894c:	464b      	mov	r3, r9
   1894e:	2201      	movs	r2, #1
   18950:	2104      	movs	r1, #4
   18952:	2003      	movs	r0, #3
   18954:	46a4      	mov	ip, r4
}
   18956:	b00f      	add	sp, #60	; 0x3c
   18958:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   1895c:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   1895e:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   18962:	9307      	str	r3, [sp, #28]
   18964:	3380      	adds	r3, #128	; 0x80
   18966:	d13c      	bne.n	189e2 <ticker_worker+0x1aa>
		if (ticker->ext_data) {
   18968:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   1896a:	b1d2      	cbz	r2, 189a2 <ticker_worker+0x16a>
   1896c:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
   1896e:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
   18970:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
   18972:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
   18974:	6051      	str	r1, [r2, #4]
		ticker->ack--;
   18976:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
   1897a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   1897c:	2d00      	cmp	r5, #0
   1897e:	d0c6      	beq.n	1890e <ticker_worker+0xd6>
					   ticks_expired -
   18980:	9a04      	ldr	r2, [sp, #16]
   18982:	6960      	ldr	r0, [r4, #20]
   18984:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   18986:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   18988:	eba8 0000 	sub.w	r0, r8, r0
   1898c:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   1898e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   18992:	b1ab      	cbz	r3, 189c0 <ticker_worker+0x188>
   18994:	6922      	ldr	r2, [r4, #16]
   18996:	78e3      	ldrb	r3, [r4, #3]
   18998:	9200      	str	r2, [sp, #0]
   1899a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1899e:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
   189a0:	e7b5      	b.n	1890e <ticker_worker+0xd6>
		if (ticker->timeout_func) {
   189a2:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   189a4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   189a8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   189aa:	2d00      	cmp	r5, #0
   189ac:	d0af      	beq.n	1890e <ticker_worker+0xd6>
					   ticks_expired -
   189ae:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   189b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   189b2:	eba8 0003 	sub.w	r0, r8, r3
   189b6:	9b04      	ldr	r3, [sp, #16]
   189b8:	695b      	ldr	r3, [r3, #20]
   189ba:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   189bc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   189c0:	f8d4 c010 	ldr.w	ip, [r4, #16]
   189c4:	78e3      	ldrb	r3, [r4, #3]
   189c6:	8be2      	ldrh	r2, [r4, #30]
   189c8:	f8cd c000 	str.w	ip, [sp]
   189cc:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   189ce:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   189d0:	2b00      	cmp	r3, #0
   189d2:	9b03      	ldr	r3, [sp, #12]
   189d4:	bf18      	it	ne
   189d6:	2301      	movne	r3, #1
   189d8:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
   189da:	2300      	movs	r3, #0
   189dc:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   189de:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   189e0:	e795      	b.n	1890e <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   189e2:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   189e6:	d0bf      	beq.n	18968 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
   189e8:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   189ea:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   189ec:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   189f0:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
   189f2:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   189f4:	bf28      	it	cs
   189f6:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   189f8:	fb02 c10c 	mla	r1, r2, ip, ip
   189fc:	9108      	str	r1, [sp, #32]
				(lazy_current - ticker->priority);
   189fe:	9907      	ldr	r1, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   18a00:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   18a04:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
   18a08:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
   18a0a:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
   18a0c:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
   18a0e:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
   18a10:	2500      	movs	r5, #0
   18a12:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   18a16:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
   18a18:	b21b      	sxth	r3, r3
   18a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18a1e:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   18a22:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   18a24:	f8d2 8008 	ldr.w	r8, [r2, #8]
   18a28:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   18a2a:	42a8      	cmp	r0, r5
   18a2c:	d33c      	bcc.n	18aa8 <ticker_worker+0x270>
			if (ticker_next->ticks_slot == 0U) {
   18a2e:	6991      	ldr	r1, [r2, #24]
   18a30:	2900      	cmp	r1, #0
   18a32:	d036      	beq.n	18aa2 <ticker_worker+0x26a>
			int32_t lazy_next = ticker_next->lazy_current;
   18a34:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   18a36:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   18a38:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   18a3c:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   18a40:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   18a42:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   18a44:	bf28      	it	cs
   18a46:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   18a4a:	f1ba 0f00 	cmp.w	sl, #0
   18a4e:	d040      	beq.n	18ad2 <ticker_worker+0x29a>
   18a50:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   18a54:	2c00      	cmp	r4, #0
   18a56:	d038      	beq.n	18aca <ticker_worker+0x292>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   18a58:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   18a5c:	f8dd a020 	ldr.w	sl, [sp, #32]
   18a60:	45c2      	cmp	sl, r8
   18a62:	bf8c      	ite	hi
   18a64:	f04f 0801 	movhi.w	r8, #1
   18a68:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   18a6c:	bf34      	ite	cc
   18a6e:	f04f 0a01 	movcc.w	sl, #1
   18a72:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   18a76:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   18a78:	f892 b003 	ldrb.w	fp, [r2, #3]
   18a7c:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   18a80:	d30f      	bcc.n	18aa2 <ticker_worker+0x26a>
   18a82:	4593      	cmp	fp, r2
   18a84:	d82a      	bhi.n	18adc <ticker_worker+0x2a4>
			    (next_force ||
   18a86:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   18a8a:	d027      	beq.n	18adc <ticker_worker+0x2a4>
			     next_is_critical ||
   18a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
   18a8e:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   18a92:	4594      	cmp	ip, r2
   18a94:	dd02      	ble.n	18a9c <ticker_worker+0x264>
			     (next_has_priority && !current_is_older) ||
   18a96:	f1b8 0f00 	cmp.w	r8, #0
   18a9a:	d01f      	beq.n	18adc <ticker_worker+0x2a4>
   18a9c:	9a07      	ldr	r2, [sp, #28]
   18a9e:	4572      	cmp	r2, lr
   18aa0:	d019      	beq.n	18ad6 <ticker_worker+0x29e>
			id_head = ticker_next->next;
   18aa2:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   18aa4:	2bff      	cmp	r3, #255	; 0xff
   18aa6:	d1b7      	bne.n	18a18 <ticker_worker+0x1e0>
   18aa8:	e9dd 680b 	ldrd	r6, r8, [sp, #44]	; 0x2c
   18aac:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   18ab0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   18ab4:	464c      	mov	r4, r9
   18ab6:	e757      	b.n	18968 <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
   18ab8:	8ba3      	ldrh	r3, [r4, #28]
   18aba:	9905      	ldr	r1, [sp, #20]
   18abc:	428b      	cmp	r3, r1
   18abe:	f63f af0b 	bhi.w	188d8 <ticker_worker+0xa0>
				ext_data->reschedule_state =
   18ac2:	f04f 0301 	mov.w	r3, #1
   18ac6:	7213      	strb	r3, [r2, #8]
   18ac8:	e708      	b.n	188dc <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
   18aca:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
   18ace:	46a2      	mov	sl, r4
   18ad0:	e7d1      	b.n	18a76 <ticker_worker+0x23e>
					  0U :
   18ad2:	46d0      	mov	r8, sl
   18ad4:	e7be      	b.n	18a54 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
   18ad6:	f1ba 0f00 	cmp.w	sl, #0
   18ada:	d0e2      	beq.n	18aa2 <ticker_worker+0x26a>
   18adc:	e9dd 680b 	ldrd	r6, r8, [sp, #44]	; 0x2c
   18ae0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   18ae4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   18ae8:	464c      	mov	r4, r9
   18aea:	e6ed      	b.n	188c8 <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
   18aec:	9b06      	ldr	r3, [sp, #24]
   18aee:	9303      	str	r3, [sp, #12]
   18af0:	e6c4      	b.n	1887c <ticker_worker+0x44>
		if (ticker->timeout_func) {
   18af2:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   18af4:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
   18af8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   18afa:	2d00      	cmp	r5, #0
   18afc:	f43f af07 	beq.w	1890e <ticker_worker+0xd6>
					   ticks_expired -
   18b00:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   18b02:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   18b04:	eba8 0003 	sub.w	r0, r8, r3
   18b08:	9b04      	ldr	r3, [sp, #16]
   18b0a:	695b      	ldr	r3, [r3, #20]
   18b0c:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   18b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   18b12:	e73f      	b.n	18994 <ticker_worker+0x15c>

00018b14 <ticker_job>:
{
   18b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b18:	b08f      	sub	sp, #60	; 0x3c
	if (instance->worker_trigger) {
   18b1a:	7fc3      	ldrb	r3, [r0, #31]
{
   18b1c:	9000      	str	r0, [sp, #0]
	if (instance->worker_trigger) {
   18b1e:	2b00      	cmp	r3, #0
   18b20:	f040 80a8 	bne.w	18c74 <ticker_job+0x160>
	if (instance->job_guard) {
   18b24:	7f82      	ldrb	r2, [r0, #30]
   18b26:	2a00      	cmp	r2, #0
   18b28:	f040 80a7 	bne.w	18c7a <ticker_job+0x166>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   18b2c:	9c00      	ldr	r4, [sp, #0]
   18b2e:	7aa3      	ldrb	r3, [r4, #10]
   18b30:	7ae1      	ldrb	r1, [r4, #11]
	instance->job_guard = 1U;
   18b32:	2001      	movs	r0, #1
   18b34:	77a0      	strb	r0, [r4, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   18b36:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   18b38:	6960      	ldr	r0, [r4, #20]
   18b3a:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   18b3c:	f000 8490 	beq.w	19460 <ticker_job+0x94c>
	uint8_t idx = *ticks_elapsed_index + 1;
   18b40:	3301      	adds	r3, #1
   18b42:	b2db      	uxtb	r3, r3
		ticks_elapsed =
   18b44:	9900      	ldr	r1, [sp, #0]
	if (idx == DOUBLE_BUFFER_SIZE) {
   18b46:	2b02      	cmp	r3, #2
		idx = 0U;
   18b48:	bf08      	it	eq
   18b4a:	4613      	moveq	r3, r2
		ticks_elapsed =
   18b4c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
	*ticks_elapsed_index = idx;
   18b50:	728b      	strb	r3, [r1, #10]
	ticker_id_old_head = instance->ticker_id_head;
   18b52:	7f4b      	ldrb	r3, [r1, #29]
		ticks_elapsed =
   18b54:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   18b56:	930a      	str	r3, [sp, #40]	; 0x28
		instance->ticks_current += ticks_elapsed;
   18b58:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
   18b5a:	9204      	str	r2, [sp, #16]
		instance->ticks_current += ticks_elapsed;
   18b5c:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   18b5e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   18b62:	7a4a      	ldrb	r2, [r1, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   18b64:	614b      	str	r3, [r1, #20]
	node = &instance->nodes[0];
   18b66:	680b      	ldr	r3, [r1, #0]
   18b68:	9302      	str	r3, [sp, #8]
	users = &instance->users[0];
   18b6a:	684b      	ldr	r3, [r1, #4]
   18b6c:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   18b6e:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   18b70:	9209      	str	r2, [sp, #36]	; 0x24
	while (count_user--) {
   18b72:	b2db      	uxtb	r3, r3
   18b74:	2a00      	cmp	r2, #0
   18b76:	f000 8229 	beq.w	18fcc <ticker_job+0x4b8>
		flag_elapsed = 1U;
   18b7a:	2201      	movs	r2, #1
   18b7c:	920d      	str	r2, [sp, #52]	; 0x34
   18b7e:	9a05      	ldr	r2, [sp, #20]
   18b80:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
	pending = 0U;
   18b84:	2300      	movs	r3, #0
   18b86:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   18b88:	23ff      	movs	r3, #255	; 0xff
   18b8a:	9303      	str	r3, [sp, #12]
   18b8c:	46d3      	mov	fp, sl
		user_ops = &user->user_op[0];
   18b8e:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
   18b92:	f89b c003 	ldrb.w	ip, [fp, #3]
   18b96:	f89b 9002 	ldrb.w	r9, [fp, #2]
   18b9a:	45e1      	cmp	r9, ip
   18b9c:	d062      	beq.n	18c64 <ticker_job+0x150>
			if (middle == user->count_user_op) {
   18b9e:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
   18ba2:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
   18ba6:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
   18baa:	b2db      	uxtb	r3, r3
				middle = 0U;
   18bac:	429a      	cmp	r2, r3
   18bae:	bf08      	it	eq
   18bb0:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   18bb2:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   18bb6:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
   18bba:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   18bbe:	f818 1027 	ldrb.w	r1, [r8, r7, lsl #2]
   18bc2:	2904      	cmp	r1, #4
			user_op = &user_ops[user->middle];
   18bc4:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   18bc8:	d961      	bls.n	18c8e <ticker_job+0x17a>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   18bca:	2907      	cmp	r1, #7
   18bcc:	d871      	bhi.n	18cb2 <ticker_job+0x19e>
			ticker = &node[user_op->id];
   18bce:	7872      	ldrb	r2, [r6, #1]
   18bd0:	9802      	ldr	r0, [sp, #8]
   18bd2:	eb02 0442 	add.w	r4, r2, r2, lsl #1
   18bd6:	eb00 1404 	add.w	r4, r0, r4, lsl #4
   18bda:	b210      	sxth	r0, r2
			state = (ticker->req - ticker->ack) & 0xff;
   18bdc:	f894 e002 	ldrb.w	lr, [r4, #2]
   18be0:	7865      	ldrb	r5, [r4, #1]
			ticker = &node[user_op->id];
   18be2:	9001      	str	r0, [sp, #4]
			state = (ticker->req - ticker->ack) & 0xff;
   18be4:	eba5 050e 	sub.w	r5, r5, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   18be8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   18bec:	d061      	beq.n	18cb2 <ticker_job+0x19e>
			    (state == 0U) ||
   18bee:	2905      	cmp	r1, #5
   18bf0:	d04f      	beq.n	18c92 <ticker_job+0x17e>
			if (state == 1U) {
   18bf2:	2d01      	cmp	r5, #1
   18bf4:	f040 8164 	bne.w	18ec0 <ticker_job+0x3ac>
	previous = instance->ticker_id_head;
   18bf8:	9800      	ldr	r0, [sp, #0]
   18bfa:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
   18bfc:	f8d0 a000 	ldr.w	sl, [r0]
	while (current != TICKER_NULL) {
   18c00:	2bff      	cmp	r3, #255	; 0xff
   18c02:	d015      	beq.n	18c30 <ticker_job+0x11c>
		ticker_current = &node[current];
   18c04:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		if (current == id) {
   18c08:	429a      	cmp	r2, r3
		ticker_current = &node[current];
   18c0a:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
		if (current == id) {
   18c0e:	f000 81cf 	beq.w	18fb0 <ticker_job+0x49c>
	total = 0U;
   18c12:	2500      	movs	r5, #0
   18c14:	e001      	b.n	18c1a <ticker_job+0x106>
		if (current == id) {
   18c16:	429a      	cmp	r2, r3
   18c18:	d05a      	beq.n	18cd0 <ticker_job+0x1bc>
		total += ticker_current->ticks_to_expire;
   18c1a:	4699      	mov	r9, r3
		current = ticker_current->next;
   18c1c:	7803      	ldrb	r3, [r0, #0]
		total += ticker_current->ticks_to_expire;
   18c1e:	f8d0 c008 	ldr.w	ip, [r0, #8]
	while (current != TICKER_NULL) {
   18c22:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   18c24:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   18c28:	4465      	add	r5, ip
		ticker_current = &node[current];
   18c2a:	eb0a 1000 	add.w	r0, sl, r0, lsl #4
	while (current != TICKER_NULL) {
   18c2e:	d1f2      	bne.n	18c16 <ticker_job+0x102>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   18c30:	2500      	movs	r5, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   18c32:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   18c34:	60a5      	str	r5, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   18c36:	f000 8130 	beq.w	18e9a <ticker_job+0x386>
		if (instance->ticker_id_slot_previous == user_op->id) {
   18c3a:	9b00      	ldr	r3, [sp, #0]
		ticker->req = ticker->ack;
   18c3c:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   18c40:	7f1b      	ldrb	r3, [r3, #28]
   18c42:	4293      	cmp	r3, r2
   18c44:	f000 80fd 	beq.w	18e42 <ticker_job+0x32e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   18c48:	2000      	movs	r0, #0
   18c4a:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   18c4e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
   18c50:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   18c52:	b10b      	cbz	r3, 18c58 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   18c54:	6b31      	ldr	r1, [r6, #48]	; 0x30
   18c56:	4798      	blx	r3
		while (user->middle != user->last) {
   18c58:	f89b c003 	ldrb.w	ip, [fp, #3]
   18c5c:	f89b 9002 	ldrb.w	r9, [fp, #2]
   18c60:	45e1      	cmp	r9, ip
   18c62:	d19c      	bne.n	18b9e <ticker_job+0x8a>
	while (count_user--) {
   18c64:	9a05      	ldr	r2, [sp, #20]
   18c66:	455a      	cmp	r2, fp
   18c68:	f1ab 0308 	sub.w	r3, fp, #8
   18c6c:	f000 8138 	beq.w	18ee0 <ticker_job+0x3cc>
   18c70:	469b      	mov	fp, r3
   18c72:	e78c      	b.n	18b8e <ticker_job+0x7a>
}
   18c74:	b00f      	add	sp, #60	; 0x3c
   18c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
   18c7a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   18c7c:	2104      	movs	r1, #4
   18c7e:	4603      	mov	r3, r0
   18c80:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   18c82:	2004      	movs	r0, #4
   18c84:	46a4      	mov	ip, r4
}
   18c86:	b00f      	add	sp, #60	; 0x3c
   18c88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   18c8c:	4760      	bx	ip
   18c8e:	4699      	mov	r9, r3
   18c90:	e783      	b.n	18b9a <ticker_job+0x86>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   18c92:	6870      	ldr	r0, [r6, #4]
   18c94:	2800      	cmp	r0, #0
   18c96:	d1ac      	bne.n	18bf2 <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   18c98:	68b0      	ldr	r0, [r6, #8]
   18c9a:	2800      	cmp	r0, #0
   18c9c:	d1a9      	bne.n	18bf2 <ticker_job+0xde>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   18c9e:	68f0      	ldr	r0, [r6, #12]
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d1a6      	bne.n	18bf2 <ticker_job+0xde>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   18ca4:	6930      	ldr	r0, [r6, #16]
   18ca6:	2800      	cmp	r0, #0
   18ca8:	d1a3      	bne.n	18bf2 <ticker_job+0xde>
			     (user_op->params.update.lazy == 0U) &&
   18caa:	6970      	ldr	r0, [r6, #20]
   18cac:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   18cb0:	d19f      	bne.n	18bf2 <ticker_job+0xde>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   18cb2:	2200      	movs	r2, #0
   18cb4:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   18cb8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
   18cba:	2001      	movs	r0, #1
   18cbc:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   18cbe:	2a00      	cmp	r2, #0
   18cc0:	d0e5      	beq.n	18c8e <ticker_job+0x17a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   18cc2:	6b31      	ldr	r1, [r6, #48]	; 0x30
   18cc4:	4790      	blx	r2
		while (user->middle != user->last) {
   18cc6:	f89b c003 	ldrb.w	ip, [fp, #3]
   18cca:	f89b 9002 	ldrb.w	r9, [fp, #2]
   18cce:	e764      	b.n	18b9a <ticker_job+0x86>
	if (previous == current) {
   18cd0:	454a      	cmp	r2, r9
   18cd2:	f000 80cb 	beq.w	18e6c <ticker_job+0x358>
	node[previous].next = ticker_current->next;
   18cd6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   18cda:	7803      	ldrb	r3, [r0, #0]
   18cdc:	eb0a 1909 	add.w	r9, sl, r9, lsl #4
	timeout = ticker_current->ticks_to_expire;
   18ce0:	f8d0 c008 	ldr.w	ip, [r0, #8]
	node[previous].next = ticker_current->next;
   18ce4:	f889 3000 	strb.w	r3, [r9]
	if (ticker_current->next != TICKER_NULL) {
   18ce8:	7803      	ldrb	r3, [r0, #0]
   18cea:	2bff      	cmp	r3, #255	; 0xff
   18cec:	d008      	beq.n	18d00 <ticker_job+0x1ec>
		node[ticker_current->next].ticks_to_expire += timeout;
   18cee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   18cf2:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
   18cf6:	f8da 3008 	ldr.w	r3, [sl, #8]
   18cfa:	4463      	add	r3, ip
   18cfc:	f8ca 3008 	str.w	r3, [sl, #8]
	return (total + timeout);
   18d00:	4465      	add	r5, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   18d02:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   18d04:	60a5      	str	r5, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   18d06:	d198      	bne.n	18c3a <ticker_job+0x126>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   18d08:	9b00      	ldr	r3, [sp, #0]
   18d0a:	f8d3 9014 	ldr.w	r9, [r3, #20]
	ticks_now = cntr_cnt_get();
   18d0e:	f00b fe0f 	bl	24930 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   18d12:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18d14:	eba0 0209 	sub.w	r2, r0, r9
   18d18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   18d1c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   18d1e:	4295      	cmp	r5, r2
	ticks_now = cntr_cnt_get();
   18d20:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
   18d22:	f240 80c6 	bls.w	18eb2 <ticker_job+0x39e>
	ticker->ticks_to_expire_minus +=
   18d26:	6963      	ldr	r3, [r4, #20]
   18d28:	9301      	str	r3, [sp, #4]
		ticks_to_expire -= ticks_elapsed;
   18d2a:	1aaa      	subs	r2, r5, r2
	if ((ticker->ticks_periodic != 0U) &&
   18d2c:	6865      	ldr	r5, [r4, #4]
   18d2e:	2d00      	cmp	r5, #0
   18d30:	d05c      	beq.n	18dec <ticker_job+0x2d8>
	    (user_op->params.update.lazy != 0U)) {
   18d32:	8ab3      	ldrh	r3, [r6, #20]
   18d34:	9309      	str	r3, [sp, #36]	; 0x24
	if ((ticker->ticks_periodic != 0U) &&
   18d36:	2b00      	cmp	r3, #0
   18d38:	d058      	beq.n	18dec <ticker_job+0x2d8>
		user_op->params.update.lazy--;
   18d3a:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   18d3e:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   18d42:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   18d44:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   18d46:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   18d4a:	d223      	bcs.n	18d94 <ticker_job+0x280>
   18d4c:	1c69      	adds	r1, r5, #1
   18d4e:	f8cd 8018 	str.w	r8, [sp, #24]
   18d52:	960b      	str	r6, [sp, #44]	; 0x2c
   18d54:	468c      	mov	ip, r1
   18d56:	e018      	b.n	18d8a <ticker_job+0x276>
	if ((ticker->remainder_current >= BIT(31)) ||
   18d58:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18d5a:	f8df 825c 	ldr.w	r8, [pc, #604]	; 18fb8 <ticker_job+0x4a4>
   18d5e:	4e97      	ldr	r6, [pc, #604]	; (18fbc <ticker_job+0x4a8>)
   18d60:	4488      	add	r8, r1
   18d62:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   18d64:	bf84      	itt	hi
   18d66:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   18d6a:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   18d6e:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   18d70:	6a26      	ldr	r6, [r4, #32]
   18d72:	bf94      	ite	ls
   18d74:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   18d76:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   18d7a:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   18d7c:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   18d7e:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
   18d80:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   18d82:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   18d84:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
   18d86:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   18d88:	d201      	bcs.n	18d8e <ticker_job+0x27a>
   18d8a:	459e      	cmp	lr, r3
   18d8c:	d3e4      	bcc.n	18d58 <ticker_job+0x244>
   18d8e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   18d92:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18d94:	459e      	cmp	lr, r3
   18d96:	d927      	bls.n	18de8 <ticker_job+0x2d4>
   18d98:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   18d9a:	1c68      	adds	r0, r5, #1
   18d9c:	e9cd 840b 	strd	r8, r4, [sp, #44]	; 0x2c
	ticker->remainder_current += ticker->remainder_periodic;
   18da0:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
			ticks_to_expire += ticker->ticks_periodic +
   18da4:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   18da8:	9006      	str	r0, [sp, #24]
   18daa:	b29b      	uxth	r3, r3
   18dac:	e005      	b.n	18dba <ticker_job+0x2a6>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18dae:	3301      	adds	r3, #1
   18db0:	b29b      	uxth	r3, r3
   18db2:	4628      	mov	r0, r5
   18db4:	4598      	cmp	r8, r3
			ticks_to_expire += ticker->ticks_periodic +
   18db6:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18db8:	d011      	beq.n	18dde <ticker_job+0x2ca>
	if ((ticker->remainder_current < BIT(31)) &&
   18dba:	487f      	ldr	r0, [pc, #508]	; (18fb8 <ticker_job+0x4a4>)
   18dbc:	4c7f      	ldr	r4, [pc, #508]	; (18fbc <ticker_job+0x4a8>)
	ticker->remainder_current += ticker->remainder_periodic;
   18dbe:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
   18dc0:	1808      	adds	r0, r1, r0
   18dc2:	42a0      	cmp	r0, r4
   18dc4:	d8f3      	bhi.n	18dae <ticker_job+0x29a>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18dc6:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   18dc8:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18dca:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18dce:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18dd0:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18dd4:	4598      	cmp	r8, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   18dd6:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   18dda:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   18ddc:	d1ed      	bne.n	18dba <ticker_job+0x2a6>
   18dde:	e9dd 840b 	ldrd	r8, r4, [sp, #44]	; 0x2c
   18de2:	6261      	str	r1, [r4, #36]	; 0x24
   18de4:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   18de8:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   18dec:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   18dee:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire_minus +=
   18df0:	9d01      	ldr	r5, [sp, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   18df2:	440a      	add	r2, r1
   18df4:	60a2      	str	r2, [r4, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
   18df6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
   18df8:	4405      	add	r5, r0
   18dfa:	6165      	str	r5, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   18dfc:	b11a      	cbz	r2, 18e06 <ticker_job+0x2f2>
   18dfe:	6813      	ldr	r3, [r2, #0]
   18e00:	b10b      	cbz	r3, 18e06 <ticker_job+0x2f2>
			user_op->params.update.ticks_drift_plus -
   18e02:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   18e04:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   18e06:	4652      	mov	r2, sl
   18e08:	4649      	mov	r1, r9
   18e0a:	4620      	mov	r0, r4
   18e0c:	f7ff fbea 	bl	185e4 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   18e10:	68f2      	ldr	r2, [r6, #12]
   18e12:	69a3      	ldr	r3, [r4, #24]
   18e14:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   18e16:	6932      	ldr	r2, [r6, #16]
   18e18:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   18e1a:	bf8c      	ite	hi
   18e1c:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   18e1e:	2300      	movls	r3, #0
   18e20:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   18e22:	7db3      	ldrb	r3, [r6, #22]
   18e24:	b103      	cbz	r3, 18e28 <ticker_job+0x314>
		ticker->force = user_op->params.update.force;
   18e26:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   18e28:	7df3      	ldrb	r3, [r6, #23]
   18e2a:	b113      	cbz	r3, 18e32 <ticker_job+0x31e>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   18e2c:	3b01      	subs	r3, #1
   18e2e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   18e32:	9b03      	ldr	r3, [sp, #12]
   18e34:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   18e36:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   18e38:	7872      	ldrb	r2, [r6, #1]
   18e3a:	9203      	str	r2, [sp, #12]
		ticker->req++;
   18e3c:	3301      	adds	r3, #1
   18e3e:	7063      	strb	r3, [r4, #1]
   18e40:	e702      	b.n	18c48 <ticker_job+0x134>
			instance->ticker_id_slot_previous = TICKER_NULL;
   18e42:	9a00      	ldr	r2, [sp, #0]
   18e44:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   18e46:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   18e48:	7713      	strb	r3, [r2, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   18e4a:	d123      	bne.n	18e94 <ticker_job+0x380>
				ticks_at_stop =
   18e4c:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   18e4e:	9b00      	ldr	r3, [sp, #0]
   18e50:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
   18e52:	1ac2      	subs	r2, r0, r3
   18e54:	0214      	lsls	r4, r2, #8
   18e56:	d414      	bmi.n	18e82 <ticker_job+0x36e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18e58:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   18e5c:	9a04      	ldr	r2, [sp, #16]
   18e5e:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   18e60:	9900      	ldr	r1, [sp, #0]
   18e62:	698a      	ldr	r2, [r1, #24]
   18e64:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   18e66:	bf88      	it	hi
   18e68:	618b      	strhi	r3, [r1, #24]
   18e6a:	e6ed      	b.n	18c48 <ticker_job+0x134>
	node[previous].next = ticker_current->next;
   18e6c:	9b01      	ldr	r3, [sp, #4]
   18e6e:	eb03 0943 	add.w	r9, r3, r3, lsl #1
   18e72:	eb0a 1909 	add.w	r9, sl, r9, lsl #4
		instance->ticker_id_head = ticker_current->next;
   18e76:	f8dd c000 	ldr.w	ip, [sp]
   18e7a:	7803      	ldrb	r3, [r0, #0]
   18e7c:	f88c 301d 	strb.w	r3, [ip, #29]
   18e80:	e72e      	b.n	18ce0 <ticker_job+0x1cc>
				if (ticks_elapsed > ticks_used) {
   18e82:	9a04      	ldr	r2, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18e84:	1a1b      	subs	r3, r3, r0
   18e86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   18e8a:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   18e8c:	bf34      	ite	cc
   18e8e:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   18e90:	2300      	movcs	r3, #0
   18e92:	e7e5      	b.n	18e60 <ticker_job+0x34c>
				ticks_at_stop = cntr_cnt_get();
   18e94:	f00b fd4c 	bl	24930 <cntr_cnt_get>
   18e98:	e7d9      	b.n	18e4e <ticker_job+0x33a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   18e9a:	9b00      	ldr	r3, [sp, #0]
   18e9c:	f8d3 9014 	ldr.w	r9, [r3, #20]
	ticks_now = cntr_cnt_get();
   18ea0:	f00b fd46 	bl	24930 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   18ea4:	9b04      	ldr	r3, [sp, #16]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18ea6:	eba0 0209 	sub.w	r2, r0, r9
   18eaa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   18eae:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   18eb0:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   18eb2:	6963      	ldr	r3, [r4, #20]
   18eb4:	441a      	add	r2, r3
   18eb6:	1b53      	subs	r3, r2, r5
   18eb8:	9301      	str	r3, [sp, #4]
   18eba:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   18ebc:	2200      	movs	r2, #0
   18ebe:	e735      	b.n	18d2c <ticker_job+0x218>
				instance->sched_cb(TICKER_CALL_ID_JOB,
   18ec0:	9b00      	ldr	r3, [sp, #0]
   18ec2:	2104      	movs	r1, #4
   18ec4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   18ec6:	2201      	movs	r2, #1
   18ec8:	4608      	mov	r0, r1
   18eca:	47a0      	blx	r4
	while (count_user--) {
   18ecc:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
   18ece:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
   18ed2:	2301      	movs	r3, #1
	while (count_user--) {
   18ed4:	455a      	cmp	r2, fp
				pending = 1U;
   18ed6:	9308      	str	r3, [sp, #32]
	while (count_user--) {
   18ed8:	f1ab 0308 	sub.w	r3, fp, #8
   18edc:	f47f aec8 	bne.w	18c70 <ticker_job+0x15c>
	if (instance->ticker_id_head != ticker_id_old_head) {
   18ee0:	9b00      	ldr	r3, [sp, #0]
		flag_compare_update = 1U;
   18ee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
	if (instance->ticker_id_head != ticker_id_old_head) {
   18ee4:	7f5b      	ldrb	r3, [r3, #29]
		flag_compare_update = 1U;
   18ee6:	1a9b      	subs	r3, r3, r2
   18ee8:	bf18      	it	ne
   18eea:	2301      	movne	r3, #1
   18eec:	9309      	str	r3, [sp, #36]	; 0x24
	if (flag_elapsed) {
   18eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18ef0:	2b00      	cmp	r3, #0
   18ef2:	d16f      	bne.n	18fd4 <ticker_job+0x4c0>
		ticker_job_list_insert(instance, insert_head);
   18ef4:	9c00      	ldr	r4, [sp, #0]
   18ef6:	9903      	ldr	r1, [sp, #12]
   18ef8:	4620      	mov	r0, r4
   18efa:	f7ff fb97 	bl	1862c <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   18efe:	7f63      	ldrb	r3, [r4, #29]
   18f00:	9301      	str	r3, [sp, #4]
   18f02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f04:	9a01      	ldr	r2, [sp, #4]
   18f06:	4293      	cmp	r3, r2
   18f08:	f000 826d 	beq.w	193e6 <ticker_job+0x8d2>
	if (!pending) {
   18f0c:	9b08      	ldr	r3, [sp, #32]
   18f0e:	2b00      	cmp	r3, #0
   18f10:	f000 81d8 	beq.w	192c4 <ticker_job+0x7b0>
	if (instance->ticker_id_head == TICKER_NULL) {
   18f14:	9b00      	ldr	r3, [sp, #0]
   18f16:	7f5b      	ldrb	r3, [r3, #29]
   18f18:	9301      	str	r3, [sp, #4]
   18f1a:	9b01      	ldr	r3, [sp, #4]
   18f1c:	2bff      	cmp	r3, #255	; 0xff
   18f1e:	f000 82c5 	beq.w	194ac <ticker_job+0x998>
	if (ticker_id_old_head == TICKER_NULL) {
   18f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   18f24:	2bff      	cmp	r3, #255	; 0xff
   18f26:	f000 82cb 	beq.w	194c0 <ticker_job+0x9ac>
	ticks_to_expire = ticker->ticks_to_expire;
   18f2a:	f8dd a000 	ldr.w	sl, [sp]
	ticker = &instance->nodes[instance->ticker_id_head];
   18f2e:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
   18f30:	f8da 3000 	ldr.w	r3, [sl]
		LL_ASSERT(i);
   18f34:	f8df 9088 	ldr.w	r9, [pc, #136]	; 18fc0 <ticker_job+0x4ac>
   18f38:	f8df 8088 	ldr.w	r8, [pc, #136]	; 18fc4 <ticker_job+0x4b0>
   18f3c:	4f22      	ldr	r7, [pc, #136]	; (18fc8 <ticker_job+0x4b4>)
	ticker = &instance->nodes[instance->ticker_id_head];
   18f3e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   18f42:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   18f46:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   18f48:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   18f4a:	f00b fcf1 	bl	24930 <cntr_cnt_get>
		cc = instance->ticks_current;
   18f4e:	f8da 4014 	ldr.w	r4, [sl, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18f52:	1b03      	subs	r3, r0, r4
   18f54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   18f58:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   18f5a:	42b3      	cmp	r3, r6
   18f5c:	bf2c      	ite	cs
   18f5e:	18e4      	addcs	r4, r4, r3
   18f60:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   18f62:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   18f66:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		ctr = cntr_cnt_get();
   18f6a:	4683      	mov	fp, r0
		instance->trigger_set_cb(cc);
   18f6c:	4620      	mov	r0, r4
   18f6e:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   18f70:	f00b fcde 	bl	24930 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18f74:	eba0 020b 	sub.w	r2, r0, fp
   18f78:	eba4 030b 	sub.w	r3, r4, fp
   18f7c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   18f80:	3203      	adds	r2, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18f82:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   18f86:	429a      	cmp	r2, r3
		i--;
   18f88:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
   18f8c:	f240 8232 	bls.w	193f4 <ticker_job+0x8e0>
		LL_ASSERT(i);
   18f90:	2d00      	cmp	r5, #0
   18f92:	d1da      	bne.n	18f4a <ticker_job+0x436>
   18f94:	f640 03f3 	movw	r3, #2291	; 0x8f3
   18f98:	464a      	mov	r2, r9
   18f9a:	4641      	mov	r1, r8
   18f9c:	4638      	mov	r0, r7
   18f9e:	f00e fdd0 	bl	27b42 <printk>
   18fa2:	4040      	eors	r0, r0
   18fa4:	f380 8811 	msr	BASEPRI, r0
   18fa8:	f04f 0003 	mov.w	r0, #3
   18fac:	df02      	svc	2
   18fae:	e7cc      	b.n	18f4a <ticker_job+0x436>
		if (current == id) {
   18fb0:	4681      	mov	r9, r0
	total = 0U;
   18fb2:	2500      	movs	r5, #0
   18fb4:	e75f      	b.n	18e76 <ticker_job+0x362>
   18fb6:	bf00      	nop
   18fb8:	ff172b5a 	.word	0xff172b5a
   18fbc:	7f172b59 	.word	0x7f172b59
   18fc0:	0002b89c 	.word	0x0002b89c
   18fc4:	0002b9a0 	.word	0x0002b9a0
   18fc8:	0002b8dc 	.word	0x0002b8dc
	pending = 0U;
   18fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18fce:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
   18fd0:	23ff      	movs	r3, #255	; 0xff
   18fd2:	9303      	str	r3, [sp, #12]
	ticks_now = cntr_cnt_get();
   18fd4:	f00b fcac 	bl	24930 <cntr_cnt_get>
	while (instance->ticker_id_head != TICKER_NULL) {
   18fd8:	9d00      	ldr	r5, [sp, #0]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18fda:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
   18fdc:	7f6e      	ldrb	r6, [r5, #29]
	node = &instance->nodes[0];
   18fde:	f8d5 8000 	ldr.w	r8, [r5]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18fe2:	1ac3      	subs	r3, r0, r3
   18fe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   18fe8:	2eff      	cmp	r6, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   18fea:	9302      	str	r3, [sp, #8]
	while (instance->ticker_id_head != TICKER_NULL) {
   18fec:	d04a      	beq.n	19084 <ticker_job+0x570>
	if ((ticker->remainder_current < BIT(31)) &&
   18fee:	f8df b264 	ldr.w	fp, [pc, #612]	; 19254 <ticker_job+0x740>
   18ff2:	f8df a264 	ldr.w	sl, [pc, #612]	; 19258 <ticker_job+0x744>
	while (instance->ticker_id_head != TICKER_NULL) {
   18ff6:	9f04      	ldr	r7, [sp, #16]
	ticks_expired = 0U;
   18ff8:	f04f 0900 	mov.w	r9, #0
		ticker = &node[id_expired];
   18ffc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   19000:	eb08 1403 	add.w	r4, r8, r3, lsl #4
   19004:	011b      	lsls	r3, r3, #4
   19006:	9301      	str	r3, [sp, #4]
		ticks_to_expire = ticker->ticks_to_expire;
   19008:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1900a:	42bb      	cmp	r3, r7
   1900c:	f200 8242 	bhi.w	19494 <ticker_job+0x980>
		ticks_latency -= ticks_to_expire;
   19010:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   19012:	8be1      	ldrh	r1, [r4, #30]
   19014:	9105      	str	r1, [sp, #20]
		ticks_latency -= ticks_to_expire;
   19016:	1ad2      	subs	r2, r2, r3
   19018:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1901a:	69aa      	ldr	r2, [r5, #24]
   1901c:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   1901e:	eba7 0703 	sub.w	r7, r7, r3
		ticks_expired += ticks_to_expire;
   19022:	4499      	add	r9, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   19024:	bf25      	ittet	cs
   19026:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
   1902a:	772b      	strbcs	r3, [r5, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   1902c:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   1902e:	2300      	movcs	r3, #0
   19030:	61ab      	str	r3, [r5, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   19032:	78a2      	ldrb	r2, [r4, #2]
   19034:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   19036:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   19038:	1a9b      	subs	r3, r3, r2
   1903a:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1903c:	b111      	cbz	r1, 19044 <ticker_job+0x530>
   1903e:	2b02      	cmp	r3, #2
   19040:	f000 812d 	beq.w	1929e <ticker_job+0x78a>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   19044:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
   19046:	2100      	movs	r1, #0
   19048:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1904a:	9901      	ldr	r1, [sp, #4]
   1904c:	f818 1001 	ldrb.w	r1, [r8, r1]
   19050:	7769      	strb	r1, [r5, #29]
		if ((ticker->ticks_periodic != 0U) ||
   19052:	f8d4 c004 	ldr.w	ip, [r4, #4]
   19056:	f1bc 0f00 	cmp.w	ip, #0
   1905a:	f040 80e9 	bne.w	19230 <ticker_job+0x71c>
   1905e:	b110      	cbz	r0, 19066 <ticker_job+0x552>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   19060:	7a01      	ldrb	r1, [r0, #8]
   19062:	2901      	cmp	r1, #1
   19064:	d04e      	beq.n	19104 <ticker_job+0x5f0>
			if (state && ((state == 1U) || skip_collision) &&
   19066:	b14b      	cbz	r3, 1907c <ticker_job+0x568>
   19068:	2b01      	cmp	r3, #1
   1906a:	d001      	beq.n	19070 <ticker_job+0x55c>
   1906c:	9b05      	ldr	r3, [sp, #20]
   1906e:	b12b      	cbz	r3, 1907c <ticker_job+0x568>
			    ticker->fp_op_func) {
   19070:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   19072:	b11b      	cbz	r3, 1907c <ticker_job+0x568>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   19074:	6a61      	ldr	r1, [r4, #36]	; 0x24
   19076:	2001      	movs	r0, #1
   19078:	4798      	blx	r3
			ticker->req = ticker->ack;
   1907a:	78a2      	ldrb	r2, [r4, #2]
   1907c:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1907e:	7f6e      	ldrb	r6, [r5, #29]
   19080:	2eff      	cmp	r6, #255	; 0xff
   19082:	d1bb      	bne.n	18ffc <ticker_job+0x4e8>
			flag_compare_update = 1U;
   19084:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   19088:	9c00      	ldr	r4, [sp, #0]
   1908a:	9903      	ldr	r1, [sp, #12]
			flag_compare_update = 1U;
   1908c:	4296      	cmp	r6, r2
   1908e:	bf18      	it	ne
   19090:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   19092:	4620      	mov	r0, r4
			flag_compare_update = 1U;
   19094:	9309      	str	r3, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
   19096:	f7ff fac9 	bl	1862c <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   1909a:	7f63      	ldrb	r3, [r4, #29]
	nodes = &instance->nodes[0];
   1909c:	6821      	ldr	r1, [r4, #0]
		ticker_id_head = instance->ticker_id_head;
   1909e:	9301      	str	r3, [sp, #4]
	uint8_t  rescheduled = 0U;
   190a0:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   190a2:	9b01      	ldr	r3, [sp, #4]
   190a4:	2bff      	cmp	r3, #255	; 0xff
   190a6:	d00e      	beq.n	190c6 <ticker_job+0x5b2>
   190a8:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
   190aa:	b23b      	sxth	r3, r7
   190ac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   190b0:	eb01 1603 	add.w	r6, r1, r3, lsl #4
   190b4:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   190b6:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   190b8:	b110      	cbz	r0, 190c0 <ticker_job+0x5ac>
   190ba:	7a04      	ldrb	r4, [r0, #8]
   190bc:	2c01      	cmp	r4, #1
   190be:	d037      	beq.n	19130 <ticker_job+0x61c>
			ticker_id_head = ticker->next;
   190c0:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
   190c2:	2fff      	cmp	r7, #255	; 0xff
   190c4:	d1f1      	bne.n	190aa <ticker_job+0x596>
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   190c6:	2a00      	cmp	r2, #0
   190c8:	f43f af1b 	beq.w	18f02 <ticker_job+0x3ee>
	if (instance->ticker_id_head != ticker_id_old_head) {
   190cc:	9b01      	ldr	r3, [sp, #4]
   190ce:	990a      	ldr	r1, [sp, #40]	; 0x28
   190d0:	428b      	cmp	r3, r1
   190d2:	f47f af1b 	bne.w	18f0c <ticker_job+0x3f8>
	if (!pending) {
   190d6:	9b08      	ldr	r3, [sp, #32]
   190d8:	2b00      	cmp	r3, #0
   190da:	f47f af1e 	bne.w	18f1a <ticker_job+0x406>
	users = &instance->users[0];
   190de:	9b00      	ldr	r3, [sp, #0]
   190e0:	685e      	ldr	r6, [r3, #4]
	count_user = instance->count_user;
   190e2:	7a5b      	ldrb	r3, [r3, #9]
	while (count_user--) {
   190e4:	1e5c      	subs	r4, r3, #1
   190e6:	b2e4      	uxtb	r4, r4
   190e8:	2b00      	cmp	r3, #0
   190ea:	f43f af16 	beq.w	18f1a <ticker_job+0x406>
			flag_compare_update = 1U;
   190ee:	9209      	str	r2, [sp, #36]	; 0x24
   190f0:	e0f2      	b.n	192d8 <ticker_job+0x7c4>
		ticker->ticks_to_expire = 0U;
   190f2:	9905      	ldr	r1, [sp, #20]
   190f4:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   190f6:	9901      	ldr	r1, [sp, #4]
   190f8:	f818 1001 	ldrb.w	r1, [r8, r1]
   190fc:	7769      	strb	r1, [r5, #29]
		if ((ticker->ticks_periodic != 0U) ||
   190fe:	6861      	ldr	r1, [r4, #4]
   19100:	2900      	cmp	r1, #0
   19102:	d0ad      	beq.n	19060 <ticker_job+0x54c>
				ticker->req = ticker->ack;
   19104:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   19106:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   19108:	9b07      	ldr	r3, [sp, #28]
   1910a:	6969      	ldr	r1, [r5, #20]
   1910c:	eb03 0209 	add.w	r2, r3, r9
   19110:	4620      	mov	r0, r4
   19112:	f7ff fa67 	bl	185e4 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   19116:	9a01      	ldr	r2, [sp, #4]
   19118:	9b03      	ldr	r3, [sp, #12]
   1911a:	f808 3002 	strb.w	r3, [r8, r2]
			ticker->req++;
   1911e:	7863      	ldrb	r3, [r4, #1]
   19120:	9603      	str	r6, [sp, #12]
   19122:	3301      	adds	r3, #1
   19124:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   19126:	7f6e      	ldrb	r6, [r5, #29]
   19128:	2eff      	cmp	r6, #255	; 0xff
   1912a:	f47f af67 	bne.w	18ffc <ticker_job+0x4e8>
   1912e:	e7a9      	b.n	19084 <ticker_job+0x570>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   19130:	9b00      	ldr	r3, [sp, #0]
   19132:	7f1b      	ldrb	r3, [r3, #28]
   19134:	2bff      	cmp	r3, #255	; 0xff
   19136:	4686      	mov	lr, r0
   19138:	d044      	beq.n	191c4 <ticker_job+0x6b0>
			instance->ticks_slot_previous > ticks_elapsed) {
   1913a:	9b00      	ldr	r3, [sp, #0]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   1913c:	9a04      	ldr	r2, [sp, #16]
			instance->ticks_slot_previous > ticks_elapsed) {
   1913e:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   19140:	4293      	cmp	r3, r2
   19142:	d93f      	bls.n	191c4 <ticker_job+0x6b0>
			window_start_ticks = instance->ticks_slot_previous -
   19144:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   19148:	e9de 2300 	ldrd	r2, r3, [lr]
   1914c:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   1914e:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   19152:	d23f      	bcs.n	191d4 <ticker_job+0x6c0>
		while (ticker_id_iter != TICKER_NULL &&
   19154:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   19158:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
   1915c:	d03a      	beq.n	191d4 <ticker_job+0x6c0>
		       ticks_start_offset + ticker->ticks_slot <=
   1915e:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
   19162:	45c1      	cmp	r9, r8
   19164:	f04f 0300 	mov.w	r3, #0
   19168:	d337      	bcc.n	191da <ticker_job+0x6c6>
   1916a:	46c2      	mov	sl, r8
   1916c:	465a      	mov	r2, fp
   1916e:	461d      	mov	r5, r3
   19170:	e01b      	b.n	191aa <ticker_job+0x696>
			if (node->ticks_to_expire >
   19172:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
   19174:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   19176:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   19178:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   1917a:	d909      	bls.n	19190 <ticker_job+0x67c>
				window_end_ticks =
   1917c:	454b      	cmp	r3, r9
   1917e:	bf28      	it	cs
   19180:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
   19182:	4553      	cmp	r3, sl
   19184:	d904      	bls.n	19190 <ticker_job+0x67c>
			if (ticks_to_expire != 0U &&
   19186:	ebb3 0308 	subs.w	r3, r3, r8
   1918a:	d001      	beq.n	19190 <ticker_job+0x67c>
   1918c:	459c      	cmp	ip, r3
   1918e:	d924      	bls.n	191da <ticker_job+0x6c6>
			window_start_ticks  = node->ticks_to_expire +
   19190:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
   19192:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
   19194:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
   19198:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
   1919a:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
   1919e:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   191a0:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
   191a4:	d019      	beq.n	191da <ticker_job+0x6c6>
   191a6:	45d1      	cmp	r9, sl
   191a8:	d317      	bcc.n	191da <ticker_job+0x6c6>
			node = &nodes[ticker_id_iter];
   191aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   191ae:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   191b2:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   191b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   191b6:	2800      	cmp	r0, #0
   191b8:	d0db      	beq.n	19172 <ticker_job+0x65e>
   191ba:	7a00      	ldrb	r0, [r0, #8]
   191bc:	2801      	cmp	r0, #1
   191be:	d1d8      	bne.n	19172 <ticker_job+0x65e>
				ticker_id_iter = node->next;
   191c0:	5c8a      	ldrb	r2, [r1, r2]
				continue;
   191c2:	e7ec      	b.n	1919e <ticker_job+0x68a>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   191c4:	e9de 2300 	ldrd	r2, r3, [lr]
   191c8:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   191ca:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
   191ce:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   191d2:	d3bf      	bcc.n	19154 <ticker_job+0x640>
		ticker->ticks_to_expire = ticks_to_expire;
   191d4:	2300      	movs	r3, #0
   191d6:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
   191d8:	e021      	b.n	1921e <ticker_job+0x70a>
		ticker->ticks_to_expire = ticks_to_expire;
   191da:	60b3      	str	r3, [r6, #8]
   191dc:	465d      	mov	r5, fp
   191de:	f04f 08ff 	mov.w	r8, #255	; 0xff
   191e2:	e000      	b.n	191e6 <ticker_job+0x6d2>
   191e4:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   191e6:	b228      	sxth	r0, r5
   191e8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   191ec:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
   191f0:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   191f2:	f8dc 4008 	ldr.w	r4, [ip, #8]
   191f6:	429c      	cmp	r4, r3
   191f8:	f080 8142 	bcs.w	19480 <ticker_job+0x96c>
				ticker->ticks_to_expire -=
   191fc:	1b1b      	subs	r3, r3, r4
   191fe:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
   19200:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
   19202:	2aff      	cmp	r2, #255	; 0xff
   19204:	46a8      	mov	r8, r5
   19206:	d1ed      	bne.n	191e4 <ticker_job+0x6d0>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   19208:	9a00      	ldr	r2, [sp, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   1920a:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1920e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   19212:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   19214:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   19218:	5cca      	ldrb	r2, [r1, r3]
   1921a:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   1921c:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
   1921e:	8bf3      	ldrh	r3, [r6, #30]
   19220:	3b01      	subs	r3, #1
   19222:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
   19224:	f04f 0302 	mov.w	r3, #2
   19228:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
   1922c:	2201      	movs	r2, #1
   1922e:	e738      	b.n	190a2 <ticker_job+0x58e>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   19230:	b118      	cbz	r0, 1923a <ticker_job+0x726>
   19232:	7a03      	ldrb	r3, [r0, #8]
   19234:	2b01      	cmp	r3, #1
   19236:	f43f af65 	beq.w	19104 <ticker_job+0x5f0>
				if (!ticker->lazy_current) {
   1923a:	9b05      	ldr	r3, [sp, #20]
   1923c:	2b00      	cmp	r3, #0
   1923e:	d13d      	bne.n	192bc <ticker_job+0x7a8>
					lazy_periodic = ticker->lazy_periodic;
   19240:	8ba3      	ldrh	r3, [r4, #28]
   19242:	930b      	str	r3, [sp, #44]	; 0x2c
   19244:	461a      	mov	r2, r3
				while (count--) {
   19246:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1924a:	e9d4 e308 	ldrd	lr, r3, [r4, #32]
				ticks_to_expire = 0U;
   1924e:	2100      	movs	r1, #0
   19250:	9006      	str	r0, [sp, #24]
   19252:	e008      	b.n	19266 <ticker_job+0x752>
   19254:	ff172b5a 	.word	0xff172b5a
   19258:	7f172b59 	.word	0x7f172b59
   1925c:	4660      	mov	r0, ip
				while (count--) {
   1925e:	3a01      	subs	r2, #1
					ticks_to_expire +=
   19260:	4401      	add	r1, r0
				while (count--) {
   19262:	1c50      	adds	r0, r2, #1
   19264:	d00f      	beq.n	19286 <ticker_job+0x772>
	ticker->remainder_current += ticker->remainder_periodic;
   19266:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
   19268:	eb03 000b 	add.w	r0, r3, fp
   1926c:	4550      	cmp	r0, sl
   1926e:	d8f5      	bhi.n	1925c <ticker_job+0x748>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19270:	9806      	ldr	r0, [sp, #24]
   19272:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   19276:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19278:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   1927c:	4401      	add	r1, r0
				while (count--) {
   1927e:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19280:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   19284:	d1ef      	bne.n	19266 <ticker_job+0x752>
				} else if (!ticker->must_expire) {
   19286:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1928a:	6263      	str	r3, [r4, #36]	; 0x24
   1928c:	2a00      	cmp	r2, #0
   1928e:	f000 80bd 	beq.w	1940c <ticker_job+0x8f8>
				ticker->lazy_current += (lazy_periodic + lazy);
   19292:	9b05      	ldr	r3, [sp, #20]
   19294:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
				ticker->ticks_to_expire = ticks_to_expire;
   19296:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   19298:	4413      	add	r3, r2
   1929a:	83e3      	strh	r3, [r4, #30]
   1929c:	e734      	b.n	19108 <ticker_job+0x5f4>
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1929e:	9805      	ldr	r0, [sp, #20]
   192a0:	2800      	cmp	r0, #0
   192a2:	f47f aecf 	bne.w	19044 <ticker_job+0x530>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   192a6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   192a8:	b128      	cbz	r0, 192b6 <ticker_job+0x7a2>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   192aa:	f890 c008 	ldrb.w	ip, [r0, #8]
   192ae:	f1bc 0f01 	cmp.w	ip, #1
   192b2:	f43f af1e 	beq.w	190f2 <ticker_job+0x5de>
			instance->ticks_slot_previous = ticker->ticks_slot;
   192b6:	61a9      	str	r1, [r5, #24]
			instance->ticker_id_slot_previous = id_expired;
   192b8:	772e      	strb	r6, [r5, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   192ba:	e6c4      	b.n	19046 <ticker_job+0x532>
					ticker->req = ticker->ack;
   192bc:	7062      	strb	r2, [r4, #1]
   192be:	2200      	movs	r2, #0
					lazy_periodic = 0U;
   192c0:	920b      	str	r2, [sp, #44]	; 0x2c
   192c2:	e7c0      	b.n	19246 <ticker_job+0x732>
	count_user = instance->count_user;
   192c4:	9a00      	ldr	r2, [sp, #0]
   192c6:	7a53      	ldrb	r3, [r2, #9]
	users = &instance->users[0];
   192c8:	6856      	ldr	r6, [r2, #4]
	while (count_user--) {
   192ca:	1e5c      	subs	r4, r3, #1
   192cc:	b2e4      	uxtb	r4, r4
   192ce:	2b00      	cmp	r3, #0
   192d0:	f43f ae20 	beq.w	18f14 <ticker_job+0x400>
		flag_compare_update = 1U;
   192d4:	2301      	movs	r3, #1
   192d6:	9309      	str	r3, [sp, #36]	; 0x24
   192d8:	f8dd 8000 	ldr.w	r8, [sp]
   192dc:	9601      	str	r6, [sp, #4]
   192de:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   192e2:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   192e4:	f04f 0b01 	mov.w	fp, #1
		while (user->first != user->last) {
   192e8:	7863      	ldrb	r3, [r4, #1]
   192ea:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
   192ec:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
   192ee:	429a      	cmp	r2, r3
   192f0:	d10c      	bne.n	1930c <ticker_job+0x7f8>
   192f2:	e068      	b.n	193c6 <ticker_job+0x8b2>
	switch (uop->op) {
   192f4:	2b01      	cmp	r3, #1
   192f6:	d05e      	beq.n	193b6 <ticker_job+0x8a2>
			first = user->first + 1;
   192f8:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   192fa:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
   192fc:	3301      	adds	r3, #1
   192fe:	b2db      	uxtb	r3, r3
				first = 0U;
   19300:	4299      	cmp	r1, r3
   19302:	bf08      	it	eq
   19304:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   19306:	429a      	cmp	r2, r3
			user->first = first;
   19308:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   1930a:	d05c      	beq.n	193c6 <ticker_job+0x8b2>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1930c:	b21b      	sxth	r3, r3
   1930e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   19312:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   19316:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
   1931a:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1931e:	2b02      	cmp	r3, #2
   19320:	d01d      	beq.n	1935e <ticker_job+0x84a>
   19322:	2b03      	cmp	r3, #3
   19324:	d1e6      	bne.n	192f4 <ticker_job+0x7e0>
		if (uop->id < instance->count_node) {
   19326:	f89c 3001 	ldrb.w	r3, [ip, #1]
   1932a:	f898 2008 	ldrb.w	r2, [r8, #8]
   1932e:	429a      	cmp	r2, r3
   19330:	d946      	bls.n	193c0 <ticker_job+0x8ac>
			node[uop->id].priority =
   19332:	f8d8 2000 	ldr.w	r2, [r8]
   19336:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1933a:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1933e:	f89c 2004 	ldrb.w	r2, [ip, #4]
   19342:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   19346:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   1934a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
   1934e:	b123      	cbz	r3, 1935a <ticker_job+0x846>
		fp_op_func(uop->status, uop->op_context);
   19350:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   19354:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   19358:	4798      	blx	r3
   1935a:	78e2      	ldrb	r2, [r4, #3]
   1935c:	e7cc      	b.n	192f8 <ticker_job+0x7e4>
		ticker_by_next_slot_get(instance,
   1935e:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   19362:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   19366:	f8dc 900c 	ldr.w	r9, [ip, #12]
	node = instance->nodes;
   1936a:	f8d8 0000 	ldr.w	r0, [r8]
	    (*ticks_current != instance->ticks_current)) {
   1936e:	f8d8 6014 	ldr.w	r6, [r8, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   19372:	2aff      	cmp	r2, #255	; 0xff
   19374:	d002      	beq.n	1937c <ticker_job+0x868>
   19376:	680b      	ldr	r3, [r1, #0]
   19378:	42b3      	cmp	r3, r6
   1937a:	d02d      	beq.n	193d8 <ticker_job+0x8c4>
		_ticker_id_head = instance->ticker_id_head;
   1937c:	f898 201d 	ldrb.w	r2, [r8, #29]
		*ticks_current = instance->ticks_current;
   19380:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
   19382:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   19384:	2aff      	cmp	r2, #255	; 0xff
   19386:	bf18      	it	ne
   19388:	46a2      	movne	sl, r4
   1938a:	d105      	bne.n	19398 <ticker_job+0x884>
   1938c:	e00f      	b.n	193ae <ticker_job+0x89a>
		_ticker_id_head = ticker->next;
   1938e:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   19390:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   19392:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   19394:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
   19396:	d01d      	beq.n	193d4 <ticker_job+0x8c0>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   19398:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1939c:	eb00 1103 	add.w	r1, r0, r3, lsl #4
   193a0:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   193a2:	698c      	ldr	r4, [r1, #24]
   193a4:	2c00      	cmp	r4, #0
   193a6:	d0f2      	beq.n	1938e <ticker_job+0x87a>
		_ticks_to_expire += ticker->ticks_to_expire;
   193a8:	688b      	ldr	r3, [r1, #8]
   193aa:	4654      	mov	r4, sl
   193ac:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
   193ae:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   193b2:	f8c9 6000 	str.w	r6, [r9]
		fp_op_func = uop->fp_op_func;
   193b6:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   193ba:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
   193be:	e7c6      	b.n	1934e <ticker_job+0x83a>
			uop->status = TICKER_STATUS_FAILURE;
   193c0:	f8cc b028 	str.w	fp, [ip, #40]	; 0x28
   193c4:	e7c1      	b.n	1934a <ticker_job+0x836>
	while (count_user--) {
   193c6:	9a01      	ldr	r2, [sp, #4]
   193c8:	42a2      	cmp	r2, r4
   193ca:	f1a4 0308 	sub.w	r3, r4, #8
   193ce:	d00d      	beq.n	193ec <ticker_job+0x8d8>
   193d0:	461c      	mov	r4, r3
   193d2:	e789      	b.n	192e8 <ticker_job+0x7d4>
   193d4:	4654      	mov	r4, sl
   193d6:	e7ea      	b.n	193ae <ticker_job+0x89a>
		ticker = &node[_ticker_id_head];
   193d8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   193dc:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   193de:	f8d9 6000 	ldr.w	r6, [r9]
		_ticker_id_head = ticker->next;
   193e2:	5cc2      	ldrb	r2, [r0, r3]
   193e4:	e7ce      	b.n	19384 <ticker_job+0x870>
	if (!pending) {
   193e6:	9b08      	ldr	r3, [sp, #32]
   193e8:	2b00      	cmp	r3, #0
   193ea:	d056      	beq.n	1949a <ticker_job+0x986>
	if (flag_compare_update) {
   193ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   193ee:	2b00      	cmp	r3, #0
   193f0:	f47f ad90 	bne.w	18f14 <ticker_job+0x400>
	if (instance->worker_trigger) {
   193f4:	9900      	ldr	r1, [sp, #0]
   193f6:	7fcb      	ldrb	r3, [r1, #31]
	instance->job_guard = 0U;
   193f8:	2200      	movs	r2, #0
   193fa:	778a      	strb	r2, [r1, #30]
	if (instance->worker_trigger) {
   193fc:	2b00      	cmp	r3, #0
   193fe:	f43f ac39 	beq.w	18c74 <ticker_job+0x160>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   19402:	6a4c      	ldr	r4, [r1, #36]	; 0x24
   19404:	460b      	mov	r3, r1
   19406:	2201      	movs	r2, #1
   19408:	2103      	movs	r1, #3
   1940a:	e43a      	b.n	18c82 <ticker_job+0x16e>
					while (ticks_to_expire <
   1940c:	9802      	ldr	r0, [sp, #8]
   1940e:	4288      	cmp	r0, r1
   19410:	f67f af3f 	bls.w	19292 <ticker_job+0x77e>
   19414:	f10c 0001 	add.w	r0, ip, #1
   19418:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   1941c:	9006      	str	r0, [sp, #24]
   1941e:	f8dd 8008 	ldr.w	r8, [sp, #8]
   19422:	e005      	b.n	19430 <ticker_job+0x91c>
   19424:	4660      	mov	r0, ip
						ticks_to_expire +=
   19426:	4401      	add	r1, r0
						lazy++;
   19428:	3201      	adds	r2, #1
					while (ticks_to_expire <
   1942a:	4588      	cmp	r8, r1
						lazy++;
   1942c:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1942e:	d910      	bls.n	19452 <ticker_job+0x93e>
	ticker->remainder_current += ticker->remainder_periodic;
   19430:	4473      	add	r3, lr
	if ((ticker->remainder_current < BIT(31)) &&
   19432:	eb03 000b 	add.w	r0, r3, fp
   19436:	4550      	cmp	r0, sl
   19438:	d8f4      	bhi.n	19424 <ticker_job+0x910>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1943a:	9806      	ldr	r0, [sp, #24]
   1943c:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   19440:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   19442:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   19446:	3201      	adds	r2, #1
					while (ticks_to_expire <
   19448:	4588      	cmp	r8, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1944a:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   1944e:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   19450:	d8ee      	bhi.n	19430 <ticker_job+0x91c>
				ticker->lazy_current += (lazy_periodic + lazy);
   19452:	e9dd 080b 	ldrd	r0, r8, [sp, #44]	; 0x2c
   19456:	4410      	add	r0, r2
   19458:	6263      	str	r3, [r4, #36]	; 0x24
   1945a:	b283      	uxth	r3, r0
   1945c:	930b      	str	r3, [sp, #44]	; 0x2c
   1945e:	e718      	b.n	19292 <ticker_job+0x77e>
	ticker_id_old_head = instance->ticker_id_head;
   19460:	9b00      	ldr	r3, [sp, #0]
   19462:	7f59      	ldrb	r1, [r3, #29]
   19464:	910a      	str	r1, [sp, #40]	; 0x28
	node = &instance->nodes[0];
   19466:	6819      	ldr	r1, [r3, #0]
   19468:	9102      	str	r1, [sp, #8]
	count_user = instance->count_user;
   1946a:	7a59      	ldrb	r1, [r3, #9]
	users = &instance->users[0];
   1946c:	685b      	ldr	r3, [r3, #4]
   1946e:	9305      	str	r3, [sp, #20]
	while (count_user--) {
   19470:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   19472:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
   19474:	b2db      	uxtb	r3, r3
   19476:	b369      	cbz	r1, 194d4 <ticker_job+0x9c0>
		flag_elapsed = 0U;
   19478:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1947a:	9204      	str	r2, [sp, #16]
   1947c:	f7ff bb7f 	b.w	18b7e <ticker_job+0x6a>
				node->ticks_to_expire -=
   19480:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
   19482:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
   19486:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   1948a:	f43f aec8 	beq.w	1921e <ticker_job+0x70a>
   1948e:	fa0f f088 	sxth.w	r0, r8
   19492:	e6b9      	b.n	19208 <ticker_job+0x6f4>
			ticker->ticks_to_expire -= ticks_elapsed;
   19494:	1bdb      	subs	r3, r3, r7
   19496:	60a3      	str	r3, [r4, #8]
			break;
   19498:	e5f4      	b.n	19084 <ticker_job+0x570>
	count_user = instance->count_user;
   1949a:	9a00      	ldr	r2, [sp, #0]
   1949c:	7a53      	ldrb	r3, [r2, #9]
	users = &instance->users[0];
   1949e:	6856      	ldr	r6, [r2, #4]
	while (count_user--) {
   194a0:	1e5c      	subs	r4, r3, #1
   194a2:	b2e4      	uxtb	r4, r4
   194a4:	2b00      	cmp	r3, #0
   194a6:	f47f af17 	bne.w	192d8 <ticker_job+0x7c4>
   194aa:	e79f      	b.n	193ec <ticker_job+0x8d8>
		if (cntr_stop() == 0) {
   194ac:	f00b fa1a 	bl	248e4 <cntr_stop>
   194b0:	2800      	cmp	r0, #0
   194b2:	d19f      	bne.n	193f4 <ticker_job+0x8e0>
			instance->ticks_slot_previous = 0U;
   194b4:	9c00      	ldr	r4, [sp, #0]
   194b6:	61a0      	str	r0, [r4, #24]
			instance->ticks_current = cntr_cnt_get();
   194b8:	f00b fa3a 	bl	24930 <cntr_cnt_get>
   194bc:	6160      	str	r0, [r4, #20]
   194be:	e799      	b.n	193f4 <ticker_job+0x8e0>
		ticks_current = cntr_cnt_get();
   194c0:	f00b fa36 	bl	24930 <cntr_cnt_get>
   194c4:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   194c6:	f00b f9fd 	bl	248c4 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   194ca:	9b00      	ldr	r3, [sp, #0]
		if (cntr_start() == 0) {
   194cc:	b130      	cbz	r0, 194dc <ticker_job+0x9c8>
	ticker = &instance->nodes[instance->ticker_id_head];
   194ce:	7f5b      	ldrb	r3, [r3, #29]
   194d0:	9301      	str	r3, [sp, #4]
   194d2:	e52a      	b.n	18f2a <ticker_job+0x416>
	insert_head = TICKER_NULL;
   194d4:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   194d6:	9108      	str	r1, [sp, #32]
	insert_head = TICKER_NULL;
   194d8:	9303      	str	r3, [sp, #12]
   194da:	e50b      	b.n	18ef4 <ticker_job+0x3e0>
	ticker = &instance->nodes[instance->ticker_id_head];
   194dc:	7f5a      	ldrb	r2, [r3, #29]
   194de:	9201      	str	r2, [sp, #4]
			instance->ticks_current = ticks_current;
   194e0:	615c      	str	r4, [r3, #20]
   194e2:	e522      	b.n	18f2a <ticker_job+0x416>

000194e4 <ticker_init>:
{
   194e4:	b4f0      	push	{r4, r5, r6, r7}
   194e6:	9d04      	ldr	r5, [sp, #16]
   194e8:	f89d 7014 	ldrb.w	r7, [sp, #20]
   194ec:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   194ee:	2800      	cmp	r0, #0
   194f0:	d137      	bne.n	19562 <ticker_init+0x7e>
	instance->count_node = count_node;
   194f2:	4e1d      	ldr	r6, [pc, #116]	; (19568 <ticker_init+0x84>)
	while (count_node--) {
   194f4:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
   194f8:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   194fa:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   194fc:	fa5f fc8c 	uxtb.w	ip, ip
   19500:	b149      	cbz	r1, 19516 <ticker_init+0x32>
   19502:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   19506:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   1950a:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   1950c:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   19510:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   19514:	d1f9      	bne.n	1950a <ticker_init+0x26>
	while (count_user--) {
   19516:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   19518:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   1951a:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   1951c:	b2d2      	uxtb	r2, r2
   1951e:	b183      	cbz	r3, 19542 <ticker_init+0x5e>
   19520:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   19524:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   19526:	4610      	mov	r0, r2
   19528:	f812 3908 	ldrb.w	r3, [r2], #-8
   1952c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   19530:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   19534:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   19536:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   1953a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   1953e:	b2df      	uxtb	r7, r3
	while (count_user--) {
   19540:	d1f0      	bne.n	19524 <ticker_init+0x40>
	if (count_op) {
   19542:	b977      	cbnz	r7, 19562 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   19544:	9a07      	ldr	r2, [sp, #28]
   19546:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   19548:	9a08      	ldr	r2, [sp, #32]
   1954a:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   1954c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   19550:	9a09      	ldr	r2, [sp, #36]	; 0x24
   19552:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   19554:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   19556:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1955a:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   1955c:	8177      	strh	r7, [r6, #10]
}
   1955e:	bcf0      	pop	{r4, r5, r6, r7}
   19560:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   19562:	2001      	movs	r0, #1
}
   19564:	bcf0      	pop	{r4, r5, r6, r7}
   19566:	4770      	bx	lr
   19568:	20001460 	.word	0x20001460

0001956c <ticker_trigger>:
	if (instance->sched_cb) {
   1956c:	4b0a      	ldr	r3, [pc, #40]	; (19598 <ticker_trigger+0x2c>)
   1956e:	222c      	movs	r2, #44	; 0x2c
   19570:	fb02 3200 	mla	r2, r2, r0, r3
{
   19574:	b410      	push	{r4}
	if (instance->sched_cb) {
   19576:	6a54      	ldr	r4, [r2, #36]	; 0x24
   19578:	b15c      	cbz	r4, 19592 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   1957a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1957e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   19582:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   19586:	46a4      	mov	ip, r4
   19588:	2201      	movs	r2, #1
}
   1958a:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1958c:	2103      	movs	r1, #3
   1958e:	2002      	movs	r0, #2
   19590:	4760      	bx	ip
}
   19592:	bc10      	pop	{r4}
   19594:	4770      	bx	lr
   19596:	bf00      	nop
   19598:	20001460 	.word	0x20001460

0001959c <ticker_start_ext>:
{
   1959c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   195a0:	4e28      	ldr	r6, [pc, #160]	; (19644 <ticker_start_ext+0xa8>)
{
   195a2:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   195a6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   195a8:	252c      	movs	r5, #44	; 0x2c
   195aa:	fb05 6504 	mla	r5, r5, r4, r6
{
   195ae:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   195b0:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   195b4:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   195b8:	6869      	ldr	r1, [r5, #4]
   195ba:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   195be:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   195c2:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   195c6:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   195ca:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   195cc:	f10e 0c01 	add.w	ip, lr, #1
   195d0:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   195d4:	4564      	cmp	r4, ip
   195d6:	bf98      	it	ls
   195d8:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   195dc:	4561      	cmp	r1, ip
   195de:	d02e      	beq.n	1963e <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   195e0:	6879      	ldr	r1, [r7, #4]
   195e2:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   195e6:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   195ea:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   195ee:	f04f 0904 	mov.w	r9, #4
   195f2:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   195f6:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   195f8:	9b08      	ldr	r3, [sp, #32]
   195fa:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   195fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   195fe:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   19600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19602:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   19604:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19606:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   19608:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1960a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   1960c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1960e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   19610:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19612:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   19614:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19616:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   19618:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1961a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   1961c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   1961e:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   19620:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   19622:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   19626:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1962a:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   1962e:	4798      	blx	r3
   19630:	4633      	mov	r3, r6
   19632:	4649      	mov	r1, r9
   19634:	2200      	movs	r2, #0
   19636:	47a8      	blx	r5
	return user_op->status;
   19638:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1963a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   1963e:	2001      	movs	r0, #1
}
   19640:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19644:	20001460 	.word	0x20001460

00019648 <ticker_start>:
{
   19648:	b510      	push	{r4, lr}
   1964a:	b08a      	sub	sp, #40	; 0x28
   1964c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1964e:	9400      	str	r4, [sp, #0]
{
   19650:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   19652:	9401      	str	r4, [sp, #4]
{
   19654:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   19656:	9402      	str	r4, [sp, #8]
{
   19658:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1965c:	9403      	str	r4, [sp, #12]
{
   1965e:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   19660:	9404      	str	r4, [sp, #16]
{
   19662:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   19664:	9405      	str	r4, [sp, #20]
{
   19666:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   19668:	9406      	str	r4, [sp, #24]
{
   1966a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   1966c:	9407      	str	r4, [sp, #28]
{
   1966e:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   19670:	9408      	str	r4, [sp, #32]
   19672:	2400      	movs	r4, #0
   19674:	9409      	str	r4, [sp, #36]	; 0x24
   19676:	f7ff ff91 	bl	1959c <ticker_start_ext>
}
   1967a:	b00a      	add	sp, #40	; 0x28
   1967c:	bd10      	pop	{r4, pc}
   1967e:	bf00      	nop

00019680 <ticker_update_ext>:
{
   19680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   19684:	4d28      	ldr	r5, [pc, #160]	; (19728 <ticker_update_ext+0xa8>)
{
   19686:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   1968a:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   1968e:	4604      	mov	r4, r0
   19690:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   19692:	212c      	movs	r1, #44	; 0x2c
   19694:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   19698:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1969c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   196a0:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   196a4:	684c      	ldr	r4, [r1, #4]
   196a6:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   196aa:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   196ae:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   196b2:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   196b4:	f10e 0c01 	add.w	ip, lr, #1
   196b8:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   196bc:	45e1      	cmp	r9, ip
   196be:	bf98      	it	ls
   196c0:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   196c4:	4564      	cmp	r4, ip
{
   196c6:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   196ca:	d02a      	beq.n	19722 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   196cc:	f8d6 a004 	ldr.w	sl, [r6, #4]
   196d0:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   196d4:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   196d8:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   196dc:	f04f 0b05 	mov.w	fp, #5
   196e0:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   196e4:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   196e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   196e8:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   196ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   196ec:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   196ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   196f0:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   196f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   196f4:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   196f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   196f8:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   196fa:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   196fc:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   196fe:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   19700:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   19702:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   19706:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   1970a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   1970e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   19712:	4798      	blx	r3
   19714:	462b      	mov	r3, r5
   19716:	2200      	movs	r2, #0
   19718:	2104      	movs	r1, #4
   1971a:	47b0      	blx	r6
	return user_op->status;
   1971c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   1971e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   19722:	2001      	movs	r0, #1
}
   19724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19728:	20001460 	.word	0x20001460

0001972c <ticker_update>:
{
   1972c:	b510      	push	{r4, lr}
   1972e:	b088      	sub	sp, #32
   19730:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   19732:	9400      	str	r4, [sp, #0]
{
   19734:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   19736:	9401      	str	r4, [sp, #4]
{
   19738:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1973a:	9402      	str	r4, [sp, #8]
{
   1973c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   19740:	9403      	str	r4, [sp, #12]
{
   19742:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   19746:	9404      	str	r4, [sp, #16]
{
   19748:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1974a:	9405      	str	r4, [sp, #20]
{
   1974c:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   1974e:	9406      	str	r4, [sp, #24]
   19750:	2400      	movs	r4, #0
   19752:	9407      	str	r4, [sp, #28]
   19754:	f7ff ff94 	bl	19680 <ticker_update_ext>
}
   19758:	b008      	add	sp, #32
   1975a:	bd10      	pop	{r4, pc}

0001975c <ticker_stop>:
{
   1975c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   19760:	4c1e      	ldr	r4, [pc, #120]	; (197dc <ticker_stop+0x80>)
{
   19762:	4684      	mov	ip, r0
   19764:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   19766:	212c      	movs	r1, #44	; 0x2c
   19768:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   1976c:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   19770:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   19774:	684d      	ldr	r5, [r1, #4]
   19776:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   1977a:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   1977e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   19782:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   19784:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   19788:	f10e 0c01 	add.w	ip, lr, #1
   1978c:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   19790:	4567      	cmp	r7, ip
   19792:	bf98      	it	ls
   19794:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   19798:	4565      	cmp	r5, ip
   1979a:	d01c      	beq.n	197d6 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   1979c:	6877      	ldr	r7, [r6, #4]
   1979e:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   197a2:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   197a6:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   197aa:	f04f 0806 	mov.w	r8, #6
   197ae:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   197b2:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   197b4:	9b06      	ldr	r3, [sp, #24]
   197b6:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   197b8:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   197ba:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   197bc:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   197be:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   197c2:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   197c6:	4798      	blx	r3
   197c8:	4623      	mov	r3, r4
   197ca:	2200      	movs	r2, #0
   197cc:	2104      	movs	r1, #4
   197ce:	47b0      	blx	r6
	return user_op->status;
   197d0:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   197d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   197d6:	2001      	movs	r0, #1
}
   197d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   197dc:	20001460 	.word	0x20001460

000197e0 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   197e0:	f00b b8a6 	b.w	24930 <cntr_cnt_get>

000197e4 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   197e4:	2801      	cmp	r0, #1
{
   197e6:	b508      	push	{r3, lr}
   197e8:	4603      	mov	r3, r0
	if (addr_type > 1) {
   197ea:	d811      	bhi.n	19810 <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
   197ec:	4608      	mov	r0, r1
   197ee:	b943      	cbnz	r3, 19802 <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   197f0:	b129      	cbz	r1, 197fe <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   197f2:	4909      	ldr	r1, [pc, #36]	; (19818 <ll_addr_get+0x34>)
   197f4:	2206      	movs	r2, #6
   197f6:	f00f fa0e 	bl	28c16 <memcpy>
	}

	return pub_addr;
   197fa:	4807      	ldr	r0, [pc, #28]	; (19818 <ll_addr_get+0x34>)
}
   197fc:	bd08      	pop	{r3, pc}
	return pub_addr;
   197fe:	4806      	ldr	r0, [pc, #24]	; (19818 <ll_addr_get+0x34>)
}
   19800:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   19802:	b139      	cbz	r1, 19814 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   19804:	4905      	ldr	r1, [pc, #20]	; (1981c <ll_addr_get+0x38>)
   19806:	2206      	movs	r2, #6
   19808:	f00f fa05 	bl	28c16 <memcpy>
		return rnd_addr;
   1980c:	4803      	ldr	r0, [pc, #12]	; (1981c <ll_addr_get+0x38>)
}
   1980e:	bd08      	pop	{r3, pc}
		return NULL;
   19810:	2000      	movs	r0, #0
}
   19812:	bd08      	pop	{r3, pc}
		return rnd_addr;
   19814:	4801      	ldr	r0, [pc, #4]	; (1981c <ll_addr_get+0x38>)
}
   19816:	bd08      	pop	{r3, pc}
   19818:	2000148c 	.word	0x2000148c
   1981c:	20001494 	.word	0x20001494

00019820 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   19820:	b570      	push	{r4, r5, r6, lr}
   19822:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   19824:	2000      	movs	r0, #0
{
   19826:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   19828:	f003 f9aa 	bl	1cb80 <ull_adv_is_enabled>
   1982c:	b978      	cbnz	r0, 1984e <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   1982e:	b13c      	cbz	r4, 19840 <ll_addr_set+0x20>
   19830:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   19832:	2206      	movs	r2, #6
   19834:	4631      	mov	r1, r6
   19836:	4807      	ldr	r0, [pc, #28]	; (19854 <ll_addr_set+0x34>)
   19838:	f00f f9ed 	bl	28c16 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   1983c:	4628      	mov	r0, r5
}
   1983e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   19840:	2206      	movs	r2, #6
   19842:	4631      	mov	r1, r6
   19844:	4804      	ldr	r0, [pc, #16]	; (19858 <ll_addr_set+0x38>)
   19846:	f00f f9e6 	bl	28c16 <memcpy>
	return 0;
   1984a:	4620      	mov	r0, r4
}
   1984c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1984e:	200c      	movs	r0, #12
}
   19850:	bd70      	pop	{r4, r5, r6, pc}
   19852:	bf00      	nop
   19854:	20001494 	.word	0x20001494
   19858:	2000148c 	.word	0x2000148c

0001985c <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   1985c:	2802      	cmp	r0, #2
   1985e:	d001      	beq.n	19864 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   19860:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   19862:	4770      	bx	lr
{
   19864:	b538      	push	{r3, r4, r5, lr}
   19866:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   19868:	4608      	mov	r0, r1
   1986a:	461d      	mov	r5, r3
   1986c:	f004 f814 	bl	1d898 <ll_connected_get>
			if (!conn) {
   19870:	b110      	cbz	r0, 19878 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   19872:	2000      	movs	r0, #0
   19874:	7028      	strb	r0, [r5, #0]
}
   19876:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19878:	4620      	mov	r0, r4
}
   1987a:	bd38      	pop	{r3, r4, r5, pc}

0001987c <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   1987c:	2300      	movs	r3, #0
   1987e:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   19880:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   19882:	4770      	bx	lr

00019884 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   19884:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   19886:	4802      	ldr	r0, [pc, #8]	; (19890 <hci_driver_init+0xc>)
   19888:	f7fb f834 	bl	148f4 <bt_hci_driver_register>

	return 0;
}
   1988c:	2000      	movs	r0, #0
   1988e:	bd08      	pop	{r3, pc}
   19890:	0002b9cc 	.word	0x0002b9cc

00019894 <hci_driver_send>:
{
   19894:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   19896:	8983      	ldrh	r3, [r0, #12]
{
   19898:	b083      	sub	sp, #12
	if (!buf->len) {
   1989a:	2b00      	cmp	r3, #0
   1989c:	d03a      	beq.n	19914 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1989e:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   198a0:	4604      	mov	r4, r0
   198a2:	b31b      	cbz	r3, 198ec <hci_driver_send+0x58>
   198a4:	2b02      	cmp	r3, #2
   198a6:	d00f      	beq.n	198c8 <hci_driver_send+0x34>
   198a8:	4921      	ldr	r1, [pc, #132]	; (19930 <hci_driver_send+0x9c>)
   198aa:	4a22      	ldr	r2, [pc, #136]	; (19934 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   198ac:	4822      	ldr	r0, [pc, #136]	; (19938 <hci_driver_send+0xa4>)
   198ae:	1a52      	subs	r2, r2, r1
   198b0:	08d2      	lsrs	r2, r2, #3
   198b2:	0192      	lsls	r2, r2, #6
   198b4:	f042 0201 	orr.w	r2, r2, #1
   198b8:	4619      	mov	r1, r3
   198ba:	f00e fd8e 	bl	283da <log_1>
		return -EINVAL;
   198be:	f06f 0515 	mvn.w	r5, #21
}
   198c2:	4628      	mov	r0, r5
   198c4:	b003      	add	sp, #12
   198c6:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   198c8:	a901      	add	r1, sp, #4
   198ca:	f000 ff5f 	bl	1a78c <hci_acl_handle>
	if (evt) {
   198ce:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   198d0:	4605      	mov	r5, r0
	if (evt) {
   198d2:	b113      	cbz	r3, 198da <hci_driver_send+0x46>
		bt_recv_prio(evt);
   198d4:	4618      	mov	r0, r3
   198d6:	f7fa ffef 	bl	148b8 <bt_recv_prio>
	if (!err) {
   198da:	2d00      	cmp	r5, #0
   198dc:	d1f1      	bne.n	198c2 <hci_driver_send+0x2e>
		net_buf_unref(buf);
   198de:	4620      	mov	r0, r4
   198e0:	f00b ffb4 	bl	2584c <net_buf_unref>
   198e4:	2500      	movs	r5, #0
}
   198e6:	4628      	mov	r0, r5
   198e8:	b003      	add	sp, #12
   198ea:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   198ec:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   198ee:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   198f0:	f000 fa68 	bl	19dc4 <hci_cmd_handle>
	if (evt) {
   198f4:	2800      	cmp	r0, #0
   198f6:	d0f2      	beq.n	198de <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   198f8:	f7fa ffde 	bl	148b8 <bt_recv_prio>
		if (node_rx) {
   198fc:	9d01      	ldr	r5, [sp, #4]
   198fe:	2d00      	cmp	r5, #0
   19900:	d0ed      	beq.n	198de <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   19902:	4628      	mov	r0, r5
   19904:	f001 fb44 	bl	1af90 <hci_get_class>
   19908:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   1990a:	9901      	ldr	r1, [sp, #4]
   1990c:	480b      	ldr	r0, [pc, #44]	; (1993c <hci_driver_send+0xa8>)
   1990e:	f010 ff32 	bl	2a776 <k_queue_append>
	if (!err) {
   19912:	e7e4      	b.n	198de <hci_driver_send+0x4a>
   19914:	4b06      	ldr	r3, [pc, #24]	; (19930 <hci_driver_send+0x9c>)
   19916:	4907      	ldr	r1, [pc, #28]	; (19934 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   19918:	4809      	ldr	r0, [pc, #36]	; (19940 <hci_driver_send+0xac>)
   1991a:	1ac9      	subs	r1, r1, r3
   1991c:	08c9      	lsrs	r1, r1, #3
   1991e:	0189      	lsls	r1, r1, #6
   19920:	f041 0101 	orr.w	r1, r1, #1
   19924:	f00e fd4c 	bl	283c0 <log_0>
		return -EINVAL;
   19928:	f06f 0515 	mvn.w	r5, #21
   1992c:	e7c9      	b.n	198c2 <hci_driver_send+0x2e>
   1992e:	bf00      	nop
   19930:	0002b248 	.word	0x0002b248
   19934:	0002b2a0 	.word	0x0002b2a0
   19938:	0002b920 	.word	0x0002b920
   1993c:	2000072c 	.word	0x2000072c
   19940:	0002b90c 	.word	0x0002b90c

00019944 <recv_thread>:
{
   19944:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   19946:	4e41      	ldr	r6, [pc, #260]	; (19a4c <recv_thread+0x108>)
		LL_ASSERT(0);
   19948:	4f41      	ldr	r7, [pc, #260]	; (19a50 <recv_thread+0x10c>)
{
   1994a:	b083      	sub	sp, #12
   1994c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19954:	4630      	mov	r0, r6
   19956:	f00d f8c9 	bl	26aec <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1995a:	2800      	cmp	r0, #0
   1995c:	d0f6      	beq.n	1994c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   1995e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   19960:	9001      	str	r0, [sp, #4]
	switch (class) {
   19962:	2b04      	cmp	r3, #4
   19964:	d821      	bhi.n	199aa <recv_thread+0x66>
   19966:	2b00      	cmp	r3, #0
   19968:	d14b      	bne.n	19a02 <recv_thread+0xbe>
		LL_ASSERT(0);
   1996a:	493a      	ldr	r1, [pc, #232]	; (19a54 <recv_thread+0x110>)
   1996c:	483a      	ldr	r0, [pc, #232]	; (19a58 <recv_thread+0x114>)
   1996e:	f44f 73a2 	mov.w	r3, #324	; 0x144
   19972:	463a      	mov	r2, r7
   19974:	f00e f8e5 	bl	27b42 <printk>
   19978:	4040      	eors	r0, r0
   1997a:	f380 8811 	msr	BASEPRI, r0
   1997e:	f04f 0003 	mov.w	r0, #3
   19982:	df02      	svc	2
	node_rx->hdr.next = NULL;
   19984:	9b01      	ldr	r3, [sp, #4]
   19986:	2200      	movs	r2, #0
   19988:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   1998a:	a801      	add	r0, sp, #4
   1998c:	f002 f94c 	bl	1bc28 <ll_rx_mem_release>
   19990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19998:	4630      	mov	r0, r6
   1999a:	f00d f8a7 	bl	26aec <z_impl_k_queue_get>
		if (node_rx && !buf) {
   1999e:	2800      	cmp	r0, #0
   199a0:	d0d4      	beq.n	1994c <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
   199a2:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   199a4:	9001      	str	r0, [sp, #4]
	switch (class) {
   199a6:	2b04      	cmp	r3, #4
   199a8:	d9dd      	bls.n	19966 <recv_thread+0x22>
   199aa:	2b05      	cmp	r3, #5
   199ac:	d1dd      	bne.n	1996a <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   199ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   199b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   199b6:	2003      	movs	r0, #3
   199b8:	f7f9 feda 	bl	13770 <bt_buf_get_rx>
   199bc:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   199be:	4621      	mov	r1, r4
   199c0:	9801      	ldr	r0, [sp, #4]
   199c2:	f000 ffa9 	bl	1a918 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   199c6:	9b01      	ldr	r3, [sp, #4]
   199c8:	2200      	movs	r2, #0
   199ca:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   199cc:	a801      	add	r0, sp, #4
   199ce:	f002 f92b 	bl	1bc28 <ll_rx_mem_release>
		while (buf) {
   199d2:	2c00      	cmp	r4, #0
   199d4:	d0ba      	beq.n	1994c <recv_thread+0x8>
			net_buf_ref(frag);
   199d6:	4620      	mov	r0, r4
   199d8:	f010 fc38 	bl	2a24c <net_buf_ref>
			buf = net_buf_frag_del(NULL, frag);
   199dc:	4625      	mov	r5, r4
   199de:	4621      	mov	r1, r4
   199e0:	2000      	movs	r0, #0
   199e2:	f010 fc59 	bl	2a298 <net_buf_frag_del>
			if (frag->len) {
   199e6:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, frag);
   199e8:	4604      	mov	r4, r0
				bt_recv(frag);
   199ea:	4628      	mov	r0, r5
			if (frag->len) {
   199ec:	b133      	cbz	r3, 199fc <recv_thread+0xb8>
				bt_recv(frag);
   199ee:	f7fa febf 	bl	14770 <bt_recv>
	z_impl_k_yield();
   199f2:	f00d fcc3 	bl	2737c <z_impl_k_yield>
		while (buf) {
   199f6:	2c00      	cmp	r4, #0
   199f8:	d1ed      	bne.n	199d6 <recv_thread+0x92>
   199fa:	e7a7      	b.n	1994c <recv_thread+0x8>
				net_buf_unref(frag);
   199fc:	f00b ff26 	bl	2584c <net_buf_unref>
   19a00:	e7f7      	b.n	199f2 <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   19a02:	2b02      	cmp	r3, #2
   19a04:	d013      	beq.n	19a2e <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   19a06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a0e:	2001      	movs	r0, #1
   19a10:	f7f9 feae 	bl	13770 <bt_buf_get_rx>
   19a14:	4604      	mov	r4, r0
		if (buf) {
   19a16:	b19c      	cbz	r4, 19a40 <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
   19a18:	9801      	ldr	r0, [sp, #4]
   19a1a:	4621      	mov	r1, r4
   19a1c:	f000 ffb6 	bl	1a98c <hci_evt_encode>
	node_rx->hdr.next = NULL;
   19a20:	9b01      	ldr	r3, [sp, #4]
   19a22:	2200      	movs	r2, #0
   19a24:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   19a26:	a801      	add	r0, sp, #4
   19a28:	f002 f8fe 	bl	1bc28 <ll_rx_mem_release>
		while (buf) {
   19a2c:	e7d3      	b.n	199d6 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   19a2e:	2200      	movs	r2, #0
   19a30:	2300      	movs	r3, #0
   19a32:	2101      	movs	r1, #1
   19a34:	2000      	movs	r0, #0
   19a36:	f7f9 fed1 	bl	137dc <bt_buf_get_evt>
   19a3a:	4604      	mov	r4, r0
		if (buf) {
   19a3c:	2c00      	cmp	r4, #0
   19a3e:	d1eb      	bne.n	19a18 <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
   19a40:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   19a42:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   19a44:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   19a46:	f002 f8ef 	bl	1bc28 <ll_rx_mem_release>
		while (buf) {
   19a4a:	e77f      	b.n	1994c <recv_thread+0x8>
   19a4c:	2000072c 	.word	0x2000072c
   19a50:	0002b934 	.word	0x0002b934
   19a54:	0002b974 	.word	0x0002b974
   19a58:	0002b8dc 	.word	0x0002b8dc

00019a5c <prio_recv_thread>:
{
   19a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   19a60:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 19b14 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
   19a64:	4f2c      	ldr	r7, [pc, #176]	; (19b18 <prio_recv_thread+0xbc>)
{
   19a66:	b082      	sub	sp, #8
   19a68:	e00c      	b.n	19a84 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   19a6a:	f7f9 feb7 	bl	137dc <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   19a6e:	4622      	mov	r2, r4
   19a70:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   19a74:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   19a76:	f001 fa73 	bl	1af60 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   19a7a:	4620      	mov	r0, r4
   19a7c:	f7fa ff1c 	bl	148b8 <bt_recv_prio>
	z_impl_k_yield();
   19a80:	f00d fc7c 	bl	2737c <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   19a84:	f10d 0102 	add.w	r1, sp, #2
   19a88:	a801      	add	r0, sp, #4
   19a8a:	f001 ff17 	bl	1b8bc <ll_rx_get>
   19a8e:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   19a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a98:	2100      	movs	r1, #0
   19a9a:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   19a9c:	2c00      	cmp	r4, #0
   19a9e:	d1e4      	bne.n	19a6a <prio_recv_thread+0xe>
		if (node_rx) {
   19aa0:	9b01      	ldr	r3, [sp, #4]
   19aa2:	b193      	cbz	r3, 19aca <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   19aa4:	f001 fff0 	bl	1ba88 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   19aa8:	9e01      	ldr	r6, [sp, #4]
   19aaa:	4630      	mov	r0, r6
   19aac:	f001 fa70 	bl	1af90 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   19ab0:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   19ab2:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   19ab4:	796b      	ldrb	r3, [r5, #5]
   19ab6:	2b03      	cmp	r3, #3
   19ab8:	d102      	bne.n	19ac0 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   19aba:	792b      	ldrb	r3, [r5, #4]
   19abc:	2b15      	cmp	r3, #21
   19abe:	d00c      	beq.n	19ada <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   19ac0:	4629      	mov	r1, r5
   19ac2:	4638      	mov	r0, r7
   19ac4:	f010 fe57 	bl	2a776 <k_queue_append>
			continue;
   19ac8:	e7dc      	b.n	19a84 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   19aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ad2:	4640      	mov	r0, r8
   19ad4:	f00d f864 	bl	26ba0 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   19ad8:	e7d4      	b.n	19a84 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   19ada:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ade:	4621      	mov	r1, r4
   19ae0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19ae4:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   19ae6:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   19ae8:	f7f9 fe78 	bl	137dc <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   19aec:	4631      	mov	r1, r6
   19aee:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   19af0:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   19af2:	f105 001c 	add.w	r0, r5, #28
   19af6:	f000 fee7 	bl	1a8c8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   19afa:	4630      	mov	r0, r6
   19afc:	f000 ff04 	bl	1a908 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   19b00:	4620      	mov	r0, r4
			if (buf) {
   19b02:	b124      	cbz	r4, 19b0e <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   19b04:	f7fa fed8 	bl	148b8 <bt_recv_prio>
					net_buf_unref(buf);
   19b08:	4620      	mov	r0, r4
   19b0a:	f00b fe9f 	bl	2584c <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   19b0e:	9d01      	ldr	r5, [sp, #4]
   19b10:	e7d6      	b.n	19ac0 <prio_recv_thread+0x64>
   19b12:	bf00      	nop
   19b14:	200006fc 	.word	0x200006fc
   19b18:	2000072c 	.word	0x2000072c

00019b1c <hci_driver_open>:
{
   19b1c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   19b1e:	4821      	ldr	r0, [pc, #132]	; (19ba4 <hci_driver_open+0x88>)
{
   19b20:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   19b22:	f001 fdc7 	bl	1b6b4 <ll_init>
	if (err) {
   19b26:	4604      	mov	r4, r0
   19b28:	bb70      	cbnz	r0, 19b88 <hci_driver_open+0x6c>
	hci_init(NULL);
   19b2a:	f001 fa47 	bl	1afbc <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   19b2e:	2600      	movs	r6, #0
   19b30:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19b32:	f06f 0209 	mvn.w	r2, #9
   19b36:	e9cd 2403 	strd	r2, r4, [sp, #12]
   19b3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19b3e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19b42:	4b19      	ldr	r3, [pc, #100]	; (19ba8 <hci_driver_open+0x8c>)
   19b44:	4919      	ldr	r1, [pc, #100]	; (19bac <hci_driver_open+0x90>)
   19b46:	9400      	str	r4, [sp, #0]
   19b48:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   19b4c:	4818      	ldr	r0, [pc, #96]	; (19bb0 <hci_driver_open+0x94>)
   19b4e:	f00c ff2f 	bl	269b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19b52:	4918      	ldr	r1, [pc, #96]	; (19bb4 <hci_driver_open+0x98>)
   19b54:	4816      	ldr	r0, [pc, #88]	; (19bb0 <hci_driver_open+0x94>)
   19b56:	f010 fd84 	bl	2a662 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19b5a:	f06f 0207 	mvn.w	r2, #7
   19b5e:	e9cd 2403 	strd	r2, r4, [sp, #12]
   19b62:	e9cd 6706 	strd	r6, r7, [sp, #24]
   19b66:	e9cd 4401 	strd	r4, r4, [sp, #4]
   19b6a:	4b13      	ldr	r3, [pc, #76]	; (19bb8 <hci_driver_open+0x9c>)
   19b6c:	4913      	ldr	r1, [pc, #76]	; (19bbc <hci_driver_open+0xa0>)
   19b6e:	9400      	str	r4, [sp, #0]
   19b70:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19b74:	4812      	ldr	r0, [pc, #72]	; (19bc0 <hci_driver_open+0xa4>)
   19b76:	f00c ff1b 	bl	269b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19b7a:	4912      	ldr	r1, [pc, #72]	; (19bc4 <hci_driver_open+0xa8>)
   19b7c:	4810      	ldr	r0, [pc, #64]	; (19bc0 <hci_driver_open+0xa4>)
   19b7e:	f010 fd70 	bl	2a662 <z_impl_k_thread_name_set>
}
   19b82:	4620      	mov	r0, r4
   19b84:	b008      	add	sp, #32
   19b86:	bdd0      	pop	{r4, r6, r7, pc}
   19b88:	4b0f      	ldr	r3, [pc, #60]	; (19bc8 <hci_driver_open+0xac>)
   19b8a:	4a10      	ldr	r2, [pc, #64]	; (19bcc <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
   19b8c:	4810      	ldr	r0, [pc, #64]	; (19bd0 <hci_driver_open+0xb4>)
   19b8e:	1ad2      	subs	r2, r2, r3
   19b90:	08d2      	lsrs	r2, r2, #3
   19b92:	0192      	lsls	r2, r2, #6
   19b94:	f042 0201 	orr.w	r2, r2, #1
   19b98:	4621      	mov	r1, r4
   19b9a:	f00e fc1e 	bl	283da <log_1>
}
   19b9e:	4620      	mov	r0, r4
   19ba0:	b008      	add	sp, #32
   19ba2:	bdd0      	pop	{r4, r6, r7, pc}
   19ba4:	200006fc 	.word	0x200006fc
   19ba8:	00019a5d 	.word	0x00019a5d
   19bac:	20002c20 	.word	0x20002c20
   19bb0:	20000cc0 	.word	0x20000cc0
   19bb4:	0002b998 	.word	0x0002b998
   19bb8:	00019945 	.word	0x00019945
   19bbc:	20002e00 	.word	0x20002e00
   19bc0:	20000d40 	.word	0x20000d40
   19bc4:	0002b9a4 	.word	0x0002b9a4
   19bc8:	0002b248 	.word	0x0002b248
   19bcc:	0002b2a0 	.word	0x0002b2a0
   19bd0:	0002b978 	.word	0x0002b978

00019bd4 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   19bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19bd6:	4c19      	ldr	r4, [pc, #100]	; (19c3c <le_remote_feat_complete+0x68>)
   19bd8:	6864      	ldr	r4, [r4, #4]
   19bda:	00a4      	lsls	r4, r4, #2
   19bdc:	d504      	bpl.n	19be8 <le_remote_feat_complete+0x14>
   19bde:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   19be0:	4a17      	ldr	r2, [pc, #92]	; (19c40 <le_remote_feat_complete+0x6c>)
   19be2:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   19be4:	0712      	lsls	r2, r2, #28
   19be6:	d400      	bmi.n	19bea <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   19be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19bea:	f103 0408 	add.w	r4, r3, #8
   19bee:	4607      	mov	r7, r0
   19bf0:	460e      	mov	r6, r1
   19bf2:	4620      	mov	r0, r4
   19bf4:	2102      	movs	r1, #2
   19bf6:	f010 fb5b 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   19bfa:	233e      	movs	r3, #62	; 0x3e
   19bfc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   19bfe:	230c      	movs	r3, #12
   19c00:	7043      	strb	r3, [r0, #1]
   19c02:	2101      	movs	r1, #1
   19c04:	4620      	mov	r0, r4
   19c06:	f010 fb53 	bl	2a2b0 <net_buf_simple_add>
   19c0a:	4603      	mov	r3, r0
	me->subevent = subevt;
   19c0c:	2204      	movs	r2, #4
   19c0e:	701a      	strb	r2, [r3, #0]
   19c10:	4620      	mov	r0, r4
   19c12:	210b      	movs	r1, #11
   19c14:	f010 fb4c 	bl	2a2b0 <net_buf_simple_add>
		memcpy(&sep->features[0],
   19c18:	2208      	movs	r2, #8
	sep->status = status;
   19c1a:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   19c1c:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   19c20:	b92f      	cbnz	r7, 19c2e <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   19c22:	1d31      	adds	r1, r6, #4
   19c24:	3003      	adds	r0, #3
}
   19c26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   19c2a:	f00e bff4 	b.w	28c16 <memcpy>
}
   19c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   19c32:	2100      	movs	r1, #0
   19c34:	3003      	adds	r0, #3
   19c36:	f00f b819 	b.w	28c6c <memset>
   19c3a:	bf00      	nop
   19c3c:	20000120 	.word	0x20000120
   19c40:	20000128 	.word	0x20000128

00019c44 <hci_vendor_cmd_handle_common>:
{
   19c44:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c46:	3801      	subs	r0, #1
   19c48:	b087      	sub	sp, #28
   19c4a:	4615      	mov	r5, r2
   19c4c:	2809      	cmp	r0, #9
   19c4e:	d806      	bhi.n	19c5e <hci_vendor_cmd_handle_common+0x1a>
   19c50:	e8df f000 	tbb	[pc, r0]
   19c54:	05432609 	.word	0x05432609
   19c58:	6b055705 	.word	0x6b055705
   19c5c:	9f8a      	.short	0x9f8a
	return 0;
   19c5e:	f06f 0015 	mvn.w	r0, #21
}
   19c62:	b007      	add	sp, #28
   19c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19c66:	4b55      	ldr	r3, [pc, #340]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
   19c68:	210d      	movs	r1, #13
   19c6a:	8818      	ldrh	r0, [r3, #0]
   19c6c:	f00f f9bd 	bl	28fea <bt_hci_cmd_complete_create>
   19c70:	210d      	movs	r1, #13
   19c72:	6028      	str	r0, [r5, #0]
   19c74:	3008      	adds	r0, #8
   19c76:	f010 fb1b 	bl	2a2b0 <net_buf_simple_add>
   19c7a:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   19c7c:	2202      	movs	r2, #2
	rp->status = 0x00;
   19c7e:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19c80:	2106      	movs	r1, #6
	rp->status = 0x00;
   19c82:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   19c84:	705a      	strb	r2, [r3, #1]
   19c86:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   19c88:	70da      	strb	r2, [r3, #3]
   19c8a:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   19c8c:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   19c8e:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   19c90:	71d9      	strb	r1, [r3, #7]
   19c92:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   19c94:	7258      	strb	r0, [r3, #9]
   19c96:	7298      	strb	r0, [r3, #10]
   19c98:	72d8      	strb	r0, [r3, #11]
   19c9a:	7318      	strb	r0, [r3, #12]
}
   19c9c:	b007      	add	sp, #28
   19c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19ca0:	4b46      	ldr	r3, [pc, #280]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
   19ca2:	2141      	movs	r1, #65	; 0x41
   19ca4:	8818      	ldrh	r0, [r3, #0]
   19ca6:	f00f f9a0 	bl	28fea <bt_hci_cmd_complete_create>
   19caa:	2141      	movs	r1, #65	; 0x41
   19cac:	6028      	str	r0, [r5, #0]
   19cae:	3008      	adds	r0, #8
   19cb0:	f010 fafe 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   19cb4:	2400      	movs	r4, #0
   19cb6:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   19cb8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   19cba:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   19cbe:	4621      	mov	r1, r4
   19cc0:	f00e ffd4 	bl	28c6c <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   19cc4:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   19cc6:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   19cc8:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   19ccc:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   19cd0:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   19cd2:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   19cd4:	70ab      	strb	r3, [r5, #2]
}
   19cd6:	b007      	add	sp, #28
   19cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19cda:	4b38      	ldr	r3, [pc, #224]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
   19cdc:	2109      	movs	r1, #9
   19cde:	8818      	ldrh	r0, [r3, #0]
   19ce0:	f00f f983 	bl	28fea <bt_hci_cmd_complete_create>
   19ce4:	2109      	movs	r1, #9
   19ce6:	6028      	str	r0, [r5, #0]
   19ce8:	3008      	adds	r0, #8
   19cea:	f010 fae1 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   19cee:	2400      	movs	r4, #0
   19cf0:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   19cf4:	2208      	movs	r2, #8
   19cf6:	4621      	mov	r1, r4
   19cf8:	f00e ffb8 	bl	28c6c <memset>
	return 0;
   19cfc:	4620      	mov	r0, r4
}
   19cfe:	b007      	add	sp, #28
   19d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   19d02:	6889      	ldr	r1, [r1, #8]
   19d04:	2000      	movs	r0, #0
   19d06:	f7ff fd8b 	bl	19820 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   19d0a:	4b2c      	ldr	r3, [pc, #176]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
   19d0c:	2101      	movs	r1, #1
   19d0e:	8818      	ldrh	r0, [r3, #0]
   19d10:	f00f f96b 	bl	28fea <bt_hci_cmd_complete_create>
   19d14:	2101      	movs	r1, #1
   19d16:	4604      	mov	r4, r0
   19d18:	3008      	adds	r0, #8
   19d1a:	f010 fac9 	bl	2a2b0 <net_buf_simple_add>
   19d1e:	4603      	mov	r3, r0
	ccst->status = status;
   19d20:	2000      	movs	r0, #0
   19d22:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   19d24:	602c      	str	r4, [r5, #0]
}
   19d26:	b007      	add	sp, #28
   19d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   19d2a:	4e25      	ldr	r6, [pc, #148]	; (19dc0 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19d2c:	4f23      	ldr	r7, [pc, #140]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   19d2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   19d30:	46ec      	mov	ip, sp
   19d32:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   19d36:	e896 0003 	ldmia.w	r6, {r0, r1}
   19d3a:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19d3e:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   19d40:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19d44:	2116      	movs	r1, #22
   19d46:	f00f f950 	bl	28fea <bt_hci_cmd_complete_create>
   19d4a:	2116      	movs	r1, #22
   19d4c:	6028      	str	r0, [r5, #0]
   19d4e:	3008      	adds	r0, #8
   19d50:	f010 faae 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   19d54:	2400      	movs	r4, #0
   19d56:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   19d5a:	2215      	movs	r2, #21
   19d5c:	4669      	mov	r1, sp
   19d5e:	f00e ff5a 	bl	28c16 <memcpy>
	return 0;
   19d62:	4620      	mov	r0, r4
}
   19d64:	b007      	add	sp, #28
   19d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19d68:	4b14      	ldr	r3, [pc, #80]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
   19d6a:	2118      	movs	r1, #24
   19d6c:	8818      	ldrh	r0, [r3, #0]
   19d6e:	f00f f93c 	bl	28fea <bt_hci_cmd_complete_create>
   19d72:	2118      	movs	r1, #24
   19d74:	6028      	str	r0, [r5, #0]
   19d76:	3008      	adds	r0, #8
   19d78:	f010 fa9a 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   19d7c:	2400      	movs	r4, #0
   19d7e:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   19d80:	2101      	movs	r1, #1
	rp->status = 0x00;
   19d82:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   19d86:	f00b fbe7 	bl	25558 <hci_vendor_read_static_addr>
   19d8a:	7068      	strb	r0, [r5, #1]
	return 0;
   19d8c:	4620      	mov	r0, r4
}
   19d8e:	b007      	add	sp, #28
   19d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19d92:	4b0a      	ldr	r3, [pc, #40]	; (19dbc <hci_vendor_cmd_handle_common+0x178>)
   19d94:	2121      	movs	r1, #33	; 0x21
   19d96:	8818      	ldrh	r0, [r3, #0]
   19d98:	f00f f927 	bl	28fea <bt_hci_cmd_complete_create>
   19d9c:	2121      	movs	r1, #33	; 0x21
   19d9e:	6028      	str	r0, [r5, #0]
   19da0:	3008      	adds	r0, #8
   19da2:	f010 fa85 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   19da6:	4601      	mov	r1, r0
   19da8:	2400      	movs	r4, #0
   19daa:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   19dae:	3001      	adds	r0, #1
   19db0:	f00b fc46 	bl	25640 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   19db4:	4620      	mov	r0, r4
}
   19db6:	b007      	add	sp, #28
   19db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19dba:	bf00      	nop
   19dbc:	2000258c 	.word	0x2000258c
   19dc0:	0002b9e0 	.word	0x0002b9e0

00019dc4 <hci_cmd_handle>:
{
   19dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   19dc6:	8983      	ldrh	r3, [r0, #12]
{
   19dc8:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   19dca:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   19dcc:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   19dce:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   19dd0:	f240 811c 	bls.w	1a00c <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
   19dd4:	4605      	mov	r5, r0
   19dd6:	2103      	movs	r1, #3
   19dd8:	3008      	adds	r0, #8
   19dda:	f010 fa90 	bl	2a2fe <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   19dde:	89aa      	ldrh	r2, [r5, #12]
   19de0:	7883      	ldrb	r3, [r0, #2]
   19de2:	429a      	cmp	r2, r3
   19de4:	f0c0 8150 	bcc.w	1a088 <hci_cmd_handle+0x2c4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   19de8:	8802      	ldrh	r2, [r0, #0]
   19dea:	4ebc      	ldr	r6, [pc, #752]	; (1a0dc <hci_cmd_handle+0x318>)
	switch (BT_OGF(_opcode)) {
   19dec:	f3c2 2385 	ubfx	r3, r2, #10, #6
   19df0:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   19df2:	8032      	strh	r2, [r6, #0]
   19df4:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   19df6:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   19dfa:	d809      	bhi.n	19e10 <hci_cmd_handle+0x4c>
   19dfc:	b1a3      	cbz	r3, 19e28 <hci_cmd_handle+0x64>
   19dfe:	3b01      	subs	r3, #1
   19e00:	2b07      	cmp	r3, #7
   19e02:	d811      	bhi.n	19e28 <hci_cmd_handle+0x64>
   19e04:	e8df f003 	tbb	[pc, r3]
   19e08:	e9c81017 	.word	0xe9c81017
   19e0c:	26101010 	.word	0x26101010
   19e10:	2b3f      	cmp	r3, #63	; 0x3f
   19e12:	d109      	bne.n	19e28 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   19e14:	4629      	mov	r1, r5
   19e16:	aa07      	add	r2, sp, #28
   19e18:	4620      	mov	r0, r4
   19e1a:	f7ff ff13 	bl	19c44 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   19e1e:	3016      	adds	r0, #22
	return evt;
   19e20:	bf18      	it	ne
   19e22:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
   19e24:	d104      	bne.n	19e30 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   19e26:	8830      	ldrh	r0, [r6, #0]
   19e28:	2101      	movs	r1, #1
   19e2a:	f00f f8f0 	bl	2900e <bt_hci_cmd_status_create>
   19e2e:	4605      	mov	r5, r0
}
   19e30:	4628      	mov	r0, r5
   19e32:	b00d      	add	sp, #52	; 0x34
   19e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   19e36:	2c06      	cmp	r4, #6
   19e38:	f000 8443 	beq.w	1a6c2 <hci_cmd_handle+0x8fe>
   19e3c:	2c1d      	cmp	r4, #29
   19e3e:	d1f3      	bne.n	19e28 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   19e40:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   19e42:	8818      	ldrh	r0, [r3, #0]
   19e44:	f003 feb6 	bl	1dbb4 <ll_version_ind_send>
   19e48:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   19e4a:	8830      	ldrh	r0, [r6, #0]
   19e4c:	f00f f8df 	bl	2900e <bt_hci_cmd_status_create>
   19e50:	4605      	mov	r5, r0
}
   19e52:	e7ed      	b.n	19e30 <hci_cmd_handle+0x6c>
	switch (ocf) {
   19e54:	1e62      	subs	r2, r4, #1
   19e56:	2a4d      	cmp	r2, #77	; 0x4d
   19e58:	d8e6      	bhi.n	19e28 <hci_cmd_handle+0x64>
   19e5a:	a301      	add	r3, pc, #4	; (adr r3, 19e60 <hci_cmd_handle+0x9c>)
   19e5c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   19e60:	0001a3e3 	.word	0x0001a3e3
   19e64:	0001a45d 	.word	0x0001a45d
   19e68:	0001a415 	.word	0x0001a415
   19e6c:	00019e29 	.word	0x00019e29
   19e70:	0001a40b 	.word	0x0001a40b
   19e74:	0001a3ef 	.word	0x0001a3ef
   19e78:	0001a4db 	.word	0x0001a4db
   19e7c:	0001a4cf 	.word	0x0001a4cf
   19e80:	0001a4c3 	.word	0x0001a4c3
   19e84:	0001a4b9 	.word	0x0001a4b9
   19e88:	00019e29 	.word	0x00019e29
   19e8c:	00019e29 	.word	0x00019e29
   19e90:	00019e29 	.word	0x00019e29
   19e94:	00019e29 	.word	0x00019e29
   19e98:	0001a497 	.word	0x0001a497
   19e9c:	0001a491 	.word	0x0001a491
   19ea0:	0001a489 	.word	0x0001a489
   19ea4:	0001a481 	.word	0x0001a481
   19ea8:	0001a69b 	.word	0x0001a69b
   19eac:	00019e29 	.word	0x00019e29
   19eb0:	0001a66f 	.word	0x0001a66f
   19eb4:	0001a659 	.word	0x0001a659
   19eb8:	0001a623 	.word	0x0001a623
   19ebc:	0001a601 	.word	0x0001a601
   19ec0:	00019e29 	.word	0x00019e29
   19ec4:	0001a5f7 	.word	0x0001a5f7
   19ec8:	0001a5e7 	.word	0x0001a5e7
   19ecc:	0001a5b1 	.word	0x0001a5b1
   19ed0:	00019e29 	.word	0x00019e29
   19ed4:	00019e29 	.word	0x00019e29
   19ed8:	00019e29 	.word	0x00019e29
   19edc:	0001a59b 	.word	0x0001a59b
   19ee0:	0001a565 	.word	0x0001a565
   19ee4:	0001a555 	.word	0x0001a555
   19ee8:	0001a51f 	.word	0x0001a51f
   19eec:	0001a513 	.word	0x0001a513
   19ef0:	00019e29 	.word	0x00019e29
   19ef4:	00019e29 	.word	0x00019e29
   19ef8:	0001a505 	.word	0x0001a505
   19efc:	0001a4fd 	.word	0x0001a4fd
   19f00:	0001a4f7 	.word	0x0001a4f7
   19f04:	0001a367 	.word	0x0001a367
   19f08:	0001a339 	.word	0x0001a339
   19f0c:	0001a30b 	.word	0x0001a30b
   19f10:	0001a301 	.word	0x0001a301
   19f14:	0001a3d5 	.word	0x0001a3d5
   19f18:	0001a389 	.word	0x0001a389
   19f1c:	0001a2a7 	.word	0x0001a2a7
   19f20:	0001a289 	.word	0x0001a289
   19f24:	0001a22d 	.word	0x0001a22d
   19f28:	00019e29 	.word	0x00019e29
   19f2c:	00019e29 	.word	0x00019e29
   19f30:	00019e29 	.word	0x00019e29
   19f34:	00019e29 	.word	0x00019e29
   19f38:	00019e29 	.word	0x00019e29
   19f3c:	00019e29 	.word	0x00019e29
   19f40:	00019e29 	.word	0x00019e29
   19f44:	00019e29 	.word	0x00019e29
   19f48:	00019e29 	.word	0x00019e29
   19f4c:	00019e29 	.word	0x00019e29
   19f50:	00019e29 	.word	0x00019e29
   19f54:	00019e29 	.word	0x00019e29
   19f58:	00019e29 	.word	0x00019e29
   19f5c:	00019e29 	.word	0x00019e29
   19f60:	00019e29 	.word	0x00019e29
   19f64:	00019e29 	.word	0x00019e29
   19f68:	00019e29 	.word	0x00019e29
   19f6c:	00019e29 	.word	0x00019e29
   19f70:	00019e29 	.word	0x00019e29
   19f74:	00019e29 	.word	0x00019e29
   19f78:	00019e29 	.word	0x00019e29
   19f7c:	00019e29 	.word	0x00019e29
   19f80:	00019e29 	.word	0x00019e29
   19f84:	00019e29 	.word	0x00019e29
   19f88:	0001a209 	.word	0x0001a209
   19f8c:	00019e29 	.word	0x00019e29
   19f90:	00019e29 	.word	0x00019e29
   19f94:	0001a1e7 	.word	0x0001a1e7
	switch (ocf) {
   19f98:	2c63      	cmp	r4, #99	; 0x63
   19f9a:	f000 839e 	beq.w	1a6da <hci_cmd_handle+0x916>
   19f9e:	d857      	bhi.n	1a050 <hci_cmd_handle+0x28c>
   19fa0:	2c03      	cmp	r4, #3
   19fa2:	f000 83a1 	beq.w	1a6e8 <hci_cmd_handle+0x924>
   19fa6:	2c2d      	cmp	r4, #45	; 0x2d
   19fa8:	d13e      	bne.n	1a028 <hci_cmd_handle+0x264>
		read_tx_power_level(cmd, evt);
   19faa:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19fac:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   19fae:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   19fb0:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   19fb2:	f00f f81a 	bl	28fea <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   19fb6:	2104      	movs	r1, #4
   19fb8:	9007      	str	r0, [sp, #28]
   19fba:	3008      	adds	r0, #8
   19fbc:	f010 f978 	bl	2a2b0 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   19fc0:	b2b5      	uxth	r5, r6
   19fc2:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   19fc4:	1cc3      	adds	r3, r0, #3
   19fc6:	4629      	mov	r1, r5
   19fc8:	463a      	mov	r2, r7
   19fca:	2002      	movs	r0, #2
   19fcc:	f7ff fc46 	bl	1985c <ll_tx_pwr_lvl_get>
	rp->status = status;
   19fd0:	7020      	strb	r0, [r4, #0]
	return evt;
   19fd2:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   19fd4:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   19fd8:	e72a      	b.n	19e30 <hci_cmd_handle+0x6c>
	switch (ocf) {
   19fda:	1e62      	subs	r2, r4, #1
   19fdc:	2a08      	cmp	r2, #8
   19fde:	f63f af23 	bhi.w	19e28 <hci_cmd_handle+0x64>
   19fe2:	a301      	add	r3, pc, #4	; (adr r3, 19fe8 <hci_cmd_handle+0x224>)
   19fe4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   19fe8:	0001a1b1 	.word	0x0001a1b1
   19fec:	0001a0f5 	.word	0x0001a0f5
   19ff0:	0001a0b3 	.word	0x0001a0b3
   19ff4:	00019e29 	.word	0x00019e29
   19ff8:	00019e29 	.word	0x00019e29
   19ffc:	00019e29 	.word	0x00019e29
   1a000:	00019e29 	.word	0x00019e29
   1a004:	00019e29 	.word	0x00019e29
   1a008:	0001a091 	.word	0x0001a091
   1a00c:	4934      	ldr	r1, [pc, #208]	; (1a0e0 <hci_cmd_handle+0x31c>)
   1a00e:	4b35      	ldr	r3, [pc, #212]	; (1a0e4 <hci_cmd_handle+0x320>)
		BT_ERR("No HCI Command header");
   1a010:	4835      	ldr	r0, [pc, #212]	; (1a0e8 <hci_cmd_handle+0x324>)
   1a012:	1ac9      	subs	r1, r1, r3
   1a014:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   1a016:	0189      	lsls	r1, r1, #6
   1a018:	f041 0101 	orr.w	r1, r1, #1
   1a01c:	f00e f9d0 	bl	283c0 <log_0>
		return NULL;
   1a020:	4625      	mov	r5, r4
}
   1a022:	4628      	mov	r0, r5
   1a024:	b00d      	add	sp, #52	; 0x34
   1a026:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   1a028:	2c01      	cmp	r4, #1
   1a02a:	f47f aefd 	bne.w	19e28 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1a02e:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   1a030:	4b2e      	ldr	r3, [pc, #184]	; (1a0ec <hci_cmd_handle+0x328>)
   1a032:	6811      	ldr	r1, [r2, #0]
   1a034:	6852      	ldr	r2, [r2, #4]
   1a036:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1a038:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1a03a:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1a03c:	f00e ffd5 	bl	28fea <bt_hci_cmd_complete_create>
   1a040:	2101      	movs	r1, #1
   1a042:	4605      	mov	r5, r0
   1a044:	3008      	adds	r0, #8
   1a046:	f010 f933 	bl	2a2b0 <net_buf_simple_add>
	ccst->status = status;
   1a04a:	2300      	movs	r3, #0
   1a04c:	7003      	strb	r3, [r0, #0]
}
   1a04e:	e6ef      	b.n	19e30 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1a050:	2c7b      	cmp	r4, #123	; 0x7b
   1a052:	f000 836b 	beq.w	1a72c <hci_cmd_handle+0x968>
   1a056:	2c7c      	cmp	r4, #124	; 0x7c
   1a058:	f47f aee6 	bne.w	19e28 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
   1a05c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1a05e:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1a060:	8859      	ldrh	r1, [r3, #2]
   1a062:	b2b8      	uxth	r0, r7
   1a064:	f003 fee0 	bl	1de28 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1a068:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a06a:	2103      	movs	r1, #3
   1a06c:	8830      	ldrh	r0, [r6, #0]
   1a06e:	f00e ffbc 	bl	28fea <bt_hci_cmd_complete_create>
   1a072:	2103      	movs	r1, #3
   1a074:	4603      	mov	r3, r0
   1a076:	3008      	adds	r0, #8
   1a078:	9307      	str	r3, [sp, #28]
   1a07a:	f010 f919 	bl	2a2b0 <net_buf_simple_add>
	rp->status = status;
   1a07e:	7004      	strb	r4, [r0, #0]
	return evt;
   1a080:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1a082:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   1a086:	e6d3      	b.n	19e30 <hci_cmd_handle+0x6c>
   1a088:	4915      	ldr	r1, [pc, #84]	; (1a0e0 <hci_cmd_handle+0x31c>)
   1a08a:	4b16      	ldr	r3, [pc, #88]	; (1a0e4 <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
   1a08c:	4818      	ldr	r0, [pc, #96]	; (1a0f0 <hci_cmd_handle+0x32c>)
   1a08e:	e7c0      	b.n	1a012 <hci_cmd_handle+0x24e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a090:	2107      	movs	r1, #7
   1a092:	f00e ffaa 	bl	28fea <bt_hci_cmd_complete_create>
   1a096:	2107      	movs	r1, #7
   1a098:	4603      	mov	r3, r0
   1a09a:	3008      	adds	r0, #8
   1a09c:	9307      	str	r3, [sp, #28]
   1a09e:	f010 f907 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a0a2:	4601      	mov	r1, r0
   1a0a4:	2000      	movs	r0, #0
   1a0a6:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   1a0aa:	f7ff fb9b 	bl	197e4 <ll_addr_get>
	return evt;
   1a0ae:	9d07      	ldr	r5, [sp, #28]
   1a0b0:	e6be      	b.n	19e30 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a0b2:	2109      	movs	r1, #9
   1a0b4:	f00e ff99 	bl	28fea <bt_hci_cmd_complete_create>
   1a0b8:	2109      	movs	r1, #9
   1a0ba:	4603      	mov	r3, r0
   1a0bc:	3008      	adds	r0, #8
   1a0be:	9307      	str	r3, [sp, #28]
   1a0c0:	f010 f8f6 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a0c4:	2100      	movs	r1, #0
   1a0c6:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1a0c8:	2208      	movs	r2, #8
	rp->status = 0x00;
   1a0ca:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1a0ce:	f00e fdcd 	bl	28c6c <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   1a0d2:	2360      	movs	r3, #96	; 0x60
	return evt;
   1a0d4:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   1a0d6:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   1a0d8:	e6aa      	b.n	19e30 <hci_cmd_handle+0x6c>
   1a0da:	bf00      	nop
   1a0dc:	2000258c 	.word	0x2000258c
   1a0e0:	0002b298 	.word	0x0002b298
   1a0e4:	0002b248 	.word	0x0002b248
   1a0e8:	0002b9f8 	.word	0x0002b9f8
   1a0ec:	20000120 	.word	0x20000120
   1a0f0:	0002ba10 	.word	0x0002ba10
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a0f4:	2141      	movs	r1, #65	; 0x41
   1a0f6:	f00e ff78 	bl	28fea <bt_hci_cmd_complete_create>
   1a0fa:	2141      	movs	r1, #65	; 0x41
   1a0fc:	4603      	mov	r3, r0
   1a0fe:	3008      	adds	r0, #8
   1a100:	9307      	str	r3, [sp, #28]
   1a102:	f010 f8d5 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a106:	2100      	movs	r1, #0
   1a108:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1a10a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1a10c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1a110:	f00e fdac 	bl	28c6c <memset>
	rp->commands[15] |= BIT(1);
   1a114:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   1a116:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   1a118:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1a11a:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   1a11c:	f043 0302 	orr.w	r3, r3, #2
   1a120:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1a122:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   1a124:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   1a128:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1a12c:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   1a130:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   1a132:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   1a134:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   1a136:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1a138:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   1a13a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   1a13e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   1a142:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   1a146:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   1a14a:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   1a14e:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   1a150:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   1a152:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   1a154:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   1a156:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   1a158:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1a15c:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1a15e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   1a162:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1a166:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   1a16a:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1a16e:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   1a172:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   1a174:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   1a176:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   1a17a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1a17e:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1a180:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   1a184:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1a188:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1a18c:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1a190:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   1a194:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   1a198:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1a19c:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1a1a0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   1a1a4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   1a1a8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   1a1ac:	9d07      	ldr	r5, [sp, #28]
   1a1ae:	e63f      	b.n	19e30 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a1b0:	2109      	movs	r1, #9
   1a1b2:	f00e ff1a 	bl	28fea <bt_hci_cmd_complete_create>
   1a1b6:	2109      	movs	r1, #9
   1a1b8:	4603      	mov	r3, r0
   1a1ba:	3008      	adds	r0, #8
   1a1bc:	9307      	str	r3, [sp, #28]
   1a1be:	f010 f877 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a1c2:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   1a1c4:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1a1c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
   1a1ca:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1a1cc:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1a1ce:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   1a1d2:	7083      	strb	r3, [r0, #2]
   1a1d4:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1a1d6:	2305      	movs	r3, #5
	return evt;
   1a1d8:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
   1a1da:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1a1dc:	7144      	strb	r4, [r0, #5]
   1a1de:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   1a1e0:	71c2      	strb	r2, [r0, #7]
   1a1e2:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   1a1e4:	e624      	b.n	19e30 <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
   1a1e6:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1a1e8:	79c1      	ldrb	r1, [r0, #7]
   1a1ea:	f008 f855 	bl	22298 <ll_priv_mode_set>
   1a1ee:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1a1f0:	2101      	movs	r1, #1
   1a1f2:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   1a1f4:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1a1f6:	f00e fef8 	bl	28fea <bt_hci_cmd_complete_create>
   1a1fa:	2101      	movs	r1, #1
   1a1fc:	4605      	mov	r5, r0
   1a1fe:	3008      	adds	r0, #8
   1a200:	f010 f856 	bl	2a2b0 <net_buf_simple_add>
	ccst->status = status;
   1a204:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   1a206:	e613      	b.n	19e30 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a208:	2103      	movs	r1, #3
   1a20a:	f00e feee 	bl	28fea <bt_hci_cmd_complete_create>
   1a20e:	2103      	movs	r1, #3
   1a210:	4603      	mov	r3, r0
   1a212:	3008      	adds	r0, #8
   1a214:	9307      	str	r3, [sp, #28]
   1a216:	f010 f84b 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a21a:	4601      	mov	r1, r0
   1a21c:	2300      	movs	r3, #0
   1a21e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   1a222:	3001      	adds	r0, #1
   1a224:	f7ff fb2a 	bl	1987c <ll_tx_pwr_get>
	return evt;
   1a228:	9d07      	ldr	r5, [sp, #28]
   1a22a:	e601      	b.n	19e30 <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
   1a22c:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1a22e:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   1a230:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1a232:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   1a234:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1a238:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   1a23a:	bf44      	itt	mi
   1a23c:	f041 0103 	orrmi.w	r1, r1, #3
   1a240:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1a242:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   1a246:	7913      	ldrb	r3, [r2, #4]
   1a248:	bf1c      	itt	ne
   1a24a:	f043 0303 	orrne.w	r3, r3, #3
   1a24e:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1a250:	ea41 0203 	orr.w	r2, r1, r3
   1a254:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   1a258:	f040 8289 	bne.w	1a76e <hci_cmd_handle+0x9aa>
	if (!(cmd->tx_phys & 0x07) ||
   1a25c:	074f      	lsls	r7, r1, #29
   1a25e:	f000 8280 	beq.w	1a762 <hci_cmd_handle+0x99e>
   1a262:	075a      	lsls	r2, r3, #29
   1a264:	f000 827d 	beq.w	1a762 <hci_cmd_handle+0x99e>
	if (phy_opts & 0x03) {
   1a268:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   1a26c:	bf1c      	itt	ne
   1a26e:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
   1a272:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   1a276:	4628      	mov	r0, r5
   1a278:	f003 fd60 	bl	1dd3c <ll_phy_req_send>
   1a27c:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1a27e:	8830      	ldrh	r0, [r6, #0]
   1a280:	f00e fec5 	bl	2900e <bt_hci_cmd_status_create>
   1a284:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1a286:	e5d3      	b.n	19e30 <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
   1a288:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1a28a:	781a      	ldrb	r2, [r3, #0]
   1a28c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1a28e:	bf4a      	itet	mi
   1a290:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1a292:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   1a294:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1a296:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   1a298:	bf4a      	itet	mi
   1a29a:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1a29c:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   1a29e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1a2a0:	f003 fd42 	bl	1dd28 <ll_phy_default_set>
   1a2a4:	e7a3      	b.n	1a1ee <hci_cmd_handle+0x42a>
	handle = sys_le16_to_cpu(cmd->handle);
   1a2a6:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a2a8:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   1a2aa:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a2ac:	f00e fe9d 	bl	28fea <bt_hci_cmd_complete_create>
   1a2b0:	2105      	movs	r1, #5
   1a2b2:	4603      	mov	r3, r0
   1a2b4:	3008      	adds	r0, #8
   1a2b6:	9307      	str	r3, [sp, #28]
   1a2b8:	f00f fffa 	bl	2a2b0 <net_buf_simple_add>
   1a2bc:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1a2be:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1a2c0:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1a2c2:	1ce1      	adds	r1, r4, #3
   1a2c4:	f003 fd12 	bl	1dcec <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
   1a2c8:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1a2ca:	7020      	strb	r0, [r4, #0]
   1a2cc:	2b00      	cmp	r3, #0
   1a2ce:	fa93 f2a3 	rbit	r2, r3
   1a2d2:	7923      	ldrb	r3, [r4, #4]
   1a2d4:	fab2 f282 	clz	r2, r2
   1a2d8:	bf08      	it	eq
   1a2da:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1a2de:	2b00      	cmp	r3, #0
   1a2e0:	fa93 f3a3 	rbit	r3, r3
   1a2e4:	fab3 f383 	clz	r3, r3
   1a2e8:	f102 0201 	add.w	r2, r2, #1
   1a2ec:	bf08      	it	eq
   1a2ee:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   1a2f2:	70e2      	strb	r2, [r4, #3]
   1a2f4:	3301      	adds	r3, #1
	return evt;
   1a2f6:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   1a2f8:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   1a2fa:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1a2fe:	e597      	b.n	19e30 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   1a300:	68ab      	ldr	r3, [r5, #8]
   1a302:	7818      	ldrb	r0, [r3, #0]
   1a304:	f007 ffa8 	bl	22258 <ll_rl_enable>
   1a308:	e771      	b.n	1a1ee <hci_cmd_handle+0x42a>
	memcpy(dst, src, sizeof(*dst));
   1a30a:	2207      	movs	r2, #7
   1a30c:	68a9      	ldr	r1, [r5, #8]
   1a30e:	a808      	add	r0, sp, #32
   1a310:	f00e fc81 	bl	28c16 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a314:	2107      	movs	r1, #7
   1a316:	8830      	ldrh	r0, [r6, #0]
   1a318:	f00e fe67 	bl	28fea <bt_hci_cmd_complete_create>
   1a31c:	2107      	movs	r1, #7
   1a31e:	4603      	mov	r3, r0
   1a320:	3008      	adds	r0, #8
   1a322:	9307      	str	r3, [sp, #28]
   1a324:	f00f ffc4 	bl	2a2b0 <net_buf_simple_add>
   1a328:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1a32a:	1c41      	adds	r1, r0, #1
   1a32c:	a808      	add	r0, sp, #32
   1a32e:	f007 ff61 	bl	221f4 <ll_rl_lrpa_get>
   1a332:	7020      	strb	r0, [r4, #0]
	return evt;
   1a334:	9d07      	ldr	r5, [sp, #28]
   1a336:	e57b      	b.n	19e30 <hci_cmd_handle+0x6c>
   1a338:	2207      	movs	r2, #7
   1a33a:	68a9      	ldr	r1, [r5, #8]
   1a33c:	a808      	add	r0, sp, #32
   1a33e:	f00e fc6a 	bl	28c16 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a342:	2107      	movs	r1, #7
   1a344:	8830      	ldrh	r0, [r6, #0]
   1a346:	f00e fe50 	bl	28fea <bt_hci_cmd_complete_create>
   1a34a:	2107      	movs	r1, #7
   1a34c:	4603      	mov	r3, r0
   1a34e:	3008      	adds	r0, #8
   1a350:	9307      	str	r3, [sp, #28]
   1a352:	f00f ffad 	bl	2a2b0 <net_buf_simple_add>
   1a356:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   1a358:	1c41      	adds	r1, r0, #1
   1a35a:	a808      	add	r0, sp, #32
   1a35c:	f007 ff10 	bl	22180 <ll_rl_crpa_get>
   1a360:	7020      	strb	r0, [r4, #0]
	return evt;
   1a362:	9d07      	ldr	r5, [sp, #28]
   1a364:	e564      	b.n	19e30 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a366:	2102      	movs	r1, #2
   1a368:	f00e fe3f 	bl	28fea <bt_hci_cmd_complete_create>
   1a36c:	2102      	movs	r1, #2
   1a36e:	4603      	mov	r3, r0
   1a370:	3008      	adds	r0, #8
   1a372:	9307      	str	r3, [sp, #28]
   1a374:	f00f ff9c 	bl	2a2b0 <net_buf_simple_add>
   1a378:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   1a37a:	f007 fdc9 	bl	21f10 <ll_rl_size_get>
	rp->status = 0x00;
   1a37e:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1a380:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   1a382:	7023      	strb	r3, [r4, #0]
	return evt;
   1a384:	9d07      	ldr	r5, [sp, #28]
   1a386:	e553      	b.n	19e30 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a388:	2109      	movs	r1, #9
   1a38a:	f00e fe2e 	bl	28fea <bt_hci_cmd_complete_create>
   1a38e:	2109      	movs	r1, #9
   1a390:	4603      	mov	r3, r0
   1a392:	3008      	adds	r0, #8
   1a394:	9307      	str	r3, [sp, #28]
   1a396:	f00f ff8b 	bl	2a2b0 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   1a39a:	ab08      	add	r3, sp, #32
   1a39c:	4604      	mov	r4, r0
   1a39e:	f10d 021a 	add.w	r2, sp, #26
   1a3a2:	a906      	add	r1, sp, #24
   1a3a4:	f10d 0016 	add.w	r0, sp, #22
   1a3a8:	f003 fc94 	bl	1dcd4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1a3ac:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1a3b0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1a3b4:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1a3b8:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   1a3bc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1a3c0:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   1a3c4:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1a3c6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1a3ca:	7022      	strb	r2, [r4, #0]
	return evt;
   1a3cc:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1a3ce:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   1a3d2:	e52d      	b.n	19e30 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   1a3d4:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   1a3d6:	8818      	ldrh	r0, [r3, #0]
   1a3d8:	f007 ff54 	bl	22284 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1a3dc:	8830      	ldrh	r0, [r6, #0]
   1a3de:	2101      	movs	r1, #1
   1a3e0:	e62c      	b.n	1a03c <hci_cmd_handle+0x278>
   1a3e2:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   1a3e4:	4bbe      	ldr	r3, [pc, #760]	; (1a6e0 <hci_cmd_handle+0x91c>)
   1a3e6:	6811      	ldr	r1, [r2, #0]
   1a3e8:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1a3ea:	6019      	str	r1, [r3, #0]
   1a3ec:	e624      	b.n	1a038 <hci_cmd_handle+0x274>
		le_set_adv_param(cmd, evt);
   1a3ee:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   1a3f0:	7ba5      	ldrb	r5, [r4, #14]
   1a3f2:	79a3      	ldrb	r3, [r4, #6]
   1a3f4:	7962      	ldrb	r2, [r4, #5]
   1a3f6:	7921      	ldrb	r1, [r4, #4]
   1a3f8:	8820      	ldrh	r0, [r4, #0]
   1a3fa:	9502      	str	r5, [sp, #8]
   1a3fc:	7b65      	ldrb	r5, [r4, #13]
   1a3fe:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   1a400:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   1a402:	9400      	str	r4, [sp, #0]
   1a404:	f002 fa68 	bl	1c8d8 <ll_adv_params_set>
   1a408:	e6f1      	b.n	1a1ee <hci_cmd_handle+0x42a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1a40a:	68a9      	ldr	r1, [r5, #8]
   1a40c:	2001      	movs	r0, #1
   1a40e:	f7ff fa07 	bl	19820 <ll_addr_set>
   1a412:	e6ec      	b.n	1a1ee <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a414:	2109      	movs	r1, #9
   1a416:	f00e fde8 	bl	28fea <bt_hci_cmd_complete_create>
   1a41a:	2109      	movs	r1, #9
   1a41c:	4603      	mov	r3, r0
   1a41e:	3008      	adds	r0, #8
   1a420:	9307      	str	r3, [sp, #28]
   1a422:	f00f ff45 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a426:	2100      	movs	r1, #0
   1a428:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1a42a:	2208      	movs	r2, #8
	rp->status = 0x00;
   1a42c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1a430:	f00e fc1c 	bl	28c6c <memset>
	sys_put_le64(ll_feat_get(), rp->features);
   1a434:	f000 fdea 	bl	1b00c <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
   1a438:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
   1a43a:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
   1a43e:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
   1a440:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
   1a442:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
   1a444:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
   1a446:	70a5      	strb	r5, [r4, #2]
   1a448:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1a44c:	7123      	strb	r3, [r4, #4]
   1a44e:	0a13      	lsrs	r3, r2, #8
	return evt;
   1a450:	9d07      	ldr	r5, [sp, #28]
	dst[0] = val;
   1a452:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
   1a454:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
   1a456:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
   1a458:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
   1a45a:	e4e9      	b.n	19e30 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a45c:	2104      	movs	r1, #4
   1a45e:	f00e fdc4 	bl	28fea <bt_hci_cmd_complete_create>
   1a462:	2104      	movs	r1, #4
   1a464:	4603      	mov	r3, r0
   1a466:	3008      	adds	r0, #8
   1a468:	9307      	str	r3, [sp, #28]
   1a46a:	f00f ff21 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a46e:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1a470:	2103      	movs	r1, #3
	rp->status = 0x00;
   1a472:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
   1a474:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
   1a476:	70c1      	strb	r1, [r0, #3]
	return evt;
   1a478:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
   1a47a:	7042      	strb	r2, [r0, #1]
   1a47c:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   1a47e:	e4d7      	b.n	19e30 <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
   1a480:	68a8      	ldr	r0, [r5, #8]
   1a482:	f007 fcb3 	bl	21dec <ll_wl_remove>
   1a486:	e6b2      	b.n	1a1ee <hci_cmd_handle+0x42a>
	status = ll_wl_add(&cmd->addr);
   1a488:	68a8      	ldr	r0, [r5, #8]
   1a48a:	f007 fc0f 	bl	21cac <ll_wl_add>
   1a48e:	e6ae      	b.n	1a1ee <hci_cmd_handle+0x42a>
	status = ll_wl_clear();
   1a490:	f007 fbe2 	bl	21c58 <ll_wl_clear>
   1a494:	e6ab      	b.n	1a1ee <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a496:	2102      	movs	r1, #2
   1a498:	f00e fda7 	bl	28fea <bt_hci_cmd_complete_create>
   1a49c:	2102      	movs	r1, #2
   1a49e:	4603      	mov	r3, r0
   1a4a0:	3008      	adds	r0, #8
   1a4a2:	9307      	str	r3, [sp, #28]
   1a4a4:	f00f ff04 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a4a8:	2300      	movs	r3, #0
   1a4aa:	7003      	strb	r3, [r0, #0]
   1a4ac:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   1a4ae:	f007 fbd1 	bl	21c54 <ll_wl_size_get>
   1a4b2:	7060      	strb	r0, [r4, #1]
	return evt;
   1a4b4:	9d07      	ldr	r5, [sp, #28]
   1a4b6:	e4bb      	b.n	19e30 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   1a4b8:	68ab      	ldr	r3, [r5, #8]
   1a4ba:	7818      	ldrb	r0, [r3, #0]
   1a4bc:	f7f5 ffec 	bl	10498 <ll_adv_enable>
   1a4c0:	e695      	b.n	1a1ee <hci_cmd_handle+0x42a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   1a4c2:	68a9      	ldr	r1, [r5, #8]
   1a4c4:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a4c8:	f002 fba2 	bl	1cc10 <ll_adv_scan_rsp_set>
   1a4cc:	e68f      	b.n	1a1ee <hci_cmd_handle+0x42a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   1a4ce:	68a9      	ldr	r1, [r5, #8]
   1a4d0:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a4d4:	f002 faa2 	bl	1ca1c <ll_adv_data_set>
   1a4d8:	e689      	b.n	1a1ee <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a4da:	2102      	movs	r1, #2
   1a4dc:	f00e fd85 	bl	28fea <bt_hci_cmd_complete_create>
   1a4e0:	2102      	movs	r1, #2
   1a4e2:	4603      	mov	r3, r0
   1a4e4:	3008      	adds	r0, #8
   1a4e6:	9307      	str	r3, [sp, #28]
   1a4e8:	f00f fee2 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a4ec:	2300      	movs	r3, #0
   1a4ee:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   1a4f0:	7043      	strb	r3, [r0, #1]
	return evt;
   1a4f2:	9d07      	ldr	r5, [sp, #28]
   1a4f4:	e49c      	b.n	19e30 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   1a4f6:	f007 fd0d 	bl	21f14 <ll_rl_clear>
   1a4fa:	e678      	b.n	1a1ee <hci_cmd_handle+0x42a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   1a4fc:	68a8      	ldr	r0, [r5, #8]
   1a4fe:	f007 fd47 	bl	21f90 <ll_rl_remove>
   1a502:	e674      	b.n	1a1ee <hci_cmd_handle+0x42a>
		le_add_dev_to_rl(cmd, evt);
   1a504:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   1a506:	f100 0217 	add.w	r2, r0, #23
   1a50a:	1dc1      	adds	r1, r0, #7
   1a50c:	f008 f8d2 	bl	226b4 <ll_rl_add>
   1a510:	e66d      	b.n	1a1ee <hci_cmd_handle+0x42a>
		le_write_default_data_len(cmd, evt);
   1a512:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   1a514:	8859      	ldrh	r1, [r3, #2]
   1a516:	8818      	ldrh	r0, [r3, #0]
   1a518:	f003 fbd2 	bl	1dcc0 <ll_length_default_set>
   1a51c:	e667      	b.n	1a1ee <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a51e:	2105      	movs	r1, #5
   1a520:	f00e fd63 	bl	28fea <bt_hci_cmd_complete_create>
   1a524:	2105      	movs	r1, #5
   1a526:	4603      	mov	r3, r0
   1a528:	3008      	adds	r0, #8
   1a52a:	9307      	str	r3, [sp, #28]
   1a52c:	f00f fec0 	bl	2a2b0 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   1a530:	a908      	add	r1, sp, #32
   1a532:	4604      	mov	r4, r0
   1a534:	f10d 001a 	add.w	r0, sp, #26
   1a538:	f003 fbb6 	bl	1dca8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1a53c:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1a540:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   1a544:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1a546:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1a54a:	7022      	strb	r2, [r4, #0]
	return evt;
   1a54c:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1a54e:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   1a552:	e46d      	b.n	19e30 <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
   1a554:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1a556:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1a558:	889a      	ldrh	r2, [r3, #4]
   1a55a:	8859      	ldrh	r1, [r3, #2]
   1a55c:	b2b8      	uxth	r0, r7
   1a55e:	f003 fb4f 	bl	1dc00 <ll_length_req_send>
   1a562:	e581      	b.n	1a068 <hci_cmd_handle+0x2a4>
		le_conn_param_req_neg_reply(cmd, evt);
   1a564:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1a566:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1a568:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1a56a:	7892      	ldrb	r2, [r2, #2]
   1a56c:	9300      	str	r3, [sp, #0]
   1a56e:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1a572:	2102      	movs	r1, #2
   1a574:	b2a0      	uxth	r0, r4
   1a576:	f003 f9f9 	bl	1d96c <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a57a:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1a57c:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a57e:	8830      	ldrh	r0, [r6, #0]
   1a580:	f00e fd33 	bl	28fea <bt_hci_cmd_complete_create>
   1a584:	2103      	movs	r1, #3
   1a586:	4603      	mov	r3, r0
   1a588:	3008      	adds	r0, #8
   1a58a:	9307      	str	r3, [sp, #28]
   1a58c:	f00f fe90 	bl	2a2b0 <net_buf_simple_add>
	rp->status = status;
   1a590:	7005      	strb	r5, [r0, #0]
	return evt;
   1a592:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1a594:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1a598:	e44a      	b.n	19e30 <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
   1a59a:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1a59c:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1a59e:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   1a5a0:	8853      	ldrh	r3, [r2, #2]
   1a5a2:	9102      	str	r1, [sp, #8]
   1a5a4:	88d1      	ldrh	r1, [r2, #6]
   1a5a6:	9101      	str	r1, [sp, #4]
   1a5a8:	8891      	ldrh	r1, [r2, #4]
   1a5aa:	9100      	str	r1, [sp, #0]
   1a5ac:	2200      	movs	r2, #0
   1a5ae:	e7e0      	b.n	1a572 <hci_cmd_handle+0x7ae>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a5b0:	2109      	movs	r1, #9
   1a5b2:	f00e fd1a 	bl	28fea <bt_hci_cmd_complete_create>
   1a5b6:	2109      	movs	r1, #9
   1a5b8:	4603      	mov	r3, r0
   1a5ba:	3008      	adds	r0, #8
   1a5bc:	9307      	str	r3, [sp, #28]
   1a5be:	f00f fe77 	bl	2a2b0 <net_buf_simple_add>
	dst[0] = val;
   1a5c2:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   1a5c4:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1a5c6:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   1a5c8:	2230      	movs	r2, #48	; 0x30
   1a5ca:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   1a5cc:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   1a5ce:	70c2      	strb	r2, [r0, #3]
   1a5d0:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   1a5d2:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   1a5d4:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1a5d6:	2201      	movs	r2, #1
	return evt;
   1a5d8:	9d07      	ldr	r5, [sp, #28]
   1a5da:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   1a5dc:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   1a5de:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   1a5e0:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   1a5e2:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   1a5e4:	e424      	b.n	19e30 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1a5e6:	68ab      	ldr	r3, [r5, #8]
   1a5e8:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1a5ea:	2200      	movs	r2, #0
   1a5ec:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1a5ee:	b2b8      	uxth	r0, r7
   1a5f0:	f007 f9b8 	bl	21964 <ll_start_enc_req_send>
   1a5f4:	e538      	b.n	1a068 <hci_cmd_handle+0x2a4>
	handle = sys_le16_to_cpu(cmd->handle);
   1a5f6:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   1a5f8:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1a5fa:	f832 7b02 	ldrh.w	r7, [r2], #2
   1a5fe:	e7f6      	b.n	1a5ee <hci_cmd_handle+0x82a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a600:	2109      	movs	r1, #9
   1a602:	f00e fcf2 	bl	28fea <bt_hci_cmd_complete_create>
   1a606:	2109      	movs	r1, #9
   1a608:	4603      	mov	r3, r0
   1a60a:	3008      	adds	r0, #8
   1a60c:	9307      	str	r3, [sp, #28]
   1a60e:	f00f fe4f 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a612:	2300      	movs	r3, #0
   1a614:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   1a618:	2108      	movs	r1, #8
   1a61a:	f008 fbfd 	bl	22e18 <lll_csrand_get>
	return evt;
   1a61e:	9d07      	ldr	r5, [sp, #28]
   1a620:	e406      	b.n	19e30 <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
   1a622:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   1a624:	aa08      	add	r2, sp, #32
   1a626:	2300      	movs	r3, #0
   1a628:	f100 0110 	add.w	r1, r0, #16
   1a62c:	f00a f9b6 	bl	2499c <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a630:	2111      	movs	r1, #17
   1a632:	8830      	ldrh	r0, [r6, #0]
   1a634:	f00e fcd9 	bl	28fea <bt_hci_cmd_complete_create>
   1a638:	2111      	movs	r1, #17
   1a63a:	4603      	mov	r3, r0
   1a63c:	3008      	adds	r0, #8
   1a63e:	9307      	str	r3, [sp, #28]
   1a640:	f00f fe36 	bl	2a2b0 <net_buf_simple_add>
	rp->status = 0x00;
   1a644:	2300      	movs	r3, #0
   1a646:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   1a64a:	2210      	movs	r2, #16
   1a64c:	a908      	add	r1, sp, #32
   1a64e:	f00e fae2 	bl	28c16 <memcpy>
	return evt;
   1a652:	9d07      	ldr	r5, [sp, #28]
   1a654:	f7ff bbec 	b.w	19e30 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1a658:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   1a65a:	8818      	ldrh	r0, [r3, #0]
   1a65c:	f003 fa84 	bl	1db68 <ll_feature_req_send>
   1a660:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1a662:	8830      	ldrh	r0, [r6, #0]
   1a664:	f00e fcd3 	bl	2900e <bt_hci_cmd_status_create>
   1a668:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1a66a:	f7ff bbe1 	b.w	19e30 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1a66e:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a670:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   1a672:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a674:	f00e fcb9 	bl	28fea <bt_hci_cmd_complete_create>
   1a678:	2108      	movs	r1, #8
   1a67a:	4603      	mov	r3, r0
   1a67c:	4408      	add	r0, r1
   1a67e:	9307      	str	r3, [sp, #28]
   1a680:	f00f fe16 	bl	2a2b0 <net_buf_simple_add>
   1a684:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   1a686:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   1a688:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   1a68a:	f003 fa03 	bl	1da94 <ll_chm_get>
	rp->status = status;
   1a68e:	7020      	strb	r0, [r4, #0]
	return evt;
   1a690:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   1a692:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1a696:	f7ff bbcb 	b.w	19e30 <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
   1a69a:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   1a69c:	890a      	ldrh	r2, [r1, #8]
   1a69e:	884b      	ldrh	r3, [r1, #2]
   1a6a0:	8808      	ldrh	r0, [r1, #0]
   1a6a2:	9202      	str	r2, [sp, #8]
   1a6a4:	88ca      	ldrh	r2, [r1, #6]
   1a6a6:	9201      	str	r2, [sp, #4]
   1a6a8:	8889      	ldrh	r1, [r1, #4]
   1a6aa:	9100      	str	r1, [sp, #0]
   1a6ac:	2200      	movs	r2, #0
   1a6ae:	4611      	mov	r1, r2
   1a6b0:	f003 f95c 	bl	1d96c <ll_conn_update>
   1a6b4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1a6b6:	8830      	ldrh	r0, [r6, #0]
   1a6b8:	f00e fca9 	bl	2900e <bt_hci_cmd_status_create>
   1a6bc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1a6be:	f7ff bbb7 	b.w	19e30 <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
   1a6c2:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   1a6c4:	7899      	ldrb	r1, [r3, #2]
   1a6c6:	8818      	ldrh	r0, [r3, #0]
   1a6c8:	f003 fa04 	bl	1dad4 <ll_terminate_ind_send>
   1a6cc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1a6ce:	8830      	ldrh	r0, [r6, #0]
   1a6d0:	f00e fc9d 	bl	2900e <bt_hci_cmd_status_create>
   1a6d4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1a6d6:	f7ff bbab 	b.w	19e30 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1a6da:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1a6dc:	4b01      	ldr	r3, [pc, #4]	; (1a6e4 <hci_cmd_handle+0x920>)
   1a6de:	e682      	b.n	1a3e6 <hci_cmd_handle+0x622>
   1a6e0:	20000128 	.word	0x20000128
   1a6e4:	20000dc0 	.word	0x20000dc0
	event_mask = DEFAULT_EVENT_MASK;
   1a6e8:	4b24      	ldr	r3, [pc, #144]	; (1a77c <hci_cmd_handle+0x9b8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1a6ea:	4a25      	ldr	r2, [pc, #148]	; (1a780 <hci_cmd_handle+0x9bc>)
	event_mask = DEFAULT_EVENT_MASK;
   1a6ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a6f0:	f641 71ff 	movw	r1, #8191	; 0x1fff
   1a6f4:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1a6f8:	4b22      	ldr	r3, [pc, #136]	; (1a784 <hci_cmd_handle+0x9c0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1a6fa:	2000      	movs	r0, #0
   1a6fc:	2100      	movs	r1, #0
   1a6fe:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1a702:	201f      	movs	r0, #31
   1a704:	2100      	movs	r1, #0
   1a706:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   1a70a:	f001 f841 	bl	1b790 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1a70e:	2101      	movs	r1, #1
   1a710:	8830      	ldrh	r0, [r6, #0]
   1a712:	f00e fc6a 	bl	28fea <bt_hci_cmd_complete_create>
   1a716:	2101      	movs	r1, #1
   1a718:	4605      	mov	r5, r0
   1a71a:	3008      	adds	r0, #8
   1a71c:	f00f fdc8 	bl	2a2b0 <net_buf_simple_add>
	conn_count = 0U;
   1a720:	4a19      	ldr	r2, [pc, #100]	; (1a788 <hci_cmd_handle+0x9c4>)
	ccst->status = status;
   1a722:	2300      	movs	r3, #0
   1a724:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   1a726:	6013      	str	r3, [r2, #0]
}
   1a728:	f7ff bb82 	b.w	19e30 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   1a72c:	68ab      	ldr	r3, [r5, #8]
   1a72e:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   1a730:	a908      	add	r1, sp, #32
   1a732:	b2a8      	uxth	r0, r5
   1a734:	f003 fb54 	bl	1dde0 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a738:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   1a73a:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1a73c:	8830      	ldrh	r0, [r6, #0]
   1a73e:	f00e fc54 	bl	28fea <bt_hci_cmd_complete_create>
   1a742:	2105      	movs	r1, #5
   1a744:	4603      	mov	r3, r0
   1a746:	3008      	adds	r0, #8
   1a748:	9307      	str	r3, [sp, #28]
   1a74a:	f00f fdb1 	bl	2a2b0 <net_buf_simple_add>
	rp->status = status;
   1a74e:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   1a750:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1a754:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   1a758:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   1a75a:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   1a75e:	f7ff bb67 	b.w	19e30 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   1a762:	2112      	movs	r1, #18
   1a764:	f00e fc53 	bl	2900e <bt_hci_cmd_status_create>
   1a768:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1a76a:	f7ff bb61 	b.w	19e30 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   1a76e:	2111      	movs	r1, #17
   1a770:	f00e fc4d 	bl	2900e <bt_hci_cmd_status_create>
   1a774:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   1a776:	f7ff bb5b 	b.w	19e30 <hci_cmd_handle+0x6c>
   1a77a:	bf00      	nop
   1a77c:	20000120 	.word	0x20000120
   1a780:	20000dc0 	.word	0x20000dc0
   1a784:	20000128 	.word	0x20000128
   1a788:	2000149c 	.word	0x2000149c

0001a78c <hci_acl_handle>:
{
   1a78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   1a790:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   1a792:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   1a794:	2b03      	cmp	r3, #3
	*evt = NULL;
   1a796:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   1a798:	d944      	bls.n	1a824 <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a79a:	4605      	mov	r5, r0
   1a79c:	4688      	mov	r8, r1
   1a79e:	3008      	adds	r0, #8
   1a7a0:	2104      	movs	r1, #4
   1a7a2:	f00f fdac 	bl	2a2fe <net_buf_simple_pull_mem>
	if (buf->len < len) {
   1a7a6:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   1a7a8:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   1a7aa:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   1a7ae:	42b3      	cmp	r3, r6
   1a7b0:	d349      	bcc.n	1a846 <hci_acl_handle+0xba>
	if (len > CONFIG_BT_BUF_ACL_TX_SIZE) {
   1a7b2:	2e1b      	cmp	r6, #27
   1a7b4:	d843      	bhi.n	1a83e <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   1a7b6:	f003 f881 	bl	1d8bc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   1a7ba:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
   1a7be:	4604      	mov	r4, r0
   1a7c0:	2800      	cmp	r0, #0
   1a7c2:	d044      	beq.n	1a84e <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   1a7c4:	08bb      	lsrs	r3, r7, #2
   1a7c6:	d102      	bne.n	1a7ce <hci_acl_handle+0x42>
	switch (bt_acl_flags_pb(flags)) {
   1a7c8:	b337      	cbz	r7, 1a818 <hci_acl_handle+0x8c>
   1a7ca:	2f01      	cmp	r7, #1
   1a7cc:	d003      	beq.n	1a7d6 <hci_acl_handle+0x4a>
		return -EINVAL;
   1a7ce:	f06f 0015 	mvn.w	r0, #21
}
   1a7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1a7d6:	7903      	ldrb	r3, [r0, #4]
   1a7d8:	f367 0301 	bfi	r3, r7, #0, #2
   1a7dc:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   1a7de:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   1a7e0:	68a9      	ldr	r1, [r5, #8]
   1a7e2:	4632      	mov	r2, r6
   1a7e4:	1de0      	adds	r0, r4, #7
   1a7e6:	f00e fa16 	bl	28c16 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   1a7ea:	4621      	mov	r1, r4
   1a7ec:	f3c9 000b 	ubfx	r0, r9, #0, #12
   1a7f0:	f003 f870 	bl	1d8d4 <ll_tx_mem_enqueue>
   1a7f4:	2800      	cmp	r0, #0
   1a7f6:	d0ec      	beq.n	1a7d2 <hci_acl_handle+0x46>
   1a7f8:	4b2b      	ldr	r3, [pc, #172]	; (1a8a8 <hci_acl_handle+0x11c>)
   1a7fa:	492c      	ldr	r1, [pc, #176]	; (1a8ac <hci_acl_handle+0x120>)
		BT_ERR("Invalid Tx Enqueue");
   1a7fc:	482c      	ldr	r0, [pc, #176]	; (1a8b0 <hci_acl_handle+0x124>)
   1a7fe:	1ac9      	subs	r1, r1, r3
   1a800:	08c9      	lsrs	r1, r1, #3
   1a802:	0189      	lsls	r1, r1, #6
   1a804:	f041 0101 	orr.w	r1, r1, #1
   1a808:	f00d fdda 	bl	283c0 <log_0>
		ll_tx_mem_release(node_tx);
   1a80c:	4620      	mov	r0, r4
   1a80e:	f003 f85b 	bl	1d8c8 <ll_tx_mem_release>
		return -EINVAL;
   1a812:	f06f 0015 	mvn.w	r0, #21
   1a816:	e7dc      	b.n	1a7d2 <hci_acl_handle+0x46>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   1a818:	7903      	ldrb	r3, [r0, #4]
   1a81a:	2202      	movs	r2, #2
   1a81c:	f362 0301 	bfi	r3, r2, #0, #2
   1a820:	7103      	strb	r3, [r0, #4]
		break;
   1a822:	e7dc      	b.n	1a7de <hci_acl_handle+0x52>
   1a824:	4921      	ldr	r1, [pc, #132]	; (1a8ac <hci_acl_handle+0x120>)
   1a826:	4b20      	ldr	r3, [pc, #128]	; (1a8a8 <hci_acl_handle+0x11c>)
		BT_ERR("No HCI ACL header");
   1a828:	4822      	ldr	r0, [pc, #136]	; (1a8b4 <hci_acl_handle+0x128>)
   1a82a:	1ac9      	subs	r1, r1, r3
   1a82c:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   1a82e:	0189      	lsls	r1, r1, #6
   1a830:	f041 0101 	orr.w	r1, r1, #1
   1a834:	f00d fdc4 	bl	283c0 <log_0>
		return -EINVAL;
   1a838:	f06f 0015 	mvn.w	r0, #21
   1a83c:	e7c9      	b.n	1a7d2 <hci_acl_handle+0x46>
   1a83e:	491b      	ldr	r1, [pc, #108]	; (1a8ac <hci_acl_handle+0x120>)
   1a840:	4b19      	ldr	r3, [pc, #100]	; (1a8a8 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL Data length");
   1a842:	481d      	ldr	r0, [pc, #116]	; (1a8b8 <hci_acl_handle+0x12c>)
   1a844:	e7f1      	b.n	1a82a <hci_acl_handle+0x9e>
   1a846:	4919      	ldr	r1, [pc, #100]	; (1a8ac <hci_acl_handle+0x120>)
   1a848:	4b17      	ldr	r3, [pc, #92]	; (1a8a8 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
   1a84a:	481c      	ldr	r0, [pc, #112]	; (1a8bc <hci_acl_handle+0x130>)
   1a84c:	e7ed      	b.n	1a82a <hci_acl_handle+0x9e>
   1a84e:	4b16      	ldr	r3, [pc, #88]	; (1a8a8 <hci_acl_handle+0x11c>)
   1a850:	4916      	ldr	r1, [pc, #88]	; (1a8ac <hci_acl_handle+0x120>)
		BT_ERR("Tx Buffer Overflow");
   1a852:	481b      	ldr	r0, [pc, #108]	; (1a8c0 <hci_acl_handle+0x134>)
   1a854:	1ac9      	subs	r1, r1, r3
   1a856:	08c9      	lsrs	r1, r1, #3
   1a858:	0189      	lsls	r1, r1, #6
   1a85a:	f041 0101 	orr.w	r1, r1, #1
   1a85e:	f00d fdaf 	bl	283c0 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   1a862:	4b18      	ldr	r3, [pc, #96]	; (1a8c4 <hci_acl_handle+0x138>)
   1a864:	681b      	ldr	r3, [r3, #0]
   1a866:	019b      	lsls	r3, r3, #6
   1a868:	d402      	bmi.n	1a870 <hci_acl_handle+0xe4>
		return -ENOBUFS;
   1a86a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a86e:	e7b0      	b.n	1a7d2 <hci_acl_handle+0x46>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   1a870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a878:	2001      	movs	r0, #1
   1a87a:	f7f8 ff79 	bl	13770 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   1a87e:	2102      	movs	r1, #2
   1a880:	f8c8 0000 	str.w	r0, [r8]
   1a884:	3008      	adds	r0, #8
   1a886:	f00f fd13 	bl	2a2b0 <net_buf_simple_add>
	hdr->len = len;
   1a88a:	2401      	movs	r4, #1
	hdr->evt = evt;
   1a88c:	221a      	movs	r2, #26
   1a88e:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1a890:	7044      	strb	r4, [r0, #1]
   1a892:	f8d8 0000 	ldr.w	r0, [r8]
   1a896:	4621      	mov	r1, r4
   1a898:	3008      	adds	r0, #8
   1a89a:	f00f fd09 	bl	2a2b0 <net_buf_simple_add>
   1a89e:	4603      	mov	r3, r0
		return -ENOBUFS;
   1a8a0:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   1a8a4:	701c      	strb	r4, [r3, #0]
   1a8a6:	e794      	b.n	1a7d2 <hci_acl_handle+0x46>
   1a8a8:	0002b248 	.word	0x0002b248
   1a8ac:	0002b298 	.word	0x0002b298
   1a8b0:	0002ba94 	.word	0x0002ba94
   1a8b4:	0002ba30 	.word	0x0002ba30
   1a8b8:	0002ba64 	.word	0x0002ba64
   1a8bc:	0002ba44 	.word	0x0002ba44
   1a8c0:	0002ba80 	.word	0x0002ba80
   1a8c4:	20000120 	.word	0x20000120

0001a8c8 <hci_disconn_complete_encode>:
{
   1a8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   1a8ca:	4b0e      	ldr	r3, [pc, #56]	; (1a904 <hci_disconn_complete_encode+0x3c>)
   1a8cc:	681b      	ldr	r3, [r3, #0]
   1a8ce:	06db      	lsls	r3, r3, #27
   1a8d0:	d400      	bmi.n	1a8d4 <hci_disconn_complete_encode+0xc>
}
   1a8d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8d4:	f102 0408 	add.w	r4, r2, #8
   1a8d8:	4605      	mov	r5, r0
   1a8da:	460e      	mov	r6, r1
   1a8dc:	4620      	mov	r0, r4
   1a8de:	2102      	movs	r1, #2
   1a8e0:	f00f fce6 	bl	2a2b0 <net_buf_simple_add>
   1a8e4:	4603      	mov	r3, r0
	hdr->len = len;
   1a8e6:	2104      	movs	r1, #4
	hdr->evt = evt;
   1a8e8:	2205      	movs	r2, #5
	hdr->len = len;
   1a8ea:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   1a8ec:	701a      	strb	r2, [r3, #0]
   1a8ee:	4620      	mov	r0, r4
   1a8f0:	f00f fcde 	bl	2a2b0 <net_buf_simple_add>
   1a8f4:	2700      	movs	r7, #0
	ep->status = 0x00;
   1a8f6:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1a8f8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   1a8fc:	782b      	ldrb	r3, [r5, #0]
   1a8fe:	70c3      	strb	r3, [r0, #3]
}
   1a900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a902:	bf00      	nop
   1a904:	20000120 	.word	0x20000120

0001a908 <hci_disconn_complete_process>:
	conn_count--;
   1a908:	4a02      	ldr	r2, [pc, #8]	; (1a914 <hci_disconn_complete_process+0xc>)
   1a90a:	6813      	ldr	r3, [r2, #0]
   1a90c:	3b01      	subs	r3, #1
   1a90e:	6013      	str	r3, [r2, #0]
}
   1a910:	4770      	bx	lr
   1a912:	bf00      	nop
   1a914:	2000149c 	.word	0x2000149c

0001a918 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   1a918:	7f03      	ldrb	r3, [r0, #28]
   1a91a:	f003 0303 	and.w	r3, r3, #3
   1a91e:	3b01      	subs	r3, #1
   1a920:	2b01      	cmp	r3, #1
{
   1a922:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   1a924:	d90d      	bls.n	1a942 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   1a926:	4a16      	ldr	r2, [pc, #88]	; (1a980 <hci_acl_encode+0x68>)
   1a928:	4916      	ldr	r1, [pc, #88]	; (1a984 <hci_acl_encode+0x6c>)
   1a92a:	4817      	ldr	r0, [pc, #92]	; (1a988 <hci_acl_encode+0x70>)
   1a92c:	f641 03b9 	movw	r3, #6329	; 0x18b9
   1a930:	f00d f907 	bl	27b42 <printk>
   1a934:	4040      	eors	r0, r0
   1a936:	f380 8811 	msr	BASEPRI, r0
   1a93a:	f04f 0003 	mov.w	r0, #3
   1a93e:	df02      	svc	2
		break;
	}
}
   1a940:	bd70      	pop	{r4, r5, r6, pc}
   1a942:	4604      	mov	r4, r0
   1a944:	f101 0508 	add.w	r5, r1, #8
   1a948:	4628      	mov	r0, r5
   1a94a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   1a94c:	88e6      	ldrh	r6, [r4, #6]
   1a94e:	f00f fcaf 	bl	2a2b0 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   1a952:	7f23      	ldrb	r3, [r4, #28]
   1a954:	f003 0303 	and.w	r3, r3, #3
   1a958:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   1a95a:	bf0c      	ite	eq
   1a95c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   1a960:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   1a964:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   1a966:	7f61      	ldrb	r1, [r4, #29]
   1a968:	8041      	strh	r1, [r0, #2]
   1a96a:	4628      	mov	r0, r5
   1a96c:	f00f fca0 	bl	2a2b0 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1a970:	7f62      	ldrb	r2, [r4, #29]
   1a972:	f104 011f 	add.w	r1, r4, #31
}
   1a976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   1a97a:	f00e b94c 	b.w	28c16 <memcpy>
   1a97e:	bf00      	nop
   1a980:	0002baa8 	.word	0x0002baa8
   1a984:	0002b974 	.word	0x0002b974
   1a988:	0002b8dc 	.word	0x0002b8dc

0001a98c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   1a98c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a990:	f890 c004 	ldrb.w	ip, [r0, #4]
   1a994:	f1bc 0f03 	cmp.w	ip, #3
{
   1a998:	4604      	mov	r4, r0
   1a99a:	b088      	sub	sp, #32
   1a99c:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   1a99e:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1a9a2:	d00f      	beq.n	1a9c4 <hci_evt_encode+0x38>
		encode_control(node_rx, pdu_data, buf);
   1a9a4:	f1ac 0c14 	sub.w	ip, ip, #20
   1a9a8:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
   1a9aa:	f1bc 0f06 	cmp.w	ip, #6
   1a9ae:	f200 82be 	bhi.w	1af2e <hci_evt_encode+0x5a2>
   1a9b2:	e8df f01c 	tbh	[pc, ip, lsl #1]
   1a9b6:	0022      	.short	0x0022
   1a9b8:	0083007c 	.word	0x0083007c
   1a9bc:	00c200ac 	.word	0x00c200ac
   1a9c0:	00f300d4 	.word	0x00f300d4
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
   1a9c4:	7fe3      	ldrb	r3, [r4, #31]
   1a9c6:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
   1a9c8:	3b03      	subs	r3, #3
   1a9ca:	2b12      	cmp	r3, #18
   1a9cc:	f200 8116 	bhi.w	1abfc <hci_evt_encode+0x270>
   1a9d0:	e8df f013 	tbh	[pc, r3, lsl #1]
   1a9d4:	011401e8 	.word	0x011401e8
   1a9d8:	02170114 	.word	0x02170114
   1a9dc:	01140177 	.word	0x01140177
   1a9e0:	01140189 	.word	0x01140189
   1a9e4:	01140114 	.word	0x01140114
   1a9e8:	011401a8 	.word	0x011401a8
   1a9ec:	011401c3 	.word	0x011401c3
   1a9f0:	01140114 	.word	0x01140114
   1a9f4:	01220114 	.word	0x01220114
   1a9f8:	0122      	.short	0x0122
	uint8_t status = cc->status;
   1a9fa:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   1a9fc:	2f00      	cmp	r7, #0
   1a9fe:	f000 8219 	beq.w	1ae34 <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1aa02:	4bbd      	ldr	r3, [pc, #756]	; (1acf8 <hci_evt_encode+0x36c>)
   1aa04:	685b      	ldr	r3, [r3, #4]
   1aa06:	009a      	lsls	r2, r3, #2
   1aa08:	d54e      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1aa0a:	4bbc      	ldr	r3, [pc, #752]	; (1acfc <hci_evt_encode+0x370>)
   1aa0c:	681b      	ldr	r3, [r3, #0]
   1aa0e:	f240 2201 	movw	r2, #513	; 0x201
   1aa12:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   1aa14:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   1aa18:	d046      	beq.n	1aaa8 <hci_evt_encode+0x11c>
	if (!status) {
   1aa1a:	2f00      	cmp	r7, #0
   1aa1c:	f040 821d 	bne.w	1ae5a <hci_evt_encode+0x4ce>
		conn_count++;
   1aa20:	4ab7      	ldr	r2, [pc, #732]	; (1ad00 <hci_evt_encode+0x374>)
   1aa22:	6813      	ldr	r3, [r2, #0]
   1aa24:	3301      	adds	r3, #1
   1aa26:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1aa28:	f1b8 0f00 	cmp.w	r8, #0
   1aa2c:	f000 8232 	beq.w	1ae94 <hci_evt_encode+0x508>
   1aa30:	3508      	adds	r5, #8
   1aa32:	2102      	movs	r1, #2
   1aa34:	4628      	mov	r0, r5
   1aa36:	f00f fc3b 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1aa3a:	233e      	movs	r3, #62	; 0x3e
   1aa3c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1aa3e:	231f      	movs	r3, #31
   1aa40:	7043      	strb	r3, [r0, #1]
   1aa42:	2101      	movs	r1, #1
   1aa44:	4628      	mov	r0, r5
   1aa46:	f00f fc33 	bl	2a2b0 <net_buf_simple_add>
   1aa4a:	4603      	mov	r3, r0
	me->subevent = subevt;
   1aa4c:	220a      	movs	r2, #10
   1aa4e:	701a      	strb	r2, [r3, #0]
   1aa50:	4628      	mov	r0, r5
   1aa52:	211e      	movs	r1, #30
   1aa54:	f00f fc2c 	bl	2a2b0 <net_buf_simple_add>
		leecc->status = 0x00;
   1aa58:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   1aa5a:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   1aa5e:	7f63      	ldrb	r3, [r4, #29]
   1aa60:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   1aa62:	7fa3      	ldrb	r3, [r4, #30]
   1aa64:	7103      	strb	r3, [r0, #4]
   1aa66:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   1aa68:	2206      	movs	r2, #6
   1aa6a:	f104 011f 	add.w	r1, r4, #31
   1aa6e:	3005      	adds	r0, #5
   1aa70:	f00e f8d1 	bl	28c16 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   1aa74:	2206      	movs	r2, #6
   1aa76:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   1aa7a:	f105 000b 	add.w	r0, r5, #11
   1aa7e:	f00e f8ca 	bl	28c16 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   1aa82:	2206      	movs	r2, #6
   1aa84:	f104 0125 	add.w	r1, r4, #37	; 0x25
   1aa88:	f105 0011 	add.w	r0, r5, #17
   1aa8c:	f00e f8c3 	bl	28c16 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1aa90:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1aa92:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   1aa94:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1aa96:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   1aa9a:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1aa9e:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   1aaa2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1aaa6:	776b      	strb	r3, [r5, #29]
	}
}
   1aaa8:	b008      	add	sp, #32
   1aaaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1aaae:	460a      	mov	r2, r1
   1aab0:	4631      	mov	r1, r6
}
   1aab2:	b008      	add	sp, #32
   1aab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   1aab8:	f7ff bf06 	b.w	1a8c8 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1aabc:	4b8e      	ldr	r3, [pc, #568]	; (1acf8 <hci_evt_encode+0x36c>)
   1aabe:	685b      	ldr	r3, [r3, #4]
   1aac0:	009b      	lsls	r3, r3, #2
   1aac2:	d5f1      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   1aac4:	4b8d      	ldr	r3, [pc, #564]	; (1acfc <hci_evt_encode+0x370>)
   1aac6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1aac8:	075f      	lsls	r7, r3, #29
   1aaca:	d5ed      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
   1aacc:	3508      	adds	r5, #8
   1aace:	2102      	movs	r1, #2
   1aad0:	4628      	mov	r0, r5
   1aad2:	f00f fbed 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1aad6:	233e      	movs	r3, #62	; 0x3e
   1aad8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1aada:	230a      	movs	r3, #10
   1aadc:	7043      	strb	r3, [r0, #1]
   1aade:	2101      	movs	r1, #1
   1aae0:	4628      	mov	r0, r5
   1aae2:	f00f fbe5 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1aae6:	2303      	movs	r3, #3
   1aae8:	7003      	strb	r3, [r0, #0]
   1aaea:	2109      	movs	r1, #9
   1aaec:	4628      	mov	r0, r5
   1aaee:	f00f fbdf 	bl	2a2b0 <net_buf_simple_add>
	sep->status = cu->status;
   1aaf2:	7f23      	ldrb	r3, [r4, #28]
   1aaf4:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1aaf6:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1aaf8:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1aafa:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1aafc:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   1ab00:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1ab04:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   1ab08:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   1ab0c:	e7cc      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   1ab0e:	4b7a      	ldr	r3, [pc, #488]	; (1acf8 <hci_evt_encode+0x36c>)
   1ab10:	685b      	ldr	r3, [r3, #4]
   1ab12:	0418      	lsls	r0, r3, #16
   1ab14:	f04f 0400 	mov.w	r4, #0
   1ab18:	d5c6      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
   1ab1a:	3508      	adds	r5, #8
   1ab1c:	2102      	movs	r1, #2
   1ab1e:	4628      	mov	r0, r5
   1ab20:	f00f fbc6 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ab24:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   1ab26:	2103      	movs	r1, #3
	hdr->evt = evt;
   1ab28:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ab2a:	7041      	strb	r1, [r0, #1]
   1ab2c:	4628      	mov	r0, r5
   1ab2e:	f00f fbbf 	bl	2a2b0 <net_buf_simple_add>
	ep->status = 0x00;
   1ab32:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1ab34:	f8a0 6001 	strh.w	r6, [r0, #1]
   1ab38:	e7b6      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   1ab3a:	4b72      	ldr	r3, [pc, #456]	; (1ad04 <hci_evt_encode+0x378>)
   1ab3c:	681b      	ldr	r3, [r3, #0]
   1ab3e:	0219      	lsls	r1, r3, #8
   1ab40:	d5b2      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
   1ab42:	3508      	adds	r5, #8
   1ab44:	2102      	movs	r1, #2
   1ab46:	4628      	mov	r0, r5
   1ab48:	f00f fbb2 	bl	2a2b0 <net_buf_simple_add>
	hdr->len = len;
   1ab4c:	2102      	movs	r1, #2
	hdr->evt = evt;
   1ab4e:	2357      	movs	r3, #87	; 0x57
   1ab50:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ab52:	7041      	strb	r1, [r0, #1]
   1ab54:	4628      	mov	r0, r5
   1ab56:	f00f fbab 	bl	2a2b0 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   1ab5a:	8006      	strh	r6, [r0, #0]
   1ab5c:	e7a4      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ab5e:	4b66      	ldr	r3, [pc, #408]	; (1acf8 <hci_evt_encode+0x36c>)
   1ab60:	685b      	ldr	r3, [r3, #4]
   1ab62:	009a      	lsls	r2, r3, #2
   1ab64:	d5a0      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1ab66:	4b65      	ldr	r3, [pc, #404]	; (1acfc <hci_evt_encode+0x370>)
   1ab68:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ab6a:	031b      	lsls	r3, r3, #12
   1ab6c:	d59c      	bpl.n	1aaa8 <hci_evt_encode+0x11c>
   1ab6e:	3508      	adds	r5, #8
   1ab70:	2102      	movs	r1, #2
   1ab72:	4628      	mov	r0, r5
   1ab74:	f00f fb9c 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ab78:	233e      	movs	r3, #62	; 0x3e
   1ab7a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ab7c:	2304      	movs	r3, #4
   1ab7e:	7043      	strb	r3, [r0, #1]
   1ab80:	2101      	movs	r1, #1
   1ab82:	4628      	mov	r0, r5
   1ab84:	f00f fb94 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1ab88:	2314      	movs	r3, #20
   1ab8a:	7003      	strb	r3, [r0, #0]
   1ab8c:	2103      	movs	r1, #3
   1ab8e:	4628      	mov	r0, r5
   1ab90:	f00f fb8e 	bl	2a2b0 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1ab94:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   1ab96:	7f23      	ldrb	r3, [r4, #28]
   1ab98:	7083      	strb	r3, [r0, #2]
   1ab9a:	e785      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ab9c:	4b56      	ldr	r3, [pc, #344]	; (1acf8 <hci_evt_encode+0x36c>)
   1ab9e:	685b      	ldr	r3, [r3, #4]
   1aba0:	009f      	lsls	r7, r3, #2
   1aba2:	d503      	bpl.n	1abac <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   1aba4:	4b55      	ldr	r3, [pc, #340]	; (1acfc <hci_evt_encode+0x370>)
   1aba6:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1aba8:	0518      	lsls	r0, r3, #20
   1abaa:	d45c      	bmi.n	1ac66 <hci_evt_encode+0x2da>
   1abac:	7f62      	ldrb	r2, [r4, #29]
   1abae:	7fa0      	ldrb	r0, [r4, #30]
   1abb0:	4955      	ldr	r1, [pc, #340]	; (1ad08 <hci_evt_encode+0x37c>)
   1abb2:	4b56      	ldr	r3, [pc, #344]	; (1ad0c <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   1abb4:	7f24      	ldrb	r4, [r4, #28]
   1abb6:	2a00      	cmp	r2, #0
   1abb8:	fa92 f2a2 	rbit	r2, r2
   1abbc:	fab2 f282 	clz	r2, r2
   1abc0:	eba3 0301 	sub.w	r3, r3, r1
   1abc4:	bf08      	it	eq
   1abc6:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
   1abca:	2800      	cmp	r0, #0
   1abcc:	fa90 f0a0 	rbit	r0, r0
   1abd0:	fab0 f080 	clz	r0, r0
   1abd4:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   1abd8:	bf08      	it	eq
   1abda:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
   1abde:	1c51      	adds	r1, r2, #1
   1abe0:	3001      	adds	r0, #1
   1abe2:	019b      	lsls	r3, r3, #6
   1abe4:	9007      	str	r0, [sp, #28]
   1abe6:	9106      	str	r1, [sp, #24]
   1abe8:	4849      	ldr	r0, [pc, #292]	; (1ad10 <hci_evt_encode+0x384>)
   1abea:	f043 0302 	orr.w	r3, r3, #2
   1abee:	2204      	movs	r2, #4
   1abf0:	a904      	add	r1, sp, #16
   1abf2:	e9cd 6404 	strd	r6, r4, [sp, #16]
   1abf6:	f00d fc39 	bl	2846c <log_n>
		return;
   1abfa:	e755      	b.n	1aaa8 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   1abfc:	4a45      	ldr	r2, [pc, #276]	; (1ad14 <hci_evt_encode+0x388>)
   1abfe:	4946      	ldr	r1, [pc, #280]	; (1ad18 <hci_evt_encode+0x38c>)
   1ac00:	4846      	ldr	r0, [pc, #280]	; (1ad1c <hci_evt_encode+0x390>)
   1ac02:	f641 038d 	movw	r3, #6285	; 0x188d
   1ac06:	f00c ff9c 	bl	27b42 <printk>
   1ac0a:	4040      	eors	r0, r0
   1ac0c:	f380 8811 	msr	BASEPRI, r0
   1ac10:	f04f 0003 	mov.w	r0, #3
   1ac14:	df02      	svc	2
}
   1ac16:	e747      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ac18:	4b37      	ldr	r3, [pc, #220]	; (1acf8 <hci_evt_encode+0x36c>)
   1ac1a:	685b      	ldr	r3, [r3, #4]
   1ac1c:	009a      	lsls	r2, r3, #2
   1ac1e:	f57f af43 	bpl.w	1aaa8 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1ac22:	4b36      	ldr	r3, [pc, #216]	; (1acfc <hci_evt_encode+0x370>)
   1ac24:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ac26:	065b      	lsls	r3, r3, #25
   1ac28:	f57f af3e 	bpl.w	1aaa8 <hci_evt_encode+0x11c>
   1ac2c:	3508      	adds	r5, #8
   1ac2e:	2102      	movs	r1, #2
   1ac30:	4628      	mov	r0, r5
   1ac32:	f00f fb3d 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ac36:	233e      	movs	r3, #62	; 0x3e
   1ac38:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ac3a:	230b      	movs	r3, #11
   1ac3c:	7043      	strb	r3, [r0, #1]
   1ac3e:	2101      	movs	r1, #1
   1ac40:	4628      	mov	r0, r5
   1ac42:	f00f fb35 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1ac46:	2307      	movs	r3, #7
   1ac48:	7003      	strb	r3, [r0, #0]
   1ac4a:	210a      	movs	r1, #10
   1ac4c:	4628      	mov	r0, r5
   1ac4e:	f00f fb2f 	bl	2a2b0 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1ac52:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   1ac54:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1ac56:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1ac58:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1ac5a:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   1ac5c:	8c23      	ldrh	r3, [r4, #32]
   1ac5e:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   1ac60:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ac62:	8103      	strh	r3, [r0, #8]
   1ac64:	e720      	b.n	1aaa8 <hci_evt_encode+0x11c>
   1ac66:	3508      	adds	r5, #8
   1ac68:	2102      	movs	r1, #2
   1ac6a:	4628      	mov	r0, r5
   1ac6c:	f00f fb20 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ac70:	233e      	movs	r3, #62	; 0x3e
   1ac72:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ac74:	2306      	movs	r3, #6
   1ac76:	7043      	strb	r3, [r0, #1]
   1ac78:	2101      	movs	r1, #1
   1ac7a:	4628      	mov	r0, r5
   1ac7c:	f00f fb18 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1ac80:	230c      	movs	r3, #12
   1ac82:	7003      	strb	r3, [r0, #0]
   1ac84:	2105      	movs	r1, #5
   1ac86:	4628      	mov	r0, r5
   1ac88:	f00f fb12 	bl	2a2b0 <net_buf_simple_add>
	sep->status = pu->status;
   1ac8c:	7f23      	ldrb	r3, [r4, #28]
   1ac8e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1ac90:	f8a0 6001 	strh.w	r6, [r0, #1]
   1ac94:	7f62      	ldrb	r2, [r4, #29]
   1ac96:	2a00      	cmp	r2, #0
   1ac98:	fa92 f3a2 	rbit	r3, r2
   1ac9c:	fab3 f383 	clz	r3, r3
   1aca0:	bf08      	it	eq
   1aca2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1aca6:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   1aca8:	70c3      	strb	r3, [r0, #3]
   1acaa:	7fa2      	ldrb	r2, [r4, #30]
   1acac:	fa92 f3a2 	rbit	r3, r2
   1acb0:	2a00      	cmp	r2, #0
   1acb2:	fab3 f383 	clz	r3, r3
   1acb6:	bf08      	it	eq
   1acb8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
   1acbc:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   1acbe:	7103      	strb	r3, [r0, #4]
   1acc0:	e6f2      	b.n	1aaa8 <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
   1acc2:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1acc6:	290e      	cmp	r1, #14
   1acc8:	f000 8115 	beq.w	1aef6 <hci_evt_encode+0x56a>
   1accc:	4b0e      	ldr	r3, [pc, #56]	; (1ad08 <hci_evt_encode+0x37c>)
   1acce:	4a0f      	ldr	r2, [pc, #60]	; (1ad0c <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1acd0:	4813      	ldr	r0, [pc, #76]	; (1ad20 <hci_evt_encode+0x394>)
   1acd2:	1ad2      	subs	r2, r2, r3
   1acd4:	08d2      	lsrs	r2, r2, #3
   1acd6:	0192      	lsls	r2, r2, #6
   1acd8:	f042 0202 	orr.w	r2, r2, #2
}
   1acdc:	b008      	add	sp, #32
   1acde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   1ace2:	f00d bb7a 	b.w	283da <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1ace6:	460b      	mov	r3, r1
   1ace8:	4632      	mov	r2, r6
   1acea:	4601      	mov	r1, r0
   1acec:	2000      	movs	r0, #0
}
   1acee:	b008      	add	sp, #32
   1acf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1acf4:	f7fe bf6e 	b.w	19bd4 <le_remote_feat_complete>
   1acf8:	20000120 	.word	0x20000120
   1acfc:	20000128 	.word	0x20000128
   1ad00:	2000149c 	.word	0x2000149c
   1ad04:	20000dc0 	.word	0x20000dc0
   1ad08:	0002b248 	.word	0x0002b248
   1ad0c:	0002b298 	.word	0x0002b298
   1ad10:	0002bae4 	.word	0x0002bae4
   1ad14:	0002baa8 	.word	0x0002baa8
   1ad18:	0002b974 	.word	0x0002b974
   1ad1c:	0002b8dc 	.word	0x0002b8dc
   1ad20:	0002bb10 	.word	0x0002bb10
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1ad24:	4b89      	ldr	r3, [pc, #548]	; (1af4c <hci_evt_encode+0x5c0>)
   1ad26:	681b      	ldr	r3, [r3, #0]
   1ad28:	061f      	lsls	r7, r3, #24
   1ad2a:	f57f aebd 	bpl.w	1aaa8 <hci_evt_encode+0x11c>
   1ad2e:	3508      	adds	r5, #8
   1ad30:	2102      	movs	r1, #2
   1ad32:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1ad34:	f894 4020 	ldrb.w	r4, [r4, #32]
   1ad38:	f00f faba 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ad3c:	2308      	movs	r3, #8
	hdr->len = len;
   1ad3e:	2104      	movs	r1, #4
	hdr->evt = evt;
   1ad40:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ad42:	7041      	strb	r1, [r0, #1]
   1ad44:	4628      	mov	r0, r5
   1ad46:	f00f fab3 	bl	2a2b0 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1ad4a:	fab4 f384 	clz	r3, r4
   1ad4e:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   1ad50:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1ad52:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1ad56:	70c3      	strb	r3, [r0, #3]
   1ad58:	e6a6      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ad5a:	4b7c      	ldr	r3, [pc, #496]	; (1af4c <hci_evt_encode+0x5c0>)
   1ad5c:	685b      	ldr	r3, [r3, #4]
   1ad5e:	0098      	lsls	r0, r3, #2
   1ad60:	d571      	bpl.n	1ae46 <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1ad62:	4b7b      	ldr	r3, [pc, #492]	; (1af50 <hci_evt_encode+0x5c4>)
   1ad64:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ad66:	0699      	lsls	r1, r3, #26
   1ad68:	d56d      	bpl.n	1ae46 <hci_evt_encode+0x4ba>
   1ad6a:	3508      	adds	r5, #8
   1ad6c:	2102      	movs	r1, #2
   1ad6e:	4628      	mov	r0, r5
   1ad70:	f00f fa9e 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ad74:	233e      	movs	r3, #62	; 0x3e
   1ad76:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ad78:	230b      	movs	r3, #11
   1ad7a:	7043      	strb	r3, [r0, #1]
   1ad7c:	2101      	movs	r1, #1
   1ad7e:	4628      	mov	r0, r5
   1ad80:	f00f fa96 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1ad84:	2306      	movs	r3, #6
   1ad86:	7003      	strb	r3, [r0, #0]
   1ad88:	210a      	movs	r1, #10
   1ad8a:	4628      	mov	r0, r5
   1ad8c:	f00f fa90 	bl	2a2b0 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1ad90:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   1ad92:	8c23      	ldrh	r3, [r4, #32]
   1ad94:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1ad96:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1ad98:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1ad9a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1ad9c:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   1ad9e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1ada0:	8103      	strh	r3, [r0, #8]
   1ada2:	e681      	b.n	1aaa8 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1ada4:	4b69      	ldr	r3, [pc, #420]	; (1af4c <hci_evt_encode+0x5c0>)
   1ada6:	685b      	ldr	r3, [r3, #4]
   1ada8:	0099      	lsls	r1, r3, #2
   1adaa:	f57f ae7d 	bpl.w	1aaa8 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   1adae:	4b68      	ldr	r3, [pc, #416]	; (1af50 <hci_evt_encode+0x5c4>)
   1adb0:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1adb2:	06da      	lsls	r2, r3, #27
   1adb4:	f57f ae78 	bpl.w	1aaa8 <hci_evt_encode+0x11c>
   1adb8:	3508      	adds	r5, #8
   1adba:	2102      	movs	r1, #2
   1adbc:	4628      	mov	r0, r5
   1adbe:	f00f fa77 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1adc2:	233e      	movs	r3, #62	; 0x3e
   1adc4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1adc6:	230d      	movs	r3, #13
   1adc8:	7043      	strb	r3, [r0, #1]
   1adca:	2101      	movs	r1, #1
   1adcc:	4628      	mov	r0, r5
   1adce:	f00f fa6f 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1add2:	2305      	movs	r3, #5
   1add4:	7003      	strb	r3, [r0, #0]
   1add6:	210c      	movs	r1, #12
   1add8:	4628      	mov	r0, r5
   1adda:	f00f fa69 	bl	2a2b0 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1adde:	f104 0120 	add.w	r1, r4, #32
   1ade2:	4605      	mov	r5, r0
   1ade4:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   1ade6:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1adea:	f00d ff14 	bl	28c16 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   1adee:	2202      	movs	r2, #2
   1adf0:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1adf4:	f105 000a 	add.w	r0, r5, #10
}
   1adf8:	b008      	add	sp, #32
   1adfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   1adfe:	f00d bf0a 	b.w	28c16 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1ae02:	4b52      	ldr	r3, [pc, #328]	; (1af4c <hci_evt_encode+0x5c0>)
   1ae04:	681b      	ldr	r3, [r3, #0]
   1ae06:	061b      	lsls	r3, r3, #24
   1ae08:	f04f 0400 	mov.w	r4, #0
   1ae0c:	f57f ae4c 	bpl.w	1aaa8 <hci_evt_encode+0x11c>
   1ae10:	3508      	adds	r5, #8
   1ae12:	2102      	movs	r1, #2
   1ae14:	4628      	mov	r0, r5
   1ae16:	f00f fa4b 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ae1a:	2308      	movs	r3, #8
	hdr->len = len;
   1ae1c:	2104      	movs	r1, #4
	hdr->evt = evt;
   1ae1e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ae20:	7041      	strb	r1, [r0, #1]
   1ae22:	4628      	mov	r0, r5
   1ae24:	f00f fa44 	bl	2a2b0 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   1ae28:	2301      	movs	r3, #1
	ep->status = err;
   1ae2a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1ae2c:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1ae30:	70c3      	strb	r3, [r0, #3]
   1ae32:	e639      	b.n	1aaa8 <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
   1ae34:	7fa0      	ldrb	r0, [r4, #30]
   1ae36:	f104 0325 	add.w	r3, r4, #37	; 0x25
   1ae3a:	22ff      	movs	r2, #255	; 0xff
   1ae3c:	f104 011f 	add.w	r1, r4, #31
   1ae40:	f007 f958 	bl	220f4 <ll_rl_crpa_set>
   1ae44:	e5dd      	b.n	1aa02 <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1ae46:	2300      	movs	r3, #0
   1ae48:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1ae4c:	9300      	str	r3, [sp, #0]
   1ae4e:	221a      	movs	r2, #26
   1ae50:	2102      	movs	r1, #2
   1ae52:	4630      	mov	r0, r6
   1ae54:	f002 fd8a 	bl	1d96c <ll_conn_update>
		return;
   1ae58:	e626      	b.n	1aaa8 <hci_evt_encode+0x11c>
   1ae5a:	3508      	adds	r5, #8
   1ae5c:	2102      	movs	r1, #2
   1ae5e:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   1ae60:	f1b8 0f00 	cmp.w	r8, #0
   1ae64:	d14c      	bne.n	1af00 <hci_evt_encode+0x574>
   1ae66:	f00f fa23 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ae6a:	233e      	movs	r3, #62	; 0x3e
   1ae6c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1ae6e:	2313      	movs	r3, #19
   1ae70:	7043      	strb	r3, [r0, #1]
   1ae72:	2101      	movs	r1, #1
   1ae74:	4628      	mov	r0, r5
   1ae76:	f00f fa1b 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1ae7a:	2301      	movs	r3, #1
   1ae7c:	7003      	strb	r3, [r0, #0]
   1ae7e:	2112      	movs	r1, #18
   1ae80:	4628      	mov	r0, r5
   1ae82:	f00f fa15 	bl	2a2b0 <net_buf_simple_add>
   1ae86:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1ae88:	2212      	movs	r2, #18
   1ae8a:	4641      	mov	r1, r8
   1ae8c:	f00d feee 	bl	28c6c <memset>
		lecc->status = status;
   1ae90:	7027      	strb	r7, [r4, #0]
		return;
   1ae92:	e609      	b.n	1aaa8 <hci_evt_encode+0x11c>
   1ae94:	3508      	adds	r5, #8
   1ae96:	2102      	movs	r1, #2
   1ae98:	4628      	mov	r0, r5
   1ae9a:	f00f fa09 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1ae9e:	233e      	movs	r3, #62	; 0x3e
   1aea0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1aea2:	2313      	movs	r3, #19
   1aea4:	7043      	strb	r3, [r0, #1]
   1aea6:	2101      	movs	r1, #1
   1aea8:	4628      	mov	r0, r5
   1aeaa:	f00f fa01 	bl	2a2b0 <net_buf_simple_add>
   1aeae:	4603      	mov	r3, r0
	me->subevent = subevt;
   1aeb0:	2201      	movs	r2, #1
   1aeb2:	701a      	strb	r2, [r3, #0]
   1aeb4:	4628      	mov	r0, r5
   1aeb6:	2112      	movs	r1, #18
   1aeb8:	f00f f9fa 	bl	2a2b0 <net_buf_simple_add>
	lecc->status = 0x00;
   1aebc:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   1aebe:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   1aec2:	7f63      	ldrb	r3, [r4, #29]
   1aec4:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1aec6:	7fa3      	ldrb	r3, [r4, #30]
   1aec8:	f003 0301 	and.w	r3, r3, #1
   1aecc:	4605      	mov	r5, r0
   1aece:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   1aed0:	2206      	movs	r2, #6
   1aed2:	f104 011f 	add.w	r1, r4, #31
   1aed6:	3005      	adds	r0, #5
   1aed8:	f00d fe9d 	bl	28c16 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1aedc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1aede:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   1aee0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   1aee2:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1aee6:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1aeea:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   1aeee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1aef2:	746b      	strb	r3, [r5, #17]
   1aef4:	e5d8      	b.n	1aaa8 <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1aef6:	462b      	mov	r3, r5
   1aef8:	4632      	mov	r2, r6
   1aefa:	2100      	movs	r1, #0
   1aefc:	201a      	movs	r0, #26
   1aefe:	e6f6      	b.n	1acee <hci_evt_encode+0x362>
   1af00:	f00f f9d6 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1af04:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1af06:	231f      	movs	r3, #31
	hdr->evt = evt;
   1af08:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   1af0a:	7043      	strb	r3, [r0, #1]
   1af0c:	2101      	movs	r1, #1
   1af0e:	4628      	mov	r0, r5
   1af10:	f00f f9ce 	bl	2a2b0 <net_buf_simple_add>
	me->subevent = subevt;
   1af14:	230a      	movs	r3, #10
   1af16:	7003      	strb	r3, [r0, #0]
   1af18:	211e      	movs	r1, #30
   1af1a:	4628      	mov	r0, r5
   1af1c:	f00f f9c8 	bl	2a2b0 <net_buf_simple_add>
   1af20:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1af22:	221e      	movs	r2, #30
   1af24:	2100      	movs	r1, #0
   1af26:	f00d fea1 	bl	28c6c <memset>
			leecc->status = status;
   1af2a:	7027      	strb	r7, [r4, #0]
			return;
   1af2c:	e5bc      	b.n	1aaa8 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   1af2e:	4a09      	ldr	r2, [pc, #36]	; (1af54 <hci_evt_encode+0x5c8>)
   1af30:	4909      	ldr	r1, [pc, #36]	; (1af58 <hci_evt_encode+0x5cc>)
   1af32:	480a      	ldr	r0, [pc, #40]	; (1af5c <hci_evt_encode+0x5d0>)
   1af34:	f241 73c4 	movw	r3, #6084	; 0x17c4
   1af38:	f00c fe03 	bl	27b42 <printk>
   1af3c:	4040      	eors	r0, r0
   1af3e:	f380 8811 	msr	BASEPRI, r0
   1af42:	f04f 0003 	mov.w	r0, #3
   1af46:	df02      	svc	2
		return;
   1af48:	e5ae      	b.n	1aaa8 <hci_evt_encode+0x11c>
   1af4a:	bf00      	nop
   1af4c:	20000120 	.word	0x20000120
   1af50:	20000128 	.word	0x20000128
   1af54:	0002baa8 	.word	0x0002baa8
   1af58:	0002b974 	.word	0x0002b974
   1af5c:	0002b8dc 	.word	0x0002b8dc

0001af60 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   1af60:	b570      	push	{r4, r5, r6, lr}
   1af62:	f100 0408 	add.w	r4, r0, #8
   1af66:	460e      	mov	r6, r1
   1af68:	4620      	mov	r0, r4
   1af6a:	2102      	movs	r1, #2
   1af6c:	4615      	mov	r5, r2
   1af6e:	f00f f99f 	bl	2a2b0 <net_buf_simple_add>
	hdr->evt = evt;
   1af72:	2313      	movs	r3, #19
	hdr->len = len;
   1af74:	2105      	movs	r1, #5
	hdr->evt = evt;
   1af76:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1af78:	7041      	strb	r1, [r0, #1]
   1af7a:	4620      	mov	r0, r4
   1af7c:	f00f f998 	bl	2a2b0 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   1af80:	2301      	movs	r3, #1
   1af82:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1af84:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1af88:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   1af8c:	bd70      	pop	{r4, r5, r6, pc}
   1af8e:	bf00      	nop

0001af90 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   1af90:	7903      	ldrb	r3, [r0, #4]
   1af92:	2b03      	cmp	r3, #3
   1af94:	d009      	beq.n	1afaa <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1af96:	2b14      	cmp	r3, #20
   1af98:	d005      	beq.n	1afa6 <hci_get_class+0x16>
   1af9a:	3b15      	subs	r3, #21
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   1af9c:	2b05      	cmp	r3, #5
   1af9e:	bf94      	ite	ls
   1afa0:	2003      	movls	r0, #3
   1afa2:	2000      	movhi	r0, #0
   1afa4:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1afa6:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   1afa8:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1afaa:	7f03      	ldrb	r3, [r0, #28]
   1afac:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   1afb0:	2b03      	cmp	r3, #3
   1afb2:	bf0c      	ite	eq
   1afb4:	2004      	moveq	r0, #4
   1afb6:	2005      	movne	r0, #5
   1afb8:	4770      	bx	lr
   1afba:	bf00      	nop

0001afbc <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   1afbc:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   1afbe:	4b0b      	ldr	r3, [pc, #44]	; (1afec <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1afc0:	490b      	ldr	r1, [pc, #44]	; (1aff0 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1afc2:	4a0c      	ldr	r2, [pc, #48]	; (1aff4 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   1afc4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1afc8:	f641 75ff 	movw	r5, #8191	; 0x1fff
   1afcc:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   1afd0:	2400      	movs	r4, #0
   1afd2:	2500      	movs	r5, #0
   1afd4:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1afd8:	4b07      	ldr	r3, [pc, #28]	; (1aff8 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1afda:	201f      	movs	r0, #31
   1afdc:	2100      	movs	r1, #0
   1afde:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   1afe2:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   1afe4:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   1afe6:	601a      	str	r2, [r3, #0]
}
   1afe8:	4770      	bx	lr
   1afea:	bf00      	nop
   1afec:	20000120 	.word	0x20000120
   1aff0:	20000dc0 	.word	0x20000dc0
   1aff4:	20000128 	.word	0x20000128
   1aff8:	2000149c 	.word	0x2000149c

0001affc <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   1affc:	f007 bf0c 	b.w	22e18 <lll_csrand_get>

0001b000 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   1b000:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1b002:	2300      	movs	r3, #0
   1b004:	f009 fcca 	bl	2499c <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   1b008:	2000      	movs	r0, #0
   1b00a:	bd08      	pop	{r3, pc}

0001b00c <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
   1b00c:	4801      	ldr	r0, [pc, #4]	; (1b014 <ll_feat_get+0x8>)
   1b00e:	2100      	movs	r1, #0
   1b010:	4770      	bx	lr
   1b012:	bf00      	nop
   1b014:	0001417f 	.word	0x0001417f

0001b018 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   1b018:	b510      	push	{r4, lr}
   1b01a:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   1b01c:	f007 ff32 	bl	22e84 <lll_reset>
	LL_ASSERT(!err);
   1b020:	b950      	cbnz	r0, 1b038 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1b022:	f008 fb17 	bl	23654 <lll_adv_reset>
	LL_ASSERT(!err);
   1b026:	b9c0      	cbnz	r0, 1b05a <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   1b028:	f008 ffaa 	bl	23f80 <lll_conn_reset>
	LL_ASSERT(!err);
   1b02c:	bb30      	cbnz	r0, 1b07c <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   1b02e:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b034:	f00b bd8e 	b.w	26b54 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   1b038:	4a19      	ldr	r2, [pc, #100]	; (1b0a0 <perform_lll_reset+0x88>)
   1b03a:	491a      	ldr	r1, [pc, #104]	; (1b0a4 <perform_lll_reset+0x8c>)
   1b03c:	481a      	ldr	r0, [pc, #104]	; (1b0a8 <perform_lll_reset+0x90>)
   1b03e:	f240 7364 	movw	r3, #1892	; 0x764
   1b042:	f00c fd7e 	bl	27b42 <printk>
   1b046:	4040      	eors	r0, r0
   1b048:	f380 8811 	msr	BASEPRI, r0
   1b04c:	f04f 0003 	mov.w	r0, #3
   1b050:	df02      	svc	2
	err = lll_adv_reset();
   1b052:	f008 faff 	bl	23654 <lll_adv_reset>
	LL_ASSERT(!err);
   1b056:	2800      	cmp	r0, #0
   1b058:	d0e6      	beq.n	1b028 <perform_lll_reset+0x10>
   1b05a:	4a11      	ldr	r2, [pc, #68]	; (1b0a0 <perform_lll_reset+0x88>)
   1b05c:	4911      	ldr	r1, [pc, #68]	; (1b0a4 <perform_lll_reset+0x8c>)
   1b05e:	4812      	ldr	r0, [pc, #72]	; (1b0a8 <perform_lll_reset+0x90>)
   1b060:	f240 7369 	movw	r3, #1897	; 0x769
   1b064:	f00c fd6d 	bl	27b42 <printk>
   1b068:	4040      	eors	r0, r0
   1b06a:	f380 8811 	msr	BASEPRI, r0
   1b06e:	f04f 0003 	mov.w	r0, #3
   1b072:	df02      	svc	2
	err = lll_conn_reset();
   1b074:	f008 ff84 	bl	23f80 <lll_conn_reset>
	LL_ASSERT(!err);
   1b078:	2800      	cmp	r0, #0
   1b07a:	d0d8      	beq.n	1b02e <perform_lll_reset+0x16>
   1b07c:	4a08      	ldr	r2, [pc, #32]	; (1b0a0 <perform_lll_reset+0x88>)
   1b07e:	4909      	ldr	r1, [pc, #36]	; (1b0a4 <perform_lll_reset+0x8c>)
   1b080:	4809      	ldr	r0, [pc, #36]	; (1b0a8 <perform_lll_reset+0x90>)
   1b082:	f240 7375 	movw	r3, #1909	; 0x775
   1b086:	f00c fd5c 	bl	27b42 <printk>
   1b08a:	4040      	eors	r0, r0
   1b08c:	f380 8811 	msr	BASEPRI, r0
   1b090:	f04f 0003 	mov.w	r0, #3
   1b094:	df02      	svc	2
   1b096:	4620      	mov	r0, r4
}
   1b098:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b09c:	f00b bd5a 	b.w	26b54 <z_impl_k_sem_give>
   1b0a0:	0002bb4c 	.word	0x0002bb4c
   1b0a4:	0002bb88 	.word	0x0002bb88
   1b0a8:	0002b8dc 	.word	0x0002b8dc

0001b0ac <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   1b0ac:	6008      	str	r0, [r1, #0]
   1b0ae:	4801      	ldr	r0, [pc, #4]	; (1b0b4 <ull_ticker_status_give+0x8>)
   1b0b0:	f00b bd50 	b.w	26b54 <z_impl_k_sem_give>
   1b0b4:	2000189c 	.word	0x2000189c

0001b0b8 <disabled_cb>:
   1b0b8:	f00b bd4c 	b.w	26b54 <z_impl_k_sem_give>

0001b0bc <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   1b0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1b0c0:	4e2f      	ldr	r6, [pc, #188]	; (1b180 <tx_cmplt_get+0xc4>)
{
   1b0c2:	460c      	mov	r4, r1
   1b0c4:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1b0c6:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1b0c8:	7872      	ldrb	r2, [r6, #1]
   1b0ca:	7831      	ldrb	r1, [r6, #0]
   1b0cc:	429a      	cmp	r2, r3
   1b0ce:	bf9c      	itt	ls
   1b0d0:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   1b0d2:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   1b0d4:	4599      	cmp	r9, r3
{
   1b0d6:	4682      	mov	sl, r0
   1b0d8:	d049      	beq.n	1b16e <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   1b0da:	fb13 f101 	smulbb	r1, r3, r1
   1b0de:	4d29      	ldr	r5, [pc, #164]	; (1b184 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   1b0e0:	3301      	adds	r3, #1
   1b0e2:	b2db      	uxtb	r3, r3
		i = 0U;
   1b0e4:	429a      	cmp	r2, r3
   1b0e6:	bf08      	it	eq
   1b0e8:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   1b0ea:	186a      	adds	r2, r5, r1

	*idx = i;
   1b0ec:	7023      	strb	r3, [r4, #0]
   1b0ee:	d03e      	beq.n	1b16e <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
   1b0f0:	5a6b      	ldrh	r3, [r5, r1]
   1b0f2:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   1b0f4:	2700      	movs	r7, #0
   1b0f6:	f04f 0802 	mov.w	r8, #2
   1b0fa:	f04f 0b01 	mov.w	fp, #1
   1b0fe:	e022      	b.n	1b146 <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   1b100:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   1b102:	f030 0303 	bics.w	r3, r0, #3
   1b106:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
   1b10a:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   1b10c:	d129      	bne.n	1b162 <tx_cmplt_get+0xa6>
	if (*idx >= count) {
   1b10e:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1b110:	7872      	ldrb	r2, [r6, #1]
   1b112:	7831      	ldrb	r1, [r6, #0]
   1b114:	429a      	cmp	r2, r3
   1b116:	bf9c      	itt	ls
   1b118:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   1b11a:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   1b11c:	454b      	cmp	r3, r9
   1b11e:	d027      	beq.n	1b170 <tx_cmplt_get+0xb4>
	i = *idx + 1;
   1b120:	f103 0c01 	add.w	ip, r3, #1
   1b124:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   1b128:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   1b12c:	4562      	cmp	r2, ip
   1b12e:	bf08      	it	eq
   1b130:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   1b134:	18ea      	adds	r2, r5, r3
	*idx = i;
   1b136:	f884 c000 	strb.w	ip, [r4]
   1b13a:	d019      	beq.n	1b170 <tx_cmplt_get+0xb4>
   1b13c:	5ae9      	ldrh	r1, [r5, r3]
   1b13e:	f8ba 3000 	ldrh.w	r3, [sl]
   1b142:	4299      	cmp	r1, r3
   1b144:	d114      	bne.n	1b170 <tx_cmplt_get+0xb4>
		node_tx = tx->node;
   1b146:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   1b148:	2801      	cmp	r0, #1
   1b14a:	d9d9      	bls.n	1b100 <tx_cmplt_get+0x44>
   1b14c:	f030 0303 	bics.w	r3, r0, #3
   1b150:	d00a      	beq.n	1b168 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   1b152:	7903      	ldrb	r3, [r0, #4]
   1b154:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   1b158:	3b01      	subs	r3, #1
   1b15a:	2b01      	cmp	r3, #1
   1b15c:	d90b      	bls.n	1b176 <tx_cmplt_get+0xba>
   1b15e:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
   1b162:	f002 fbb1 	bl	1d8c8 <ll_tx_mem_release>
   1b166:	e7d2      	b.n	1b10e <tx_cmplt_get+0x52>
   1b168:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   1b16c:	e7cf      	b.n	1b10e <tx_cmplt_get+0x52>
		return 0;
   1b16e:	2700      	movs	r7, #0

	return cmplt;
}
   1b170:	4638      	mov	r0, r7
   1b172:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   1b176:	3701      	adds	r7, #1
   1b178:	f8c2 b004 	str.w	fp, [r2, #4]
   1b17c:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   1b17e:	e7f0      	b.n	1b162 <tx_cmplt_get+0xa6>
   1b180:	20000378 	.word	0x20000378
   1b184:	2000037c 	.word	0x2000037c

0001b188 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
   1b188:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b18c:	4f3c      	ldr	r7, [pc, #240]	; (1b280 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
   1b18e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1b284 <ull_done+0xfc>
   1b192:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 1b288 <ull_done+0x100>
{
   1b196:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1b198:	e9d7 0100 	ldrd	r0, r1, [r7]
   1b19c:	aa01      	add	r2, sp, #4
   1b19e:	f7fd f8a7 	bl	182f0 <memq_peek>
		if (link) {
   1b1a2:	4604      	mov	r4, r0
   1b1a4:	2800      	cmp	r0, #0
   1b1a6:	d03e      	beq.n	1b226 <ull_done+0x9e>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
   1b1a8:	6878      	ldr	r0, [r7, #4]
   1b1aa:	2200      	movs	r2, #0
   1b1ac:	4639      	mov	r1, r7
   1b1ae:	f7fd f8a7 	bl	18300 <memq_dequeue>
			rx_demux_event_done(link, done);
   1b1b2:	9e01      	ldr	r6, [sp, #4]
	ull_hdr = done->param;
   1b1b4:	69f5      	ldr	r5, [r6, #28]
	if (ull_hdr) {
   1b1b6:	b135      	cbz	r5, 1b1c6 <ull_done+0x3e>
	return hdr->ref;
   1b1b8:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
   1b1ba:	2b00      	cmp	r3, #0
   1b1bc:	d052      	beq.n	1b264 <ull_done+0xdc>
	return hdr->ref--;
   1b1be:	782b      	ldrb	r3, [r5, #0]
   1b1c0:	3b01      	subs	r3, #1
   1b1c2:	b2db      	uxtb	r3, r3
   1b1c4:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
   1b1c6:	f896 3020 	ldrb.w	r3, [r6, #32]
   1b1ca:	b123      	cbz	r3, 1b1d6 <ull_done+0x4e>
   1b1cc:	2b01      	cmp	r3, #1
   1b1ce:	d13b      	bne.n	1b248 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
   1b1d0:	4630      	mov	r0, r6
   1b1d2:	f005 fe9f 	bl	20f14 <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1b1d6:	4a2d      	ldr	r2, [pc, #180]	; (1b28c <ull_done+0x104>)
	last = last + 1;
   1b1d8:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   1b1da:	f892 c001 	ldrb.w	ip, [r2, #1]
   1b1de:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
   1b1e0:	3301      	adds	r3, #1
		LL_ASSERT(0);
		break;
	}

	/* release done */
	done->extra.type = 0U;
   1b1e2:	2000      	movs	r0, #0
   1b1e4:	b2db      	uxtb	r3, r3
		last = 0U;
   1b1e6:	459c      	cmp	ip, r3
   1b1e8:	bf08      	it	eq
   1b1ea:	4603      	moveq	r3, r0
	if (last == first) {
   1b1ec:	4299      	cmp	r1, r3
   1b1ee:	f886 0020 	strb.w	r0, [r6, #32]
   1b1f2:	d01b      	beq.n	1b22c <ull_done+0xa4>
	done->hdr.link = link;
   1b1f4:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b1f6:	78d0      	ldrb	r0, [r2, #3]
   1b1f8:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b1fa:	fb00 2101 	mla	r1, r0, r1, r2
   1b1fe:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1b200:	70d3      	strb	r3, [r2, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   1b202:	2d00      	cmp	r5, #0
   1b204:	d0c8      	beq.n	1b198 <ull_done+0x10>
	return hdr->ref;
   1b206:	782b      	ldrb	r3, [r5, #0]
   1b208:	2b00      	cmp	r3, #0
   1b20a:	d1c5      	bne.n	1b198 <ull_done+0x10>
   1b20c:	696b      	ldr	r3, [r5, #20]
   1b20e:	2b00      	cmp	r3, #0
   1b210:	d0c2      	beq.n	1b198 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   1b212:	69a8      	ldr	r0, [r5, #24]
   1b214:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
   1b216:	e9d7 0100 	ldrd	r0, r1, [r7]
   1b21a:	aa01      	add	r2, sp, #4
   1b21c:	f7fd f868 	bl	182f0 <memq_peek>
		if (link) {
   1b220:	4604      	mov	r4, r0
   1b222:	2800      	cmp	r0, #0
   1b224:	d1c0      	bne.n	1b1a8 <ull_done+0x20>
}
   1b226:	b003      	add	sp, #12
   1b228:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
   1b22c:	4918      	ldr	r1, [pc, #96]	; (1b290 <ull_done+0x108>)
   1b22e:	4819      	ldr	r0, [pc, #100]	; (1b294 <ull_done+0x10c>)
   1b230:	f640 13bc 	movw	r3, #2492	; 0x9bc
   1b234:	4642      	mov	r2, r8
   1b236:	f00c fc84 	bl	27b42 <printk>
   1b23a:	4040      	eors	r0, r0
   1b23c:	f380 8811 	msr	BASEPRI, r0
   1b240:	f04f 0003 	mov.w	r0, #3
   1b244:	df02      	svc	2
   1b246:	e7dc      	b.n	1b202 <ull_done+0x7a>
		LL_ASSERT(0);
   1b248:	4913      	ldr	r1, [pc, #76]	; (1b298 <ull_done+0x110>)
   1b24a:	4812      	ldr	r0, [pc, #72]	; (1b294 <ull_done+0x10c>)
   1b24c:	f640 13b5 	movw	r3, #2485	; 0x9b5
   1b250:	4642      	mov	r2, r8
   1b252:	f00c fc76 	bl	27b42 <printk>
   1b256:	4040      	eors	r0, r0
   1b258:	f380 8811 	msr	BASEPRI, r0
   1b25c:	f04f 0003 	mov.w	r0, #3
   1b260:	df02      	svc	2
		break;
   1b262:	e7b8      	b.n	1b1d6 <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
   1b264:	480b      	ldr	r0, [pc, #44]	; (1b294 <ull_done+0x10c>)
   1b266:	f640 137f 	movw	r3, #2431	; 0x97f
   1b26a:	4642      	mov	r2, r8
   1b26c:	4649      	mov	r1, r9
   1b26e:	f00c fc68 	bl	27b42 <printk>
   1b272:	4040      	eors	r0, r0
   1b274:	f380 8811 	msr	BASEPRI, r0
   1b278:	f04f 0003 	mov.w	r0, #3
   1b27c:	df02      	svc	2
   1b27e:	e79e      	b.n	1b1be <ull_done+0x36>
   1b280:	20001888 	.word	0x20001888
   1b284:	0002bb4c 	.word	0x0002bb4c
   1b288:	0002bb90 	.word	0x0002bb90
   1b28c:	20000234 	.word	0x20000234
   1b290:	0002bba8 	.word	0x0002bba8
   1b294:	0002b8dc 	.word	0x0002b8dc
   1b298:	0002b974 	.word	0x0002b974

0001b29c <rx_alloc>:
{
   1b29c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   1b2a0:	4e37      	ldr	r6, [pc, #220]	; (1b380 <rx_alloc+0xe4>)
   1b2a2:	7833      	ldrb	r3, [r6, #0]
   1b2a4:	4298      	cmp	r0, r3
   1b2a6:	bf28      	it	cs
   1b2a8:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b2aa:	b380      	cbz	r0, 1b30e <rx_alloc+0x72>
   1b2ac:	4d35      	ldr	r5, [pc, #212]	; (1b384 <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   1b2ae:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1b388 <rx_alloc+0xec>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b2b2:	78ec      	ldrb	r4, [r5, #3]
   1b2b4:	f100 39ff 	add.w	r9, r0, #4294967295	; 0xffffffff
   1b2b8:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
   1b2bc:	1d37      	adds	r7, r6, #4
	if (last == count) {
   1b2be:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b2c0:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1b2c2:	3401      	adds	r4, #1
   1b2c4:	b2e4      	uxtb	r4, r4
		last = 0U;
   1b2c6:	42a2      	cmp	r2, r4
   1b2c8:	bf08      	it	eq
   1b2ca:	2400      	moveq	r4, #0
	if (last == first) {
   1b2cc:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   1b2ce:	4638      	mov	r0, r7
   1b2d0:	d04b      	beq.n	1b36a <rx_alloc+0xce>
   1b2d2:	f7fc ff9f 	bl	18214 <mem_acquire>
   1b2d6:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1b2d8:	4640      	mov	r0, r8
		if (!link) {
   1b2da:	f1ba 0f00 	cmp.w	sl, #0
   1b2de:	d042      	beq.n	1b366 <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   1b2e0:	f7fc ff98 	bl	18214 <mem_acquire>
		if (!rx) {
   1b2e4:	2800      	cmp	r0, #0
   1b2e6:	d045      	beq.n	1b374 <rx_alloc+0xd8>
		rx->link = link;
   1b2e8:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b2ec:	78ea      	ldrb	r2, [r5, #3]
   1b2ee:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b2f0:	fb02 5303 	mla	r3, r2, r3, r5
   1b2f4:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1b2f6:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1b2f8:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b2fa:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
	mem_link_rx.quota_pdu += delta;
   1b2fe:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b300:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
   1b304:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b306:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1b30a:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b30c:	d1d7      	bne.n	1b2be <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
   1b30e:	b353      	cbz	r3, 1b366 <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1b310:	4d1e      	ldr	r5, [pc, #120]	; (1b38c <rx_alloc+0xf0>)
		link = mem_acquire(&mem_link_rx.free);
   1b312:	4f1f      	ldr	r7, [pc, #124]	; (1b390 <rx_alloc+0xf4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1b314:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1b316:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1b388 <rx_alloc+0xec>
		link->mem = NULL;
   1b31a:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   1b31e:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1b320:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1b322:	3401      	adds	r4, #1
   1b324:	b2e4      	uxtb	r4, r4
		last = 0U;
   1b326:	42a2      	cmp	r2, r4
   1b328:	bf08      	it	eq
   1b32a:	2400      	moveq	r4, #0
	if (last == first) {
   1b32c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   1b32e:	4638      	mov	r0, r7
   1b330:	d019      	beq.n	1b366 <rx_alloc+0xca>
   1b332:	f7fc ff6f 	bl	18214 <mem_acquire>
   1b336:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1b338:	4640      	mov	r0, r8
		if (!link) {
   1b33a:	f1ba 0f00 	cmp.w	sl, #0
   1b33e:	d012      	beq.n	1b366 <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   1b340:	f7fc ff68 	bl	18214 <mem_acquire>
		if (!rx) {
   1b344:	b1b0      	cbz	r0, 1b374 <rx_alloc+0xd8>
		link->mem = NULL;
   1b346:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   1b34a:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b34e:	78ea      	ldrb	r2, [r5, #3]
   1b350:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b352:	fb02 5303 	mla	r3, r2, r3, r5
   1b356:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1b358:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1b35a:	70ec      	strb	r4, [r5, #3]
   1b35c:	3b01      	subs	r3, #1
   1b35e:	b2db      	uxtb	r3, r3
   1b360:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   1b362:	2b00      	cmp	r3, #0
   1b364:	d1db      	bne.n	1b31e <rx_alloc+0x82>
}
   1b366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
   1b36a:	f1b9 0f00 	cmp.w	r9, #0
   1b36e:	d0fa      	beq.n	1b366 <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
   1b370:	7833      	ldrb	r3, [r6, #0]
   1b372:	e7cc      	b.n	1b30e <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
   1b374:	4650      	mov	r0, sl
   1b376:	4906      	ldr	r1, [pc, #24]	; (1b390 <rx_alloc+0xf4>)
}
   1b378:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   1b37c:	f7fc bf64 	b.w	18248 <mem_release>
   1b380:	20001594 	.word	0x20001594
   1b384:	2000025c 	.word	0x2000025c
   1b388:	200015f4 	.word	0x200015f4
   1b38c:	20000248 	.word	0x20000248
   1b390:	20001598 	.word	0x20001598

0001b394 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1b394:	4b46      	ldr	r3, [pc, #280]	; (1b4b0 <init_reset+0x11c>)
{
   1b396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1b39a:	1d18      	adds	r0, r3, #4
   1b39c:	2203      	movs	r2, #3
   1b39e:	2134      	movs	r1, #52	; 0x34
   1b3a0:	f7fc ff08 	bl	181b4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   1b3a4:	4b43      	ldr	r3, [pc, #268]	; (1b4b4 <init_reset+0x120>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1b3a6:	4d44      	ldr	r5, [pc, #272]	; (1b4b8 <init_reset+0x124>)
		link = mem_acquire(&mem_link_done.free);
   1b3a8:	4f42      	ldr	r7, [pc, #264]	; (1b4b4 <init_reset+0x120>)
		rx = mem_acquire(&mem_done.free);
   1b3aa:	f8df 8104 	ldr.w	r8, [pc, #260]	; 1b4b0 <init_reset+0x11c>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
   1b3ae:	2204      	movs	r2, #4
   1b3b0:	2108      	movs	r1, #8
   1b3b2:	1898      	adds	r0, r3, r2
   1b3b4:	f7fc fefe 	bl	181b4 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1b3b8:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   1b3ba:	786a      	ldrb	r2, [r5, #1]
   1b3bc:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1b3be:	3401      	adds	r4, #1
   1b3c0:	b2e4      	uxtb	r4, r4
		last = 0U;
   1b3c2:	42a2      	cmp	r2, r4
   1b3c4:	bf08      	it	eq
   1b3c6:	2400      	moveq	r4, #0
	if (last == first) {
   1b3c8:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   1b3ca:	4638      	mov	r0, r7
   1b3cc:	d013      	beq.n	1b3f6 <init_reset+0x62>
   1b3ce:	f7fc ff21 	bl	18214 <mem_acquire>
   1b3d2:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   1b3d4:	4640      	mov	r0, r8
		if (!link) {
   1b3d6:	b176      	cbz	r6, 1b3f6 <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   1b3d8:	f7fc ff1c 	bl	18214 <mem_acquire>
		if (!rx) {
   1b3dc:	b138      	cbz	r0, 1b3ee <init_reset+0x5a>
		rx->link = link;
   1b3de:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b3e0:	78ea      	ldrb	r2, [r5, #3]
   1b3e2:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b3e4:	fb02 5303 	mla	r3, r2, r3, r5
   1b3e8:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1b3ea:	70ec      	strb	r4, [r5, #3]
}
   1b3ec:	e7e5      	b.n	1b3ba <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   1b3ee:	4931      	ldr	r1, [pc, #196]	; (1b4b4 <init_reset+0x120>)
   1b3f0:	4630      	mov	r0, r6
   1b3f2:	f7fc ff29 	bl	18248 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1b3f6:	4b31      	ldr	r3, [pc, #196]	; (1b4bc <init_reset+0x128>)
   1b3f8:	2209      	movs	r2, #9
   1b3fa:	1d18      	adds	r0, r3, #4
   1b3fc:	2148      	movs	r1, #72	; 0x48
   1b3fe:	f7fc fed9 	bl	181b4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   1b402:	4b2f      	ldr	r3, [pc, #188]	; (1b4c0 <init_reset+0x12c>)
   1b404:	220b      	movs	r2, #11
   1b406:	1d18      	adds	r0, r3, #4
   1b408:	2108      	movs	r1, #8
   1b40a:	f7fc fed3 	bl	181b4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   1b40e:	482c      	ldr	r0, [pc, #176]	; (1b4c0 <init_reset+0x12c>)
   1b410:	f7fc ff00 	bl	18214 <mem_acquire>
	LL_ASSERT(link);
   1b414:	4604      	mov	r4, r0
   1b416:	b308      	cbz	r0, 1b45c <init_reset+0xc8>
	MEMQ_INIT(ull_rx, link);
   1b418:	4a2a      	ldr	r2, [pc, #168]	; (1b4c4 <init_reset+0x130>)
   1b41a:	4620      	mov	r0, r4
   1b41c:	1f11      	subs	r1, r2, #4
   1b41e:	f7fc ff4f 	bl	182c0 <memq_init>
	link = mem_acquire(&mem_link_done.free);
   1b422:	4824      	ldr	r0, [pc, #144]	; (1b4b4 <init_reset+0x120>)
   1b424:	f7fc fef6 	bl	18214 <mem_acquire>
	LL_ASSERT(link);
   1b428:	4604      	mov	r4, r0
   1b42a:	b328      	cbz	r0, 1b478 <init_reset+0xe4>
	MEMQ_INIT(ull_done, link);
   1b42c:	4a26      	ldr	r2, [pc, #152]	; (1b4c8 <init_reset+0x134>)
   1b42e:	4620      	mov	r0, r4
   1b430:	1f11      	subs	r1, r2, #4
   1b432:	f7fc ff45 	bl	182c0 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1b436:	4822      	ldr	r0, [pc, #136]	; (1b4c0 <init_reset+0x12c>)
   1b438:	f7fc feec 	bl	18214 <mem_acquire>
	LL_ASSERT(link);
   1b43c:	4604      	mov	r4, r0
   1b43e:	b348      	cbz	r0, 1b494 <init_reset+0x100>
	MEMQ_INIT(ll_rx, link);
   1b440:	4a22      	ldr	r2, [pc, #136]	; (1b4cc <init_reset+0x138>)
   1b442:	4620      	mov	r0, r4
   1b444:	1f11      	subs	r1, r2, #4
   1b446:	f7fc ff3b 	bl	182c0 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1b44a:	4b21      	ldr	r3, [pc, #132]	; (1b4d0 <init_reset+0x13c>)
   1b44c:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   1b44e:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   1b450:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   1b452:	f7ff ff23 	bl	1b29c <rx_alloc>
}
   1b456:	2000      	movs	r0, #0
   1b458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
   1b45c:	4a1d      	ldr	r2, [pc, #116]	; (1b4d4 <init_reset+0x140>)
   1b45e:	491e      	ldr	r1, [pc, #120]	; (1b4d8 <init_reset+0x144>)
   1b460:	481e      	ldr	r0, [pc, #120]	; (1b4dc <init_reset+0x148>)
   1b462:	f240 7342 	movw	r3, #1858	; 0x742
   1b466:	f00c fb6c 	bl	27b42 <printk>
   1b46a:	4040      	eors	r0, r0
   1b46c:	f380 8811 	msr	BASEPRI, r0
   1b470:	f04f 0003 	mov.w	r0, #3
   1b474:	df02      	svc	2
   1b476:	e7cf      	b.n	1b418 <init_reset+0x84>
	LL_ASSERT(link);
   1b478:	4a16      	ldr	r2, [pc, #88]	; (1b4d4 <init_reset+0x140>)
   1b47a:	4917      	ldr	r1, [pc, #92]	; (1b4d8 <init_reset+0x144>)
   1b47c:	4817      	ldr	r0, [pc, #92]	; (1b4dc <init_reset+0x148>)
   1b47e:	f240 734a 	movw	r3, #1866	; 0x74a
   1b482:	f00c fb5e 	bl	27b42 <printk>
   1b486:	4040      	eors	r0, r0
   1b488:	f380 8811 	msr	BASEPRI, r0
   1b48c:	f04f 0003 	mov.w	r0, #3
   1b490:	df02      	svc	2
   1b492:	e7cb      	b.n	1b42c <init_reset+0x98>
	LL_ASSERT(link);
   1b494:	4a0f      	ldr	r2, [pc, #60]	; (1b4d4 <init_reset+0x140>)
   1b496:	4910      	ldr	r1, [pc, #64]	; (1b4d8 <init_reset+0x144>)
   1b498:	4810      	ldr	r0, [pc, #64]	; (1b4dc <init_reset+0x148>)
   1b49a:	f240 7352 	movw	r3, #1874	; 0x752
   1b49e:	f00c fb50 	bl	27b42 <printk>
   1b4a2:	4040      	eors	r0, r0
   1b4a4:	f380 8811 	msr	BASEPRI, r0
   1b4a8:	f04f 0003 	mov.w	r0, #3
   1b4ac:	df02      	svc	2
   1b4ae:	e7c7      	b.n	1b440 <init_reset+0xac>
   1b4b0:	200014d0 	.word	0x200014d0
   1b4b4:	20001570 	.word	0x20001570
   1b4b8:	20000234 	.word	0x20000234
   1b4bc:	200015f4 	.word	0x200015f4
   1b4c0:	20001598 	.word	0x20001598
   1b4c4:	20001894 	.word	0x20001894
   1b4c8:	2000188c 	.word	0x2000188c
   1b4cc:	20001884 	.word	0x20001884
   1b4d0:	20001594 	.word	0x20001594
   1b4d4:	0002bb4c 	.word	0x0002bb4c
   1b4d8:	0002be98 	.word	0x0002be98
   1b4dc:	0002b8dc 	.word	0x0002b8dc

0001b4e0 <rx_demux>:
{
   1b4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b4e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 1b694 <rx_demux+0x1b4>
	k_sem_give(sem_recv);
   1b4e8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 1b698 <rx_demux+0x1b8>
		LL_ASSERT(0);
   1b4ec:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 1b69c <rx_demux+0x1bc>
   1b4f0:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 1b6a0 <rx_demux+0x1c0>
{
   1b4f4:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1b4f6:	e9d8 0100 	ldrd	r0, r1, [r8]
   1b4fa:	aa03      	add	r2, sp, #12
   1b4fc:	f7fc fef8 	bl	182f0 <memq_peek>
		if (link) {
   1b500:	4605      	mov	r5, r0
   1b502:	2800      	cmp	r0, #0
   1b504:	d035      	beq.n	1b572 <rx_demux+0x92>
			LL_ASSERT(rx);
   1b506:	9b03      	ldr	r3, [sp, #12]
   1b508:	2b00      	cmp	r3, #0
   1b50a:	f000 80a5 	beq.w	1b658 <rx_demux+0x178>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1b50e:	7818      	ldrb	r0, [r3, #0]
   1b510:	aa04      	add	r2, sp, #16
   1b512:	a902      	add	r1, sp, #8
   1b514:	f005 ff84 	bl	21420 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   1b518:	4604      	mov	r4, r0
   1b51a:	2800      	cmp	r0, #0
   1b51c:	d055      	beq.n	1b5ca <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   1b51e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1b522:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1b526:	780f      	ldrb	r7, [r1, #0]
   1b528:	f8ad 200a 	strh.w	r2, [sp, #10]
   1b52c:	ae05      	add	r6, sp, #20
   1b52e:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1b530:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1b534:	f005 ff90 	bl	21458 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1b538:	4621      	mov	r1, r4
   1b53a:	9a05      	ldr	r2, [sp, #20]
   1b53c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1b540:	f005 ffd4 	bl	214ec <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1b544:	4620      	mov	r0, r4
   1b546:	f005 ff43 	bl	213d0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1b54a:	4632      	mov	r2, r6
   1b54c:	4629      	mov	r1, r5
   1b54e:	4638      	mov	r0, r7
   1b550:	f005 ff66 	bl	21420 <ull_conn_ack_by_last_peek>
	} while (link);
   1b554:	4604      	mov	r4, r0
   1b556:	2800      	cmp	r0, #0
   1b558:	d1ec      	bne.n	1b534 <rx_demux+0x54>
	k_sem_give(sem_recv);
   1b55a:	f8d9 0000 	ldr.w	r0, [r9]
   1b55e:	f00b faf9 	bl	26b54 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1b562:	e9d8 0100 	ldrd	r0, r1, [r8]
   1b566:	aa03      	add	r2, sp, #12
   1b568:	f7fc fec2 	bl	182f0 <memq_peek>
		if (link) {
   1b56c:	4605      	mov	r5, r0
   1b56e:	2800      	cmp	r0, #0
   1b570:	d1c9      	bne.n	1b506 <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   1b572:	aa04      	add	r2, sp, #16
   1b574:	a902      	add	r1, sp, #8
   1b576:	f10d 0007 	add.w	r0, sp, #7
   1b57a:	f005 ff35 	bl	213e8 <ull_conn_ack_peek>
			if (link) {
   1b57e:	4604      	mov	r4, r0
   1b580:	2800      	cmp	r0, #0
   1b582:	d066      	beq.n	1b652 <rx_demux+0x172>
				rx_demux_conn_tx_ack(ack_last, handle,
   1b584:	9b04      	ldr	r3, [sp, #16]
   1b586:	9305      	str	r3, [sp, #20]
   1b588:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1b58c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   1b590:	f8ad 300a 	strh.w	r3, [sp, #10]
   1b594:	ae05      	add	r6, sp, #20
   1b596:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
   1b59a:	f005 ff5d 	bl	21458 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   1b59e:	4621      	mov	r1, r4
   1b5a0:	9a05      	ldr	r2, [sp, #20]
   1b5a2:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1b5a6:	f005 ffa1 	bl	214ec <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	f005 ff10 	bl	213d0 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1b5b0:	4632      	mov	r2, r6
   1b5b2:	4629      	mov	r1, r5
   1b5b4:	4638      	mov	r0, r7
   1b5b6:	f005 ff33 	bl	21420 <ull_conn_ack_by_last_peek>
	} while (link);
   1b5ba:	4604      	mov	r4, r0
   1b5bc:	2800      	cmp	r0, #0
   1b5be:	d1ec      	bne.n	1b59a <rx_demux+0xba>
	k_sem_give(sem_recv);
   1b5c0:	f8d9 0000 	ldr.w	r0, [r9]
   1b5c4:	f00b fac6 	bl	26b54 <z_impl_k_sem_give>
			if (nack) {
   1b5c8:	e7cb      	b.n	1b562 <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
   1b5ca:	9b03      	ldr	r3, [sp, #12]
   1b5cc:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1b5ce:	791b      	ldrb	r3, [r3, #4]
   1b5d0:	3b01      	subs	r3, #1
   1b5d2:	2b14      	cmp	r3, #20
   1b5d4:	d80c      	bhi.n	1b5f0 <rx_demux+0x110>
   1b5d6:	e8df f003 	tbb	[pc, r3]
   1b5da:	0b19      	.short	0x0b19
   1b5dc:	0b0b0b37 	.word	0x0b0b0b37
   1b5e0:	0b0b0b0b 	.word	0x0b0b0b0b
   1b5e4:	0b0b0b0b 	.word	0x0b0b0b0b
   1b5e8:	0b0b0b0b 	.word	0x0b0b0b0b
   1b5ec:	2c0b      	.short	0x2c0b
   1b5ee:	19          	.byte	0x19
   1b5ef:	00          	.byte	0x00
		LL_ASSERT(0);
   1b5f0:	482c      	ldr	r0, [pc, #176]	; (1b6a4 <rx_demux+0x1c4>)
   1b5f2:	f640 136c 	movw	r3, #2412	; 0x96c
   1b5f6:	4652      	mov	r2, sl
   1b5f8:	4659      	mov	r1, fp
   1b5fa:	f00c faa2 	bl	27b42 <printk>
   1b5fe:	4040      	eors	r0, r0
   1b600:	f380 8811 	msr	BASEPRI, r0
   1b604:	f04f 0003 	mov.w	r0, #3
   1b608:	df02      	svc	2
			if (nack) {
   1b60a:	e774      	b.n	1b4f6 <rx_demux+0x16>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b60c:	4921      	ldr	r1, [pc, #132]	; (1b694 <rx_demux+0x1b4>)
   1b60e:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1b612:	2200      	movs	r2, #0
   1b614:	f7fc fe74 	bl	18300 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b618:	4b23      	ldr	r3, [pc, #140]	; (1b6a8 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
   1b61a:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b61c:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1b61e:	4628      	mov	r0, r5
   1b620:	4a22      	ldr	r2, [pc, #136]	; (1b6ac <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b622:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1b624:	f7fc fe5a 	bl	182dc <memq_enqueue>
	k_sem_give(sem_recv);
   1b628:	f8d9 0000 	ldr.w	r0, [r9]
   1b62c:	f00b fa92 	bl	26b54 <z_impl_k_sem_give>
			if (nack) {
   1b630:	e797      	b.n	1b562 <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b632:	4918      	ldr	r1, [pc, #96]	; (1b694 <rx_demux+0x1b4>)
   1b634:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1b638:	2200      	movs	r2, #0
   1b63a:	f7fc fe61 	bl	18300 <memq_dequeue>
		ull_conn_setup(link, rx);
   1b63e:	9905      	ldr	r1, [sp, #20]
   1b640:	4628      	mov	r0, r5
   1b642:	f002 fc67 	bl	1df14 <ull_conn_setup>
			if (nack) {
   1b646:	e756      	b.n	1b4f6 <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
   1b648:	a905      	add	r1, sp, #20
   1b64a:	4628      	mov	r0, r5
   1b64c:	f002 fcbe 	bl	1dfcc <ull_conn_rx>
		if (nack) {
   1b650:	b188      	cbz	r0, 1b676 <rx_demux+0x196>
}
   1b652:	b007      	add	sp, #28
   1b654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   1b658:	4915      	ldr	r1, [pc, #84]	; (1b6b0 <rx_demux+0x1d0>)
   1b65a:	4812      	ldr	r0, [pc, #72]	; (1b6a4 <rx_demux+0x1c4>)
   1b65c:	f640 031b 	movw	r3, #2075	; 0x81b
   1b660:	4652      	mov	r2, sl
   1b662:	f00c fa6e 	bl	27b42 <printk>
   1b666:	4040      	eors	r0, r0
   1b668:	f380 8811 	msr	BASEPRI, r0
   1b66c:	f04f 0003 	mov.w	r0, #3
   1b670:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   1b672:	9b03      	ldr	r3, [sp, #12]
   1b674:	e74b      	b.n	1b50e <rx_demux+0x2e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1b676:	4907      	ldr	r1, [pc, #28]	; (1b694 <rx_demux+0x1b4>)
   1b678:	4602      	mov	r2, r0
   1b67a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   1b67e:	f7fc fe3f 	bl	18300 <memq_dequeue>
		if (rx) {
   1b682:	9905      	ldr	r1, [sp, #20]
   1b684:	2900      	cmp	r1, #0
   1b686:	f43f af36 	beq.w	1b4f6 <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b68a:	4b07      	ldr	r3, [pc, #28]	; (1b6a8 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1b68c:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1b68e:	78db      	ldrb	r3, [r3, #3]
   1b690:	e7c6      	b.n	1b620 <rx_demux+0x140>
   1b692:	bf00      	nop
   1b694:	20001890 	.word	0x20001890
   1b698:	20001898 	.word	0x20001898
   1b69c:	0002bb4c 	.word	0x0002bb4c
   1b6a0:	0002b974 	.word	0x0002b974
   1b6a4:	0002b8dc 	.word	0x0002b8dc
   1b6a8:	20000378 	.word	0x20000378
   1b6ac:	20001884 	.word	0x20001884
   1b6b0:	0002bbb8 	.word	0x0002bbb8

0001b6b4 <ll_init>:
{
   1b6b4:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   1b6b6:	4b2b      	ldr	r3, [pc, #172]	; (1b764 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1b6b8:	4d2b      	ldr	r5, [pc, #172]	; (1b768 <ll_init+0xb4>)
	sem_recv = sem_rx;
   1b6ba:	6018      	str	r0, [r3, #0]
{
   1b6bc:	b087      	sub	sp, #28
	cntr_init();
   1b6be:	f009 f8f3 	bl	248a8 <cntr_init>
	mayfly_init();
   1b6c2:	f7fc fe2d 	bl	18320 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1b6c6:	4a29      	ldr	r2, [pc, #164]	; (1b76c <ll_init+0xb8>)
   1b6c8:	4929      	ldr	r1, [pc, #164]	; (1b770 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1b6ca:	482a      	ldr	r0, [pc, #168]	; (1b774 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1b6cc:	e9cd 2504 	strd	r2, r5, [sp, #16]
   1b6d0:	4a29      	ldr	r2, [pc, #164]	; (1b778 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1b6d2:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1b6d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1b6d8:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1b6da:	210c      	movs	r1, #12
   1b6dc:	e9cd 0100 	strd	r0, r1, [sp]
   1b6e0:	4a26      	ldr	r2, [pc, #152]	; (1b77c <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   1b6e2:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   1b6e4:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   1b6e6:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
   1b6e8:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   1b6ea:	4619      	mov	r1, r3
   1b6ec:	2000      	movs	r0, #0
   1b6ee:	f7fd fef9 	bl	194e4 <ticker_init>
	LL_ASSERT(!err);
   1b6f2:	bb40      	cbnz	r0, 1b746 <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b6f4:	2201      	movs	r2, #1
   1b6f6:	2100      	movs	r1, #0
   1b6f8:	4821      	ldr	r0, [pc, #132]	; (1b780 <ll_init+0xcc>)
   1b6fa:	f00f f88d 	bl	2a818 <z_impl_k_sem_init>
	err = lll_init();
   1b6fe:	f007 fb57 	bl	22db0 <lll_init>
	if (err) {
   1b702:	4604      	mov	r4, r0
   1b704:	b110      	cbz	r0, 1b70c <ll_init+0x58>
}
   1b706:	4620      	mov	r0, r4
   1b708:	b007      	add	sp, #28
   1b70a:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   1b70c:	f7ff fe42 	bl	1b394 <init_reset>
	if (err) {
   1b710:	4604      	mov	r4, r0
   1b712:	2800      	cmp	r0, #0
   1b714:	d1f7      	bne.n	1b706 <ll_init+0x52>
	err = lll_adv_init();
   1b716:	f007 ff85 	bl	23624 <lll_adv_init>
	if (err) {
   1b71a:	4604      	mov	r4, r0
   1b71c:	2800      	cmp	r0, #0
   1b71e:	d1f2      	bne.n	1b706 <ll_init+0x52>
	err = ull_adv_init();
   1b720:	f001 f9c2 	bl	1caa8 <ull_adv_init>
	if (err) {
   1b724:	4604      	mov	r4, r0
   1b726:	2800      	cmp	r0, #0
   1b728:	d1ed      	bne.n	1b706 <ll_init+0x52>
	err = lll_conn_init();
   1b72a:	f008 fc1d 	bl	23f68 <lll_conn_init>
	if (err) {
   1b72e:	4604      	mov	r4, r0
   1b730:	2800      	cmp	r0, #0
   1b732:	d1e8      	bne.n	1b706 <ll_init+0x52>
	err = ull_conn_init();
   1b734:	f002 fb9a 	bl	1de6c <ull_conn_init>
	if (err) {
   1b738:	4604      	mov	r4, r0
   1b73a:	2800      	cmp	r0, #0
   1b73c:	d1e3      	bne.n	1b706 <ll_init+0x52>
		ull_filter_reset(true);
   1b73e:	2001      	movs	r0, #1
   1b740:	f007 f892 	bl	22868 <ull_filter_reset>
	return  0;
   1b744:	e7df      	b.n	1b706 <ll_init+0x52>
	LL_ASSERT(!err);
   1b746:	4a0f      	ldr	r2, [pc, #60]	; (1b784 <ll_init+0xd0>)
   1b748:	490f      	ldr	r1, [pc, #60]	; (1b788 <ll_init+0xd4>)
   1b74a:	4810      	ldr	r0, [pc, #64]	; (1b78c <ll_init+0xd8>)
   1b74c:	f44f 73e9 	mov.w	r3, #466	; 0x1d2
   1b750:	f00c f9f7 	bl	27b42 <printk>
   1b754:	4040      	eors	r0, r0
   1b756:	f380 8811 	msr	BASEPRI, r0
   1b75a:	f04f 0003 	mov.w	r0, #3
   1b75e:	df02      	svc	2
   1b760:	e7c8      	b.n	1b6f4 <ll_init+0x40>
   1b762:	bf00      	nop
   1b764:	20001898 	.word	0x20001898
   1b768:	00025551 	.word	0x00025551
   1b76c:	00025401 	.word	0x00025401
   1b770:	0002539d 	.word	0x0002539d
   1b774:	20001be4 	.word	0x20001be4
   1b778:	20001974 	.word	0x20001974
   1b77c:	200018b4 	.word	0x200018b4
   1b780:	2000189c 	.word	0x2000189c
   1b784:	0002bb4c 	.word	0x0002bb4c
   1b788:	0002bb88 	.word	0x0002bb88
   1b78c:	0002b8dc 	.word	0x0002b8dc

0001b790 <ll_reset>:
{
   1b790:	b510      	push	{r4, lr}
   1b792:	b086      	sub	sp, #24
	err = ull_adv_reset();
   1b794:	f001 f998 	bl	1cac8 <ull_adv_reset>
	LL_ASSERT(!err);
   1b798:	2800      	cmp	r0, #0
   1b79a:	d130      	bne.n	1b7fe <ll_reset+0x6e>
	err = ull_conn_reset();
   1b79c:	f002 fb68 	bl	1de70 <ull_conn_reset>
	LL_ASSERT(!err);
   1b7a0:	2800      	cmp	r0, #0
   1b7a2:	d13d      	bne.n	1b820 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   1b7a4:	4b3b      	ldr	r3, [pc, #236]	; (1b894 <ll_reset+0x104>)
   1b7a6:	2400      	movs	r4, #0
		ull_filter_reset(false);
   1b7a8:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
   1b7aa:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   1b7ac:	f007 f85c 	bl	22868 <ull_filter_reset>
	MFIFO_INIT(prep);
   1b7b0:	4839      	ldr	r0, [pc, #228]	; (1b898 <ll_reset+0x108>)
	MFIFO_INIT(done);
   1b7b2:	493a      	ldr	r1, [pc, #232]	; (1b89c <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   1b7b4:	4a3a      	ldr	r2, [pc, #232]	; (1b8a0 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   1b7b6:	4b3b      	ldr	r3, [pc, #236]	; (1b8a4 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   1b7b8:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
   1b7ba:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   1b7bc:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   1b7be:	805c      	strh	r4, [r3, #2]
   1b7c0:	2201      	movs	r2, #1
   1b7c2:	4621      	mov	r1, r4
   1b7c4:	4668      	mov	r0, sp
   1b7c6:	f00f f827 	bl	2a818 <z_impl_k_sem_init>
		mfy.param = &sem;
   1b7ca:	4b37      	ldr	r3, [pc, #220]	; (1b8a8 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1b7cc:	4622      	mov	r2, r4
   1b7ce:	4621      	mov	r1, r4
   1b7d0:	2003      	movs	r0, #3
		mfy.param = &sem;
   1b7d2:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   1b7d6:	f7fc fdf5 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!retval);
   1b7da:	2800      	cmp	r0, #0
   1b7dc:	d14b      	bne.n	1b876 <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   1b7de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b7e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b7e6:	4668      	mov	r0, sp
   1b7e8:	f00b f9da 	bl	26ba0 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   1b7ec:	f001 f986 	bl	1cafc <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   1b7f0:	2800      	cmp	r0, #0
   1b7f2:	d132      	bne.n	1b85a <ll_reset+0xca>
	err = init_reset();
   1b7f4:	f7ff fdce 	bl	1b394 <init_reset>
	LL_ASSERT(!err);
   1b7f8:	bb00      	cbnz	r0, 1b83c <ll_reset+0xac>
}
   1b7fa:	b006      	add	sp, #24
   1b7fc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1b7fe:	4a2b      	ldr	r2, [pc, #172]	; (1b8ac <ll_reset+0x11c>)
   1b800:	492b      	ldr	r1, [pc, #172]	; (1b8b0 <ll_reset+0x120>)
   1b802:	482c      	ldr	r0, [pc, #176]	; (1b8b4 <ll_reset+0x124>)
   1b804:	f240 236e 	movw	r3, #622	; 0x26e
   1b808:	f00c f99b 	bl	27b42 <printk>
   1b80c:	4040      	eors	r0, r0
   1b80e:	f380 8811 	msr	BASEPRI, r0
   1b812:	f04f 0003 	mov.w	r0, #3
   1b816:	df02      	svc	2
	err = ull_conn_reset();
   1b818:	f002 fb2a 	bl	1de70 <ull_conn_reset>
	LL_ASSERT(!err);
   1b81c:	2800      	cmp	r0, #0
   1b81e:	d0c1      	beq.n	1b7a4 <ll_reset+0x14>
   1b820:	4a22      	ldr	r2, [pc, #136]	; (1b8ac <ll_reset+0x11c>)
   1b822:	4923      	ldr	r1, [pc, #140]	; (1b8b0 <ll_reset+0x120>)
   1b824:	4823      	ldr	r0, [pc, #140]	; (1b8b4 <ll_reset+0x124>)
   1b826:	f44f 732e 	mov.w	r3, #696	; 0x2b8
   1b82a:	f00c f98a 	bl	27b42 <printk>
   1b82e:	4040      	eors	r0, r0
   1b830:	f380 8811 	msr	BASEPRI, r0
   1b834:	f04f 0003 	mov.w	r0, #3
   1b838:	df02      	svc	2
   1b83a:	e7b3      	b.n	1b7a4 <ll_reset+0x14>
	LL_ASSERT(!err);
   1b83c:	4a1b      	ldr	r2, [pc, #108]	; (1b8ac <ll_reset+0x11c>)
   1b83e:	491c      	ldr	r1, [pc, #112]	; (1b8b0 <ll_reset+0x120>)
   1b840:	481c      	ldr	r0, [pc, #112]	; (1b8b4 <ll_reset+0x124>)
   1b842:	f44f 733f 	mov.w	r3, #764	; 0x2fc
   1b846:	f00c f97c 	bl	27b42 <printk>
   1b84a:	4040      	eors	r0, r0
   1b84c:	f380 8811 	msr	BASEPRI, r0
   1b850:	f04f 0003 	mov.w	r0, #3
   1b854:	df02      	svc	2
}
   1b856:	b006      	add	sp, #24
   1b858:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   1b85a:	4a14      	ldr	r2, [pc, #80]	; (1b8ac <ll_reset+0x11c>)
   1b85c:	4914      	ldr	r1, [pc, #80]	; (1b8b0 <ll_reset+0x120>)
   1b85e:	4815      	ldr	r0, [pc, #84]	; (1b8b4 <ll_reset+0x124>)
   1b860:	f240 23f7 	movw	r3, #759	; 0x2f7
   1b864:	f00c f96d 	bl	27b42 <printk>
   1b868:	4040      	eors	r0, r0
   1b86a:	f380 8811 	msr	BASEPRI, r0
   1b86e:	f04f 0003 	mov.w	r0, #3
   1b872:	df02      	svc	2
   1b874:	e7be      	b.n	1b7f4 <ll_reset+0x64>
		LL_ASSERT(!retval);
   1b876:	4a0d      	ldr	r2, [pc, #52]	; (1b8ac <ll_reset+0x11c>)
   1b878:	490f      	ldr	r1, [pc, #60]	; (1b8b8 <ll_reset+0x128>)
   1b87a:	480e      	ldr	r0, [pc, #56]	; (1b8b4 <ll_reset+0x124>)
   1b87c:	f240 23ea 	movw	r3, #746	; 0x2ea
   1b880:	f00c f95f 	bl	27b42 <printk>
   1b884:	4040      	eors	r0, r0
   1b886:	f380 8811 	msr	BASEPRI, r0
   1b88a:	f04f 0003 	mov.w	r0, #3
   1b88e:	df02      	svc	2
   1b890:	e7a5      	b.n	1b7de <ll_reset+0x4e>
   1b892:	bf00      	nop
   1b894:	20000378 	.word	0x20000378
   1b898:	20000274 	.word	0x20000274
   1b89c:	20000234 	.word	0x20000234
   1b8a0:	2000025c 	.word	0x2000025c
   1b8a4:	20000248 	.word	0x20000248
   1b8a8:	200003ac 	.word	0x200003ac
   1b8ac:	0002bb4c 	.word	0x0002bb4c
   1b8b0:	0002bb88 	.word	0x0002bb88
   1b8b4:	0002b8dc 	.word	0x0002b8dc
   1b8b8:	0002bbbc 	.word	0x0002bbbc

0001b8bc <ll_rx_get>:
{
   1b8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b8c0:	b085      	sub	sp, #20
   1b8c2:	e9cd 0100 	strd	r0, r1, [sp]
   1b8c6:	4c65      	ldr	r4, [pc, #404]	; (1ba5c <ll_rx_get+0x1a0>)
				mem_release(link, &mem_link_rx.free);
   1b8c8:	4d65      	ldr	r5, [pc, #404]	; (1ba60 <ll_rx_get+0x1a4>)
   1b8ca:	4e66      	ldr	r6, [pc, #408]	; (1ba64 <ll_rx_get+0x1a8>)
	*node_rx = NULL;
   1b8cc:	9a00      	ldr	r2, [sp, #0]
   1b8ce:	2300      	movs	r3, #0
   1b8d0:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   1b8d2:	e9d6 0100 	ldrd	r0, r1, [r6]
   1b8d6:	aa03      	add	r2, sp, #12
   1b8d8:	f7fc fd0a 	bl	182f0 <memq_peek>
	if (link) {
   1b8dc:	4680      	mov	r8, r0
   1b8de:	2800      	cmp	r0, #0
   1b8e0:	f000 80a8 	beq.w	1ba34 <ll_rx_get+0x178>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1b8e4:	9b03      	ldr	r3, [sp, #12]
   1b8e6:	4960      	ldr	r1, [pc, #384]	; (1ba68 <ll_rx_get+0x1ac>)
   1b8e8:	781a      	ldrb	r2, [r3, #0]
   1b8ea:	9801      	ldr	r0, [sp, #4]
   1b8ec:	f7ff fbe6 	bl	1b0bc <tx_cmplt_get>
		if (!cmplt) {
   1b8f0:	2800      	cmp	r0, #0
   1b8f2:	f040 80a4 	bne.w	1ba3e <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   1b8f6:	78a3      	ldrb	r3, [r4, #2]
   1b8f8:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   1b8fc:	78e2      	ldrb	r2, [r4, #3]
   1b8fe:	4607      	mov	r7, r0
   1b900:	f10d 0109 	add.w	r1, sp, #9
   1b904:	f10d 000a 	add.w	r0, sp, #10
   1b908:	f7ff fbd8 	bl	1b0bc <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   1b90c:	ea47 0200 	orr.w	r2, r7, r0
   1b910:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   1b914:	d1f2      	bne.n	1b8fc <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   1b916:	9b03      	ldr	r3, [sp, #12]
   1b918:	7919      	ldrb	r1, [r3, #4]
   1b91a:	2901      	cmp	r1, #1
   1b91c:	f040 8097 	bne.w	1ba4e <ll_rx_get+0x192>
				(void)memq_dequeue(memq_ll_rx.tail,
   1b920:	4950      	ldr	r1, [pc, #320]	; (1ba64 <ll_rx_get+0x1a8>)
   1b922:	6870      	ldr	r0, [r6, #4]
   1b924:	f7fc fcec 	bl	18300 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   1b928:	4950      	ldr	r1, [pc, #320]	; (1ba6c <ll_rx_get+0x1b0>)
   1b92a:	4640      	mov	r0, r8
   1b92c:	f7fc fc8c 	bl	18248 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1b930:	782b      	ldrb	r3, [r5, #0]
   1b932:	2b06      	cmp	r3, #6
   1b934:	d86f      	bhi.n	1ba16 <ll_rx_get+0x15a>
	mem_link_rx.quota_pdu += delta;
   1b936:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   1b938:	494d      	ldr	r1, [pc, #308]	; (1ba70 <ll_rx_get+0x1b4>)
   1b93a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   1b93c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   1b93e:	f7fc fc83 	bl	18248 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1b942:	782b      	ldrb	r3, [r5, #0]
   1b944:	2b00      	cmp	r3, #0
   1b946:	d0c1      	beq.n	1b8cc <ll_rx_get+0x10>
   1b948:	f8df 8128 	ldr.w	r8, [pc, #296]	; 1ba74 <ll_rx_get+0x1b8>
	last = last + 1;
   1b94c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   1b950:	f898 2001 	ldrb.w	r2, [r8, #1]
   1b954:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   1b958:	3701      	adds	r7, #1
   1b95a:	b2ff      	uxtb	r7, r7
		last = 0U;
   1b95c:	42ba      	cmp	r2, r7
   1b95e:	bf08      	it	eq
   1b960:	2700      	moveq	r7, #0
	if (last == first) {
   1b962:	429f      	cmp	r7, r3
   1b964:	d0b2      	beq.n	1b8cc <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   1b966:	4841      	ldr	r0, [pc, #260]	; (1ba6c <ll_rx_get+0x1b0>)
   1b968:	f7fc fc54 	bl	18214 <mem_acquire>
		if (!link) {
   1b96c:	4682      	mov	sl, r0
   1b96e:	2800      	cmp	r0, #0
   1b970:	d0ac      	beq.n	1b8cc <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   1b972:	483f      	ldr	r0, [pc, #252]	; (1ba70 <ll_rx_get+0x1b4>)
   1b974:	f7fc fc4e 	bl	18214 <mem_acquire>
		if (!rx) {
   1b978:	2800      	cmp	r0, #0
   1b97a:	d063      	beq.n	1ba44 <ll_rx_get+0x188>
		rx->link = link;
   1b97c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b980:	f898 2003 	ldrb.w	r2, [r8, #3]
   1b984:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b988:	fb02 8303 	mla	r3, r2, r3, r8
   1b98c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1b98e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1b990:	f888 7003 	strb.w	r7, [r8, #3]
   1b994:	3b01      	subs	r3, #1
   1b996:	b2db      	uxtb	r3, r3
   1b998:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   1b99a:	2b00      	cmp	r3, #0
   1b99c:	d096      	beq.n	1b8cc <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1b99e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 1ba78 <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
   1b9a2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 1ba6c <ll_rx_get+0x1b0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1b9a6:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1b9aa:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 1ba70 <ll_rx_get+0x1b4>
   1b9ae:	e014      	b.n	1b9da <ll_rx_get+0x11e>
		link->mem = NULL;
   1b9b0:	2300      	movs	r3, #0
   1b9b2:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   1b9b6:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b9ba:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1b9be:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b9c2:	fb02 a303 	mla	r3, r2, r3, sl
   1b9c6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1b9c8:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   1b9ca:	f88a 7003 	strb.w	r7, [sl, #3]
   1b9ce:	3b01      	subs	r3, #1
   1b9d0:	b2db      	uxtb	r3, r3
   1b9d2:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   1b9d4:	2b00      	cmp	r3, #0
   1b9d6:	f43f af79 	beq.w	1b8cc <ll_rx_get+0x10>
	if (last == count) {
   1b9da:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1b9de:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   1b9e2:	3701      	adds	r7, #1
   1b9e4:	b2ff      	uxtb	r7, r7
		last = 0U;
   1b9e6:	42ba      	cmp	r2, r7
   1b9e8:	bf08      	it	eq
   1b9ea:	2700      	moveq	r7, #0
	if (last == first) {
   1b9ec:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   1b9ee:	4640      	mov	r0, r8
   1b9f0:	f43f af6c 	beq.w	1b8cc <ll_rx_get+0x10>
   1b9f4:	f7fc fc0e 	bl	18214 <mem_acquire>
   1b9f8:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1b9fa:	4658      	mov	r0, fp
		if (!link) {
   1b9fc:	f1b9 0f00 	cmp.w	r9, #0
   1ba00:	f43f af64 	beq.w	1b8cc <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   1ba04:	f7fc fc06 	bl	18214 <mem_acquire>
		if (!rx) {
   1ba08:	2800      	cmp	r0, #0
   1ba0a:	d1d1      	bne.n	1b9b0 <ll_rx_get+0xf4>
			mem_release(link, &mem_link_rx.free);
   1ba0c:	4917      	ldr	r1, [pc, #92]	; (1ba6c <ll_rx_get+0x1b0>)
   1ba0e:	4648      	mov	r0, r9
   1ba10:	f7fc fc1a 	bl	18248 <mem_release>
			return;
   1ba14:	e75a      	b.n	1b8cc <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1ba16:	4a19      	ldr	r2, [pc, #100]	; (1ba7c <ll_rx_get+0x1c0>)
   1ba18:	4919      	ldr	r1, [pc, #100]	; (1ba80 <ll_rx_get+0x1c4>)
   1ba1a:	481a      	ldr	r0, [pc, #104]	; (1ba84 <ll_rx_get+0x1c8>)
   1ba1c:	f240 535b 	movw	r3, #1371	; 0x55b
   1ba20:	f00c f88f 	bl	27b42 <printk>
   1ba24:	4040      	eors	r0, r0
   1ba26:	f380 8811 	msr	BASEPRI, r0
   1ba2a:	f04f 0003 	mov.w	r0, #3
   1ba2e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1ba30:	782b      	ldrb	r3, [r5, #0]
   1ba32:	e780      	b.n	1b936 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   1ba34:	78e2      	ldrb	r2, [r4, #3]
   1ba36:	490c      	ldr	r1, [pc, #48]	; (1ba68 <ll_rx_get+0x1ac>)
   1ba38:	9801      	ldr	r0, [sp, #4]
   1ba3a:	f7ff fb3f 	bl	1b0bc <tx_cmplt_get>
}
   1ba3e:	b005      	add	sp, #20
   1ba40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   1ba44:	4909      	ldr	r1, [pc, #36]	; (1ba6c <ll_rx_get+0x1b0>)
   1ba46:	4650      	mov	r0, sl
   1ba48:	f7fc fbfe 	bl	18248 <mem_release>
			return;
   1ba4c:	e73e      	b.n	1b8cc <ll_rx_get+0x10>
			*node_rx = rx;
   1ba4e:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   1ba50:	4610      	mov	r0, r2
			*node_rx = rx;
   1ba52:	600b      	str	r3, [r1, #0]
}
   1ba54:	b005      	add	sp, #20
   1ba56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ba5a:	bf00      	nop
   1ba5c:	20000378 	.word	0x20000378
   1ba60:	20001594 	.word	0x20001594
   1ba64:	20001880 	.word	0x20001880
   1ba68:	2000037a 	.word	0x2000037a
   1ba6c:	20001598 	.word	0x20001598
   1ba70:	200015f4 	.word	0x200015f4
   1ba74:	2000025c 	.word	0x2000025c
   1ba78:	20000248 	.word	0x20000248
   1ba7c:	0002bb4c 	.word	0x0002bb4c
   1ba80:	0002bbc4 	.word	0x0002bbc4
   1ba84:	0002b8dc 	.word	0x0002b8dc

0001ba88 <ll_rx_dequeue>:
{
   1ba88:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1ba8a:	495d      	ldr	r1, [pc, #372]	; (1bc00 <ll_rx_dequeue+0x178>)
{
   1ba8c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   1ba8e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1ba90:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   1ba92:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   1ba94:	aa01      	add	r2, sp, #4
   1ba96:	f7fc fc33 	bl	18300 <memq_dequeue>
	LL_ASSERT(link);
   1ba9a:	4604      	mov	r4, r0
   1ba9c:	2800      	cmp	r0, #0
   1ba9e:	d062      	beq.n	1bb66 <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
   1baa0:	4958      	ldr	r1, [pc, #352]	; (1bc04 <ll_rx_dequeue+0x17c>)
   1baa2:	4620      	mov	r0, r4
   1baa4:	f7fc fbd0 	bl	18248 <mem_release>
	switch (rx->type) {
   1baa8:	9a01      	ldr	r2, [sp, #4]
   1baaa:	7913      	ldrb	r3, [r2, #4]
   1baac:	2b1a      	cmp	r3, #26
   1baae:	d80f      	bhi.n	1bad0 <ll_rx_dequeue+0x48>
   1bab0:	e8df f003 	tbb	[pc, r3]
   1bab4:	1d0e0e1d 	.word	0x1d0e0e1d
   1bab8:	0e0e0e0e 	.word	0x0e0e0e0e
   1babc:	0e0e0e0e 	.word	0x0e0e0e0e
   1bac0:	0e0e0e0e 	.word	0x0e0e0e0e
   1bac4:	0e0e0e0e 	.word	0x0e0e0e0e
   1bac8:	1d1d1d2e 	.word	0x1d1d1d2e
   1bacc:	1d1d      	.short	0x1d1d
   1bace:	1d          	.byte	0x1d
   1bacf:	00          	.byte	0x00
		LL_ASSERT(0);
   1bad0:	4a4d      	ldr	r2, [pc, #308]	; (1bc08 <ll_rx_dequeue+0x180>)
   1bad2:	494e      	ldr	r1, [pc, #312]	; (1bc0c <ll_rx_dequeue+0x184>)
   1bad4:	484e      	ldr	r0, [pc, #312]	; (1bc10 <ll_rx_dequeue+0x188>)
   1bad6:	f240 436a 	movw	r3, #1130	; 0x46a
   1bada:	f00c f832 	bl	27b42 <printk>
   1bade:	4040      	eors	r0, r0
   1bae0:	f380 8811 	msr	BASEPRI, r0
   1bae4:	f04f 0003 	mov.w	r0, #3
   1bae8:	df02      	svc	2
}
   1baea:	b002      	add	sp, #8
   1baec:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   1baee:	2b00      	cmp	r3, #0
   1baf0:	d1fb      	bne.n	1baea <ll_rx_dequeue+0x62>
   1baf2:	4a45      	ldr	r2, [pc, #276]	; (1bc08 <ll_rx_dequeue+0x180>)
   1baf4:	4947      	ldr	r1, [pc, #284]	; (1bc14 <ll_rx_dequeue+0x18c>)
   1baf6:	4846      	ldr	r0, [pc, #280]	; (1bc10 <ll_rx_dequeue+0x188>)
   1baf8:	f240 4366 	movw	r3, #1126	; 0x466
   1bafc:	f00c f821 	bl	27b42 <printk>
   1bb00:	4040      	eors	r0, r0
   1bb02:	f380 8811 	msr	BASEPRI, r0
   1bb06:	f04f 0003 	mov.w	r0, #3
   1bb0a:	df02      	svc	2
}
   1bb0c:	b002      	add	sp, #8
   1bb0e:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   1bb10:	7f13      	ldrb	r3, [r2, #28]
   1bb12:	2b3c      	cmp	r3, #60	; 0x3c
   1bb14:	d035      	beq.n	1bb82 <ll_rx_dequeue+0xfa>
   1bb16:	7f53      	ldrb	r3, [r2, #29]
   1bb18:	b1bb      	cbz	r3, 1bb4a <ll_rx_dequeue+0xc2>
			adv = HDR_LLL2ULL(lll);
   1bb1a:	6893      	ldr	r3, [r2, #8]
   1bb1c:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   1bb1e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1bb20:	b120      	cbz	r0, 1bb2c <ll_rx_dequeue+0xa4>
					adv->node_rx_cc_free = NULL;
   1bb22:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   1bb24:	493c      	ldr	r1, [pc, #240]	; (1bc18 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
   1bb26:	6463      	str	r3, [r4, #68]	; 0x44
					mem_release(rx_free, &mem_pdu_rx.free);
   1bb28:	f7fc fb8e 	bl	18248 <mem_release>
			adv->is_enabled = 0U;
   1bb2c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   1bb30:	f36f 0300 	bfc	r3, #0, #1
   1bb34:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
			      ull_adv_is_enabled(0));
   1bb38:	2000      	movs	r0, #0
   1bb3a:	f001 f821 	bl	1cb80 <ull_adv_is_enabled>
			if (!bm) {
   1bb3e:	2800      	cmp	r0, #0
   1bb40:	d1d3      	bne.n	1baea <ll_rx_dequeue+0x62>
				ull_filter_adv_scan_state_cb(0);
   1bb42:	f006 fbef 	bl	22324 <ull_filter_adv_scan_state_cb>
}
   1bb46:	b002      	add	sp, #8
   1bb48:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1bb4a:	4a2f      	ldr	r2, [pc, #188]	; (1bc08 <ll_rx_dequeue+0x180>)
   1bb4c:	492f      	ldr	r1, [pc, #188]	; (1bc0c <ll_rx_dequeue+0x184>)
   1bb4e:	4830      	ldr	r0, [pc, #192]	; (1bc10 <ll_rx_dequeue+0x188>)
   1bb50:	f240 4301 	movw	r3, #1025	; 0x401
   1bb54:	f00b fff5 	bl	27b42 <printk>
   1bb58:	4040      	eors	r0, r0
   1bb5a:	f380 8811 	msr	BASEPRI, r0
   1bb5e:	f04f 0003 	mov.w	r0, #3
   1bb62:	df02      	svc	2
   1bb64:	e7e8      	b.n	1bb38 <ll_rx_dequeue+0xb0>
	LL_ASSERT(link);
   1bb66:	4a28      	ldr	r2, [pc, #160]	; (1bc08 <ll_rx_dequeue+0x180>)
   1bb68:	492c      	ldr	r1, [pc, #176]	; (1bc1c <ll_rx_dequeue+0x194>)
   1bb6a:	4829      	ldr	r0, [pc, #164]	; (1bc10 <ll_rx_dequeue+0x188>)
   1bb6c:	f240 334e 	movw	r3, #846	; 0x34e
   1bb70:	f00b ffe7 	bl	27b42 <printk>
   1bb74:	4040      	eors	r0, r0
   1bb76:	f380 8811 	msr	BASEPRI, r0
   1bb7a:	f04f 0003 	mov.w	r0, #3
   1bb7e:	df02      	svc	2
   1bb80:	e78e      	b.n	1baa0 <ll_rx_dequeue+0x18>
			lll = ftr->param;
   1bb82:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
   1bb84:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
   1bb88:	b1ed      	cbz	r5, 1bbc6 <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
   1bb8a:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
   1bb8c:	2200      	movs	r2, #0
   1bb8e:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
   1bb90:	b163      	cbz	r3, 1bbac <ll_rx_dequeue+0x124>
   1bb92:	4a1d      	ldr	r2, [pc, #116]	; (1bc08 <ll_rx_dequeue+0x180>)
   1bb94:	4922      	ldr	r1, [pc, #136]	; (1bc20 <ll_rx_dequeue+0x198>)
   1bb96:	481e      	ldr	r0, [pc, #120]	; (1bc10 <ll_rx_dequeue+0x188>)
   1bb98:	f240 33c7 	movw	r3, #967	; 0x3c7
   1bb9c:	f00b ffd1 	bl	27b42 <printk>
   1bba0:	4040      	eors	r0, r0
   1bba2:	f380 8811 	msr	BASEPRI, r0
   1bba6:	f04f 0003 	mov.w	r0, #3
   1bbaa:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   1bbac:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   1bbb0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1bbb4:	f7fc fb88 	bl	182c8 <memq_deinit>
				LL_ASSERT(link);
   1bbb8:	4606      	mov	r6, r0
   1bbba:	b190      	cbz	r0, 1bbe2 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
   1bbbc:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   1bbbe:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
   1bbc0:	f001 fe54 	bl	1d86c <ll_conn_release>
   1bbc4:	e7b2      	b.n	1bb2c <ll_rx_dequeue+0xa4>
				LL_ASSERT(conn_lll);
   1bbc6:	4a10      	ldr	r2, [pc, #64]	; (1bc08 <ll_rx_dequeue+0x180>)
   1bbc8:	4916      	ldr	r1, [pc, #88]	; (1bc24 <ll_rx_dequeue+0x19c>)
   1bbca:	4811      	ldr	r0, [pc, #68]	; (1bc10 <ll_rx_dequeue+0x188>)
   1bbcc:	f44f 7371 	mov.w	r3, #964	; 0x3c4
   1bbd0:	f00b ffb7 	bl	27b42 <printk>
   1bbd4:	4040      	eors	r0, r0
   1bbd6:	f380 8811 	msr	BASEPRI, r0
   1bbda:	f04f 0003 	mov.w	r0, #3
   1bbde:	df02      	svc	2
   1bbe0:	e7d3      	b.n	1bb8a <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
   1bbe2:	4a09      	ldr	r2, [pc, #36]	; (1bc08 <ll_rx_dequeue+0x180>)
   1bbe4:	490d      	ldr	r1, [pc, #52]	; (1bc1c <ll_rx_dequeue+0x194>)
   1bbe6:	480a      	ldr	r0, [pc, #40]	; (1bc10 <ll_rx_dequeue+0x188>)
   1bbe8:	f240 33ca 	movw	r3, #970	; 0x3ca
   1bbec:	f00b ffa9 	bl	27b42 <printk>
   1bbf0:	4040      	eors	r0, r0
   1bbf2:	f380 8811 	msr	BASEPRI, r0
   1bbf6:	f04f 0003 	mov.w	r0, #3
   1bbfa:	df02      	svc	2
   1bbfc:	e7de      	b.n	1bbbc <ll_rx_dequeue+0x134>
   1bbfe:	bf00      	nop
   1bc00:	20001880 	.word	0x20001880
   1bc04:	20001598 	.word	0x20001598
   1bc08:	0002bb4c 	.word	0x0002bb4c
   1bc0c:	0002b974 	.word	0x0002b974
   1bc10:	0002b8dc 	.word	0x0002b8dc
   1bc14:	0002bc20 	.word	0x0002bc20
   1bc18:	200015f4 	.word	0x200015f4
   1bc1c:	0002be98 	.word	0x0002be98
   1bc20:	0002bc08 	.word	0x0002bc08
   1bc24:	0002bbfc 	.word	0x0002bbfc

0001bc28 <ll_rx_mem_release>:
{
   1bc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   1bc2c:	6804      	ldr	r4, [r0, #0]
{
   1bc2e:	4680      	mov	r8, r0
	while (rx) {
   1bc30:	b33c      	cbz	r4, 1bc82 <ll_rx_mem_release+0x5a>
			LL_ASSERT(0);
   1bc32:	4f54      	ldr	r7, [pc, #336]	; (1bd84 <ll_rx_mem_release+0x15c>)
   1bc34:	f8df 9150 	ldr.w	r9, [pc, #336]	; 1bd88 <ll_rx_mem_release+0x160>
   1bc38:	4e54      	ldr	r6, [pc, #336]	; (1bd8c <ll_rx_mem_release+0x164>)
		rx = rx->next;
   1bc3a:	4625      	mov	r5, r4
   1bc3c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1bc3e:	792b      	ldrb	r3, [r5, #4]
   1bc40:	2b1a      	cmp	r3, #26
   1bc42:	d80f      	bhi.n	1bc64 <ll_rx_mem_release+0x3c>
   1bc44:	e8df f003 	tbb	[pc, r3]
   1bc48:	370e0e37 	.word	0x370e0e37
   1bc4c:	0e0e0e0e 	.word	0x0e0e0e0e
   1bc50:	0e0e0e0e 	.word	0x0e0e0e0e
   1bc54:	0e0e0e0e 	.word	0x0e0e0e0e
   1bc58:	0e0e0e0e 	.word	0x0e0e0e0e
   1bc5c:	37375525 	.word	0x37375525
   1bc60:	3737      	.short	0x3737
   1bc62:	37          	.byte	0x37
   1bc63:	00          	.byte	0x00
			LL_ASSERT(0);
   1bc64:	f240 534f 	movw	r3, #1359	; 0x54f
   1bc68:	463a      	mov	r2, r7
   1bc6a:	4649      	mov	r1, r9
   1bc6c:	4630      	mov	r0, r6
   1bc6e:	f00b ff68 	bl	27b42 <printk>
   1bc72:	4040      	eors	r0, r0
   1bc74:	f380 8811 	msr	BASEPRI, r0
   1bc78:	f04f 0003 	mov.w	r0, #3
   1bc7c:	df02      	svc	2
	while (rx) {
   1bc7e:	2c00      	cmp	r4, #0
   1bc80:	d1db      	bne.n	1bc3a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   1bc82:	2300      	movs	r3, #0
   1bc84:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   1bc88:	20ff      	movs	r0, #255	; 0xff
}
   1bc8a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   1bc8e:	f7ff bb05 	b.w	1b29c <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1bc92:	7f2b      	ldrb	r3, [r5, #28]
   1bc94:	2b3c      	cmp	r3, #60	; 0x3c
   1bc96:	d05f      	beq.n	1bd58 <ll_rx_mem_release+0x130>
				LL_ASSERT(!cc->status);
   1bc98:	b1db      	cbz	r3, 1bcd2 <ll_rx_mem_release+0xaa>
   1bc9a:	493d      	ldr	r1, [pc, #244]	; (1bd90 <ll_rx_mem_release+0x168>)
   1bc9c:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
   1bca0:	463a      	mov	r2, r7
   1bca2:	4630      	mov	r0, r6
   1bca4:	f00b ff4d 	bl	27b42 <printk>
   1bca8:	4040      	eors	r0, r0
   1bcaa:	f380 8811 	msr	BASEPRI, r0
   1bcae:	f04f 0003 	mov.w	r0, #3
   1bcb2:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1bcb4:	792b      	ldrb	r3, [r5, #4]
   1bcb6:	b963      	cbnz	r3, 1bcd2 <ll_rx_mem_release+0xaa>
   1bcb8:	4936      	ldr	r1, [pc, #216]	; (1bd94 <ll_rx_mem_release+0x16c>)
   1bcba:	f240 5312 	movw	r3, #1298	; 0x512
   1bcbe:	463a      	mov	r2, r7
   1bcc0:	4630      	mov	r0, r6
   1bcc2:	f00b ff3e 	bl	27b42 <printk>
   1bcc6:	4040      	eors	r0, r0
   1bcc8:	f380 8811 	msr	BASEPRI, r0
   1bccc:	f04f 0003 	mov.w	r0, #3
   1bcd0:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1bcd2:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1bd98 <ll_rx_mem_release+0x170>
   1bcd6:	f89a 3000 	ldrb.w	r3, [sl]
   1bcda:	2b06      	cmp	r3, #6
   1bcdc:	d82c      	bhi.n	1bd38 <ll_rx_mem_release+0x110>
	mem_link_rx.quota_pdu += delta;
   1bcde:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   1bce0:	492e      	ldr	r1, [pc, #184]	; (1bd9c <ll_rx_mem_release+0x174>)
	mem_link_rx.quota_pdu += delta;
   1bce2:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   1bce6:	4628      	mov	r0, r5
   1bce8:	f7fc faae 	bl	18248 <mem_release>
	while (rx) {
   1bcec:	2c00      	cmp	r4, #0
   1bcee:	d1a4      	bne.n	1bc3a <ll_rx_mem_release+0x12>
   1bcf0:	e7c7      	b.n	1bc82 <ll_rx_mem_release+0x5a>
			conn = ll_conn_get(rx_free->handle);
   1bcf2:	88e8      	ldrh	r0, [r5, #6]
   1bcf4:	f001 fdc8 	bl	1d888 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   1bcf8:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
   1bcfa:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1bcfc:	b163      	cbz	r3, 1bd18 <ll_rx_mem_release+0xf0>
   1bcfe:	4928      	ldr	r1, [pc, #160]	; (1bda0 <ll_rx_mem_release+0x178>)
   1bd00:	f240 5342 	movw	r3, #1346	; 0x542
   1bd04:	463a      	mov	r2, r7
   1bd06:	4630      	mov	r0, r6
   1bd08:	f00b ff1b 	bl	27b42 <printk>
   1bd0c:	4040      	eors	r0, r0
   1bd0e:	f380 8811 	msr	BASEPRI, r0
   1bd12:	f04f 0003 	mov.w	r0, #3
   1bd16:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   1bd18:	f105 0168 	add.w	r1, r5, #104	; 0x68
   1bd1c:	f105 0064 	add.w	r0, r5, #100	; 0x64
   1bd20:	f7fc fad2 	bl	182c8 <memq_deinit>
			LL_ASSERT(link);
   1bd24:	4682      	mov	sl, r0
   1bd26:	b1f8      	cbz	r0, 1bd68 <ll_rx_mem_release+0x140>
			conn->lll.link_tx_free = link;
   1bd28:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
			ll_conn_release(conn);
   1bd2c:	4628      	mov	r0, r5
   1bd2e:	f001 fd9d 	bl	1d86c <ll_conn_release>
	while (rx) {
   1bd32:	2c00      	cmp	r4, #0
   1bd34:	d181      	bne.n	1bc3a <ll_rx_mem_release+0x12>
   1bd36:	e7a4      	b.n	1bc82 <ll_rx_mem_release+0x5a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   1bd38:	491a      	ldr	r1, [pc, #104]	; (1bda4 <ll_rx_mem_release+0x17c>)
   1bd3a:	f240 535b 	movw	r3, #1371	; 0x55b
   1bd3e:	463a      	mov	r2, r7
   1bd40:	4630      	mov	r0, r6
   1bd42:	f00b fefe 	bl	27b42 <printk>
   1bd46:	4040      	eors	r0, r0
   1bd48:	f380 8811 	msr	BASEPRI, r0
   1bd4c:	f04f 0003 	mov.w	r0, #3
   1bd50:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1bd52:	f89a 3000 	ldrb.w	r3, [sl]
   1bd56:	e7c2      	b.n	1bcde <ll_rx_mem_release+0xb6>
				mem_release(rx_free, &mem_pdu_rx.free);
   1bd58:	4910      	ldr	r1, [pc, #64]	; (1bd9c <ll_rx_mem_release+0x174>)
   1bd5a:	4628      	mov	r0, r5
   1bd5c:	f7fc fa74 	bl	18248 <mem_release>
	while (rx) {
   1bd60:	2c00      	cmp	r4, #0
   1bd62:	f47f af6a 	bne.w	1bc3a <ll_rx_mem_release+0x12>
   1bd66:	e78c      	b.n	1bc82 <ll_rx_mem_release+0x5a>
			LL_ASSERT(link);
   1bd68:	490f      	ldr	r1, [pc, #60]	; (1bda8 <ll_rx_mem_release+0x180>)
   1bd6a:	f240 5345 	movw	r3, #1349	; 0x545
   1bd6e:	463a      	mov	r2, r7
   1bd70:	4630      	mov	r0, r6
   1bd72:	f00b fee6 	bl	27b42 <printk>
   1bd76:	4040      	eors	r0, r0
   1bd78:	f380 8811 	msr	BASEPRI, r0
   1bd7c:	f04f 0003 	mov.w	r0, #3
   1bd80:	df02      	svc	2
   1bd82:	e7d1      	b.n	1bd28 <ll_rx_mem_release+0x100>
   1bd84:	0002bb4c 	.word	0x0002bb4c
   1bd88:	0002b974 	.word	0x0002b974
   1bd8c:	0002b8dc 	.word	0x0002b8dc
   1bd90:	0002bc40 	.word	0x0002bc40
   1bd94:	0002bc4c 	.word	0x0002bc4c
   1bd98:	20001594 	.word	0x20001594
   1bd9c:	200015f4 	.word	0x200015f4
   1bda0:	0002bc70 	.word	0x0002bc70
   1bda4:	0002bbc4 	.word	0x0002bbc4
   1bda8:	0002be98 	.word	0x0002be98

0001bdac <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   1bdac:	4801      	ldr	r0, [pc, #4]	; (1bdb4 <ll_rx_link_alloc+0x8>)
   1bdae:	f7fc ba31 	b.w	18214 <mem_acquire>
   1bdb2:	bf00      	nop
   1bdb4:	20001598 	.word	0x20001598

0001bdb8 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   1bdb8:	4901      	ldr	r1, [pc, #4]	; (1bdc0 <ll_rx_link_release+0x8>)
   1bdba:	f7fc ba45 	b.w	18248 <mem_release>
   1bdbe:	bf00      	nop
   1bdc0:	20001598 	.word	0x20001598

0001bdc4 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   1bdc4:	4801      	ldr	r0, [pc, #4]	; (1bdcc <ll_rx_alloc+0x8>)
   1bdc6:	f7fc ba25 	b.w	18214 <mem_acquire>
   1bdca:	bf00      	nop
   1bdcc:	200015f4 	.word	0x200015f4

0001bdd0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   1bdd0:	4901      	ldr	r1, [pc, #4]	; (1bdd8 <ll_rx_release+0x8>)
   1bdd2:	f7fc ba39 	b.w	18248 <mem_release>
   1bdd6:	bf00      	nop
   1bdd8:	200015f4 	.word	0x200015f4

0001bddc <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1bddc:	4b02      	ldr	r3, [pc, #8]	; (1bde8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1bdde:	4a03      	ldr	r2, [pc, #12]	; (1bdec <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1bde0:	78db      	ldrb	r3, [r3, #3]
   1bde2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1bde4:	f7fc ba7a 	b.w	182dc <memq_enqueue>
   1bde8:	20000378 	.word	0x20000378
   1bdec:	20001884 	.word	0x20001884

0001bdf0 <ll_rx_sched>:
	k_sem_give(sem_recv);
   1bdf0:	4b01      	ldr	r3, [pc, #4]	; (1bdf8 <ll_rx_sched+0x8>)
   1bdf2:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   1bdf4:	f00a beae 	b.w	26b54 <z_impl_k_sem_give>
   1bdf8:	20001898 	.word	0x20001898

0001bdfc <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1bdfc:	4b0d      	ldr	r3, [pc, #52]	; (1be34 <ll_pdu_rx_alloc_peek+0x38>)
   1bdfe:	789a      	ldrb	r2, [r3, #2]
   1be00:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   1be04:	4562      	cmp	r2, ip
   1be06:	d809      	bhi.n	1be1c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   1be08:	ebac 0102 	sub.w	r1, ip, r2
   1be0c:	b2c9      	uxtb	r1, r1
   1be0e:	4288      	cmp	r0, r1
   1be10:	d802      	bhi.n	1be18 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1be12:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1be14:	7819      	ldrb	r1, [r3, #0]
   1be16:	d108      	bne.n	1be2a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   1be18:	2000      	movs	r0, #0
}
   1be1a:	4770      	bx	lr
		return count - first + last;
   1be1c:	7859      	ldrb	r1, [r3, #1]
   1be1e:	1a89      	subs	r1, r1, r2
   1be20:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1be22:	b2c9      	uxtb	r1, r1
   1be24:	4288      	cmp	r0, r1
   1be26:	d8f7      	bhi.n	1be18 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   1be28:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   1be2a:	fb02 3301 	mla	r3, r2, r1, r3
   1be2e:	6858      	ldr	r0, [r3, #4]
   1be30:	4770      	bx	lr
   1be32:	bf00      	nop
   1be34:	20000248 	.word	0x20000248

0001be38 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   1be38:	4b09      	ldr	r3, [pc, #36]	; (1be60 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   1be3a:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   1be3c:	78da      	ldrb	r2, [r3, #3]
   1be3e:	7818      	ldrb	r0, [r3, #0]
   1be40:	f893 c001 	ldrb.w	ip, [r3, #1]
   1be44:	428a      	cmp	r2, r1
   1be46:	d009      	beq.n	1be5c <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1be48:	1c4a      	adds	r2, r1, #1
   1be4a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1be4c:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
   1be50:	4594      	cmp	ip, r2
   1be52:	bf08      	it	eq
   1be54:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1be56:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
   1be58:	709a      	strb	r2, [r3, #2]

	return mem;
   1be5a:	4770      	bx	lr
		return NULL;
   1be5c:	2000      	movs	r0, #0
}
   1be5e:	4770      	bx	lr
   1be60:	20000248 	.word	0x20000248

0001be64 <ll_tx_ack_put>:
{
   1be64:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   1be66:	4a15      	ldr	r2, [pc, #84]	; (1bebc <ll_tx_ack_put+0x58>)
   1be68:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   1be6a:	f892 e001 	ldrb.w	lr, [r2, #1]
   1be6e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   1be72:	1c63      	adds	r3, r4, #1
   1be74:	b2db      	uxtb	r3, r3
		last = 0U;
   1be76:	459e      	cmp	lr, r3
   1be78:	bf08      	it	eq
   1be7a:	2300      	moveq	r3, #0
	if (last == first) {
   1be7c:	459c      	cmp	ip, r3
   1be7e:	d00c      	beq.n	1be9a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1be80:	4696      	mov	lr, r2
   1be82:	f81e cb04 	ldrb.w	ip, [lr], #4
   1be86:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   1be8a:	eb1e 040c 	adds.w	r4, lr, ip
   1be8e:	d004      	beq.n	1be9a <ll_tx_ack_put+0x36>
	tx->handle = handle;
   1be90:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
   1be94:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   1be96:	70d3      	strb	r3, [r2, #3]
}
   1be98:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   1be9a:	4a09      	ldr	r2, [pc, #36]	; (1bec0 <ll_tx_ack_put+0x5c>)
   1be9c:	4909      	ldr	r1, [pc, #36]	; (1bec4 <ll_tx_ack_put+0x60>)
   1be9e:	480a      	ldr	r0, [pc, #40]	; (1bec8 <ll_tx_ack_put+0x64>)
   1bea0:	f240 53a3 	movw	r3, #1443	; 0x5a3
   1bea4:	f00b fe4d 	bl	27b42 <printk>
   1bea8:	4040      	eors	r0, r0
   1beaa:	f380 8811 	msr	BASEPRI, r0
   1beae:	f04f 0003 	mov.w	r0, #3
   1beb2:	df02      	svc	2
	tx->handle = handle;
   1beb4:	2300      	movs	r3, #0
   1beb6:	801b      	strh	r3, [r3, #0]
   1beb8:	deff      	udf	#255	; 0xff
   1beba:	bf00      	nop
   1bebc:	20000378 	.word	0x20000378
   1bec0:	0002bb4c 	.word	0x0002bb4c
   1bec4:	0002be8c 	.word	0x0002be8c
   1bec8:	0002b8dc 	.word	0x0002b8dc

0001becc <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1becc:	f030 0302 	bics.w	r3, r0, #2
{
   1bed0:	b510      	push	{r4, lr}
   1bed2:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1bed4:	d002      	beq.n	1bedc <ull_ticker_status_take+0x10>
   1bed6:	680b      	ldr	r3, [r1, #0]
   1bed8:	2b02      	cmp	r3, #2
   1beda:	d008      	beq.n	1beee <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   1bedc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bee0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bee4:	4809      	ldr	r0, [pc, #36]	; (1bf0c <ull_ticker_status_take+0x40>)
   1bee6:	f00a fe5b 	bl	26ba0 <z_impl_k_sem_take>
	return *ret_cb;
   1beea:	6820      	ldr	r0, [r4, #0]
}
   1beec:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1beee:	4a08      	ldr	r2, [pc, #32]	; (1bf10 <ull_ticker_status_take+0x44>)
   1bef0:	4908      	ldr	r1, [pc, #32]	; (1bf14 <ull_ticker_status_take+0x48>)
   1bef2:	4809      	ldr	r0, [pc, #36]	; (1bf18 <ull_ticker_status_take+0x4c>)
   1bef4:	f240 53d7 	movw	r3, #1495	; 0x5d7
   1bef8:	f00b fe23 	bl	27b42 <printk>
   1befc:	4040      	eors	r0, r0
   1befe:	f380 8811 	msr	BASEPRI, r0
   1bf02:	f04f 0003 	mov.w	r0, #3
   1bf06:	df02      	svc	2
   1bf08:	e7e8      	b.n	1bedc <ull_ticker_status_take+0x10>
   1bf0a:	bf00      	nop
   1bf0c:	2000189c 	.word	0x2000189c
   1bf10:	0002bb4c 	.word	0x0002bb4c
   1bf14:	0002bc90 	.word	0x0002bc90
   1bf18:	0002b8dc 	.word	0x0002b8dc

0001bf1c <ull_disable_mark>:
	if (!*m) {
   1bf1c:	4a03      	ldr	r2, [pc, #12]	; (1bf2c <ull_disable_mark+0x10>)
{
   1bf1e:	4603      	mov	r3, r0
	if (!*m) {
   1bf20:	6810      	ldr	r0, [r2, #0]
   1bf22:	b100      	cbz	r0, 1bf26 <ull_disable_mark+0xa>
}
   1bf24:	4770      	bx	lr
		*m = param;
   1bf26:	6013      	str	r3, [r2, #0]
   1bf28:	4618      	mov	r0, r3
}
   1bf2a:	4770      	bx	lr
   1bf2c:	200014c8 	.word	0x200014c8

0001bf30 <ull_disable_unmark>:
	if (*m && *m == param) {
   1bf30:	4a04      	ldr	r2, [pc, #16]	; (1bf44 <ull_disable_unmark+0x14>)
   1bf32:	6813      	ldr	r3, [r2, #0]
   1bf34:	b123      	cbz	r3, 1bf40 <ull_disable_unmark+0x10>
   1bf36:	4298      	cmp	r0, r3
		*m = NULL;
   1bf38:	bf06      	itte	eq
   1bf3a:	2100      	moveq	r1, #0
   1bf3c:	6011      	streq	r1, [r2, #0]
	return NULL;
   1bf3e:	2300      	movne	r3, #0
}
   1bf40:	4618      	mov	r0, r3
   1bf42:	4770      	bx	lr
   1bf44:	200014c8 	.word	0x200014c8

0001bf48 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   1bf48:	4b01      	ldr	r3, [pc, #4]	; (1bf50 <ull_disable_mark_get+0x8>)
}
   1bf4a:	6818      	ldr	r0, [r3, #0]
   1bf4c:	4770      	bx	lr
   1bf4e:	bf00      	nop
   1bf50:	200014c8 	.word	0x200014c8

0001bf54 <ull_update_mark>:
	if (!*m) {
   1bf54:	4a03      	ldr	r2, [pc, #12]	; (1bf64 <ull_update_mark+0x10>)
{
   1bf56:	4603      	mov	r3, r0
	if (!*m) {
   1bf58:	6810      	ldr	r0, [r2, #0]
   1bf5a:	b100      	cbz	r0, 1bf5e <ull_update_mark+0xa>
}
   1bf5c:	4770      	bx	lr
		*m = param;
   1bf5e:	6013      	str	r3, [r2, #0]
   1bf60:	4618      	mov	r0, r3
}
   1bf62:	4770      	bx	lr
   1bf64:	200014cc 	.word	0x200014cc

0001bf68 <ull_update_unmark>:
	if (*m && *m == param) {
   1bf68:	4a04      	ldr	r2, [pc, #16]	; (1bf7c <ull_update_unmark+0x14>)
   1bf6a:	6813      	ldr	r3, [r2, #0]
   1bf6c:	b123      	cbz	r3, 1bf78 <ull_update_unmark+0x10>
   1bf6e:	4298      	cmp	r0, r3
		*m = NULL;
   1bf70:	bf06      	itte	eq
   1bf72:	2100      	moveq	r1, #0
   1bf74:	6011      	streq	r1, [r2, #0]
	return NULL;
   1bf76:	2300      	movne	r3, #0
}
   1bf78:	4618      	mov	r0, r3
   1bf7a:	4770      	bx	lr
   1bf7c:	200014cc 	.word	0x200014cc

0001bf80 <ull_update_mark_get>:
	return mark_get(mark_update);
   1bf80:	4b01      	ldr	r3, [pc, #4]	; (1bf88 <ull_update_mark_get+0x8>)
}
   1bf82:	6818      	ldr	r0, [r3, #0]
   1bf84:	4770      	bx	lr
   1bf86:	bf00      	nop
   1bf88:	200014cc 	.word	0x200014cc

0001bf8c <ull_disable>:
{
   1bf8c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
   1bf8e:	6805      	ldr	r5, [r0, #0]
{
   1bf90:	b087      	sub	sp, #28
	if (!hdr || !ull_ref_get(hdr)) {
   1bf92:	b305      	cbz	r5, 1bfd6 <ull_disable+0x4a>
   1bf94:	782b      	ldrb	r3, [r5, #0]
   1bf96:	4604      	mov	r4, r0
   1bf98:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   1bf9c:	b90b      	cbnz	r3, 1bfa2 <ull_disable+0x16>
}
   1bf9e:	b007      	add	sp, #28
   1bfa0:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1bfa2:	2201      	movs	r2, #1
   1bfa4:	2100      	movs	r1, #0
   1bfa6:	4668      	mov	r0, sp
   1bfa8:	f00e fc36 	bl	2a818 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
   1bfac:	4912      	ldr	r1, [pc, #72]	; (1bff8 <ull_disable+0x6c>)
	mfy.param = lll;
   1bfae:	4b13      	ldr	r3, [pc, #76]	; (1bffc <ull_disable+0x70>)
	hdr->disabled_cb = disabled_cb;
   1bfb0:	6169      	str	r1, [r5, #20]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1bfb2:	2200      	movs	r2, #0
	hdr->disabled_param = &sem;
   1bfb4:	f8c5 d018 	str.w	sp, [r5, #24]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1bfb8:	4611      	mov	r1, r2
   1bfba:	2003      	movs	r0, #3
	mfy.param = lll;
   1bfbc:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1bfbe:	f7fc fa01 	bl	183c4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1bfc2:	b958      	cbnz	r0, 1bfdc <ull_disable+0x50>
	return z_impl_k_sem_take(sem, timeout);
   1bfc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1bfc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bfcc:	4668      	mov	r0, sp
   1bfce:	f00a fde7 	bl	26ba0 <z_impl_k_sem_take>
}
   1bfd2:	b007      	add	sp, #28
   1bfd4:	bd30      	pop	{r4, r5, pc}
		return 0;
   1bfd6:	4628      	mov	r0, r5
}
   1bfd8:	b007      	add	sp, #28
   1bfda:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1bfdc:	4a08      	ldr	r2, [pc, #32]	; (1c000 <ull_disable+0x74>)
   1bfde:	4909      	ldr	r1, [pc, #36]	; (1c004 <ull_disable+0x78>)
   1bfe0:	4809      	ldr	r0, [pc, #36]	; (1c008 <ull_disable+0x7c>)
   1bfe2:	f240 6345 	movw	r3, #1605	; 0x645
   1bfe6:	f00b fdac 	bl	27b42 <printk>
   1bfea:	4040      	eors	r0, r0
   1bfec:	f380 8811 	msr	BASEPRI, r0
   1bff0:	f04f 0003 	mov.w	r0, #3
   1bff4:	df02      	svc	2
   1bff6:	e7e5      	b.n	1bfc4 <ull_disable+0x38>
   1bff8:	0001b0b9 	.word	0x0001b0b9
   1bffc:	200003dc 	.word	0x200003dc
   1c000:	0002bb4c 	.word	0x0002bb4c
   1c004:	0002bc88 	.word	0x0002bc88
   1c008:	0002b8dc 	.word	0x0002b8dc

0001c00c <ull_ticker_stop_with_mark>:
{
   1c00c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   1c00e:	4d1d      	ldr	r5, [pc, #116]	; (1c084 <ull_ticker_stop_with_mark+0x78>)
   1c010:	682b      	ldr	r3, [r5, #0]
{
   1c012:	b085      	sub	sp, #20
   1c014:	460c      	mov	r4, r1
   1c016:	4616      	mov	r6, r2
	if (!*m) {
   1c018:	b323      	cbz	r3, 1c064 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   1c01a:	4299      	cmp	r1, r3
   1c01c:	d112      	bne.n	1c044 <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
   1c01e:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1c020:	af03      	add	r7, sp, #12
   1c022:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   1c024:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1c026:	2103      	movs	r1, #3
   1c028:	4b17      	ldr	r3, [pc, #92]	; (1c088 <ull_ticker_stop_with_mark+0x7c>)
   1c02a:	9700      	str	r7, [sp, #0]
   1c02c:	2000      	movs	r0, #0
   1c02e:	f7fd fb95 	bl	1975c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1c032:	4639      	mov	r1, r7
   1c034:	f7ff ff4a 	bl	1becc <ull_ticker_status_take>
	if (ret) {
   1c038:	b140      	cbz	r0, 1c04c <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   1c03a:	682b      	ldr	r3, [r5, #0]
   1c03c:	b10b      	cbz	r3, 1c042 <ull_ticker_stop_with_mark+0x36>
   1c03e:	429c      	cmp	r4, r3
   1c040:	d012      	beq.n	1c068 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   1c042:	b1cc      	cbz	r4, 1c078 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   1c044:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
   1c048:	b005      	add	sp, #20
   1c04a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   1c04c:	4630      	mov	r0, r6
   1c04e:	f7ff ff9d 	bl	1bf8c <ull_disable>
	if (ret) {
   1c052:	b9a0      	cbnz	r0, 1c07e <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   1c054:	682b      	ldr	r3, [r5, #0]
   1c056:	b10b      	cbz	r3, 1c05c <ull_ticker_stop_with_mark+0x50>
   1c058:	429c      	cmp	r4, r3
   1c05a:	d00b      	beq.n	1c074 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   1c05c:	2c00      	cmp	r4, #0
   1c05e:	d1f1      	bne.n	1c044 <ull_ticker_stop_with_mark+0x38>
}
   1c060:	b005      	add	sp, #20
   1c062:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   1c064:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   1c066:	e7da      	b.n	1c01e <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   1c068:	2300      	movs	r3, #0
		return -EALREADY;
   1c06a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
   1c06e:	602b      	str	r3, [r5, #0]
}
   1c070:	b005      	add	sp, #20
   1c072:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   1c074:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   1c076:	e7e7      	b.n	1c048 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   1c078:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1c07c:	e7e4      	b.n	1c048 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   1c07e:	f06f 000f 	mvn.w	r0, #15
   1c082:	e7e1      	b.n	1c048 <ull_ticker_stop_with_mark+0x3c>
   1c084:	200014c8 	.word	0x200014c8
   1c088:	0001b0ad 	.word	0x0001b0ad

0001c08c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1c08c:	4b0d      	ldr	r3, [pc, #52]	; (1c0c4 <ull_pdu_rx_alloc_peek+0x38>)
   1c08e:	789a      	ldrb	r2, [r3, #2]
   1c090:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   1c094:	4562      	cmp	r2, ip
   1c096:	d809      	bhi.n	1c0ac <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   1c098:	ebac 0102 	sub.w	r1, ip, r2
   1c09c:	b2c9      	uxtb	r1, r1
   1c09e:	4288      	cmp	r0, r1
   1c0a0:	d802      	bhi.n	1c0a8 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1c0a2:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1c0a4:	7819      	ldrb	r1, [r3, #0]
   1c0a6:	d108      	bne.n	1c0ba <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   1c0a8:	2000      	movs	r0, #0
}
   1c0aa:	4770      	bx	lr
		return count - first + last;
   1c0ac:	7859      	ldrb	r1, [r3, #1]
   1c0ae:	1a89      	subs	r1, r1, r2
   1c0b0:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1c0b2:	b2c9      	uxtb	r1, r1
   1c0b4:	4288      	cmp	r0, r1
   1c0b6:	d8f7      	bhi.n	1c0a8 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1c0b8:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   1c0ba:	fb02 3301 	mla	r3, r2, r1, r3
   1c0be:	6858      	ldr	r0, [r3, #4]
   1c0c0:	4770      	bx	lr
   1c0c2:	bf00      	nop
   1c0c4:	2000025c 	.word	0x2000025c

0001c0c8 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   1c0c8:	4b09      	ldr	r3, [pc, #36]	; (1c0f0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1c0ca:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1c0cc:	78da      	ldrb	r2, [r3, #3]
   1c0ce:	7818      	ldrb	r0, [r3, #0]
   1c0d0:	f893 c001 	ldrb.w	ip, [r3, #1]
   1c0d4:	428a      	cmp	r2, r1
   1c0d6:	d009      	beq.n	1c0ec <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   1c0d8:	1c4a      	adds	r2, r1, #1
   1c0da:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1c0dc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1c0e0:	4594      	cmp	ip, r2
   1c0e2:	bf08      	it	eq
   1c0e4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1c0e6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1c0e8:	709a      	strb	r2, [r3, #2]
	return mem;
   1c0ea:	4770      	bx	lr
		return NULL;
   1c0ec:	2000      	movs	r0, #0
}
   1c0ee:	4770      	bx	lr
   1c0f0:	2000025c 	.word	0x2000025c

0001c0f4 <ull_rx_put>:
{
   1c0f4:	b538      	push	{r3, r4, r5, lr}
   1c0f6:	460c      	mov	r4, r1
   1c0f8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1c0fa:	f005 f96f 	bl	213dc <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1c0fe:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1c100:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1c102:	4a03      	ldr	r2, [pc, #12]	; (1c110 <ull_rx_put+0x1c>)
   1c104:	4628      	mov	r0, r5
}
   1c106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1c10a:	f7fc b8e7 	b.w	182dc <memq_enqueue>
   1c10e:	bf00      	nop
   1c110:	20001894 	.word	0x20001894

0001c114 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1c114:	2201      	movs	r2, #1
   1c116:	4b02      	ldr	r3, [pc, #8]	; (1c120 <ull_rx_sched+0xc>)
   1c118:	4611      	mov	r1, r2
   1c11a:	2000      	movs	r0, #0
   1c11c:	f7fc b952 	b.w	183c4 <mayfly_enqueue>
   1c120:	200003cc 	.word	0x200003cc

0001c124 <ull_prepare_enqueue>:
{
   1c124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1c128:	4e16      	ldr	r6, [pc, #88]	; (1c184 <ull_prepare_enqueue+0x60>)
{
   1c12a:	f89d a020 	ldrb.w	sl, [sp, #32]
   1c12e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1c130:	78f3      	ldrb	r3, [r6, #3]
{
   1c132:	4680      	mov	r8, r0
	last = last + 1;
   1c134:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   1c136:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
   1c138:	b2ed      	uxtb	r5, r5
		last = 0U;
   1c13a:	42a8      	cmp	r0, r5
   1c13c:	bf08      	it	eq
   1c13e:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1c140:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
   1c142:	42a8      	cmp	r0, r5
   1c144:	d01a      	beq.n	1c17c <ull_prepare_enqueue+0x58>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1c146:	4634      	mov	r4, r6
   1c148:	460f      	mov	r7, r1
   1c14a:	4611      	mov	r1, r2
   1c14c:	f814 2b04 	ldrb.w	r2, [r4], #4
   1c150:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
   1c154:	b17c      	cbz	r4, 1c176 <ull_prepare_enqueue+0x52>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1c156:	2210      	movs	r2, #16
   1c158:	4620      	mov	r0, r4
   1c15a:	f00c fd5c 	bl	28c16 <memcpy>
	e->is_resume = is_resume;
   1c15e:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
   1c160:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   1c162:	f00a 0a01 	and.w	sl, sl, #1
   1c166:	f023 0303 	bic.w	r3, r3, #3
   1c16a:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   1c16e:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
   1c172:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
   1c174:	70f5      	strb	r5, [r6, #3]
}
   1c176:	4620      	mov	r0, r4
   1c178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
   1c17c:	2400      	movs	r4, #0
}
   1c17e:	4620      	mov	r0, r4
   1c180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c184:	20000274 	.word	0x20000274

0001c188 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   1c188:	4b05      	ldr	r3, [pc, #20]	; (1c1a0 <ull_prepare_dequeue_get+0x18>)
   1c18a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   1c18c:	78da      	ldrb	r2, [r3, #3]
   1c18e:	7819      	ldrb	r1, [r3, #0]
   1c190:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   1c192:	bf1a      	itte	ne
   1c194:	3304      	addne	r3, #4
   1c196:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   1c19a:	2000      	moveq	r0, #0
}
   1c19c:	4770      	bx	lr
   1c19e:	bf00      	nop
   1c1a0:	20000274 	.word	0x20000274

0001c1a4 <ull_prepare_dequeue_iter>:
{
   1c1a4:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1c1a6:	4b0d      	ldr	r3, [pc, #52]	; (1c1dc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   1c1a8:	7802      	ldrb	r2, [r0, #0]
   1c1aa:	7859      	ldrb	r1, [r3, #1]
   1c1ac:	f893 c003 	ldrb.w	ip, [r3, #3]
   1c1b0:	f893 e000 	ldrb.w	lr, [r3]
   1c1b4:	4291      	cmp	r1, r2
   1c1b6:	bf9c      	itt	ls
   1c1b8:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   1c1ba:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   1c1bc:	4594      	cmp	ip, r2
   1c1be:	d00a      	beq.n	1c1d6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   1c1c0:	1c53      	adds	r3, r2, #1
   1c1c2:	b2db      	uxtb	r3, r3
		i = 0U;
   1c1c4:	4299      	cmp	r1, r3
   1c1c6:	bf08      	it	eq
   1c1c8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1c1ca:	4905      	ldr	r1, [pc, #20]	; (1c1e0 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   1c1cc:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1c1ce:	fb02 100e 	mla	r0, r2, lr, r1
}
   1c1d2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1c1d6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   1c1d8:	e7fb      	b.n	1c1d2 <ull_prepare_dequeue_iter+0x2e>
   1c1da:	bf00      	nop
   1c1dc:	20000274 	.word	0x20000274
   1c1e0:	20000278 	.word	0x20000278

0001c1e4 <ull_prepare_dequeue>:
{
   1c1e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
   1c1e8:	4c26      	ldr	r4, [pc, #152]	; (1c284 <ull_prepare_dequeue+0xa0>)
   1c1ea:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   1c1ec:	78e1      	ldrb	r1, [r4, #3]
   1c1ee:	7823      	ldrb	r3, [r4, #0]
   1c1f0:	4291      	cmp	r1, r2
   1c1f2:	d027      	beq.n	1c244 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   1c1f4:	1d27      	adds	r7, r4, #4
   1c1f6:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
   1c1fa:	b31a      	cbz	r2, 1c244 <ull_prepare_dequeue+0x60>
			mfy.param = next;
   1c1fc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1c288 <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
   1c200:	f8df b088 	ldr.w	fp, [pc, #136]	; 1c28c <ull_prepare_dequeue+0xa8>
   1c204:	f8df a088 	ldr.w	sl, [pc, #136]	; 1c290 <ull_prepare_dequeue+0xac>
   1c208:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
   1c20a:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
   1c20c:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
   1c20e:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
   1c212:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
   1c216:	d517      	bpl.n	1c248 <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
   1c218:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
   1c21a:	78a3      	ldrb	r3, [r4, #2]
   1c21c:	7822      	ldrb	r2, [r4, #0]
   1c21e:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
   1c220:	4299      	cmp	r1, r3
   1c222:	d00f      	beq.n	1c244 <ull_prepare_dequeue+0x60>
	_first += 1U;
   1c224:	3301      	adds	r3, #1
   1c226:	b2db      	uxtb	r3, r3
	if (_first == count) {
   1c228:	4298      	cmp	r0, r3
   1c22a:	d025      	beq.n	1c278 <ull_prepare_dequeue+0x94>
	if (first == last) {
   1c22c:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
   1c22e:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   1c230:	d008      	beq.n	1c244 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   1c232:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1c236:	b12a      	cbz	r2, 1c244 <ull_prepare_dequeue+0x60>
   1c238:	2d00      	cmp	r5, #0
   1c23a:	d1e6      	bne.n	1c20a <ull_prepare_dequeue+0x26>
   1c23c:	b116      	cbz	r6, 1c244 <ull_prepare_dequeue+0x60>
   1c23e:	7f13      	ldrb	r3, [r2, #28]
   1c240:	07db      	lsls	r3, r3, #31
   1c242:	d5e2      	bpl.n	1c20a <ull_prepare_dequeue+0x26>
}
   1c244:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
   1c248:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
   1c24c:	4b0e      	ldr	r3, [pc, #56]	; (1c288 <ull_prepare_dequeue+0xa4>)
   1c24e:	462a      	mov	r2, r5
   1c250:	4629      	mov	r1, r5
   1c252:	4640      	mov	r0, r8
   1c254:	f7fc f8b6 	bl	183c4 <mayfly_enqueue>
			LL_ASSERT(!ret);
   1c258:	2800      	cmp	r0, #0
   1c25a:	d0dd      	beq.n	1c218 <ull_prepare_dequeue+0x34>
   1c25c:	480d      	ldr	r0, [pc, #52]	; (1c294 <ull_prepare_dequeue+0xb0>)
   1c25e:	f240 63bc 	movw	r3, #1724	; 0x6bc
   1c262:	465a      	mov	r2, fp
   1c264:	4651      	mov	r1, sl
   1c266:	f00b fc6c 	bl	27b42 <printk>
   1c26a:	4040      	eors	r0, r0
   1c26c:	f380 8811 	msr	BASEPRI, r0
   1c270:	f04f 0003 	mov.w	r0, #3
   1c274:	df02      	svc	2
   1c276:	e7cf      	b.n	1c218 <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
   1c278:	2300      	movs	r3, #0
   1c27a:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
   1c27c:	2900      	cmp	r1, #0
   1c27e:	d0e1      	beq.n	1c244 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
   1c280:	4a05      	ldr	r2, [pc, #20]	; (1c298 <ull_prepare_dequeue+0xb4>)
   1c282:	e7d9      	b.n	1c238 <ull_prepare_dequeue+0x54>
   1c284:	20000274 	.word	0x20000274
   1c288:	2000039c 	.word	0x2000039c
   1c28c:	0002bb4c 	.word	0x0002bb4c
   1c290:	0002bc88 	.word	0x0002bc88
   1c294:	0002b8dc 	.word	0x0002b8dc
   1c298:	20000278 	.word	0x20000278

0001c29c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   1c29c:	4b06      	ldr	r3, [pc, #24]	; (1c2b8 <ull_event_done_extra_get+0x1c>)
   1c29e:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   1c2a0:	78d9      	ldrb	r1, [r3, #3]
   1c2a2:	7818      	ldrb	r0, [r3, #0]
   1c2a4:	4291      	cmp	r1, r2
   1c2a6:	d005      	beq.n	1c2b4 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1c2a8:	fb02 3300 	mla	r3, r2, r0, r3
   1c2ac:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   1c2ae:	b110      	cbz	r0, 1c2b6 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   1c2b0:	3020      	adds	r0, #32
   1c2b2:	4770      	bx	lr
		return NULL;
   1c2b4:	2000      	movs	r0, #0
}
   1c2b6:	4770      	bx	lr
   1c2b8:	20000234 	.word	0x20000234

0001c2bc <ull_event_done>:
{
   1c2bc:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   1c2be:	4a13      	ldr	r2, [pc, #76]	; (1c30c <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
   1c2c0:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   1c2c2:	78d4      	ldrb	r4, [r2, #3]
   1c2c4:	7811      	ldrb	r1, [r2, #0]
   1c2c6:	429c      	cmp	r4, r3
{
   1c2c8:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
   1c2ca:	7850      	ldrb	r0, [r2, #1]
   1c2cc:	d01b      	beq.n	1c306 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
   1c2ce:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   1c2d2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1c2d4:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   1c2d6:	b2db      	uxtb	r3, r3
		_first = 0U;
   1c2d8:	4298      	cmp	r0, r3
   1c2da:	bf08      	it	eq
   1c2dc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1c2de:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   1c2e0:	b17c      	cbz	r4, 1c302 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1c2e2:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   1c2e4:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   1c2e6:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1c2e8:	4a09      	ldr	r2, [pc, #36]	; (1c310 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1c2ea:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1c2ec:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
   1c2ee:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   1c2f0:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
   1c2f2:	f7fb fff3 	bl	182dc <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   1c2f6:	2201      	movs	r2, #1
   1c2f8:	4b06      	ldr	r3, [pc, #24]	; (1c314 <ull_event_done+0x58>)
   1c2fa:	4611      	mov	r1, r2
   1c2fc:	4628      	mov	r0, r5
   1c2fe:	f7fc f861 	bl	183c4 <mayfly_enqueue>
}
   1c302:	4620      	mov	r0, r4
   1c304:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1c306:	2400      	movs	r4, #0
   1c308:	e7fb      	b.n	1c302 <ull_event_done+0x46>
   1c30a:	bf00      	nop
   1c30c:	20000234 	.word	0x20000234
   1c310:	2000188c 	.word	0x2000188c
   1c314:	200003bc 	.word	0x200003bc

0001c318 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
   1c318:	b510      	push	{r4, lr}
   1c31a:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
   1c31c:	2400      	movs	r4, #0
   1c31e:	e9cd 4400 	strd	r4, r4, [sp]
   1c322:	9b04      	ldr	r3, [sp, #16]
   1c324:	f006 ff58 	bl	231d8 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
   1c328:	b002      	add	sp, #8
   1c32a:	bd10      	pop	{r4, pc}

0001c32c <lll_resume>:

void lll_resume(void *param)
{
   1c32c:	b510      	push	{r4, lr}
   1c32e:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
   1c330:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1c332:	691a      	ldr	r2, [r3, #16]
   1c334:	6999      	ldr	r1, [r3, #24]
   1c336:	2401      	movs	r4, #1
{
   1c338:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
   1c33a:	4020      	ands	r0, r4
   1c33c:	e9cd 0400 	strd	r0, r4, [sp]
   1c340:	6958      	ldr	r0, [r3, #20]
   1c342:	f006 ff49 	bl	231d8 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1c346:	b108      	cbz	r0, 1c34c <lll_resume+0x20>
   1c348:	3077      	adds	r0, #119	; 0x77
   1c34a:	d101      	bne.n	1c350 <lll_resume+0x24>
}
   1c34c:	b002      	add	sp, #8
   1c34e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1c350:	4a06      	ldr	r2, [pc, #24]	; (1c36c <lll_resume+0x40>)
   1c352:	4907      	ldr	r1, [pc, #28]	; (1c370 <lll_resume+0x44>)
   1c354:	4807      	ldr	r0, [pc, #28]	; (1c374 <lll_resume+0x48>)
   1c356:	234f      	movs	r3, #79	; 0x4f
   1c358:	f00b fbf3 	bl	27b42 <printk>
   1c35c:	4040      	eors	r0, r0
   1c35e:	f380 8811 	msr	BASEPRI, r0
   1c362:	f04f 0003 	mov.w	r0, #3
   1c366:	df02      	svc	2
}
   1c368:	b002      	add	sp, #8
   1c36a:	bd10      	pop	{r4, pc}
   1c36c:	0002bcbc 	.word	0x0002bcbc
   1c370:	0002bd00 	.word	0x0002bd00
   1c374:	0002b8dc 	.word	0x0002b8dc

0001c378 <ticker_stop_cb>:
{
   1c378:	b530      	push	{r4, r5, lr}
   1c37a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1c37c:	4b19      	ldr	r3, [pc, #100]	; (1c3e4 <ticker_stop_cb+0x6c>)
{
   1c37e:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1c380:	4a19      	ldr	r2, [pc, #100]	; (1c3e8 <ticker_stop_cb+0x70>)
   1c382:	1aeb      	subs	r3, r5, r3
   1c384:	089b      	lsrs	r3, r3, #2
   1c386:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1c38a:	f413 7f7f 	tst.w	r3, #1020	; 0x3fc
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1c38e:	ea4f 0493 	mov.w	r4, r3, lsr #2
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1c392:	d119      	bne.n	1c3c8 <ticker_stop_cb+0x50>
			  TICKER_ID_ADV_BASE + handle,
   1c394:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   1c396:	4b15      	ldr	r3, [pc, #84]	; (1c3ec <ticker_stop_cb+0x74>)
   1c398:	9500      	str	r5, [sp, #0]
   1c39a:	b2d2      	uxtb	r2, r2
   1c39c:	2101      	movs	r1, #1
   1c39e:	2000      	movs	r0, #0
   1c3a0:	f7fd f9dc 	bl	1975c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c3a4:	f030 0302 	bics.w	r3, r0, #2
   1c3a8:	d00c      	beq.n	1c3c4 <ticker_stop_cb+0x4c>
   1c3aa:	4a11      	ldr	r2, [pc, #68]	; (1c3f0 <ticker_stop_cb+0x78>)
   1c3ac:	4911      	ldr	r1, [pc, #68]	; (1c3f4 <ticker_stop_cb+0x7c>)
   1c3ae:	4812      	ldr	r0, [pc, #72]	; (1c3f8 <ticker_stop_cb+0x80>)
   1c3b0:	f240 7321 	movw	r3, #1825	; 0x721
   1c3b4:	f00b fbc5 	bl	27b42 <printk>
   1c3b8:	4040      	eors	r0, r0
   1c3ba:	f380 8811 	msr	BASEPRI, r0
   1c3be:	f04f 0003 	mov.w	r0, #3
   1c3c2:	df02      	svc	2
}
   1c3c4:	b003      	add	sp, #12
   1c3c6:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1c3c8:	4a09      	ldr	r2, [pc, #36]	; (1c3f0 <ticker_stop_cb+0x78>)
   1c3ca:	490c      	ldr	r1, [pc, #48]	; (1c3fc <ticker_stop_cb+0x84>)
   1c3cc:	480a      	ldr	r0, [pc, #40]	; (1c3f8 <ticker_stop_cb+0x80>)
   1c3ce:	f240 731c 	movw	r3, #1820	; 0x71c
   1c3d2:	f00b fbb6 	bl	27b42 <printk>
   1c3d6:	4040      	eors	r0, r0
   1c3d8:	f380 8811 	msr	BASEPRI, r0
   1c3dc:	f04f 0003 	mov.w	r0, #3
   1c3e0:	df02      	svc	2
   1c3e2:	e7d7      	b.n	1c394 <ticker_stop_cb+0x1c>
   1c3e4:	20001c14 	.word	0x20001c14
   1c3e8:	30c30c31 	.word	0x30c30c31
   1c3ec:	0001c5c5 	.word	0x0001c5c5
   1c3f0:	0002bd28 	.word	0x0002bd28
   1c3f4:	0002bd74 	.word	0x0002bd74
   1c3f8:	0002b8dc 	.word	0x0002b8dc
   1c3fc:	0002bd68 	.word	0x0002bd68

0001c400 <disabled_cb>:
{
   1c400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
   1c402:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
   1c404:	6c2f      	ldr	r7, [r5, #64]	; 0x40
{
   1c406:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   1c408:	b1d7      	cbz	r7, 1c440 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
   1c40a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   1c40c:	2300      	movs	r3, #0
   1c40e:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   1c410:	b34c      	cbz	r4, 1c466 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
   1c412:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1c414:	2314      	movs	r3, #20
	adv->node_rx_cc_free = NULL;
   1c416:	6469      	str	r1, [r5, #68]	; 0x44
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1c418:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   1c41a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c41e:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   1c420:	221e      	movs	r2, #30
   1c422:	f104 001c 	add.w	r0, r4, #28
   1c426:	f00c fc21 	bl	28c6c <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   1c42a:	233c      	movs	r3, #60	; 0x3c
   1c42c:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
   1c42e:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
   1c430:	4621      	mov	r1, r4
   1c432:	4638      	mov	r0, r7
   1c434:	f7ff fcd2 	bl	1bddc <ll_rx_put>
}
   1c438:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   1c43c:	f7ff bcd8 	b.w	1bdf0 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   1c440:	4a10      	ldr	r2, [pc, #64]	; (1c484 <disabled_cb+0x84>)
   1c442:	4911      	ldr	r1, [pc, #68]	; (1c488 <disabled_cb+0x88>)
   1c444:	4811      	ldr	r0, [pc, #68]	; (1c48c <disabled_cb+0x8c>)
   1c446:	f240 7361 	movw	r3, #1889	; 0x761
   1c44a:	f00b fb7a 	bl	27b42 <printk>
   1c44e:	4040      	eors	r0, r0
   1c450:	f380 8811 	msr	BASEPRI, r0
   1c454:	f04f 0003 	mov.w	r0, #3
   1c458:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   1c45a:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	link = adv->link_cc_free;
   1c45c:	6c2f      	ldr	r7, [r5, #64]	; 0x40
	adv->link_cc_free = NULL;
   1c45e:	2300      	movs	r3, #0
   1c460:	642b      	str	r3, [r5, #64]	; 0x40
	LL_ASSERT(adv->node_rx_cc_free);
   1c462:	2c00      	cmp	r4, #0
   1c464:	d1d5      	bne.n	1c412 <disabled_cb+0x12>
   1c466:	4a07      	ldr	r2, [pc, #28]	; (1c484 <disabled_cb+0x84>)
   1c468:	4909      	ldr	r1, [pc, #36]	; (1c490 <disabled_cb+0x90>)
   1c46a:	4808      	ldr	r0, [pc, #32]	; (1c48c <disabled_cb+0x8c>)
   1c46c:	f240 7365 	movw	r3, #1893	; 0x765
   1c470:	f00b fb67 	bl	27b42 <printk>
   1c474:	4040      	eors	r0, r0
   1c476:	f380 8811 	msr	BASEPRI, r0
   1c47a:	f04f 0003 	mov.w	r0, #3
   1c47e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1c480:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   1c482:	e7c6      	b.n	1c412 <disabled_cb+0x12>
   1c484:	0002bd28 	.word	0x0002bd28
   1c488:	0002bd90 	.word	0x0002bd90
   1c48c:	0002b8dc 	.word	0x0002b8dc
   1c490:	0002bda4 	.word	0x0002bda4

0001c494 <ticker_cb>:
{
   1c494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c498:	461f      	mov	r7, r3
   1c49a:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1c49c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c4a0:	429a      	cmp	r2, r3
{
   1c4a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
   1c4a4:	d018      	beq.n	1c4d8 <ticker_cb+0x44>
	return ++hdr->ref;
   1c4a6:	4615      	mov	r5, r2
   1c4a8:	7822      	ldrb	r2, [r4, #0]
   1c4aa:	3201      	adds	r2, #1
   1c4ac:	b2d2      	uxtb	r2, r2
   1c4ae:	4681      	mov	r9, r0
   1c4b0:	4688      	mov	r8, r1
   1c4b2:	7022      	strb	r2, [r4, #0]
		LL_ASSERT(ref);
   1c4b4:	2a00      	cmp	r2, #0
   1c4b6:	d061      	beq.n	1c57c <ticker_cb+0xe8>
		p.ticks_at_expire = ticks_at_expire;
   1c4b8:	4e37      	ldr	r6, [pc, #220]	; (1c598 <ticker_cb+0x104>)
		mfy.param = &p;
   1c4ba:	4b38      	ldr	r3, [pc, #224]	; (1c59c <ticker_cb+0x108>)
		p.lazy = lazy;
   1c4bc:	8135      	strh	r5, [r6, #8]
	lll = &adv->lll;
   1c4be:	f104 011c 	add.w	r1, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1c4c2:	2200      	movs	r2, #0
		p.param = lll;
   1c4c4:	60f1      	str	r1, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1c4c6:	2001      	movs	r0, #1
   1c4c8:	4611      	mov	r1, r2
		p.remainder = remainder;
   1c4ca:	e9c6 9800 	strd	r9, r8, [r6]
		p.force = force;
   1c4ce:	72b7      	strb	r7, [r6, #10]
		mfy.param = &p;
   1c4d0:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1c4d2:	f7fb ff77 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1c4d6:	b938      	cbnz	r0, 1c4e8 <ticker_cb+0x54>
	if (!lll->is_hdcd)
   1c4d8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1c4dc:	f010 0501 	ands.w	r5, r0, #1
   1c4e0:	d014      	beq.n	1c50c <ticker_cb+0x78>
}
   1c4e2:	b00b      	add	sp, #44	; 0x2c
   1c4e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
   1c4e8:	4a2d      	ldr	r2, [pc, #180]	; (1c5a0 <ticker_cb+0x10c>)
   1c4ea:	492e      	ldr	r1, [pc, #184]	; (1c5a4 <ticker_cb+0x110>)
   1c4ec:	482e      	ldr	r0, [pc, #184]	; (1c5a8 <ticker_cb+0x114>)
   1c4ee:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   1c4f2:	f00b fb26 	bl	27b42 <printk>
   1c4f6:	4040      	eors	r0, r0
   1c4f8:	f380 8811 	msr	BASEPRI, r0
   1c4fc:	f04f 0003 	mov.w	r0, #3
   1c500:	df02      	svc	2
	if (!lll->is_hdcd)
   1c502:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
   1c506:	f010 0501 	ands.w	r5, r0, #1
   1c50a:	d1ea      	bne.n	1c4e2 <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   1c50c:	2104      	movs	r1, #4
   1c50e:	a809      	add	r0, sp, #36	; 0x24
   1c510:	f006 fca4 	bl	22e5c <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1c514:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1c516:	4a25      	ldr	r2, [pc, #148]	; (1c5ac <ticker_cb+0x118>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c518:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1c51a:	fba2 1203 	umull	r1, r2, r2, r3
   1c51e:	1a99      	subs	r1, r3, r2
   1c520:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   1c524:	0a12      	lsrs	r2, r2, #8
   1c526:	f240 1147 	movw	r1, #327	; 0x147
   1c52a:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1c52e:	4a20      	ldr	r2, [pc, #128]	; (1c5b0 <ticker_cb+0x11c>)
   1c530:	4920      	ldr	r1, [pc, #128]	; (1c5b4 <ticker_cb+0x120>)
   1c532:	1aa2      	subs	r2, r4, r2
   1c534:	0892      	lsrs	r2, r2, #2
   1c536:	fba1 1202 	umull	r1, r2, r1, r2
   1c53a:	0892      	lsrs	r2, r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c53c:	491e      	ldr	r1, [pc, #120]	; (1c5b8 <ticker_cb+0x124>)
				    (TICKER_ID_ADV_BASE +
   1c53e:	3202      	adds	r2, #2
		random_delay += 1;
   1c540:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c542:	e9cd 5104 	strd	r5, r1, [sp, #16]
   1c546:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1c54a:	e9cd 5500 	strd	r5, r5, [sp]
   1c54e:	b2d2      	uxtb	r2, r2
   1c550:	2101      	movs	r1, #1
   1c552:	4628      	mov	r0, r5
		random_delay += 1;
   1c554:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1c556:	f7fd f8e9 	bl	1972c <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1c55a:	f030 0302 	bics.w	r3, r0, #2
   1c55e:	d0c0      	beq.n	1c4e2 <ticker_cb+0x4e>
   1c560:	4a0f      	ldr	r2, [pc, #60]	; (1c5a0 <ticker_cb+0x10c>)
   1c562:	4916      	ldr	r1, [pc, #88]	; (1c5bc <ticker_cb+0x128>)
   1c564:	4810      	ldr	r0, [pc, #64]	; (1c5a8 <ticker_cb+0x114>)
   1c566:	f240 63ee 	movw	r3, #1774	; 0x6ee
   1c56a:	f00b faea 	bl	27b42 <printk>
   1c56e:	4040      	eors	r0, r0
   1c570:	f380 8811 	msr	BASEPRI, r0
   1c574:	f04f 0003 	mov.w	r0, #3
   1c578:	df02      	svc	2
}
   1c57a:	e7b2      	b.n	1c4e2 <ticker_cb+0x4e>
		LL_ASSERT(ref);
   1c57c:	4a08      	ldr	r2, [pc, #32]	; (1c5a0 <ticker_cb+0x10c>)
   1c57e:	4910      	ldr	r1, [pc, #64]	; (1c5c0 <ticker_cb+0x12c>)
   1c580:	4809      	ldr	r0, [pc, #36]	; (1c5a8 <ticker_cb+0x114>)
   1c582:	f240 63cb 	movw	r3, #1739	; 0x6cb
   1c586:	f00b fadc 	bl	27b42 <printk>
   1c58a:	4040      	eors	r0, r0
   1c58c:	f380 8811 	msr	BASEPRI, r0
   1c590:	f04f 0003 	mov.w	r0, #3
   1c594:	df02      	svc	2
   1c596:	e78f      	b.n	1c4b8 <ticker_cb+0x24>
   1c598:	20001c74 	.word	0x20001c74
   1c59c:	200003ec 	.word	0x200003ec
   1c5a0:	0002bd28 	.word	0x0002bd28
   1c5a4:	0002bc88 	.word	0x0002bc88
   1c5a8:	0002b8dc 	.word	0x0002b8dc
   1c5ac:	90d4f121 	.word	0x90d4f121
   1c5b0:	20001c14 	.word	0x20001c14
   1c5b4:	30c30c31 	.word	0x30c30c31
   1c5b8:	0001c681 	.word	0x0001c681
   1c5bc:	0002bd74 	.word	0x0002bd74
   1c5c0:	0002bdbc 	.word	0x0002bdbc

0001c5c4 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   1c5c4:	2800      	cmp	r0, #0
   1c5c6:	d13d      	bne.n	1c644 <ticker_op_stop_cb+0x80>
{
   1c5c8:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
   1c5ca:	4d26      	ldr	r5, [pc, #152]	; (1c664 <ticker_op_stop_cb+0xa0>)
   1c5cc:	f101 031c 	add.w	r3, r1, #28
   1c5d0:	60ab      	str	r3, [r5, #8]
	return hdr->ref;
   1c5d2:	460c      	mov	r4, r1
   1c5d4:	7809      	ldrb	r1, [r1, #0]
	if (ull_ref_get(hdr)) {
   1c5d6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1c5da:	b1e1      	cbz	r1, 1c616 <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   1c5dc:	6962      	ldr	r2, [r4, #20]
   1c5de:	b16a      	cbz	r2, 1c5fc <ticker_op_stop_cb+0x38>
   1c5e0:	4a21      	ldr	r2, [pc, #132]	; (1c668 <ticker_op_stop_cb+0xa4>)
   1c5e2:	4922      	ldr	r1, [pc, #136]	; (1c66c <ticker_op_stop_cb+0xa8>)
   1c5e4:	4822      	ldr	r0, [pc, #136]	; (1c670 <ticker_op_stop_cb+0xac>)
   1c5e6:	f240 7346 	movw	r3, #1862	; 0x746
   1c5ea:	f00b faaa 	bl	27b42 <printk>
   1c5ee:	4040      	eors	r0, r0
   1c5f0:	f380 8811 	msr	BASEPRI, r0
   1c5f4:	f04f 0003 	mov.w	r0, #3
   1c5f8:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1c5fa:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1c5fc:	491d      	ldr	r1, [pc, #116]	; (1c674 <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
   1c5fe:	481e      	ldr	r0, [pc, #120]	; (1c678 <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
   1c600:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1c602:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1c604:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1c606:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1c608:	4b16      	ldr	r3, [pc, #88]	; (1c664 <ticker_op_stop_cb+0xa0>)
   1c60a:	4611      	mov	r1, r2
   1c60c:	2002      	movs	r0, #2
   1c60e:	f7fb fed9 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1c612:	b9c0      	cbnz	r0, 1c646 <ticker_op_stop_cb+0x82>
}
   1c614:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1c616:	4817      	ldr	r0, [pc, #92]	; (1c674 <ticker_op_stop_cb+0xb0>)
   1c618:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1c61a:	462b      	mov	r3, r5
   1c61c:	2101      	movs	r1, #1
   1c61e:	2002      	movs	r0, #2
   1c620:	f7fb fed0 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1c624:	2800      	cmp	r0, #0
   1c626:	d0f5      	beq.n	1c614 <ticker_op_stop_cb+0x50>
   1c628:	4a0f      	ldr	r2, [pc, #60]	; (1c668 <ticker_op_stop_cb+0xa4>)
   1c62a:	4914      	ldr	r1, [pc, #80]	; (1c67c <ticker_op_stop_cb+0xb8>)
   1c62c:	4810      	ldr	r0, [pc, #64]	; (1c670 <ticker_op_stop_cb+0xac>)
   1c62e:	f240 7354 	movw	r3, #1876	; 0x754
   1c632:	f00b fa86 	bl	27b42 <printk>
   1c636:	4040      	eors	r0, r0
   1c638:	f380 8811 	msr	BASEPRI, r0
   1c63c:	f04f 0003 	mov.w	r0, #3
   1c640:	df02      	svc	2
}
   1c642:	bd38      	pop	{r3, r4, r5, pc}
   1c644:	4770      	bx	lr
		LL_ASSERT(!ret);
   1c646:	4a08      	ldr	r2, [pc, #32]	; (1c668 <ticker_op_stop_cb+0xa4>)
   1c648:	490c      	ldr	r1, [pc, #48]	; (1c67c <ticker_op_stop_cb+0xb8>)
   1c64a:	4809      	ldr	r0, [pc, #36]	; (1c670 <ticker_op_stop_cb+0xac>)
   1c64c:	f240 734d 	movw	r3, #1869	; 0x74d
   1c650:	f00b fa77 	bl	27b42 <printk>
   1c654:	4040      	eors	r0, r0
   1c656:	f380 8811 	msr	BASEPRI, r0
   1c65a:	f04f 0003 	mov.w	r0, #3
   1c65e:	df02      	svc	2
}
   1c660:	bd38      	pop	{r3, r4, r5, pc}
   1c662:	bf00      	nop
   1c664:	200003fc 	.word	0x200003fc
   1c668:	0002bd28 	.word	0x0002bd28
   1c66c:	0002bdc0 	.word	0x0002bdc0
   1c670:	0002b8dc 	.word	0x0002b8dc
   1c674:	0001c401 	.word	0x0001c401
   1c678:	00022e89 	.word	0x00022e89
   1c67c:	0002bc88 	.word	0x0002bc88

0001c680 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1c680:	b900      	cbnz	r0, 1c684 <ticker_op_update_cb+0x4>
   1c682:	4770      	bx	lr
{
   1c684:	b510      	push	{r4, lr}
   1c686:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1c688:	f7ff fc5e 	bl	1bf48 <ull_disable_mark_get>
   1c68c:	4284      	cmp	r4, r0
   1c68e:	d00c      	beq.n	1c6aa <ticker_op_update_cb+0x2a>
   1c690:	4a06      	ldr	r2, [pc, #24]	; (1c6ac <ticker_op_update_cb+0x2c>)
   1c692:	4907      	ldr	r1, [pc, #28]	; (1c6b0 <ticker_op_update_cb+0x30>)
   1c694:	4807      	ldr	r0, [pc, #28]	; (1c6b4 <ticker_op_update_cb+0x34>)
   1c696:	f240 730f 	movw	r3, #1807	; 0x70f
   1c69a:	f00b fa52 	bl	27b42 <printk>
   1c69e:	4040      	eors	r0, r0
   1c6a0:	f380 8811 	msr	BASEPRI, r0
   1c6a4:	f04f 0003 	mov.w	r0, #3
   1c6a8:	df02      	svc	2
}
   1c6aa:	bd10      	pop	{r4, pc}
   1c6ac:	0002bd28 	.word	0x0002bd28
   1c6b0:	0002bdd4 	.word	0x0002bdd4
   1c6b4:	0002b8dc 	.word	0x0002b8dc

0001c6b8 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
   1c6b8:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1c6ba:	4b13      	ldr	r3, [pc, #76]	; (1c708 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1c6bc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c6be:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1c6c2:	f893 c04a 	ldrb.w	ip, [r3, #74]	; 0x4a
   1c6c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
   1c6ca:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   1c6ce:	f022 0202 	bic.w	r2, r2, #2
   1c6d2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   1c6d4:	f042 020e 	orr.w	r2, r2, #14
   1c6d8:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
   1c6da:	2006      	movs	r0, #6
	pdu->type = pdu_type;
   1c6dc:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1c6de:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1c6e2:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
   1c6e6:	f8a3 e048 	strh.w	lr, [r3, #72]	; 0x48
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
   1c6ea:	f883 c04a 	strb.w	ip, [r3, #74]	; 0x4a
	pdu->len = BDADDR_SIZE;
   1c6ee:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
   1c6f0:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1c6f2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
   1c6f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1c6fa:	2204      	movs	r2, #4
   1c6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
   1c6fe:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
   1c700:	701a      	strb	r2, [r3, #0]
	adv->lll.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
   1c702:	f85d fb04 	ldr.w	pc, [sp], #4
   1c706:	bf00      	nop
   1c708:	20001c14 	.word	0x20001c14

0001c70c <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
   1c70c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
   1c70e:	4c1b      	ldr	r4, [pc, #108]	; (1c77c <conn_release.constprop.0+0x70>)
   1c710:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
   1c712:	6dab      	ldr	r3, [r5, #88]	; 0x58
   1c714:	b163      	cbz	r3, 1c730 <conn_release.constprop.0+0x24>
   1c716:	4a1a      	ldr	r2, [pc, #104]	; (1c780 <conn_release.constprop.0+0x74>)
   1c718:	491a      	ldr	r1, [pc, #104]	; (1c784 <conn_release.constprop.0+0x78>)
   1c71a:	481b      	ldr	r0, [pc, #108]	; (1c788 <conn_release.constprop.0+0x7c>)
   1c71c:	f240 738f 	movw	r3, #1935	; 0x78f
   1c720:	f00b fa0f 	bl	27b42 <printk>
   1c724:	4040      	eors	r0, r0
   1c726:	f380 8811 	msr	BASEPRI, r0
   1c72a:	f04f 0003 	mov.w	r0, #3
   1c72e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   1c730:	f105 014c 	add.w	r1, r5, #76	; 0x4c
   1c734:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1c738:	f7fb fdc6 	bl	182c8 <memq_deinit>
	LL_ASSERT(link);
   1c73c:	4606      	mov	r6, r0
   1c73e:	b170      	cbz	r0, 1c75e <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
   1c740:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   1c742:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
   1c744:	f001 f892 	bl	1d86c <ll_conn_release>
	adv->lll.conn = NULL;
   1c748:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
   1c74a:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->lll.conn = NULL;
   1c74c:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
   1c74e:	f7ff fb3f 	bl	1bdd0 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
   1c752:	6c20      	ldr	r0, [r4, #64]	; 0x40
	adv->node_rx_cc_free = NULL;
   1c754:	6465      	str	r5, [r4, #68]	; 0x44
	ll_rx_link_release(adv->link_cc_free);
   1c756:	f7ff fb2f 	bl	1bdb8 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   1c75a:	6425      	str	r5, [r4, #64]	; 0x40
}
   1c75c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   1c75e:	4a08      	ldr	r2, [pc, #32]	; (1c780 <conn_release.constprop.0+0x74>)
   1c760:	490a      	ldr	r1, [pc, #40]	; (1c78c <conn_release.constprop.0+0x80>)
   1c762:	4809      	ldr	r0, [pc, #36]	; (1c788 <conn_release.constprop.0+0x7c>)
   1c764:	f240 7391 	movw	r3, #1937	; 0x791
   1c768:	f00b f9eb 	bl	27b42 <printk>
   1c76c:	4040      	eors	r0, r0
   1c76e:	f380 8811 	msr	BASEPRI, r0
   1c772:	f04f 0003 	mov.w	r0, #3
   1c776:	df02      	svc	2
   1c778:	e7e2      	b.n	1c740 <conn_release.constprop.0+0x34>
   1c77a:	bf00      	nop
   1c77c:	20001c14 	.word	0x20001c14
   1c780:	0002bd28 	.word	0x0002bd28
   1c784:	0002be04 	.word	0x0002be04
   1c788:	0002b8dc 	.word	0x0002b8dc
   1c78c:	0002be98 	.word	0x0002be98

0001c790 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
   1c790:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
   1c792:	4c4a      	ldr	r4, [pc, #296]	; (1c8bc <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   1c794:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   1c796:	4620      	mov	r0, r4
   1c798:	f7ff fbc0 	bl	1bf1c <ull_disable_mark>
	LL_ASSERT(mark == adv);
   1c79c:	4284      	cmp	r4, r0
   1c79e:	d00c      	beq.n	1c7ba <disable.part.0+0x2a>
   1c7a0:	4a47      	ldr	r2, [pc, #284]	; (1c8c0 <disable.part.0+0x130>)
   1c7a2:	4948      	ldr	r1, [pc, #288]	; (1c8c4 <disable.part.0+0x134>)
   1c7a4:	4848      	ldr	r0, [pc, #288]	; (1c8c8 <disable.part.0+0x138>)
   1c7a6:	f240 73f2 	movw	r3, #2034	; 0x7f2
   1c7aa:	f00b f9ca 	bl	27b42 <printk>
   1c7ae:	4040      	eors	r0, r0
   1c7b0:	f380 8811 	msr	BASEPRI, r0
   1c7b4:	f04f 0003 	mov.w	r0, #3
   1c7b8:	df02      	svc	2
	if (adv->lll.is_hdcd) {
   1c7ba:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c7be:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c7c0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   1c7c2:	d50d      	bpl.n	1c7e0 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   1c7c4:	2102      	movs	r1, #2
   1c7c6:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1c7c8:	4b40      	ldr	r3, [pc, #256]	; (1c8cc <disable.part.0+0x13c>)
   1c7ca:	9500      	str	r5, [sp, #0]
   1c7cc:	2103      	movs	r1, #3
   1c7ce:	2201      	movs	r2, #1
   1c7d0:	2000      	movs	r0, #0
   1c7d2:	f7fc ffc3 	bl	1975c <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
   1c7d6:	4629      	mov	r1, r5
   1c7d8:	f7ff fb78 	bl	1becc <ull_ticker_status_take>
		if (ret) {
   1c7dc:	2800      	cmp	r0, #0
   1c7de:	d157      	bne.n	1c890 <disable.part.0+0x100>
	ret_cb = TICKER_STATUS_BUSY;
   1c7e0:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1c7e2:	2103      	movs	r1, #3
   1c7e4:	4b39      	ldr	r3, [pc, #228]	; (1c8cc <disable.part.0+0x13c>)
   1c7e6:	9500      	str	r5, [sp, #0]
   1c7e8:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   1c7ea:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1c7ec:	f7fc ffb6 	bl	1975c <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   1c7f0:	4629      	mov	r1, r5
   1c7f2:	f7ff fb6b 	bl	1becc <ull_ticker_status_take>
	if (ret) {
   1c7f6:	2800      	cmp	r0, #0
   1c7f8:	d135      	bne.n	1c866 <disable.part.0+0xd6>
	ret = ull_disable(&adv->lll);
   1c7fa:	4835      	ldr	r0, [pc, #212]	; (1c8d0 <disable.part.0+0x140>)
   1c7fc:	f7ff fbc6 	bl	1bf8c <ull_disable>
	LL_ASSERT(!ret);
   1c800:	b9f0      	cbnz	r0, 1c840 <disable.part.0+0xb0>
	mark = ull_disable_unmark(adv);
   1c802:	482e      	ldr	r0, [pc, #184]	; (1c8bc <disable.part.0+0x12c>)
   1c804:	f7ff fb94 	bl	1bf30 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1c808:	4284      	cmp	r4, r0
   1c80a:	d00c      	beq.n	1c826 <disable.part.0+0x96>
   1c80c:	4a2c      	ldr	r2, [pc, #176]	; (1c8c0 <disable.part.0+0x130>)
   1c80e:	492d      	ldr	r1, [pc, #180]	; (1c8c4 <disable.part.0+0x134>)
   1c810:	482d      	ldr	r0, [pc, #180]	; (1c8c8 <disable.part.0+0x138>)
   1c812:	f640 0314 	movw	r3, #2068	; 0x814
   1c816:	f00b f994 	bl	27b42 <printk>
   1c81a:	4040      	eors	r0, r0
   1c81c:	f380 8811 	msr	BASEPRI, r0
   1c820:	f04f 0003 	mov.w	r0, #3
   1c824:	df02      	svc	2
	if (adv->lll.conn) {
   1c826:	6a23      	ldr	r3, [r4, #32]
   1c828:	b10b      	cbz	r3, 1c82e <disable.part.0+0x9e>
		conn_release(adv);
   1c82a:	f7ff ff6f 	bl	1c70c <conn_release.constprop.0>
	adv->is_enabled = 0U;
   1c82e:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
	return 0;
   1c832:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   1c834:	f36f 0300 	bfc	r3, #0, #1
   1c838:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   1c83c:	b005      	add	sp, #20
   1c83e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   1c840:	4a1f      	ldr	r2, [pc, #124]	; (1c8c0 <disable.part.0+0x130>)
   1c842:	4924      	ldr	r1, [pc, #144]	; (1c8d4 <disable.part.0+0x144>)
   1c844:	4820      	ldr	r0, [pc, #128]	; (1c8c8 <disable.part.0+0x138>)
   1c846:	f640 0311 	movw	r3, #2065	; 0x811
   1c84a:	f00b f97a 	bl	27b42 <printk>
   1c84e:	4040      	eors	r0, r0
   1c850:	f380 8811 	msr	BASEPRI, r0
   1c854:	f04f 0003 	mov.w	r0, #3
   1c858:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   1c85a:	4818      	ldr	r0, [pc, #96]	; (1c8bc <disable.part.0+0x12c>)
   1c85c:	f7ff fb68 	bl	1bf30 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   1c860:	4284      	cmp	r4, r0
   1c862:	d1d3      	bne.n	1c80c <disable.part.0+0x7c>
   1c864:	e7df      	b.n	1c826 <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
   1c866:	4815      	ldr	r0, [pc, #84]	; (1c8bc <disable.part.0+0x12c>)
   1c868:	f7ff fb62 	bl	1bf30 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   1c86c:	4284      	cmp	r4, r0
   1c86e:	d021      	beq.n	1c8b4 <disable.part.0+0x124>
   1c870:	4a13      	ldr	r2, [pc, #76]	; (1c8c0 <disable.part.0+0x130>)
   1c872:	4914      	ldr	r1, [pc, #80]	; (1c8c4 <disable.part.0+0x134>)
   1c874:	4814      	ldr	r0, [pc, #80]	; (1c8c8 <disable.part.0+0x138>)
   1c876:	f640 030b 	movw	r3, #2059	; 0x80b
   1c87a:	f00b f962 	bl	27b42 <printk>
   1c87e:	4040      	eors	r0, r0
   1c880:	f380 8811 	msr	BASEPRI, r0
   1c884:	f04f 0003 	mov.w	r0, #3
   1c888:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c88a:	200c      	movs	r0, #12
}
   1c88c:	b005      	add	sp, #20
   1c88e:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
   1c890:	480a      	ldr	r0, [pc, #40]	; (1c8bc <disable.part.0+0x12c>)
   1c892:	f7ff fb4d 	bl	1bf30 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   1c896:	4284      	cmp	r4, r0
   1c898:	d00c      	beq.n	1c8b4 <disable.part.0+0x124>
   1c89a:	4a09      	ldr	r2, [pc, #36]	; (1c8c0 <disable.part.0+0x130>)
   1c89c:	4909      	ldr	r1, [pc, #36]	; (1c8c4 <disable.part.0+0x134>)
   1c89e:	480a      	ldr	r0, [pc, #40]	; (1c8c8 <disable.part.0+0x138>)
   1c8a0:	f240 73fd 	movw	r3, #2045	; 0x7fd
   1c8a4:	f00b f94d 	bl	27b42 <printk>
   1c8a8:	4040      	eors	r0, r0
   1c8aa:	f380 8811 	msr	BASEPRI, r0
   1c8ae:	f04f 0003 	mov.w	r0, #3
   1c8b2:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   1c8b4:	200c      	movs	r0, #12
}
   1c8b6:	b005      	add	sp, #20
   1c8b8:	bd30      	pop	{r4, r5, pc}
   1c8ba:	bf00      	nop
   1c8bc:	20001c14 	.word	0x20001c14
   1c8c0:	0002bd28 	.word	0x0002bd28
   1c8c4:	0002be18 	.word	0x0002be18
   1c8c8:	0002b8dc 	.word	0x0002b8dc
   1c8cc:	0001b0ad 	.word	0x0001b0ad
   1c8d0:	20001c30 	.word	0x20001c30
   1c8d4:	0002bc88 	.word	0x0002bc88

0001c8d8 <ll_adv_params_set>:
{
   1c8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   1c8dc:	4c4d      	ldr	r4, [pc, #308]	; (1ca14 <ll_adv_params_set+0x13c>)
{
   1c8de:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c8e0:	4b4d      	ldr	r3, [pc, #308]	; (1ca18 <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   1c8e2:	f894 604a 	ldrb.w	r6, [r4, #74]	; 0x4a
{
   1c8e6:	4680      	mov	r8, r0
   1c8e8:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c8ea:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   1c8ee:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   1c8f0:	f016 0601 	ands.w	r6, r6, #1
{
   1c8f4:	4615      	mov	r5, r2
   1c8f6:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   1c8fa:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1c8fe:	9000      	str	r0, [sp, #0]
   1c900:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   1c904:	d170      	bne.n	1c9e8 <ll_adv_params_set+0x110>
	adv->lll.chan_map = chan_map;
   1c906:	f00c 0c07 	and.w	ip, ip, #7
   1c90a:	f002 0203 	and.w	r2, r2, #3
   1c90e:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   1c912:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1c916:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
   1c91a:	f1be 0f01 	cmp.w	lr, #1
   1c91e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   1c922:	bf08      	it	eq
   1c924:	f04f 0800 	moveq.w	r8, #0
   1c928:	f8a4 8048 	strh.w	r8, [r4, #72]	; 0x48
   1c92c:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
   1c930:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu->type = pdu_adv_type[adv_type];
   1c932:	ab02      	add	r3, sp, #8
   1c934:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
   1c936:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   1c93a:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   1c93e:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   1c942:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
   1c946:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
   1c94a:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1c94e:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   1c952:	f022 021f 	bic.w	r2, r2, #31
   1c956:	f003 030f 	and.w	r3, r3, #15
   1c95a:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   1c95e:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1c962:	bf0c      	ite	eq
   1c964:	2101      	moveq	r1, #1
   1c966:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   1c968:	f365 0242 	bfi	r2, r5, #1, #2
   1c96c:	f361 1345 	bfi	r3, r1, #5, #1
   1c970:	f888 3000 	strb.w	r3, [r8]
   1c974:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1c978:	b2d3      	uxtb	r3, r2
   1c97a:	0752      	lsls	r2, r2, #29
   1c97c:	d509      	bpl.n	1c992 <ll_adv_params_set+0xba>
		adv->peer_addr_type = direct_addr_type;
   1c97e:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   1c982:	9908      	ldr	r1, [sp, #32]
		adv->peer_addr_type = direct_addr_type;
   1c984:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
   1c988:	2206      	movs	r2, #6
   1c98a:	f104 004b 	add.w	r0, r4, #75	; 0x4b
   1c98e:	f00c f942 	bl	28c16 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1c992:	f898 3000 	ldrb.w	r3, [r8]
   1c996:	f003 020f 	and.w	r2, r3, #15
   1c99a:	2a01      	cmp	r2, #1
   1c99c:	d029      	beq.n	1c9f2 <ll_adv_params_set+0x11a>
	} else if (pdu->len == 0) {
   1c99e:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   1c9a2:	f005 0501 	and.w	r5, r5, #1
   1c9a6:	f365 1386 	bfi	r3, r5, #6, #1
	} else if (pdu->len == 0) {
   1c9aa:	b1aa      	cbz	r2, 1c9d8 <ll_adv_params_set+0x100>
		pdu->rx_addr = 0;
   1c9ac:	f36f 13c7 	bfc	r3, #7, #1
   1c9b0:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1c9b4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   1c9b8:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c9bc:	01ad      	lsls	r5, r5, #6
   1c9be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
   1c9c0:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1c9c2:	f045 0504 	orr.w	r5, r5, #4
   1c9c6:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   1c9c8:	b912      	cbnz	r2, 1c9d0 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   1c9ca:	2106      	movs	r1, #6
   1c9cc:	7059      	strb	r1, [r3, #1]
	return 0;
   1c9ce:	4616      	mov	r6, r2
}
   1c9d0:	4630      	mov	r0, r6
   1c9d2:	b002      	add	sp, #8
   1c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   1c9d8:	f362 13c7 	bfi	r3, r2, #7, #1
   1c9dc:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   1c9e0:	2306      	movs	r3, #6
   1c9e2:	f888 3001 	strb.w	r3, [r8, #1]
   1c9e6:	e7e5      	b.n	1c9b4 <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1c9e8:	260c      	movs	r6, #12
}
   1c9ea:	4630      	mov	r0, r6
   1c9ec:	b002      	add	sp, #8
   1c9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   1c9f2:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   1c9f6:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   1c9f8:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   1c9fc:	f367 13c7 	bfi	r3, r7, #7, #1
   1ca00:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   1ca04:	9908      	ldr	r1, [sp, #32]
   1ca06:	2206      	movs	r2, #6
   1ca08:	f00c f905 	bl	28c16 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   1ca0c:	230c      	movs	r3, #12
   1ca0e:	f888 3001 	strb.w	r3, [r8, #1]
   1ca12:	e7cf      	b.n	1c9b4 <ll_adv_params_set+0xdc>
   1ca14:	20001c14 	.word	0x20001c14
   1ca18:	0002b438 	.word	0x0002b438

0001ca1c <ll_adv_data_set>:
{
   1ca1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1ca1e:	4e21      	ldr	r6, [pc, #132]	; (1caa4 <ll_adv_data_set+0x88>)
   1ca20:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   1ca24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   1ca28:	b083      	sub	sp, #12
   1ca2a:	6add      	ldr	r5, [r3, #44]	; 0x2c
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ca2c:	782b      	ldrb	r3, [r5, #0]
   1ca2e:	f003 030f 	and.w	r3, r3, #15
   1ca32:	2b01      	cmp	r3, #1
   1ca34:	d032      	beq.n	1ca9c <ll_adv_data_set+0x80>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1ca36:	281f      	cmp	r0, #31
   1ca38:	4604      	mov	r4, r0
   1ca3a:	d82c      	bhi.n	1ca96 <ll_adv_data_set+0x7a>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1ca3c:	460f      	mov	r7, r1
   1ca3e:	f106 0028 	add.w	r0, r6, #40	; 0x28
   1ca42:	f10d 0107 	add.w	r1, sp, #7
   1ca46:	f006 fe33 	bl	236b0 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   1ca4a:	4629      	mov	r1, r5
   1ca4c:	4605      	mov	r5, r0
   1ca4e:	f811 2b02 	ldrb.w	r2, [r1], #2
   1ca52:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   1ca56:	f3c2 0303 	ubfx	r3, r2, #0, #4
   1ca5a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   1ca5e:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   1ca62:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   1ca66:	f002 0280 	and.w	r2, r2, #128	; 0x80
   1ca6a:	4628      	mov	r0, r5
   1ca6c:	4313      	orrs	r3, r2
   1ca6e:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   1ca72:	2206      	movs	r2, #6
   1ca74:	f00c f8cf 	bl	28c16 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   1ca78:	4622      	mov	r2, r4
   1ca7a:	4639      	mov	r1, r7
   1ca7c:	f105 0008 	add.w	r0, r5, #8
   1ca80:	f00c f8c9 	bl	28c16 <memcpy>
	pdu->last = idx;
   1ca84:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   1ca88:	3406      	adds	r4, #6
	return 0;
   1ca8a:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   1ca8c:	706c      	strb	r4, [r5, #1]
   1ca8e:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
}
   1ca92:	b003      	add	sp, #12
   1ca94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   1ca96:	2012      	movs	r0, #18
}
   1ca98:	b003      	add	sp, #12
   1ca9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   1ca9c:	2000      	movs	r0, #0
}
   1ca9e:	b003      	add	sp, #12
   1caa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1caa2:	bf00      	nop
   1caa4:	20001c14 	.word	0x20001c14

0001caa8 <ull_adv_init>:
{
   1caa8:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1caaa:	4c06      	ldr	r4, [pc, #24]	; (1cac4 <ull_adv_init+0x1c>)
   1caac:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1cab0:	f006 fde8 	bl	23684 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1cab4:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1cab8:	f006 fde4 	bl	23684 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   1cabc:	f7ff fdfc 	bl	1c6b8 <init_set.constprop.0>
}
   1cac0:	2000      	movs	r0, #0
   1cac2:	bd10      	pop	{r4, pc}
   1cac4:	20001c14 	.word	0x20001c14

0001cac8 <ull_adv_reset>:
{
   1cac8:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   1caca:	4b0b      	ldr	r3, [pc, #44]	; (1caf8 <ull_adv_reset+0x30>)
   1cacc:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
   1cad0:	07d2      	lsls	r2, r2, #31
   1cad2:	d50e      	bpl.n	1caf2 <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   1cad4:	6a1a      	ldr	r2, [r3, #32]
   1cad6:	b152      	cbz	r2, 1caee <ull_adv_reset+0x26>
		adv->lll.conn->slave.cancelled = 1U;
   1cad8:	f892 1020 	ldrb.w	r1, [r2, #32]
   1cadc:	f041 0102 	orr.w	r1, r1, #2
   1cae0:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
   1cae4:	6a1b      	ldr	r3, [r3, #32]
   1cae6:	f893 3020 	ldrb.w	r3, [r3, #32]
   1caea:	07db      	lsls	r3, r3, #31
   1caec:	d401      	bmi.n	1caf2 <ull_adv_reset+0x2a>
   1caee:	f7ff fe4f 	bl	1c790 <disable.part.0>
}
   1caf2:	2000      	movs	r0, #0
   1caf4:	bd08      	pop	{r3, pc}
   1caf6:	bf00      	nop
   1caf8:	20001c14 	.word	0x20001c14

0001cafc <ull_adv_reset_finalize>:
{
   1cafc:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   1cafe:	4c0a      	ldr	r4, [pc, #40]	; (1cb28 <ull_adv_reset_finalize+0x2c>)
   1cb00:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1cb04:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   1cb06:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   1cb08:	f006 fdcc 	bl	236a4 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   1cb0c:	4620      	mov	r0, r4
   1cb0e:	f006 fdc9 	bl	236a4 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1cb12:	4628      	mov	r0, r5
   1cb14:	f006 fdb6 	bl	23684 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1cb18:	4620      	mov	r0, r4
   1cb1a:	f006 fdb3 	bl	23684 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   1cb1e:	f7ff fdcb 	bl	1c6b8 <init_set.constprop.0>
}
   1cb22:	2000      	movs	r0, #0
   1cb24:	bd38      	pop	{r3, r4, r5, pc}
   1cb26:	bf00      	nop
   1cb28:	20001c14 	.word	0x20001c14

0001cb2c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1cb2c:	4a04      	ldr	r2, [pc, #16]	; (1cb40 <ull_adv_handle_get+0x14>)
   1cb2e:	4b05      	ldr	r3, [pc, #20]	; (1cb44 <ull_adv_handle_get+0x18>)
   1cb30:	1a80      	subs	r0, r0, r2
   1cb32:	0880      	lsrs	r0, r0, #2
   1cb34:	fba3 3000 	umull	r3, r0, r3, r0
}
   1cb38:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1cb3c:	4770      	bx	lr
   1cb3e:	bf00      	nop
   1cb40:	20001c14 	.word	0x20001c14
   1cb44:	30c30c31 	.word	0x30c30c31

0001cb48 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1cb48:	4a04      	ldr	r2, [pc, #16]	; (1cb5c <ull_adv_lll_handle_get+0x14>)
   1cb4a:	6800      	ldr	r0, [r0, #0]
   1cb4c:	4b04      	ldr	r3, [pc, #16]	; (1cb60 <ull_adv_lll_handle_get+0x18>)
   1cb4e:	1a80      	subs	r0, r0, r2
   1cb50:	0880      	lsrs	r0, r0, #2
   1cb52:	fba3 3000 	umull	r3, r0, r3, r0
}
   1cb56:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1cb5a:	4770      	bx	lr
   1cb5c:	20001c14 	.word	0x20001c14
   1cb60:	30c30c31 	.word	0x30c30c31

0001cb64 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1cb64:	b938      	cbnz	r0, 1cb76 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   1cb66:	4805      	ldr	r0, [pc, #20]	; (1cb7c <ull_adv_is_enabled_get+0x18>)
   1cb68:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
	return &ll_adv[handle];
   1cb6c:	f013 0f01 	tst.w	r3, #1
   1cb70:	bf08      	it	eq
   1cb72:	2000      	moveq	r0, #0
   1cb74:	4770      	bx	lr
		return NULL;
   1cb76:	2000      	movs	r0, #0
}
   1cb78:	4770      	bx	lr
   1cb7a:	bf00      	nop
   1cb7c:	20001c14 	.word	0x20001c14

0001cb80 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   1cb80:	b928      	cbnz	r0, 1cb8e <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   1cb82:	4b04      	ldr	r3, [pc, #16]	; (1cb94 <ull_adv_is_enabled+0x14>)
   1cb84:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   1cb88:	f000 0001 	and.w	r0, r0, #1
   1cb8c:	4770      	bx	lr
   1cb8e:	2000      	movs	r0, #0
}
   1cb90:	4770      	bx	lr
   1cb92:	bf00      	nop
   1cb94:	20001c14 	.word	0x20001c14

0001cb98 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   1cb98:	b950      	cbnz	r0, 1cbb0 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   1cb9a:	4b06      	ldr	r3, [pc, #24]	; (1cbb4 <ull_adv_filter_pol_get+0x1c>)
   1cb9c:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
   1cba0:	f010 0001 	ands.w	r0, r0, #1
   1cba4:	d005      	beq.n	1cbb2 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1cba6:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1cbaa:	f000 0003 	and.w	r0, r0, #3
   1cbae:	4770      	bx	lr
		return 0;
   1cbb0:	2000      	movs	r0, #0
}
   1cbb2:	4770      	bx	lr
   1cbb4:	20001c14 	.word	0x20001c14

0001cbb8 <ull_scan_rsp_set>:
{
   1cbb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   1cbba:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   1cbbe:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1cbc2:	b083      	sub	sp, #12
   1cbc4:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   1cbc6:	460e      	mov	r6, r1
   1cbc8:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1cbca:	f10d 0107 	add.w	r1, sp, #7
   1cbce:	3034      	adds	r0, #52	; 0x34
   1cbd0:	4617      	mov	r7, r2
   1cbd2:	f006 fd6d 	bl	236b0 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1cbd6:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1cbd8:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   1cbda:	f811 3b02 	ldrb.w	r3, [r1], #2
   1cbde:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1cbe2:	019b      	lsls	r3, r3, #6
   1cbe4:	f043 0304 	orr.w	r3, r3, #4
   1cbe8:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1cbea:	1db3      	adds	r3, r6, #6
   1cbec:	7043      	strb	r3, [r0, #1]
   1cbee:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1cbf0:	3002      	adds	r0, #2
   1cbf2:	f00c f810 	bl	28c16 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1cbf6:	4632      	mov	r2, r6
   1cbf8:	4639      	mov	r1, r7
   1cbfa:	f105 0008 	add.w	r0, r5, #8
   1cbfe:	f00c f80a 	bl	28c16 <memcpy>
	pdu->last = idx;
   1cc02:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1cc06:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
   1cc0a:	2000      	movs	r0, #0
   1cc0c:	b003      	add	sp, #12
   1cc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001cc10 <ll_adv_scan_rsp_set>:
{
   1cc10:	4603      	mov	r3, r0
   1cc12:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   1cc14:	4801      	ldr	r0, [pc, #4]	; (1cc1c <ll_adv_scan_rsp_set+0xc>)
   1cc16:	4619      	mov	r1, r3
   1cc18:	f7ff bfce 	b.w	1cbb8 <ull_scan_rsp_set>
   1cc1c:	20001c14 	.word	0x20001c14

0001cc20 <ull_adv_pdu_update_addrs>:
{
   1cc20:	b570      	push	{r4, r5, r6, lr}
   1cc22:	460c      	mov	r4, r1
   1cc24:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
   1cc26:	f005 fcc1 	bl	225ac <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   1cc2a:	4601      	mov	r1, r0
   1cc2c:	b300      	cbz	r0, 1cc70 <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   1cc2e:	7823      	ldrb	r3, [r4, #0]
   1cc30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cc34:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   1cc36:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   1cc38:	2206      	movs	r2, #6
   1cc3a:	4630      	mov	r0, r6
   1cc3c:	f00b ffeb 	bl	28c16 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1cc40:	7823      	ldrb	r3, [r4, #0]
   1cc42:	f003 030f 	and.w	r3, r3, #15
   1cc46:	2b01      	cmp	r3, #1
   1cc48:	d001      	beq.n	1cc4e <ull_adv_pdu_update_addrs+0x2e>
}
   1cc4a:	4630      	mov	r0, r6
   1cc4c:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
   1cc4e:	4628      	mov	r0, r5
   1cc50:	f005 fcda 	bl	22608 <ull_filter_tgta_get>
	if (rx_addr) {
   1cc54:	4601      	mov	r1, r0
   1cc56:	2800      	cmp	r0, #0
   1cc58:	d0f7      	beq.n	1cc4a <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   1cc5a:	7823      	ldrb	r3, [r4, #0]
   1cc5c:	4620      	mov	r0, r4
   1cc5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1cc62:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   1cc66:	2206      	movs	r2, #6
   1cc68:	f00b ffd5 	bl	28c16 <memcpy>
}
   1cc6c:	4630      	mov	r0, r6
   1cc6e:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   1cc70:	7820      	ldrb	r0, [r4, #0]
   1cc72:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1cc76:	f7fc fdb5 	bl	197e4 <ll_addr_get>
   1cc7a:	4601      	mov	r1, r0
	if (rpa) {
   1cc7c:	e7db      	b.n	1cc36 <ull_adv_pdu_update_addrs+0x16>
   1cc7e:	bf00      	nop

0001cc80 <init_reset>:
{
   1cc80:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1cc82:	4b15      	ldr	r3, [pc, #84]	; (1ccd8 <init_reset+0x58>)
   1cc84:	4815      	ldr	r0, [pc, #84]	; (1ccdc <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1cc86:	4c16      	ldr	r4, [pc, #88]	; (1cce0 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   1cc88:	2201      	movs	r2, #1
   1cc8a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1cc8e:	f7fb fa91 	bl	181b4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   1cc92:	4b14      	ldr	r3, [pc, #80]	; (1cce4 <init_reset+0x64>)
   1cc94:	2203      	movs	r2, #3
   1cc96:	1d18      	adds	r0, r3, #4
   1cc98:	2124      	movs	r1, #36	; 0x24
   1cc9a:	f7fb fa8b 	bl	181b4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1cc9e:	4b12      	ldr	r3, [pc, #72]	; (1cce8 <init_reset+0x68>)
   1cca0:	2204      	movs	r2, #4
   1cca2:	1898      	adds	r0, r3, r2
   1cca4:	212c      	movs	r1, #44	; 0x2c
   1cca6:	f7fb fa85 	bl	181b4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   1ccaa:	4b10      	ldr	r3, [pc, #64]	; (1ccec <init_reset+0x6c>)
   1ccac:	2207      	movs	r2, #7
   1ccae:	1d18      	adds	r0, r3, #4
   1ccb0:	2108      	movs	r1, #8
   1ccb2:	f7fb fa7f 	bl	181b4 <mem_init>
	default_phy_tx |= PHY_2M;
   1ccb6:	490e      	ldr	r1, [pc, #56]	; (1ccf0 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   1ccb8:	4a0e      	ldr	r2, [pc, #56]	; (1ccf4 <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1ccba:	480f      	ldr	r0, [pc, #60]	; (1ccf8 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   1ccbc:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1ccbe:	f04f 0c1b 	mov.w	ip, #27
   1ccc2:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   1ccc6:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1ccc8:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   1cccc:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1ccce:	f8a0 c000 	strh.w	ip, [r0]
}
   1ccd2:	2000      	movs	r0, #0
   1ccd4:	bd10      	pop	{r4, pc}
   1ccd6:	bf00      	nop
   1ccd8:	20001c84 	.word	0x20001c84
   1ccdc:	20000dc8 	.word	0x20000dc8
   1cce0:	2000258e 	.word	0x2000258e
   1cce4:	20001cac 	.word	0x20001cac
   1cce8:	20001d1c 	.word	0x20001d1c
   1ccec:	20001dd0 	.word	0x20001dd0
   1ccf0:	20002638 	.word	0x20002638
   1ccf4:	20002637 	.word	0x20002637
   1ccf8:	20002590 	.word	0x20002590

0001ccfc <ctrl_tx_pause_enqueue>:
{
   1ccfc:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   1ccfe:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
{
   1cd02:	4604      	mov	r4, r0
   1cd04:	460d      	mov	r5, r1
	if (
   1cd06:	b11b      	cbz	r3, 1cd10 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   1cd08:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
	    conn->tx_head &&
   1cd0c:	0788      	lsls	r0, r1, #30
   1cd0e:	d50e      	bpl.n	1cd2e <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
   1cd10:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1cd14:	b351      	cbz	r1, 1cd6c <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
   1cd16:	2a00      	cmp	r2, #0
   1cd18:	d132      	bne.n	1cd80 <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
   1cd1a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1cd1e:	681a      	ldr	r2, [r3, #0]
   1cd20:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1cd22:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1cd24:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1cd26:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1cd2a:	b1e3      	cbz	r3, 1cd66 <ctrl_tx_pause_enqueue+0x6a>
}
   1cd2c:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   1cd2e:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1cd32:	07c9      	lsls	r1, r1, #31
   1cd34:	d4ec      	bmi.n	1cd10 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   1cd36:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1cd3a:	428b      	cmp	r3, r1
   1cd3c:	d02e      	beq.n	1cd9c <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
   1cd3e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1cd42:	2900      	cmp	r1, #0
   1cd44:	d038      	beq.n	1cdb8 <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
   1cd46:	2a00      	cmp	r2, #0
   1cd48:	d0e7      	beq.n	1cd1a <ctrl_tx_pause_enqueue+0x1e>
   1cd4a:	4a23      	ldr	r2, [pc, #140]	; (1cdd8 <ctrl_tx_pause_enqueue+0xdc>)
   1cd4c:	4923      	ldr	r1, [pc, #140]	; (1cddc <ctrl_tx_pause_enqueue+0xe0>)
   1cd4e:	4824      	ldr	r0, [pc, #144]	; (1cde0 <ctrl_tx_pause_enqueue+0xe4>)
   1cd50:	f640 03ce 	movw	r3, #2254	; 0x8ce
   1cd54:	f00a fef5 	bl	27b42 <printk>
   1cd58:	4040      	eors	r0, r0
   1cd5a:	f380 8811 	msr	BASEPRI, r0
   1cd5e:	f04f 0003 	mov.w	r0, #3
   1cd62:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   1cd64:	e7d9      	b.n	1cd1a <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
   1cd66:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   1cd6a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   1cd6c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   1cd6e:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   1cd72:	2a00      	cmp	r2, #0
   1cd74:	d1d9      	bne.n	1cd2a <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
   1cd76:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1cd7a:	2b00      	cmp	r3, #0
   1cd7c:	d1d6      	bne.n	1cd2c <ctrl_tx_pause_enqueue+0x30>
   1cd7e:	e7f2      	b.n	1cd66 <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
   1cd80:	4a15      	ldr	r2, [pc, #84]	; (1cdd8 <ctrl_tx_pause_enqueue+0xdc>)
   1cd82:	4916      	ldr	r1, [pc, #88]	; (1cddc <ctrl_tx_pause_enqueue+0xe0>)
   1cd84:	4816      	ldr	r0, [pc, #88]	; (1cde0 <ctrl_tx_pause_enqueue+0xe4>)
   1cd86:	f44f 630e 	mov.w	r3, #2272	; 0x8e0
   1cd8a:	f00a feda 	bl	27b42 <printk>
   1cd8e:	4040      	eors	r0, r0
   1cd90:	f380 8811 	msr	BASEPRI, r0
   1cd94:	f04f 0003 	mov.w	r0, #3
   1cd98:	df02      	svc	2
   1cd9a:	e7be      	b.n	1cd1a <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
   1cd9c:	6819      	ldr	r1, [r3, #0]
   1cd9e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1cda2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1cda6:	2900      	cmp	r1, #0
   1cda8:	d1cd      	bne.n	1cd46 <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
   1cdaa:	6819      	ldr	r1, [r3, #0]
   1cdac:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1cdae:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1cdb0:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   1cdb2:	2a00      	cmp	r2, #0
   1cdb4:	d0df      	beq.n	1cd76 <ctrl_tx_pause_enqueue+0x7a>
   1cdb6:	e7b8      	b.n	1cd2a <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1cdb8:	7919      	ldrb	r1, [r3, #4]
   1cdba:	f001 0103 	and.w	r1, r1, #3
   1cdbe:	2903      	cmp	r1, #3
   1cdc0:	d004      	beq.n	1cdcc <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1cdc2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   1cdc6:	2a00      	cmp	r2, #0
   1cdc8:	d0a7      	beq.n	1cd1a <ctrl_tx_pause_enqueue+0x1e>
   1cdca:	e7be      	b.n	1cd4a <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
   1cdcc:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1cdce:	2903      	cmp	r1, #3
   1cdd0:	d0eb      	beq.n	1cdaa <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1cdd2:	290a      	cmp	r1, #10
   1cdd4:	d1f5      	bne.n	1cdc2 <ctrl_tx_pause_enqueue+0xc6>
   1cdd6:	e7e8      	b.n	1cdaa <ctrl_tx_pause_enqueue+0xae>
   1cdd8:	0002be34 	.word	0x0002be34
   1cddc:	0002be74 	.word	0x0002be74
   1cde0:	0002b8dc 	.word	0x0002b8dc

0001cde4 <ticker_op_stop_cb>:
{
   1cde4:	b538      	push	{r3, r4, r5, lr}
   1cde6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1cde8:	2800      	cmp	r0, #0
   1cdea:	d14a      	bne.n	1ce82 <ticker_op_stop_cb+0x9e>
	mfy.param = &conn->lll;
   1cdec:	4d2c      	ldr	r5, [pc, #176]	; (1cea0 <ticker_op_stop_cb+0xbc>)
   1cdee:	f104 031c 	add.w	r3, r4, #28
   1cdf2:	60ab      	str	r3, [r5, #8]
   1cdf4:	7821      	ldrb	r1, [r4, #0]
	if (ull_ref_get(hdr)) {
   1cdf6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   1cdfa:	2900      	cmp	r1, #0
   1cdfc:	d02a      	beq.n	1ce54 <ticker_op_stop_cb+0x70>
		LL_ASSERT(!hdr->disabled_cb);
   1cdfe:	6962      	ldr	r2, [r4, #20]
   1ce00:	b16a      	cbz	r2, 1ce1e <ticker_op_stop_cb+0x3a>
   1ce02:	4a28      	ldr	r2, [pc, #160]	; (1cea4 <ticker_op_stop_cb+0xc0>)
   1ce04:	4928      	ldr	r1, [pc, #160]	; (1cea8 <ticker_op_stop_cb+0xc4>)
   1ce06:	4829      	ldr	r0, [pc, #164]	; (1ceac <ticker_op_stop_cb+0xc8>)
   1ce08:	f240 73f2 	movw	r3, #2034	; 0x7f2
   1ce0c:	f00a fe99 	bl	27b42 <printk>
   1ce10:	4040      	eors	r0, r0
   1ce12:	f380 8811 	msr	BASEPRI, r0
   1ce16:	f04f 0003 	mov.w	r0, #3
   1ce1a:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1ce1c:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   1ce1e:	4924      	ldr	r1, [pc, #144]	; (1ceb0 <ticker_op_stop_cb+0xcc>)
		mfy.fp = lll_disable;
   1ce20:	4824      	ldr	r0, [pc, #144]	; (1ceb4 <ticker_op_stop_cb+0xd0>)
		hdr->disabled_param = mfy.param;
   1ce22:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1ce24:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1ce26:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1ce28:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1ce2a:	4b1d      	ldr	r3, [pc, #116]	; (1cea0 <ticker_op_stop_cb+0xbc>)
   1ce2c:	4611      	mov	r1, r2
   1ce2e:	2002      	movs	r0, #2
   1ce30:	f7fb fac8 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1ce34:	b900      	cbnz	r0, 1ce38 <ticker_op_stop_cb+0x54>
}
   1ce36:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   1ce38:	4a1a      	ldr	r2, [pc, #104]	; (1cea4 <ticker_op_stop_cb+0xc0>)
   1ce3a:	491f      	ldr	r1, [pc, #124]	; (1ceb8 <ticker_op_stop_cb+0xd4>)
   1ce3c:	481b      	ldr	r0, [pc, #108]	; (1ceac <ticker_op_stop_cb+0xc8>)
   1ce3e:	f240 73f9 	movw	r3, #2041	; 0x7f9
   1ce42:	f00a fe7e 	bl	27b42 <printk>
   1ce46:	4040      	eors	r0, r0
   1ce48:	f380 8811 	msr	BASEPRI, r0
   1ce4c:	f04f 0003 	mov.w	r0, #3
   1ce50:	df02      	svc	2
}
   1ce52:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1ce54:	4816      	ldr	r0, [pc, #88]	; (1ceb0 <ticker_op_stop_cb+0xcc>)
   1ce56:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1ce58:	462b      	mov	r3, r5
   1ce5a:	2101      	movs	r1, #1
   1ce5c:	2002      	movs	r0, #2
   1ce5e:	f7fb fab1 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1ce62:	2800      	cmp	r0, #0
   1ce64:	d0e7      	beq.n	1ce36 <ticker_op_stop_cb+0x52>
   1ce66:	4a0f      	ldr	r2, [pc, #60]	; (1cea4 <ticker_op_stop_cb+0xc0>)
   1ce68:	4913      	ldr	r1, [pc, #76]	; (1ceb8 <ticker_op_stop_cb+0xd4>)
   1ce6a:	4810      	ldr	r0, [pc, #64]	; (1ceac <ticker_op_stop_cb+0xc8>)
   1ce6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1ce70:	f00a fe67 	bl	27b42 <printk>
   1ce74:	4040      	eors	r0, r0
   1ce76:	f380 8811 	msr	BASEPRI, r0
   1ce7a:	f04f 0003 	mov.w	r0, #3
   1ce7e:	df02      	svc	2
}
   1ce80:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1ce82:	4a08      	ldr	r2, [pc, #32]	; (1cea4 <ticker_op_stop_cb+0xc0>)
   1ce84:	490d      	ldr	r1, [pc, #52]	; (1cebc <ticker_op_stop_cb+0xd8>)
   1ce86:	4809      	ldr	r0, [pc, #36]	; (1ceac <ticker_op_stop_cb+0xc8>)
   1ce88:	f240 73e4 	movw	r3, #2020	; 0x7e4
   1ce8c:	f00a fe59 	bl	27b42 <printk>
   1ce90:	4040      	eors	r0, r0
   1ce92:	f380 8811 	msr	BASEPRI, r0
   1ce96:	f04f 0003 	mov.w	r0, #3
   1ce9a:	df02      	svc	2
   1ce9c:	e7a6      	b.n	1cdec <ticker_op_stop_cb+0x8>
   1ce9e:	bf00      	nop
   1cea0:	20000484 	.word	0x20000484
   1cea4:	0002be34 	.word	0x0002be34
   1cea8:	0002bdc0 	.word	0x0002bdc0
   1ceac:	0002b8dc 	.word	0x0002b8dc
   1ceb0:	0001d039 	.word	0x0001d039
   1ceb4:	00022e89 	.word	0x00022e89
   1ceb8:	0002bc88 	.word	0x0002bc88
   1cebc:	0002be7c 	.word	0x0002be7c

0001cec0 <tx_lll_flush>:
{
   1cec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   1cec4:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1cec8:	4934      	ldr	r1, [pc, #208]	; (1cf9c <tx_lll_flush+0xdc>)
{
   1ceca:	b083      	sub	sp, #12
   1cecc:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1cece:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1ced2:	4640      	mov	r0, r8
   1ced4:	f7fb f9d4 	bl	18280 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1ced8:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   1cedc:	4629      	mov	r1, r5
   1cede:	f007 f851 	bl	23f84 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1cee2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   1cee4:	aa01      	add	r2, sp, #4
   1cee6:	4631      	mov	r1, r6
   1cee8:	f7fb fa0a 	bl	18300 <memq_dequeue>
	while (link) {
   1ceec:	b328      	cbz	r0, 1cf3a <tx_lll_flush+0x7a>
   1ceee:	4c2c      	ldr	r4, [pc, #176]	; (1cfa0 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   1cef0:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1cef4:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1cef8:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1cefa:	f894 c001 	ldrb.w	ip, [r4, #1]
   1cefe:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   1cf00:	1c4b      	adds	r3, r1, #1
   1cf02:	b2db      	uxtb	r3, r3
		last = 0U;
   1cf04:	459c      	cmp	ip, r3
   1cf06:	bf08      	it	eq
   1cf08:	2300      	moveq	r3, #0
	if (last == first) {
   1cf0a:	429a      	cmp	r2, r3
   1cf0c:	d035      	beq.n	1cf7a <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1cf0e:	7822      	ldrb	r2, [r4, #0]
   1cf10:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   1cf14:	eb19 0c02 	adds.w	ip, r9, r2
   1cf18:	d02f      	beq.n	1cf7a <tx_lll_flush+0xba>
		lll_tx->node = tx;
   1cf1a:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   1cf1c:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1cf20:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   1cf22:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1cf26:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1cf28:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1cf2a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   1cf2c:	70e3      	strb	r3, [r4, #3]
   1cf2e:	aa01      	add	r2, sp, #4
   1cf30:	4631      	mov	r1, r6
   1cf32:	f7fb f9e5 	bl	18300 <memq_dequeue>
	while (link) {
   1cf36:	2800      	cmp	r0, #0
   1cf38:	d1de      	bne.n	1cef8 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   1cf3a:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   1cf3e:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   1cf42:	b150      	cbz	r0, 1cf5a <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1cf44:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1cf46:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   1cf48:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   1cf4c:	f7ff f8d2 	bl	1c0f4 <ull_rx_put>
	ull_rx_sched();
   1cf50:	f7ff f8e0 	bl	1c114 <ull_rx_sched>
}
   1cf54:	b003      	add	sp, #12
   1cf56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   1cf5a:	4a12      	ldr	r2, [pc, #72]	; (1cfa4 <tx_lll_flush+0xe4>)
   1cf5c:	4912      	ldr	r1, [pc, #72]	; (1cfa8 <tx_lll_flush+0xe8>)
   1cf5e:	4813      	ldr	r0, [pc, #76]	; (1cfac <tx_lll_flush+0xec>)
   1cf60:	f640 033b 	movw	r3, #2107	; 0x83b
   1cf64:	f00a fded 	bl	27b42 <printk>
   1cf68:	4040      	eors	r0, r0
   1cf6a:	f380 8811 	msr	BASEPRI, r0
   1cf6e:	f04f 0003 	mov.w	r0, #3
   1cf72:	df02      	svc	2
	link = rx->hdr.link;
   1cf74:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   1cf78:	e7e4      	b.n	1cf44 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   1cf7a:	4a0a      	ldr	r2, [pc, #40]	; (1cfa4 <tx_lll_flush+0xe4>)
   1cf7c:	490c      	ldr	r1, [pc, #48]	; (1cfb0 <tx_lll_flush+0xf0>)
   1cf7e:	480b      	ldr	r0, [pc, #44]	; (1cfac <tx_lll_flush+0xec>)
   1cf80:	f640 0327 	movw	r3, #2087	; 0x827
   1cf84:	f00a fddd 	bl	27b42 <printk>
   1cf88:	4040      	eors	r0, r0
   1cf8a:	f380 8811 	msr	BASEPRI, r0
   1cf8e:	f04f 0003 	mov.w	r0, #3
   1cf92:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1cf94:	2300      	movs	r3, #0
   1cf96:	801b      	strh	r3, [r3, #0]
   1cf98:	deff      	udf	#255	; 0xff
   1cf9a:	bf00      	nop
   1cf9c:	20000dc8 	.word	0x20000dc8
   1cfa0:	2000040c 	.word	0x2000040c
   1cfa4:	0002be34 	.word	0x0002be34
   1cfa8:	0002be90 	.word	0x0002be90
   1cfac:	0002b8dc 	.word	0x0002b8dc
   1cfb0:	0002be88 	.word	0x0002be88

0001cfb4 <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   1cfb4:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   1cfb8:	f012 0202 	ands.w	r2, r2, #2
   1cfbc:	d00a      	beq.n	1cfd4 <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   1cfbe:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   1cfc2:	b1d3      	cbz	r3, 1cffa <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   1cfc4:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   1cfc8:	681a      	ldr	r2, [r3, #0]
   1cfca:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1cfcc:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   1cfce:	680b      	ldr	r3, [r1, #0]
   1cfd0:	b1d3      	cbz	r3, 1d008 <ctrl_tx_sec_enqueue+0x54>
   1cfd2:	4770      	bx	lr
		if (conn->tx_head) {
   1cfd4:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1cfd8:	b1cb      	cbz	r3, 1d00e <ctrl_tx_sec_enqueue+0x5a>
{
   1cfda:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   1cfdc:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   1cfe0:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   1cfe4:	45e6      	cmp	lr, ip
   1cfe6:	d004      	beq.n	1cff2 <ctrl_tx_sec_enqueue+0x3e>
   1cfe8:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   1cfec:	f1bc 0f03 	cmp.w	ip, #3
   1cff0:	d010      	beq.n	1d014 <ctrl_tx_sec_enqueue+0x60>
}
   1cff2:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1cff6:	f7ff be81 	b.w	1ccfc <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   1cffa:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1cffe:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1d000:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   1d004:	2b00      	cmp	r3, #0
   1d006:	d1e4      	bne.n	1cfd2 <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   1d008:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   1d00c:	4770      	bx	lr
	bool pause = false;
   1d00e:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1d010:	f7ff be74 	b.w	1ccfc <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1d014:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   1d018:	f00c 0c03 	and.w	ip, ip, #3
   1d01c:	f1bc 0f03 	cmp.w	ip, #3
   1d020:	d1e7      	bne.n	1cff2 <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   1d022:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1d024:	2a03      	cmp	r2, #3
   1d026:	d005      	beq.n	1d034 <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   1d028:	f1a2 020a 	sub.w	r2, r2, #10
   1d02c:	fab2 f282 	clz	r2, r2
   1d030:	0952      	lsrs	r2, r2, #5
   1d032:	e7de      	b.n	1cff2 <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   1d034:	2201      	movs	r2, #1
   1d036:	e7dc      	b.n	1cff2 <ctrl_tx_sec_enqueue+0x3e>

0001d038 <disabled_cb>:
{
   1d038:	b508      	push	{r3, lr}
	mfy.param = param;
   1d03a:	4b0b      	ldr	r3, [pc, #44]	; (1d068 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1d03c:	2200      	movs	r2, #0
	mfy.param = param;
   1d03e:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1d040:	4611      	mov	r1, r2
   1d042:	2001      	movs	r0, #1
   1d044:	f7fb f9be 	bl	183c4 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1d048:	b900      	cbnz	r0, 1d04c <disabled_cb+0x14>
}
   1d04a:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1d04c:	4a07      	ldr	r2, [pc, #28]	; (1d06c <disabled_cb+0x34>)
   1d04e:	4908      	ldr	r1, [pc, #32]	; (1d070 <disabled_cb+0x38>)
   1d050:	4808      	ldr	r0, [pc, #32]	; (1d074 <disabled_cb+0x3c>)
   1d052:	f640 030d 	movw	r3, #2061	; 0x80d
   1d056:	f00a fd74 	bl	27b42 <printk>
   1d05a:	4040      	eors	r0, r0
   1d05c:	f380 8811 	msr	BASEPRI, r0
   1d060:	f04f 0003 	mov.w	r0, #3
   1d064:	df02      	svc	2
}
   1d066:	bd08      	pop	{r3, pc}
   1d068:	20000474 	.word	0x20000474
   1d06c:	0002be34 	.word	0x0002be34
   1d070:	0002bc88 	.word	0x0002bc88
   1d074:	0002b8dc 	.word	0x0002b8dc

0001d078 <conn_setup_adv_scan_disabled_cb>:
{
   1d078:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   1d07a:	6883      	ldr	r3, [r0, #8]
   1d07c:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   1d07e:	7f53      	ldrb	r3, [r2, #29]
   1d080:	09db      	lsrs	r3, r3, #7
   1d082:	d10d      	bne.n	1d0a0 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   1d084:	4a09      	ldr	r2, [pc, #36]	; (1d0ac <conn_setup_adv_scan_disabled_cb+0x34>)
   1d086:	490a      	ldr	r1, [pc, #40]	; (1d0b0 <conn_setup_adv_scan_disabled_cb+0x38>)
   1d088:	480a      	ldr	r0, [pc, #40]	; (1d0b4 <conn_setup_adv_scan_disabled_cb+0x3c>)
   1d08a:	f240 7383 	movw	r3, #1923	; 0x783
   1d08e:	f00a fd58 	bl	27b42 <printk>
   1d092:	4040      	eors	r0, r0
   1d094:	f380 8811 	msr	BASEPRI, r0
   1d098:	f04f 0003 	mov.w	r0, #3
   1d09c:	df02      	svc	2
}
   1d09e:	bd08      	pop	{r3, pc}
		ull_slave_setup(rx, ftr, lll);
   1d0a0:	4601      	mov	r1, r0
}
   1d0a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_slave_setup(rx, ftr, lll);
   1d0a6:	3108      	adds	r1, #8
   1d0a8:	f7f3 bf06 	b.w	10eb8 <ull_slave_setup>
   1d0ac:	0002be34 	.word	0x0002be34
   1d0b0:	0002b974 	.word	0x0002b974
   1d0b4:	0002b8dc 	.word	0x0002b8dc

0001d0b8 <ticker_start_conn_op_cb>:
{
   1d0b8:	b510      	push	{r4, lr}
   1d0ba:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d0bc:	b990      	cbnz	r0, 1d0e4 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   1d0be:	4620      	mov	r0, r4
   1d0c0:	f7fe ff52 	bl	1bf68 <ull_update_unmark>
	LL_ASSERT(p == param);
   1d0c4:	4284      	cmp	r4, r0
   1d0c6:	d00c      	beq.n	1d0e2 <ticker_start_conn_op_cb+0x2a>
   1d0c8:	4a0d      	ldr	r2, [pc, #52]	; (1d100 <ticker_start_conn_op_cb+0x48>)
   1d0ca:	490e      	ldr	r1, [pc, #56]	; (1d104 <ticker_start_conn_op_cb+0x4c>)
   1d0cc:	480e      	ldr	r0, [pc, #56]	; (1d108 <ticker_start_conn_op_cb+0x50>)
   1d0ce:	f240 7364 	movw	r3, #1892	; 0x764
   1d0d2:	f00a fd36 	bl	27b42 <printk>
   1d0d6:	4040      	eors	r0, r0
   1d0d8:	f380 8811 	msr	BASEPRI, r0
   1d0dc:	f04f 0003 	mov.w	r0, #3
   1d0e0:	df02      	svc	2
}
   1d0e2:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d0e4:	4a06      	ldr	r2, [pc, #24]	; (1d100 <ticker_start_conn_op_cb+0x48>)
   1d0e6:	4909      	ldr	r1, [pc, #36]	; (1d10c <ticker_start_conn_op_cb+0x54>)
   1d0e8:	4807      	ldr	r0, [pc, #28]	; (1d108 <ticker_start_conn_op_cb+0x50>)
   1d0ea:	f240 7361 	movw	r3, #1889	; 0x761
   1d0ee:	f00a fd28 	bl	27b42 <printk>
   1d0f2:	4040      	eors	r0, r0
   1d0f4:	f380 8811 	msr	BASEPRI, r0
   1d0f8:	f04f 0003 	mov.w	r0, #3
   1d0fc:	df02      	svc	2
   1d0fe:	e7de      	b.n	1d0be <ticker_start_conn_op_cb+0x6>
   1d100:	0002be34 	.word	0x0002be34
   1d104:	0002bea0 	.word	0x0002bea0
   1d108:	0002b8dc 	.word	0x0002b8dc
   1d10c:	0002be7c 	.word	0x0002be7c

0001d110 <ticker_stop_conn_op_cb>:
{
   1d110:	b510      	push	{r4, lr}
   1d112:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d114:	b990      	cbnz	r0, 1d13c <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1d116:	4620      	mov	r0, r4
   1d118:	f7fe ff1c 	bl	1bf54 <ull_update_mark>
	LL_ASSERT(p == param);
   1d11c:	4284      	cmp	r4, r0
   1d11e:	d00c      	beq.n	1d13a <ticker_stop_conn_op_cb+0x2a>
   1d120:	4a0d      	ldr	r2, [pc, #52]	; (1d158 <ticker_stop_conn_op_cb+0x48>)
   1d122:	490e      	ldr	r1, [pc, #56]	; (1d15c <ticker_stop_conn_op_cb+0x4c>)
   1d124:	480e      	ldr	r0, [pc, #56]	; (1d160 <ticker_stop_conn_op_cb+0x50>)
   1d126:	f240 735a 	movw	r3, #1882	; 0x75a
   1d12a:	f00a fd0a 	bl	27b42 <printk>
   1d12e:	4040      	eors	r0, r0
   1d130:	f380 8811 	msr	BASEPRI, r0
   1d134:	f04f 0003 	mov.w	r0, #3
   1d138:	df02      	svc	2
}
   1d13a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1d13c:	4a06      	ldr	r2, [pc, #24]	; (1d158 <ticker_stop_conn_op_cb+0x48>)
   1d13e:	4909      	ldr	r1, [pc, #36]	; (1d164 <ticker_stop_conn_op_cb+0x54>)
   1d140:	4807      	ldr	r0, [pc, #28]	; (1d160 <ticker_stop_conn_op_cb+0x50>)
   1d142:	f240 7357 	movw	r3, #1879	; 0x757
   1d146:	f00a fcfc 	bl	27b42 <printk>
   1d14a:	4040      	eors	r0, r0
   1d14c:	f380 8811 	msr	BASEPRI, r0
   1d150:	f04f 0003 	mov.w	r0, #3
   1d154:	df02      	svc	2
   1d156:	e7de      	b.n	1d116 <ticker_stop_conn_op_cb+0x6>
   1d158:	0002be34 	.word	0x0002be34
   1d15c:	0002bea0 	.word	0x0002bea0
   1d160:	0002b8dc 	.word	0x0002b8dc
   1d164:	0002be7c 	.word	0x0002be7c

0001d168 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1d168:	b900      	cbnz	r0, 1d16c <ticker_update_conn_op_cb+0x4>
   1d16a:	4770      	bx	lr
{
   1d16c:	b510      	push	{r4, lr}
   1d16e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1d170:	f7fe ff06 	bl	1bf80 <ull_update_mark_get>
   1d174:	4284      	cmp	r4, r0
   1d176:	d010      	beq.n	1d19a <ticker_update_conn_op_cb+0x32>
   1d178:	f7fe fee6 	bl	1bf48 <ull_disable_mark_get>
   1d17c:	4284      	cmp	r4, r0
   1d17e:	d00c      	beq.n	1d19a <ticker_update_conn_op_cb+0x32>
   1d180:	4a06      	ldr	r2, [pc, #24]	; (1d19c <ticker_update_conn_op_cb+0x34>)
   1d182:	4907      	ldr	r1, [pc, #28]	; (1d1a0 <ticker_update_conn_op_cb+0x38>)
   1d184:	4807      	ldr	r0, [pc, #28]	; (1d1a4 <ticker_update_conn_op_cb+0x3c>)
   1d186:	f240 734e 	movw	r3, #1870	; 0x74e
   1d18a:	f00a fcda 	bl	27b42 <printk>
   1d18e:	4040      	eors	r0, r0
   1d190:	f380 8811 	msr	BASEPRI, r0
   1d194:	f04f 0003 	mov.w	r0, #3
   1d198:	df02      	svc	2
}
   1d19a:	bd10      	pop	{r4, pc}
   1d19c:	0002be34 	.word	0x0002be34
   1d1a0:	0002beac 	.word	0x0002beac
   1d1a4:	0002b8dc 	.word	0x0002b8dc

0001d1a8 <tx_ull_dequeue>:
{
   1d1a8:	4603      	mov	r3, r0
   1d1aa:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1d1ac:	f8d0 41c8 	ldr.w	r4, [r0, #456]	; 0x1c8
   1d1b0:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
{
   1d1b4:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1d1b6:	b164      	cbz	r4, 1d1d2 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   1d1b8:	4294      	cmp	r4, r2
   1d1ba:	d021      	beq.n	1d200 <tx_ull_dequeue+0x58>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1d1bc:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   1d1c0:	428a      	cmp	r2, r1
   1d1c2:	d00b      	beq.n	1d1dc <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
   1d1c4:	6811      	ldr	r1, [r2, #0]
   1d1c6:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   1d1ca:	2200      	movs	r2, #0
}
   1d1cc:	bc10      	pop	{r4}
		tx->next = NULL;
   1d1ce:	6002      	str	r2, [r0, #0]
}
   1d1d0:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1d1d2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   1d1d6:	428a      	cmp	r2, r1
   1d1d8:	d104      	bne.n	1d1e4 <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
   1d1da:	b18a      	cbz	r2, 1d200 <tx_ull_dequeue+0x58>
			conn->tx_data = conn->tx_data->next;
   1d1dc:	6809      	ldr	r1, [r1, #0]
   1d1de:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   1d1e2:	e7ef      	b.n	1d1c4 <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d1e4:	7911      	ldrb	r1, [r2, #4]
   1d1e6:	f001 0103 	and.w	r1, r1, #3
   1d1ea:	2903      	cmp	r1, #3
   1d1ec:	d013      	beq.n	1d216 <tx_ull_dequeue+0x6e>
		conn->tx_head = conn->tx_head->next;
   1d1ee:	6812      	ldr	r2, [r2, #0]
   1d1f0:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   1d1f4:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   1d1f6:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   1d1fa:	bc10      	pop	{r4}
		tx->next = tx;
   1d1fc:	6000      	str	r0, [r0, #0]
}
   1d1fe:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1d200:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   1d204:	6812      	ldr	r2, [r2, #0]
   1d206:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1d20a:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   1d20c:	bf18      	it	ne
   1d20e:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1d212:	d1f2      	bne.n	1d1fa <tx_ull_dequeue+0x52>
   1d214:	e7ee      	b.n	1d1f4 <tx_ull_dequeue+0x4c>
	    ((pdu_data_tx->llctrl.opcode !=
   1d216:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d218:	2903      	cmp	r1, #3
   1d21a:	d0d3      	beq.n	1d1c4 <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d21c:	290a      	cmp	r1, #10
   1d21e:	d1e6      	bne.n	1d1ee <tx_ull_dequeue+0x46>
   1d220:	e7d0      	b.n	1d1c4 <tx_ull_dequeue+0x1c>
   1d222:	bf00      	nop

0001d224 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1d224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d226:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   1d228:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   1d22c:	0780      	lsls	r0, r0, #30
{
   1d22e:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   1d230:	d433      	bmi.n	1d29a <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d232:	4830      	ldr	r0, [pc, #192]	; (1d2f4 <reject_ext_ind_send+0xd0>)
   1d234:	4617      	mov	r7, r2
   1d236:	461e      	mov	r6, r3
   1d238:	f7fa ffec 	bl	18214 <mem_acquire>
	if (!tx) {
   1d23c:	2800      	cmp	r0, #0
   1d23e:	d03a      	beq.n	1d2b6 <reject_ext_ind_send+0x92>
	conn->common.txn_lock = 1U;
   1d240:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1d244:	f043 0302 	orr.w	r3, r3, #2
   1d248:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1d24c:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1d24e:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   1d250:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1d252:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1d256:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d258:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1d25a:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d25c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   1d260:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d262:	7102      	strb	r2, [r0, #4]
	if (
   1d264:	b1eb      	cbz	r3, 1d2a2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   1d266:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d26a:	0791      	lsls	r1, r2, #30
   1d26c:	d419      	bmi.n	1d2a2 <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   1d26e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d272:	07d2      	lsls	r2, r2, #31
   1d274:	d415      	bmi.n	1d2a2 <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   1d276:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d27a:	4293      	cmp	r3, r2
   1d27c:	d026      	beq.n	1d2cc <reject_ext_ind_send+0xa8>
		} else if (!conn->tx_ctrl) {
   1d27e:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d282:	b1da      	cbz	r2, 1d2bc <reject_ext_ind_send+0x98>
	tx->next = conn->tx_ctrl_last->next;
   1d284:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d288:	681a      	ldr	r2, [r3, #0]
   1d28a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1d28c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1d28e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1d290:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d294:	b90b      	cbnz	r3, 1d29a <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   1d296:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1d29a:	2301      	movs	r3, #1
   1d29c:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   1d29e:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   1d2a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   1d2a2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d2a6:	2a00      	cmp	r2, #0
   1d2a8:	d1ec      	bne.n	1d284 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   1d2aa:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1d2ac:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d2b0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1d2b4:	e7ee      	b.n	1d294 <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   1d2b6:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1d2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d2bc:	791a      	ldrb	r2, [r3, #4]
   1d2be:	f002 0203 	and.w	r2, r2, #3
   1d2c2:	2a03      	cmp	r2, #3
   1d2c4:	d010      	beq.n	1d2e8 <reject_ext_ind_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d2c6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1d2ca:	e7dd      	b.n	1d288 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   1d2cc:	681a      	ldr	r2, [r3, #0]
   1d2ce:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d2d2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d2d6:	2a00      	cmp	r2, #0
   1d2d8:	d1d4      	bne.n	1d284 <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   1d2da:	681a      	ldr	r2, [r3, #0]
   1d2dc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1d2de:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1d2e0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1d2e2:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1d2e6:	e7d5      	b.n	1d294 <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   1d2e8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d2ea:	2a03      	cmp	r2, #3
   1d2ec:	d0f5      	beq.n	1d2da <reject_ext_ind_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d2ee:	2a0a      	cmp	r2, #10
   1d2f0:	d1e9      	bne.n	1d2c6 <reject_ext_ind_send+0xa2>
   1d2f2:	e7f2      	b.n	1d2da <reject_ext_ind_send+0xb6>
   1d2f4:	20001d1c 	.word	0x20001d1c

0001d2f8 <event_len_prep>:
{
   1d2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   1d2fa:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1d2fe:	f003 0207 	and.w	r2, r3, #7
{
   1d302:	4604      	mov	r4, r0
   1d304:	2a06      	cmp	r2, #6
   1d306:	f200 80d7 	bhi.w	1d4b8 <event_len_prep+0x1c0>
   1d30a:	e8df f002 	tbb	[pc, r2]
   1d30e:	4804      	.short	0x4804
   1d310:	49494848 	.word	0x49494848
   1d314:	48          	.byte	0x48
   1d315:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d316:	486f      	ldr	r0, [pc, #444]	; (1d4d4 <event_len_prep+0x1dc>)
   1d318:	f7fa ff7c 	bl	18214 <mem_acquire>
		if (!tx) {
   1d31c:	2800      	cmp	r0, #0
   1d31e:	d03e      	beq.n	1d39e <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1d320:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1d324:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   1d328:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1d32c:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1d330:	2301      	movs	r3, #1
   1d332:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   1d336:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1d33a:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1d33e:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1d340:	72c3      	strb	r3, [r0, #11]
   1d342:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1d344:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1d346:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1d348:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1d34a:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   1d34c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1d34e:	2214      	movs	r2, #20
	    conn->tx_head &&
   1d350:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   1d354:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1d356:	221b      	movs	r2, #27
   1d358:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d35a:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1d35c:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d35e:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1d362:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d364:	7102      	strb	r2, [r0, #4]
	if (
   1d366:	b13b      	cbz	r3, 1d378 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   1d368:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d36c:	0791      	lsls	r1, r2, #30
   1d36e:	d403      	bmi.n	1d378 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   1d370:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d374:	07d2      	lsls	r2, r2, #31
   1d376:	d576      	bpl.n	1d466 <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   1d378:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d37c:	2a00      	cmp	r2, #0
   1d37e:	f000 8082 	beq.w	1d486 <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
   1d382:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d386:	681a      	ldr	r2, [r3, #0]
   1d388:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1d38a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1d38c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1d38e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d392:	2b00      	cmp	r3, #0
   1d394:	d056      	beq.n	1d444 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   1d396:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1d39a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   1d39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1d3a0:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1d3a4:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   1d3a8:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   1d3ac:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   1d3b0:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   1d3b4:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1d3b8:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   1d3ba:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1d3be:	d024      	beq.n	1d40a <event_len_prep+0x112>
			conn->llcp_length.state =
   1d3c0:	2206      	movs	r2, #6
   1d3c2:	f362 0302 	bfi	r3, r2, #0, #3
   1d3c6:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   1d3ca:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1d3ce:	b335      	cbz	r5, 1d41e <event_len_prep+0x126>
   1d3d0:	6828      	ldr	r0, [r5, #0]
   1d3d2:	b320      	cbz	r0, 1d41e <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1d3d4:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   1d3d6:	6842      	ldr	r2, [r0, #4]
   1d3d8:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1d3dc:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   1d3e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1d3e2:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   1d3e4:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   1d3e6:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   1d3e8:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1d3ea:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1d3ec:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1d3ee:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1d3f0:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   1d3f4:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1d3f6:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1d3f8:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1d3fa:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1d3fc:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1d3fe:	f7fe fced 	bl	1bddc <ll_rx_put>
}
   1d402:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   1d406:	f7fe bcf3 	b.w	1bdf0 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   1d40a:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   1d40e:	b9e2      	cbnz	r2, 1d44a <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   1d410:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   1d414:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   1d418:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   1d41c:	e7d5      	b.n	1d3ca <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   1d41e:	4a2e      	ldr	r2, [pc, #184]	; (1d4d8 <event_len_prep+0x1e0>)
   1d420:	492e      	ldr	r1, [pc, #184]	; (1d4dc <event_len_prep+0x1e4>)
   1d422:	482f      	ldr	r0, [pc, #188]	; (1d4e0 <event_len_prep+0x1e8>)
   1d424:	f640 63d9 	movw	r3, #3801	; 0xed9
   1d428:	f00a fb8b 	bl	27b42 <printk>
   1d42c:	4040      	eors	r0, r0
   1d42e:	f380 8811 	msr	BASEPRI, r0
   1d432:	f04f 0003 	mov.w	r0, #3
   1d436:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1d438:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1d43a:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1d43e:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   1d442:	e7c7      	b.n	1d3d4 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   1d444:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1d448:	e7a5      	b.n	1d396 <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   1d44a:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   1d44e:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1d450:	f362 0302 	bfi	r3, r2, #0, #3
   1d454:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   1d458:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   1d45c:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   1d460:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1d464:	e7b1      	b.n	1d3ca <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   1d466:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d46a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1d46c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d470:	d00f      	beq.n	1d492 <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
   1d472:	2a00      	cmp	r2, #0
   1d474:	d185      	bne.n	1d382 <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d476:	791a      	ldrb	r2, [r3, #4]
   1d478:	f002 0203 	and.w	r2, r2, #3
   1d47c:	2a03      	cmp	r2, #3
   1d47e:	d015      	beq.n	1d4ac <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d480:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1d484:	e77f      	b.n	1d386 <event_len_prep+0x8e>
			tx->next = conn->tx_head;
   1d486:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1d488:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d48c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1d490:	e77f      	b.n	1d392 <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
   1d492:	6819      	ldr	r1, [r3, #0]
   1d494:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d498:	2a00      	cmp	r2, #0
   1d49a:	f47f af72 	bne.w	1d382 <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   1d49e:	681a      	ldr	r2, [r3, #0]
   1d4a0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1d4a2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1d4a4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1d4a6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1d4aa:	e772      	b.n	1d392 <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   1d4ac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d4ae:	2a03      	cmp	r2, #3
   1d4b0:	d0f5      	beq.n	1d49e <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d4b2:	2a0a      	cmp	r2, #10
   1d4b4:	d1e4      	bne.n	1d480 <event_len_prep+0x188>
   1d4b6:	e7f2      	b.n	1d49e <event_len_prep+0x1a6>
		LL_ASSERT(0);
   1d4b8:	4a07      	ldr	r2, [pc, #28]	; (1d4d8 <event_len_prep+0x1e0>)
   1d4ba:	490a      	ldr	r1, [pc, #40]	; (1d4e4 <event_len_prep+0x1ec>)
   1d4bc:	4808      	ldr	r0, [pc, #32]	; (1d4e0 <event_len_prep+0x1e8>)
   1d4be:	f640 7301 	movw	r3, #3841	; 0xf01
   1d4c2:	f00a fb3e 	bl	27b42 <printk>
   1d4c6:	4040      	eors	r0, r0
   1d4c8:	f380 8811 	msr	BASEPRI, r0
   1d4cc:	f04f 0003 	mov.w	r0, #3
   1d4d0:	df02      	svc	2
}
   1d4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d4d4:	20001d1c 	.word	0x20001d1c
   1d4d8:	0002be34 	.word	0x0002be34
   1d4dc:	0002bf00 	.word	0x0002bf00
   1d4e0:	0002b8dc 	.word	0x0002b8dc
   1d4e4:	0002b974 	.word	0x0002b974

0001d4e8 <event_phy_upd_ind_prep>:
{
   1d4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   1d4ec:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   1d4f0:	f013 0201 	ands.w	r2, r3, #1
{
   1d4f4:	4604      	mov	r4, r0
   1d4f6:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1d4f8:	f040 808d 	bne.w	1d616 <event_phy_upd_ind_prep+0x12e>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   1d4fc:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   1d500:	1a71      	subs	r1, r6, r1
   1d502:	0409      	lsls	r1, r1, #16
   1d504:	f100 80d2 	bmi.w	1d6ac <event_phy_upd_ind_prep+0x1c4>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1d508:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   1d50c:	2900      	cmp	r1, #0
   1d50e:	469c      	mov	ip, r3
   1d510:	f2c0 80f7 	blt.w	1d702 <event_phy_upd_ind_prep+0x21a>
			conn->llcp_ack = conn->llcp_req;
   1d514:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1d518:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   1d51c:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   1d520:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   1d524:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   1d528:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   1d52c:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   1d530:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   1d534:	f040 80bc 	bne.w	1d6b0 <event_phy_upd_ind_prep+0x1c8>
		uint16_t eff_tx_time = lll->max_tx_time;
   1d538:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   1d53c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1d540:	d008      	beq.n	1d554 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   1d542:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
   1d546:	095b      	lsrs	r3, r3, #5
   1d548:	f363 0202 	bfi	r2, r3, #0, #3
   1d54c:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   1d550:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   1d554:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1d558:	2d00      	cmp	r5, #0
   1d55a:	f000 80b2 	beq.w	1d6c2 <event_phy_upd_ind_prep+0x1da>
   1d55e:	6828      	ldr	r0, [r5, #0]
   1d560:	2800      	cmp	r0, #0
   1d562:	f000 80ae 	beq.w	1d6c2 <event_phy_upd_ind_prep+0x1da>
		conn->llcp_rx = rx->hdr.link->mem;
   1d566:	6843      	ldr	r3, [r0, #4]
		    (lll->phy_rx == old_rx)) {
   1d568:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		conn->llcp_rx = rx->hdr.link->mem;
   1d56c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1d570:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1d574:	f01c 0f02 	tst.w	ip, #2
   1d578:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   1d57c:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1d580:	d102      	bne.n	1d588 <event_phy_upd_ind_prep+0xa0>
   1d582:	4599      	cmp	r9, r3
   1d584:	f000 80c5 	beq.w	1d712 <event_phy_upd_ind_prep+0x22a>
		rx->hdr.handle = lll->handle;
   1d588:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		upd->tx = lll->phy_tx;
   1d58a:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1d58c:	231a      	movs	r3, #26
   1d58e:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   1d590:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   1d592:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   1d594:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   1d596:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   1d598:	4629      	mov	r1, r5
   1d59a:	f7fe fc1f 	bl	1bddc <ll_rx_put>
		rx = conn->llcp_rx;
   1d59e:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   1d5a2:	2d00      	cmp	r5, #0
   1d5a4:	f000 809e 	beq.w	1d6e4 <event_phy_upd_ind_prep+0x1fc>
   1d5a8:	6828      	ldr	r0, [r5, #0]
   1d5aa:	2800      	cmp	r0, #0
   1d5ac:	f000 809a 	beq.w	1d6e4 <event_phy_upd_ind_prep+0x1fc>
		if ((eff_tx_time <= lll->max_tx_time) &&
   1d5b0:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   1d5b4:	6842      	ldr	r2, [r0, #4]
   1d5b6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   1d5ba:	42b3      	cmp	r3, r6
   1d5bc:	d30a      	bcc.n	1d5d4 <event_phy_upd_ind_prep+0xec>
   1d5be:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1d5c2:	d807      	bhi.n	1d5d4 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   1d5c4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   1d5c8:	42bb      	cmp	r3, r7
   1d5ca:	d303      	bcc.n	1d5d4 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   1d5cc:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1d5d0:	f240 8113 	bls.w	1d7fa <event_phy_upd_ind_prep+0x312>
		lll->max_tx_time = eff_tx_time;
   1d5d4:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   1d5d8:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1d5dc:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1d5de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1d5e0:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1d5e2:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1d5e6:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1d5ea:	2109      	movs	r1, #9
   1d5ec:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1d5ee:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1d5f2:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1d5f4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   1d5f8:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1d5fa:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   1d5fe:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1d600:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1d602:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   1d604:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   1d606:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1d608:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1d60a:	f7fe fbe7 	bl	1bddc <ll_rx_put>
}
   1d60e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   1d612:	f7fe bbed 	b.w	1bdf0 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   1d616:	2002      	movs	r0, #2
   1d618:	f7fe fbf0 	bl	1bdfc <ll_pdu_rx_alloc_peek>
		if (!rx) {
   1d61c:	4680      	mov	r8, r0
   1d61e:	2800      	cmp	r0, #0
   1d620:	d044      	beq.n	1d6ac <event_phy_upd_ind_prep+0x1c4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1d622:	488b      	ldr	r0, [pc, #556]	; (1d850 <event_phy_upd_ind_prep+0x368>)
   1d624:	f7fa fdf6 	bl	18214 <mem_acquire>
		if (!tx) {
   1d628:	4605      	mov	r5, r0
   1d62a:	2800      	cmp	r0, #0
   1d62c:	d03e      	beq.n	1d6ac <event_phy_upd_ind_prep+0x1c4>
		conn->llcp.phy_upd_ind.initiate = 0U;
   1d62e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1d632:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   1d636:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   1d63a:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   1d63e:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   1d642:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   1d646:	b2db      	uxtb	r3, r3
   1d648:	d17e      	bne.n	1d748 <event_phy_upd_ind_prep+0x260>
			conn->llcp_ack = conn->llcp_req;
   1d64a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   1d64e:	f8a4 70ea 	strh.w	r7, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   1d652:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   1d654:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   1d658:	f100 80aa 	bmi.w	1d7b0 <event_phy_upd_ind_prep+0x2c8>
   1d65c:	463b      	mov	r3, r7
   1d65e:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1d660:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   1d662:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1d664:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1d666:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
   1d668:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
   1d66a:	2218      	movs	r2, #24
	    conn->tx_head &&
   1d66c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode =
   1d670:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1d672:	792a      	ldrb	r2, [r5, #4]
   1d674:	f042 0203 	orr.w	r2, r2, #3
   1d678:	712a      	strb	r2, [r5, #4]
	if (
   1d67a:	b13b      	cbz	r3, 1d68c <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_enc.pause_tx &&
   1d67c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1d680:	0796      	lsls	r6, r2, #30
   1d682:	d403      	bmi.n	1d68c <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_phy.pause_tx &&
   1d684:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1d688:	07d0      	lsls	r0, r2, #31
   1d68a:	d57b      	bpl.n	1d784 <event_phy_upd_ind_prep+0x29c>
		if (!conn->tx_ctrl) {
   1d68c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1d690:	2a00      	cmp	r2, #0
   1d692:	f000 8087 	beq.w	1d7a4 <event_phy_upd_ind_prep+0x2bc>
	tx->next = conn->tx_ctrl_last->next;
   1d696:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1d69a:	681a      	ldr	r2, [r3, #0]
   1d69c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1d69e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1d6a0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1d6a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1d6a6:	b90b      	cbnz	r3, 1d6ac <event_phy_upd_ind_prep+0x1c4>
		conn->tx_data_last = tx;
   1d6a8:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   1d6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   1d6b0:	f3c3 0182 	ubfx	r1, r3, #2, #3
   1d6b4:	f361 0202 	bfi	r2, r1, #0, #3
   1d6b8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   1d6bc:	f44f 76a4 	mov.w	r6, #328	; 0x148
   1d6c0:	e73c      	b.n	1d53c <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   1d6c2:	4a64      	ldr	r2, [pc, #400]	; (1d854 <event_phy_upd_ind_prep+0x36c>)
   1d6c4:	4964      	ldr	r1, [pc, #400]	; (1d858 <event_phy_upd_ind_prep+0x370>)
   1d6c6:	4865      	ldr	r0, [pc, #404]	; (1d85c <event_phy_upd_ind_prep+0x374>)
   1d6c8:	f241 0312 	movw	r3, #4114	; 0x1012
   1d6cc:	f00a fa39 	bl	27b42 <printk>
   1d6d0:	4040      	eors	r0, r0
   1d6d2:	f380 8811 	msr	BASEPRI, r0
   1d6d6:	f04f 0003 	mov.w	r0, #3
   1d6da:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1d6dc:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1d6de:	f894 c0e8 	ldrb.w	ip, [r4, #232]	; 0xe8
   1d6e2:	e740      	b.n	1d566 <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   1d6e4:	4a5b      	ldr	r2, [pc, #364]	; (1d854 <event_phy_upd_ind_prep+0x36c>)
   1d6e6:	495c      	ldr	r1, [pc, #368]	; (1d858 <event_phy_upd_ind_prep+0x370>)
   1d6e8:	485c      	ldr	r0, [pc, #368]	; (1d85c <event_phy_upd_ind_prep+0x374>)
   1d6ea:	f241 033e 	movw	r3, #4158	; 0x103e
   1d6ee:	f00a fa28 	bl	27b42 <printk>
   1d6f2:	4040      	eors	r0, r0
   1d6f4:	f380 8811 	msr	BASEPRI, r0
   1d6f8:	f04f 0003 	mov.w	r0, #3
   1d6fc:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1d6fe:	6828      	ldr	r0, [r5, #0]
   1d700:	e756      	b.n	1d5b0 <event_phy_upd_ind_prep+0xc8>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1d702:	f890 10d9 	ldrb.w	r1, [r0, #217]	; 0xd9
   1d706:	2900      	cmp	r1, #0
   1d708:	f43f af04 	beq.w	1d514 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   1d70c:	f880 20d9 	strb.w	r2, [r0, #217]	; 0xd9
   1d710:	e704      	b.n	1d51c <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1d712:	4590      	cmp	r8, r2
   1d714:	f47f af38 	bne.w	1d588 <event_phy_upd_ind_prep+0xa0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1d718:	2301      	movs	r3, #1
   1d71a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1d71c:	4629      	mov	r1, r5
   1d71e:	f7fe fb5d 	bl	1bddc <ll_rx_put>
				rx = conn->llcp_rx;
   1d722:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   1d726:	2d00      	cmp	r5, #0
   1d728:	d07d      	beq.n	1d826 <event_phy_upd_ind_prep+0x33e>
   1d72a:	6828      	ldr	r0, [r5, #0]
   1d72c:	2800      	cmp	r0, #0
   1d72e:	d07a      	beq.n	1d826 <event_phy_upd_ind_prep+0x33e>
				conn->llcp_rx = rx->hdr.link->mem;
   1d730:	6842      	ldr	r2, [r0, #4]
   1d732:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1d736:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   1d738:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1d73a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1d73c:	f7fe fb4e 	bl	1bddc <ll_rx_put>
}
   1d740:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1d744:	f7fe bb54 	b.w	1bdf0 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   1d748:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1d74a:	4431      	add	r1, r6
							 lll->latency +
   1d74c:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   1d74e:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   1d752:	f7fe fb71 	bl	1be38 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1d756:	f8d8 3000 	ldr.w	r3, [r8]
   1d75a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1d75e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   1d760:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
			rx = ll_pdu_rx_alloc();
   1d764:	f7fe fb68 	bl	1be38 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   1d768:	6803      	ldr	r3, [r0, #0]
   1d76a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1d76e:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1d770:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1d774:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
			conn->llcp_rx = rx;
   1d778:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1d77c:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1d780:	095b      	lsrs	r3, r3, #5
   1d782:	e76d      	b.n	1d660 <event_phy_upd_ind_prep+0x178>
		if (conn->tx_head == conn->tx_data) {
   1d784:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1d788:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1d78a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1d78e:	d03d      	beq.n	1d80c <event_phy_upd_ind_prep+0x324>
		} else if (!conn->tx_ctrl) {
   1d790:	2a00      	cmp	r2, #0
   1d792:	d180      	bne.n	1d696 <event_phy_upd_ind_prep+0x1ae>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d794:	791a      	ldrb	r2, [r3, #4]
   1d796:	f002 0203 	and.w	r2, r2, #3
   1d79a:	2a03      	cmp	r2, #3
   1d79c:	d052      	beq.n	1d844 <event_phy_upd_ind_prep+0x35c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1d79e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1d7a2:	e77a      	b.n	1d69a <event_phy_upd_ind_prep+0x1b2>
			tx->next = conn->tx_head;
   1d7a4:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   1d7a6:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1d7aa:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   1d7ae:	e77a      	b.n	1d6a6 <event_phy_upd_ind_prep+0x1be>
				(void)ll_pdu_rx_alloc();
   1d7b0:	f7fe fb42 	bl	1be38 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   1d7b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1d7b6:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1d7ba:	231a      	movs	r3, #26
				upd->status = 0U;
   1d7bc:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1d7c0:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   1d7c4:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   1d7c8:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   1d7cc:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1d7d0:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   1d7d4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1d7d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1d7dc:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   1d7e0:	4641      	mov	r1, r8
   1d7e2:	f7fe fafb 	bl	1bddc <ll_rx_put>
				ll_rx_sched();
   1d7e6:	f7fe fb03 	bl	1bdf0 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1d7ea:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1d7ee:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   1d7f2:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1d7f6:	095b      	lsrs	r3, r3, #5
   1d7f8:	e732      	b.n	1d660 <event_phy_upd_ind_prep+0x178>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1d7fa:	2301      	movs	r3, #1
   1d7fc:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1d7fe:	4629      	mov	r1, r5
   1d800:	f7fe faec 	bl	1bddc <ll_rx_put>
}
   1d804:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1d808:	f7fe baf2 	b.w	1bdf0 <ll_rx_sched>
			conn->tx_data = conn->tx_data->next;
   1d80c:	6819      	ldr	r1, [r3, #0]
   1d80e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1d812:	2a00      	cmp	r2, #0
   1d814:	f47f af3f 	bne.w	1d696 <event_phy_upd_ind_prep+0x1ae>
			tx->next = conn->tx_head->next;
   1d818:	681a      	ldr	r2, [r3, #0]
   1d81a:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   1d81c:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1d81e:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   1d820:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   1d824:	e73f      	b.n	1d6a6 <event_phy_upd_ind_prep+0x1be>
				LL_ASSERT(rx && rx->hdr.link);
   1d826:	4a0b      	ldr	r2, [pc, #44]	; (1d854 <event_phy_upd_ind_prep+0x36c>)
   1d828:	490b      	ldr	r1, [pc, #44]	; (1d858 <event_phy_upd_ind_prep+0x370>)
   1d82a:	480c      	ldr	r0, [pc, #48]	; (1d85c <event_phy_upd_ind_prep+0x374>)
   1d82c:	f241 0321 	movw	r3, #4129	; 0x1021
   1d830:	f00a f987 	bl	27b42 <printk>
   1d834:	4040      	eors	r0, r0
   1d836:	f380 8811 	msr	BASEPRI, r0
   1d83a:	f04f 0003 	mov.w	r0, #3
   1d83e:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   1d840:	6828      	ldr	r0, [r5, #0]
   1d842:	e775      	b.n	1d730 <event_phy_upd_ind_prep+0x248>
	    ((pdu_data_tx->llctrl.opcode !=
   1d844:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1d846:	2a03      	cmp	r2, #3
   1d848:	d0e6      	beq.n	1d818 <event_phy_upd_ind_prep+0x330>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1d84a:	2a0a      	cmp	r2, #10
   1d84c:	d1a7      	bne.n	1d79e <event_phy_upd_ind_prep+0x2b6>
   1d84e:	e7e3      	b.n	1d818 <event_phy_upd_ind_prep+0x330>
   1d850:	20001d1c 	.word	0x20001d1c
   1d854:	0002be34 	.word	0x0002be34
   1d858:	0002bf00 	.word	0x0002bf00
   1d85c:	0002b8dc 	.word	0x0002b8dc

0001d860 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1d860:	4801      	ldr	r0, [pc, #4]	; (1d868 <ll_conn_acquire+0x8>)
   1d862:	f7fa bcd7 	b.w	18214 <mem_acquire>
   1d866:	bf00      	nop
   1d868:	20001c84 	.word	0x20001c84

0001d86c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1d86c:	4901      	ldr	r1, [pc, #4]	; (1d874 <ll_conn_release+0x8>)
   1d86e:	f7fa bceb 	b.w	18248 <mem_release>
   1d872:	bf00      	nop
   1d874:	20001c84 	.word	0x20001c84

0001d878 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1d878:	4902      	ldr	r1, [pc, #8]	; (1d884 <ll_conn_handle_get+0xc>)
   1d87a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1d87e:	f7fa bcff 	b.w	18280 <mem_index_get>
   1d882:	bf00      	nop
   1d884:	20000dc8 	.word	0x20000dc8

0001d888 <ll_conn_get>:
{
   1d888:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1d88a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1d88e:	4801      	ldr	r0, [pc, #4]	; (1d894 <ll_conn_get+0xc>)
   1d890:	f7fa bcf2 	b.w	18278 <mem_get>
   1d894:	20000dc8 	.word	0x20000dc8

0001d898 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1d898:	b958      	cbnz	r0, 1d8b2 <ll_connected_get+0x1a>
{
   1d89a:	b508      	push	{r3, lr}
   1d89c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1d89e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1d8a2:	4805      	ldr	r0, [pc, #20]	; (1d8b8 <ll_connected_get+0x20>)
   1d8a4:	f7fa fce8 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1d8a8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1d8aa:	b903      	cbnz	r3, 1d8ae <ll_connected_get+0x16>
}
   1d8ac:	bd08      	pop	{r3, pc}
		return NULL;
   1d8ae:	2000      	movs	r0, #0
}
   1d8b0:	bd08      	pop	{r3, pc}
		return NULL;
   1d8b2:	2000      	movs	r0, #0
}
   1d8b4:	4770      	bx	lr
   1d8b6:	bf00      	nop
   1d8b8:	20000dc8 	.word	0x20000dc8

0001d8bc <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   1d8bc:	4801      	ldr	r0, [pc, #4]	; (1d8c4 <ll_tx_mem_acquire+0x8>)
   1d8be:	f7fa bca9 	b.w	18214 <mem_acquire>
   1d8c2:	bf00      	nop
   1d8c4:	20001cac 	.word	0x20001cac

0001d8c8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   1d8c8:	4901      	ldr	r1, [pc, #4]	; (1d8d0 <ll_tx_mem_release+0x8>)
   1d8ca:	f7fa bcbd 	b.w	18248 <mem_release>
   1d8ce:	bf00      	nop
   1d8d0:	20001cac 	.word	0x20001cac

0001d8d4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1d8d4:	2800      	cmp	r0, #0
   1d8d6:	d140      	bne.n	1d95a <ll_tx_mem_enqueue+0x86>
{
   1d8d8:	b570      	push	{r4, r5, r6, lr}
   1d8da:	4602      	mov	r2, r0
   1d8dc:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1d8de:	4820      	ldr	r0, [pc, #128]	; (1d960 <ll_tx_mem_enqueue+0x8c>)
   1d8e0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1d8e4:	f7fa fcc8 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1d8e8:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1d8ea:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   1d8ec:	bb7a      	cbnz	r2, 1d94e <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1d8ee:	4c1d      	ldr	r4, [pc, #116]	; (1d964 <ll_tx_mem_enqueue+0x90>)
   1d8f0:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1d8f2:	f894 c001 	ldrb.w	ip, [r4, #1]
   1d8f6:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   1d8f8:	1c4b      	adds	r3, r1, #1
   1d8fa:	b2db      	uxtb	r3, r3
		last = 0U;
   1d8fc:	459c      	cmp	ip, r3
   1d8fe:	bf08      	it	eq
   1d900:	2300      	moveq	r3, #0
	if (last == first) {
   1d902:	4298      	cmp	r0, r3
   1d904:	d026      	beq.n	1d954 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1d906:	46a4      	mov	ip, r4
   1d908:	f81c 0b04 	ldrb.w	r0, [ip], #4
   1d90c:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   1d910:	eb1c 0100 	adds.w	r1, ip, r0
   1d914:	d01e      	beq.n	1d954 <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   1d916:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   1d91a:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1d91c:	70e3      	strb	r3, [r4, #3]
   1d91e:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   1d920:	b92b      	cbnz	r3, 1d92e <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1d922:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1d926:	2b00      	cmp	r3, #0
   1d928:	db0b      	blt.n	1d942 <ll_tx_mem_enqueue+0x6e>
	return 0;
   1d92a:	2000      	movs	r0, #0
}
   1d92c:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   1d92e:	4b0e      	ldr	r3, [pc, #56]	; (1d968 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1d930:	2101      	movs	r1, #1
   1d932:	2003      	movs	r0, #3
		mfy.param = conn;
   1d934:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   1d936:	f7fa fd45 	bl	183c4 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1d93a:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   1d93e:	2b00      	cmp	r3, #0
   1d940:	daf3      	bge.n	1d92a <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   1d942:	4628      	mov	r0, r5
   1d944:	2100      	movs	r1, #0
   1d946:	f003 ffd5 	bl	218f4 <ull_slave_latency_cancel>
	return 0;
   1d94a:	2000      	movs	r0, #0
}
   1d94c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d94e:	f06f 0015 	mvn.w	r0, #21
}
   1d952:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1d954:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   1d958:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1d95a:	f06f 0015 	mvn.w	r0, #21
}
   1d95e:	4770      	bx	lr
   1d960:	20000dc8 	.word	0x20000dc8
   1d964:	20000450 	.word	0x20000450
   1d968:	200004a4 	.word	0x200004a4

0001d96c <ll_conn_update>:
{
   1d96c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d970:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1d974:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   1d978:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1d97c:	2800      	cmp	r0, #0
   1d97e:	d155      	bne.n	1da2c <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1d980:	460c      	mov	r4, r1
   1d982:	4615      	mov	r5, r2
   1d984:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1d988:	4602      	mov	r2, r0
   1d98a:	4841      	ldr	r0, [pc, #260]	; (1da90 <ll_conn_update+0x124>)
   1d98c:	461e      	mov	r6, r3
   1d98e:	f7fa fc73 	bl	18278 <mem_get>
   1d992:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   1d994:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1d996:	2800      	cmp	r0, #0
   1d998:	d148      	bne.n	1da2c <ll_conn_update+0xc0>
	if (!cmd) {
   1d99a:	bb3c      	cbnz	r4, 1d9ec <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   1d99c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   1d9a0:	06d9      	lsls	r1, r3, #27
   1d9a2:	d44a      	bmi.n	1da3a <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   1d9a4:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   1d9a8:	07da      	lsls	r2, r3, #31
   1d9aa:	d442      	bmi.n	1da32 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   1d9ac:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   1d9b0:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   1d9b4:	4293      	cmp	r3, r2
   1d9b6:	d136      	bne.n	1da26 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1d9b8:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d9bc:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   1d9c0:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   1d9c4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   1d9c8:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1d9ca:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d9ce:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1d9d0:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   1d9d4:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   1d9d8:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   1d9dc:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   1d9e0:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1d9e4:	db4e      	blt.n	1da84 <ll_conn_update+0x118>
	return 0;
   1d9e6:	2000      	movs	r0, #0
}
   1d9e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   1d9ec:	3c01      	subs	r4, #1
		if (cmd) {
   1d9ee:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1d9f2:	d0db      	beq.n	1d9ac <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   1d9f4:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   1d9f8:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   1d9fc:	429a      	cmp	r2, r3
   1d9fe:	d012      	beq.n	1da26 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   1da00:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   1da04:	f003 0207 	and.w	r2, r3, #7
   1da08:	2a03      	cmp	r2, #3
   1da0a:	d10c      	bne.n	1da26 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   1da0c:	f004 0407 	and.w	r4, r4, #7
   1da10:	f023 030f 	bic.w	r3, r3, #15
   1da14:	f044 0408 	orr.w	r4, r4, #8
   1da18:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   1da1a:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   1da1e:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   1da22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1da26:	200c      	movs	r0, #12
}
   1da28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1da2c:	2002      	movs	r0, #2
}
   1da2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   1da32:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   1da36:	079b      	lsls	r3, r3, #30
   1da38:	d4b8      	bmi.n	1d9ac <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   1da3a:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   1da3e:	2b00      	cmp	r3, #0
   1da40:	db1e      	blt.n	1da80 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1da42:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   1da46:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   1da4a:	4293      	cmp	r3, r2
   1da4c:	d1eb      	bne.n	1da26 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1da4e:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   1da52:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   1da56:	3301      	adds	r3, #1
   1da58:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1da5c:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   1da60:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1da62:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   1da66:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   1da68:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   1da6c:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   1da70:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1da74:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   1da78:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   1da7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1da80:	201a      	movs	r0, #26
   1da82:	e7d1      	b.n	1da28 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   1da84:	4660      	mov	r0, ip
   1da86:	2100      	movs	r1, #0
   1da88:	f003 ff34 	bl	218f4 <ull_slave_latency_cancel>
	return 0;
   1da8c:	2000      	movs	r0, #0
   1da8e:	e7cb      	b.n	1da28 <ll_conn_update+0xbc>
   1da90:	20000dc8 	.word	0x20000dc8

0001da94 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1da94:	b9d0      	cbnz	r0, 1dacc <ll_chm_get+0x38>
{
   1da96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da98:	4602      	mov	r2, r0
   1da9a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1da9c:	480c      	ldr	r0, [pc, #48]	; (1dad0 <ll_chm_get+0x3c>)
   1da9e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1daa2:	f7fa fbe9 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1daa6:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1daa8:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1daaa:	b96e      	cbnz	r6, 1dac8 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   1daac:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   1dab0:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   1dab4:	2205      	movs	r2, #5
   1dab6:	4639      	mov	r1, r7
   1dab8:	4628      	mov	r0, r5
   1daba:	f00b f8ac 	bl	28c16 <memcpy>
	} while (conn->chm_updated);
   1dabe:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   1dac2:	2800      	cmp	r0, #0
   1dac4:	d1f4      	bne.n	1dab0 <ll_chm_get+0x1c>
}
   1dac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dac8:	2002      	movs	r0, #2
}
   1daca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dacc:	2002      	movs	r0, #2
}
   1dace:	4770      	bx	lr
   1dad0:	20000dc8 	.word	0x20000dc8

0001dad4 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dad4:	2800      	cmp	r0, #0
   1dad6:	d13e      	bne.n	1db56 <ll_terminate_ind_send+0x82>
{
   1dad8:	b510      	push	{r4, lr}
   1dada:	4602      	mov	r2, r0
   1dadc:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dade:	4821      	ldr	r0, [pc, #132]	; (1db64 <ll_terminate_ind_send+0x90>)
   1dae0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dae4:	f7fa fbc8 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1dae8:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1daea:	bb93      	cbnz	r3, 1db52 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1daec:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   1daf0:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   1daf4:	429a      	cmp	r2, r3
   1daf6:	d12a      	bne.n	1db4e <ll_terminate_ind_send+0x7a>
	switch (reason) {
   1daf8:	2c29      	cmp	r4, #41	; 0x29
   1dafa:	d819      	bhi.n	1db30 <ll_terminate_ind_send+0x5c>
   1dafc:	2c04      	cmp	r4, #4
   1dafe:	d919      	bls.n	1db34 <ll_terminate_ind_send+0x60>
   1db00:	1f62      	subs	r2, r4, #5
   1db02:	2a24      	cmp	r2, #36	; 0x24
   1db04:	d816      	bhi.n	1db34 <ll_terminate_ind_send+0x60>
   1db06:	e8df f002 	tbb	[pc, r2]
   1db0a:	1517      	.short	0x1517
   1db0c:	15151515 	.word	0x15151515
   1db10:	15151515 	.word	0x15151515
   1db14:	15151515 	.word	0x15151515
   1db18:	15171717 	.word	0x15171717
   1db1c:	17151515 	.word	0x17151515
   1db20:	15151515 	.word	0x15151515
   1db24:	15151515 	.word	0x15151515
   1db28:	15151515 	.word	0x15151515
   1db2c:	1515      	.short	0x1515
   1db2e:	17          	.byte	0x17
   1db2f:	00          	.byte	0x00
   1db30:	2c3b      	cmp	r4, #59	; 0x3b
   1db32:	d001      	beq.n	1db38 <ll_terminate_ind_send+0x64>
   1db34:	2012      	movs	r0, #18
}
   1db36:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1db38:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   1db3c:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1db40:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1db42:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   1db44:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1db48:	db07      	blt.n	1db5a <ll_terminate_ind_send+0x86>
	return 0;
   1db4a:	2000      	movs	r0, #0
}
   1db4c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1db4e:	200c      	movs	r0, #12
}
   1db50:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1db52:	2002      	movs	r0, #2
}
   1db54:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1db56:	2002      	movs	r0, #2
}
   1db58:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   1db5a:	2100      	movs	r1, #0
   1db5c:	f003 feca 	bl	218f4 <ull_slave_latency_cancel>
	return 0;
   1db60:	2000      	movs	r0, #0
}
   1db62:	bd10      	pop	{r4, pc}
   1db64:	20000dc8 	.word	0x20000dc8

0001db68 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1db68:	bb00      	cbnz	r0, 1dbac <ll_feature_req_send+0x44>
{
   1db6a:	b510      	push	{r4, lr}
   1db6c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1db6e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1db72:	480f      	ldr	r0, [pc, #60]	; (1dbb0 <ll_feature_req_send+0x48>)
   1db74:	f7fa fb80 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1db78:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1db7a:	b984      	cbnz	r4, 1db9e <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1db7c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   1db80:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   1db84:	428a      	cmp	r2, r1
   1db86:	d108      	bne.n	1db9a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1db88:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1db8c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1db8e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   1db90:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1db94:	db05      	blt.n	1dba2 <ll_feature_req_send+0x3a>
	return 0;
   1db96:	4620      	mov	r0, r4
}
   1db98:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1db9a:	200c      	movs	r0, #12
}
   1db9c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1db9e:	2002      	movs	r0, #2
}
   1dba0:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   1dba2:	4621      	mov	r1, r4
   1dba4:	f003 fea6 	bl	218f4 <ull_slave_latency_cancel>
	return 0;
   1dba8:	4620      	mov	r0, r4
}
   1dbaa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dbac:	2002      	movs	r0, #2
}
   1dbae:	4770      	bx	lr
   1dbb0:	20000dc8 	.word	0x20000dc8

0001dbb4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dbb4:	bb00      	cbnz	r0, 1dbf8 <ll_version_ind_send+0x44>
{
   1dbb6:	b510      	push	{r4, lr}
   1dbb8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dbba:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dbbe:	480f      	ldr	r0, [pc, #60]	; (1dbfc <ll_version_ind_send+0x48>)
   1dbc0:	f7fa fb5a 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1dbc4:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1dbc6:	b984      	cbnz	r4, 1dbea <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   1dbc8:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1dbcc:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   1dbd0:	428a      	cmp	r2, r1
   1dbd2:	d108      	bne.n	1dbe6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dbd4:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   1dbd8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dbda:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   1dbdc:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dbe0:	db05      	blt.n	1dbee <ll_version_ind_send+0x3a>
	return 0;
   1dbe2:	4620      	mov	r0, r4
}
   1dbe4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1dbe6:	200c      	movs	r0, #12
}
   1dbe8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dbea:	2002      	movs	r0, #2
}
   1dbec:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   1dbee:	4621      	mov	r1, r4
   1dbf0:	f003 fe80 	bl	218f4 <ull_slave_latency_cancel>
	return 0;
   1dbf4:	4620      	mov	r0, r4
}
   1dbf6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dbf8:	2002      	movs	r0, #2
}
   1dbfa:	4770      	bx	lr
   1dbfc:	20000dc8 	.word	0x20000dc8

0001dc00 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dc00:	2800      	cmp	r0, #0
   1dc02:	d14c      	bne.n	1dc9e <ll_length_req_send+0x9e>
{
   1dc04:	b538      	push	{r3, r4, r5, lr}
   1dc06:	460d      	mov	r5, r1
   1dc08:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dc0a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dc0e:	4602      	mov	r2, r0
   1dc10:	4824      	ldr	r0, [pc, #144]	; (1dca4 <ll_length_req_send+0xa4>)
   1dc12:	f7fa fb31 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1dc16:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1dc18:	bbc3      	cbnz	r3, 1dc8c <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   1dc1a:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   1dc1e:	071a      	lsls	r2, r3, #28
   1dc20:	d432      	bmi.n	1dc88 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   1dc22:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   1dc26:	07d1      	lsls	r1, r2, #31
   1dc28:	d503      	bpl.n	1dc32 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   1dc2a:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   1dc2e:	0692      	lsls	r2, r2, #26
   1dc30:	d52a      	bpl.n	1dc88 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1dc32:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   1dc36:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   1dc3a:	428a      	cmp	r2, r1
   1dc3c:	d011      	beq.n	1dc62 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   1dc3e:	f003 0307 	and.w	r3, r3, #7
   1dc42:	2b03      	cmp	r3, #3
   1dc44:	d004      	beq.n	1dc50 <ll_length_req_send+0x50>
   1dc46:	3303      	adds	r3, #3
   1dc48:	f003 0307 	and.w	r3, r3, #7
   1dc4c:	2b01      	cmp	r3, #1
   1dc4e:	d824      	bhi.n	1dc9a <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   1dc50:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   1dc54:	bb0b      	cbnz	r3, 1dc9a <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   1dc56:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   1dc5a:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   1dc5e:	4618      	mov	r0, r3
}
   1dc60:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1dc62:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   1dc66:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1dc6a:	f36f 0302 	bfc	r3, #0, #3
   1dc6e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dc72:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   1dc76:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   1dc7a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dc7c:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   1dc7e:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dc82:	db05      	blt.n	1dc90 <ll_length_req_send+0x90>
	return 0;
   1dc84:	2000      	movs	r0, #0
}
   1dc86:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1dc88:	201a      	movs	r0, #26
}
   1dc8a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dc8c:	2002      	movs	r0, #2
}
   1dc8e:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   1dc90:	2100      	movs	r1, #0
   1dc92:	f003 fe2f 	bl	218f4 <ull_slave_latency_cancel>
	return 0;
   1dc96:	2000      	movs	r0, #0
}
   1dc98:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1dc9a:	200c      	movs	r0, #12
}
   1dc9c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dc9e:	2002      	movs	r0, #2
}
   1dca0:	4770      	bx	lr
   1dca2:	bf00      	nop
   1dca4:	20000dc8 	.word	0x20000dc8

0001dca8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   1dca8:	4a03      	ldr	r2, [pc, #12]	; (1dcb8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1dcaa:	4b04      	ldr	r3, [pc, #16]	; (1dcbc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1dcac:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1dcae:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   1dcb0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1dcb2:	800b      	strh	r3, [r1, #0]
}
   1dcb4:	4770      	bx	lr
   1dcb6:	bf00      	nop
   1dcb8:	2000258e 	.word	0x2000258e
   1dcbc:	20002590 	.word	0x20002590

0001dcc0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   1dcc0:	4a02      	ldr	r2, [pc, #8]	; (1dccc <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1dcc2:	4b03      	ldr	r3, [pc, #12]	; (1dcd0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1dcc4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1dcc6:	8019      	strh	r1, [r3, #0]
}
   1dcc8:	2000      	movs	r0, #0
   1dcca:	4770      	bx	lr
   1dccc:	2000258e 	.word	0x2000258e
   1dcd0:	20002590 	.word	0x20002590

0001dcd4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1dcd4:	f04f 0c1b 	mov.w	ip, #27
   1dcd8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1dcdc:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1dce0:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1dce4:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1dce6:	8018      	strh	r0, [r3, #0]
}
   1dce8:	4770      	bx	lr
   1dcea:	bf00      	nop

0001dcec <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dcec:	b9c0      	cbnz	r0, 1dd20 <ll_phy_get+0x34>
{
   1dcee:	b538      	push	{r3, r4, r5, lr}
   1dcf0:	460d      	mov	r5, r1
   1dcf2:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dcf4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dcf8:	4602      	mov	r2, r0
   1dcfa:	480a      	ldr	r0, [pc, #40]	; (1dd24 <ll_phy_get+0x38>)
   1dcfc:	f7fa fabc 	bl	18278 <mem_get>
   1dd00:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   1dd02:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1dd04:	b950      	cbnz	r0, 1dd1c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1dd06:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   1dd0a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1dd0e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   1dd10:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   1dd14:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1dd18:	7023      	strb	r3, [r4, #0]
}
   1dd1a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dd1c:	2002      	movs	r0, #2
}
   1dd1e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1dd20:	2002      	movs	r0, #2
}
   1dd22:	4770      	bx	lr
   1dd24:	20000dc8 	.word	0x20000dc8

0001dd28 <ll_phy_default_set>:
	default_phy_tx = tx;
   1dd28:	4a02      	ldr	r2, [pc, #8]	; (1dd34 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1dd2a:	4b03      	ldr	r3, [pc, #12]	; (1dd38 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   1dd2c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   1dd2e:	7019      	strb	r1, [r3, #0]
}
   1dd30:	2000      	movs	r0, #0
   1dd32:	4770      	bx	lr
   1dd34:	20002638 	.word	0x20002638
   1dd38:	20002637 	.word	0x20002637

0001dd3c <ll_phy_req_send>:
{
   1dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dd3e:	2800      	cmp	r0, #0
   1dd40:	d143      	bne.n	1ddca <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dd42:	460c      	mov	r4, r1
   1dd44:	4616      	mov	r6, r2
   1dd46:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dd4a:	4602      	mov	r2, r0
   1dd4c:	4823      	ldr	r0, [pc, #140]	; (1dddc <ll_phy_req_send+0xa0>)
   1dd4e:	461f      	mov	r7, r3
   1dd50:	f7fa fa92 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   1dd54:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1dd56:	bbc3      	cbnz	r3, 1ddca <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   1dd58:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   1dd5c:	f015 0508 	ands.w	r5, r5, #8
   1dd60:	d130      	bne.n	1ddc4 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   1dd62:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   1dd66:	07db      	lsls	r3, r3, #31
   1dd68:	d504      	bpl.n	1dd74 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1dd6a:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1dd6e:	f413 6f10 	tst.w	r3, #2304	; 0x900
   1dd72:	d027      	beq.n	1ddc4 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   1dd74:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   1dd78:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   1dd7c:	4299      	cmp	r1, r3
   1dd7e:	d11e      	bne.n	1ddbe <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1dd80:	f004 0407 	and.w	r4, r4, #7
   1dd84:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   1dd88:	00a4      	lsls	r4, r4, #2
   1dd8a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1dd8e:	f007 0307 	and.w	r3, r7, #7
   1dd92:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1dd96:	f006 0601 	and.w	r6, r6, #1
   1dd9a:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1dd9e:	f022 0207 	bic.w	r2, r2, #7
   1dda2:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   1dda6:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1dda8:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1ddac:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   1ddb0:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ddb2:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   1ddb4:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1ddb8:	db0a      	blt.n	1ddd0 <ll_phy_req_send+0x94>
}
   1ddba:	4628      	mov	r0, r5
   1ddbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ddbe:	250c      	movs	r5, #12
}
   1ddc0:	4628      	mov	r0, r5
   1ddc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1ddc4:	251a      	movs	r5, #26
}
   1ddc6:	4628      	mov	r0, r5
   1ddc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1ddca:	2502      	movs	r5, #2
}
   1ddcc:	4628      	mov	r0, r5
   1ddce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   1ddd0:	2100      	movs	r1, #0
   1ddd2:	f003 fd8f 	bl	218f4 <ull_slave_latency_cancel>
}
   1ddd6:	4628      	mov	r0, r5
   1ddd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ddda:	bf00      	nop
   1dddc:	20000dc8 	.word	0x20000dc8

0001dde0 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dde0:	b9d8      	cbnz	r0, 1de1a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dde2:	4602      	mov	r2, r0
{
   1dde4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dde6:	480e      	ldr	r0, [pc, #56]	; (1de20 <ll_apto_get+0x40>)
   1dde8:	460c      	mov	r4, r1
   1ddea:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1ddee:	f7fa fa43 	bl	18278 <mem_get>
   1ddf2:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1ddf4:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1ddf6:	b970      	cbnz	r0, 1de16 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1ddf8:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   1ddfc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1ddfe:	fb02 f303 	mul.w	r3, r2, r3
   1de02:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1de06:	4a07      	ldr	r2, [pc, #28]	; (1de24 <ll_apto_get+0x44>)
   1de08:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1de0c:	fba2 2303 	umull	r2, r3, r2, r3
   1de10:	099b      	lsrs	r3, r3, #6
   1de12:	8023      	strh	r3, [r4, #0]
}
   1de14:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1de16:	2002      	movs	r0, #2
}
   1de18:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1de1a:	2002      	movs	r0, #2
}
   1de1c:	4770      	bx	lr
   1de1e:	bf00      	nop
   1de20:	20000dc8 	.word	0x20000dc8
   1de24:	10624dd3 	.word	0x10624dd3

0001de28 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1de28:	b9e0      	cbnz	r0, 1de64 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1de2a:	4602      	mov	r2, r0
{
   1de2c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1de2e:	480e      	ldr	r0, [pc, #56]	; (1de68 <ll_apto_set+0x40>)
   1de30:	460c      	mov	r4, r1
   1de32:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1de36:	f7fa fa1f 	bl	18278 <mem_get>
   1de3a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1de3c:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1de3e:	b978      	cbnz	r0, 1de60 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   1de40:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   1de44:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1de48:	fb03 fc0c 	mul.w	ip, r3, ip
   1de4c:	f242 7310 	movw	r3, #10000	; 0x2710
   1de50:	fb03 c304 	mla	r3, r3, r4, ip
   1de54:	3b01      	subs	r3, #1
   1de56:	fbb3 f3fc 	udiv	r3, r3, ip
   1de5a:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   1de5e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1de60:	2002      	movs	r0, #2
}
   1de62:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1de64:	2002      	movs	r0, #2
}
   1de66:	4770      	bx	lr
   1de68:	20000dc8 	.word	0x20000dc8

0001de6c <ull_conn_init>:
	err = init_reset();
   1de6c:	f7fe bf08 	b.w	1cc80 <init_reset>

0001de70 <ull_conn_reset>:
{
   1de70:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1de72:	2200      	movs	r2, #0
   1de74:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1de78:	4813      	ldr	r0, [pc, #76]	; (1dec8 <ull_conn_reset+0x58>)
   1de7a:	f7fa f9fd 	bl	18278 <mem_get>
   1de7e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   1de80:	f100 021c 	add.w	r2, r0, #28
   1de84:	4601      	mov	r1, r0
   1de86:	2003      	movs	r0, #3
   1de88:	f7fe f8c0 	bl	1c00c <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1de8c:	b108      	cbz	r0, 1de92 <ull_conn_reset+0x22>
   1de8e:	3078      	adds	r0, #120	; 0x78
   1de90:	d10b      	bne.n	1deaa <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   1de92:	480e      	ldr	r0, [pc, #56]	; (1decc <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   1de94:	490e      	ldr	r1, [pc, #56]	; (1ded0 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   1de96:	4a0f      	ldr	r2, [pc, #60]	; (1ded4 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   1de98:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   1de9a:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   1de9c:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   1de9e:	6763      	str	r3, [r4, #116]	; 0x74
}
   1dea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   1dea4:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1dea6:	f7fe beeb 	b.w	1cc80 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1deaa:	4a0b      	ldr	r2, [pc, #44]	; (1ded8 <ull_conn_reset+0x68>)
   1deac:	490b      	ldr	r1, [pc, #44]	; (1dedc <ull_conn_reset+0x6c>)
   1deae:	480c      	ldr	r0, [pc, #48]	; (1dee0 <ull_conn_reset+0x70>)
   1deb0:	f240 7391 	movw	r3, #1937	; 0x791
   1deb4:	f009 fe45 	bl	27b42 <printk>
   1deb8:	4040      	eors	r0, r0
   1deba:	f380 8811 	msr	BASEPRI, r0
   1debe:	f04f 0003 	mov.w	r0, #3
   1dec2:	df02      	svc	2
   1dec4:	e7e5      	b.n	1de92 <ull_conn_reset+0x22>
   1dec6:	bf00      	nop
   1dec8:	20000dc8 	.word	0x20000dc8
   1decc:	20000450 	.word	0x20000450
   1ded0:	2000040c 	.word	0x2000040c
   1ded4:	20001c88 	.word	0x20001c88
   1ded8:	0002be34 	.word	0x0002be34
   1dedc:	0002bf44 	.word	0x0002bf44
   1dee0:	0002b8dc 	.word	0x0002b8dc

0001dee4 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   1dee4:	4b01      	ldr	r3, [pc, #4]	; (1deec <ull_conn_default_tx_octets_get+0x8>)
}
   1dee6:	8818      	ldrh	r0, [r3, #0]
   1dee8:	4770      	bx	lr
   1deea:	bf00      	nop
   1deec:	2000258e 	.word	0x2000258e

0001def0 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   1def0:	4b01      	ldr	r3, [pc, #4]	; (1def8 <ull_conn_default_tx_time_get+0x8>)
}
   1def2:	8818      	ldrh	r0, [r3, #0]
   1def4:	4770      	bx	lr
   1def6:	bf00      	nop
   1def8:	20002590 	.word	0x20002590

0001defc <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   1defc:	4b01      	ldr	r3, [pc, #4]	; (1df04 <ull_conn_default_phy_tx_get+0x8>)
}
   1defe:	7818      	ldrb	r0, [r3, #0]
   1df00:	4770      	bx	lr
   1df02:	bf00      	nop
   1df04:	20002638 	.word	0x20002638

0001df08 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1df08:	4b01      	ldr	r3, [pc, #4]	; (1df10 <ull_conn_default_phy_rx_get+0x8>)
}
   1df0a:	7818      	ldrb	r0, [r3, #0]
   1df0c:	4770      	bx	lr
   1df0e:	bf00      	nop
   1df10:	20002637 	.word	0x20002637

0001df14 <ull_conn_setup>:
{
   1df14:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   1df16:	688b      	ldr	r3, [r1, #8]
	mfy.param = rx;
   1df18:	4d25      	ldr	r5, [pc, #148]	; (1dfb0 <ull_conn_setup+0x9c>)
	hdr = HDR_LLL2ULL(ftr->param);
   1df1a:	681c      	ldr	r4, [r3, #0]
	mfy.param = rx;
   1df1c:	60a9      	str	r1, [r5, #8]
	rx->link = rx_link;
   1df1e:	6008      	str	r0, [r1, #0]
   1df20:	7823      	ldrb	r3, [r4, #0]
	if (ull_ref_get(hdr)) {
   1df22:	2b00      	cmp	r3, #0
   1df24:	d02a      	beq.n	1df7c <ull_conn_setup+0x68>
		LL_ASSERT(!hdr->disabled_cb);
   1df26:	6963      	ldr	r3, [r4, #20]
   1df28:	b16b      	cbz	r3, 1df46 <ull_conn_setup+0x32>
   1df2a:	4a22      	ldr	r2, [pc, #136]	; (1dfb4 <ull_conn_setup+0xa0>)
   1df2c:	4922      	ldr	r1, [pc, #136]	; (1dfb8 <ull_conn_setup+0xa4>)
   1df2e:	4823      	ldr	r0, [pc, #140]	; (1dfbc <ull_conn_setup+0xa8>)
   1df30:	f44f 7355 	mov.w	r3, #852	; 0x354
   1df34:	f009 fe05 	bl	27b42 <printk>
   1df38:	4040      	eors	r0, r0
   1df3a:	f380 8811 	msr	BASEPRI, r0
   1df3e:	f04f 0003 	mov.w	r0, #3
   1df42:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1df44:	68a9      	ldr	r1, [r5, #8]
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   1df46:	4b1e      	ldr	r3, [pc, #120]	; (1dfc0 <ull_conn_setup+0xac>)
		mfy.fp = lll_disable;
   1df48:	481e      	ldr	r0, [pc, #120]	; (1dfc4 <ull_conn_setup+0xb0>)
		hdr->disabled_param = mfy.param;
   1df4a:	61a1      	str	r1, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1df4c:	2200      	movs	r2, #0
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   1df4e:	6163      	str	r3, [r4, #20]
		mfy.fp = lll_disable;
   1df50:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1df52:	4b17      	ldr	r3, [pc, #92]	; (1dfb0 <ull_conn_setup+0x9c>)
   1df54:	4611      	mov	r1, r2
   1df56:	2002      	movs	r0, #2
   1df58:	f7fa fa34 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1df5c:	b900      	cbnz	r0, 1df60 <ull_conn_setup+0x4c>
}
   1df5e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   1df60:	4a14      	ldr	r2, [pc, #80]	; (1dfb4 <ull_conn_setup+0xa0>)
   1df62:	4919      	ldr	r1, [pc, #100]	; (1dfc8 <ull_conn_setup+0xb4>)
   1df64:	4815      	ldr	r0, [pc, #84]	; (1dfbc <ull_conn_setup+0xa8>)
   1df66:	f240 335b 	movw	r3, #859	; 0x35b
   1df6a:	f009 fdea 	bl	27b42 <printk>
   1df6e:	4040      	eors	r0, r0
   1df70:	f380 8811 	msr	BASEPRI, r0
   1df74:	f04f 0003 	mov.w	r0, #3
   1df78:	df02      	svc	2
}
   1df7a:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = conn_setup_adv_scan_disabled_cb;
   1df7c:	4810      	ldr	r0, [pc, #64]	; (1dfc0 <ull_conn_setup+0xac>)
   1df7e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1df80:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   1df84:	2101      	movs	r1, #1
   1df86:	462b      	mov	r3, r5
   1df88:	2002      	movs	r0, #2
   1df8a:	f7fa fa1b 	bl	183c4 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1df8e:	2800      	cmp	r0, #0
   1df90:	d0e5      	beq.n	1df5e <ull_conn_setup+0x4a>
   1df92:	4a08      	ldr	r2, [pc, #32]	; (1dfb4 <ull_conn_setup+0xa0>)
   1df94:	490c      	ldr	r1, [pc, #48]	; (1dfc8 <ull_conn_setup+0xb4>)
   1df96:	4809      	ldr	r0, [pc, #36]	; (1dfbc <ull_conn_setup+0xa8>)
   1df98:	f240 3362 	movw	r3, #866	; 0x362
   1df9c:	f009 fdd1 	bl	27b42 <printk>
   1dfa0:	4040      	eors	r0, r0
   1dfa2:	f380 8811 	msr	BASEPRI, r0
   1dfa6:	f04f 0003 	mov.w	r0, #3
   1dfaa:	df02      	svc	2
}
   1dfac:	bd38      	pop	{r3, r4, r5, pc}
   1dfae:	bf00      	nop
   1dfb0:	20000494 	.word	0x20000494
   1dfb4:	0002be34 	.word	0x0002be34
   1dfb8:	0002bdc0 	.word	0x0002bdc0
   1dfbc:	0002b8dc 	.word	0x0002b8dc
   1dfc0:	0001d079 	.word	0x0001d079
   1dfc4:	00022e89 	.word	0x00022e89
   1dfc8:	0002bc88 	.word	0x0002bc88

0001dfcc <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   1dfcc:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   1dfce:	88da      	ldrh	r2, [r3, #6]
   1dfd0:	2a00      	cmp	r2, #0
   1dfd2:	f040 80cc 	bne.w	1e16e <ull_conn_rx+0x1a2>
{
   1dfd6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dfda:	460f      	mov	r7, r1
   1dfdc:	b083      	sub	sp, #12
   1dfde:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1dfe0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1dfe4:	48ba      	ldr	r0, [pc, #744]	; (1e2d0 <ull_conn_rx+0x304>)
   1dfe6:	f7fa f947 	bl	18278 <mem_get>
   1dfea:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1dfec:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   1dfee:	2800      	cmp	r0, #0
   1dff0:	f040 80b6 	bne.w	1e160 <ull_conn_rx+0x194>
	pdu_rx = (void *)(*rx)->pdu;
   1dff4:	683d      	ldr	r5, [r7, #0]
	switch (pdu_rx->ll_id) {
   1dff6:	7f2a      	ldrb	r2, [r5, #28]
   1dff8:	f002 0203 	and.w	r2, r2, #3
   1dffc:	2a03      	cmp	r2, #3
   1dffe:	d127      	bne.n	1e050 <ull_conn_rx+0x84>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1e000:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	opcode = pdu_rx->llctrl.opcode;
   1e004:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   1e008:	07d3      	lsls	r3, r2, #31
   1e00a:	d53b      	bpl.n	1e084 <ull_conn_rx+0xb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   1e00c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e010:	2b00      	cmp	r3, #0
   1e012:	f2c0 80b0 	blt.w	1e176 <ull_conn_rx+0x1aa>
	return (!conn->lll.role &&
   1e016:	0756      	lsls	r6, r2, #29
   1e018:	f100 8101 	bmi.w	1e21e <ull_conn_rx+0x252>
		((!conn->llcp_enc.refresh &&
   1e01c:	f1b8 0f02 	cmp.w	r8, #2
   1e020:	f000 8111 	beq.w	1e246 <ull_conn_rx+0x27a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1e024:	f1b8 0f05 	cmp.w	r8, #5
   1e028:	d04e      	beq.n	1e0c8 <ull_conn_rx+0xfc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1e02a:	f1b8 0f06 	cmp.w	r8, #6
   1e02e:	f000 8369 	beq.w	1e704 <ull_conn_rx+0x738>
   1e032:	f1b8 0f0d 	cmp.w	r8, #13
   1e036:	f000 81dd 	beq.w	1e3f4 <ull_conn_rx+0x428>
   1e03a:	f1b8 0f11 	cmp.w	r8, #17
   1e03e:	f000 826f 	beq.w	1e520 <ull_conn_rx+0x554>
		conn->llcp_terminate.reason_final =
   1e042:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e044:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   1e046:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   1e04a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e04c:	712b      	strb	r3, [r5, #4]
		return 0;
   1e04e:	e00a      	b.n	1e066 <ull_conn_rx+0x9a>
	switch (pdu_rx->ll_id) {
   1e050:	b962      	cbnz	r2, 1e06c <ull_conn_rx+0xa0>
		if (conn->llcp_enc.pause_rx) {
   1e052:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1e056:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   1e058:	bf44      	itt	mi
   1e05a:	233d      	movmi	r3, #61	; 0x3d
   1e05c:	f884 3143 	strbmi.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e060:	2301      	movs	r3, #1
   1e062:	712b      	strb	r3, [r5, #4]
	return 0;
   1e064:	2000      	movs	r0, #0
}
   1e066:	b003      	add	sp, #12
   1e068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   1e06c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   1e070:	07d2      	lsls	r2, r2, #31
   1e072:	d5f7      	bpl.n	1e064 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
   1e074:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e076:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   1e078:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e07c:	712a      	strb	r2, [r5, #4]
}
   1e07e:	b003      	add	sp, #12
   1e080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1e084:	f1b8 0f18 	cmp.w	r8, #24
   1e088:	d81e      	bhi.n	1e0c8 <ull_conn_rx+0xfc>
   1e08a:	e8df f018 	tbh	[pc, r8, lsl #1]
   1e08e:	0125      	.short	0x0125
   1e090:	00dc027f 	.word	0x00dc027f
   1e094:	001d0019 	.word	0x001d0019
   1e098:	033b001d 	.word	0x033b001d
   1e09c:	036603e2 	.word	0x036603e2
   1e0a0:	02b90302 	.word	0x02b90302
   1e0a4:	01f60475 	.word	0x01f60475
   1e0a8:	001d01b3 	.word	0x001d01b3
   1e0ac:	001d019e 	.word	0x001d019e
   1e0b0:	02250249 	.word	0x02250249
   1e0b4:	00e80194 	.word	0x00e80194
   1e0b8:	044600e8 	.word	0x044600e8
   1e0bc:	0408001d 	.word	0x0408001d
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   1e0c0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e0c4:	2b00      	cmp	r3, #0
   1e0c6:	db63      	blt.n	1e190 <ull_conn_rx+0x1c4>
	if (conn->common.txn_lock) {
   1e0c8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e0cc:	079f      	lsls	r7, r3, #30
   1e0ce:	d4c7      	bmi.n	1e060 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1e0d0:	4880      	ldr	r0, [pc, #512]	; (1e2d4 <ull_conn_rx+0x308>)
   1e0d2:	f7fa f89f 	bl	18214 <mem_acquire>
	if (!tx) {
   1e0d6:	2800      	cmp	r0, #0
   1e0d8:	f000 8510 	beq.w	1eafc <_flash_used+0x3a4>
	conn->common.txn_lock = 1U;
   1e0dc:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e0e0:	f043 0302 	orr.w	r3, r3, #2
   1e0e4:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1e0e8:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   1e0ea:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1e0ee:	f043 0303 	orr.w	r3, r3, #3
   1e0f2:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1e0f4:	2302      	movs	r3, #2
   1e0f6:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1e0f8:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   1e0fc:	2307      	movs	r3, #7
   1e0fe:	71c3      	strb	r3, [r0, #7]
	if (
   1e100:	b1f2      	cbz	r2, 1e140 <ull_conn_rx+0x174>
	    !conn->llcp_enc.pause_tx &&
   1e102:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1e106:	079e      	lsls	r6, r3, #30
   1e108:	d41a      	bmi.n	1e140 <ull_conn_rx+0x174>
	    !conn->llcp_phy.pause_tx &&
   1e10a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1e10e:	07d9      	lsls	r1, r3, #31
   1e110:	d416      	bmi.n	1e140 <ull_conn_rx+0x174>
		if (conn->tx_head == conn->tx_data) {
   1e112:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   1e116:	429a      	cmp	r2, r3
   1e118:	f000 84f9 	beq.w	1eb0e <_flash_used+0x3b6>
		} else if (!conn->tx_ctrl) {
   1e11c:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1e120:	2b00      	cmp	r3, #0
   1e122:	f000 8547 	beq.w	1ebb4 <_flash_used+0x45c>
	tx->next = conn->tx_ctrl_last->next;
   1e126:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   1e12a:	6813      	ldr	r3, [r2, #0]
   1e12c:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1e12e:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1e130:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1e132:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1e136:	2a00      	cmp	r2, #0
   1e138:	d192      	bne.n	1e060 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   1e13a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e13e:	e78f      	b.n	1e060 <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   1e140:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1e144:	2b00      	cmp	r3, #0
   1e146:	f000 84cf 	beq.w	1eae8 <_flash_used+0x390>
	tx->next = conn->tx_ctrl_last->next;
   1e14a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1e14e:	681a      	ldr	r2, [r3, #0]
   1e150:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1e152:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1e154:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1e156:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1e15a:	2a00      	cmp	r2, #0
   1e15c:	d180      	bne.n	1e060 <ull_conn_rx+0x94>
   1e15e:	e7ec      	b.n	1e13a <ull_conn_rx+0x16e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e160:	683b      	ldr	r3, [r7, #0]
   1e162:	2201      	movs	r2, #1
		return 0;
   1e164:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e166:	711a      	strb	r2, [r3, #4]
}
   1e168:	b003      	add	sp, #12
   1e16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e16e:	2201      	movs	r2, #1
   1e170:	711a      	strb	r2, [r3, #4]
		return 0;
   1e172:	2000      	movs	r0, #0
}
   1e174:	4770      	bx	lr
	       (conn->lll.role &&
   1e176:	0750      	lsls	r0, r2, #29
   1e178:	d55d      	bpl.n	1e236 <ull_conn_rx+0x26a>
		 (conn->llcp_enc.refresh &&
   1e17a:	f1b8 0f02 	cmp.w	r8, #2
   1e17e:	d062      	beq.n	1e246 <ull_conn_rx+0x27a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1e180:	f1b8 0f0b 	cmp.w	r8, #11
   1e184:	f000 84d6 	beq.w	1eb34 <_flash_used+0x3dc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1e188:	f1b8 0f03 	cmp.w	r8, #3
   1e18c:	f47f af4d 	bne.w	1e02a <ull_conn_rx+0x5e>
		if (!conn->lll.role ||
   1e190:	7f6b      	ldrb	r3, [r5, #29]
   1e192:	2b17      	cmp	r3, #23
   1e194:	d198      	bne.n	1e0c8 <ull_conn_rx+0xfc>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1e196:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1e19a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1e19e:	1a9b      	subs	r3, r3, r2
   1e1a0:	f003 0303 	and.w	r3, r3, #3
   1e1a4:	2b02      	cmp	r3, #2
   1e1a6:	f001 80f1 	beq.w	1f38c <_flash_used+0xc34>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   1e1aa:	2208      	movs	r2, #8
   1e1ac:	f105 0120 	add.w	r1, r5, #32
   1e1b0:	f204 1069 	addw	r0, r4, #361	; 0x169
   1e1b4:	f00a fd2f 	bl	28c16 <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   1e1b8:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   1e1bc:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1e1c0:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in master prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1e1c4:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1e1c8:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e1cc:	6839      	ldr	r1, [r7, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1e1ce:	2301      	movs	r3, #1
   1e1d0:	f363 0201 	bfi	r2, r3, #0, #2
   1e1d4:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e1d8:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   1e1da:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   1e1de:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   1e1e0:	3b02      	subs	r3, #2
   1e1e2:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from master stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   1e1e6:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   1e1e8:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   1e1ec:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   1e1f0:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1e1f4:	f00a fd0f 	bl	28c16 <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   1e1f8:	2204      	movs	r2, #4
   1e1fa:	f105 0132 	add.w	r1, r5, #50	; 0x32
   1e1fe:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1e202:	f00a fd08 	bl	28c16 <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   1e206:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   1e20a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   1e20e:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   1e212:	f043 0301 	orr.w	r3, r3, #1
   1e216:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   1e21a:	2000      	movs	r0, #0

		break;
   1e21c:	e723      	b.n	1e066 <ull_conn_rx+0x9a>
		 (conn->llcp_enc.refresh &&
   1e21e:	f1b8 0f02 	cmp.w	r8, #2
   1e222:	d010      	beq.n	1e246 <ull_conn_rx+0x27a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1e224:	f1b8 0f0b 	cmp.w	r8, #11
   1e228:	f000 846c 	beq.w	1eb04 <_flash_used+0x3ac>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1e22c:	f1b8 0f04 	cmp.w	r8, #4
   1e230:	f47f aef8 	bne.w	1e024 <ull_conn_rx+0x58>
   1e234:	e748      	b.n	1e0c8 <ull_conn_rx+0xfc>
		((!conn->llcp_enc.refresh &&
   1e236:	f1b8 0f07 	cmp.w	r8, #7
   1e23a:	f000 830a 	beq.w	1e852 <_flash_used+0xfa>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   1e23e:	f1b8 0f02 	cmp.w	r8, #2
   1e242:	f47f aef2 	bne.w	1e02a <ull_conn_rx+0x5e>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   1e246:	7f6b      	ldrb	r3, [r5, #29]
   1e248:	2b02      	cmp	r3, #2
   1e24a:	f47f af3d 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	conn->llcp_terminate.reason_final =
   1e24e:	f895 2020 	ldrb.w	r2, [r5, #32]
   1e252:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e256:	2301      	movs	r3, #1
	int nack = 0;
   1e258:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e25a:	712b      	strb	r3, [r5, #4]
}
   1e25c:	e703      	b.n	1e066 <ull_conn_rx+0x9a>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   1e25e:	7f6b      	ldrb	r3, [r5, #29]
   1e260:	2b09      	cmp	r3, #9
   1e262:	f47f af31 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1e266:	f1b8 0f14 	cmp.w	r8, #20
   1e26a:	f000 84ad 	beq.w	1ebc8 <_flash_used+0x470>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1e26e:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   1e272:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1e276:	4293      	cmp	r3, r2
   1e278:	f001 8079 	beq.w	1f36e <_flash_used+0xc16>
	eff_rx_octets = conn->lll.max_rx_octets;
   1e27c:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   1e280:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1e284:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   1e288:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1e28c:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   1e290:	2300      	movs	r3, #0
	       tx) ||
   1e292:	f001 0107 	and.w	r1, r1, #7
   1e296:	2902      	cmp	r1, #2
   1e298:	f000 84b6 	beq.w	1ec08 <_flash_used+0x4b0>
   1e29c:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   1e2a0:	f1b8 0f15 	cmp.w	r8, #21
   1e2a4:	f43f aede 	beq.w	1e064 <ull_conn_rx+0x98>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1e2a8:	4618      	mov	r0, r3
   1e2aa:	490a      	ldr	r1, [pc, #40]	; (1e2d4 <ull_conn_rx+0x308>)
   1e2ac:	f7f9 ffcc 	bl	18248 <mem_release>
			if (conn->llcp_length.state ==
   1e2b0:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   1e2b4:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1e2b8:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   1e2bc:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   1e2c0:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   1e2c2:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   1e2c6:	f47f aecd 	bne.w	1e064 <ull_conn_rx+0x98>
				return -EBUSY;
   1e2ca:	f06f 000f 	mvn.w	r0, #15
   1e2ce:	e6ca      	b.n	1e066 <ull_conn_rx+0x9a>
   1e2d0:	20000dc8 	.word	0x20000dc8
   1e2d4:	20001d1c 	.word	0x20001d1c
		if (!conn->lll.role ||
   1e2d8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e2dc:	2b00      	cmp	r3, #0
   1e2de:	f6bf aef3 	bge.w	1e0c8 <ull_conn_rx+0xfc>
   1e2e2:	7f6b      	ldrb	r3, [r5, #29]
   1e2e4:	2b0c      	cmp	r3, #12
   1e2e6:	f47f aeef 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   1e2ea:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1e2ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e2f0:	1ad3      	subs	r3, r2, r3
   1e2f2:	0419      	lsls	r1, r3, #16
   1e2f4:	f100 878b 	bmi.w	1f20e <_flash_used+0xab6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1e2f8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1e2fc:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1e300:	1a5b      	subs	r3, r3, r1
   1e302:	f003 0303 	and.w	r3, r3, #3
   1e306:	2b02      	cmp	r3, #2
   1e308:	f000 87c6 	beq.w	1f298 <_flash_used+0xb40>
	if (!conn_upd_curr) {
   1e30c:	4bba      	ldr	r3, [pc, #744]	; (1e5f8 <ull_conn_rx+0x62c>)
   1e30e:	6819      	ldr	r1, [r3, #0]
   1e310:	2900      	cmp	r1, #0
   1e312:	f001 801f 	beq.w	1f354 <_flash_used+0xbfc>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1e316:	f895 3020 	ldrb.w	r3, [r5, #32]
   1e31a:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   1e31e:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   1e322:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1e326:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   1e32a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   1e32e:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   1e332:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1e336:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   1e33a:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   1e33e:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   1e342:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1e346:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   1e34a:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1e34e:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1e352:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   1e356:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   1e35a:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   1e35e:	f023 030f 	bic.w	r3, r3, #15
   1e362:	f043 0308 	orr.w	r3, r3, #8
   1e366:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   1e36a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1e36e:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   1e372:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   1e376:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   1e378:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   1e37c:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   1e380:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   1e382:	683a      	ldr	r2, [r7, #0]
   1e384:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   1e386:	683a      	ldr	r2, [r7, #0]
   1e388:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   1e38c:	2300      	movs	r3, #0
   1e38e:	603b      	str	r3, [r7, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1e390:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1e394:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1e398:	4293      	cmp	r3, r2
   1e39a:	d007      	beq.n	1e3ac <ull_conn_rx+0x3e0>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1e39c:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1e3a0:	f003 0307 	and.w	r3, r3, #7
   1e3a4:	2b04      	cmp	r3, #4
   1e3a6:	d101      	bne.n	1e3ac <ull_conn_rx+0x3e0>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1e3a8:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   1e3ac:	2300      	movs	r3, #0
   1e3ae:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1e3b2:	4618      	mov	r0, r3
		break;
   1e3b4:	e657      	b.n	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   1e3b6:	7f6a      	ldrb	r2, [r5, #29]
   1e3b8:	2a01      	cmp	r2, #1
   1e3ba:	f47f ae85 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		conn->procedure_expire = 0U;
   1e3be:	2300      	movs	r3, #0
   1e3c0:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1e3c4:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e3c6:	712a      	strb	r2, [r5, #4]
		break;
   1e3c8:	e64d      	b.n	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   1e3ca:	7f6b      	ldrb	r3, [r5, #29]
   1e3cc:	2b18      	cmp	r3, #24
   1e3ce:	f47f ae7b 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1e3d2:	4e89      	ldr	r6, [pc, #548]	; (1e5f8 <ull_conn_rx+0x62c>)
   1e3d4:	6833      	ldr	r3, [r6, #0]
   1e3d6:	2b00      	cmp	r3, #0
   1e3d8:	f000 83c3 	beq.w	1eb62 <_flash_used+0x40a>
   1e3dc:	429c      	cmp	r4, r3
   1e3de:	f000 83c0 	beq.w	1eb62 <_flash_used+0x40a>
			nack = reject_ext_ind_send(conn, *rx,
   1e3e2:	2320      	movs	r3, #32
   1e3e4:	220f      	movs	r2, #15
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   1e3e6:	4629      	mov	r1, r5
   1e3e8:	4620      	mov	r0, r4
}
   1e3ea:	b003      	add	sp, #12
   1e3ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   1e3f0:	f7fe bf18 	b.w	1d224 <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   1e3f4:	7f6b      	ldrb	r3, [r5, #29]
   1e3f6:	2b02      	cmp	r3, #2
   1e3f8:	f47f ae66 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   1e3fc:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1e400:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1e404:	4293      	cmp	r3, r2
   1e406:	d004      	beq.n	1e412 <ull_conn_rx+0x446>
   1e408:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1e40c:	2b03      	cmp	r3, #3
   1e40e:	f000 872d 	beq.w	1f26c <_flash_used+0xb14>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1e412:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   1e416:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1e41a:	4293      	cmp	r3, r2
   1e41c:	f000 84e2 	beq.w	1ede4 <_flash_used+0x68c>
		rej_ext_ind->error_code = rej_ind->error_code;
   1e420:	f895 1020 	ldrb.w	r1, [r5, #32]
   1e424:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1e428:	2923      	cmp	r1, #35	; 0x23
   1e42a:	d012      	beq.n	1e452 <ull_conn_rx+0x486>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1e42c:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1e430:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1e434:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1e438:	f36f 0200 	bfc	r2, #0, #1
   1e43c:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   1e440:	2200      	movs	r2, #0
   1e442:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1e446:	f3c3 0202 	ubfx	r2, r3, #0, #3
   1e44a:	f362 1306 	bfi	r3, r2, #4, #3
   1e44e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   1e452:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1e456:	075b      	lsls	r3, r3, #29
   1e458:	f57f ae02 	bpl.w	1e060 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1e45c:	231a      	movs	r3, #26
   1e45e:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1e460:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   1e462:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   1e466:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1e46a:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   1e46c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1e470:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   1e474:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   1e476:	77ab      	strb	r3, [r5, #30]
	if (err) {
   1e478:	e5f5      	b.n	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   1e47a:	7f6e      	ldrb	r6, [r5, #29]
   1e47c:	2e06      	cmp	r6, #6
   1e47e:	f47f ae23 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	if (!conn->llcp_version.tx) {
   1e482:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1e486:	07da      	lsls	r2, r3, #31
   1e488:	f140 85b1 	bpl.w	1efee <_flash_used+0x896>
	} else if (!conn->llcp_version.rx) {
   1e48c:	f013 0302 	ands.w	r3, r3, #2
   1e490:	f47f ade6 	bne.w	1e060 <ull_conn_rx+0x94>
		conn->llcp_version.ack = conn->llcp_version.req;
   1e494:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   1e498:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   1e49c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   1e4a0:	f895 3020 	ldrb.w	r3, [r5, #32]
   1e4a4:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1e4a8:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   1e4ac:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   1e4b0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1e4b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e4b8:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   1e4bc:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   1e4c0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   1e4c4:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1e4c8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   1e4cc:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   1e4d0:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   1e4d4:	2000      	movs	r0, #0
   1e4d6:	e5c6      	b.n	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   1e4d8:	7f6f      	ldrb	r7, [r5, #29]
   1e4da:	2f01      	cmp	r7, #1
   1e4dc:	f47f adf4 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	if (conn->common.txn_lock) {
   1e4e0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e4e4:	f013 0602 	ands.w	r6, r3, #2
   1e4e8:	f040 85a7 	bne.w	1f03a <_flash_used+0x8e2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1e4ec:	4843      	ldr	r0, [pc, #268]	; (1e5fc <ull_conn_rx+0x630>)
   1e4ee:	f7f9 fe91 	bl	18214 <mem_acquire>
	if (!tx) {
   1e4f2:	4601      	mov	r1, r0
   1e4f4:	2800      	cmp	r0, #0
   1e4f6:	f000 8301 	beq.w	1eafc <_flash_used+0x3a4>
	conn->common.txn_lock = 1U;
   1e4fa:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e4fe:	f043 0302 	orr.w	r3, r3, #2
   1e502:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e506:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   1e508:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e50a:	f043 0303 	orr.w	r3, r3, #3
   1e50e:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1e510:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   1e512:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1e514:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1e516:	f7fe fd4d 	bl	1cfb4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e51a:	712f      	strb	r7, [r5, #4]
	return 0;
   1e51c:	4630      	mov	r0, r6
   1e51e:	e5a2      	b.n	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   1e520:	7f6b      	ldrb	r3, [r5, #29]
   1e522:	2b03      	cmp	r3, #3
   1e524:	f47f add0 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	switch (rej_ext_ind->reject_opcode) {
   1e528:	f895 3020 	ldrb.w	r3, [r5, #32]
   1e52c:	3b03      	subs	r3, #3
   1e52e:	2b13      	cmp	r3, #19
   1e530:	f63f ad96 	bhi.w	1e060 <ull_conn_rx+0x94>
   1e534:	a201      	add	r2, pc, #4	; (adr r2, 1e53c <ull_conn_rx+0x570>)
   1e536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1e53a:	bf00      	nop
   1e53c:	0001ea5b 	.word	0x0001ea5b
   1e540:	0001e061 	.word	0x0001e061
   1e544:	0001e061 	.word	0x0001e061
   1e548:	0001e061 	.word	0x0001e061
   1e54c:	0001e061 	.word	0x0001e061
   1e550:	0001e061 	.word	0x0001e061
   1e554:	0001e061 	.word	0x0001e061
   1e558:	0001e061 	.word	0x0001e061
   1e55c:	0001e061 	.word	0x0001e061
   1e560:	0001e061 	.word	0x0001e061
   1e564:	0001e061 	.word	0x0001e061
   1e568:	0001e061 	.word	0x0001e061
   1e56c:	0001e9f5 	.word	0x0001e9f5
   1e570:	0001e061 	.word	0x0001e061
   1e574:	0001e061 	.word	0x0001e061
   1e578:	0001e061 	.word	0x0001e061
   1e57c:	0001e061 	.word	0x0001e061
   1e580:	0001e9b7 	.word	0x0001e9b7
   1e584:	0001e061 	.word	0x0001e061
   1e588:	0001ea9b 	.word	0x0001ea9b
		if (!conn->lll.role ||
   1e58c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e590:	2b00      	cmp	r3, #0
   1e592:	f6bf ad99 	bge.w	1e0c8 <ull_conn_rx+0xfc>
   1e596:	7f6b      	ldrb	r3, [r5, #29]
   1e598:	2b08      	cmp	r3, #8
   1e59a:	f47f ad95 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1e59e:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1e5a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1e5a4:	1af3      	subs	r3, r6, r3
   1e5a6:	041b      	lsls	r3, r3, #16
   1e5a8:	f100 8631 	bmi.w	1f20e <_flash_used+0xab6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1e5ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1e5b0:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1e5b4:	1a9b      	subs	r3, r3, r2
   1e5b6:	f003 0303 	and.w	r3, r3, #3
   1e5ba:	2b02      	cmp	r3, #2
   1e5bc:	f000 866c 	beq.w	1f298 <_flash_used+0xb40>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1e5c0:	2205      	movs	r2, #5
   1e5c2:	f105 0120 	add.w	r1, r5, #32
   1e5c6:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   1e5ca:	f00a fb24 	bl	28c16 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1e5ce:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   1e5d2:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   1e5d6:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   1e5da:	f36f 0200 	bfc	r2, #0, #1
   1e5de:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   1e5e2:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   1e5e4:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e5e6:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   1e5e8:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   1e5ec:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   1e5f0:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e5f2:	712a      	strb	r2, [r5, #4]
		if (err) {
   1e5f4:	e537      	b.n	1e066 <ull_conn_rx+0x9a>
   1e5f6:	bf00      	nop
   1e5f8:	20001c88 	.word	0x20001c88
   1e5fc:	20001d1c 	.word	0x20001d1c
		if (!conn->lll.role ||
   1e600:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e604:	2b00      	cmp	r3, #0
   1e606:	f6bf ad5f 	bge.w	1e0c8 <ull_conn_rx+0xfc>
   1e60a:	7f6e      	ldrb	r6, [r5, #29]
   1e60c:	2e01      	cmp	r6, #1
   1e60e:	f47f ad5b 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1e612:	48d7      	ldr	r0, [pc, #860]	; (1e970 <_flash_used+0x218>)
   1e614:	f7f9 fdfe 	bl	18214 <mem_acquire>
		if (!tx) {
   1e618:	2800      	cmp	r0, #0
   1e61a:	f000 826f 	beq.w	1eafc <_flash_used+0x3a4>
	conn->llcp_enc.pause_rx = 1U;
   1e61e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1e622:	f023 0305 	bic.w	r3, r3, #5
   1e626:	f043 0305 	orr.w	r3, r3, #5
   1e62a:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1e62e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1e632:	f36f 03c3 	bfc	r3, #3, #1
   1e636:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e63a:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1e63c:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e63e:	f043 0303 	orr.w	r3, r3, #3
   1e642:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   1e644:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1e648:	220b      	movs	r2, #11
   1e64a:	71c2      	strb	r2, [r0, #7]
	if (
   1e64c:	2b00      	cmp	r3, #0
   1e64e:	f000 827d 	beq.w	1eb4c <_flash_used+0x3f4>
	    !conn->llcp_enc.pause_tx &&
   1e652:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1e656:	0796      	lsls	r6, r2, #30
   1e658:	f100 8278 	bmi.w	1eb4c <_flash_used+0x3f4>
	    !conn->llcp_phy.pause_tx &&
   1e65c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1e660:	07d1      	lsls	r1, r2, #31
   1e662:	f100 8273 	bmi.w	1eb4c <_flash_used+0x3f4>
		if (conn->tx_head == conn->tx_data) {
   1e666:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1e66a:	4293      	cmp	r3, r2
   1e66c:	f000 872f 	beq.w	1f4ce <_flash_used+0xd76>
		} else if (!conn->tx_ctrl) {
   1e670:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1e674:	2a00      	cmp	r2, #0
   1e676:	f000 8789 	beq.w	1f58c <_flash_used+0xe34>
	tx->next = conn->tx_ctrl_last->next;
   1e67a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1e67e:	681a      	ldr	r2, [r3, #0]
   1e680:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1e682:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   1e684:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1e688:	6803      	ldr	r3, [r0, #0]
   1e68a:	2b00      	cmp	r3, #0
   1e68c:	f47f ace8 	bne.w	1e060 <ull_conn_rx+0x94>
   1e690:	e553      	b.n	1e13a <ull_conn_rx+0x16e>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   1e692:	7f6b      	ldrb	r3, [r5, #29]
   1e694:	2b09      	cmp	r3, #9
   1e696:	f47f ad17 	bne.w	1e0c8 <ull_conn_rx+0xfc>
   1e69a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e69c:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   1e69e:	49b5      	ldr	r1, [pc, #724]	; (1e974 <_flash_used+0x21c>)
   1e6a0:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1e6a4:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1e6a8:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1e6aa:	400b      	ands	r3, r1
   1e6ac:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e6b0:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1e6b4:	4013      	ands	r3, r2
   1e6b6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1e6ba:	6a2e      	ldr	r6, [r5, #32]
   1e6bc:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   1e6be:	f7fc fca5 	bl	1b00c <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   1e6c2:	4aac      	ldr	r2, [pc, #688]	; (1e974 <_flash_used+0x21c>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
   1e6c4:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   1e6c8:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat &= LL_FEAT_BIT_MASK;
   1e6cc:	4332      	orrs	r2, r6
	feat_result = feat_to_keep & feat_octet0;
   1e6ce:	4002      	ands	r2, r0
   1e6d0:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
	feat_result &= 0xFF;
   1e6d4:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	conn->common.fex_valid = 1U;
   1e6d8:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
   1e6dc:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1e6de:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   1e6e2:	2300      	movs	r3, #0
   1e6e4:	f005 050f 	and.w	r5, r5, #15
	conn->common.fex_valid = 1U;
   1e6e8:	f041 0101 	orr.w	r1, r1, #1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1e6ec:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1e6f0:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   1e6f4:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_feature.features_peer =
   1e6f8:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   1e6fc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1e700:	4618      	mov	r0, r3
}
   1e702:	e4b0      	b.n	1e066 <ull_conn_rx+0x9a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   1e704:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1e708:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   1e70c:	4299      	cmp	r1, r3
   1e70e:	f43f acdb 	beq.w	1e0c8 <ull_conn_rx+0xfc>
   1e712:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   1e716:	2903      	cmp	r1, #3
   1e718:	f47f acd6 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   1e71c:	7f69      	ldrb	r1, [r5, #29]
   1e71e:	2901      	cmp	r1, #1
   1e720:	f47f acd2 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		if (conn->lll.role) {
   1e724:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   1e728:	2900      	cmp	r1, #0
   1e72a:	f2c0 8518 	blt.w	1f15e <_flash_used+0xa06>
			conn->llcp_enc.pause_rx = 0U;
   1e72e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   1e732:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   1e736:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   1e738:	f022 0203 	bic.w	r2, r2, #3
   1e73c:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   1e740:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   1e744:	0757      	lsls	r7, r2, #29
   1e746:	f57f ac8d 	bpl.w	1e064 <ull_conn_rx+0x98>
			conn->llcp_enc.refresh = 0U;
   1e74a:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1e74e:	2317      	movs	r3, #23
			conn->llcp_enc.refresh = 0U;
   1e750:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
   1e754:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1e756:	712b      	strb	r3, [r5, #4]
   1e758:	e485      	b.n	1e066 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   1e75a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e75e:	2b00      	cmp	r3, #0
   1e760:	f6bf acb2 	bge.w	1e0c8 <ull_conn_rx+0xfc>
   1e764:	f895 901d 	ldrb.w	r9, [r5, #29]
   1e768:	f1b9 0f09 	cmp.w	r9, #9
   1e76c:	f47f acac 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	if (conn->common.txn_lock) {
   1e770:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   1e774:	f010 0602 	ands.w	r6, r0, #2
   1e778:	f47f ac72 	bne.w	1e060 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1e77c:	487c      	ldr	r0, [pc, #496]	; (1e970 <_flash_used+0x218>)
   1e77e:	f7f9 fd49 	bl	18214 <mem_acquire>
	if (!tx) {
   1e782:	4607      	mov	r7, r0
   1e784:	2800      	cmp	r0, #0
   1e786:	f000 81b9 	beq.w	1eafc <_flash_used+0x3a4>
	conn->common.txn_lock = 1U;
   1e78a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   1e78e:	4979      	ldr	r1, [pc, #484]	; (1e974 <_flash_used+0x21c>)
	conn->common.txn_lock = 1U;
   1e790:	f043 0302 	orr.w	r3, r3, #2
   1e794:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   1e798:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1e79a:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   1e79c:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1e7a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   1e7a4:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1e7a6:	400b      	ands	r3, r1
   1e7a8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   1e7ac:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1e7b0:	4013      	ands	r3, r2
   1e7b2:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   1e7b6:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
   1e7ba:	f8d5 8020 	ldr.w	r8, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   1e7be:	f7fc fc25 	bl	1b00c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1e7c2:	f00a 030f 	and.w	r3, sl, #15
	conn->llcp_feature.features_peer =
   1e7c6:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   1e7ca:	4b6a      	ldr	r3, [pc, #424]	; (1e974 <_flash_used+0x21c>)
   1e7cc:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
   1e7d0:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   1e7d2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   1e7d6:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
   1e7da:	ea43 0308 	orr.w	r3, r3, r8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1e7de:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   1e7e2:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   1e7e6:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   1e7ea:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1e7ee:	f043 0301 	orr.w	r3, r3, #1
   1e7f2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e7f6:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1e7f8:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e7fc:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1e800:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e802:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1e804:	18b8      	adds	r0, r7, r2
   1e806:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1e808:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1e80c:	f00a fa2e 	bl	28c6c <memset>
	feat = feat_land_octet0(ll_feat_get(),
   1e810:	f7fc fbfc 	bl	1b00c <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   1e814:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[1] = val >> 8;
   1e818:	737e      	strb	r6, [r7, #13]
	feat = feat_land_octet0(ll_feat_get(),
   1e81a:	4603      	mov	r3, r0
	feat_result = feat_to_keep & feat_octet0;
   1e81c:	401a      	ands	r2, r3
	feat_result &= 0xFF;
   1e81e:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1e822:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1e826:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   1e828:	0c1a      	lsrs	r2, r3, #16
   1e82a:	f001 010f 	and.w	r1, r1, #15
	dst[0] = val;
   1e82e:	723b      	strb	r3, [r7, #8]
   1e830:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   1e832:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1e836:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   1e838:	7339      	strb	r1, [r7, #12]
	ctrl_tx_sec_enqueue(conn, tx);
   1e83a:	4620      	mov	r0, r4
	dst[1] = val >> 8;
   1e83c:	727b      	strb	r3, [r7, #9]
	dst[0] = val;
   1e83e:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   1e840:	73fe      	strb	r6, [r7, #15]
   1e842:	72fa      	strb	r2, [r7, #11]
   1e844:	4639      	mov	r1, r7
   1e846:	f7fe fbb5 	bl	1cfb4 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1e84a:	2301      	movs	r3, #1
   1e84c:	712b      	strb	r3, [r5, #4]
	return 0;
   1e84e:	4630      	mov	r0, r6
   1e850:	e409      	b.n	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   1e852:	7f6b      	ldrb	r3, [r5, #29]
   1e854:	2b02      	cmp	r3, #2
   1e856:	f47f ac37 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		} else if ((conn->llcp_conn_param.ack !=
   1e85a:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   1e85e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1e862:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   1e864:	f895 2020 	ldrb.w	r2, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   1e868:	d002      	beq.n	1e870 <_flash_used+0x118>
			    conn->llcp_conn_param.req) &&
   1e86a:	2a0f      	cmp	r2, #15
   1e86c:	f000 8375 	beq.w	1ef5a <_flash_used+0x802>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1e870:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1e874:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   1e878:	4299      	cmp	r1, r3
   1e87a:	d002      	beq.n	1e882 <_flash_used+0x12a>
   1e87c:	2a14      	cmp	r2, #20
   1e87e:	f000 8457 	beq.w	1f130 <_flash_used+0x9d8>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   1e882:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1e886:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1e88a:	428b      	cmp	r3, r1
   1e88c:	d002      	beq.n	1e894 <_flash_used+0x13c>
   1e88e:	2a16      	cmp	r2, #22
   1e890:	f000 84c8 	beq.w	1f224 <_flash_used+0xacc>
			switch (llctrl->unknown_rsp.type) {
   1e894:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e896:	bf04      	itt	eq
   1e898:	2301      	moveq	r3, #1
   1e89a:	712b      	strbeq	r3, [r5, #4]
				break;
   1e89c:	e586      	b.n	1e3ac <ull_conn_rx+0x3e0>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1e89e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e8a2:	2b00      	cmp	r3, #0
   1e8a4:	f6bf ac10 	bge.w	1e0c8 <ull_conn_rx+0xfc>
   1e8a8:	7f6b      	ldrb	r3, [r5, #29]
   1e8aa:	2b05      	cmp	r3, #5
   1e8ac:	f47f ac0c 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   1e8b0:	f895 1020 	ldrb.w	r1, [r5, #32]
   1e8b4:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1e8b8:	ea41 0003 	orr.w	r0, r1, r3
   1e8bc:	f010 0007 	ands.w	r0, r0, #7
   1e8c0:	f040 83c5 	bne.w	1f04e <_flash_used+0x8f6>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1e8c4:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   1e8c8:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1e8cc:	4293      	cmp	r3, r2
   1e8ce:	f43f abc7 	beq.w	1e060 <ull_conn_rx+0x94>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1e8d2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1e8d6:	f003 0303 	and.w	r3, r3, #3
   1e8da:	2b02      	cmp	r3, #2
   1e8dc:	f47f abc0 	bne.w	1e060 <ull_conn_rx+0x94>
		conn->llcp_phy.pause_tx = 0U;
   1e8e0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1e8e4:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1e8e8:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   1e8ec:	f8a4 00c8 	strh.w	r0, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   1e8f0:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1e8f4:	4611      	mov	r1, r2
   1e8f6:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   1e8fa:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   1e8fe:	f013 0304 	ands.w	r3, r3, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1e902:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
   1e906:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   1e90a:	f040 85ff 	bne.w	1f50c <_flash_used+0xdb4>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1e90e:	683a      	ldr	r2, [r7, #0]
   1e910:	2101      	movs	r1, #1
   1e912:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   1e914:	4618      	mov	r0, r3
   1e916:	f7ff bba6 	b.w	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   1e91a:	7f6b      	ldrb	r3, [r5, #29]
   1e91c:	2b03      	cmp	r3, #3
   1e91e:	f47f abd3 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		if (!conn->lll.role) {
   1e922:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e926:	2b00      	cmp	r3, #0
   1e928:	f2c0 8292 	blt.w	1ee50 <_flash_used+0x6f8>
			if ((conn->llcp_phy.ack !=
   1e92c:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   1e930:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   1e934:	4281      	cmp	r1, r0
   1e936:	d007      	beq.n	1e948 <_flash_used+0x1f0>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   1e938:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   1e93c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   1e940:	3a01      	subs	r2, #1
   1e942:	2a02      	cmp	r2, #2
   1e944:	f240 846b 	bls.w	1f21e <_flash_used+0xac6>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1e948:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1e94c:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   1e950:	1a9b      	subs	r3, r3, r2
   1e952:	f003 0303 	and.w	r3, r3, #3
   1e956:	2b02      	cmp	r3, #2
   1e958:	f000 8373 	beq.w	1f042 <_flash_used+0x8ea>
				     LLCP_ENCRYPTION)) ||
   1e95c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1e960:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1e964:	429a      	cmp	r2, r3
   1e966:	f000 840f 	beq.w	1f188 <_flash_used+0xa30>
				nack = reject_ext_ind_send(conn, *rx,
   1e96a:	232a      	movs	r3, #42	; 0x2a
   1e96c:	2216      	movs	r2, #22
   1e96e:	e53a      	b.n	1e3e6 <ull_conn_rx+0x41a>
   1e970:	20001d1c 	.word	0x20001d1c
   1e974:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1e978:	7f6b      	ldrb	r3, [r5, #29]
   1e97a:	2b01      	cmp	r3, #1
   1e97c:	f47f aba4 	bne.w	1e0c8 <ull_conn_rx+0xfc>
	} else if (!conn->lll.role) {
   1e980:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1e984:	2b00      	cmp	r3, #0
   1e986:	f2c0 80d9 	blt.w	1eb3c <_flash_used+0x3e4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1e98a:	48cb      	ldr	r0, [pc, #812]	; (1ecb8 <_flash_used+0x560>)
   1e98c:	f7f9 fc42 	bl	18214 <mem_acquire>
		if (!tx) {
   1e990:	2800      	cmp	r0, #0
   1e992:	f000 80b3 	beq.w	1eafc <_flash_used+0x3a4>
	conn->llcp_enc.pause_rx = 1U;
   1e996:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   1e99a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   1e99e:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   1e9a2:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   1e9a6:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1e9aa:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   1e9ac:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1e9b0:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1e9b2:	7142      	strb	r2, [r0, #5]
   1e9b4:	e643      	b.n	1e63e <ull_conn_rx+0x672>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   1e9b6:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1e9ba:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1e9be:	4293      	cmp	r3, r2
   1e9c0:	f43f ab4e 	beq.w	1e060 <ull_conn_rx+0x94>
	conn->procedure_expire = 0U;
   1e9c4:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1e9c6:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   1e9c8:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   1e9cc:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1e9d0:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1e9d2:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1e9d6:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1e9da:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1e9dc:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1e9de:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1e9e2:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1e9e4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   1e9e8:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1e9ea:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1e9ec:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   1e9ee:	4618      	mov	r0, r3
   1e9f0:	f7ff bb39 	b.w	1e066 <ull_conn_rx+0x9a>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1e9f4:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   1e9f8:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1e9fc:	429a      	cmp	r2, r3
   1e9fe:	f43f ab2f 	beq.w	1e060 <ull_conn_rx+0x94>
	if (!lll->role && (rej_ext_ind->error_code ==
   1ea02:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   1ea06:	2a00      	cmp	r2, #0
   1ea08:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1ea0c:	f2c0 85a7 	blt.w	1f55e <_flash_used+0xe06>
   1ea10:	2a1a      	cmp	r2, #26
   1ea12:	f000 8617 	beq.w	1f644 <_flash_used+0xeec>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1ea16:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1ea1a:	f002 0107 	and.w	r1, r2, #7
   1ea1e:	2904      	cmp	r1, #4
   1ea20:	f000 8580 	beq.w	1f524 <_flash_used+0xdcc>
	if (!conn->llcp_conn_param.cmd) {
   1ea24:	0712      	lsls	r2, r2, #28
   1ea26:	f57f ab1b 	bpl.w	1e060 <ull_conn_rx+0x94>
	cu->status = rej_ext_ind->error_code;
   1ea2a:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1ea2e:	772b      	strb	r3, [r5, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1ea30:	2216      	movs	r2, #22
   1ea32:	712a      	strb	r2, [r5, #4]
	cu->interval = lll->interval;
   1ea34:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   1ea36:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   1ea3a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1ea3c:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   1ea3e:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   1ea40:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   1ea44:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   1ea48:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   1ea4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1ea4e:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   1ea52:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   1ea54:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   1ea56:	f7ff bb06 	b.w	1e066 <ull_conn_rx+0x9a>
		if ((conn->llcp_ack != conn->llcp_req) &&
   1ea5a:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1ea5e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1ea62:	428b      	cmp	r3, r1
   1ea64:	f43f aafc 	beq.w	1e060 <ull_conn_rx+0x94>
   1ea68:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1ea6c:	2b03      	cmp	r3, #3
   1ea6e:	f47f aaf7 	bne.w	1e060 <ull_conn_rx+0x94>
	conn->llcp_enc.pause_rx = 0U;
   1ea72:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   1ea76:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   1ea7a:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1ea7c:	f022 0203 	bic.w	r2, r2, #3
   1ea80:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   1ea84:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   1ea88:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1ea8c:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1ea90:	210d      	movs	r1, #13
   1ea92:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   1ea94:	4618      	mov	r0, r3
   1ea96:	f7ff bae6 	b.w	1e066 <ull_conn_rx+0x9a>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1ea9a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1ea9e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1eaa2:	428b      	cmp	r3, r1
   1eaa4:	f43f aadc 	beq.w	1e060 <ull_conn_rx+0x94>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1eaa8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   1eaac:	2a23      	cmp	r2, #35	; 0x23
   1eaae:	d012      	beq.n	1ead6 <_flash_used+0x37e>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1eab0:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1eab4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1eab8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   1eabc:	f36f 0100 	bfc	r1, #0, #1
   1eac0:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   1eac4:	2100      	movs	r1, #0
   1eac6:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1eaca:	f3c3 0102 	ubfx	r1, r3, #0, #3
   1eace:	f361 1306 	bfi	r3, r1, #4, #3
   1ead2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   1ead6:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1eada:	0759      	lsls	r1, r3, #29
   1eadc:	f57f aac0 	bpl.w	1e060 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1eae0:	231a      	movs	r3, #26
   1eae2:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   1eae4:	772a      	strb	r2, [r5, #28]
   1eae6:	e4bc      	b.n	1e462 <ull_conn_rx+0x496>
			tx->next = conn->tx_head;
   1eae8:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1eaea:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1eaee:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1eaf2:	2a00      	cmp	r2, #0
   1eaf4:	f47f aab4 	bne.w	1e060 <ull_conn_rx+0x94>
   1eaf8:	f7ff bb1f 	b.w	1e13a <ull_conn_rx+0x16e>
		*err = -ENOBUFS;
   1eafc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1eb00:	f7ff bab1 	b.w	1e066 <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1eb04:	7f6b      	ldrb	r3, [r5, #29]
   1eb06:	2b01      	cmp	r3, #1
   1eb08:	f47f aade 	bne.w	1e0c8 <ull_conn_rx+0xfc>
   1eb0c:	e73d      	b.n	1e98a <_flash_used+0x232>
			conn->tx_data = conn->tx_data->next;
   1eb0e:	6813      	ldr	r3, [r2, #0]
   1eb10:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1eb14:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1eb18:	2b00      	cmp	r3, #0
   1eb1a:	f47f ab04 	bne.w	1e126 <ull_conn_rx+0x15a>
			tx->next = conn->tx_head->next;
   1eb1e:	6813      	ldr	r3, [r2, #0]
   1eb20:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   1eb22:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   1eb24:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   1eb26:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1eb2a:	2a00      	cmp	r2, #0
   1eb2c:	f47f aa98 	bne.w	1e060 <ull_conn_rx+0x94>
   1eb30:	f7ff bb03 	b.w	1e13a <ull_conn_rx+0x16e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   1eb34:	7f6b      	ldrb	r3, [r5, #29]
   1eb36:	2b01      	cmp	r3, #1
   1eb38:	f47f aac6 	bne.w	1e0c8 <ull_conn_rx+0xfc>
		conn->lll.enc_tx = 0;
   1eb3c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1eb40:	f36f 1304 	bfc	r3, #4, #1
   1eb44:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   1eb48:	f7ff ba8a 	b.w	1e060 <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   1eb4c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1eb50:	2a00      	cmp	r2, #0
   1eb52:	f47f ad92 	bne.w	1e67a <ull_conn_rx+0x6ae>
			tx->next = conn->tx_head;
   1eb56:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1eb58:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1eb5c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1eb60:	e592      	b.n	1e688 <ull_conn_rx+0x6bc>
		if (!conn->lll.role) {
   1eb62:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
					conn->llcp_conn_param.ack) &&
   1eb66:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
		if (!conn->lll.role) {
   1eb6a:	2900      	cmp	r1, #0
   1eb6c:	f2c0 80a6 	blt.w	1ecbc <_flash_used+0x564>
			if ((conn->llcp_conn_param.req !=
   1eb70:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1eb74:	4281      	cmp	r1, r0
   1eb76:	d009      	beq.n	1eb8c <_flash_used+0x434>
			    ((conn->llcp_conn_param.state ==
   1eb78:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   1eb7c:	f011 0107 	ands.w	r1, r1, #7
   1eb80:	f000 82d2 	beq.w	1f128 <_flash_used+0x9d0>
			      LLCP_CPR_STATE_REQ) ||
   1eb84:	3904      	subs	r1, #4
   1eb86:	2901      	cmp	r1, #1
   1eb88:	f240 82ce 	bls.w	1f128 <_flash_used+0x9d0>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   1eb8c:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1eb90:	f894 70e5 	ldrb.w	r7, [r4, #229]	; 0xe5
   1eb94:	1bc9      	subs	r1, r1, r7
   1eb96:	f001 0103 	and.w	r1, r1, #3
   1eb9a:	2902      	cmp	r1, #2
   1eb9c:	f000 83dd 	beq.w	1f35a <_flash_used+0xc02>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   1eba0:	f894 71bc 	ldrb.w	r7, [r4, #444]	; 0x1bc
   1eba4:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   1eba8:	428f      	cmp	r7, r1
   1ebaa:	f000 83fd 	beq.w	1f3a8 <_flash_used+0xc50>
				nack = reject_ext_ind_send(conn, *rx,
   1ebae:	232a      	movs	r3, #42	; 0x2a
   1ebb0:	220f      	movs	r2, #15
   1ebb2:	e418      	b.n	1e3e6 <ull_conn_rx+0x41a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1ebb4:	7913      	ldrb	r3, [r2, #4]
   1ebb6:	f003 0303 	and.w	r3, r3, #3
   1ebba:	2b03      	cmp	r3, #3
   1ebbc:	f000 8364 	beq.w	1f288 <_flash_used+0xb30>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1ebc0:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   1ebc4:	f7ff bab1 	b.w	1e12a <ull_conn_rx+0x15e>
	if (conn->common.txn_lock) {
   1ebc8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1ebcc:	079b      	lsls	r3, r3, #30
   1ebce:	f53f aa47 	bmi.w	1e060 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1ebd2:	4839      	ldr	r0, [pc, #228]	; (1ecb8 <_flash_used+0x560>)
   1ebd4:	f7f9 fb1e 	bl	18214 <mem_acquire>
	if (!tx) {
   1ebd8:	4603      	mov	r3, r0
   1ebda:	2800      	cmp	r0, #0
   1ebdc:	d08e      	beq.n	1eafc <_flash_used+0x3a4>
	conn->common.txn_lock = 1U;
   1ebde:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1ebe2:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   1ebe6:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   1ebea:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1ebee:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   1ebf2:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   1ebf6:	f042 0202 	orr.w	r2, r2, #2
   1ebfa:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1ebfe:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   1ec02:	428a      	cmp	r2, r1
   1ec04:	f040 84e8 	bne.w	1f5d8 <_flash_used+0xe80>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   1ec08:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1ec0a:	291a      	cmp	r1, #26
   1ec0c:	f240 82a5 	bls.w	1f15a <_flash_used+0xa02>
			eff_tx_octets = MIN(max_rx_octets,
   1ec10:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   1ec14:	4281      	cmp	r1, r0
   1ec16:	bf28      	it	cs
   1ec18:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   1ec1a:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   1ec1c:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   1ec20:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   1ec22:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   1ec24:	bf34      	ite	cc
   1ec26:	46c6      	movcc	lr, r8
   1ec28:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1ec2c:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1ec30:	bf34      	ite	cc
   1ec32:	4658      	movcc	r0, fp
   1ec34:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   1ec38:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1ec3c:	bf34      	ite	cc
   1ec3e:	46d4      	movcc	ip, sl
   1ec40:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   1ec44:	45c6      	cmp	lr, r8
   1ec46:	f000 832b 	beq.w	1f2a0 <_flash_used+0xb48>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   1ec4a:	3a01      	subs	r2, #1
   1ec4c:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   1ec50:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   1ec54:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   1ec58:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   1ec5c:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   1ec60:	2b00      	cmp	r3, #0
   1ec62:	f000 8387 	beq.w	1f374 <_flash_used+0xc1c>
				conn->llcp_length.state =
   1ec66:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   1ec6a:	2505      	movs	r5, #5
   1ec6c:	f365 0202 	bfi	r2, r5, #0, #3
   1ec70:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   1ec74:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1ec78:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   1ec7a:	683a      	ldr	r2, [r7, #0]
   1ec7c:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   1ec7e:	683a      	ldr	r2, [r7, #0]
   1ec80:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   1ec84:	2200      	movs	r2, #0
   1ec86:	603a      	str	r2, [r7, #0]
	if (tx) {
   1ec88:	2b00      	cmp	r3, #0
   1ec8a:	f43f a9eb 	beq.w	1e064 <ull_conn_rx+0x98>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ec8e:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1ec90:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ec92:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   1ec96:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ec98:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1ec9a:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1ec9c:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1ec9e:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   1eca0:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1eca4:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   1eca8:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1ecaa:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1ecac:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   1ecae:	f7fe f981 	bl	1cfb4 <ctrl_tx_sec_enqueue>
	return 0;
   1ecb2:	2000      	movs	r0, #0
}
   1ecb4:	f7ff b9d7 	b.w	1e066 <ull_conn_rx+0x9a>
   1ecb8:	20001d1c 	.word	0x20001d1c
		} else if ((conn->llcp_conn_param.req ==
   1ecbc:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1ecc0:	4282      	cmp	r2, r0
   1ecc2:	d004      	beq.n	1ecce <_flash_used+0x576>
			    conn->llcp_conn_param.ack) ||
   1ecc4:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1ecc8:	0797      	lsls	r7, r2, #30
   1ecca:	f47f a9c9 	bne.w	1e060 <ull_conn_rx+0x94>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1ecce:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1ecd2:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1ecd6:	2a05      	cmp	r2, #5
   1ecd8:	f240 813b 	bls.w	1ef52 <_flash_used+0x7fa>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   1ecdc:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   1ece0:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1ece4:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1ece8:	f200 8133 	bhi.w	1ef52 <_flash_used+0x7fa>
			    (interval_max > 3200) ||
   1ecec:	428a      	cmp	r2, r1
   1ecee:	f200 8130 	bhi.w	1ef52 <_flash_used+0x7fa>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1ecf2:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1ecf6:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   1ecfa:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   1ecfe:	f080 8128 	bcs.w	1ef52 <_flash_used+0x7fa>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1ed02:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1ed06:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   1ed0a:	f1a2 070a 	sub.w	r7, r2, #10
   1ed0e:	f640 4b76 	movw	fp, #3190	; 0xc76
   1ed12:	b2bf      	uxth	r7, r7
   1ed14:	455f      	cmp	r7, fp
   1ed16:	f200 811c 	bhi.w	1ef52 <_flash_used+0x7fa>
			     ((latency + 1) * interval_max)) ||
   1ed1a:	f10c 0701 	add.w	r7, ip, #1
   1ed1e:	b2bf      	uxth	r7, r7
   1ed20:	fb01 f707 	mul.w	r7, r1, r7
			    (timeout < 10) || (timeout > 3200) ||
   1ed24:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   1ed28:	f080 8113 	bcs.w	1ef52 <_flash_used+0x7fa>
			     ((latency + 1) * interval_max)) ||
   1ed2c:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1ed30:	4559      	cmp	r1, fp
   1ed32:	f0c0 810e 	bcc.w	1ef52 <_flash_used+0x7fa>
			conn->llcp_conn_param.interval_min = interval_min;
   1ed36:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   1ed3a:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   1ed3e:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   1ed42:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   1ed46:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1ed4a:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   1ed4e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1ed52:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   1ed56:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   1ed5a:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   1ed5e:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1ed62:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   1ed66:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   1ed6a:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   1ed6e:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1ed72:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   1ed76:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   1ed7a:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   1ed7e:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1ed82:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   1ed86:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   1ed8a:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   1ed8e:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1ed92:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   1ed96:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   1ed9a:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   1ed9e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1eda2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   1eda6:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   1edaa:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1edae:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   1edb2:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   1edb6:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   1edba:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   1edbc:	42b9      	cmp	r1, r7
   1edbe:	f000 8486 	beq.w	1f6ce <_flash_used+0xf76>
				conn->llcp_conn_param.state =
   1edc2:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1edc6:	2103      	movs	r1, #3
   1edc8:	f361 0202 	bfi	r2, r1, #0, #3
   1edcc:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   1edd0:	3801      	subs	r0, #1
   1edd2:	f884 0185 	strb.w	r0, [r4, #389]	; 0x185
			if (!conn_upd_curr) {
   1edd6:	2b00      	cmp	r3, #0
   1edd8:	f47f a944 	bne.w	1e064 <ull_conn_rx+0x98>
				conn_upd_curr = conn;
   1eddc:	6034      	str	r4, [r6, #0]
	int nack = 0;
   1edde:	4618      	mov	r0, r3
   1ede0:	f7ff b941 	b.w	1e066 <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1ede4:	f894 2185 	ldrb.w	r2, [r4, #389]	; 0x185
   1ede8:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1edec:	429a      	cmp	r2, r3
   1edee:	f43f ade2 	beq.w	1e9b6 <_flash_used+0x25e>
		rej_ext_ind->error_code = rej_ind->error_code;
   1edf2:	f895 3020 	ldrb.w	r3, [r5, #32]
   1edf6:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1edfa:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   1edfe:	2a00      	cmp	r2, #0
   1ee00:	f2c0 835d 	blt.w	1f4be <_flash_used+0xd66>
   1ee04:	2b1a      	cmp	r3, #26
   1ee06:	f000 841d 	beq.w	1f644 <_flash_used+0xeec>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1ee0a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1ee0e:	f002 0307 	and.w	r3, r2, #7
   1ee12:	2b04      	cmp	r3, #4
   1ee14:	f47f ae06 	bne.w	1ea24 <_flash_used+0x2cc>
		LL_ASSERT(conn_upd_curr == conn);
   1ee18:	4ed5      	ldr	r6, [pc, #852]	; (1f170 <_flash_used+0xa18>)
   1ee1a:	6833      	ldr	r3, [r6, #0]
   1ee1c:	429c      	cmp	r4, r3
   1ee1e:	d00e      	beq.n	1ee3e <_flash_used+0x6e6>
   1ee20:	4ad4      	ldr	r2, [pc, #848]	; (1f174 <_flash_used+0xa1c>)
   1ee22:	49d5      	ldr	r1, [pc, #852]	; (1f178 <_flash_used+0xa20>)
   1ee24:	48d5      	ldr	r0, [pc, #852]	; (1f17c <_flash_used+0xa24>)
   1ee26:	f241 23a8 	movw	r3, #4776	; 0x12a8
   1ee2a:	f008 fe8a 	bl	27b42 <printk>
   1ee2e:	4040      	eors	r0, r0
   1ee30:	f380 8811 	msr	BASEPRI, r0
   1ee34:	f04f 0003 	mov.w	r0, #3
   1ee38:	df02      	svc	2
   1ee3a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1ee3e:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1ee42:	f884 1185 	strb.w	r1, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1ee46:	2300      	movs	r3, #0
   1ee48:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   1ee4a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1ee4e:	e5e9      	b.n	1ea24 <_flash_used+0x2cc>
	if (conn->common.txn_lock) {
   1ee50:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1ee54:	079e      	lsls	r6, r3, #30
   1ee56:	f53f a903 	bmi.w	1e060 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1ee5a:	48c9      	ldr	r0, [pc, #804]	; (1f180 <_flash_used+0xa28>)
   1ee5c:	f7f9 f9da 	bl	18214 <mem_acquire>
	if (!tx) {
   1ee60:	4602      	mov	r2, r0
   1ee62:	2800      	cmp	r0, #0
   1ee64:	f43f ae4a 	beq.w	1eafc <_flash_used+0x3a4>
	conn->common.txn_lock = 1U;
   1ee68:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1ee6c:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   1ee70:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
	conn->common.txn_lock = 1U;
   1ee74:	f043 0302 	orr.w	r3, r3, #2
   1ee78:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1ee7c:	2302      	movs	r3, #2
   1ee7e:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   1ee82:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   1ee86:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   1ee8a:	4283      	cmp	r3, r0
   1ee8c:	d115      	bne.n	1eeba <_flash_used+0x762>
		conn->llcp_phy.ack--;
   1ee8e:	3b01      	subs	r3, #1
   1ee90:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   1ee94:	f8b4 31be 	ldrh.w	r3, [r4, #446]	; 0x1be
			conn->phy_pref_rx;
   1ee98:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
		conn->llcp_phy.tx =
   1ee9c:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   1eea0:	f240 43fc 	movw	r3, #1276	; 0x4fc
   1eea4:	f021 0104 	bic.w	r1, r1, #4
   1eea8:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1eeac:	430b      	orrs	r3, r1
		conn->procedure_expire =
   1eeae:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   1eeb2:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
		conn->procedure_expire =
   1eeb6:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   1eeba:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
   1eebe:	f895 3020 	ldrb.w	r3, [r5, #32]
   1eec2:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   1eec6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1eeca:	f3c1 0682 	ubfx	r6, r1, #2, #3
   1eece:	4033      	ands	r3, r6
   1eed0:	009b      	lsls	r3, r3, #2
   1eed2:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   1eed6:	f001 0103 	and.w	r1, r1, #3
   1eeda:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1eedc:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   1eede:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   1eee2:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1eee4:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1eee8:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   1eeea:	4603      	mov	r3, r0
   1eeec:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1eef0:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   1eef2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1eef6:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1eefa:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1eefc:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1ef00:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1ef02:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1ef04:	7111      	strb	r1, [r2, #4]
	if (
   1ef06:	2b00      	cmp	r3, #0
   1ef08:	f000 811c 	beq.w	1f144 <_flash_used+0x9ec>
	    !conn->llcp_enc.pause_tx &&
   1ef0c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1ef10:	0788      	lsls	r0, r1, #30
   1ef12:	f100 8117 	bmi.w	1f144 <_flash_used+0x9ec>
	    !conn->llcp_phy.pause_tx &&
   1ef16:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1ef1a:	07c9      	lsls	r1, r1, #31
   1ef1c:	f100 8112 	bmi.w	1f144 <_flash_used+0x9ec>
		if (conn->tx_head == conn->tx_data) {
   1ef20:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1ef24:	428b      	cmp	r3, r1
   1ef26:	f000 8323 	beq.w	1f570 <_flash_used+0xe18>
		} else if (!conn->tx_ctrl) {
   1ef2a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1ef2e:	2900      	cmp	r1, #0
   1ef30:	f000 83e3 	beq.w	1f6fa <_flash_used+0xfa2>
	tx->next = conn->tx_ctrl_last->next;
   1ef34:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1ef38:	6819      	ldr	r1, [r3, #0]
   1ef3a:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   1ef3c:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1ef3e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1ef42:	6813      	ldr	r3, [r2, #0]
   1ef44:	2b00      	cmp	r3, #0
   1ef46:	f47f a88b 	bne.w	1e060 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   1ef4a:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1ef4e:	f7ff b887 	b.w	1e060 <ull_conn_rx+0x94>
				nack = reject_ext_ind_send(conn, *rx,
   1ef52:	231e      	movs	r3, #30
   1ef54:	220f      	movs	r2, #15
   1ef56:	f7ff ba46 	b.w	1e3e6 <ull_conn_rx+0x41a>
			conn->llcp_conn_param.disabled = 1U;
   1ef5a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1ef5e:	f042 0210 	orr.w	r2, r2, #16
   1ef62:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   1ef66:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   1ef6a:	2a00      	cmp	r2, #0
   1ef6c:	f2c0 81be 	blt.w	1f2ec <_flash_used+0xb94>
				LL_ASSERT(conn->llcp_cu.req ==
   1ef70:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   1ef74:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1ef78:	429a      	cmp	r2, r3
   1ef7a:	d00e      	beq.n	1ef9a <_flash_used+0x842>
   1ef7c:	4a7d      	ldr	r2, [pc, #500]	; (1f174 <_flash_used+0xa1c>)
   1ef7e:	4981      	ldr	r1, [pc, #516]	; (1f184 <_flash_used+0xa2c>)
   1ef80:	487e      	ldr	r0, [pc, #504]	; (1f17c <_flash_used+0xa24>)
   1ef82:	f44f 53cd 	mov.w	r3, #6560	; 0x19a0
   1ef86:	f008 fddc 	bl	27b42 <printk>
   1ef8a:	4040      	eors	r0, r0
   1ef8c:	f380 8811 	msr	BASEPRI, r0
   1ef90:	f04f 0003 	mov.w	r0, #3
   1ef94:	df02      	svc	2
   1ef96:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   1ef9a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1ef9e:	2105      	movs	r1, #5
   1efa0:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   1efa4:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   1efa6:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   1efa8:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   1efac:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1efb0:	683d      	ldr	r5, [r7, #0]
				conn->llcp_conn_param.state =
   1efb2:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1efb6:	f002 0308 	and.w	r3, r2, #8
   1efba:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   1efbe:	430b      	orrs	r3, r1
   1efc0:	f022 020f 	bic.w	r2, r2, #15
   1efc4:	4313      	orrs	r3, r2
   1efc6:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   1efca:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   1efce:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   1efd2:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   1efd6:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   1efd8:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   1efdc:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   1efe0:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   1efe4:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1efe8:	7129      	strb	r1, [r5, #4]
				break;
   1efea:	f7ff b83c 	b.w	1e066 <ull_conn_rx+0x9a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1efee:	4864      	ldr	r0, [pc, #400]	; (1f180 <_flash_used+0xa28>)
   1eff0:	f7f9 f910 	bl	18214 <mem_acquire>
		if (!tx) {
   1eff4:	4601      	mov	r1, r0
   1eff6:	2800      	cmp	r0, #0
   1eff8:	f43f ad80 	beq.w	1eafc <_flash_used+0x3a4>
		conn->llcp_version.tx = 1U;
   1effc:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1f000:	f043 0301 	orr.w	r3, r3, #1
   1f004:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1f008:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f00a:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1f00c:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1f00e:	220b      	movs	r2, #11
   1f010:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f012:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1f016:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f01a:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1f01c:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   1f01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1f022:	2205      	movs	r2, #5
		v->sub_version_number =
   1f024:	72c3      	strb	r3, [r0, #11]
   1f026:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   1f028:	7146      	strb	r6, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1f02a:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   1f02c:	4620      	mov	r0, r4
   1f02e:	f7fd ffc1 	bl	1cfb4 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f032:	2301      	movs	r3, #1
   1f034:	712b      	strb	r3, [r5, #4]
   1f036:	f7ff ba33 	b.w	1e4a0 <ull_conn_rx+0x4d4>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1f03a:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   1f03c:	2000      	movs	r0, #0
   1f03e:	f7ff b812 	b.w	1e066 <ull_conn_rx+0x9a>
				      0x03) == 0x02) &&
   1f042:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1f046:	2b03      	cmp	r3, #3
   1f048:	f47f ac8f 	bne.w	1e96a <_flash_used+0x212>
   1f04c:	e486      	b.n	1e95c <_flash_used+0x204>
	instant = sys_le16_to_cpu(ind->instant);
   1f04e:	8c68      	ldrh	r0, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   1f050:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1f052:	1a82      	subs	r2, r0, r2
   1f054:	0412      	lsls	r2, r2, #16
   1f056:	f100 80da 	bmi.w	1f20e <_flash_used+0xab6>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1f05a:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   1f05e:	f894 c0e5 	ldrb.w	ip, [r4, #229]	; 0xe5
   1f062:	eba2 020c 	sub.w	r2, r2, ip
   1f066:	f002 0203 	and.w	r2, r2, #3
   1f06a:	2a02      	cmp	r2, #2
   1f06c:	f000 8114 	beq.w	1f298 <_flash_used+0xb40>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1f070:	f894 51bc 	ldrb.w	r5, [r4, #444]	; 0x1bc
   1f074:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   1f078:	42aa      	cmp	r2, r5
   1f07a:	d018      	beq.n	1f0ae <_flash_used+0x956>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1f07c:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1f080:	f002 0203 	and.w	r2, r2, #3
   1f084:	2a02      	cmp	r2, #2
   1f086:	d112      	bne.n	1f0ae <_flash_used+0x956>
		conn->llcp_phy.pause_tx = 0U;
   1f088:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1f08c:	f884 51bd 	strb.w	r5, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   1f090:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1f094:	f894 50e8 	ldrb.w	r5, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   1f098:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1f09c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1f0a0:	f362 0541 	bfi	r5, r2, #1, #1
		conn->procedure_expire = 0U;
   1f0a4:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1f0a6:	f884 50e8 	strb.w	r5, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   1f0aa:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.initiate = 0U;
   1f0ae:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp.phy_upd_ind.instant = instant;
   1f0b2:	f8a4 00ea 	strh.w	r0, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   1f0b6:	009b      	lsls	r3, r3, #2
   1f0b8:	f003 031c 	and.w	r3, r3, #28
   1f0bc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1f0c0:	f002 0202 	and.w	r2, r2, #2
   1f0c4:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   1f0c6:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp.phy_upd_ind.initiate = 0U;
   1f0ca:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   1f0ce:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   1f0d0:	683a      	ldr	r2, [r7, #0]
   1f0d2:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   1f0d4:	683a      	ldr	r2, [r7, #0]
   1f0d6:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   1f0da:	2300      	movs	r3, #0
   1f0dc:	603b      	str	r3, [r7, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   1f0de:	f7fc feab 	bl	1be38 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   1f0e2:	4605      	mov	r5, r0
   1f0e4:	2800      	cmp	r0, #0
   1f0e6:	f000 825b 	beq.w	1f5a0 <_flash_used+0xe48>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   1f0ea:	682b      	ldr	r3, [r5, #0]
   1f0ec:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   1f0f0:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   1f0f2:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   1f0f6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	conn->llcp_rx = rx_dle;
   1f0fa:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	conn->llcp_type = LLCP_PHY_UPD;
   1f0fe:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   1f100:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   1f102:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   1f106:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   1f10a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   1f10e:	f43e afa9 	beq.w	1e064 <ull_conn_rx+0x98>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1f112:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
   1f116:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1f11a:	f363 1206 	bfi	r2, r3, #4, #3
   1f11e:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
	int nack = 0;
   1f122:	2000      	movs	r0, #0
   1f124:	f7fe bf9f 	b.w	1e066 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   1f128:	2323      	movs	r3, #35	; 0x23
   1f12a:	220f      	movs	r2, #15
   1f12c:	f7ff b95b 	b.w	1e3e6 <ull_conn_rx+0x41a>
			conn->llcp_length.disabled = 1U;
   1f130:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   1f134:	f884 31ad 	strb.w	r3, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   1f138:	f042 0308 	orr.w	r3, r2, #8
   1f13c:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   1f140:	f7ff b934 	b.w	1e3ac <ull_conn_rx+0x3e0>
		if (!conn->tx_ctrl) {
   1f144:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1f148:	2900      	cmp	r1, #0
   1f14a:	f47f aef3 	bne.w	1ef34 <_flash_used+0x7dc>
			tx->next = conn->tx_head;
   1f14e:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1f150:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1f154:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   1f158:	e6f3      	b.n	1ef42 <_flash_used+0x7ea>
   1f15a:	4649      	mov	r1, r9
   1f15c:	e55d      	b.n	1ec1a <_flash_used+0x4c2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1f15e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1f162:	f36f 0301 	bfc	r3, #0, #2
   1f166:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1f16a:	f7ff baeb 	b.w	1e744 <ull_conn_rx+0x778>
   1f16e:	bf00      	nop
   1f170:	20001c88 	.word	0x20001c88
   1f174:	0002be34 	.word	0x0002be34
   1f178:	0002bfa8 	.word	0x0002bfa8
   1f17c:	0002b8dc 	.word	0x0002b8dc
   1f180:	20001d1c 	.word	0x20001d1c
   1f184:	0002bf80 	.word	0x0002bf80
				conn->llcp_phy.state =
   1f188:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   1f18c:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   1f18e:	f043 0303 	orr.w	r3, r3, #3
   1f192:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   1f196:	d111      	bne.n	1f1bc <_flash_used+0xa64>
					conn->llcp_phy.tx =
   1f198:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   1f19c:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   1f1a0:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   1f1a2:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   1f1a6:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   1f1aa:	f240 43fc 	movw	r3, #1276	; 0x4fc
   1f1ae:	f022 0204 	bic.w	r2, r2, #4
   1f1b2:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1f1b6:	4313      	orrs	r3, r2
   1f1b8:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   1f1bc:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1f1c0:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1f1c4:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   1f1c8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   1f1cc:	f003 0203 	and.w	r2, r3, #3
   1f1d0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   1f1d4:	4003      	ands	r3, r0
   1f1d6:	009b      	lsls	r3, r3, #2
   1f1d8:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1f1dc:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1f1de:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   1f1e2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1f1e6:	d002      	beq.n	1f1ee <_flash_used+0xa96>
   1f1e8:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   1f1ec:	d105      	bne.n	1f1fa <_flash_used+0xaa2>
					conn->llcp_phy.tx = 0;
   1f1ee:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1f1f2:	f003 0303 	and.w	r3, r3, #3
   1f1f6:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   1f1fa:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f1fe:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   1f200:	4313      	orrs	r3, r2
   1f202:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   1f206:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f208:	712a      	strb	r2, [r5, #4]
   1f20a:	f7fe bf2c 	b.w	1e066 <ull_conn_rx+0x9a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f20e:	2301      	movs	r3, #1
   1f210:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   1f212:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   1f214:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   1f218:	2000      	movs	r0, #0
   1f21a:	f7fe bf24 	b.w	1e066 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   1f21e:	2323      	movs	r3, #35	; 0x23
   1f220:	f7ff bba4 	b.w	1e96c <_flash_used+0x214>
			lll->phy_tx_time = lll->phy_tx;
   1f224:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   1f228:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   1f22c:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   1f230:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   1f234:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   1f236:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   1f23a:	f362 1106 	bfi	r1, r2, #4, #3
   1f23e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   1f242:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   1f246:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   1f24a:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1f24e:	683b      	ldr	r3, [r7, #0]
			if (conn->llcp_phy.cmd) {
   1f250:	f000 8089 	beq.w	1f366 <_flash_used+0xc0e>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1f254:	211a      	movs	r1, #26
   1f256:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   1f258:	2300      	movs	r3, #0
   1f25a:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   1f25c:	776a      	strb	r2, [r5, #29]
				p->rx = lll->phy_rx;
   1f25e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1f262:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1f266:	77ab      	strb	r3, [r5, #30]
   1f268:	f7ff b8a0 	b.w	1e3ac <ull_conn_rx+0x3e0>
	conn->llcp_enc.pause_rx = 0U;
   1f26c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   1f270:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   1f274:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1f276:	f021 0103 	bic.w	r1, r1, #3
   1f27a:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   1f27e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1f282:	4618      	mov	r0, r3
   1f284:	f7fe beef 	b.w	1e066 <ull_conn_rx+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   1f288:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f28a:	2b03      	cmp	r3, #3
   1f28c:	f43f ac47 	beq.w	1eb1e <_flash_used+0x3c6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f290:	2b0a      	cmp	r3, #10
   1f292:	f47f ac95 	bne.w	1ebc0 <_flash_used+0x468>
   1f296:	e442      	b.n	1eb1e <_flash_used+0x3c6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f298:	2301      	movs	r3, #1
   1f29a:	712b      	strb	r3, [r5, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   1f29c:	232a      	movs	r3, #42	; 0x2a
   1f29e:	e7b9      	b.n	1f214 <_flash_used+0xabc>
			conn->procedure_expire = 0U;
   1f2a0:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1f2a2:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   1f2a4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   1f2a8:	f8a4 60c8 	strh.w	r6, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1f2ac:	f000 8123 	beq.w	1f4f6 <_flash_used+0xd9e>
			conn->lll.max_rx_time = eff_rx_time;
   1f2b0:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   1f2b4:	2b00      	cmp	r3, #0
   1f2b6:	f000 8119 	beq.w	1f4ec <_flash_used+0xd94>
					(conn->llcp_length.req - 1);
   1f2ba:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   1f2bc:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   1f2c0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   1f2c4:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   1f2c8:	2603      	movs	r6, #3
   1f2ca:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   1f2ce:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   1f2d2:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   1f2d6:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   1f2da:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   1f2de:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1f2e2:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1f2e4:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   1f2e8:	84e8      	strh	r0, [r5, #38]	; 0x26
   1f2ea:	e4cd      	b.n	1ec88 <_flash_used+0x530>
			LL_ASSERT(conn_upd_curr == conn);
   1f2ec:	4ecf      	ldr	r6, [pc, #828]	; (1f62c <_flash_used+0xed4>)
   1f2ee:	6832      	ldr	r2, [r6, #0]
   1f2f0:	4294      	cmp	r4, r2
   1f2f2:	d00e      	beq.n	1f312 <_flash_used+0xbba>
   1f2f4:	4ace      	ldr	r2, [pc, #824]	; (1f630 <_flash_used+0xed8>)
   1f2f6:	49cf      	ldr	r1, [pc, #828]	; (1f634 <_flash_used+0xedc>)
   1f2f8:	48cf      	ldr	r0, [pc, #828]	; (1f638 <_flash_used+0xee0>)
   1f2fa:	f641 13b8 	movw	r3, #6584	; 0x19b8
   1f2fe:	f008 fc20 	bl	27b42 <printk>
   1f302:	4040      	eors	r0, r0
   1f304:	f380 8811 	msr	BASEPRI, r0
   1f308:	f04f 0003 	mov.w	r0, #3
   1f30c:	df02      	svc	2
   1f30e:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1f312:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
			if (!conn->llcp_conn_param.cmd) {
   1f316:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	conn_upd_curr = NULL;
   1f31a:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   1f31c:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   1f320:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f322:	683a      	ldr	r2, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   1f324:	f43f aaf4 	beq.w	1e910 <_flash_used+0x1b8>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1f328:	2116      	movs	r1, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1f32a:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1f32c:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1f32e:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   1f330:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   1f332:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   1f336:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   1f338:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   1f33a:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   1f33e:	227d      	movs	r2, #125	; 0x7d
   1f340:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1f344:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   1f346:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f34a:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   1f34e:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1f350:	f7ff b82c 	b.w	1e3ac <ull_conn_rx+0x3e0>
		conn_upd_curr = conn;
   1f354:	601c      	str	r4, [r3, #0]
   1f356:	f7fe bfde 	b.w	1e316 <ull_conn_rx+0x34a>
				      0x03) == 0x02) &&
   1f35a:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   1f35e:	2903      	cmp	r1, #3
   1f360:	f47f ac25 	bne.w	1ebae <_flash_used+0x456>
   1f364:	e41c      	b.n	1eba0 <_flash_used+0x448>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f366:	2201      	movs	r2, #1
   1f368:	711a      	strb	r2, [r3, #4]
   1f36a:	f7ff b81f 	b.w	1e3ac <ull_conn_rx+0x3e0>
	struct node_tx *tx = NULL;
   1f36e:	2300      	movs	r3, #0
   1f370:	f7fe bf96 	b.w	1e2a0 <ull_conn_rx+0x2d4>
				conn->llcp_length.state =
   1f374:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   1f378:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   1f37c:	2504      	movs	r5, #4
   1f37e:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1f382:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   1f386:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   1f38a:	e473      	b.n	1ec74 <_flash_used+0x51c>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   1f38c:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   1f390:	3202      	adds	r2, #2
   1f392:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   1f396:	2b00      	cmp	r3, #0
   1f398:	f040 8110 	bne.w	1f5bc <_flash_used+0xe64>
			conn->slave.llcp_type = conn->llcp_type;
   1f39c:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1f3a0:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   1f3a4:	f7fe bf01 	b.w	1e1aa <ull_conn_rx+0x1de>
				uint16_t interval_min =
   1f3a8:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   1f3ac:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1f3b0:	2905      	cmp	r1, #5
   1f3b2:	f67f adce 	bls.w	1ef52 <_flash_used+0x7fa>
				uint16_t interval_max =
   1f3b6:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   1f3ba:	fa1f fc88 	uxth.w	ip, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1f3be:	f5bc 6f48 	cmp.w	ip, #3200	; 0xc80
   1f3c2:	f63f adc6 	bhi.w	1ef52 <_flash_used+0x7fa>
				    (interval_max > 3200) ||
   1f3c6:	4561      	cmp	r1, ip
   1f3c8:	f63f adc3 	bhi.w	1ef52 <_flash_used+0x7fa>
				uint16_t latency =
   1f3cc:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   1f3ce:	fa1f fe87 	uxth.w	lr, r7
				    (interval_min > interval_max) ||
   1f3d2:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   1f3d6:	f4bf adbc 	bcs.w	1ef52 <_flash_used+0x7fa>
				uint16_t timeout =
   1f3da:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
   1f3dc:	f8ad 1006 	strh.w	r1, [sp, #6]
   1f3e0:	b289      	uxth	r1, r1
				    (latency > 499) ||
   1f3e2:	f1a1 0a0a 	sub.w	sl, r1, #10
   1f3e6:	f640 4b76 	movw	fp, #3190	; 0xc76
   1f3ea:	fa1f fa8a 	uxth.w	sl, sl
   1f3ee:	45da      	cmp	sl, fp
   1f3f0:	f63f adaf 	bhi.w	1ef52 <_flash_used+0x7fa>
				     ((latency + 1) * interval_max)) ||
   1f3f4:	f10e 0a01 	add.w	sl, lr, #1
   1f3f8:	fa1f fa8a 	uxth.w	sl, sl
   1f3fc:	fb0c fa0a 	mul.w	sl, ip, sl
				    (timeout > 3200) ||
   1f400:	ebba 0f81 	cmp.w	sl, r1, lsl #2
   1f404:	f4bf ada5 	bcs.w	1ef52 <_flash_used+0x7fa>
				     ((latency + 1) * interval_max)) ||
   1f408:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   1f40c:	45dc      	cmp	ip, fp
   1f40e:	f4ff ada0 	bcc.w	1ef52 <_flash_used+0x7fa>
				conn->llcp_conn_param.latency =	latency;
   1f412:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   1f416:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   1f41a:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   1f41e:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   1f422:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   1f426:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1f42a:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   1f42e:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   1f432:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   1f436:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   1f43a:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   1f43e:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   1f442:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   1f446:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   1f44a:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   1f44e:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   1f452:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   1f456:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   1f45a:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   1f45e:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   1f462:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   1f466:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   1f46a:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   1f46e:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   1f472:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   1f476:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   1f47a:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   1f47e:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   1f482:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   1f486:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   1f48a:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   1f48e:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   1f492:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   1f496:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   1f49a:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   1f49c:	45bc      	cmp	ip, r7
   1f49e:	f000 80a3 	beq.w	1f5e8 <_flash_used+0xe90>
					if (conn->llcp_enc.pause_tx) {
   1f4a2:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   1f4a6:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   1f4aa:	f43f ac8c 	beq.w	1edc6 <_flash_used+0x66e>
						conn->llcp_conn_param.state =
   1f4ae:	2102      	movs	r1, #2
   1f4b0:	f361 0202 	bfi	r2, r1, #0, #3
   1f4b4:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   1f4b8:	2201      	movs	r2, #1
   1f4ba:	712a      	strb	r2, [r5, #4]
   1f4bc:	e488      	b.n	1edd0 <_flash_used+0x678>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1f4be:	2b23      	cmp	r3, #35	; 0x23
   1f4c0:	f43f aca3 	beq.w	1ee0a <_flash_used+0x6b2>
			conn->slave.ticks_to_offset =
   1f4c4:	f8d4 31a8 	ldr.w	r3, [r4, #424]	; 0x1a8
   1f4c8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   1f4cc:	e49d      	b.n	1ee0a <_flash_used+0x6b2>
			conn->tx_data = conn->tx_data->next;
   1f4ce:	681a      	ldr	r2, [r3, #0]
   1f4d0:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1f4d4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1f4d8:	2a00      	cmp	r2, #0
   1f4da:	f47f a8ce 	bne.w	1e67a <ull_conn_rx+0x6ae>
			tx->next = conn->tx_head->next;
   1f4de:	681a      	ldr	r2, [r3, #0]
   1f4e0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1f4e2:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   1f4e4:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1f4e8:	f7ff b8ce 	b.w	1e688 <ull_conn_rx+0x6bc>
				conn->lll.max_tx_octets = eff_tx_octets;
   1f4ec:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   1f4f0:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   1f4f4:	e6f3      	b.n	1f2de <_flash_used+0xb86>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1f4f6:	4558      	cmp	r0, fp
   1f4f8:	f47f aeda 	bne.w	1f2b0 <_flash_used+0xb58>
			    eff_rx_time == conn->lll.max_rx_time &&
   1f4fc:	45d4      	cmp	ip, sl
   1f4fe:	f47f aed7 	bne.w	1f2b0 <_flash_used+0xb58>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f502:	683a      	ldr	r2, [r7, #0]
   1f504:	2501      	movs	r5, #1
   1f506:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   1f508:	f7ff bbbe 	b.w	1ec88 <_flash_used+0x530>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1f50c:	683b      	ldr	r3, [r7, #0]
   1f50e:	211a      	movs	r1, #26
   1f510:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   1f512:	7728      	strb	r0, [r5, #28]
		p->tx = conn->lll.phy_tx;
   1f514:	776a      	strb	r2, [r5, #29]
		p->rx = conn->lll.phy_rx;
   1f516:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1f51a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1f51e:	77ab      	strb	r3, [r5, #30]
		if (err) {
   1f520:	f7fe bda1 	b.w	1e066 <ull_conn_rx+0x9a>
		LL_ASSERT(conn_upd_curr == conn);
   1f524:	4e41      	ldr	r6, [pc, #260]	; (1f62c <_flash_used+0xed4>)
   1f526:	6831      	ldr	r1, [r6, #0]
   1f528:	428c      	cmp	r4, r1
   1f52a:	d010      	beq.n	1f54e <_flash_used+0xdf6>
   1f52c:	4a40      	ldr	r2, [pc, #256]	; (1f630 <_flash_used+0xed8>)
   1f52e:	4941      	ldr	r1, [pc, #260]	; (1f634 <_flash_used+0xedc>)
   1f530:	4841      	ldr	r0, [pc, #260]	; (1f638 <_flash_used+0xee0>)
   1f532:	f241 23a8 	movw	r3, #4776	; 0x12a8
   1f536:	f008 fb04 	bl	27b42 <printk>
   1f53a:	4040      	eors	r0, r0
   1f53c:	f380 8811 	msr	BASEPRI, r0
   1f540:	f04f 0003 	mov.w	r0, #3
   1f544:	df02      	svc	2
   1f546:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   1f54a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1f54e:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   1f552:	2300      	movs	r3, #0
   1f554:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   1f556:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1f55a:	f7ff ba63 	b.w	1ea24 <_flash_used+0x2cc>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1f55e:	2a23      	cmp	r2, #35	; 0x23
   1f560:	f43f aa59 	beq.w	1ea16 <_flash_used+0x2be>
			conn->slave.ticks_to_offset =
   1f564:	f8d4 21a8 	ldr.w	r2, [r4, #424]	; 0x1a8
   1f568:	f8c4 20e0 	str.w	r2, [r4, #224]	; 0xe0
   1f56c:	f7ff ba53 	b.w	1ea16 <_flash_used+0x2be>
			conn->tx_data = conn->tx_data->next;
   1f570:	6819      	ldr	r1, [r3, #0]
   1f572:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1f576:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1f57a:	2900      	cmp	r1, #0
   1f57c:	f47f acda 	bne.w	1ef34 <_flash_used+0x7dc>
			tx->next = conn->tx_head->next;
   1f580:	6819      	ldr	r1, [r3, #0]
   1f582:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1f584:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1f586:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1f58a:	e4da      	b.n	1ef42 <_flash_used+0x7ea>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f58c:	791a      	ldrb	r2, [r3, #4]
   1f58e:	f002 0203 	and.w	r2, r2, #3
   1f592:	2a03      	cmp	r2, #3
   1f594:	f000 8093 	beq.w	1f6be <_flash_used+0xf66>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1f598:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1f59c:	f7ff b86d 	b.w	1e67a <ull_conn_rx+0x6ae>
	LL_ASSERT(rx_dle);
   1f5a0:	4a23      	ldr	r2, [pc, #140]	; (1f630 <_flash_used+0xed8>)
   1f5a2:	4926      	ldr	r1, [pc, #152]	; (1f63c <_flash_used+0xee4>)
   1f5a4:	4824      	ldr	r0, [pc, #144]	; (1f638 <_flash_used+0xee0>)
   1f5a6:	f241 536a 	movw	r3, #5482	; 0x156a
   1f5aa:	f008 faca 	bl	27b42 <printk>
   1f5ae:	4040      	eors	r0, r0
   1f5b0:	f380 8811 	msr	BASEPRI, r0
   1f5b4:	f04f 0003 	mov.w	r0, #3
   1f5b8:	df02      	svc	2
   1f5ba:	e596      	b.n	1f0ea <_flash_used+0x992>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   1f5bc:	4a1c      	ldr	r2, [pc, #112]	; (1f630 <_flash_used+0xed8>)
   1f5be:	4920      	ldr	r1, [pc, #128]	; (1f640 <_flash_used+0xee8>)
   1f5c0:	481d      	ldr	r0, [pc, #116]	; (1f638 <_flash_used+0xee0>)
   1f5c2:	f241 7355 	movw	r3, #5973	; 0x1755
   1f5c6:	f008 fabc 	bl	27b42 <printk>
   1f5ca:	4040      	eors	r0, r0
   1f5cc:	f380 8811 	msr	BASEPRI, r0
   1f5d0:	f04f 0003 	mov.w	r0, #3
   1f5d4:	df02      	svc	2
   1f5d6:	e6e1      	b.n	1f39c <_flash_used+0xc44>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1f5d8:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   1f5dc:	f011 0f06 	tst.w	r1, #6
   1f5e0:	f43f ab12 	beq.w	1ec08 <_flash_used+0x4b0>
   1f5e4:	f7fe be55 	b.w	1e292 <ull_conn_rx+0x2c6>
				     lll->interval) ||
   1f5e8:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
   1f5ec:	45f4      	cmp	ip, lr
   1f5ee:	f47f af58 	bne.w	1f4a2 <_flash_used+0xd4a>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1f5f2:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   1f5f6:	fb0c f707 	mul.w	r7, ip, r7
   1f5fa:	f242 7c10 	movw	ip, #10000	; 0x2710
   1f5fe:	fb0c 7101 	mla	r1, ip, r1, r7
   1f602:	3901      	subs	r1, #1
   1f604:	fbb1 f1f7 	udiv	r1, r1, r7
				     lll->latency) ||
   1f608:	f8b4 70c2 	ldrh.w	r7, [r4, #194]	; 0xc2
   1f60c:	b289      	uxth	r1, r1
   1f60e:	428f      	cmp	r7, r1
   1f610:	f47f af47 	bne.w	1f4a2 <_flash_used+0xd4a>
				conn->llcp_conn_param.state =
   1f614:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   1f618:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   1f61c:	f042 0201 	orr.w	r2, r2, #1
   1f620:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1f624:	2201      	movs	r2, #1
   1f626:	712a      	strb	r2, [r5, #4]
   1f628:	f7ff bbd2 	b.w	1edd0 <_flash_used+0x678>
   1f62c:	20001c88 	.word	0x20001c88
   1f630:	0002be34 	.word	0x0002be34
   1f634:	0002bfa8 	.word	0x0002bfa8
   1f638:	0002b8dc 	.word	0x0002b8dc
   1f63c:	0002bfc0 	.word	0x0002bfc0
   1f640:	0002bf5c 	.word	0x0002bf5c
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   1f644:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   1f648:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1f64c:	429a      	cmp	r2, r3
   1f64e:	d00e      	beq.n	1f66e <_flash_used+0xf16>
   1f650:	4a31      	ldr	r2, [pc, #196]	; (1f718 <_flash_used+0xfc0>)
   1f652:	4932      	ldr	r1, [pc, #200]	; (1f71c <_flash_used+0xfc4>)
   1f654:	4832      	ldr	r0, [pc, #200]	; (1f720 <_flash_used+0xfc8>)
   1f656:	f241 238d 	movw	r3, #4749	; 0x128d
   1f65a:	f008 fa72 	bl	27b42 <printk>
   1f65e:	4040      	eors	r0, r0
   1f660:	f380 8811 	msr	BASEPRI, r0
   1f664:	f04f 0003 	mov.w	r0, #3
   1f668:	df02      	svc	2
   1f66a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1f66e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   1f672:	2105      	movs	r1, #5
   1f674:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   1f678:	3b01      	subs	r3, #1
   1f67a:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1f67e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1f682:	f002 0308 	and.w	r3, r2, #8
   1f686:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   1f68a:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1f68c:	430b      	orrs	r3, r1
   1f68e:	f022 020f 	bic.w	r2, r2, #15
   1f692:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1f694:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1f698:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1f69c:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1f6a0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   1f6a4:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1f6a6:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   1f6aa:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   1f6ae:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1f6b2:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1f6b6:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   1f6ba:	f7fe bcd1 	b.w	1e060 <ull_conn_rx+0x94>
	    ((pdu_data_tx->llctrl.opcode !=
   1f6be:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f6c0:	2a03      	cmp	r2, #3
   1f6c2:	f43f af0c 	beq.w	1f4de <_flash_used+0xd86>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f6c6:	2a0a      	cmp	r2, #10
   1f6c8:	f47f af66 	bne.w	1f598 <_flash_used+0xe40>
   1f6cc:	e707      	b.n	1f4de <_flash_used+0xd86>
			     lll->interval) ||
   1f6ce:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   1f6d0:	4567      	cmp	r7, ip
   1f6d2:	f47f ab76 	bne.w	1edc2 <_flash_used+0x66a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1f6d6:	f240 47e2 	movw	r7, #1250	; 0x4e2
   1f6da:	fb07 f101 	mul.w	r1, r7, r1
   1f6de:	f242 7710 	movw	r7, #10000	; 0x2710
   1f6e2:	fb07 1202 	mla	r2, r7, r2, r1
   1f6e6:	3a01      	subs	r2, #1
   1f6e8:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1f6ec:	f8b4 10c2 	ldrh.w	r1, [r4, #194]	; 0xc2
   1f6f0:	b292      	uxth	r2, r2
   1f6f2:	4291      	cmp	r1, r2
   1f6f4:	f47f ab65 	bne.w	1edc2 <_flash_used+0x66a>
   1f6f8:	e78c      	b.n	1f614 <_flash_used+0xebc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f6fa:	7919      	ldrb	r1, [r3, #4]
   1f6fc:	f001 0103 	and.w	r1, r1, #3
   1f700:	2903      	cmp	r1, #3
   1f702:	d002      	beq.n	1f70a <_flash_used+0xfb2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1f704:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1f708:	e414      	b.n	1ef34 <_flash_used+0x7dc>
	    ((pdu_data_tx->llctrl.opcode !=
   1f70a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f70c:	2903      	cmp	r1, #3
   1f70e:	f43f af37 	beq.w	1f580 <_flash_used+0xe28>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1f712:	290a      	cmp	r1, #10
   1f714:	d1f6      	bne.n	1f704 <_flash_used+0xfac>
   1f716:	e733      	b.n	1f580 <_flash_used+0xe28>
   1f718:	0002be34 	.word	0x0002be34
   1f71c:	0002bf80 	.word	0x0002bf80
   1f720:	0002b8dc 	.word	0x0002b8dc

0001f724 <ull_conn_llcp>:
{
   1f724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f728:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   1f72a:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   1f72e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1f732:	4298      	cmp	r0, r3
{
   1f734:	460d      	mov	r5, r1
   1f736:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   1f738:	d030      	beq.n	1f79c <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1f73a:	1a1b      	subs	r3, r3, r0
   1f73c:	f003 0303 	and.w	r3, r3, #3
   1f740:	2b02      	cmp	r3, #2
   1f742:	d010      	beq.n	1f766 <ull_conn_llcp+0x42>
   1f744:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   1f748:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1f74a:	f1bc 0f00 	cmp.w	ip, #0
   1f74e:	db4e      	blt.n	1f7ee <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   1f750:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   1f754:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   1f758:	1a9b      	subs	r3, r3, r2
   1f75a:	b2db      	uxtb	r3, r3
   1f75c:	2b01      	cmp	r3, #1
   1f75e:	d05f      	beq.n	1f820 <ull_conn_llcp+0xfc>
	return 0;
   1f760:	2000      	movs	r0, #0
}
   1f762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1f766:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   1f76a:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   1f76e:	429a      	cmp	r2, r3
   1f770:	d006      	beq.n	1f780 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   1f772:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   1f776:	f003 0306 	and.w	r3, r3, #6
   1f77a:	2b04      	cmp	r3, #4
   1f77c:	f000 81f9 	beq.w	1fb72 <ull_conn_llcp+0x44e>
		switch (conn->llcp_type) {
   1f780:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   1f784:	1e7b      	subs	r3, r7, #1
   1f786:	2b05      	cmp	r3, #5
   1f788:	f200 81dd 	bhi.w	1fb46 <ull_conn_llcp+0x422>
   1f78c:	e8df f013 	tbh	[pc, r3, lsl #1]
   1f790:	01790024 	.word	0x01790024
   1f794:	01db00ef 	.word	0x01db00ef
   1f798:	00a700b2 	.word	0x00a700b2
   1f79c:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   1f7a0:	2a00      	cmp	r2, #0
   1f7a2:	4694      	mov	ip, r2
   1f7a4:	f2c0 81df 	blt.w	1fb66 <ull_conn_llcp+0x442>
	    !conn->llcp_enc.pause_rx) {
   1f7a8:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1f7ac:	f017 0801 	ands.w	r8, r7, #1
   1f7b0:	d1cb      	bne.n	1f74a <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   1f7b2:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   1f7b6:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   1f7ba:	45ce      	cmp	lr, r9
   1f7bc:	f000 8309 	beq.w	1fdd2 <ull_conn_llcp+0x6ae>
			conn->llcp_type = LLCP_CONN_UPD;
   1f7c0:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   1f7c2:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   1f7c4:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   1f7c8:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   1f7cc:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   1f7d0:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   1f7d4:	429a      	cmp	r2, r3
   1f7d6:	d1cc      	bne.n	1f772 <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   1f7d8:	462a      	mov	r2, r5
   1f7da:	4631      	mov	r1, r6
   1f7dc:	4620      	mov	r0, r4
   1f7de:	f7f1 f8bb 	bl	10958 <event_conn_upd_prep>
   1f7e2:	2800      	cmp	r0, #0
   1f7e4:	f040 81bc 	bne.w	1fb60 <ull_conn_llcp+0x43c>
				return -ECANCELED;
   1f7e8:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   1f7ec:	e7b9      	b.n	1f762 <ull_conn_llcp+0x3e>
   1f7ee:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1f7f2:	2900      	cmp	r1, #0
   1f7f4:	d0ac      	beq.n	1f750 <ull_conn_llcp+0x2c>
		switch (conn->slave.llcp_type) {
   1f7f6:	2902      	cmp	r1, #2
   1f7f8:	f000 817c 	beq.w	1faf4 <ull_conn_llcp+0x3d0>
   1f7fc:	2906      	cmp	r1, #6
   1f7fe:	d05c      	beq.n	1f8ba <ull_conn_llcp+0x196>
   1f800:	2901      	cmp	r1, #1
   1f802:	d063      	beq.n	1f8cc <ull_conn_llcp+0x1a8>
			LL_ASSERT(0);
   1f804:	4ab7      	ldr	r2, [pc, #732]	; (1fae4 <ull_conn_llcp+0x3c0>)
   1f806:	49b8      	ldr	r1, [pc, #736]	; (1fae8 <ull_conn_llcp+0x3c4>)
   1f808:	48b8      	ldr	r0, [pc, #736]	; (1faec <ull_conn_llcp+0x3c8>)
   1f80a:	f240 436f 	movw	r3, #1135	; 0x46f
   1f80e:	f008 f998 	bl	27b42 <printk>
   1f812:	4040      	eors	r0, r0
   1f814:	f380 8811 	msr	BASEPRI, r0
   1f818:	f04f 0003 	mov.w	r0, #3
   1f81c:	df02      	svc	2
			break;
   1f81e:	e797      	b.n	1f750 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1f820:	48b3      	ldr	r0, [pc, #716]	; (1faf0 <ull_conn_llcp+0x3cc>)
   1f822:	f7f8 fcf7 	bl	18214 <mem_acquire>
		if (tx) {
   1f826:	2800      	cmp	r0, #0
   1f828:	d03a      	beq.n	1f8a0 <ull_conn_llcp+0x17c>
			conn->llcp_terminate.ack--;
   1f82a:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   1f82e:	3b01      	subs	r3, #1
   1f830:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f834:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1f836:	2202      	movs	r2, #2
   1f838:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f83a:	f043 0303 	orr.w	r3, r3, #3
   1f83e:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   1f840:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   1f842:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   1f846:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   1f84a:	7202      	strb	r2, [r0, #8]
	if (
   1f84c:	b1c3      	cbz	r3, 1f880 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   1f84e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1f852:	0791      	lsls	r1, r2, #30
   1f854:	d414      	bmi.n	1f880 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   1f856:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1f85a:	07d2      	lsls	r2, r2, #31
   1f85c:	d410      	bmi.n	1f880 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   1f85e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1f862:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1f864:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1f868:	f000 8575 	beq.w	20356 <ull_conn_llcp+0xc32>
		} else if (!conn->tx_ctrl) {
   1f86c:	b96a      	cbnz	r2, 1f88a <ull_conn_llcp+0x166>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1f86e:	791a      	ldrb	r2, [r3, #4]
   1f870:	f002 0203 	and.w	r2, r2, #3
   1f874:	2a03      	cmp	r2, #3
   1f876:	f000 8775 	beq.w	20764 <ull_conn_llcp+0x1040>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1f87a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   1f87e:	e006      	b.n	1f88e <ull_conn_llcp+0x16a>
		if (!conn->tx_ctrl) {
   1f880:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1f884:	2a00      	cmp	r2, #0
   1f886:	f000 82f6 	beq.w	1fe76 <ull_conn_llcp+0x752>
	tx->next = conn->tx_ctrl_last->next;
   1f88a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1f88e:	681a      	ldr	r2, [r3, #0]
   1f890:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1f892:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1f894:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1f896:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1f89a:	2b00      	cmp	r3, #0
   1f89c:	f000 816d 	beq.w	1fb7a <ull_conn_llcp+0x456>
		if (!conn->procedure_expire) {
   1f8a0:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   1f8a4:	2800      	cmp	r0, #0
   1f8a6:	f47f af5b 	bne.w	1f760 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   1f8aa:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   1f8ae:	2b01      	cmp	r3, #1
   1f8b0:	f240 82dd 	bls.w	1fe6e <ull_conn_llcp+0x74a>
			conn->procedure_expire = conn->supervision_reload;
   1f8b4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1f8b8:	e752      	b.n	1f760 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   1f8ba:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   1f8bc:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1f8be:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1f8c0:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1f8c2:	4620      	mov	r0, r4
   1f8c4:	b291      	uxth	r1, r2
   1f8c6:	f7fd fe0f 	bl	1d4e8 <event_phy_upd_ind_prep>
		break;
   1f8ca:	e741      	b.n	1f750 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   1f8cc:	462a      	mov	r2, r5
   1f8ce:	4631      	mov	r1, r6
   1f8d0:	4620      	mov	r0, r4
   1f8d2:	f7f1 f841 	bl	10958 <event_conn_upd_prep>
   1f8d6:	2800      	cmp	r0, #0
   1f8d8:	f47f af3a 	bne.w	1f750 <ull_conn_llcp+0x2c>
   1f8dc:	e784      	b.n	1f7e8 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   1f8de:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   1f8e0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   1f8e2:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   1f8e4:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1f8e6:	b289      	uxth	r1, r1
   1f8e8:	4620      	mov	r0, r4
   1f8ea:	f7fd fdfd 	bl	1d4e8 <event_phy_upd_ind_prep>
		break;
   1f8ee:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1f8f2:	e72a      	b.n	1f74a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1f8f4:	487e      	ldr	r0, [pc, #504]	; (1faf0 <ull_conn_llcp+0x3cc>)
   1f8f6:	f7f8 fc8d 	bl	18214 <mem_acquire>
	if (tx) {
   1f8fa:	2800      	cmp	r0, #0
   1f8fc:	f000 8130 	beq.w	1fb60 <ull_conn_llcp+0x43c>
		conn->llcp_ack = conn->llcp_req;
   1f900:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1f904:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f908:	7903      	ldrb	r3, [r0, #4]
   1f90a:	f043 0303 	orr.w	r3, r3, #3
   1f90e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   1f910:	2301      	movs	r3, #1
   1f912:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   1f914:	2312      	movs	r3, #18
   1f916:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   1f918:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1f91c:	2b00      	cmp	r3, #0
   1f91e:	f000 82b3 	beq.w	1fe88 <ull_conn_llcp+0x764>
	    !conn->llcp_enc.pause_tx &&
   1f922:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1f926:	0791      	lsls	r1, r2, #30
   1f928:	f100 82ae 	bmi.w	1fe88 <ull_conn_llcp+0x764>
	    !conn->llcp_phy.pause_tx &&
   1f92c:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1f930:	07d2      	lsls	r2, r2, #31
   1f932:	f100 82a9 	bmi.w	1fe88 <ull_conn_llcp+0x764>
		if (conn->tx_head == conn->tx_data) {
   1f936:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1f93a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1f93c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1f940:	f000 8686 	beq.w	20650 <ull_conn_llcp+0xf2c>
		} else if (!conn->tx_ctrl) {
   1f944:	2a00      	cmp	r2, #0
   1f946:	f000 8718 	beq.w	2077a <ull_conn_llcp+0x1056>
	tx->next = conn->tx_ctrl_last->next;
   1f94a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1f94e:	681a      	ldr	r2, [r3, #0]
   1f950:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1f952:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1f954:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1f956:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1f95a:	2b00      	cmp	r3, #0
   1f95c:	f000 83e5 	beq.w	2012a <ull_conn_llcp+0xa06>
		conn->procedure_expire = conn->procedure_reload;
   1f960:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1f964:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1f968:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1f96c:	e6ed      	b.n	1f74a <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   1f96e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1f972:	f013 0803 	ands.w	r8, r3, #3
   1f976:	f000 8152 	beq.w	1fc1e <ull_conn_llcp+0x4fa>
		if (lll->role &&
   1f97a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1f97e:	2b00      	cmp	r3, #0
   1f980:	f6bf aee6 	bge.w	1f750 <ull_conn_llcp+0x2c>
   1f984:	f1b8 0f01 	cmp.w	r8, #1
   1f988:	f47f af31 	bne.w	1f7ee <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1f98c:	4858      	ldr	r0, [pc, #352]	; (1faf0 <ull_conn_llcp+0x3cc>)
   1f98e:	f7f8 fc41 	bl	18214 <mem_acquire>
	if (!tx) {
   1f992:	4680      	mov	r8, r0
   1f994:	2800      	cmp	r0, #0
   1f996:	f000 80e3 	beq.w	1fb60 <ull_conn_llcp+0x43c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1f99a:	7903      	ldrb	r3, [r0, #4]
   1f99c:	f043 0303 	orr.w	r3, r3, #3
   1f9a0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1f9a2:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1f9a6:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1f9a8:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1f9ac:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   1f9ae:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1f9b2:	210c      	movs	r1, #12
   1f9b4:	4638      	mov	r0, r7
   1f9b6:	f003 fa3d 	bl	22e34 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1f9ba:	4639      	mov	r1, r7
   1f9bc:	2208      	movs	r2, #8
   1f9be:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   1f9c2:	f009 f928 	bl	28c16 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   1f9c6:	464a      	mov	r2, r9
   1f9c8:	f108 0110 	add.w	r1, r8, #16
   1f9cc:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1f9d0:	f009 f921 	bl	28c16 <memcpy>
	    conn->tx_head &&
   1f9d4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1f9d8:	2b00      	cmp	r3, #0
   1f9da:	f000 84af 	beq.w	2033c <ull_conn_llcp+0xc18>
	    !conn->llcp_enc.pause_tx &&
   1f9de:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1f9e2:	0791      	lsls	r1, r2, #30
   1f9e4:	f100 84aa 	bmi.w	2033c <ull_conn_llcp+0xc18>
	    !conn->llcp_phy.pause_tx &&
   1f9e8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1f9ec:	07d2      	lsls	r2, r2, #31
   1f9ee:	f100 84a5 	bmi.w	2033c <ull_conn_llcp+0xc18>
		if (conn->tx_head == conn->tx_data) {
   1f9f2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1f9f6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1f9f8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1f9fc:	f000 8730 	beq.w	20860 <ull_conn_llcp+0x113c>
		} else if (!conn->tx_ctrl) {
   1fa00:	2a00      	cmp	r2, #0
   1fa02:	f001 8029 	beq.w	20a58 <ull_conn_llcp+0x1334>
	tx->next = conn->tx_ctrl_last->next;
   1fa06:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1fa0a:	681a      	ldr	r2, [r3, #0]
   1fa0c:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1fa10:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1fa14:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1fa18:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1fa1c:	2b00      	cmp	r3, #0
   1fa1e:	f000 85a4 	beq.w	2056a <ull_conn_llcp+0xe46>
			rx = ll_pdu_rx_alloc();
   1fa22:	f7fc fa09 	bl	1be38 <ll_pdu_rx_alloc>
			if (!rx) {
   1fa26:	4607      	mov	r7, r0
   1fa28:	2800      	cmp	r0, #0
   1fa2a:	f000 8099 	beq.w	1fb60 <ull_conn_llcp+0x43c>
			rx->hdr.handle = conn->lll.handle;
   1fa2e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1fa30:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1fa32:	2303      	movs	r3, #3
   1fa34:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1fa36:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   1fa38:	7f3b      	ldrb	r3, [r7, #28]
   1fa3a:	f043 0303 	orr.w	r3, r3, #3
   1fa3e:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1fa40:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   1fa42:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   1fa44:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   1fa46:	f204 1169 	addw	r1, r4, #361	; 0x169
   1fa4a:	f107 0020 	add.w	r0, r7, #32
   1fa4e:	f009 f8e2 	bl	28c16 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1fa52:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   1fa56:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   1fa5a:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   1fa5e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   1fa62:	6838      	ldr	r0, [r7, #0]
   1fa64:	4639      	mov	r1, r7
   1fa66:	f7fc f9b9 	bl	1bddc <ll_rx_put>
			ll_rx_sched();
   1fa6a:	f7fc f9c1 	bl	1bdf0 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   1fa6e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1fa72:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1fa76:	2202      	movs	r2, #2
   1fa78:	f362 0301 	bfi	r3, r2, #0, #2
   1fa7c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1fa80:	e663      	b.n	1f74a <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   1fa82:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1fa84:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1fa86:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   1fa88:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
					lll->latency_prepare + lazy;
   1fa8c:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   1fa8e:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   1fa92:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   1fa94:	d174      	bne.n	1fb80 <ull_conn_llcp+0x45c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1fa96:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1fa9a:	1afb      	subs	r3, r7, r3
   1fa9c:	0418      	lsls	r0, r3, #16
   1fa9e:	d45f      	bmi.n	1fb60 <ull_conn_llcp+0x43c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1faa0:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1faa4:	2b00      	cmp	r3, #0
   1faa6:	f2c0 8338 	blt.w	2011a <ull_conn_llcp+0x9f6>
			conn->llcp_ack = conn->llcp_req;
   1faaa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1faae:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   1fab2:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1fab6:	2205      	movs	r2, #5
   1fab8:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1fabc:	4638      	mov	r0, r7
   1fabe:	f009 f8aa 	bl	28c16 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   1fac2:	2105      	movs	r1, #5
   1fac4:	4638      	mov	r0, r7
   1fac6:	f7f8 fd75 	bl	185b4 <util_ones_count_get>
		lll->data_chan_count =
   1faca:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1face:	2301      	movs	r3, #1
		lll->data_chan_count =
   1fad0:	f360 0c05 	bfi	ip, r0, #0, #6
   1fad4:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1fad8:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   1fadc:	fa4f fc8c 	sxtb.w	ip, ip
   1fae0:	e633      	b.n	1f74a <ull_conn_llcp+0x26>
   1fae2:	bf00      	nop
   1fae4:	0002be34 	.word	0x0002be34
   1fae8:	0002b974 	.word	0x0002b974
   1faec:	0002b8dc 	.word	0x0002b8dc
   1faf0:	20001d1c 	.word	0x20001d1c
			event_counter = lll->event_counter +
   1faf4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   1faf6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   1faf8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   1fafc:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   1fafe:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   1fb00:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   1fb04:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   1fb06:	f040 8119 	bne.w	1fd3c <ull_conn_llcp+0x618>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1fb0a:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1fb0e:	1ab6      	subs	r6, r6, r2
   1fb10:	0430      	lsls	r0, r6, #16
   1fb12:	f53f ae1d 	bmi.w	1f750 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   1fb16:	f104 0534 	add.w	r5, r4, #52	; 0x34
   1fb1a:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   1fb1c:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   1fb20:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1fb24:	4628      	mov	r0, r5
   1fb26:	f009 f876 	bl	28c16 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   1fb2a:	2105      	movs	r1, #5
   1fb2c:	4628      	mov	r0, r5
   1fb2e:	f7f8 fd41 	bl	185b4 <util_ones_count_get>
		lll->data_chan_count =
   1fb32:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1fb36:	2201      	movs	r2, #1
		lll->data_chan_count =
   1fb38:	f360 0305 	bfi	r3, r0, #0, #6
   1fb3c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   1fb40:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   1fb44:	e604      	b.n	1f750 <ull_conn_llcp+0x2c>
			LL_ASSERT(0);
   1fb46:	4ad6      	ldr	r2, [pc, #856]	; (1fea0 <ull_conn_llcp+0x77c>)
   1fb48:	49d6      	ldr	r1, [pc, #856]	; (1fea4 <ull_conn_llcp+0x780>)
   1fb4a:	48d7      	ldr	r0, [pc, #860]	; (1fea8 <ull_conn_llcp+0x784>)
   1fb4c:	f240 433e 	movw	r3, #1086	; 0x43e
   1fb50:	f007 fff7 	bl	27b42 <printk>
   1fb54:	4040      	eors	r0, r0
   1fb56:	f380 8811 	msr	BASEPRI, r0
   1fb5a:	f04f 0003 	mov.w	r0, #3
   1fb5e:	df02      	svc	2
			break;
   1fb60:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1fb64:	e5f1      	b.n	1f74a <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1fb66:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   1fb6a:	2900      	cmp	r1, #0
   1fb6c:	f47f ae43 	bne.w	1f7f6 <ull_conn_llcp+0xd2>
   1fb70:	e61a      	b.n	1f7a8 <ull_conn_llcp+0x84>
				event_len_prep(conn);
   1fb72:	4620      	mov	r0, r4
   1fb74:	f7fd fbc0 	bl	1d2f8 <event_len_prep>
   1fb78:	e602      	b.n	1f780 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   1fb7a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1fb7e:	e68f      	b.n	1f8a0 <ull_conn_llcp+0x17c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1fb80:	48ca      	ldr	r0, [pc, #808]	; (1feac <ull_conn_llcp+0x788>)
   1fb82:	f7f8 fb47 	bl	18214 <mem_acquire>
		if (tx) {
   1fb86:	4680      	mov	r8, r0
   1fb88:	2800      	cmp	r0, #0
   1fb8a:	d0e9      	beq.n	1fb60 <ull_conn_llcp+0x43c>
			conn->llcp.chan_map.instant = event_counter +
   1fb8c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   1fb8e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   1fb92:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   1fb94:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   1fb96:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fb9a:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   1fb9c:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fba0:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   1fba4:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fba8:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1fbaa:	2308      	movs	r3, #8
   1fbac:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1fbae:	2301      	movs	r3, #1
   1fbb0:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   1fbb2:	2205      	movs	r2, #5
   1fbb4:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1fbb8:	3008      	adds	r0, #8
   1fbba:	f009 f82c 	bl	28c16 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   1fbbe:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1fbc2:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   1fbc6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1fbca:	2b00      	cmp	r3, #0
   1fbcc:	f000 82b0 	beq.w	20130 <ull_conn_llcp+0xa0c>
	    !conn->llcp_enc.pause_tx &&
   1fbd0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1fbd4:	0792      	lsls	r2, r2, #30
   1fbd6:	f100 82ab 	bmi.w	20130 <ull_conn_llcp+0xa0c>
	    !conn->llcp_phy.pause_tx &&
   1fbda:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1fbde:	07d7      	lsls	r7, r2, #31
   1fbe0:	f100 82a6 	bmi.w	20130 <ull_conn_llcp+0xa0c>
		if (conn->tx_head == conn->tx_data) {
   1fbe4:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1fbe8:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1fbea:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1fbee:	f000 85ce 	beq.w	2078e <ull_conn_llcp+0x106a>
		} else if (!conn->tx_ctrl) {
   1fbf2:	2a00      	cmp	r2, #0
   1fbf4:	f000 8682 	beq.w	208fc <ull_conn_llcp+0x11d8>
	tx->next = conn->tx_ctrl_last->next;
   1fbf8:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1fbfc:	681a      	ldr	r2, [r3, #0]
   1fbfe:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1fc02:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1fc06:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   1fc0a:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1fc0e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1fc12:	2b00      	cmp	r3, #0
   1fc14:	f47f ad99 	bne.w	1f74a <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   1fc18:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   1fc1c:	e595      	b.n	1f74a <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1fc1e:	48a3      	ldr	r0, [pc, #652]	; (1feac <ull_conn_llcp+0x788>)
   1fc20:	f7f8 faf8 	bl	18214 <mem_acquire>
	if (!tx) {
   1fc24:	4681      	mov	r9, r0
   1fc26:	2800      	cmp	r0, #0
   1fc28:	d09a      	beq.n	1fb60 <ull_conn_llcp+0x43c>
	if (!lll->role) {
   1fc2a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1fc2e:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   1fc30:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   1fc34:	f280 8302 	bge.w	2023c <ull_conn_llcp+0xb18>
	else if (!lll->enc_rx) {
   1fc38:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   1fc3c:	0719      	lsls	r1, r3, #28
   1fc3e:	f100 8408 	bmi.w	20452 <ull_conn_llcp+0xd2e>
		if (conn->llcp.encryption.error_code) {
   1fc42:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   1fc46:	f1b8 0f00 	cmp.w	r8, #0
   1fc4a:	f040 8492 	bne.w	20572 <ull_conn_llcp+0xe4e>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   1fc4e:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   1fc52:	463b      	mov	r3, r7
   1fc54:	4642      	mov	r2, r8
   1fc56:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   1fc5a:	f204 1071 	addw	r0, r4, #369	; 0x171
   1fc5e:	f004 fe9d 	bl	2499c <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   1fc62:	4639      	mov	r1, r7
   1fc64:	2210      	movs	r2, #16
   1fc66:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1fc6a:	f008 ffd4 	bl	28c16 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   1fc6e:	2208      	movs	r2, #8
   1fc70:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1fc74:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   1fc78:	f008 ffcd 	bl	28c16 <memcpy>
			lll->ccm_rx.direction = 1U;
   1fc7c:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   1fc80:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   1fc84:	f043 0301 	orr.w	r3, r3, #1
   1fc88:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   1fc8c:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   1fc90:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   1fc94:	f368 0300 	bfi	r3, r8, #0, #1
   1fc98:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   1fc9c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   1fca0:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   1fca4:	f043 0308 	orr.w	r3, r3, #8
   1fca8:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fcac:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   1fcb0:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fcb4:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   1fcb8:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   1fcbc:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   1fcc0:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1fcc4:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1fcc8:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fccc:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1fcd0:	2301      	movs	r3, #1
   1fcd2:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1fcd6:	2305      	movs	r3, #5
   1fcd8:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   1fcdc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   1fce0:	2b00      	cmp	r3, #0
   1fce2:	f000 8364 	beq.w	203ae <ull_conn_llcp+0xc8a>
	    !conn->llcp_enc.pause_tx &&
   1fce6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1fcea:	0792      	lsls	r2, r2, #30
   1fcec:	f100 835f 	bmi.w	203ae <ull_conn_llcp+0xc8a>
	    !conn->llcp_phy.pause_tx &&
   1fcf0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1fcf4:	07d7      	lsls	r7, r2, #31
   1fcf6:	f100 835a 	bmi.w	203ae <ull_conn_llcp+0xc8a>
		if (conn->tx_head == conn->tx_data) {
   1fcfa:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1fcfe:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1fd00:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1fd04:	f000 86b1 	beq.w	20a6a <ull_conn_llcp+0x1346>
		} else if (!conn->tx_ctrl) {
   1fd08:	2a00      	cmp	r2, #0
   1fd0a:	f000 8706 	beq.w	20b1a <ull_conn_llcp+0x13f6>
	tx->next = conn->tx_ctrl_last->next;
   1fd0e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1fd12:	681a      	ldr	r2, [r3, #0]
   1fd14:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1fd18:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1fd1c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1fd20:	f8d9 3000 	ldr.w	r3, [r9]
   1fd24:	2b00      	cmp	r3, #0
   1fd26:	f000 82fc 	beq.w	20322 <ull_conn_llcp+0xbfe>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   1fd2a:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1fd2e:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1fd32:	f043 0303 	orr.w	r3, r3, #3
   1fd36:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   1fd3a:	e506      	b.n	1f74a <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1fd3c:	485b      	ldr	r0, [pc, #364]	; (1feac <ull_conn_llcp+0x788>)
   1fd3e:	f7f8 fa69 	bl	18214 <mem_acquire>
		if (tx) {
   1fd42:	4605      	mov	r5, r0
   1fd44:	2800      	cmp	r0, #0
   1fd46:	f43f ad03 	beq.w	1f750 <ull_conn_llcp+0x2c>
			conn->llcp.chan_map.instant = event_counter +
   1fd4a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   1fd4c:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fd50:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   1fd52:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   1fd54:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   1fd58:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   1fd5a:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   1fd5e:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fd62:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   1fd66:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1fd68:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1fd6a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1fd6c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1fd6e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   1fd70:	2205      	movs	r2, #5
   1fd72:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1fd76:	3008      	adds	r0, #8
   1fd78:	f008 ff4d 	bl	28c16 <memcpy>
	    conn->tx_head &&
   1fd7c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   1fd80:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1fd84:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   1fd88:	2b00      	cmp	r3, #0
   1fd8a:	f000 81dd 	beq.w	20148 <ull_conn_llcp+0xa24>
	    !conn->llcp_enc.pause_tx &&
   1fd8e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1fd92:	0797      	lsls	r7, r2, #30
   1fd94:	f100 81d8 	bmi.w	20148 <ull_conn_llcp+0xa24>
	    !conn->llcp_phy.pause_tx &&
   1fd98:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1fd9c:	07d6      	lsls	r6, r2, #31
   1fd9e:	f100 81d3 	bmi.w	20148 <ull_conn_llcp+0xa24>
		if (conn->tx_head == conn->tx_data) {
   1fda2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1fda6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   1fda8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   1fdac:	f000 854a 	beq.w	20844 <ull_conn_llcp+0x1120>
		} else if (!conn->tx_ctrl) {
   1fdb0:	2a00      	cmp	r2, #0
   1fdb2:	f000 8599 	beq.w	208e8 <ull_conn_llcp+0x11c4>
	tx->next = conn->tx_ctrl_last->next;
   1fdb6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   1fdba:	681a      	ldr	r2, [r3, #0]
   1fdbc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1fdbe:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1fdc0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1fdc2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1fdc6:	2b00      	cmp	r3, #0
   1fdc8:	f47f acc2 	bne.w	1f750 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   1fdcc:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   1fdd0:	e4be      	b.n	1f750 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   1fdd2:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   1fdd6:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   1fdda:	4571      	cmp	r1, lr
   1fddc:	d068      	beq.n	1feb0 <ull_conn_llcp+0x78c>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   1fdde:	eba1 010e 	sub.w	r1, r1, lr
   1fde2:	07c8      	lsls	r0, r1, #31
   1fde4:	f57f acb1 	bpl.w	1f74a <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   1fde8:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1fdec:	f013 0701 	ands.w	r7, r3, #1
   1fdf0:	f000 81b5 	beq.w	2015e <ull_conn_llcp+0xa3a>
		rx = ll_pdu_rx_alloc();
   1fdf4:	f7fc f820 	bl	1be38 <ll_pdu_rx_alloc>
		if (!rx) {
   1fdf8:	4607      	mov	r7, r0
   1fdfa:	b398      	cbz	r0, 1fe64 <ull_conn_llcp+0x740>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   1fdfc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   1fe00:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1fe04:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   1fe06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   1fe08:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1fe0a:	f043 0303 	orr.w	r3, r3, #3
   1fe0e:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1fe10:	2309      	movs	r3, #9
   1fe12:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1fe14:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1fe16:	2303      	movs	r3, #3
   1fe18:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   1fe1a:	4641      	mov	r1, r8
   1fe1c:	2208      	movs	r2, #8
   1fe1e:	3020      	adds	r0, #32
   1fe20:	f008 ff24 	bl	28c6c <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   1fe24:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   1fe28:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   1fe2a:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   1fe2e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1fe32:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   1fe36:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   1fe38:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   1fe3c:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   1fe40:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1fe44:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   1fe46:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   1fe4a:	0a12      	lsrs	r2, r2, #8
   1fe4c:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   1fe50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   1fe54:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   1fe58:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   1fe5a:	6808      	ldr	r0, [r1, #0]
   1fe5c:	f7fb ffbe 	bl	1bddc <ll_rx_put>
		ll_rx_sched();
   1fe60:	f7fb ffc6 	bl	1bdf0 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1fe64:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1fe68:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
}
   1fe6c:	e465      	b.n	1f73a <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   1fe6e:	3301      	adds	r3, #1
   1fe70:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   1fe74:	e475      	b.n	1f762 <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   1fe76:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1fe78:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1fe7c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1fe80:	2b00      	cmp	r3, #0
   1fe82:	f47f ad0d 	bne.w	1f8a0 <ull_conn_llcp+0x17c>
   1fe86:	e678      	b.n	1fb7a <ull_conn_llcp+0x456>
		if (!conn->tx_ctrl) {
   1fe88:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1fe8c:	2a00      	cmp	r2, #0
   1fe8e:	f47f ad5c 	bne.w	1f94a <ull_conn_llcp+0x226>
			tx->next = conn->tx_head;
   1fe92:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1fe94:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1fe98:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1fe9c:	e55d      	b.n	1f95a <ull_conn_llcp+0x236>
   1fe9e:	bf00      	nop
   1fea0:	0002be34 	.word	0x0002be34
   1fea4:	0002b974 	.word	0x0002b974
   1fea8:	0002b8dc 	.word	0x0002b8dc
   1feac:	20001d1c 	.word	0x20001d1c
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   1feb0:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   1feb4:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   1feb8:	4571      	cmp	r1, lr
   1feba:	d02e      	beq.n	1ff1a <ull_conn_llcp+0x7f6>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   1febc:	eba1 010e 	sub.w	r1, r1, lr
   1fec0:	07cf      	lsls	r7, r1, #31
   1fec2:	f57f ac42 	bpl.w	1f74a <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   1fec6:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   1feca:	07d8      	lsls	r0, r3, #31
   1fecc:	f140 82fd 	bpl.w	204ca <ull_conn_llcp+0xda6>
	} else if (conn->llcp_version.rx) {
   1fed0:	079f      	lsls	r7, r3, #30
   1fed2:	f140 82ec 	bpl.w	204ae <ull_conn_llcp+0xd8a>
		rx = ll_pdu_rx_alloc();
   1fed6:	f7fb ffaf 	bl	1be38 <ll_pdu_rx_alloc>
		if (!rx) {
   1feda:	4601      	mov	r1, r0
   1fedc:	2800      	cmp	r0, #0
   1fede:	d0c1      	beq.n	1fe64 <ull_conn_llcp+0x740>
		conn->llcp_version.ack = conn->llcp_version.req;
   1fee0:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   1fee4:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   1fee8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1feea:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1feec:	2303      	movs	r3, #3
   1feee:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1fef0:	7f03      	ldrb	r3, [r0, #28]
   1fef2:	f043 0303 	orr.w	r3, r3, #3
   1fef6:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   1fef8:	2306      	movs	r3, #6
   1fefa:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1fefc:	230c      	movs	r3, #12
   1fefe:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   1ff00:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   1ff04:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   1ff08:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   1ff0c:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   1ff10:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   1ff14:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   1ff18:	e79f      	b.n	1fe5a <ull_conn_llcp+0x736>
		} else if (conn->llcp_conn_param.ack !=
   1ff1a:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   1ff1e:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   1ff22:	458e      	cmp	lr, r1
   1ff24:	f000 8200 	beq.w	20328 <ull_conn_llcp+0xc04>
	conn_upd = conn_upd_curr;
   1ff28:	f8df 8308 	ldr.w	r8, [pc, #776]	; 20234 <ull_conn_llcp+0xb10>
   1ff2c:	f8d8 1000 	ldr.w	r1, [r8]
	if (conn_upd && (conn_upd != conn)) {
   1ff30:	2900      	cmp	r1, #0
   1ff32:	f000 8364 	beq.w	205fe <ull_conn_llcp+0xeda>
   1ff36:	428c      	cmp	r4, r1
   1ff38:	f47f ac07 	bne.w	1f74a <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   1ff3c:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   1ff40:	f001 0107 	and.w	r1, r1, #7
   1ff44:	2905      	cmp	r1, #5
   1ff46:	f200 8709 	bhi.w	20d5c <ull_conn_llcp+0x1638>
   1ff4a:	f20f 0e08 	addw	lr, pc, #8
   1ff4e:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   1ff52:	bf00      	nop
   1ff54:	00020043 	.word	0x00020043
   1ff58:	0001ffbd 	.word	0x0001ffbd
   1ff5c:	0001ff6d 	.word	0x0001ff6d
   1ff60:	0001f73b 	.word	0x0001f73b
   1ff64:	0001f73b 	.word	0x0001f73b
   1ff68:	0001f73b 	.word	0x0001f73b
	if (conn->llcp_enc.pause_tx) {
   1ff6c:	07bb      	lsls	r3, r7, #30
   1ff6e:	f53f abec 	bmi.w	1f74a <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   1ff72:	f7fb ff61 	bl	1be38 <ll_pdu_rx_alloc>
	if (!rx) {
   1ff76:	4601      	mov	r1, r0
   1ff78:	2800      	cmp	r0, #0
   1ff7a:	f43f af73 	beq.w	1fe64 <ull_conn_llcp+0x740>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1ff7e:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1ff82:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1ff84:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1ff86:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1ff8a:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1ff8e:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1ff90:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   1ff94:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1ff96:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1ff98:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1ff9a:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   1ff9c:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   1ffa0:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1ffa2:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   1ffa6:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1ffa8:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   1ffac:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1ffae:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   1ffb2:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1ffb4:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   1ffb6:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1ffb8:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   1ffba:	e74e      	b.n	1fe5a <ull_conn_llcp+0x736>
	if (conn->llcp_conn_param.status) {
   1ffbc:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   1ffc0:	2b00      	cmp	r3, #0
   1ffc2:	f040 850c 	bne.w	209de <ull_conn_llcp+0x12ba>
	if (!conn->lll.role) {
   1ffc6:	2a00      	cmp	r2, #0
   1ffc8:	f2c0 8560 	blt.w	20a8c <ull_conn_llcp+0x1368>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1ffcc:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   1ffd0:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1ffd4:	2105      	movs	r1, #5
   1ffd6:	f361 0202 	bfi	r2, r1, #0, #3
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   1ffda:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1ffde:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   1ffe2:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   1ffe4:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   1ffe8:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   1ffec:	2900      	cmp	r1, #0
   1ffee:	f000 8604 	beq.w	20bfa <ull_conn_llcp+0x14d6>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   1fff2:	fbb2 f3f1 	udiv	r3, r2, r1
   1fff6:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   1fffa:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   1fffe:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   20000:	4299      	cmp	r1, r3
   20002:	bf98      	it	ls
   20004:	461a      	movls	r2, r3
   20006:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   2000a:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   2000e:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   20012:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   20016:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   2001a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   2001e:	00db      	lsls	r3, r3, #3
   20020:	f022 020f 	bic.w	r2, r2, #15
   20024:	f043 0302 	orr.w	r3, r3, #2
   20028:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   2002a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   2002e:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   20032:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   20036:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   2003a:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   2003e:	f7ff bb87 	b.w	1f750 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   20042:	487d      	ldr	r0, [pc, #500]	; (20238 <ull_conn_llcp+0xb14>)
			event_counter = lll->event_counter +
   20044:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   20046:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2004a:	f7f8 f8e3 	bl	18214 <mem_acquire>
	if (!tx) {
   2004e:	4602      	mov	r2, r0
   20050:	2800      	cmp	r0, #0
   20052:	f43f af07 	beq.w	1fe64 <ull_conn_llcp+0x740>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20056:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   20058:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   2005c:	f043 0303 	orr.w	r3, r3, #3
   20060:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   20062:	2318      	movs	r3, #24
   20064:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   20066:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   2006a:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   2006c:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   20070:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   20072:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   20074:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   20078:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   2007a:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   2007e:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   20082:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   20084:	74d3      	strb	r3, [r2, #19]
   20086:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   20088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   2008c:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   2008e:	7553      	strb	r3, [r2, #21]
   20090:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   20092:	75d3      	strb	r3, [r2, #23]
   20094:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   20096:	7653      	strb	r3, [r2, #25]
   20098:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   2009a:	76d3      	strb	r3, [r2, #27]
   2009c:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   2009e:	7753      	strb	r3, [r2, #29]
   200a0:	7793      	strb	r3, [r2, #30]
					lll->latency_prepare + lazy;
   200a2:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   200a4:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   200a8:	200f      	movs	r0, #15
   200aa:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   200ac:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   200b0:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   200b4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   200b8:	2104      	movs	r1, #4
   200ba:	f361 0302 	bfi	r3, r1, #0, #3
   200be:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   200c2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   200c6:	2b00      	cmp	r3, #0
   200c8:	f000 83db 	beq.w	20882 <ull_conn_llcp+0x115e>
	    !conn->llcp_enc.pause_tx &&
   200cc:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   200d0:	0788      	lsls	r0, r1, #30
   200d2:	f100 83d6 	bmi.w	20882 <ull_conn_llcp+0x115e>
	    !conn->llcp_phy.pause_tx &&
   200d6:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   200da:	07c9      	lsls	r1, r1, #31
   200dc:	f100 83d1 	bmi.w	20882 <ull_conn_llcp+0x115e>
		if (conn->tx_head == conn->tx_data) {
   200e0:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   200e4:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   200e6:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   200ea:	f000 8610 	beq.w	20d0e <ull_conn_llcp+0x15ea>
		} else if (!conn->tx_ctrl) {
   200ee:	2900      	cmp	r1, #0
   200f0:	f000 8622 	beq.w	20d38 <ull_conn_llcp+0x1614>
	tx->next = conn->tx_ctrl_last->next;
   200f4:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   200f8:	6819      	ldr	r1, [r3, #0]
   200fa:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   200fc:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   200fe:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20102:	6813      	ldr	r3, [r2, #0]
   20104:	2b00      	cmp	r3, #0
   20106:	f47f aead 	bne.w	1fe64 <ull_conn_llcp+0x740>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   2010a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   2010e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   20112:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   20116:	f7ff bb10 	b.w	1f73a <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   2011a:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   2011e:	2b00      	cmp	r3, #0
   20120:	f43f acc3 	beq.w	1faaa <ull_conn_llcp+0x386>
			conn->slave.llcp_type = LLCP_NONE;
   20124:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   20128:	e4c3      	b.n	1fab2 <ull_conn_llcp+0x38e>
		conn->tx_data_last = tx;
   2012a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   2012e:	e417      	b.n	1f960 <ull_conn_llcp+0x23c>
		if (!conn->tx_ctrl) {
   20130:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   20134:	2a00      	cmp	r2, #0
   20136:	f47f ad5f 	bne.w	1fbf8 <ull_conn_llcp+0x4d4>
			tx->next = conn->tx_head;
   2013a:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   2013e:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20142:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   20146:	e562      	b.n	1fc0e <ull_conn_llcp+0x4ea>
		if (!conn->tx_ctrl) {
   20148:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2014c:	2a00      	cmp	r2, #0
   2014e:	f47f ae32 	bne.w	1fdb6 <ull_conn_llcp+0x692>
			tx->next = conn->tx_head;
   20152:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   20154:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20158:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   2015c:	e633      	b.n	1fdc6 <ull_conn_llcp+0x6a2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   2015e:	4836      	ldr	r0, [pc, #216]	; (20238 <ull_conn_llcp+0xb14>)
   20160:	f7f8 f858 	bl	18214 <mem_acquire>
	if (tx) {
   20164:	4680      	mov	r8, r0
   20166:	2800      	cmp	r0, #0
   20168:	f43f ae7c 	beq.w	1fe64 <ull_conn_llcp+0x740>
		conn->llcp_feature.ack--;
   2016c:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   20170:	3b01      	subs	r3, #1
   20172:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   20176:	2309      	movs	r3, #9
   20178:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   2017a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   2017e:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   20180:	7903      	ldrb	r3, [r0, #4]
   20182:	f043 0303 	orr.w	r3, r3, #3
   20186:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   20188:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   2018c:	bfac      	ite	ge
   2018e:	2308      	movge	r3, #8
   20190:	230e      	movlt	r3, #14
   20192:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   20194:	4639      	mov	r1, r7
   20196:	4410      	add	r0, r2
   20198:	f008 fd68 	bl	28c6c <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   2019c:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   201a0:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   201a2:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   201a6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   201aa:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   201ae:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   201b0:	f888 300c 	strb.w	r3, [r8, #12]
   201b4:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   201b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   201bc:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   201c0:	0a09      	lsrs	r1, r1, #8
   201c2:	0a12      	lsrs	r2, r2, #8
   201c4:	f888 100b 	strb.w	r1, [r8, #11]
   201c8:	f888 300d 	strb.w	r3, [r8, #13]
   201cc:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   201d0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   201d4:	2b00      	cmp	r3, #0
   201d6:	f000 80ce 	beq.w	20376 <ull_conn_llcp+0xc52>
	    !conn->llcp_enc.pause_tx &&
   201da:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   201de:	0791      	lsls	r1, r2, #30
   201e0:	f100 80c9 	bmi.w	20376 <ull_conn_llcp+0xc52>
	    !conn->llcp_phy.pause_tx &&
   201e4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   201e8:	07d2      	lsls	r2, r2, #31
   201ea:	f100 80c4 	bmi.w	20376 <ull_conn_llcp+0xc52>
		if (conn->tx_head == conn->tx_data) {
   201ee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   201f2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   201f4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   201f8:	f000 8356 	beq.w	208a8 <ull_conn_llcp+0x1184>
		} else if (!conn->tx_ctrl) {
   201fc:	2a00      	cmp	r2, #0
   201fe:	f000 84bc 	beq.w	20b7a <ull_conn_llcp+0x1456>
	tx->next = conn->tx_ctrl_last->next;
   20202:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   20206:	681a      	ldr	r2, [r3, #0]
   20208:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   2020c:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   20210:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   20214:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20218:	2b00      	cmp	r3, #0
   2021a:	f000 8227 	beq.w	2066c <ull_conn_llcp+0xf48>
		conn->procedure_expire = conn->procedure_reload;
   2021e:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   20222:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   20226:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   2022a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   2022e:	f7ff ba84 	b.w	1f73a <ull_conn_llcp+0x16>
   20232:	bf00      	nop
   20234:	20001c88 	.word	0x20001c88
   20238:	20001d1c 	.word	0x20001d1c
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   2023c:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   20240:	463b      	mov	r3, r7
   20242:	4642      	mov	r2, r8
   20244:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   20248:	f204 1071 	addw	r0, r4, #369	; 0x171
   2024c:	f004 fba6 	bl	2499c <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   20250:	4639      	mov	r1, r7
   20252:	2210      	movs	r2, #16
   20254:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   20258:	f008 fcdd 	bl	28c16 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   2025c:	2208      	movs	r2, #8
   2025e:	f104 0194 	add.w	r1, r4, #148	; 0x94
   20262:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   20266:	f008 fcd6 	bl	28c16 <memcpy>
		lll->ccm_rx.direction = 0;
   2026a:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   2026e:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->ccm_rx.direction = 0;
   20272:	f368 0300 	bfi	r3, r8, #0, #1
   20276:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   2027a:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   2027e:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_tx.direction = 1;
   20282:	f043 0301 	orr.w	r3, r3, #1
   20286:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
		lll->enc_rx = 1;
   2028a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   2028e:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->enc_rx = 1;
   20292:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   20296:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   2029a:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   2029e:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   202a2:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   202a6:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   202aa:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->enc_rx = 1;
   202ae:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	if (!pdu_ctrl_tx) {
   202b2:	f1ba 0f00 	cmp.w	sl, #0
   202b6:	f000 81ee 	beq.w	20696 <ull_conn_llcp+0xf72>
	conn->lll.enc_tx = 1;
   202ba:	b2db      	uxtb	r3, r3
   202bc:	f043 0310 	orr.w	r3, r3, #16
   202c0:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   202c4:	f899 3004 	ldrb.w	r3, [r9, #4]
   202c8:	f043 0303 	orr.w	r3, r3, #3
   202cc:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   202d0:	2301      	movs	r3, #1
   202d2:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   202d6:	e9d4 1e71 	ldrd	r1, lr, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   202da:	2306      	movs	r3, #6
   202dc:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   202e0:	2900      	cmp	r1, #0
   202e2:	d054      	beq.n	2038e <ull_conn_llcp+0xc6a>
	    !conn->llcp_enc.pause_tx &&
   202e4:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   202e8:	079f      	lsls	r7, r3, #30
   202ea:	d450      	bmi.n	2038e <ull_conn_llcp+0xc6a>
	    !conn->llcp_phy.pause_tx &&
   202ec:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   202f0:	07d8      	lsls	r0, r3, #31
   202f2:	d44c      	bmi.n	2038e <ull_conn_llcp+0xc6a>
		if (conn->tx_head == conn->tx_data) {
   202f4:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   202f8:	428b      	cmp	r3, r1
   202fa:	f000 82e5 	beq.w	208c8 <ull_conn_llcp+0x11a4>
		} else if (!conn->tx_ctrl) {
   202fe:	f1be 0f00 	cmp.w	lr, #0
   20302:	f000 8458 	beq.w	20bb6 <ull_conn_llcp+0x1492>
	tx->next = conn->tx_ctrl_last->next;
   20306:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   2030a:	681a      	ldr	r2, [r3, #0]
   2030c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   20310:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   20314:	f8d9 1000 	ldr.w	r1, [r9]
	conn->tx_ctrl_last = tx;
   20318:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   2031c:	2900      	cmp	r1, #0
   2031e:	f47f ad04 	bne.w	1fd2a <ull_conn_llcp+0x606>
		conn->tx_data_last = tx;
   20322:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   20326:	e500      	b.n	1fd2a <ull_conn_llcp+0x606>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   20328:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   2032c:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   20330:	4299      	cmp	r1, r3
   20332:	d048      	beq.n	203c6 <ull_conn_llcp+0xca2>
			event_len_prep(conn);
   20334:	4620      	mov	r0, r4
   20336:	f7fc ffdf 	bl	1d2f8 <event_len_prep>
   2033a:	e593      	b.n	1fe64 <ull_conn_llcp+0x740>
		if (!conn->tx_ctrl) {
   2033c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   20340:	2a00      	cmp	r2, #0
   20342:	f47f ab60 	bne.w	1fa06 <ull_conn_llcp+0x2e2>
			tx->next = conn->tx_head;
   20346:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   2034a:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2034e:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   20352:	f7ff bb63 	b.w	1fa1c <ull_conn_llcp+0x2f8>
			conn->tx_data = conn->tx_data->next;
   20356:	6819      	ldr	r1, [r3, #0]
   20358:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   2035c:	2a00      	cmp	r2, #0
   2035e:	f47f aa94 	bne.w	1f88a <ull_conn_llcp+0x166>
			tx->next = conn->tx_head->next;
   20362:	681a      	ldr	r2, [r3, #0]
   20364:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   20366:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   20368:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   2036a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   2036e:	2b00      	cmp	r3, #0
   20370:	f47f aa96 	bne.w	1f8a0 <ull_conn_llcp+0x17c>
   20374:	e401      	b.n	1fb7a <ull_conn_llcp+0x456>
		if (!conn->tx_ctrl) {
   20376:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   2037a:	2a00      	cmp	r2, #0
   2037c:	f47f af41 	bne.w	20202 <ull_conn_llcp+0xade>
			tx->next = conn->tx_head;
   20380:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   20384:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20388:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   2038c:	e744      	b.n	20218 <ull_conn_llcp+0xaf4>
		if (!conn->tx_ctrl) {
   2038e:	f1be 0f00 	cmp.w	lr, #0
   20392:	f000 8156 	beq.w	20642 <ull_conn_llcp+0xf1e>
   20396:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   2039a:	6803      	ldr	r3, [r0, #0]
   2039c:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   203a0:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   203a4:	f8d9 1000 	ldr.w	r1, [r9]
	conn->tx_ctrl_last = tx;
   203a8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
}
   203ac:	e7b6      	b.n	2031c <ull_conn_llcp+0xbf8>
		if (!conn->tx_ctrl) {
   203ae:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   203b2:	2a00      	cmp	r2, #0
   203b4:	f47f acab 	bne.w	1fd0e <ull_conn_llcp+0x5ea>
			tx->next = conn->tx_head;
   203b8:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   203bc:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   203c0:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   203c4:	e4ac      	b.n	1fd20 <ull_conn_llcp+0x5fc>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   203c6:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   203ca:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   203ce:	428b      	cmp	r3, r1
   203d0:	f43f a9bb 	beq.w	1f74a <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   203d4:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   203d8:	f003 0703 	and.w	r7, r3, #3
   203dc:	2f03      	cmp	r7, #3
   203de:	f000 82a6 	beq.w	2092e <ull_conn_llcp+0x120a>
   203e2:	2f00      	cmp	r7, #0
   203e4:	f47f a9b0 	bne.w	1f748 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   203e8:	48c7      	ldr	r0, [pc, #796]	; (20708 <ull_conn_llcp+0xfe4>)
   203ea:	f7f7 ff13 	bl	18214 <mem_acquire>
		if (!tx) {
   203ee:	4601      	mov	r1, r0
   203f0:	2800      	cmp	r0, #0
   203f2:	f43f ad37 	beq.w	1fe64 <ull_conn_llcp+0x740>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   203f6:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   203fa:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   203fe:	2201      	movs	r2, #1
   20400:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   20404:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   20408:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   2040c:	f3c3 0782 	ubfx	r7, r3, #2, #3
   20410:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   20414:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   20418:	f3c0 0040 	ubfx	r0, r0, #1, #1
   2041c:	f360 07c3 	bfi	r7, r0, #3, #1
   20420:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   20424:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20428:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   2042a:	f367 02c5 	bfi	r2, r7, #3, #3
   2042e:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   20432:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   20436:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20438:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   2043c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   2043e:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20440:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   20442:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   20444:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   20446:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   20448:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   2044a:	4620      	mov	r0, r4
   2044c:	f7fc fc56 	bl	1ccfc <ctrl_tx_pause_enqueue>
   20450:	e6e5      	b.n	2021e <ull_conn_llcp+0xafa>
	if (!pdu_ctrl_tx) {
   20452:	f1ba 0f00 	cmp.w	sl, #0
   20456:	f000 81ab 	beq.w	207b0 <ull_conn_llcp+0x108c>
	conn->lll.enc_tx = 1;
   2045a:	f043 0310 	orr.w	r3, r3, #16
   2045e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   20462:	7903      	ldrb	r3, [r0, #4]
   20464:	f043 0303 	orr.w	r3, r3, #3
   20468:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   2046a:	2301      	movs	r3, #1
   2046c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   2046e:	2306      	movs	r3, #6
   20470:	71c3      	strb	r3, [r0, #7]
	if (tx) {
   20472:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
	if (
   20476:	2b00      	cmp	r3, #0
   20478:	d072      	beq.n	20560 <ull_conn_llcp+0xe3c>
	    !conn->llcp_enc.pause_tx &&
   2047a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   2047e:	0797      	lsls	r7, r2, #30
   20480:	d46e      	bmi.n	20560 <ull_conn_llcp+0xe3c>
	    !conn->llcp_phy.pause_tx &&
   20482:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   20486:	07d0      	lsls	r0, r2, #31
   20488:	d46a      	bmi.n	20560 <ull_conn_llcp+0xe3c>
		if (conn->tx_head == conn->tx_data) {
   2048a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   2048e:	429a      	cmp	r2, r3
   20490:	f000 823e 	beq.w	20910 <ull_conn_llcp+0x11ec>
		} else if (!conn->tx_ctrl) {
   20494:	f1bc 0f00 	cmp.w	ip, #0
   20498:	f47f ac39 	bne.w	1fd0e <ull_conn_llcp+0x5ea>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2049c:	791a      	ldrb	r2, [r3, #4]
   2049e:	f002 0203 	and.w	r2, r2, #3
   204a2:	2a03      	cmp	r2, #3
   204a4:	f000 8440 	beq.w	20d28 <ull_conn_llcp+0x1604>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   204a8:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   204ac:	e42f      	b.n	1fd0e <ull_conn_llcp+0x5ea>
		LL_ASSERT(0);
   204ae:	4a97      	ldr	r2, [pc, #604]	; (2070c <ull_conn_llcp+0xfe8>)
   204b0:	4997      	ldr	r1, [pc, #604]	; (20710 <ull_conn_llcp+0xfec>)
   204b2:	f640 43d2 	movw	r3, #3282	; 0xcd2
		LL_ASSERT(0);
   204b6:	4897      	ldr	r0, [pc, #604]	; (20714 <ull_conn_llcp+0xff0>)
   204b8:	f007 fb43 	bl	27b42 <printk>
   204bc:	4040      	eors	r0, r0
   204be:	f380 8811 	msr	BASEPRI, r0
   204c2:	f04f 0003 	mov.w	r0, #3
   204c6:	df02      	svc	2
		break;
   204c8:	e4cc      	b.n	1fe64 <ull_conn_llcp+0x740>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   204ca:	488f      	ldr	r0, [pc, #572]	; (20708 <ull_conn_llcp+0xfe4>)
   204cc:	f7f7 fea2 	bl	18214 <mem_acquire>
		if (tx) {
   204d0:	2800      	cmp	r0, #0
   204d2:	f43f acc7 	beq.w	1fe64 <ull_conn_llcp+0x740>
			conn->llcp_version.ack--;
   204d6:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   204da:	3b01      	subs	r3, #1
   204dc:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   204e0:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   204e4:	f043 0301 	orr.w	r3, r3, #1
   204e8:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   204ec:	7903      	ldrb	r3, [r0, #4]
   204ee:	f043 0303 	orr.w	r3, r3, #3
   204f2:	7103      	strb	r3, [r0, #4]
			pdu->len =
   204f4:	2306      	movs	r3, #6
   204f6:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   204f8:	230c      	movs	r3, #12
   204fa:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   204fc:	230b      	movs	r3, #11
   204fe:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   20500:	f06f 030e 	mvn.w	r3, #14
   20504:	7243      	strb	r3, [r0, #9]
   20506:	2305      	movs	r3, #5
   20508:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   2050a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2050e:	72c3      	strb	r3, [r0, #11]
   20510:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   20512:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   20516:	2b00      	cmp	r3, #0
   20518:	f000 80b2 	beq.w	20680 <ull_conn_llcp+0xf5c>
	    !conn->llcp_enc.pause_tx &&
   2051c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   20520:	0791      	lsls	r1, r2, #30
   20522:	f100 80ad 	bmi.w	20680 <ull_conn_llcp+0xf5c>
	    !conn->llcp_phy.pause_tx &&
   20526:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   2052a:	07d2      	lsls	r2, r2, #31
   2052c:	f100 80a8 	bmi.w	20680 <ull_conn_llcp+0xf5c>
		if (conn->tx_head == conn->tx_data) {
   20530:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   20534:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   20536:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   2053a:	f000 8312 	beq.w	20b62 <ull_conn_llcp+0x143e>
		} else if (!conn->tx_ctrl) {
   2053e:	2a00      	cmp	r2, #0
   20540:	f000 83c1 	beq.w	20cc6 <ull_conn_llcp+0x15a2>
	tx->next = conn->tx_ctrl_last->next;
   20544:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   20548:	681a      	ldr	r2, [r3, #0]
   2054a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   2054c:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   2054e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20552:	6803      	ldr	r3, [r0, #0]
   20554:	2b00      	cmp	r3, #0
   20556:	f47f ae62 	bne.w	2021e <ull_conn_llcp+0xafa>
		conn->tx_data_last = tx;
   2055a:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   2055e:	e65e      	b.n	2021e <ull_conn_llcp+0xafa>
		if (!conn->tx_ctrl) {
   20560:	f1bc 0f00 	cmp.w	ip, #0
   20564:	f47f abd3 	bne.w	1fd0e <ull_conn_llcp+0x5ea>
   20568:	e726      	b.n	203b8 <ull_conn_llcp+0xc94>
		conn->tx_data_last = tx;
   2056a:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   2056e:	f7ff ba58 	b.w	1fa22 <ull_conn_llcp+0x2fe>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   20572:	7903      	ldrb	r3, [r0, #4]
   20574:	f043 0303 	orr.w	r3, r3, #3
   20578:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   2057a:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   2057e:	07da      	lsls	r2, r3, #31
   20580:	d577      	bpl.n	20672 <ull_conn_llcp+0xf4e>
	    (conn->llcp_feature.features_conn &
   20582:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   20586:	075b      	lsls	r3, r3, #29
   20588:	d573      	bpl.n	20672 <ull_conn_llcp+0xf4e>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   2058a:	2311      	movs	r3, #17
   2058c:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   2058e:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   20590:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   20594:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   20596:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   2059a:	2300      	movs	r3, #0
   2059c:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   205a0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   205a4:	2b00      	cmp	r3, #0
   205a6:	d041      	beq.n	2062c <ull_conn_llcp+0xf08>
	    !conn->llcp_enc.pause_tx &&
   205a8:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   205ac:	0790      	lsls	r0, r2, #30
   205ae:	d43d      	bmi.n	2062c <ull_conn_llcp+0xf08>
	    !conn->llcp_phy.pause_tx &&
   205b0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   205b4:	07d1      	lsls	r1, r2, #31
   205b6:	d439      	bmi.n	2062c <ull_conn_llcp+0xf08>
		if (conn->tx_head == conn->tx_data) {
   205b8:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   205bc:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   205be:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   205c2:	f000 8321 	beq.w	20c08 <ull_conn_llcp+0x14e4>
		} else if (!conn->tx_ctrl) {
   205c6:	2a00      	cmp	r2, #0
   205c8:	f000 8334 	beq.w	20c34 <ull_conn_llcp+0x1510>
	tx->next = conn->tx_ctrl_last->next;
   205cc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   205d0:	681a      	ldr	r2, [r3, #0]
   205d2:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   205d6:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   205da:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   205de:	f8d9 3000 	ldr.w	r3, [r9]
   205e2:	2b00      	cmp	r3, #0
   205e4:	f000 80c6 	beq.w	20774 <ull_conn_llcp+0x1050>
			conn->llcp_ack = conn->llcp_req;
   205e8:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   205ec:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   205f0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   205f4:	2900      	cmp	r1, #0
   205f6:	f43f a8ab 	beq.w	1f750 <ull_conn_llcp+0x2c>
   205fa:	f7ff b8fc 	b.w	1f7f6 <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   205fe:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   20602:	f003 0307 	and.w	r3, r3, #7
   20606:	2b05      	cmp	r3, #5
   20608:	f200 83a8 	bhi.w	20d5c <ull_conn_llcp+0x1638>
   2060c:	a101      	add	r1, pc, #4	; (adr r1, 20614 <ull_conn_llcp+0xef0>)
   2060e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   20612:	bf00      	nop
   20614:	00020043 	.word	0x00020043
   20618:	0001ffbd 	.word	0x0001ffbd
   2061c:	0001ff6d 	.word	0x0001ff6d
   20620:	0001f74b 	.word	0x0001f74b
   20624:	0001f74b 	.word	0x0001f74b
   20628:	0001f74b 	.word	0x0001f74b
		if (!conn->tx_ctrl) {
   2062c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   20630:	2a00      	cmp	r2, #0
   20632:	d1cb      	bne.n	205cc <ull_conn_llcp+0xea8>
			tx->next = conn->tx_head;
   20634:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   20638:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2063c:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   20640:	e7cd      	b.n	205de <ull_conn_llcp+0xeba>
			tx->next = conn->tx_head;
   20642:	f8c9 1000 	str.w	r1, [r9]
				conn->tx_ctrl = tx;
   20646:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2064a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   2064e:	e665      	b.n	2031c <ull_conn_llcp+0xbf8>
			conn->tx_data = conn->tx_data->next;
   20650:	6819      	ldr	r1, [r3, #0]
   20652:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20656:	2a00      	cmp	r2, #0
   20658:	f47f a977 	bne.w	1f94a <ull_conn_llcp+0x226>
			tx->next = conn->tx_head->next;
   2065c:	681a      	ldr	r2, [r3, #0]
   2065e:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   20660:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   20662:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   20664:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   20668:	f7ff b977 	b.w	1f95a <ull_conn_llcp+0x236>
		conn->tx_data_last = tx;
   2066c:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   20670:	e5d5      	b.n	2021e <ull_conn_llcp+0xafa>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   20672:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   20674:	f889 8008 	strb.w	r8, [r9, #8]
   20678:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   2067a:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   2067e:	e78a      	b.n	20596 <ull_conn_llcp+0xe72>
		if (!conn->tx_ctrl) {
   20680:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   20684:	2a00      	cmp	r2, #0
   20686:	f47f af5d 	bne.w	20544 <ull_conn_llcp+0xe20>
			tx->next = conn->tx_head;
   2068a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   2068c:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20690:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   20694:	e75d      	b.n	20552 <ull_conn_llcp+0xe2e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   20696:	481c      	ldr	r0, [pc, #112]	; (20708 <ull_conn_llcp+0xfe4>)
   20698:	f7f7 fdbc 	bl	18214 <mem_acquire>
		if (!tx) {
   2069c:	4602      	mov	r2, r0
   2069e:	2800      	cmp	r0, #0
   206a0:	f000 830d 	beq.w	20cbe <ull_conn_llcp+0x159a>
	conn->lll.enc_tx = 1;
   206a4:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   206a8:	f043 0310 	orr.w	r3, r3, #16
   206ac:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   206b0:	2301      	movs	r3, #1
   206b2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   206b4:	7903      	ldrb	r3, [r0, #4]
   206b6:	f043 0303 	orr.w	r3, r3, #3
   206ba:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   206bc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   206c0:	2106      	movs	r1, #6
   206c2:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   206c4:	4619      	mov	r1, r3
	if (
   206c6:	b33b      	cbz	r3, 20718 <ull_conn_llcp+0xff4>
	    !conn->llcp_enc.pause_tx &&
   206c8:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   206cc:	0787      	lsls	r7, r0, #30
   206ce:	d423      	bmi.n	20718 <ull_conn_llcp+0xff4>
	    !conn->llcp_phy.pause_tx &&
   206d0:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   206d4:	07c0      	lsls	r0, r0, #31
   206d6:	d41f      	bmi.n	20718 <ull_conn_llcp+0xff4>
		if (conn->tx_head == conn->tx_data) {
   206d8:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   206dc:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   206e0:	428b      	cmp	r3, r1
   206e2:	f000 816e 	beq.w	209c2 <ull_conn_llcp+0x129e>
		} else if (!conn->tx_ctrl) {
   206e6:	f1bc 0f00 	cmp.w	ip, #0
   206ea:	f000 826d 	beq.w	20bc8 <ull_conn_llcp+0x14a4>
	tx->next = conn->tx_ctrl_last->next;
   206ee:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   206f2:	6801      	ldr	r1, [r0, #0]
   206f4:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   206f6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   206f8:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   206fc:	6811      	ldr	r1, [r2, #0]
   206fe:	b321      	cbz	r1, 2074a <ull_conn_llcp+0x1026>
	    conn->tx_head &&
   20700:	4619      	mov	r1, r3
		if (!conn->tx_ctrl) {
   20702:	46e6      	mov	lr, ip
   20704:	e5ee      	b.n	202e4 <ull_conn_llcp+0xbc0>
   20706:	bf00      	nop
   20708:	20001d1c 	.word	0x20001d1c
   2070c:	0002be34 	.word	0x0002be34
   20710:	0002b974 	.word	0x0002b974
   20714:	0002b8dc 	.word	0x0002b8dc
		if (!conn->tx_ctrl) {
   20718:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   2071c:	46e6      	mov	lr, ip
   2071e:	f1bc 0f00 	cmp.w	ip, #0
   20722:	d017      	beq.n	20754 <ull_conn_llcp+0x1030>
	tx->next = conn->tx_ctrl_last->next;
   20724:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   20728:	6807      	ldr	r7, [r0, #0]
   2072a:	6017      	str	r7, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   2072c:	6002      	str	r2, [r0, #0]
	if (!tx->next) {
   2072e:	6817      	ldr	r7, [r2, #0]
	conn->tx_ctrl_last = tx;
   20730:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   20734:	4610      	mov	r0, r2
	if (!tx->next) {
   20736:	b147      	cbz	r7, 2074a <ull_conn_llcp+0x1026>
	if (
   20738:	2b00      	cmp	r3, #0
   2073a:	f43f ae2e 	beq.w	2039a <ull_conn_llcp+0xc76>
	    !conn->llcp_enc.pause_tx &&
   2073e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   20742:	079b      	lsls	r3, r3, #30
   20744:	f57f add2 	bpl.w	202ec <ull_conn_llcp+0xbc8>
   20748:	e627      	b.n	2039a <ull_conn_llcp+0xc76>
		conn->tx_data_last = tx;
   2074a:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	    conn->tx_head &&
   2074e:	4619      	mov	r1, r3
		if (!conn->tx_ctrl) {
   20750:	46e6      	mov	lr, ip
   20752:	e5c5      	b.n	202e0 <ull_conn_llcp+0xbbc>
			tx->next = conn->tx_head;
   20754:	6013      	str	r3, [r2, #0]
			conn->tx_head = tx;
   20756:	4694      	mov	ip, r2
				conn->tx_ctrl = tx;
   20758:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   2075c:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   20760:	4613      	mov	r3, r2
   20762:	e7cb      	b.n	206fc <ull_conn_llcp+0xfd8>
	    ((pdu_data_tx->llctrl.opcode !=
   20764:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20766:	2a03      	cmp	r2, #3
   20768:	f43f adfb 	beq.w	20362 <ull_conn_llcp+0xc3e>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   2076c:	2a0a      	cmp	r2, #10
   2076e:	f47f a884 	bne.w	1f87a <ull_conn_llcp+0x156>
   20772:	e5f6      	b.n	20362 <ull_conn_llcp+0xc3e>
		conn->tx_data_last = tx;
   20774:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   20778:	e736      	b.n	205e8 <ull_conn_llcp+0xec4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   2077a:	791a      	ldrb	r2, [r3, #4]
   2077c:	f002 0203 	and.w	r2, r2, #3
   20780:	2a03      	cmp	r2, #3
   20782:	f000 8116 	beq.w	209b2 <ull_conn_llcp+0x128e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20786:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   2078a:	f7ff b8de 	b.w	1f94a <ull_conn_llcp+0x226>
			conn->tx_data = conn->tx_data->next;
   2078e:	6819      	ldr	r1, [r3, #0]
   20790:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20794:	2a00      	cmp	r2, #0
   20796:	f47f aa2f 	bne.w	1fbf8 <ull_conn_llcp+0x4d4>
			tx->next = conn->tx_head->next;
   2079a:	681a      	ldr	r2, [r3, #0]
   2079c:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   207a0:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   207a4:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   207a8:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   207ac:	f7ff ba2f 	b.w	1fc0e <ull_conn_llcp+0x4ea>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   207b0:	48b5      	ldr	r0, [pc, #724]	; (20a88 <ull_conn_llcp+0x1364>)
   207b2:	f7f7 fd2f 	bl	18214 <mem_acquire>
		if (!tx) {
   207b6:	4601      	mov	r1, r0
   207b8:	2800      	cmp	r0, #0
   207ba:	f000 82a4 	beq.w	20d06 <ull_conn_llcp+0x15e2>
	conn->lll.enc_tx = 1;
   207be:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   207c2:	f043 0310 	orr.w	r3, r3, #16
   207c6:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   207ca:	2301      	movs	r3, #1
   207cc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   207ce:	7903      	ldrb	r3, [r0, #4]
   207d0:	f043 0303 	orr.w	r3, r3, #3
   207d4:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   207d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   207da:	2206      	movs	r2, #6
   207dc:	71c2      	strb	r2, [r0, #7]
	if (
   207de:	b303      	cbz	r3, 20822 <ull_conn_llcp+0x10fe>
	    !conn->llcp_enc.pause_tx &&
   207e0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   207e4:	0790      	lsls	r0, r2, #30
   207e6:	d41c      	bmi.n	20822 <ull_conn_llcp+0x10fe>
	    !conn->llcp_phy.pause_tx &&
   207e8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   207ec:	07d2      	lsls	r2, r2, #31
   207ee:	d418      	bmi.n	20822 <ull_conn_llcp+0x10fe>
		if (conn->tx_head == conn->tx_data) {
   207f0:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   207f4:	4293      	cmp	r3, r2
   207f6:	f000 81f0 	beq.w	20bda <ull_conn_llcp+0x14b6>
		} else if (!conn->tx_ctrl) {
   207fa:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   207fe:	f1bc 0f00 	cmp.w	ip, #0
   20802:	f000 8230 	beq.w	20c66 <ull_conn_llcp+0x1542>
	tx->next = conn->tx_ctrl_last->next;
   20806:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   2080a:	6802      	ldr	r2, [r0, #0]
   2080c:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   2080e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   20810:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20814:	680a      	ldr	r2, [r1, #0]
   20816:	2a00      	cmp	r2, #0
   20818:	f47f ae2f 	bne.w	2047a <ull_conn_llcp+0xd56>
		conn->tx_data_last = tx;
   2081c:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
   20820:	e629      	b.n	20476 <ull_conn_llcp+0xd52>
		if (!conn->tx_ctrl) {
   20822:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   20826:	f1bc 0f00 	cmp.w	ip, #0
   2082a:	d035      	beq.n	20898 <ull_conn_llcp+0x1174>
	tx->next = conn->tx_ctrl_last->next;
   2082c:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   20830:	6802      	ldr	r2, [r0, #0]
   20832:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   20834:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   20836:	680a      	ldr	r2, [r1, #0]
	conn->tx_ctrl_last = tx;
   20838:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   2083c:	2a00      	cmp	r2, #0
   2083e:	f47f ae1a 	bne.w	20476 <ull_conn_llcp+0xd52>
   20842:	e7eb      	b.n	2081c <ull_conn_llcp+0x10f8>
			conn->tx_data = conn->tx_data->next;
   20844:	6819      	ldr	r1, [r3, #0]
   20846:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   2084a:	2a00      	cmp	r2, #0
   2084c:	f47f aab3 	bne.w	1fdb6 <ull_conn_llcp+0x692>
			tx->next = conn->tx_head->next;
   20850:	681a      	ldr	r2, [r3, #0]
   20852:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   20854:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   20856:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   20858:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   2085c:	f7ff bab3 	b.w	1fdc6 <ull_conn_llcp+0x6a2>
			conn->tx_data = conn->tx_data->next;
   20860:	6819      	ldr	r1, [r3, #0]
   20862:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20866:	2a00      	cmp	r2, #0
   20868:	f47f a8cd 	bne.w	1fa06 <ull_conn_llcp+0x2e2>
			tx->next = conn->tx_head->next;
   2086c:	681a      	ldr	r2, [r3, #0]
   2086e:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   20872:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   20876:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   2087a:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   2087e:	f7ff b8cd 	b.w	1fa1c <ull_conn_llcp+0x2f8>
		if (!conn->tx_ctrl) {
   20882:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   20886:	2900      	cmp	r1, #0
   20888:	f47f ac34 	bne.w	200f4 <ull_conn_llcp+0x9d0>
			tx->next = conn->tx_head;
   2088c:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   2088e:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20892:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   20896:	e434      	b.n	20102 <ull_conn_llcp+0x9de>
			tx->next = conn->tx_head;
   20898:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   2089a:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   2089c:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   208a0:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   208a4:	460b      	mov	r3, r1
   208a6:	e7b5      	b.n	20814 <ull_conn_llcp+0x10f0>
			conn->tx_data = conn->tx_data->next;
   208a8:	6819      	ldr	r1, [r3, #0]
   208aa:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   208ae:	2a00      	cmp	r2, #0
   208b0:	f47f aca7 	bne.w	20202 <ull_conn_llcp+0xade>
			tx->next = conn->tx_head->next;
   208b4:	681a      	ldr	r2, [r3, #0]
   208b6:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   208ba:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   208be:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   208c2:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   208c6:	e4a7      	b.n	20218 <ull_conn_llcp+0xaf4>
			conn->tx_data = conn->tx_data->next;
   208c8:	680b      	ldr	r3, [r1, #0]
   208ca:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   208ce:	f1be 0f00 	cmp.w	lr, #0
   208d2:	f47f ad18 	bne.w	20306 <ull_conn_llcp+0xbe2>
			tx->next = conn->tx_head->next;
   208d6:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   208da:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   208de:	f8d9 1000 	ldr.w	r1, [r9]
				conn->tx_ctrl_last = tx;
   208e2:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   208e6:	e519      	b.n	2031c <ull_conn_llcp+0xbf8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   208e8:	791a      	ldrb	r2, [r3, #4]
   208ea:	f002 0203 	and.w	r2, r2, #3
   208ee:	2a03      	cmp	r2, #3
   208f0:	f000 8127 	beq.w	20b42 <ull_conn_llcp+0x141e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   208f4:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   208f8:	f7ff ba5d 	b.w	1fdb6 <ull_conn_llcp+0x692>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   208fc:	791a      	ldrb	r2, [r3, #4]
   208fe:	f002 0203 	and.w	r2, r2, #3
   20902:	2a03      	cmp	r2, #3
   20904:	f000 8125 	beq.w	20b52 <ull_conn_llcp+0x142e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20908:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   2090c:	f7ff b974 	b.w	1fbf8 <ull_conn_llcp+0x4d4>
			conn->tx_data = conn->tx_data->next;
   20910:	681a      	ldr	r2, [r3, #0]
   20912:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20916:	f1bc 0f00 	cmp.w	ip, #0
   2091a:	f47f a9f8 	bne.w	1fd0e <ull_conn_llcp+0x5ea>
			tx->next = conn->tx_head->next;
   2091e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   20922:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   20926:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   2092a:	f7ff b9f9 	b.w	1fd20 <ull_conn_llcp+0x5fc>
		if (conn->llcp_phy.tx & PHY_2M) {
   2092e:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   20930:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   20934:	f3c3 0282 	ubfx	r2, r3, #2, #3
   20938:	f140 8132 	bpl.w	20ba0 <ull_conn_llcp+0x147c>
			conn->llcp_phy.tx = PHY_2M;
   2093c:	2202      	movs	r2, #2
   2093e:	f362 0384 	bfi	r3, r2, #2, #3
   20942:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   20946:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   2094a:	065f      	lsls	r7, r3, #25
   2094c:	ea4f 1253 	mov.w	r2, r3, lsr #5
   20950:	f140 811d 	bpl.w	20b8e <ull_conn_llcp+0x146a>
			conn->llcp_phy.rx = PHY_2M;
   20954:	2202      	movs	r2, #2
   20956:	f362 1347 	bfi	r3, r2, #5, #3
   2095a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   2095e:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   20960:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   20964:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   20968:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   2096c:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   20970:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   20974:	f3c2 0182 	ubfx	r1, r2, #2, #3
   20978:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   2097c:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   20980:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   20984:	428f      	cmp	r7, r1
   20986:	bf08      	it	eq
   20988:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   2098a:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   2098c:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   20990:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   20994:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   20998:	bf08      	it	eq
   2099a:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   2099c:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   209a0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   209a4:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   209a6:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   209aa:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   209ae:	f7fe bee7 	b.w	1f780 <ull_conn_llcp+0x5c>
	    ((pdu_data_tx->llctrl.opcode !=
   209b2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   209b4:	2a03      	cmp	r2, #3
   209b6:	f43f ae51 	beq.w	2065c <ull_conn_llcp+0xf38>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   209ba:	2a0a      	cmp	r2, #10
   209bc:	f47f aee3 	bne.w	20786 <ull_conn_llcp+0x1062>
   209c0:	e64c      	b.n	2065c <ull_conn_llcp+0xf38>
			conn->tx_data = conn->tx_data->next;
   209c2:	6819      	ldr	r1, [r3, #0]
   209c4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   209c8:	f1bc 0f00 	cmp.w	ip, #0
   209cc:	f47f ae8f 	bne.w	206ee <ull_conn_llcp+0xfca>
			tx->next = conn->tx_head->next;
   209d0:	6819      	ldr	r1, [r3, #0]
   209d2:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   209d4:	4694      	mov	ip, r2
   209d6:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   209d8:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   209dc:	e68e      	b.n	206fc <ull_conn_llcp+0xfd8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   209de:	482a      	ldr	r0, [pc, #168]	; (20a88 <ull_conn_llcp+0x1364>)
   209e0:	f7f7 fc18 	bl	18214 <mem_acquire>
		if (!tx) {
   209e4:	2800      	cmp	r0, #0
   209e6:	f43f aa3d 	beq.w	1fe64 <ull_conn_llcp+0x740>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   209ea:	7902      	ldrb	r2, [r0, #4]
   209ec:	f042 0203 	orr.w	r2, r2, #3
   209f0:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   209f2:	2211      	movs	r2, #17
   209f4:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   209f6:	2203      	movs	r2, #3
   209f8:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   209fa:	220f      	movs	r2, #15
   209fc:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   209fe:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   20a02:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   20a04:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   20a08:	2a00      	cmp	r2, #0
   20a0a:	d07c      	beq.n	20b06 <ull_conn_llcp+0x13e2>
	    !conn->llcp_enc.pause_tx &&
   20a0c:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   20a10:	078f      	lsls	r7, r1, #30
   20a12:	d478      	bmi.n	20b06 <ull_conn_llcp+0x13e2>
	    !conn->llcp_phy.pause_tx &&
   20a14:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   20a18:	07c9      	lsls	r1, r1, #31
   20a1a:	d474      	bmi.n	20b06 <ull_conn_llcp+0x13e2>
		if (conn->tx_head == conn->tx_data) {
   20a1c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   20a20:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   20a22:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   20a26:	f000 813b 	beq.w	20ca0 <ull_conn_llcp+0x157c>
		} else if (!conn->tx_ctrl) {
   20a2a:	2900      	cmp	r1, #0
   20a2c:	f000 80fa 	beq.w	20c24 <ull_conn_llcp+0x1500>
	tx->next = conn->tx_ctrl_last->next;
   20a30:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   20a34:	6811      	ldr	r1, [r2, #0]
   20a36:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   20a38:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   20a3a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   20a3e:	6802      	ldr	r2, [r0, #0]
   20a40:	2a00      	cmp	r2, #0
   20a42:	f000 80de 	beq.w	20c02 <ull_conn_llcp+0x14de>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   20a46:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   20a4a:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   20a4e:	2300      	movs	r3, #0
   20a50:	f8c8 3000 	str.w	r3, [r8]
   20a54:	f7ff ba06 	b.w	1fe64 <ull_conn_llcp+0x740>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20a58:	791a      	ldrb	r2, [r3, #4]
   20a5a:	f002 0203 	and.w	r2, r2, #3
   20a5e:	2a03      	cmp	r2, #3
   20a60:	d068      	beq.n	20b34 <ull_conn_llcp+0x1410>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20a62:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20a66:	f7fe bfce 	b.w	1fa06 <ull_conn_llcp+0x2e2>
			conn->tx_data = conn->tx_data->next;
   20a6a:	6819      	ldr	r1, [r3, #0]
   20a6c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20a70:	2a00      	cmp	r2, #0
   20a72:	f47f a94c 	bne.w	1fd0e <ull_conn_llcp+0x5ea>
			tx->next = conn->tx_head->next;
   20a76:	681a      	ldr	r2, [r3, #0]
   20a78:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   20a7c:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   20a80:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   20a84:	f7ff b94c 	b.w	1fd20 <ull_conn_llcp+0x5fc>
   20a88:	20001d1c 	.word	0x20001d1c
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   20a8c:	48b2      	ldr	r0, [pc, #712]	; (20d58 <ull_conn_llcp+0x1634>)
   20a8e:	f7f7 fbc1 	bl	18214 <mem_acquire>
	if (!tx) {
   20a92:	2800      	cmp	r0, #0
   20a94:	f43f a9e6 	beq.w	1fe64 <ull_conn_llcp+0x740>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   20a98:	7902      	ldrb	r2, [r0, #4]
   20a9a:	f042 0203 	orr.w	r2, r2, #3
   20a9e:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   20aa0:	2218      	movs	r2, #24
   20aa2:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   20aa4:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   20aa8:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   20aaa:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   20aae:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   20ab0:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   20ab4:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   20ab6:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   20aba:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   20abc:	2210      	movs	r2, #16
   20abe:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
   20ac0:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   20ac4:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   20ac6:	f8b4 1192 	ldrh.w	r1, [r4, #402]	; 0x192
	    conn->tx_head &&
   20aca:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	rsp->reference_conn_event_count =
   20ace:	f8a0 1011 	strh.w	r1, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   20ad2:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
   20ad6:	f8a0 1013 	strh.w	r1, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   20ada:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   20ade:	f8a0 1015 	strh.w	r1, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   20ae2:	f8b4 1198 	ldrh.w	r1, [r4, #408]	; 0x198
   20ae6:	f8a0 1017 	strh.w	r1, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   20aea:	f8b4 119a 	ldrh.w	r1, [r4, #410]	; 0x19a
   20aee:	f8a0 1019 	strh.w	r1, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   20af2:	f8b4 119c 	ldrh.w	r1, [r4, #412]	; 0x19c
   20af6:	f8a0 101b 	strh.w	r1, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   20afa:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
   20afe:	f8a0 101d 	strh.w	r1, [r0, #29]
	if (
   20b02:	2a00      	cmp	r2, #0
   20b04:	d182      	bne.n	20a0c <ull_conn_llcp+0x12e8>
		if (!conn->tx_ctrl) {
   20b06:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   20b0a:	2900      	cmp	r1, #0
   20b0c:	d190      	bne.n	20a30 <ull_conn_llcp+0x130c>
			tx->next = conn->tx_head;
   20b0e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   20b10:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   20b14:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   20b18:	e791      	b.n	20a3e <ull_conn_llcp+0x131a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20b1a:	791a      	ldrb	r2, [r3, #4]
   20b1c:	f002 0203 	and.w	r2, r2, #3
   20b20:	2a03      	cmp	r2, #3
   20b22:	f47f acc1 	bne.w	204a8 <ull_conn_llcp+0xd84>
	    ((pdu_data_tx->llctrl.opcode !=
   20b26:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20b28:	2a03      	cmp	r2, #3
   20b2a:	d0a4      	beq.n	20a76 <ull_conn_llcp+0x1352>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20b2c:	2a0a      	cmp	r2, #10
   20b2e:	f47f acbb 	bne.w	204a8 <ull_conn_llcp+0xd84>
   20b32:	e7a0      	b.n	20a76 <ull_conn_llcp+0x1352>
	    ((pdu_data_tx->llctrl.opcode !=
   20b34:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20b36:	2a03      	cmp	r2, #3
   20b38:	f43f ae98 	beq.w	2086c <ull_conn_llcp+0x1148>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20b3c:	2a0a      	cmp	r2, #10
   20b3e:	d190      	bne.n	20a62 <ull_conn_llcp+0x133e>
   20b40:	e694      	b.n	2086c <ull_conn_llcp+0x1148>
	    ((pdu_data_tx->llctrl.opcode !=
   20b42:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20b44:	2a03      	cmp	r2, #3
   20b46:	f43f ae83 	beq.w	20850 <ull_conn_llcp+0x112c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20b4a:	2a0a      	cmp	r2, #10
   20b4c:	f47f aed2 	bne.w	208f4 <ull_conn_llcp+0x11d0>
   20b50:	e67e      	b.n	20850 <ull_conn_llcp+0x112c>
	    ((pdu_data_tx->llctrl.opcode !=
   20b52:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20b54:	2a03      	cmp	r2, #3
   20b56:	f43f ae20 	beq.w	2079a <ull_conn_llcp+0x1076>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20b5a:	2a0a      	cmp	r2, #10
   20b5c:	f47f aed4 	bne.w	20908 <ull_conn_llcp+0x11e4>
   20b60:	e61b      	b.n	2079a <ull_conn_llcp+0x1076>
			conn->tx_data = conn->tx_data->next;
   20b62:	6819      	ldr	r1, [r3, #0]
   20b64:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20b68:	2a00      	cmp	r2, #0
   20b6a:	f47f aceb 	bne.w	20544 <ull_conn_llcp+0xe20>
			tx->next = conn->tx_head->next;
   20b6e:	681a      	ldr	r2, [r3, #0]
   20b70:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   20b72:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   20b74:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   20b78:	e4eb      	b.n	20552 <ull_conn_llcp+0xe2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20b7a:	791a      	ldrb	r2, [r3, #4]
   20b7c:	f002 0203 	and.w	r2, r2, #3
   20b80:	2a03      	cmp	r2, #3
   20b82:	f000 80a8 	beq.w	20cd6 <ull_conn_llcp+0x15b2>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20b86:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20b8a:	f7ff bb3a 	b.w	20202 <ull_conn_llcp+0xade>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   20b8e:	07d1      	lsls	r1, r2, #31
   20b90:	f140 80a9 	bpl.w	20ce6 <ull_conn_llcp+0x15c2>
			conn->llcp_phy.rx = PHY_1M;
   20b94:	2201      	movs	r2, #1
   20b96:	f362 1347 	bfi	r3, r2, #5, #3
   20b9a:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   20b9e:	e6de      	b.n	2095e <ull_conn_llcp+0x123a>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   20ba0:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   20ba2:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   20ba6:	f140 8081 	bpl.w	20cac <ull_conn_llcp+0x1588>
			conn->llcp_phy.tx = PHY_1M;
   20baa:	2201      	movs	r2, #1
   20bac:	f362 0384 	bfi	r3, r2, #2, #3
   20bb0:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   20bb4:	e6c7      	b.n	20946 <ull_conn_llcp+0x1222>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20bb6:	790b      	ldrb	r3, [r1, #4]
   20bb8:	f003 0303 	and.w	r3, r3, #3
   20bbc:	2b03      	cmp	r3, #3
   20bbe:	d068      	beq.n	20c92 <ull_conn_llcp+0x156e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20bc0:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   20bc4:	f7ff bb9f 	b.w	20306 <ull_conn_llcp+0xbe2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20bc8:	7919      	ldrb	r1, [r3, #4]
   20bca:	f001 0103 	and.w	r1, r1, #3
   20bce:	2903      	cmp	r1, #3
   20bd0:	d052      	beq.n	20c78 <ull_conn_llcp+0x1554>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20bd2:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20bd6:	469c      	mov	ip, r3
   20bd8:	e589      	b.n	206ee <ull_conn_llcp+0xfca>
		if (!conn->tx_ctrl) {
   20bda:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
			conn->tx_data = conn->tx_data->next;
   20bde:	6812      	ldr	r2, [r2, #0]
   20be0:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20be4:	f1bc 0f00 	cmp.w	ip, #0
   20be8:	f47f ae0d 	bne.w	20806 <ull_conn_llcp+0x10e2>
			tx->next = conn->tx_head->next;
   20bec:	681a      	ldr	r2, [r3, #0]
   20bee:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   20bf0:	468c      	mov	ip, r1
   20bf2:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   20bf4:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   20bf8:	e60c      	b.n	20814 <ull_conn_llcp+0x10f0>
			conn->llcp_cu.interval = interval_max;
   20bfa:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   20bfe:	f7ff ba04 	b.w	2000a <ull_conn_llcp+0x8e6>
		conn->tx_data_last = tx;
   20c02:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   20c06:	e71e      	b.n	20a46 <ull_conn_llcp+0x1322>
			conn->tx_data = conn->tx_data->next;
   20c08:	6819      	ldr	r1, [r3, #0]
   20c0a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20c0e:	2a00      	cmp	r2, #0
   20c10:	f47f acdc 	bne.w	205cc <ull_conn_llcp+0xea8>
			tx->next = conn->tx_head->next;
   20c14:	681a      	ldr	r2, [r3, #0]
   20c16:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   20c1a:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   20c1e:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   20c22:	e4dc      	b.n	205de <ull_conn_llcp+0xeba>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c24:	7911      	ldrb	r1, [r2, #4]
   20c26:	f001 0103 	and.w	r1, r1, #3
   20c2a:	2903      	cmp	r1, #3
   20c2c:	d00a      	beq.n	20c44 <ull_conn_llcp+0x1520>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20c2e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   20c32:	e6fd      	b.n	20a30 <ull_conn_llcp+0x130c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c34:	791a      	ldrb	r2, [r3, #4]
   20c36:	f002 0203 	and.w	r2, r2, #3
   20c3a:	2a03      	cmp	r2, #3
   20c3c:	d00d      	beq.n	20c5a <ull_conn_llcp+0x1536>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20c3e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20c42:	e4c3      	b.n	205cc <ull_conn_llcp+0xea8>
	    ((pdu_data_tx->llctrl.opcode !=
   20c44:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c46:	2903      	cmp	r1, #3
   20c48:	d001      	beq.n	20c4e <ull_conn_llcp+0x152a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20c4a:	290a      	cmp	r1, #10
   20c4c:	d1ef      	bne.n	20c2e <ull_conn_llcp+0x150a>
			tx->next = conn->tx_head->next;
   20c4e:	6811      	ldr	r1, [r2, #0]
   20c50:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   20c52:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   20c54:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   20c58:	e6f1      	b.n	20a3e <ull_conn_llcp+0x131a>
	    ((pdu_data_tx->llctrl.opcode !=
   20c5a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c5c:	2a03      	cmp	r2, #3
   20c5e:	d0d9      	beq.n	20c14 <ull_conn_llcp+0x14f0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20c60:	2a0a      	cmp	r2, #10
   20c62:	d1ec      	bne.n	20c3e <ull_conn_llcp+0x151a>
   20c64:	e7d6      	b.n	20c14 <ull_conn_llcp+0x14f0>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c66:	791a      	ldrb	r2, [r3, #4]
   20c68:	f002 0203 	and.w	r2, r2, #3
   20c6c:	2a03      	cmp	r2, #3
   20c6e:	d00a      	beq.n	20c86 <ull_conn_llcp+0x1562>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20c70:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20c74:	469c      	mov	ip, r3
   20c76:	e5c6      	b.n	20806 <ull_conn_llcp+0x10e2>
	    ((pdu_data_tx->llctrl.opcode !=
   20c78:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c7a:	2903      	cmp	r1, #3
   20c7c:	f43f aea8 	beq.w	209d0 <ull_conn_llcp+0x12ac>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20c80:	290a      	cmp	r1, #10
   20c82:	d1a6      	bne.n	20bd2 <ull_conn_llcp+0x14ae>
   20c84:	e6a4      	b.n	209d0 <ull_conn_llcp+0x12ac>
	    ((pdu_data_tx->llctrl.opcode !=
   20c86:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c88:	2a03      	cmp	r2, #3
   20c8a:	d0af      	beq.n	20bec <ull_conn_llcp+0x14c8>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20c8c:	2a0a      	cmp	r2, #10
   20c8e:	d1ef      	bne.n	20c70 <ull_conn_llcp+0x154c>
   20c90:	e7ac      	b.n	20bec <ull_conn_llcp+0x14c8>
	    ((pdu_data_tx->llctrl.opcode !=
   20c92:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20c94:	2b03      	cmp	r3, #3
   20c96:	d001      	beq.n	20c9c <ull_conn_llcp+0x1578>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20c98:	2b0a      	cmp	r3, #10
   20c9a:	d191      	bne.n	20bc0 <ull_conn_llcp+0x149c>
   20c9c:	680b      	ldr	r3, [r1, #0]
   20c9e:	e61a      	b.n	208d6 <ull_conn_llcp+0x11b2>
			conn->tx_data = conn->tx_data->next;
   20ca0:	6813      	ldr	r3, [r2, #0]
   20ca2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20ca6:	2900      	cmp	r1, #0
   20ca8:	d0d1      	beq.n	20c4e <ull_conn_llcp+0x152a>
   20caa:	e6c1      	b.n	20a30 <ull_conn_llcp+0x130c>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   20cac:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   20cb0:	bf18      	it	ne
   20cb2:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   20cb4:	f362 0384 	bfi	r3, r2, #2, #3
   20cb8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   20cbc:	e643      	b.n	20946 <ull_conn_llcp+0x1222>
		if (!conn->tx_ctrl) {
   20cbe:	e9d4 1e71 	ldrd	r1, lr, [r4, #452]	; 0x1c4
   20cc2:	f7ff bb0d 	b.w	202e0 <ull_conn_llcp+0xbbc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20cc6:	791a      	ldrb	r2, [r3, #4]
   20cc8:	f002 0203 	and.w	r2, r2, #3
   20ccc:	2a03      	cmp	r2, #3
   20cce:	d013      	beq.n	20cf8 <ull_conn_llcp+0x15d4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20cd0:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20cd4:	e436      	b.n	20544 <ull_conn_llcp+0xe20>
	    ((pdu_data_tx->llctrl.opcode !=
   20cd6:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20cd8:	2a03      	cmp	r2, #3
   20cda:	f43f adeb 	beq.w	208b4 <ull_conn_llcp+0x1190>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20cde:	2a0a      	cmp	r2, #10
   20ce0:	f47f af51 	bne.w	20b86 <ull_conn_llcp+0x1462>
   20ce4:	e5e6      	b.n	208b4 <ull_conn_llcp+0x1190>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   20ce6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   20cea:	bf18      	it	ne
   20cec:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   20cee:	f362 1347 	bfi	r3, r2, #5, #3
   20cf2:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   20cf6:	e632      	b.n	2095e <ull_conn_llcp+0x123a>
	    ((pdu_data_tx->llctrl.opcode !=
   20cf8:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20cfa:	2a03      	cmp	r2, #3
   20cfc:	f43f af37 	beq.w	20b6e <ull_conn_llcp+0x144a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20d00:	2a0a      	cmp	r2, #10
   20d02:	d1e5      	bne.n	20cd0 <ull_conn_llcp+0x15ac>
   20d04:	e733      	b.n	20b6e <ull_conn_llcp+0x144a>
   20d06:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
   20d0a:	f7ff bbb4 	b.w	20476 <ull_conn_llcp+0xd52>
			conn->tx_data = conn->tx_data->next;
   20d0e:	6818      	ldr	r0, [r3, #0]
   20d10:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   20d14:	2900      	cmp	r1, #0
   20d16:	f47f a9ed 	bne.w	200f4 <ull_conn_llcp+0x9d0>
			tx->next = conn->tx_head->next;
   20d1a:	6819      	ldr	r1, [r3, #0]
   20d1c:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   20d1e:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   20d20:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   20d24:	f7ff b9ed 	b.w	20102 <ull_conn_llcp+0x9de>
	    ((pdu_data_tx->llctrl.opcode !=
   20d28:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20d2a:	2a03      	cmp	r2, #3
   20d2c:	d002      	beq.n	20d34 <ull_conn_llcp+0x1610>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20d2e:	2a0a      	cmp	r2, #10
   20d30:	f47f abba 	bne.w	204a8 <ull_conn_llcp+0xd84>
   20d34:	681a      	ldr	r2, [r3, #0]
   20d36:	e5f2      	b.n	2091e <ull_conn_llcp+0x11fa>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20d38:	7919      	ldrb	r1, [r3, #4]
   20d3a:	f001 0103 	and.w	r1, r1, #3
   20d3e:	2903      	cmp	r1, #3
   20d40:	d003      	beq.n	20d4a <ull_conn_llcp+0x1626>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   20d42:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   20d46:	f7ff b9d5 	b.w	200f4 <ull_conn_llcp+0x9d0>
	    ((pdu_data_tx->llctrl.opcode !=
   20d4a:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   20d4c:	2903      	cmp	r1, #3
   20d4e:	d0e4      	beq.n	20d1a <ull_conn_llcp+0x15f6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   20d50:	290a      	cmp	r1, #10
   20d52:	d1f6      	bne.n	20d42 <ull_conn_llcp+0x161e>
   20d54:	e7e1      	b.n	20d1a <ull_conn_llcp+0x15f6>
   20d56:	bf00      	nop
   20d58:	20001d1c 	.word	0x20001d1c
		LL_ASSERT(0);
   20d5c:	4a02      	ldr	r2, [pc, #8]	; (20d68 <ull_conn_llcp+0x1644>)
   20d5e:	4903      	ldr	r1, [pc, #12]	; (20d6c <ull_conn_llcp+0x1648>)
   20d60:	f640 6305 	movw	r3, #3589	; 0xe05
   20d64:	f7ff bba7 	b.w	204b6 <ull_conn_llcp+0xd92>
   20d68:	0002be34 	.word	0x0002be34
   20d6c:	0002b974 	.word	0x0002b974

00020d70 <ull_conn_tx_demux>:
{
   20d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   20d74:	4f24      	ldr	r7, [pc, #144]	; (20e08 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   20d76:	4e25      	ldr	r6, [pc, #148]	; (20e0c <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   20d78:	78fa      	ldrb	r2, [r7, #3]
{
   20d7a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   20d7c:	1d3d      	adds	r5, r7, #4
   20d7e:	e021      	b.n	20dc4 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   20d80:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   20d84:	4630      	mov	r0, r6
   20d86:	f7f7 fa77 	bl	18278 <mem_get>
	if (conn->lll.handle != handle) {
   20d8a:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   20d8c:	bb32      	cbnz	r2, 20ddc <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   20d8e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   20d92:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   20d96:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   20d98:	b359      	cbz	r1, 20df2 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   20d9a:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   20d9e:	b102      	cbz	r2, 20da2 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   20da0:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   20da2:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   20da6:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   20da8:	78bb      	ldrb	r3, [r7, #2]
   20daa:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   20dac:	429a      	cmp	r2, r3
   20dae:	d005      	beq.n	20dbc <ull_conn_tx_demux+0x4c>
	_first += 1U;
   20db0:	3301      	adds	r3, #1
   20db2:	b2db      	uxtb	r3, r3
		_first = 0U;
   20db4:	4299      	cmp	r1, r3
   20db6:	bf08      	it	eq
   20db8:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   20dba:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   20dbc:	3c01      	subs	r4, #1
   20dbe:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   20dc2:	d01f      	beq.n	20e04 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   20dc4:	78bb      	ldrb	r3, [r7, #2]
   20dc6:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   20dc8:	4293      	cmp	r3, r2
   20dca:	d01b      	beq.n	20e04 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   20dcc:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   20dd0:	eb15 0803 	adds.w	r8, r5, r3
   20dd4:	d016      	beq.n	20e04 <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   20dd6:	5aea      	ldrh	r2, [r5, r3]
   20dd8:	2a00      	cmp	r2, #0
   20dda:	d0d1      	beq.n	20d80 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   20ddc:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   20de0:	790b      	ldrb	r3, [r1, #4]
   20de2:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   20de6:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   20dea:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   20dec:	f7fb f83a 	bl	1be64 <ll_tx_ack_put>
   20df0:	e7d9      	b.n	20da6 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   20df2:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   20df6:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   20dfa:	2a00      	cmp	r2, #0
   20dfc:	d1cd      	bne.n	20d9a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   20dfe:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   20e02:	e7ce      	b.n	20da2 <ull_conn_tx_demux+0x32>
}
   20e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20e08:	20000450 	.word	0x20000450
   20e0c:	20000dc8 	.word	0x20000dc8

00020e10 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   20e10:	4b39      	ldr	r3, [pc, #228]	; (20ef8 <conn_cleanup+0xe8>)
{
   20e12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (conn == conn_upd_curr) {
   20e16:	681a      	ldr	r2, [r3, #0]
	rx = conn->llcp_rx;
   20e18:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	*((uint8_t *)rx->pdu) = reason;
   20e1c:	f880 1160 	strb.w	r1, [r0, #352]	; 0x160
	if (conn == conn_upd_curr) {
   20e20:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   20e22:	bf04      	itt	eq
   20e24:	2200      	moveq	r2, #0
   20e26:	601a      	streq	r2, [r3, #0]
	rx->hdr.handle = conn->lll.handle;
   20e28:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   20e2a:	f8a0 214a 	strh.w	r2, [r0, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   20e2e:	2315      	movs	r3, #21
{
   20e30:	b082      	sub	sp, #8
   20e32:	4606      	mov	r6, r0
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   20e34:	f880 3148 	strb.w	r3, [r0, #328]	; 0x148
	while (rx) {
   20e38:	b144      	cbz	r4, 20e4c <conn_cleanup+0x3c>
		hdr->type = NODE_RX_TYPE_RELEASE;
   20e3a:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   20e3c:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   20e3e:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   20e40:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   20e42:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   20e44:	f7fa ffca 	bl	1bddc <ll_rx_put>
	while (rx) {
   20e48:	2c00      	cmp	r4, #0
   20e4a:	d1f7      	bne.n	20e3c <conn_cleanup+0x2c>
	while (conn->tx_head) {
   20e4c:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   20e50:	b381      	cbz	r1, 20eb4 <conn_cleanup+0xa4>
		link = mem_acquire(&mem_link_tx.free);
   20e52:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 20efc <conn_cleanup+0xec>
		LL_ASSERT(link);
   20e56:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 20f00 <conn_cleanup+0xf0>
   20e5a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 20f04 <conn_cleanup+0xf4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   20e5e:	f106 0768 	add.w	r7, r6, #104	; 0x68
   20e62:	e007      	b.n	20e74 <conn_cleanup+0x64>
   20e64:	4629      	mov	r1, r5
   20e66:	463a      	mov	r2, r7
   20e68:	4620      	mov	r0, r4
   20e6a:	f7f7 fa37 	bl	182dc <memq_enqueue>
	while (conn->tx_head) {
   20e6e:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   20e72:	b1f9      	cbz	r1, 20eb4 <conn_cleanup+0xa4>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   20e74:	4630      	mov	r0, r6
   20e76:	f7fc f997 	bl	1d1a8 <tx_ull_dequeue>
   20e7a:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   20e7c:	4640      	mov	r0, r8
   20e7e:	f7f7 f9c9 	bl	18214 <mem_acquire>
		LL_ASSERT(link);
   20e82:	4604      	mov	r4, r0
   20e84:	2800      	cmp	r0, #0
   20e86:	d1ed      	bne.n	20e64 <conn_cleanup+0x54>
   20e88:	481f      	ldr	r0, [pc, #124]	; (20f08 <conn_cleanup+0xf8>)
   20e8a:	f240 73d7 	movw	r3, #2007	; 0x7d7
   20e8e:	4652      	mov	r2, sl
   20e90:	4649      	mov	r1, r9
   20e92:	f006 fe56 	bl	27b42 <printk>
   20e96:	4040      	eors	r0, r0
   20e98:	f380 8811 	msr	BASEPRI, r0
   20e9c:	f04f 0003 	mov.w	r0, #3
   20ea0:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   20ea2:	4629      	mov	r1, r5
   20ea4:	463a      	mov	r2, r7
   20ea6:	4620      	mov	r0, r4
   20ea8:	f7f7 fa18 	bl	182dc <memq_enqueue>
	while (conn->tx_head) {
   20eac:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   20eb0:	2900      	cmp	r1, #0
   20eb2:	d1df      	bne.n	20e74 <conn_cleanup+0x64>
				    TICKER_ID_CONN_BASE + lll->handle,
   20eb4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   20eb6:	4b15      	ldr	r3, [pc, #84]	; (20f0c <conn_cleanup+0xfc>)
   20eb8:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   20eba:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   20ebc:	b2d2      	uxtb	r2, r2
   20ebe:	2101      	movs	r1, #1
   20ec0:	2000      	movs	r0, #0
   20ec2:	f7f8 fc4b 	bl	1975c <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   20ec6:	f030 0302 	bics.w	r3, r0, #2
   20eca:	d00c      	beq.n	20ee6 <conn_cleanup+0xd6>
   20ecc:	4a0c      	ldr	r2, [pc, #48]	; (20f00 <conn_cleanup+0xf0>)
   20ece:	4910      	ldr	r1, [pc, #64]	; (20f10 <conn_cleanup+0x100>)
   20ed0:	480d      	ldr	r0, [pc, #52]	; (20f08 <conn_cleanup+0xf8>)
   20ed2:	f240 73c4 	movw	r3, #1988	; 0x7c4
   20ed6:	f006 fe34 	bl	27b42 <printk>
   20eda:	4040      	eors	r0, r0
   20edc:	f380 8811 	msr	BASEPRI, r0
   20ee0:	f04f 0003 	mov.w	r0, #3
   20ee4:	df02      	svc	2
	lll->handle = 0xFFFF;
   20ee6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   20eea:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   20eec:	8533      	strh	r3, [r6, #40]	; 0x28
}
   20eee:	b002      	add	sp, #8
   20ef0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   20ef4:	f7ff bf3c 	b.w	20d70 <ull_conn_tx_demux>
   20ef8:	20001c88 	.word	0x20001c88
   20efc:	20001dd0 	.word	0x20001dd0
   20f00:	0002be34 	.word	0x0002be34
   20f04:	0002be98 	.word	0x0002be98
   20f08:	0002b8dc 	.word	0x0002b8dc
   20f0c:	0001cde5 	.word	0x0001cde5
   20f10:	0002bf14 	.word	0x0002bf14

00020f14 <ull_conn_done>:
{
   20f14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   20f18:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   20f1a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   20f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   20f20:	429a      	cmp	r2, r3
{
   20f22:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == 0xFFFF)) {
   20f24:	d05b      	beq.n	20fde <ull_conn_done+0xca>
	switch (done->extra.mic_state) {
   20f26:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   20f2a:	2b01      	cmp	r3, #1
   20f2c:	4605      	mov	r5, r0
   20f2e:	f000 80e5 	beq.w	210fc <ull_conn_done+0x1e8>
   20f32:	2b02      	cmp	r3, #2
   20f34:	f000 80d8 	beq.w	210e8 <ull_conn_done+0x1d4>
   20f38:	2b00      	cmp	r3, #0
   20f3a:	f000 80bb 	beq.w	210b4 <ull_conn_done+0x1a0>
	reason_final = conn->llcp_terminate.reason_final;
   20f3e:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   20f42:	2e00      	cmp	r6, #0
   20f44:	f040 80d3 	bne.w	210ee <ull_conn_done+0x1da>
	latency_event = lll->latency_event;
   20f48:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   20f4c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	ticks_drift_plus = 0U;
   20f4e:	9609      	str	r6, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   20f50:	f108 0701 	add.w	r7, r8, #1
   20f54:	b2bf      	uxth	r7, r7
	ticks_drift_minus = 0U;
   20f56:	9608      	str	r6, [sp, #32]
	if (done->extra.trx_cnt) {
   20f58:	2b00      	cmp	r3, #0
   20f5a:	d043      	beq.n	20fe4 <ull_conn_done+0xd0>
		} else if (lll->role) {
   20f5c:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   20f60:	2b00      	cmp	r3, #0
   20f62:	f2c0 8113 	blt.w	2118c <ull_conn_done+0x278>
	if (done->extra.crc_valid) {
   20f66:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   20f6a:	2200      	movs	r2, #0
   20f6c:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   20f70:	2b00      	cmp	r3, #0
   20f72:	f000 80c9 	beq.w	21108 <ull_conn_done+0x1f4>
		conn->supervision_expire = 0U;
   20f76:	2300      	movs	r3, #0
   20f78:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   20f7c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   20f80:	b12b      	cbz	r3, 20f8e <ull_conn_done+0x7a>
		if (conn->procedure_expire > elapsed_event) {
   20f82:	42bb      	cmp	r3, r7
   20f84:	f240 8113 	bls.w	211ae <ull_conn_done+0x29a>
			conn->procedure_expire -= elapsed_event;
   20f88:	1bdb      	subs	r3, r3, r7
   20f8a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   20f8e:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   20f92:	b12b      	cbz	r3, 20fa0 <ull_conn_done+0x8c>
		if (conn->apto_expire > elapsed_event) {
   20f94:	42bb      	cmp	r3, r7
   20f96:	f240 80e6 	bls.w	21166 <ull_conn_done+0x252>
			conn->apto_expire -= elapsed_event;
   20f9a:	1bdb      	subs	r3, r3, r7
   20f9c:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   20fa0:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   20fa4:	2b00      	cmp	r3, #0
   20fa6:	d044      	beq.n	21032 <ull_conn_done+0x11e>
		if (conn->appto_expire > elapsed_event) {
   20fa8:	42bb      	cmp	r3, r7
   20faa:	f200 80bc 	bhi.w	21126 <ull_conn_done+0x212>
			if ((conn->procedure_expire == 0U) &&
   20fae:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   20fb2:	2200      	movs	r2, #0
   20fb4:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   20fb8:	2b00      	cmp	r3, #0
   20fba:	d13a      	bne.n	21032 <ull_conn_done+0x11e>
			    (conn->llcp_req == conn->llcp_ack)) {
   20fbc:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   20fc0:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			if ((conn->procedure_expire == 0U) &&
   20fc4:	4293      	cmp	r3, r2
   20fc6:	d138      	bne.n	2103a <ull_conn_done+0x126>
				conn->llcp_type = LLCP_PING;
   20fc8:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   20fca:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   20fcc:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   20fd0:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   20fd4:	e036      	b.n	21044 <ull_conn_done+0x130>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   20fd6:	2108      	movs	r1, #8
   20fd8:	4620      	mov	r0, r4
   20fda:	f7ff ff19 	bl	20e10 <conn_cleanup>
}
   20fde:	b00a      	add	sp, #40	; 0x28
   20fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   20fe4:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
   20fe8:	2b00      	cmp	r3, #0
   20fea:	d1c4      	bne.n	20f76 <ull_conn_done+0x62>
	else if (conn->connect_expire) {
   20fec:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   20ff0:	2b00      	cmp	r3, #0
   20ff2:	f000 8089 	beq.w	21108 <ull_conn_done+0x1f4>
		if (conn->connect_expire > elapsed_event) {
   20ff6:	42bb      	cmp	r3, r7
   20ff8:	f240 80f0 	bls.w	211dc <ull_conn_done+0x2c8>
			conn->connect_expire -= elapsed_event;
   20ffc:	1bdb      	subs	r3, r3, r7
   20ffe:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   21002:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   21006:	2b00      	cmp	r3, #0
   21008:	d0b8      	beq.n	20f7c <ull_conn_done+0x68>
		if (conn->supervision_expire > elapsed_event) {
   2100a:	429f      	cmp	r7, r3
   2100c:	d2e3      	bcs.n	20fd6 <ull_conn_done+0xc2>
			conn->supervision_expire -= elapsed_event;
   2100e:	1bdb      	subs	r3, r3, r7
   21010:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   21012:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   21014:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   21016:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   2101a:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   2101c:	d907      	bls.n	2102e <ull_conn_done+0x11a>
			else if (lll->role) {
   2101e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   21022:	4293      	cmp	r3, r2
   21024:	daaa      	bge.n	20f7c <ull_conn_done+0x68>
				if (latency_event) {
   21026:	f1b8 0f00 	cmp.w	r8, #0
   2102a:	f000 80c9 	beq.w	211c0 <ull_conn_done+0x2ac>
				force = 1U;
   2102e:	2601      	movs	r6, #1
   21030:	e7a4      	b.n	20f7c <ull_conn_done+0x68>
			    (conn->llcp_req == conn->llcp_ack)) {
   21032:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   21036:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   2103a:	1a9b      	subs	r3, r3, r2
   2103c:	f003 0303 	and.w	r3, r3, #3
   21040:	2b02      	cmp	r3, #2
   21042:	d07c      	beq.n	2113e <ull_conn_done+0x22a>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   21044:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   21048:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   2104c:	429a      	cmp	r2, r3
   2104e:	f000 809b 	beq.w	21188 <ull_conn_done+0x274>
		lll->latency_event = 0U;
   21052:	2200      	movs	r2, #0
   21054:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   21056:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   21058:	b90e      	cbnz	r6, 2105e <ull_conn_done+0x14a>
   2105a:	4590      	cmp	r8, r2
   2105c:	d07c      	beq.n	21158 <ull_conn_done+0x244>
		lazy = lll->latency_event + 1U;
   2105e:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   21060:	9d08      	ldr	r5, [sp, #32]
		lazy = lll->latency_event + 1U;
   21062:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   21064:	b90b      	cbnz	r3, 2106a <ull_conn_done+0x156>
   21066:	2d00      	cmp	r5, #0
   21068:	d058      	beq.n	2111c <ull_conn_done+0x208>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   2106a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   2106c:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   2106e:	9500      	str	r5, [sp, #0]
   21070:	2000      	movs	r0, #0
   21072:	4d67      	ldr	r5, [pc, #412]	; (21210 <ull_conn_done+0x2fc>)
   21074:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   21076:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   21078:	e9cd 0001 	strd	r0, r0, [sp, #4]
   2107c:	9604      	str	r6, [sp, #16]
   2107e:	9406      	str	r4, [sp, #24]
   21080:	b2d2      	uxtb	r2, r2
   21082:	2101      	movs	r1, #1
   21084:	9505      	str	r5, [sp, #20]
   21086:	f7f8 fb51 	bl	1972c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2108a:	f030 0302 	bics.w	r3, r0, #2
   2108e:	d0a6      	beq.n	20fde <ull_conn_done+0xca>
   21090:	f7fa ff5a 	bl	1bf48 <ull_disable_mark_get>
   21094:	4284      	cmp	r4, r0
   21096:	d0a2      	beq.n	20fde <ull_conn_done+0xca>
   21098:	4a5e      	ldr	r2, [pc, #376]	; (21214 <ull_conn_done+0x300>)
   2109a:	495f      	ldr	r1, [pc, #380]	; (21218 <ull_conn_done+0x304>)
   2109c:	485f      	ldr	r0, [pc, #380]	; (2121c <ull_conn_done+0x308>)
   2109e:	f240 53db 	movw	r3, #1499	; 0x5db
   210a2:	f006 fd4e 	bl	27b42 <printk>
   210a6:	4040      	eors	r0, r0
   210a8:	f380 8811 	msr	BASEPRI, r0
   210ac:	f04f 0003 	mov.w	r0, #3
   210b0:	df02      	svc	2
   210b2:	e794      	b.n	20fde <ull_conn_done+0xca>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   210b4:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   210b8:	0719      	lsls	r1, r3, #28
   210ba:	d547      	bpl.n	2114c <ull_conn_done+0x238>
					    (lll->latency + 6)) ?
   210bc:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   210be:	f8b4 20ce 	ldrh.w	r2, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   210c2:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   210c4:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   210c6:	bfc4      	itt	gt
   210c8:	1ad3      	subgt	r3, r2, r3
   210ca:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   210cc:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   210d0:	bfcc      	ite	gt
   210d2:	b29b      	uxthgt	r3, r3
   210d4:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   210d6:	4299      	cmp	r1, r3
   210d8:	d063      	beq.n	211a2 <ull_conn_done+0x28e>
				conn->appto_reload = appto_reload_new;
   210da:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   210de:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   210e2:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
   210e6:	e72a      	b.n	20f3e <ull_conn_done+0x2a>
		conn->llcp_terminate.reason_final =
   210e8:	263d      	movs	r6, #61	; 0x3d
   210ea:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
		conn_cleanup(conn, reason_final);
   210ee:	4631      	mov	r1, r6
   210f0:	4620      	mov	r0, r4
}
   210f2:	b00a      	add	sp, #40	; 0x28
   210f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		conn_cleanup(conn, reason_final);
   210f8:	f7ff be8a 	b.w	20e10 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   210fc:	2300      	movs	r3, #0
   210fe:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   21102:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   21106:	e71a      	b.n	20f3e <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   21108:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   2110c:	2b00      	cmp	r3, #0
   2110e:	f47f af7c 	bne.w	2100a <ull_conn_done+0xf6>
			conn->supervision_expire = conn->supervision_reload;
   21112:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   21116:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   2111a:	e774      	b.n	21006 <ull_conn_done+0xf2>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   2111c:	2900      	cmp	r1, #0
   2111e:	d1a4      	bne.n	2106a <ull_conn_done+0x156>
   21120:	2e00      	cmp	r6, #0
   21122:	d1a2      	bne.n	2106a <ull_conn_done+0x156>
   21124:	e75b      	b.n	20fde <ull_conn_done+0xca>
			conn->appto_expire -= elapsed_event;
   21126:	1bdf      	subs	r7, r3, r7
			    (conn->llcp_req == conn->llcp_ack)) {
   21128:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   2112c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
			conn->appto_expire -= elapsed_event;
   21130:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   21134:	1a9b      	subs	r3, r3, r2
   21136:	f003 0303 	and.w	r3, r3, #3
   2113a:	2b02      	cmp	r3, #2
   2113c:	d182      	bne.n	21044 <ull_conn_done+0x130>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   2113e:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   21142:	3b01      	subs	r3, #1
   21144:	2b01      	cmp	r3, #1
   21146:	f63f af7d 	bhi.w	21044 <ull_conn_done+0x130>
   2114a:	e782      	b.n	21052 <ull_conn_done+0x13e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   2114c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   21150:	07da      	lsls	r2, r3, #31
   21152:	f57f aef4 	bpl.w	20f3e <ull_conn_done+0x2a>
   21156:	e7b1      	b.n	210bc <ull_conn_done+0x1a8>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   21158:	9d08      	ldr	r5, [sp, #32]
   2115a:	b913      	cbnz	r3, 21162 <ull_conn_done+0x24e>
   2115c:	2d00      	cmp	r5, #0
   2115e:	f43f af3e 	beq.w	20fde <ull_conn_done+0xca>
	lazy = 0U;
   21162:	4631      	mov	r1, r6
   21164:	e781      	b.n	2106a <ull_conn_done+0x156>
			rx = ll_pdu_rx_alloc();
   21166:	f7fa fe67 	bl	1be38 <ll_pdu_rx_alloc>
			if (rx) {
   2116a:	4601      	mov	r1, r0
   2116c:	b320      	cbz	r0, 211b8 <ull_conn_done+0x2a4>
				rx->handle = lll->handle;
   2116e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   21170:	2200      	movs	r2, #0
   21172:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   21176:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   21178:	2318      	movs	r3, #24
   2117a:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   2117c:	6800      	ldr	r0, [r0, #0]
   2117e:	f7fa fe2d 	bl	1bddc <ll_rx_put>
				ll_rx_sched();
   21182:	f7fa fe35 	bl	1bdf0 <ll_rx_sched>
   21186:	e70b      	b.n	20fa0 <ull_conn_done+0x8c>
	if ((force) || (latency_event != lll->latency_event)) {
   21188:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   2118a:	e764      	b.n	21056 <ull_conn_done+0x142>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   2118c:	aa08      	add	r2, sp, #32
   2118e:	a909      	add	r1, sp, #36	; 0x24
   21190:	4628      	mov	r0, r5
   21192:	f7ef f939 	bl	10408 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   21196:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   2119a:	b323      	cbz	r3, 211e6 <ull_conn_done+0x2d2>
				lll->latency_event = 0;
   2119c:	2300      	movs	r3, #0
   2119e:	8623      	strh	r3, [r4, #48]	; 0x30
   211a0:	e6e1      	b.n	20f66 <ull_conn_done+0x52>
			if (conn->apto_expire == 0U) {
   211a2:	f8b4 10d0 	ldrh.w	r1, [r4, #208]	; 0xd0
   211a6:	2900      	cmp	r1, #0
   211a8:	f47f aec9 	bne.w	20f3e <ull_conn_done+0x2a>
   211ac:	e797      	b.n	210de <ull_conn_done+0x1ca>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   211ae:	2122      	movs	r1, #34	; 0x22
   211b0:	4620      	mov	r0, r4
   211b2:	f7ff fe2d 	bl	20e10 <conn_cleanup>
			return;
   211b6:	e712      	b.n	20fde <ull_conn_done+0xca>
				conn->apto_expire = 1U;
   211b8:	2301      	movs	r3, #1
   211ba:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   211be:	e6ef      	b.n	20fa0 <ull_conn_done+0x8c>
					force = conn->slave.force & 0x01;
   211c0:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   211c4:	085a      	lsrs	r2, r3, #1
					if (force) {
   211c6:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   211ca:	bf17      	itett	ne
   211cc:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   211d0:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->slave.force |= BIT(31);
   211d4:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->slave.force & 0x01;
   211d8:	461e      	movne	r6, r3
   211da:	e6cf      	b.n	20f7c <ull_conn_done+0x68>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   211dc:	213e      	movs	r1, #62	; 0x3e
   211de:	4620      	mov	r0, r4
   211e0:	f7ff fe16 	bl	20e10 <conn_cleanup>
			return;
   211e4:	e6fb      	b.n	20fde <ull_conn_done+0xca>
				ull_conn_tx_demux(UINT8_MAX);
   211e6:	20ff      	movs	r0, #255	; 0xff
   211e8:	f7ff fdc2 	bl	20d70 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   211ec:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   211f0:	2b00      	cmp	r3, #0
   211f2:	d1d3      	bne.n	2119c <ull_conn_done+0x288>
   211f4:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   211f8:	4632      	mov	r2, r6
   211fa:	f7f7 f879 	bl	182f0 <memq_peek>
   211fe:	2800      	cmp	r0, #0
   21200:	d1cc      	bne.n	2119c <ull_conn_done+0x288>
			} else if (lll->slave.latency_enabled) {
   21202:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   21206:	075b      	lsls	r3, r3, #29
				lll->latency_event = lll->latency;
   21208:	bf44      	itt	mi
   2120a:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   2120c:	8623      	strhmi	r3, [r4, #48]	; 0x30
   2120e:	e6aa      	b.n	20f66 <ull_conn_done+0x52>
   21210:	0001d169 	.word	0x0001d169
   21214:	0002be34 	.word	0x0002be34
   21218:	0002bfc8 	.word	0x0002bfc8
   2121c:	0002b8dc 	.word	0x0002b8dc

00021220 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   21220:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   21224:	2b00      	cmp	r3, #0
   21226:	f000 80be 	beq.w	213a6 <ull_conn_tx_lll_enqueue+0x186>
   2122a:	3901      	subs	r1, #1
{
   2122c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   21230:	f8df 8174 	ldr.w	r8, [pc, #372]	; 213a8 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   21234:	f8df a174 	ldr.w	sl, [pc, #372]	; 213ac <ull_conn_tx_lll_enqueue+0x18c>
   21238:	f8df 9174 	ldr.w	r9, [pc, #372]	; 213b0 <ull_conn_tx_lll_enqueue+0x190>
   2123c:	4604      	mov	r4, r0
   2123e:	b2cd      	uxtb	r5, r1
   21240:	e010      	b.n	21264 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   21242:	4640      	mov	r0, r8
   21244:	f7f6 ffe6 	bl	18214 <mem_acquire>
		LL_ASSERT(link);
   21248:	4607      	mov	r7, r0
   2124a:	b3b0      	cbz	r0, 212ba <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   2124c:	f104 0268 	add.w	r2, r4, #104	; 0x68
   21250:	4631      	mov	r1, r6
   21252:	4638      	mov	r0, r7
   21254:	f7f7 f842 	bl	182dc <memq_enqueue>
	while (conn->tx_head &&
   21258:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   2125c:	3d01      	subs	r5, #1
   2125e:	b2ed      	uxtb	r5, r5
   21260:	2b00      	cmp	r3, #0
   21262:	d05c      	beq.n	2131e <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   21264:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   21268:	07d1      	lsls	r1, r2, #31
   2126a:	d403      	bmi.n	21274 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   2126c:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   21270:	0792      	lsls	r2, r2, #30
   21272:	d53a      	bpl.n	212ea <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   21274:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   21278:	4293      	cmp	r3, r2
   2127a:	d150      	bne.n	2131e <ull_conn_tx_lll_enqueue+0xfe>
   2127c:	2dff      	cmp	r5, #255	; 0xff
   2127e:	d04e      	beq.n	2131e <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   21280:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   21284:	4620      	mov	r0, r4
   21286:	f7fb ff8f 	bl	1d1a8 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   2128a:	7903      	ldrb	r3, [r0, #4]
   2128c:	f003 0303 	and.w	r3, r3, #3
   21290:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   21292:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   21294:	d1d5      	bne.n	21242 <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   21296:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   21298:	2b0b      	cmp	r3, #11
   2129a:	d042      	beq.n	21322 <ull_conn_tx_lll_enqueue+0x102>
   2129c:	d81b      	bhi.n	212d6 <ull_conn_tx_lll_enqueue+0xb6>
   2129e:	2b04      	cmp	r3, #4
   212a0:	d1cf      	bne.n	21242 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   212a2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   212a6:	f043 0302 	orr.w	r3, r3, #2
   212aa:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   212ae:	4640      	mov	r0, r8
   212b0:	f7f6 ffb0 	bl	18214 <mem_acquire>
		LL_ASSERT(link);
   212b4:	4607      	mov	r7, r0
   212b6:	2800      	cmp	r0, #0
   212b8:	d1c8      	bne.n	2124c <ull_conn_tx_lll_enqueue+0x2c>
   212ba:	483e      	ldr	r0, [pc, #248]	; (213b4 <ull_conn_tx_lll_enqueue+0x194>)
   212bc:	f240 632f 	movw	r3, #1583	; 0x62f
   212c0:	4652      	mov	r2, sl
   212c2:	4649      	mov	r1, r9
   212c4:	f006 fc3d 	bl	27b42 <printk>
   212c8:	4040      	eors	r0, r0
   212ca:	f380 8811 	msr	BASEPRI, r0
   212ce:	f04f 0003 	mov.w	r0, #3
   212d2:	df02      	svc	2
   212d4:	e7ba      	b.n	2124c <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   212d6:	3b16      	subs	r3, #22
   212d8:	2b01      	cmp	r3, #1
   212da:	d8b2      	bhi.n	21242 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   212dc:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   212e0:	f043 0301 	orr.w	r3, r3, #1
   212e4:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   212e8:	e7ab      	b.n	21242 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   212ea:	791a      	ldrb	r2, [r3, #4]
   212ec:	f002 0203 	and.w	r2, r2, #3
   212f0:	2a03      	cmp	r2, #3
   212f2:	d1c3      	bne.n	2127c <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   212f4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   212f6:	2a03      	cmp	r2, #3
   212f8:	d001      	beq.n	212fe <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   212fa:	2a0a      	cmp	r2, #10
   212fc:	d1be      	bne.n	2127c <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   212fe:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   21302:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   21306:	428a      	cmp	r2, r1
   21308:	d010      	beq.n	2132c <ull_conn_tx_lll_enqueue+0x10c>
   2130a:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   2130e:	2a03      	cmp	r2, #3
   21310:	d0b4      	beq.n	2127c <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   21312:	681a      	ldr	r2, [r3, #0]
   21314:	b11a      	cbz	r2, 2131e <ull_conn_tx_lll_enqueue+0xfe>
   21316:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   2131a:	428a      	cmp	r2, r1
   2131c:	d032      	beq.n	21384 <ull_conn_tx_lll_enqueue+0x164>
}
   2131e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   21322:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   21326:	2b00      	cmp	r3, #0
   21328:	da8b      	bge.n	21242 <ull_conn_tx_lll_enqueue+0x22>
   2132a:	e7ba      	b.n	212a2 <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   2132c:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   21330:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   21334:	4288      	cmp	r0, r1
   21336:	d1ec      	bne.n	21312 <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   21338:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   2133c:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   21340:	4288      	cmp	r0, r1
   21342:	d1e6      	bne.n	21312 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   21344:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   21348:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   2134c:	4288      	cmp	r0, r1
   2134e:	d1e0      	bne.n	21312 <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   21350:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   21354:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   21358:	4288      	cmp	r0, r1
   2135a:	d1da      	bne.n	21312 <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   2135c:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   21360:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   21364:	4288      	cmp	r0, r1
   21366:	d1d4      	bne.n	21312 <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   21368:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   2136c:	3a02      	subs	r2, #2
   2136e:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   21372:	2201      	movs	r2, #1
   21374:	f362 0301 	bfi	r3, r2, #0, #2
   21378:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   2137c:	2303      	movs	r3, #3
   2137e:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   21382:	e77b      	b.n	2127c <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   21384:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   21388:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   2138c:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   21390:	6810      	ldr	r0, [r2, #0]
   21392:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   21394:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   21396:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   2139a:	2900      	cmp	r1, #0
   2139c:	f47f af6e 	bne.w	2127c <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   213a0:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   213a4:	e76a      	b.n	2127c <ull_conn_tx_lll_enqueue+0x5c>
   213a6:	4770      	bx	lr
   213a8:	20001dd0 	.word	0x20001dd0
   213ac:	0002be34 	.word	0x0002be34
   213b0:	0002be98 	.word	0x0002be98
   213b4:	0002b8dc 	.word	0x0002b8dc

000213b8 <tx_demux>:
{
   213b8:	b510      	push	{r4, lr}
   213ba:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   213bc:	2001      	movs	r0, #1
   213be:	f7ff fcd7 	bl	20d70 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   213c2:	4620      	mov	r0, r4
   213c4:	2101      	movs	r1, #1
}
   213c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   213ca:	f7ff bf29 	b.w	21220 <ull_conn_tx_lll_enqueue>
   213ce:	bf00      	nop

000213d0 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   213d0:	4901      	ldr	r1, [pc, #4]	; (213d8 <ull_conn_link_tx_release+0x8>)
   213d2:	f7f6 bf39 	b.w	18248 <mem_release>
   213d6:	bf00      	nop
   213d8:	20001dd0 	.word	0x20001dd0

000213dc <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   213dc:	4b01      	ldr	r3, [pc, #4]	; (213e4 <ull_conn_ack_last_idx_get+0x8>)
}
   213de:	78d8      	ldrb	r0, [r3, #3]
   213e0:	4770      	bx	lr
   213e2:	bf00      	nop
   213e4:	2000040c 	.word	0x2000040c

000213e8 <ull_conn_ack_peek>:
{
   213e8:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   213ea:	4b0c      	ldr	r3, [pc, #48]	; (2141c <ull_conn_ack_peek+0x34>)
   213ec:	f893 c002 	ldrb.w	ip, [r3, #2]
   213f0:	78dc      	ldrb	r4, [r3, #3]
   213f2:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   213f4:	45a4      	cmp	ip, r4
   213f6:	d00f      	beq.n	21418 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   213f8:	fb1c fc05 	smulbb	ip, ip, r5
   213fc:	3304      	adds	r3, #4
	if (!lll_tx) {
   213fe:	4686      	mov	lr, r0
   21400:	eb13 000c 	adds.w	r0, r3, ip
   21404:	d007      	beq.n	21416 <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   21406:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   2140a:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   2140e:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   21410:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   21412:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   21414:	6818      	ldr	r0, [r3, #0]
}
   21416:	bd30      	pop	{r4, r5, pc}
		return NULL;
   21418:	2000      	movs	r0, #0
}
   2141a:	bd30      	pop	{r4, r5, pc}
   2141c:	2000040c 	.word	0x2000040c

00021420 <ull_conn_ack_by_last_peek>:
{
   21420:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   21422:	4b0c      	ldr	r3, [pc, #48]	; (21454 <ull_conn_ack_by_last_peek+0x34>)
   21424:	f893 c002 	ldrb.w	ip, [r3, #2]
   21428:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   2142c:	4584      	cmp	ip, r0
   2142e:	d00e      	beq.n	2144e <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   21430:	3304      	adds	r3, #4
   21432:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   21436:	eb13 000c 	adds.w	r0, r3, ip
   2143a:	d006      	beq.n	2144a <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   2143c:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   21440:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   21442:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   21446:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   21448:	6818      	ldr	r0, [r3, #0]
}
   2144a:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   2144e:	2000      	movs	r0, #0
   21450:	e7fb      	b.n	2144a <ull_conn_ack_by_last_peek+0x2a>
   21452:	bf00      	nop
   21454:	2000040c 	.word	0x2000040c

00021458 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   21458:	4b09      	ldr	r3, [pc, #36]	; (21480 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   2145a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   2145c:	78da      	ldrb	r2, [r3, #3]
   2145e:	7818      	ldrb	r0, [r3, #0]
   21460:	f893 c001 	ldrb.w	ip, [r3, #1]
   21464:	428a      	cmp	r2, r1
   21466:	d009      	beq.n	2147c <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   21468:	1c4a      	adds	r2, r1, #1
   2146a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   2146c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   21470:	4594      	cmp	ip, r2
   21472:	bf08      	it	eq
   21474:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   21476:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   21478:	709a      	strb	r2, [r3, #2]
	return mem;
   2147a:	4770      	bx	lr
		return NULL;
   2147c:	2000      	movs	r0, #0
}
   2147e:	4770      	bx	lr
   21480:	2000040c 	.word	0x2000040c

00021484 <ull_conn_lll_ack_enqueue>:
{
   21484:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   21486:	4a15      	ldr	r2, [pc, #84]	; (214dc <ull_conn_lll_ack_enqueue+0x58>)
   21488:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   2148a:	f892 e001 	ldrb.w	lr, [r2, #1]
   2148e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   21492:	1c63      	adds	r3, r4, #1
   21494:	b2db      	uxtb	r3, r3
		last = 0U;
   21496:	459e      	cmp	lr, r3
   21498:	bf08      	it	eq
   2149a:	2300      	moveq	r3, #0
	if (last == first) {
   2149c:	459c      	cmp	ip, r3
   2149e:	d00c      	beq.n	214ba <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   214a0:	4696      	mov	lr, r2
   214a2:	f81e cb04 	ldrb.w	ip, [lr], #4
   214a6:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   214aa:	eb1e 040c 	adds.w	r4, lr, ip
   214ae:	d004      	beq.n	214ba <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   214b0:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   214b4:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   214b6:	70d3      	strb	r3, [r2, #3]
}
   214b8:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   214ba:	4a09      	ldr	r2, [pc, #36]	; (214e0 <ull_conn_lll_ack_enqueue+0x5c>)
   214bc:	4909      	ldr	r1, [pc, #36]	; (214e4 <ull_conn_lll_ack_enqueue+0x60>)
   214be:	480a      	ldr	r0, [pc, #40]	; (214e8 <ull_conn_lll_ack_enqueue+0x64>)
   214c0:	f240 636d 	movw	r3, #1645	; 0x66d
   214c4:	f006 fb3d 	bl	27b42 <printk>
   214c8:	4040      	eors	r0, r0
   214ca:	f380 8811 	msr	BASEPRI, r0
   214ce:	f04f 0003 	mov.w	r0, #3
   214d2:	df02      	svc	2
	lll_tx->handle = handle;
   214d4:	2300      	movs	r3, #0
   214d6:	801b      	strh	r3, [r3, #0]
   214d8:	deff      	udf	#255	; 0xff
   214da:	bf00      	nop
   214dc:	2000040c 	.word	0x2000040c
   214e0:	0002be34 	.word	0x0002be34
   214e4:	0002be88 	.word	0x0002be88
   214e8:	0002b8dc 	.word	0x0002b8dc

000214ec <ull_conn_tx_ack>:
{
   214ec:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   214ee:	7953      	ldrb	r3, [r2, #5]
{
   214f0:	b082      	sub	sp, #8
   214f2:	4614      	mov	r4, r2
   214f4:	4605      	mov	r5, r0
   214f6:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   214f8:	b37b      	cbz	r3, 2155a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   214fa:	7923      	ldrb	r3, [r4, #4]
   214fc:	f003 0203 	and.w	r2, r3, #3
   21500:	2a03      	cmp	r2, #3
   21502:	d00d      	beq.n	21520 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   21504:	f64f 72ff 	movw	r2, #65535	; 0xffff
   21508:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   2150a:	bf04      	itt	eq
   2150c:	f36f 0301 	bfceq	r3, #0, #2
   21510:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   21512:	4621      	mov	r1, r4
   21514:	4628      	mov	r0, r5
}
   21516:	b002      	add	sp, #8
   21518:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   2151c:	f7fa bca2 	b.w	1be64 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   21520:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21524:	429d      	cmp	r5, r3
   21526:	d126      	bne.n	21576 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   21528:	6833      	ldr	r3, [r6, #0]
   2152a:	429c      	cmp	r4, r3
   2152c:	d03e      	beq.n	215ac <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   2152e:	2b00      	cmp	r3, #0
   21530:	d0ef      	beq.n	21512 <ull_conn_tx_ack+0x26>
   21532:	4a83      	ldr	r2, [pc, #524]	; (21740 <ull_conn_tx_ack+0x254>)
   21534:	4983      	ldr	r1, [pc, #524]	; (21744 <ull_conn_tx_ack+0x258>)
   21536:	4884      	ldr	r0, [pc, #528]	; (21748 <ull_conn_tx_ack+0x25c>)
   21538:	f240 638d 	movw	r3, #1677	; 0x68d
   2153c:	f006 fb01 	bl	27b42 <printk>
   21540:	4040      	eors	r0, r0
   21542:	f380 8811 	msr	BASEPRI, r0
   21546:	f04f 0003 	mov.w	r0, #3
   2154a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   2154c:	4621      	mov	r1, r4
   2154e:	4628      	mov	r0, r5
}
   21550:	b002      	add	sp, #8
   21552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   21556:	f7fa bc85 	b.w	1be64 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   2155a:	4a79      	ldr	r2, [pc, #484]	; (21740 <ull_conn_tx_ack+0x254>)
   2155c:	497b      	ldr	r1, [pc, #492]	; (2174c <ull_conn_tx_ack+0x260>)
   2155e:	487a      	ldr	r0, [pc, #488]	; (21748 <ull_conn_tx_ack+0x25c>)
   21560:	f240 637a 	movw	r3, #1658	; 0x67a
   21564:	f006 faed 	bl	27b42 <printk>
   21568:	4040      	eors	r0, r0
   2156a:	f380 8811 	msr	BASEPRI, r0
   2156e:	f04f 0003 	mov.w	r0, #3
   21572:	df02      	svc	2
   21574:	e7c1      	b.n	214fa <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   21576:	462a      	mov	r2, r5
   21578:	4875      	ldr	r0, [pc, #468]	; (21750 <ull_conn_tx_ack+0x264>)
   2157a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   2157e:	f7f6 fe7b 	bl	18278 <mem_get>
   21582:	79e2      	ldrb	r2, [r4, #7]
   21584:	3a02      	subs	r2, #2
   21586:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   21588:	2a15      	cmp	r2, #21
   2158a:	d80c      	bhi.n	215a6 <ull_conn_tx_ack+0xba>
   2158c:	e8df f002 	tbb	[pc, r2]
   21590:	261f0b4a 	.word	0x261f0b4a
   21594:	180b1856 	.word	0x180b1856
   21598:	2d0b1f0b 	.word	0x2d0b1f0b
   2159c:	150b0b0b 	.word	0x150b0b0b
   215a0:	8a42180b 	.word	0x8a42180b
   215a4:	3768      	.short	0x3768
		if (link->next == (void *)tx) {
   215a6:	6833      	ldr	r3, [r6, #0]
   215a8:	42a3      	cmp	r3, r4
   215aa:	d1c0      	bne.n	2152e <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   215ac:	4969      	ldr	r1, [pc, #420]	; (21754 <ull_conn_tx_ack+0x268>)
   215ae:	4620      	mov	r0, r4
}
   215b0:	b002      	add	sp, #8
   215b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   215b6:	f7f6 be47 	b.w	18248 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   215ba:	7a22      	ldrb	r2, [r4, #8]
   215bc:	2a03      	cmp	r2, #3
   215be:	d014      	beq.n	215ea <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   215c0:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   215c4:	f36f 0241 	bfc	r2, #1, #1
   215c8:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   215cc:	e7ac      	b.n	21528 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   215ce:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   215d2:	f042 0202 	orr.w	r2, r2, #2
   215d6:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   215da:	e7a5      	b.n	21528 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   215dc:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   215e0:	f042 0203 	orr.w	r2, r2, #3
   215e4:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   215e8:	e79e      	b.n	21528 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   215ea:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   215ee:	f022 0203 	bic.w	r2, r2, #3
   215f2:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   215f6:	2200      	movs	r2, #0
   215f8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   215fc:	e794      	b.n	21528 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   215fe:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   21602:	2a00      	cmp	r2, #0
   21604:	db7b      	blt.n	216fe <ull_conn_tx_ack+0x212>
		conn->llcp_phy.pause_tx = 0U;
   21606:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   2160a:	f36f 0200 	bfc	r2, #0, #1
   2160e:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   21612:	e789      	b.n	21528 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   21614:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   21618:	2102      	movs	r1, #2
   2161a:	f361 0202 	bfi	r2, r1, #0, #3
   2161e:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
		break;
   21622:	e781      	b.n	21528 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   21624:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   21626:	2a13      	cmp	r2, #19
   21628:	bf08      	it	eq
   2162a:	2216      	moveq	r2, #22
   2162c:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   21630:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   21634:	3a01      	subs	r2, #1
   21636:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   2163a:	e775      	b.n	21528 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   2163c:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   21640:	2a00      	cmp	r2, #0
   21642:	dacb      	bge.n	215dc <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   21644:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   21648:	f022 0203 	bic.w	r2, r2, #3
   2164c:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   21650:	2200      	movs	r2, #0
   21652:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   21656:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   2165a:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   2165e:	e763      	b.n	21528 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   21660:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   21664:	2102      	movs	r1, #2
   21666:	f361 0201 	bfi	r2, r1, #0, #2
   2166a:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   2166e:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   21672:	2a00      	cmp	r2, #0
   21674:	dac7      	bge.n	21606 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   21676:	4a38      	ldr	r2, [pc, #224]	; (21758 <ull_conn_tx_ack+0x26c>)
   21678:	e892 0003 	ldmia.w	r2, {r0, r1}
   2167c:	aa02      	add	r2, sp, #8
   2167e:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   21682:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   21686:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   2168a:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   2168e:	f002 0207 	and.w	r2, r2, #7
   21692:	a802      	add	r0, sp, #8
   21694:	4402      	add	r2, r0
   21696:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   2169a:	f362 1106 	bfi	r1, r2, #4, #3
   2169e:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   216a2:	e7b0      	b.n	21606 <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   216a4:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   216a8:	f36f 0241 	bfc	r2, #1, #1
   216ac:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   216b0:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   216b4:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   216b8:	4282      	cmp	r2, r0
   216ba:	f43f af35 	beq.w	21528 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   216be:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   216c2:	f001 0207 	and.w	r2, r1, #7
   216c6:	2a03      	cmp	r2, #3
   216c8:	d005      	beq.n	216d6 <ull_conn_tx_ack+0x1ea>
   216ca:	3203      	adds	r2, #3
   216cc:	f002 0207 	and.w	r2, r2, #7
   216d0:	2a01      	cmp	r2, #1
   216d2:	f63f af68 	bhi.w	215a6 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   216d6:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   216da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   216de:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   216e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   216e6:	f001 0207 	and.w	r2, r1, #7
   216ea:	2a05      	cmp	r2, #5
   216ec:	d022      	beq.n	21734 <ull_conn_tx_ack+0x248>
				if (!conn->llcp_length.cache.tx_octets) {
   216ee:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   216f2:	b98a      	cbnz	r2, 21718 <ull_conn_tx_ack+0x22c>
					conn->llcp_length.ack =
   216f4:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   216f8:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   216fc:	e714      	b.n	21528 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   216fe:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   21702:	4a15      	ldr	r2, [pc, #84]	; (21758 <ull_conn_tx_ack+0x26c>)
				conn->common.txn_lock = 0U;
   21704:	f36f 0141 	bfc	r1, #1, #1
   21708:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   2170c:	e892 0003 	ldmia.w	r2, {r0, r1}
   21710:	aa02      	add	r2, sp, #8
   21712:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   21716:	e7b4      	b.n	21682 <ull_conn_tx_ack+0x196>
				conn->llcp_length.tx_octets =
   21718:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   2171c:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   2171e:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   21722:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   21726:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   2172a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   2172e:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   21732:	e6f9      	b.n	21528 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   21734:	2204      	movs	r2, #4
   21736:	f362 0102 	bfi	r1, r2, #0, #3
   2173a:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   2173e:	e6f3      	b.n	21528 <ull_conn_tx_ack+0x3c>
   21740:	0002be34 	.word	0x0002be34
   21744:	0002c030 	.word	0x0002c030
   21748:	0002b8dc 	.word	0x0002b8dc
   2174c:	0002c024 	.word	0x0002c024
   21750:	20000dc8 	.word	0x20000dc8
   21754:	20001d1c 	.word	0x20001d1c
   21758:	0002c03c 	.word	0x0002c03c

0002175c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   2175c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   21760:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	switch (lll->phy_tx_time) {
   21764:	f3c3 1302 	ubfx	r3, r3, #4, #3
   21768:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   2176a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	return max_tx_octets;
   2176e:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   21770:	bf15      	itete	ne
   21772:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   21774:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   21776:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   21778:	3b0b      	subeq	r3, #11
   2177a:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   2177c:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   2177e:	bf44      	itt	mi
   21780:	3b04      	submi	r3, #4
   21782:	b29b      	uxthmi	r3, r3
}
   21784:	4298      	cmp	r0, r3
   21786:	bf28      	it	cs
   21788:	4618      	movcs	r0, r3
   2178a:	4770      	bx	lr

0002178c <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   2178c:	b510      	push	{r4, lr}
   2178e:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   21790:	b930      	cbnz	r0, 217a0 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   21792:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   21796:	f36f 0382 	bfc	r3, #2, #1
   2179a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   2179e:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   217a0:	4a09      	ldr	r2, [pc, #36]	; (217c8 <ticker_update_latency_cancel_op_cb+0x3c>)
   217a2:	490a      	ldr	r1, [pc, #40]	; (217cc <ticker_update_latency_cancel_op_cb+0x40>)
   217a4:	480a      	ldr	r0, [pc, #40]	; (217d0 <ticker_update_latency_cancel_op_cb+0x44>)
   217a6:	f240 2357 	movw	r3, #599	; 0x257
   217aa:	f006 f9ca 	bl	27b42 <printk>
   217ae:	4040      	eors	r0, r0
   217b0:	f380 8811 	msr	BASEPRI, r0
   217b4:	f04f 0003 	mov.w	r0, #3
   217b8:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   217ba:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   217be:	f36f 0382 	bfc	r3, #2, #1
   217c2:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   217c6:	bd10      	pop	{r4, pc}
   217c8:	0002c05c 	.word	0x0002c05c
   217cc:	0002c0a0 	.word	0x0002c0a0
   217d0:	0002b8dc 	.word	0x0002b8dc

000217d4 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   217d4:	b900      	cbnz	r0, 217d8 <ticker_op_cb+0x4>
   217d6:	4770      	bx	lr
{
   217d8:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   217da:	4a07      	ldr	r2, [pc, #28]	; (217f8 <ticker_op_cb+0x24>)
   217dc:	4907      	ldr	r1, [pc, #28]	; (217fc <ticker_op_cb+0x28>)
   217de:	4808      	ldr	r0, [pc, #32]	; (21800 <ticker_op_cb+0x2c>)
   217e0:	f240 234f 	movw	r3, #591	; 0x24f
   217e4:	f006 f9ad 	bl	27b42 <printk>
   217e8:	4040      	eors	r0, r0
   217ea:	f380 8811 	msr	BASEPRI, r0
   217ee:	f04f 0003 	mov.w	r0, #3
   217f2:	df02      	svc	2
}
   217f4:	bd08      	pop	{r3, pc}
   217f6:	bf00      	nop
   217f8:	0002c05c 	.word	0x0002c05c
   217fc:	0002be7c 	.word	0x0002be7c
   21800:	0002b8dc 	.word	0x0002b8dc

00021804 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   21804:	2801      	cmp	r0, #1
   21806:	d000      	beq.n	2180a <ticker_op_stop_adv_cb+0x6>
   21808:	4770      	bx	lr
{
   2180a:	b510      	push	{r4, lr}
   2180c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   2180e:	f7fa fb9b 	bl	1bf48 <ull_disable_mark_get>
   21812:	4284      	cmp	r4, r0
   21814:	d00c      	beq.n	21830 <ticker_op_stop_adv_cb+0x2c>
   21816:	4a07      	ldr	r2, [pc, #28]	; (21834 <ticker_op_stop_adv_cb+0x30>)
   21818:	4907      	ldr	r1, [pc, #28]	; (21838 <ticker_op_stop_adv_cb+0x34>)
   2181a:	4808      	ldr	r0, [pc, #32]	; (2183c <ticker_op_stop_adv_cb+0x38>)
   2181c:	f240 2347 	movw	r3, #583	; 0x247
   21820:	f006 f98f 	bl	27b42 <printk>
   21824:	4040      	eors	r0, r0
   21826:	f380 8811 	msr	BASEPRI, r0
   2182a:	f04f 0003 	mov.w	r0, #3
   2182e:	df02      	svc	2
}
   21830:	bd10      	pop	{r4, pc}
   21832:	bf00      	nop
   21834:	0002c05c 	.word	0x0002c05c
   21838:	0002c0b4 	.word	0x0002c0b4
   2183c:	0002b8dc 	.word	0x0002b8dc

00021840 <ull_slave_ticker_cb>:
{
   21840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21844:	9c06      	ldr	r4, [sp, #24]
   21846:	4688      	mov	r8, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   21848:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   2184a:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   2184c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21850:	4299      	cmp	r1, r3
   21852:	d024      	beq.n	2189e <ull_slave_ticker_cb+0x5e>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   21854:	4605      	mov	r5, r0
   21856:	4601      	mov	r1, r0
   21858:	4620      	mov	r0, r4
   2185a:	4617      	mov	r7, r2
   2185c:	f7fd ff62 	bl	1f724 <ull_conn_llcp>
		if (ret) {
   21860:	b9e8      	cbnz	r0, 2189e <ull_slave_ticker_cb+0x5e>
	return ++hdr->ref;
   21862:	7820      	ldrb	r0, [r4, #0]
   21864:	3001      	adds	r0, #1
   21866:	b2c0      	uxtb	r0, r0
   21868:	7020      	strb	r0, [r4, #0]
	LL_ASSERT(ref);
   2186a:	b340      	cbz	r0, 218be <ull_slave_ticker_cb+0x7e>
	p.ticks_at_expire = ticks_at_expire;
   2186c:	481b      	ldr	r0, [pc, #108]	; (218dc <ull_slave_ticker_cb+0x9c>)
	mfy.param = &p;
   2186e:	4b1c      	ldr	r3, [pc, #112]	; (218e0 <ull_slave_ticker_cb+0xa0>)
	p.lazy = lazy;
   21870:	8107      	strh	r7, [r0, #8]
	p.param = &conn->lll;
   21872:	f104 011c 	add.w	r1, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   21876:	2200      	movs	r2, #0
	p.param = &conn->lll;
   21878:	60c1      	str	r1, [r0, #12]
	p.remainder = remainder;
   2187a:	e9c0 5800 	strd	r5, r8, [r0]
	p.force = force;
   2187e:	7286      	strb	r6, [r0, #10]
	mfy.param = &p;
   21880:	6098      	str	r0, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   21882:	4611      	mov	r1, r2
   21884:	2001      	movs	r0, #1
   21886:	f7f6 fd9d 	bl	183c4 <mayfly_enqueue>
	LL_ASSERT(!err);
   2188a:	b950      	cbnz	r0, 218a2 <ull_slave_ticker_cb+0x62>
	ull_conn_tx_demux(UINT8_MAX);
   2188c:	20ff      	movs	r0, #255	; 0xff
   2188e:	f7ff fa6f 	bl	20d70 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   21892:	4620      	mov	r0, r4
   21894:	21ff      	movs	r1, #255	; 0xff
}
   21896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   2189a:	f7ff bcc1 	b.w	21220 <ull_conn_tx_lll_enqueue>
}
   2189e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   218a2:	4a10      	ldr	r2, [pc, #64]	; (218e4 <ull_slave_ticker_cb+0xa4>)
   218a4:	4910      	ldr	r1, [pc, #64]	; (218e8 <ull_slave_ticker_cb+0xa8>)
   218a6:	4811      	ldr	r0, [pc, #68]	; (218ec <ull_slave_ticker_cb+0xac>)
   218a8:	f240 230b 	movw	r3, #523	; 0x20b
   218ac:	f006 f949 	bl	27b42 <printk>
   218b0:	4040      	eors	r0, r0
   218b2:	f380 8811 	msr	BASEPRI, r0
   218b6:	f04f 0003 	mov.w	r0, #3
   218ba:	df02      	svc	2
   218bc:	e7e6      	b.n	2188c <ull_slave_ticker_cb+0x4c>
	LL_ASSERT(ref);
   218be:	4a09      	ldr	r2, [pc, #36]	; (218e4 <ull_slave_ticker_cb+0xa4>)
   218c0:	490b      	ldr	r1, [pc, #44]	; (218f0 <ull_slave_ticker_cb+0xb0>)
   218c2:	480a      	ldr	r0, [pc, #40]	; (218ec <ull_slave_ticker_cb+0xac>)
   218c4:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   218c8:	f006 f93b 	bl	27b42 <printk>
   218cc:	4040      	eors	r0, r0
   218ce:	f380 8811 	msr	BASEPRI, r0
   218d2:	f04f 0003 	mov.w	r0, #3
   218d6:	df02      	svc	2
   218d8:	e7c8      	b.n	2186c <ull_slave_ticker_cb+0x2c>
   218da:	bf00      	nop
   218dc:	20001e14 	.word	0x20001e14
   218e0:	200004b4 	.word	0x200004b4
   218e4:	0002c05c 	.word	0x0002c05c
   218e8:	0002bb88 	.word	0x0002bb88
   218ec:	0002b8dc 	.word	0x0002b8dc
   218f0:	0002bdbc 	.word	0x0002bdbc

000218f4 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   218f4:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   218f6:	b123      	cbz	r3, 21902 <ull_slave_latency_cancel+0xe>
   218f8:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   218fc:	f012 0304 	ands.w	r3, r2, #4
   21900:	d000      	beq.n	21904 <ull_slave_latency_cancel+0x10>
   21902:	4770      	bx	lr
{
   21904:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   21906:	f042 0204 	orr.w	r2, r2, #4
{
   2190a:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   2190c:	4c11      	ldr	r4, [pc, #68]	; (21954 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   2190e:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
				      (TICKER_ID_CONN_BASE + handle),
   21912:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   21914:	2201      	movs	r2, #1
   21916:	e9cd 3202 	strd	r3, r2, [sp, #8]
   2191a:	e9cd 3404 	strd	r3, r4, [sp, #16]
   2191e:	e9cd 3300 	strd	r3, r3, [sp]
   21922:	9006      	str	r0, [sp, #24]
   21924:	b2ca      	uxtb	r2, r1
   21926:	4618      	mov	r0, r3
   21928:	2103      	movs	r1, #3
   2192a:	f7f7 feff 	bl	1972c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   2192e:	f030 0302 	bics.w	r3, r0, #2
   21932:	d00c      	beq.n	2194e <ull_slave_latency_cancel+0x5a>
   21934:	4a08      	ldr	r2, [pc, #32]	; (21958 <ull_slave_latency_cancel+0x64>)
   21936:	4909      	ldr	r1, [pc, #36]	; (2195c <ull_slave_latency_cancel+0x68>)
   21938:	4809      	ldr	r0, [pc, #36]	; (21960 <ull_slave_latency_cancel+0x6c>)
   2193a:	f240 13c5 	movw	r3, #453	; 0x1c5
   2193e:	f006 f900 	bl	27b42 <printk>
   21942:	4040      	eors	r0, r0
   21944:	f380 8811 	msr	BASEPRI, r0
   21948:	f04f 0003 	mov.w	r0, #3
   2194c:	df02      	svc	2
}
   2194e:	b008      	add	sp, #32
   21950:	bd10      	pop	{r4, pc}
   21952:	bf00      	nop
   21954:	0002178d 	.word	0x0002178d
   21958:	0002c05c 	.word	0x0002c05c
   2195c:	0002bf14 	.word	0x0002bf14
   21960:	0002b8dc 	.word	0x0002b8dc

00021964 <ll_start_enc_req_send>:
{
   21964:	b570      	push	{r4, r5, r6, lr}
   21966:	460e      	mov	r6, r1
   21968:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   2196a:	f7fb ff95 	bl	1d898 <ll_connected_get>
	if (!conn) {
   2196e:	2800      	cmp	r0, #0
   21970:	d040      	beq.n	219f4 <ll_start_enc_req_send+0x90>
	if (error_code) {
   21972:	4604      	mov	r4, r0
   21974:	b95e      	cbnz	r6, 2198e <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   21976:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   2197a:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   2197e:	429a      	cmp	r2, r3
   21980:	d003      	beq.n	2198a <ll_start_enc_req_send+0x26>
   21982:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   21986:	2b03      	cmp	r3, #3
   21988:	d026      	beq.n	219d8 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   2198a:	200c      	movs	r0, #12
}
   2198c:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   2198e:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   21992:	f010 0004 	ands.w	r0, r0, #4
   21996:	d112      	bne.n	219be <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   21998:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   2199c:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   219a0:	429a      	cmp	r2, r3
   219a2:	d0f2      	beq.n	2198a <ll_start_enc_req_send+0x26>
   219a4:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   219a8:	2b03      	cmp	r3, #3
   219aa:	d1ee      	bne.n	2198a <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   219ac:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   219b0:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   219b4:	f360 0301 	bfi	r3, r0, #0, #2
   219b8:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   219bc:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   219be:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   219c2:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   219c6:	4293      	cmp	r3, r2
   219c8:	d1df      	bne.n	2198a <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   219ca:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   219cc:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   219d0:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   219d4:	2000      	movs	r0, #0
}
   219d6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   219d8:	2210      	movs	r2, #16
   219da:	4629      	mov	r1, r5
   219dc:	f200 1071 	addw	r0, r0, #369	; 0x171
   219e0:	f007 f919 	bl	28c16 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   219e4:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   219e8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   219ec:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   219f0:	4630      	mov	r0, r6
}
   219f2:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   219f4:	2002      	movs	r0, #2
}
   219f6:	bd70      	pop	{r4, r5, r6, pc}

000219f8 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   219f8:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   219fa:	fb02 1c01 	mla	ip, r2, r1, r1
   219fe:	7802      	ldrb	r2, [r0, #0]
   21a00:	491c      	ldr	r1, [pc, #112]	; (21a74 <lll_chan_sel_1+0x7c>)
{
   21a02:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   21a06:	4494      	add	ip, r2
   21a08:	fb81 210c 	smull	r2, r1, r1, ip
   21a0c:	4461      	add	r1, ip
   21a0e:	1149      	asrs	r1, r1, #5
   21a10:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   21a14:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   21a18:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   21a1a:	ebac 0101 	sub.w	r1, ip, r1
   21a1e:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   21a20:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   21a22:	08c4      	lsrs	r4, r0, #3
   21a24:	f001 0107 	and.w	r1, r1, #7
   21a28:	f813 c004 	ldrb.w	ip, [r3, r4]
   21a2c:	fa4c f101 	asr.w	r1, ip, r1
   21a30:	f011 0101 	ands.w	r1, r1, #1
   21a34:	d11d      	bne.n	21a72 <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   21a36:	fbb0 f2f5 	udiv	r2, r0, r5
   21a3a:	fb05 0212 	mls	r2, r5, r2, r0
   21a3e:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   21a40:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   21a44:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   21a46:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   21a48:	f100 0c08 	add.w	ip, r0, #8
   21a4c:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   21a50:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   21a54:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   21a58:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   21a5c:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   21a60:	d002      	beq.n	21a68 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   21a62:	b132      	cbz	r2, 21a72 <lll_chan_sel_1+0x7a>
				chan_index--;
   21a64:	3a01      	subs	r2, #1
   21a66:	b2d2      	uxtb	r2, r2
			chan_next++;
   21a68:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   21a6a:	4584      	cmp	ip, r0
   21a6c:	d1f2      	bne.n	21a54 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   21a6e:	45a6      	cmp	lr, r4
   21a70:	d1ea      	bne.n	21a48 <lll_chan_sel_1+0x50>
}
   21a72:	bd30      	pop	{r4, r5, pc}
   21a74:	dd67c8a7 	.word	0xdd67c8a7

00021a78 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   21a78:	8842      	ldrh	r2, [r0, #2]
   21a7a:	8800      	ldrh	r0, [r0, #0]
}
   21a7c:	4050      	eors	r0, r2
   21a7e:	4770      	bx	lr

00021a80 <lll_chan_sel_2>:
{
   21a80:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   21a82:	4d2f      	ldr	r5, [pc, #188]	; (21b40 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   21a84:	4c2f      	ldr	r4, [pc, #188]	; (21b44 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   21a86:	4048      	eors	r0, r1
   21a88:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   21a8c:	0a07      	lsrs	r7, r0, #8
   21a8e:	b2c0      	uxtb	r0, r0
   21a90:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   21a94:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   21a98:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   21a9c:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   21aa0:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   21aa4:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   21aa8:	433e      	orrs	r6, r7
   21aaa:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   21aae:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   21ab2:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   21ab6:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   21aba:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   21abe:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   21ac0:	f3c0 4007 	ubfx	r0, r0, #16, #8
   21ac4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   21ac8:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   21acc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   21ad0:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   21ad2:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   21ad6:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   21ad8:	d1d8      	bne.n	21a8c <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   21ada:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   21adc:	481a      	ldr	r0, [pc, #104]	; (21b48 <lll_chan_sel_2+0xc8>)
   21ade:	fba0 4001 	umull	r4, r0, r0, r1
   21ae2:	1a0c      	subs	r4, r1, r0
   21ae4:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   21ae8:	0940      	lsrs	r0, r0, #5
   21aea:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   21aee:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   21af2:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   21af4:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   21af8:	f000 0507 	and.w	r5, r0, #7
   21afc:	5d14      	ldrb	r4, [r2, r4]
   21afe:	412c      	asrs	r4, r5
   21b00:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   21b02:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   21b04:	d41a      	bmi.n	21b3c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   21b06:	fb01 f303 	mul.w	r3, r1, r3
   21b0a:	1e56      	subs	r6, r2, #1
   21b0c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   21b10:	3204      	adds	r2, #4
	chan_next = 0U;
   21b12:	4660      	mov	r0, ip
		bite = *chan_map;
   21b14:	f100 0508 	add.w	r5, r0, #8
   21b18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   21b1c:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   21b1e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   21b22:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   21b26:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   21b2a:	d002      	beq.n	21b32 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   21b2c:	b133      	cbz	r3, 21b3c <lll_chan_sel_2+0xbc>
				chan_index--;
   21b2e:	3b01      	subs	r3, #1
   21b30:	b2db      	uxtb	r3, r3
			chan_next++;
   21b32:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   21b34:	42a8      	cmp	r0, r5
   21b36:	d1f2      	bne.n	21b1e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   21b38:	42b2      	cmp	r2, r6
   21b3a:	d1eb      	bne.n	21b14 <lll_chan_sel_2+0x94>
}
   21b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   21b3e:	bf00      	nop
   21b40:	00022110 	.word	0x00022110
   21b44:	00088440 	.word	0x00088440
   21b48:	bacf914d 	.word	0xbacf914d

00021b4c <rl_update>:
		}
	}
}

static void rl_update(void)
{
   21b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21b50:	4d18      	ldr	r5, [pc, #96]	; (21bb4 <rl_update+0x68>)
   21b52:	4e19      	ldr	r6, [pc, #100]	; (21bb8 <rl_update+0x6c>)
   21b54:	2400      	movs	r4, #0
   21b56:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   21b5a:	1eaf      	subs	r7, r5, #2
   21b5c:	f04f 0801 	mov.w	r8, #1
   21b60:	e006      	b.n	21b70 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21b62:	3401      	adds	r4, #1
   21b64:	2c08      	cmp	r4, #8
   21b66:	f105 0506 	add.w	r5, r5, #6
   21b6a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   21b6e:	d01e      	beq.n	21bae <rl_update+0x62>
		if (rl[i].taken) {
   21b70:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   21b74:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   21b78:	07da      	lsls	r2, r3, #31
   21b7a:	d5f2      	bpl.n	21b62 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   21b7c:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   21b7e:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   21b80:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   21b84:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   21b88:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   21b8a:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   21b8e:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   21b90:	4631      	mov	r1, r6
   21b92:	4628      	mov	r0, r5
   21b94:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21b96:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   21b98:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   21b9c:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   21b9e:	f007 f83a 	bl	28c16 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21ba2:	2c08      	cmp	r4, #8
   21ba4:	f105 0506 	add.w	r5, r5, #6
   21ba8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   21bac:	d1e0      	bne.n	21b70 <rl_update+0x24>
}
   21bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21bb2:	bf00      	nop
   21bb4:	2000201e 	.word	0x2000201e
   21bb8:	20001edd 	.word	0x20001edd

00021bbc <wl_update>:
{
   21bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21bc0:	4e20      	ldr	r6, [pc, #128]	; (21c44 <wl_update+0x88>)
   21bc2:	4d21      	ldr	r5, [pc, #132]	; (21c48 <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   21bc4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 21c4c <wl_update+0x90>
   21bc8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 21c50 <wl_update+0x94>
{
   21bcc:	2400      	movs	r4, #0
   21bce:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   21bd2:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   21bd4:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   21bd8:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   21bdc:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   21be0:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   21be2:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   21be6:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   21be8:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   21bec:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   21bf0:	d021      	beq.n	21c36 <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   21bf2:	f898 3000 	ldrb.w	r3, [r8]
   21bf6:	b163      	cbz	r3, 21c12 <wl_update+0x56>
		j = wl[i].rl_idx;
   21bf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   21bfc:	2b07      	cmp	r3, #7
   21bfe:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   21c02:	d806      	bhi.n	21c12 <wl_update+0x56>
   21c04:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   21c08:	f013 0f04 	tst.w	r3, #4
   21c0c:	d001      	beq.n	21c12 <wl_update+0x56>
   21c0e:	06db      	lsls	r3, r3, #27
   21c10:	d511      	bpl.n	21c36 <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   21c12:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   21c16:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   21c1a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   21c1e:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   21c22:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   21c26:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   21c2a:	40a3      	lsls	r3, r4
   21c2c:	ea4e 0303 	orr.w	r3, lr, r3
   21c30:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   21c32:	f006 fff0 	bl	28c16 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   21c36:	3401      	adds	r4, #1
   21c38:	2c08      	cmp	r4, #8
   21c3a:	f105 0508 	add.w	r5, r5, #8
   21c3e:	d1c9      	bne.n	21bd4 <wl_update+0x18>
}
   21c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   21c44:	20002096 	.word	0x20002096
   21c48:	20002056 	.word	0x20002056
   21c4c:	2000263a 	.word	0x2000263a
   21c50:	20001edc 	.word	0x20001edc

00021c54 <ll_wl_size_get>:
}
   21c54:	2008      	movs	r0, #8
   21c56:	4770      	bx	lr

00021c58 <ll_wl_clear>:
{
   21c58:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   21c5a:	2000      	movs	r0, #0
   21c5c:	f7fa ff9c 	bl	1cb98 <ull_adv_filter_pol_get>
   21c60:	b9d8      	cbnz	r0, 21c9a <ll_wl_clear+0x42>
   21c62:	4a0f      	ldr	r2, [pc, #60]	; (21ca0 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   21c64:	4c0f      	ldr	r4, [pc, #60]	; (21ca4 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   21c66:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   21c6a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   21c6c:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   21c6e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   21c72:	d805      	bhi.n	21c80 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   21c74:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   21c78:	f36f 1345 	bfc	r3, #5, #1
   21c7c:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   21c80:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   21c84:	f36f 0300 	bfc	r3, #0, #1
   21c88:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   21c8c:	3001      	adds	r0, #1
   21c8e:	2808      	cmp	r0, #8
   21c90:	d1e9      	bne.n	21c66 <ll_wl_clear+0xe>
	wl_anon = 0U;
   21c92:	4b05      	ldr	r3, [pc, #20]	; (21ca8 <ll_wl_clear+0x50>)
   21c94:	2000      	movs	r0, #0
   21c96:	7018      	strb	r0, [r3, #0]
}
   21c98:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   21c9a:	200c      	movs	r0, #12
}
   21c9c:	bd10      	pop	{r4, pc}
   21c9e:	bf00      	nop
   21ca0:	20002054 	.word	0x20002054
   21ca4:	20001edc 	.word	0x20001edc
   21ca8:	2000263b 	.word	0x2000263b

00021cac <ll_wl_add>:
{
   21cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21cb0:	4681      	mov	r9, r0
   21cb2:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   21cb4:	2000      	movs	r0, #0
   21cb6:	f7fa ff6f 	bl	1cb98 <ull_adv_filter_pol_get>
   21cba:	2800      	cmp	r0, #0
   21cbc:	d173      	bne.n	21da6 <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   21cbe:	f899 a000 	ldrb.w	sl, [r9]
   21cc2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   21cc6:	4605      	mov	r5, r0
   21cc8:	d067      	beq.n	21d9a <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   21cca:	4e45      	ldr	r6, [pc, #276]	; (21de0 <ll_wl_add+0x134>)
   21ccc:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   21cd0:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   21cd4:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   21cd8:	4604      	mov	r4, r0
   21cda:	1eb7      	subs	r7, r6, #2
   21cdc:	e009      	b.n	21cf2 <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   21cde:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   21ce2:	d101      	bne.n	21ce8 <ll_wl_add+0x3c>
			*free = i;
   21ce4:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   21ce8:	3401      	adds	r4, #1
   21cea:	2c08      	cmp	r4, #8
   21cec:	f106 0608 	add.w	r6, r6, #8
   21cf0:	d017      	beq.n	21d22 <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   21cf2:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   21cf6:	07d8      	lsls	r0, r3, #31
   21cf8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   21cfc:	d5ef      	bpl.n	21cde <ll_wl_add+0x32>
   21cfe:	4552      	cmp	r2, sl
   21d00:	d1f2      	bne.n	21ce8 <ll_wl_add+0x3c>
   21d02:	2206      	movs	r2, #6
   21d04:	4630      	mov	r0, r6
   21d06:	4659      	mov	r1, fp
   21d08:	f006 ff74 	bl	28bf4 <memcmp>
   21d0c:	2800      	cmp	r0, #0
   21d0e:	d041      	beq.n	21d94 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   21d10:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   21d14:	07d9      	lsls	r1, r3, #31
   21d16:	d5e2      	bpl.n	21cde <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   21d18:	3401      	adds	r4, #1
   21d1a:	2c08      	cmp	r4, #8
   21d1c:	f106 0608 	add.w	r6, r6, #8
   21d20:	d1e7      	bne.n	21cf2 <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   21d22:	f1b8 0f07 	cmp.w	r8, #7
   21d26:	d856      	bhi.n	21dd6 <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   21d28:	f899 2000 	ldrb.w	r2, [r9]
   21d2c:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   21d30:	4e2c      	ldr	r6, [pc, #176]	; (21de4 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   21d32:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   21d34:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   21d38:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   21d3c:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   21d40:	4438      	add	r0, r7
   21d42:	2206      	movs	r2, #6
   21d44:	4659      	mov	r1, fp
   21d46:	f006 ff66 	bl	28c16 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   21d4a:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21d4e:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   21d52:	f003 0301 	and.w	r3, r3, #1
   21d56:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   21d5a:	fa5f fa85 	uxtb.w	sl, r5
   21d5e:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   21d62:	f3c2 1180 	ubfx	r1, r2, #6, #1
   21d66:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21d68:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   21d6c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   21d70:	d501      	bpl.n	21d76 <ll_wl_add+0xca>
   21d72:	4299      	cmp	r1, r3
   21d74:	d01b      	beq.n	21dae <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21d76:	2d08      	cmp	r5, #8
   21d78:	f106 0628 	add.w	r6, r6, #40	; 0x28
   21d7c:	d1eb      	bne.n	21d56 <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   21d7e:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   21d82:	22ff      	movs	r2, #255	; 0xff
   21d84:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   21d86:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   21d8a:	f043 0301 	orr.w	r3, r3, #1
   21d8e:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   21d92:	2000      	movs	r0, #0
}
   21d94:	b003      	add	sp, #12
   21d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   21d9a:	4b13      	ldr	r3, [pc, #76]	; (21de8 <ll_wl_add+0x13c>)
   21d9c:	2201      	movs	r2, #1
   21d9e:	701a      	strb	r2, [r3, #0]
}
   21da0:	b003      	add	sp, #12
   21da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   21da6:	200c      	movs	r0, #12
}
   21da8:	b003      	add	sp, #12
   21daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   21dae:	4630      	mov	r0, r6
   21db0:	2206      	movs	r2, #6
   21db2:	4659      	mov	r1, fp
   21db4:	9301      	str	r3, [sp, #4]
   21db6:	f006 ff1d 	bl	28bf4 <memcmp>
   21dba:	9b01      	ldr	r3, [sp, #4]
   21dbc:	2800      	cmp	r0, #0
   21dbe:	d1da      	bne.n	21d76 <ll_wl_add+0xca>
		rl[j].wl = 1U;
   21dc0:	f819 3004 	ldrb.w	r3, [r9, r4]
   21dc4:	f043 0320 	orr.w	r3, r3, #32
   21dc8:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   21dcc:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   21dd0:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   21dd4:	e7d7      	b.n	21d86 <ll_wl_add+0xda>
   21dd6:	2007      	movs	r0, #7
}
   21dd8:	b003      	add	sp, #12
   21dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21dde:	bf00      	nop
   21de0:	20002056 	.word	0x20002056
   21de4:	20001edd 	.word	0x20001edd
   21de8:	2000263b 	.word	0x2000263b

00021dec <ll_wl_remove>:
{
   21dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21df0:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   21df2:	2000      	movs	r0, #0
   21df4:	f7fa fed0 	bl	1cb98 <ull_adv_filter_pol_get>
   21df8:	2800      	cmp	r0, #0
   21dfa:	d13b      	bne.n	21e74 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   21dfc:	783e      	ldrb	r6, [r7, #0]
   21dfe:	2eff      	cmp	r6, #255	; 0xff
   21e00:	4604      	mov	r4, r0
   21e02:	d033      	beq.n	21e6c <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   21e04:	4d1d      	ldr	r5, [pc, #116]	; (21e7c <ll_wl_remove+0x90>)
   21e06:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   21e08:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   21e0c:	f006 0601 	and.w	r6, r6, #1
   21e10:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   21e14:	f3c3 0240 	ubfx	r2, r3, #1, #1
   21e18:	07db      	lsls	r3, r3, #31
   21e1a:	d501      	bpl.n	21e20 <ll_wl_remove+0x34>
   21e1c:	42b2      	cmp	r2, r6
   21e1e:	d007      	beq.n	21e30 <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   21e20:	3401      	adds	r4, #1
   21e22:	2c08      	cmp	r4, #8
   21e24:	f105 0508 	add.w	r5, r5, #8
   21e28:	d1f2      	bne.n	21e10 <ll_wl_remove+0x24>
   21e2a:	2002      	movs	r0, #2
}
   21e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   21e30:	2206      	movs	r2, #6
   21e32:	4628      	mov	r0, r5
   21e34:	4639      	mov	r1, r7
   21e36:	f006 fedd 	bl	28bf4 <memcmp>
   21e3a:	2800      	cmp	r0, #0
   21e3c:	d1f0      	bne.n	21e20 <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   21e3e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   21e42:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   21e44:	2b07      	cmp	r3, #7
   21e46:	d808      	bhi.n	21e5a <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   21e48:	4a0d      	ldr	r2, [pc, #52]	; (21e80 <ll_wl_remove+0x94>)
   21e4a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   21e4e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   21e52:	f360 1145 	bfi	r1, r0, #5, #1
   21e56:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   21e5a:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   21e5e:	f36f 0300 	bfc	r3, #0, #1
   21e62:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   21e66:	2000      	movs	r0, #0
}
   21e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   21e6c:	4b05      	ldr	r3, [pc, #20]	; (21e84 <ll_wl_remove+0x98>)
   21e6e:	7018      	strb	r0, [r3, #0]
}
   21e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   21e74:	200c      	movs	r0, #12
}
   21e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   21e7a:	bf00      	nop
   21e7c:	20002056 	.word	0x20002056
   21e80:	20001edc 	.word	0x20001edc
   21e84:	2000263b 	.word	0x2000263b

00021e88 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   21e88:	2807      	cmp	r0, #7
{
   21e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21e8e:	4604      	mov	r4, r0
   21e90:	460e      	mov	r6, r1
   21e92:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   21e94:	d817      	bhi.n	21ec6 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   21e96:	4d19      	ldr	r5, [pc, #100]	; (21efc <ll_rl_id_addr_get+0x74>)
   21e98:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   21e9c:	00a7      	lsls	r7, r4, #2
   21e9e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   21ea2:	07db      	lsls	r3, r3, #31
   21ea4:	d51c      	bpl.n	21ee0 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   21ea6:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   21ea8:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   21eaa:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   21eae:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   21eb2:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   21eb6:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   21eb8:	4640      	mov	r0, r8
   21eba:	2206      	movs	r2, #6
}
   21ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   21ec0:	3101      	adds	r1, #1
   21ec2:	f006 bea8 	b.w	28c16 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   21ec6:	4a0e      	ldr	r2, [pc, #56]	; (21f00 <ll_rl_id_addr_get+0x78>)
   21ec8:	490e      	ldr	r1, [pc, #56]	; (21f04 <ll_rl_id_addr_get+0x7c>)
   21eca:	480f      	ldr	r0, [pc, #60]	; (21f08 <ll_rl_id_addr_get+0x80>)
   21ecc:	23f3      	movs	r3, #243	; 0xf3
   21ece:	f005 fe38 	bl	27b42 <printk>
   21ed2:	4040      	eors	r0, r0
   21ed4:	f380 8811 	msr	BASEPRI, r0
   21ed8:	f04f 0003 	mov.w	r0, #3
   21edc:	df02      	svc	2
   21ede:	e7da      	b.n	21e96 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   21ee0:	4a07      	ldr	r2, [pc, #28]	; (21f00 <ll_rl_id_addr_get+0x78>)
   21ee2:	490a      	ldr	r1, [pc, #40]	; (21f0c <ll_rl_id_addr_get+0x84>)
   21ee4:	4808      	ldr	r0, [pc, #32]	; (21f08 <ll_rl_id_addr_get+0x80>)
   21ee6:	23f4      	movs	r3, #244	; 0xf4
   21ee8:	f005 fe2b 	bl	27b42 <printk>
   21eec:	4040      	eors	r0, r0
   21eee:	f380 8811 	msr	BASEPRI, r0
   21ef2:	f04f 0003 	mov.w	r0, #3
   21ef6:	df02      	svc	2
   21ef8:	e7d5      	b.n	21ea6 <ll_rl_id_addr_get+0x1e>
   21efa:	bf00      	nop
   21efc:	20001edc 	.word	0x20001edc
   21f00:	0002c10c 	.word	0x0002c10c
   21f04:	0002c150 	.word	0x0002c150
   21f08:	0002b8dc 	.word	0x0002b8dc
   21f0c:	0002c15c 	.word	0x0002c15c

00021f10 <ll_rl_size_get>:
   21f10:	2008      	movs	r0, #8
   21f12:	4770      	bx	lr

00021f14 <ll_rl_clear>:
{
   21f14:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   21f16:	2000      	movs	r0, #0
   21f18:	f7fa fe32 	bl	1cb80 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   21f1c:	bb88      	cbnz	r0, 21f82 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   21f1e:	4b1a      	ldr	r3, [pc, #104]	; (21f88 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   21f20:	4c1a      	ldr	r4, [pc, #104]	; (21f8c <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   21f22:	7819      	ldrb	r1, [r3, #0]
   21f24:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   21f28:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   21f2a:	f360 0100 	bfi	r1, r0, #0, #1
   21f2e:	f360 0200 	bfi	r2, r0, #0, #1
   21f32:	7019      	strb	r1, [r3, #0]
   21f34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   21f38:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   21f3c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   21f40:	f360 0100 	bfi	r1, r0, #0, #1
   21f44:	f360 0200 	bfi	r2, r0, #0, #1
   21f48:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   21f4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   21f50:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   21f54:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   21f58:	f360 0100 	bfi	r1, r0, #0, #1
   21f5c:	f360 0200 	bfi	r2, r0, #0, #1
   21f60:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   21f64:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   21f68:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   21f6c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   21f70:	f360 0100 	bfi	r1, r0, #0, #1
   21f74:	f360 0200 	bfi	r2, r0, #0, #1
   21f78:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   21f7c:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   21f80:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   21f82:	200c      	movs	r0, #12
}
   21f84:	bd10      	pop	{r4, pc}
   21f86:	bf00      	nop
   21f88:	20001edc 	.word	0x20001edc
   21f8c:	20002639 	.word	0x20002639

00021f90 <ll_rl_remove>:
{
   21f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21f94:	4681      	mov	r9, r0
   21f96:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   21f98:	2000      	movs	r0, #0
   21f9a:	f7fa fdf1 	bl	1cb80 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   21f9e:	2800      	cmp	r0, #0
   21fa0:	d149      	bne.n	22036 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   21fa2:	46ca      	mov	sl, r9
   21fa4:	4e4d      	ldr	r6, [pc, #308]	; (220dc <ll_rl_remove+0x14c>)
   21fa6:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21faa:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   21fac:	f008 0801 	and.w	r8, r8, #1
   21fb0:	1e75      	subs	r5, r6, #1
   21fb2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   21fb6:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   21fba:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   21fbe:	f3c2 1380 	ubfx	r3, r2, #6, #1
   21fc2:	07d2      	lsls	r2, r2, #31
   21fc4:	ea4f 0784 	mov.w	r7, r4, lsl #2
   21fc8:	d501      	bpl.n	21fce <ll_rl_remove+0x3e>
   21fca:	4543      	cmp	r3, r8
   21fcc:	d008      	beq.n	21fe0 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   21fce:	3401      	adds	r4, #1
   21fd0:	2c08      	cmp	r4, #8
   21fd2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   21fd6:	d1ec      	bne.n	21fb2 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   21fd8:	2002      	movs	r0, #2
}
   21fda:	b003      	add	sp, #12
   21fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   21fe0:	4630      	mov	r0, r6
   21fe2:	2206      	movs	r2, #6
   21fe4:	4651      	mov	r1, sl
   21fe6:	f006 fe05 	bl	28bf4 <memcmp>
   21fea:	4603      	mov	r3, r0
   21fec:	2800      	cmp	r0, #0
   21fee:	d1ee      	bne.n	21fce <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   21ff0:	f89b 2000 	ldrb.w	r2, [fp]
   21ff4:	0752      	lsls	r2, r2, #29
   21ff6:	d430      	bmi.n	2205a <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   21ff8:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   21ffc:	4e38      	ldr	r6, [pc, #224]	; (220e0 <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   21ffe:	f009 0901 	and.w	r9, r9, #1
   22002:	f1a6 0802 	sub.w	r8, r6, #2
   22006:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   2200a:	07d0      	lsls	r0, r2, #31
   2200c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   22010:	d501      	bpl.n	22016 <ll_rl_remove+0x86>
   22012:	4549      	cmp	r1, r9
   22014:	d013      	beq.n	2203e <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   22016:	3301      	adds	r3, #1
   22018:	2b08      	cmp	r3, #8
   2201a:	f106 0608 	add.w	r6, r6, #8
   2201e:	d1f2      	bne.n	22006 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   22020:	443c      	add	r4, r7
		return 0;
   22022:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   22024:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   22028:	f36f 0300 	bfc	r3, #0, #1
   2202c:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   22030:	b003      	add	sp, #12
   22032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22036:	200c      	movs	r0, #12
}
   22038:	b003      	add	sp, #12
   2203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   2203e:	2206      	movs	r2, #6
   22040:	4630      	mov	r0, r6
   22042:	4651      	mov	r1, sl
   22044:	9301      	str	r3, [sp, #4]
   22046:	f006 fdd5 	bl	28bf4 <memcmp>
   2204a:	9b01      	ldr	r3, [sp, #4]
   2204c:	2800      	cmp	r0, #0
   2204e:	d1e2      	bne.n	22016 <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   22050:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   22054:	22ff      	movs	r2, #255	; 0xff
   22056:	705a      	strb	r2, [r3, #1]
   22058:	e7e2      	b.n	22020 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   2205a:	4e22      	ldr	r6, [pc, #136]	; (220e4 <ll_rl_remove+0x154>)
   2205c:	7832      	ldrb	r2, [r6, #0]
   2205e:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   22060:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   22064:	d005      	beq.n	22072 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   22066:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   2206a:	45c3      	cmp	fp, r8
   2206c:	d104      	bne.n	22078 <ll_rl_remove+0xe8>
			peer_irk_count--;
   2206e:	7032      	strb	r2, [r6, #0]
   22070:	e7c2      	b.n	21ff8 <ll_rl_remove+0x68>
   22072:	461a      	mov	r2, r3
   22074:	7032      	strb	r2, [r6, #0]
   22076:	e7bf      	b.n	21ff8 <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   22078:	481b      	ldr	r0, [pc, #108]	; (220e8 <ll_rl_remove+0x158>)
   2207a:	9301      	str	r3, [sp, #4]
   2207c:	2210      	movs	r2, #16
   2207e:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   22082:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   22086:	f006 fdc6 	bl	28c16 <memcpy>
   2208a:	9b01      	ldr	r3, [sp, #4]
   2208c:	f8df c05c 	ldr.w	ip, [pc, #92]	; 220ec <ll_rl_remove+0x15c>
   22090:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   22092:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   22096:	fa5f fe82 	uxtb.w	lr, r2
   2209a:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   2209e:	f010 0f01 	tst.w	r0, #1
   220a2:	f102 0201 	add.w	r2, r2, #1
   220a6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   220aa:	d005      	beq.n	220b8 <ll_rl_remove+0x128>
   220ac:	0740      	lsls	r0, r0, #29
   220ae:	d503      	bpl.n	220b8 <ll_rl_remove+0x128>
   220b0:	f89c 0017 	ldrb.w	r0, [ip, #23]
   220b4:	4540      	cmp	r0, r8
   220b6:	d007      	beq.n	220c8 <ll_rl_remove+0x138>
				for (k = 0U;
   220b8:	2a08      	cmp	r2, #8
   220ba:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   220be:	d1e8      	bne.n	22092 <ll_rl_remove+0x102>
			peer_irk_count--;
   220c0:	7832      	ldrb	r2, [r6, #0]
   220c2:	3a01      	subs	r2, #1
   220c4:	7032      	strb	r2, [r6, #0]
   220c6:	e797      	b.n	21ff8 <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   220c8:	4a09      	ldr	r2, [pc, #36]	; (220f0 <ll_rl_remove+0x160>)
						rl[k].pirk_idx = pi;
   220ca:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   220ce:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   220d2:	7832      	ldrb	r2, [r6, #0]
   220d4:	3a01      	subs	r2, #1
   220d6:	7032      	strb	r2, [r6, #0]
   220d8:	e78e      	b.n	21ff8 <ll_rl_remove+0x68>
   220da:	bf00      	nop
   220dc:	20001edd 	.word	0x20001edd
   220e0:	20002056 	.word	0x20002056
   220e4:	20002639 	.word	0x20002639
   220e8:	20001e5c 	.word	0x20001e5c
   220ec:	20001edc 	.word	0x20001edc
   220f0:	20001e54 	.word	0x20001e54

000220f4 <ll_rl_crpa_set>:
{
   220f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   220f8:	795c      	ldrb	r4, [r3, #5]
   220fa:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   220fe:	2c40      	cmp	r4, #64	; 0x40
   22100:	d001      	beq.n	22106 <ll_rl_crpa_set+0x12>
}
   22102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   22106:	461e      	mov	r6, r3
   22108:	460f      	mov	r7, r1
   2210a:	b301      	cbz	r1, 2214e <ll_rl_crpa_set+0x5a>
   2210c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 22178 <ll_rl_crpa_set+0x84>
   22110:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22112:	f000 0a01 	and.w	sl, r0, #1
   22116:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2211a:	e003      	b.n	22124 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2211c:	2c08      	cmp	r4, #8
   2211e:	f109 0928 	add.w	r9, r9, #40	; 0x28
   22122:	d0ee      	beq.n	22102 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22124:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   22128:	4625      	mov	r5, r4
   2212a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   2212e:	f3c2 1380 	ubfx	r3, r2, #6, #1
   22132:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22134:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22138:	d5f0      	bpl.n	2211c <ll_rl_crpa_set+0x28>
   2213a:	4553      	cmp	r3, sl
   2213c:	d1ee      	bne.n	2211c <ll_rl_crpa_set+0x28>
   2213e:	4648      	mov	r0, r9
   22140:	2206      	movs	r2, #6
   22142:	4639      	mov	r1, r7
   22144:	f006 fd56 	bl	28bf4 <memcmp>
   22148:	2800      	cmp	r0, #0
   2214a:	d1e7      	bne.n	2211c <ll_rl_crpa_set+0x28>
   2214c:	e004      	b.n	22158 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   2214e:	2a07      	cmp	r2, #7
   22150:	d8d7      	bhi.n	22102 <ll_rl_crpa_set+0xe>
   22152:	f8df 8028 	ldr.w	r8, [pc, #40]	; 2217c <ll_rl_crpa_set+0x88>
   22156:	4615      	mov	r5, r2
   22158:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   2215c:	00e8      	lsls	r0, r5, #3
   2215e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   22162:	07db      	lsls	r3, r3, #31
   22164:	d5cd      	bpl.n	22102 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   22166:	3018      	adds	r0, #24
   22168:	4631      	mov	r1, r6
   2216a:	4440      	add	r0, r8
   2216c:	2206      	movs	r2, #6
}
   2216e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   22172:	f006 bd50 	b.w	28c16 <memcpy>
   22176:	bf00      	nop
   22178:	20001edd 	.word	0x20001edd
   2217c:	20001edc 	.word	0x20001edc

00022180 <ll_rl_crpa_get>:
{
   22180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   22184:	4682      	mov	sl, r0
   22186:	4e1a      	ldr	r6, [pc, #104]	; (221f0 <ll_rl_crpa_get+0x70>)
   22188:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   2218c:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   2218e:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22190:	f008 0801 	and.w	r8, r8, #1
   22194:	1e77      	subs	r7, r6, #1
   22196:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2219a:	00d5      	lsls	r5, r2, #3
   2219c:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   221a0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   221a4:	07db      	lsls	r3, r3, #31
   221a6:	f104 0401 	add.w	r4, r4, #1
   221aa:	d501      	bpl.n	221b0 <ll_rl_crpa_get+0x30>
   221ac:	4542      	cmp	r2, r8
   221ae:	d006      	beq.n	221be <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   221b0:	2c08      	cmp	r4, #8
   221b2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   221b6:	d1ee      	bne.n	22196 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   221b8:	2002      	movs	r0, #2
}
   221ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   221be:	4630      	mov	r0, r6
   221c0:	2206      	movs	r2, #6
   221c2:	4651      	mov	r1, sl
   221c4:	f006 fd16 	bl	28bf4 <memcmp>
   221c8:	4683      	mov	fp, r0
   221ca:	2800      	cmp	r0, #0
   221cc:	d1f0      	bne.n	221b0 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   221ce:	f105 0218 	add.w	r2, r5, #24
   221d2:	4417      	add	r7, r2
   221d4:	2106      	movs	r1, #6
   221d6:	4638      	mov	r0, r7
   221d8:	f7f6 f866 	bl	182a8 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   221dc:	2800      	cmp	r0, #0
   221de:	d0eb      	beq.n	221b8 <ll_rl_crpa_get+0x38>
   221e0:	2206      	movs	r2, #6
   221e2:	4639      	mov	r1, r7
   221e4:	4648      	mov	r0, r9
   221e6:	f006 fd16 	bl	28c16 <memcpy>
		return 0;
   221ea:	4658      	mov	r0, fp
}
   221ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   221f0:	20001edd 	.word	0x20001edd

000221f4 <ll_rl_lrpa_get>:
{
   221f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   221f8:	4681      	mov	r9, r0
   221fa:	4e16      	ldr	r6, [pc, #88]	; (22254 <ll_rl_lrpa_get+0x60>)
   221fc:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   22200:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   22202:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22204:	f008 0801 	and.w	r8, r8, #1
   22208:	1e77      	subs	r7, r6, #1
   2220a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   2220e:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   22212:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   22216:	f3c3 1280 	ubfx	r2, r3, #6, #1
   2221a:	07db      	lsls	r3, r3, #31
   2221c:	f104 0401 	add.w	r4, r4, #1
   22220:	d501      	bpl.n	22226 <ll_rl_lrpa_get+0x32>
   22222:	4542      	cmp	r2, r8
   22224:	d006      	beq.n	22234 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22226:	2c08      	cmp	r4, #8
   22228:	f106 0628 	add.w	r6, r6, #40	; 0x28
   2222c:	d1ed      	bne.n	2220a <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   2222e:	2002      	movs	r0, #2
}
   22230:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22234:	4630      	mov	r0, r6
   22236:	2206      	movs	r2, #6
   22238:	4649      	mov	r1, r9
   2223a:	f006 fcdb 	bl	28bf4 <memcmp>
   2223e:	4683      	mov	fp, r0
   22240:	2800      	cmp	r0, #0
   22242:	d1f0      	bne.n	22226 <ll_rl_lrpa_get+0x32>
   22244:	6a69      	ldr	r1, [r5, #36]	; 0x24
   22246:	2206      	movs	r2, #6
   22248:	4650      	mov	r0, sl
   2224a:	f006 fce4 	bl	28c16 <memcpy>
		return 0;
   2224e:	4658      	mov	r0, fp
}
   22250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22254:	20001edd 	.word	0x20001edd

00022258 <ll_rl_enable>:
{
   22258:	b510      	push	{r4, lr}
   2225a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   2225c:	2000      	movs	r0, #0
   2225e:	f7fa fc8f 	bl	1cb80 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   22262:	b958      	cbnz	r0, 2227c <ll_rl_enable+0x24>
	switch (enable) {
   22264:	b134      	cbz	r4, 22274 <ll_rl_enable+0x1c>
   22266:	2c01      	cmp	r4, #1
   22268:	d001      	beq.n	2226e <ll_rl_enable+0x16>
   2226a:	2012      	movs	r0, #18
}
   2226c:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   2226e:	4b04      	ldr	r3, [pc, #16]	; (22280 <ll_rl_enable+0x28>)
   22270:	701c      	strb	r4, [r3, #0]
}
   22272:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   22274:	4b02      	ldr	r3, [pc, #8]	; (22280 <ll_rl_enable+0x28>)
   22276:	701c      	strb	r4, [r3, #0]
	return 0;
   22278:	4620      	mov	r0, r4
}
   2227a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   2227c:	200c      	movs	r0, #12
}
   2227e:	bd10      	pop	{r4, pc}
   22280:	2000263a 	.word	0x2000263a

00022284 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   22284:	4b03      	ldr	r3, [pc, #12]	; (22294 <ll_rl_timeout_set+0x10>)
   22286:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2228a:	fb02 f000 	mul.w	r0, r2, r0
   2228e:	6018      	str	r0, [r3, #0]
}
   22290:	4770      	bx	lr
   22292:	bf00      	nop
   22294:	20002050 	.word	0x20002050

00022298 <ll_priv_mode_set>:
{
   22298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2229c:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   2229e:	2000      	movs	r0, #0
{
   222a0:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   222a2:	f7fa fc6d 	bl	1cb80 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   222a6:	bb68      	cbnz	r0, 22304 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   222a8:	4e1d      	ldr	r6, [pc, #116]	; (22320 <ll_priv_mode_set+0x88>)
   222aa:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   222ae:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   222b0:	f009 0901 	and.w	r9, r9, #1
   222b4:	1e77      	subs	r7, r6, #1
   222b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   222ba:	00d5      	lsls	r5, r2, #3
   222bc:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   222c0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   222c4:	07db      	lsls	r3, r3, #31
   222c6:	f104 0401 	add.w	r4, r4, #1
   222ca:	d501      	bpl.n	222d0 <ll_priv_mode_set+0x38>
   222cc:	454a      	cmp	r2, r9
   222ce:	d006      	beq.n	222de <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   222d0:	2c08      	cmp	r4, #8
   222d2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   222d6:	d1ee      	bne.n	222b6 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   222d8:	2002      	movs	r0, #2
}
   222da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   222de:	4630      	mov	r0, r6
   222e0:	2206      	movs	r2, #6
   222e2:	4651      	mov	r1, sl
   222e4:	f006 fc86 	bl	28bf4 <memcmp>
   222e8:	2800      	cmp	r0, #0
   222ea:	d1f1      	bne.n	222d0 <ll_priv_mode_set+0x38>
		switch (mode) {
   222ec:	f1b8 0f00 	cmp.w	r8, #0
   222f0:	d00e      	beq.n	22310 <ll_priv_mode_set+0x78>
   222f2:	f1b8 0f01 	cmp.w	r8, #1
   222f6:	d108      	bne.n	2230a <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   222f8:	5d7b      	ldrb	r3, [r7, r5]
   222fa:	f043 0310 	orr.w	r3, r3, #16
   222fe:	557b      	strb	r3, [r7, r5]
}
   22300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   22304:	200c      	movs	r0, #12
}
   22306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   2230a:	2012      	movs	r0, #18
}
   2230c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   22310:	5d7b      	ldrb	r3, [r7, r5]
   22312:	f368 1304 	bfi	r3, r8, #4, #1
   22316:	557b      	strb	r3, [r7, r5]
	return 0;
   22318:	4640      	mov	r0, r8
}
   2231a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2231e:	bf00      	nop
   22320:	20001edd 	.word	0x20001edd

00022324 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   22324:	b1a8      	cbz	r0, 22352 <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   22326:	4a0c      	ldr	r2, [pc, #48]	; (22358 <ull_filter_adv_scan_state_cb+0x34>)
		} else {
			return (t * to_hz + off) / from_hz;
   22328:	6812      	ldr	r2, [r2, #0]
{
   2232a:	b510      	push	{r4, lr}
   2232c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   22330:	f240 30e7 	movw	r0, #999	; 0x3e7
   22334:	2100      	movs	r1, #0
   22336:	fbe2 0103 	umlal	r0, r1, r2, r3
   2233a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2233e:	2300      	movs	r3, #0
   22340:	f7ed fede 	bl	10100 <__aeabi_uldivmod>
}
   22344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22348:	4602      	mov	r2, r0
   2234a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2234c:	4803      	ldr	r0, [pc, #12]	; (2235c <ull_filter_adv_scan_state_cb+0x38>)
   2234e:	f004 bdd5 	b.w	26efc <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   22352:	4802      	ldr	r0, [pc, #8]	; (2235c <ull_filter_adv_scan_state_cb+0x38>)
   22354:	f008 bb12 	b.w	2a97c <k_work_cancel_delayable>
   22358:	20002050 	.word	0x20002050
   2235c:	20000fb0 	.word	0x20000fb0

00022360 <ull_filter_adv_update>:
{
   22360:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   22362:	4b09      	ldr	r3, [pc, #36]	; (22388 <ull_filter_adv_update+0x28>)
   22364:	2200      	movs	r2, #0
   22366:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   22368:	b930      	cbnz	r0, 22378 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   2236a:	4b08      	ldr	r3, [pc, #32]	; (2238c <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   2236c:	4a08      	ldr	r2, [pc, #32]	; (22390 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   2236e:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   22370:	2100      	movs	r1, #0
   22372:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   22374:	b91b      	cbnz	r3, 2237e <ull_filter_adv_update+0x1e>
}
   22376:	bd08      	pop	{r3, pc}
		wl_update();
   22378:	f7ff fc20 	bl	21bbc <wl_update>
   2237c:	e7f5      	b.n	2236a <ull_filter_adv_update+0xa>
}
   2237e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   22382:	f7ff bbe3 	b.w	21b4c <rl_update>
   22386:	bf00      	nop
   22388:	20002094 	.word	0x20002094
   2238c:	2000263a 	.word	0x2000263a
   22390:	2000201c 	.word	0x2000201c

00022394 <ull_filter_rpa_update>:
{
   22394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22398:	4683      	mov	fp, r0
   2239a:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   2239c:	f008 fc87 	bl	2acae <z_impl_k_uptime_ticks>
   223a0:	014b      	lsls	r3, r1, #5
   223a2:	0142      	lsls	r2, r0, #5
   223a4:	1a12      	subs	r2, r2, r0
   223a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   223aa:	eb63 0301 	sbc.w	r3, r3, r1
   223ae:	009b      	lsls	r3, r3, #2
   223b0:	ea4f 0982 	mov.w	r9, r2, lsl #2
   223b4:	eb19 0900 	adds.w	r9, r9, r0
   223b8:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   223bc:	eb41 0103 	adc.w	r1, r1, r3
   223c0:	00cb      	lsls	r3, r1, #3
   223c2:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   223c6:	0bd9      	lsrs	r1, r3, #15
   223c8:	f3c9 3910 	ubfx	r9, r9, #12, #17
   223cc:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   223d0:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   223d2:	f1bb 0f00 	cmp.w	fp, #0
   223d6:	d117      	bne.n	22408 <ull_filter_rpa_update+0x74>
   223d8:	4a5d      	ldr	r2, [pc, #372]	; (22550 <ull_filter_rpa_update+0x1bc>)
   223da:	e9d2 3200 	ldrd	r3, r2, [r2]
   223de:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   223e2:	bf08      	it	eq
   223e4:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   223e8:	d00e      	beq.n	22408 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   223ea:	ebb9 0303 	subs.w	r3, r9, r3
   223ee:	eb61 0202 	sbc.w	r2, r1, r2
   223f2:	4958      	ldr	r1, [pc, #352]	; (22554 <ull_filter_rpa_update+0x1c0>)
   223f4:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   223f6:	428b      	cmp	r3, r1
   223f8:	f172 0300 	sbcs.w	r3, r2, #0
   223fc:	bfac      	ite	ge
   223fe:	f04f 0a01 	movge.w	sl, #1
   22402:	f04f 0a00 	movlt.w	sl, #0
   22406:	e001      	b.n	2240c <ull_filter_rpa_update+0x78>
   22408:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   2240c:	4e52      	ldr	r6, [pc, #328]	; (22558 <ull_filter_rpa_update+0x1c4>)
   2240e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2255c <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   22412:	2400      	movs	r4, #0
   22414:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   22418:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2241c:	00a5      	lsls	r5, r4, #2
   2241e:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   22422:	07da      	lsls	r2, r3, #31
   22424:	d515      	bpl.n	22452 <ull_filter_rpa_update+0xbe>
   22426:	f1ba 0f00 	cmp.w	sl, #0
   2242a:	d101      	bne.n	22430 <ull_filter_rpa_update+0x9c>
   2242c:	0798      	lsls	r0, r3, #30
   2242e:	d410      	bmi.n	22452 <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   22430:	192b      	adds	r3, r5, r4
   22432:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   22436:	0759      	lsls	r1, r3, #29
   22438:	d432      	bmi.n	224a0 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   2243a:	192b      	adds	r3, r5, r4
   2243c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   22440:	071a      	lsls	r2, r3, #28
   22442:	d41b      	bmi.n	2247c <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   22444:	4425      	add	r5, r4
   22446:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   2244a:	f043 0302 	orr.w	r3, r3, #2
   2244e:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22452:	3401      	adds	r4, #1
   22454:	2c08      	cmp	r4, #8
   22456:	f108 0806 	add.w	r8, r8, #6
   2245a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   2245e:	d1db      	bne.n	22418 <ull_filter_rpa_update+0x84>
	if (all) {
   22460:	f1ba 0f00 	cmp.w	sl, #0
   22464:	d004      	beq.n	22470 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   22466:	4b3a      	ldr	r3, [pc, #232]	; (22550 <ull_filter_rpa_update+0x1bc>)
   22468:	9a01      	ldr	r2, [sp, #4]
   2246a:	f8c3 9000 	str.w	r9, [r3]
   2246e:	605a      	str	r2, [r3, #4]
	if (timeout) {
   22470:	f1bb 0f00 	cmp.w	fp, #0
   22474:	d138      	bne.n	224e8 <ull_filter_rpa_update+0x154>
}
   22476:	b007      	add	sp, #28
   22478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   2247c:	a902      	add	r1, sp, #8
   2247e:	f1a6 0017 	sub.w	r0, r6, #23
   22482:	f006 fc53 	bl	28d2c <bt_rpa_create>
				LL_ASSERT(!err);
   22486:	2800      	cmp	r0, #0
   22488:	d154      	bne.n	22534 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   2248a:	ab02      	add	r3, sp, #8
   2248c:	f8c6 3006 	str.w	r3, [r6, #6]
   22490:	4619      	mov	r1, r3
   22492:	2206      	movs	r2, #6
   22494:	4640      	mov	r0, r8
   22496:	f006 fbbe 	bl	28c16 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   2249a:	f8c6 8006 	str.w	r8, [r6, #6]
   2249e:	e7d1      	b.n	22444 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   224a0:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   224a4:	4a2e      	ldr	r2, [pc, #184]	; (22560 <ull_filter_rpa_update+0x1cc>)
   224a6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   224aa:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   224ac:	f10d 0307 	add.w	r3, sp, #7
   224b0:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   224b4:	f812 1901 	ldrb.w	r1, [r2], #-1
   224b8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   224bc:	4283      	cmp	r3, r0
   224be:	d1f9      	bne.n	224b4 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   224c0:	4631      	mov	r1, r6
   224c2:	a802      	add	r0, sp, #8
   224c4:	f006 fc32 	bl	28d2c <bt_rpa_create>
				LL_ASSERT(!err);
   224c8:	2800      	cmp	r0, #0
   224ca:	d0b6      	beq.n	2243a <ull_filter_rpa_update+0xa6>
   224cc:	4a25      	ldr	r2, [pc, #148]	; (22564 <ull_filter_rpa_update+0x1d0>)
   224ce:	4926      	ldr	r1, [pc, #152]	; (22568 <ull_filter_rpa_update+0x1d4>)
   224d0:	4826      	ldr	r0, [pc, #152]	; (2256c <ull_filter_rpa_update+0x1d8>)
   224d2:	f240 2323 	movw	r3, #547	; 0x223
   224d6:	f005 fb34 	bl	27b42 <printk>
   224da:	4040      	eors	r0, r0
   224dc:	f380 8811 	msr	BASEPRI, r0
   224e0:	f04f 0003 	mov.w	r0, #3
   224e4:	df02      	svc	2
   224e6:	e7a8      	b.n	2243a <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   224e8:	2000      	movs	r0, #0
   224ea:	f7fa fb3b 	bl	1cb64 <ull_adv_is_enabled_get>
		if (adv) {
   224ee:	4604      	mov	r4, r0
   224f0:	2800      	cmp	r0, #0
   224f2:	d0c0      	beq.n	22476 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   224f4:	f890 304a 	ldrb.w	r3, [r0, #74]	; 0x4a
   224f8:	075b      	lsls	r3, r3, #29
   224fa:	d5bc      	bpl.n	22476 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   224fc:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   22500:	2b07      	cmp	r3, #7
   22502:	d8b8      	bhi.n	22476 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   22504:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   22508:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   2250c:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   2250e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   22510:	3028      	adds	r0, #40	; 0x28
   22512:	f001 f8cd 	bl	236b0 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   22516:	7872      	ldrb	r2, [r6, #1]
   22518:	4605      	mov	r5, r0
   2251a:	3202      	adds	r2, #2
   2251c:	4631      	mov	r1, r6
   2251e:	f006 fb7a 	bl	28c16 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   22522:	4629      	mov	r1, r5
   22524:	4620      	mov	r0, r4
   22526:	f7fa fb7b 	bl	1cc20 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   2252a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   2252e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   22532:	e7a0      	b.n	22476 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   22534:	4a0b      	ldr	r2, [pc, #44]	; (22564 <ull_filter_rpa_update+0x1d0>)
   22536:	490c      	ldr	r1, [pc, #48]	; (22568 <ull_filter_rpa_update+0x1d4>)
   22538:	480c      	ldr	r0, [pc, #48]	; (2256c <ull_filter_rpa_update+0x1d8>)
   2253a:	f44f 730c 	mov.w	r3, #560	; 0x230
   2253e:	f005 fb00 	bl	27b42 <printk>
   22542:	4040      	eors	r0, r0
   22544:	f380 8811 	msr	BASEPRI, r0
   22548:	f04f 0003 	mov.w	r0, #3
   2254c:	df02      	svc	2
   2254e:	e79c      	b.n	2248a <ull_filter_rpa_update+0xf6>
   22550:	20000fa8 	.word	0x20000fa8
   22554:	20002050 	.word	0x20002050
   22558:	20001efa 	.word	0x20001efa
   2255c:	20001e24 	.word	0x20001e24
   22560:	20001e5c 	.word	0x20001e5c
   22564:	0002c10c 	.word	0x0002c10c
   22568:	0002bb88 	.word	0x0002bb88
   2256c:	0002b8dc 	.word	0x0002b8dc

00022570 <rpa_timeout>:
{
   22570:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   22572:	2001      	movs	r0, #1
   22574:	f7ff ff0e 	bl	22394 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   22578:	4a0a      	ldr	r2, [pc, #40]	; (225a4 <rpa_timeout+0x34>)
   2257a:	6812      	ldr	r2, [r2, #0]
   2257c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   22580:	f240 30e7 	movw	r0, #999	; 0x3e7
   22584:	2100      	movs	r1, #0
   22586:	fbe2 0103 	umlal	r0, r1, r2, r3
   2258a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2258e:	2300      	movs	r3, #0
   22590:	f7ed fdb6 	bl	10100 <__aeabi_uldivmod>
}
   22594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22598:	4602      	mov	r2, r0
   2259a:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   2259c:	4802      	ldr	r0, [pc, #8]	; (225a8 <rpa_timeout+0x38>)
   2259e:	f004 bcad 	b.w	26efc <k_work_schedule>
   225a2:	bf00      	nop
   225a4:	20002050 	.word	0x20002050
   225a8:	20000fb0 	.word	0x20000fb0

000225ac <ull_filter_adva_get>:
{
   225ac:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   225ae:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   225b2:	2c07      	cmp	r4, #7
   225b4:	d810      	bhi.n	225d8 <ull_filter_adva_get+0x2c>
   225b6:	4d10      	ldr	r5, [pc, #64]	; (225f8 <ull_filter_adva_get+0x4c>)
   225b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   225bc:	00a6      	lsls	r6, r4, #2
   225be:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   225c2:	071a      	lsls	r2, r3, #28
   225c4:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   225c8:	d505      	bpl.n	225d6 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   225ca:	079b      	lsls	r3, r3, #30
   225cc:	d506      	bpl.n	225dc <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   225ce:	4434      	add	r4, r6
   225d0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   225d4:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   225d6:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   225d8:	2000      	movs	r0, #0
}
   225da:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   225dc:	4a07      	ldr	r2, [pc, #28]	; (225fc <ull_filter_adva_get+0x50>)
   225de:	4908      	ldr	r1, [pc, #32]	; (22600 <ull_filter_adva_get+0x54>)
   225e0:	4808      	ldr	r0, [pc, #32]	; (22604 <ull_filter_adva_get+0x58>)
   225e2:	f240 2356 	movw	r3, #598	; 0x256
   225e6:	f005 faac 	bl	27b42 <printk>
   225ea:	4040      	eors	r0, r0
   225ec:	f380 8811 	msr	BASEPRI, r0
   225f0:	f04f 0003 	mov.w	r0, #3
   225f4:	df02      	svc	2
   225f6:	e7ea      	b.n	225ce <ull_filter_adva_get+0x22>
   225f8:	20001edc 	.word	0x20001edc
   225fc:	0002c10c 	.word	0x0002c10c
   22600:	0002c170 	.word	0x0002c170
   22604:	0002b8dc 	.word	0x0002b8dc

00022608 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   22608:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   2260c:	2b07      	cmp	r3, #7
   2260e:	d80d      	bhi.n	2262c <ull_filter_tgta_get+0x24>
   22610:	4a07      	ldr	r2, [pc, #28]	; (22630 <ull_filter_tgta_get+0x28>)
   22612:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   22616:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   2261a:	f3c1 0080 	ubfx	r0, r1, #2, #1
   2261e:	0749      	lsls	r1, r1, #29
   22620:	d505      	bpl.n	2262e <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   22622:	2028      	movs	r0, #40	; 0x28
   22624:	fb00 2003 	mla	r0, r0, r3, r2
   22628:	301e      	adds	r0, #30
   2262a:	4770      	bx	lr
	return NULL;
   2262c:	2000      	movs	r0, #0
}
   2262e:	4770      	bx	lr
   22630:	20001edc 	.word	0x20001edc

00022634 <ull_filter_rl_find>:
{
   22634:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22638:	468b      	mov	fp, r1
	if (free) {
   2263a:	4617      	mov	r7, r2
   2263c:	b10a      	cbz	r2, 22642 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   2263e:	23ff      	movs	r3, #255	; 0xff
   22640:	7013      	strb	r3, [r2, #0]
   22642:	4d1b      	ldr	r5, [pc, #108]	; (226b0 <ull_filter_rl_find+0x7c>)
{
   22644:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22646:	f000 0a01 	and.w	sl, r0, #1
   2264a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   2264e:	e006      	b.n	2265e <ull_filter_rl_find+0x2a>
   22650:	4552      	cmp	r2, sl
   22652:	d01f      	beq.n	22694 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22654:	3401      	adds	r4, #1
   22656:	2c08      	cmp	r4, #8
   22658:	f105 0528 	add.w	r5, r5, #40	; 0x28
   2265c:	d015      	beq.n	2268a <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   2265e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   22662:	fa5f f884 	uxtb.w	r8, r4
   22666:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   2266a:	07d9      	lsls	r1, r3, #31
   2266c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   22670:	d4ee      	bmi.n	22650 <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   22672:	2f00      	cmp	r7, #0
   22674:	d0ee      	beq.n	22654 <ull_filter_rl_find+0x20>
   22676:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22678:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   2267a:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   2267c:	bf08      	it	eq
   2267e:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22682:	2c08      	cmp	r4, #8
   22684:	f105 0528 	add.w	r5, r5, #40	; 0x28
   22688:	d1e9      	bne.n	2265e <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   2268a:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   2268e:	4640      	mov	r0, r8
   22690:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   22694:	4628      	mov	r0, r5
   22696:	2206      	movs	r2, #6
   22698:	4659      	mov	r1, fp
   2269a:	f006 faab 	bl	28bf4 <memcmp>
   2269e:	2800      	cmp	r0, #0
   226a0:	d0f5      	beq.n	2268e <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   226a2:	2f00      	cmp	r7, #0
   226a4:	d0d6      	beq.n	22654 <ull_filter_rl_find+0x20>
   226a6:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   226aa:	07db      	lsls	r3, r3, #31
   226ac:	d4d2      	bmi.n	22654 <ull_filter_rl_find+0x20>
   226ae:	e7e2      	b.n	22676 <ull_filter_rl_find+0x42>
   226b0:	20001edd 	.word	0x20001edd

000226b4 <ll_rl_add>:
{
   226b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   226b8:	4680      	mov	r8, r0
   226ba:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   226bc:	2000      	movs	r0, #0
{
   226be:	460e      	mov	r6, r1
   226c0:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   226c2:	f7fa fa5d 	bl	1cb80 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   226c6:	2800      	cmp	r0, #0
   226c8:	d17d      	bne.n	227c6 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   226ca:	46c2      	mov	sl, r8
   226cc:	4604      	mov	r4, r0
   226ce:	f81a 0b01 	ldrb.w	r0, [sl], #1
   226d2:	f10d 020f 	add.w	r2, sp, #15
   226d6:	4651      	mov	r1, sl
   226d8:	f7ff ffac 	bl	22634 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   226dc:	2807      	cmp	r0, #7
   226de:	f240 80b5 	bls.w	2284c <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   226e2:	f89d 700f 	ldrb.w	r7, [sp, #15]
   226e6:	2f07      	cmp	r7, #7
   226e8:	f200 8084 	bhi.w	227f4 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   226ec:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   226f0:	4d58      	ldr	r5, [pc, #352]	; (22854 <ll_rl_add+0x1a0>)
   226f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   226f6:	1c58      	adds	r0, r3, #1
   226f8:	2206      	movs	r2, #6
   226fa:	4651      	mov	r1, sl
   226fc:	4428      	add	r0, r5
   226fe:	9300      	str	r3, [sp, #0]
   22700:	f006 fa89 	bl	28c16 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   22704:	f898 3000 	ldrb.w	r3, [r8]
   22708:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   2270c:	465a      	mov	r2, fp
   2270e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   22712:	f363 1186 	bfi	r1, r3, #6, #1
   22716:	f805 100b 	strb.w	r1, [r5, fp]
   2271a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   2271e:	2110      	movs	r1, #16
   22720:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   22722:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   22724:	f7f5 fdc0 	bl	182a8 <mem_nz>
   22728:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   2272c:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   2272e:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   22732:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   22734:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   22738:	f7f5 fdb6 	bl	182a8 <mem_nz>
   2273c:	f815 200b 	ldrb.w	r2, [r5, fp]
   22740:	f000 0001 	and.w	r0, r0, #1
   22744:	f360 02c3 	bfi	r2, r0, #3, #1
   22748:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   2274c:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   2274e:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   22752:	d453      	bmi.n	227fc <ll_rl_add+0x148>
	if (rl[i].lirk) {
   22754:	2800      	cmp	r0, #0
   22756:	d16b      	bne.n	22830 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   22758:	9800      	ldr	r0, [sp, #0]
   2275a:	4e3f      	ldr	r6, [pc, #252]	; (22858 <ll_rl_add+0x1a4>)
   2275c:	3018      	adds	r0, #24
   2275e:	2206      	movs	r2, #6
   22760:	2100      	movs	r1, #0
   22762:	4428      	add	r0, r5
   22764:	f006 fa82 	bl	28c6c <memset>
	rl[i].dev = 0U;
   22768:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   2276c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   22770:	f021 0112 	bic.w	r1, r1, #18
   22774:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   22778:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   2277c:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   22780:	f009 0901 	and.w	r9, r9, #1
   22784:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   22788:	07d3      	lsls	r3, r2, #31
   2278a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   2278e:	d501      	bpl.n	22794 <ll_rl_add+0xe0>
   22790:	4549      	cmp	r1, r9
   22792:	d01c      	beq.n	227ce <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   22794:	3401      	adds	r4, #1
   22796:	2c08      	cmp	r4, #8
   22798:	f106 0608 	add.w	r6, r6, #8
   2279c:	d1f2      	bne.n	22784 <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   2279e:	eb0b 0207 	add.w	r2, fp, r7
   227a2:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   227a6:	f36f 1145 	bfc	r1, #5, #1
   227aa:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   227ae:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   227b2:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   227b4:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   227b8:	f042 0201 	orr.w	r2, r2, #1
   227bc:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   227c0:	b005      	add	sp, #20
   227c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   227c6:	200c      	movs	r0, #12
}
   227c8:	b005      	add	sp, #20
   227ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   227ce:	2206      	movs	r2, #6
   227d0:	4630      	mov	r0, r6
   227d2:	4651      	mov	r1, sl
   227d4:	f006 fa0e 	bl	28bf4 <memcmp>
   227d8:	2800      	cmp	r0, #0
   227da:	d1db      	bne.n	22794 <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   227dc:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   227e0:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   227e4:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   227e8:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   227ea:	f041 0120 	orr.w	r1, r1, #32
   227ee:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   227f2:	e7dc      	b.n	227ae <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   227f4:	2007      	movs	r0, #7
}
   227f6:	b005      	add	sp, #20
   227f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   227fc:	4b17      	ldr	r3, [pc, #92]	; (2285c <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   227fe:	4a18      	ldr	r2, [pc, #96]	; (22860 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   22800:	7819      	ldrb	r1, [r3, #0]
   22802:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   22806:	5457      	strb	r7, [r2, r1]
   22808:	4a16      	ldr	r2, [pc, #88]	; (22864 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   2280a:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   2280e:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   22812:	3101      	adds	r1, #1
	psrc += length - 1;
   22814:	f106 020f 	add.w	r2, r6, #15
   22818:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   2281a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   2281e:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   22820:	f812 1901 	ldrb.w	r1, [r2], #-1
   22824:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   22828:	42b2      	cmp	r2, r6
   2282a:	d1f9      	bne.n	22820 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   2282c:	2800      	cmp	r0, #0
   2282e:	d093      	beq.n	22758 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   22830:	9b00      	ldr	r3, [sp, #0]
   22832:	1dd8      	adds	r0, r3, #7
   22834:	4649      	mov	r1, r9
   22836:	2210      	movs	r2, #16
   22838:	4428      	add	r0, r5
   2283a:	f006 f9ec 	bl	28c16 <memcpy>
		rl[i].local_rpa = NULL;
   2283e:	eb0b 0207 	add.w	r2, fp, r7
   22842:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   22846:	2100      	movs	r1, #0
   22848:	6251      	str	r1, [r2, #36]	; 0x24
   2284a:	e785      	b.n	22758 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   2284c:	2012      	movs	r0, #18
}
   2284e:	b005      	add	sp, #20
   22850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22854:	20001edc 	.word	0x20001edc
   22858:	20002056 	.word	0x20002056
   2285c:	20002639 	.word	0x20002639
   22860:	20001e54 	.word	0x20001e54
   22864:	20001e5c 	.word	0x20001e5c

00022868 <ull_filter_reset>:
	wl_anon = 0U;
   22868:	4a31      	ldr	r2, [pc, #196]	; (22930 <ull_filter_reset+0xc8>)
   2286a:	4932      	ldr	r1, [pc, #200]	; (22934 <ull_filter_reset+0xcc>)
{
   2286c:	b4d0      	push	{r4, r6, r7}
	wl_anon = 0U;
   2286e:	2300      	movs	r3, #0
   22870:	4c31      	ldr	r4, [pc, #196]	; (22938 <ull_filter_reset+0xd0>)
   22872:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   22874:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   22878:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   2287a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   2287c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   22880:	d805      	bhi.n	2288e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   22882:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   22886:	f36f 1245 	bfc	r2, #5, #1
   2288a:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		wl[i].taken = 0U;
   2288e:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   22892:	f36f 0200 	bfc	r2, #0, #1
   22896:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   2289a:	3301      	adds	r3, #1
   2289c:	2b08      	cmp	r3, #8
   2289e:	d1e9      	bne.n	22874 <ull_filter_reset+0xc>
	rl_enable = 0U;
   228a0:	4a26      	ldr	r2, [pc, #152]	; (2293c <ull_filter_reset+0xd4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   228a2:	4c27      	ldr	r4, [pc, #156]	; (22940 <ull_filter_reset+0xd8>)
	rl_enable = 0U;
   228a4:	2300      	movs	r3, #0
   228a6:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   228a8:	780a      	ldrb	r2, [r1, #0]
   228aa:	f363 0200 	bfi	r2, r3, #0, #1
   228ae:	700a      	strb	r2, [r1, #0]
   228b0:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   228b4:	f363 0200 	bfi	r2, r3, #0, #1
   228b8:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   228bc:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   228c0:	f363 0200 	bfi	r2, r3, #0, #1
   228c4:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   228c8:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   228cc:	f363 0200 	bfi	r2, r3, #0, #1
   228d0:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   228d4:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   228d8:	f363 0200 	bfi	r2, r3, #0, #1
   228dc:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   228e0:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   228e4:	f363 0200 	bfi	r2, r3, #0, #1
   228e8:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   228ec:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   228f0:	f363 0200 	bfi	r2, r3, #0, #1
   228f4:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   228f8:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   228fc:	f363 0200 	bfi	r2, r3, #0, #1
   22900:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   22904:	4a0f      	ldr	r2, [pc, #60]	; (22944 <ull_filter_reset+0xdc>)
   22906:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   22908:	4b0f      	ldr	r3, [pc, #60]	; (22948 <ull_filter_reset+0xe0>)
   2290a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2290e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   22912:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   22916:	4b0d      	ldr	r3, [pc, #52]	; (2294c <ull_filter_reset+0xe4>)
   22918:	6023      	str	r3, [r4, #0]
	if (init) {
   2291a:	b120      	cbz	r0, 22926 <ull_filter_reset+0xbe>
}
   2291c:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   2291e:	490c      	ldr	r1, [pc, #48]	; (22950 <ull_filter_reset+0xe8>)
   22920:	480c      	ldr	r0, [pc, #48]	; (22954 <ull_filter_reset+0xec>)
   22922:	f008 b81f 	b.w	2a964 <k_work_init_delayable>
}
   22926:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   22928:	480a      	ldr	r0, [pc, #40]	; (22954 <ull_filter_reset+0xec>)
   2292a:	f008 b827 	b.w	2a97c <k_work_cancel_delayable>
   2292e:	bf00      	nop
   22930:	2000263b 	.word	0x2000263b
   22934:	20001edc 	.word	0x20001edc
   22938:	20002054 	.word	0x20002054
   2293c:	2000263a 	.word	0x2000263a
   22940:	20002050 	.word	0x20002050
   22944:	20002639 	.word	0x20002639
   22948:	20000fa8 	.word	0x20000fa8
   2294c:	000dbba0 	.word	0x000dbba0
   22950:	00022571 	.word	0x00022571
   22954:	20000fb0 	.word	0x20000fb0

00022958 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   22958:	2807      	cmp	r0, #7
   2295a:	d807      	bhi.n	2296c <ull_filter_lll_lrpa_used+0x14>
   2295c:	4b04      	ldr	r3, [pc, #16]	; (22970 <ull_filter_lll_lrpa_used+0x18>)
   2295e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   22962:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   22966:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   2296a:	4770      	bx	lr
   2296c:	2000      	movs	r0, #0
}
   2296e:	4770      	bx	lr
   22970:	20001edc 	.word	0x20001edc

00022974 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   22974:	4b02      	ldr	r3, [pc, #8]	; (22980 <ull_filter_lll_irks_get+0xc>)
   22976:	781b      	ldrb	r3, [r3, #0]
   22978:	7003      	strb	r3, [r0, #0]
}
   2297a:	4802      	ldr	r0, [pc, #8]	; (22984 <ull_filter_lll_irks_get+0x10>)
   2297c:	4770      	bx	lr
   2297e:	bf00      	nop
   22980:	20002639 	.word	0x20002639
   22984:	20001e5c 	.word	0x20001e5c

00022988 <ull_filter_lll_rl_irk_idx>:
{
   22988:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   2298a:	4b20      	ldr	r3, [pc, #128]	; (22a0c <ull_filter_lll_rl_irk_idx+0x84>)
   2298c:	781b      	ldrb	r3, [r3, #0]
   2298e:	4283      	cmp	r3, r0
{
   22990:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   22992:	d90c      	bls.n	229ae <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   22994:	4b1e      	ldr	r3, [pc, #120]	; (22a10 <ull_filter_lll_rl_irk_idx+0x88>)
   22996:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   22998:	2c07      	cmp	r4, #7
   2299a:	d819      	bhi.n	229d0 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   2299c:	4b1d      	ldr	r3, [pc, #116]	; (22a14 <ull_filter_lll_rl_irk_idx+0x8c>)
   2299e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   229a2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   229a6:	07db      	lsls	r3, r3, #31
   229a8:	d520      	bpl.n	229ec <ull_filter_lll_rl_irk_idx+0x64>
}
   229aa:	4620      	mov	r0, r4
   229ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   229ae:	4a1a      	ldr	r2, [pc, #104]	; (22a18 <ull_filter_lll_rl_irk_idx+0x90>)
   229b0:	491a      	ldr	r1, [pc, #104]	; (22a1c <ull_filter_lll_rl_irk_idx+0x94>)
   229b2:	481b      	ldr	r0, [pc, #108]	; (22a20 <ull_filter_lll_rl_irk_idx+0x98>)
   229b4:	f240 23c6 	movw	r3, #710	; 0x2c6
   229b8:	f005 f8c3 	bl	27b42 <printk>
   229bc:	4040      	eors	r0, r0
   229be:	f380 8811 	msr	BASEPRI, r0
   229c2:	f04f 0003 	mov.w	r0, #3
   229c6:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   229c8:	4b11      	ldr	r3, [pc, #68]	; (22a10 <ull_filter_lll_rl_irk_idx+0x88>)
   229ca:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   229cc:	2c07      	cmp	r4, #7
   229ce:	d9e5      	bls.n	2299c <ull_filter_lll_rl_irk_idx+0x14>
   229d0:	4a11      	ldr	r2, [pc, #68]	; (22a18 <ull_filter_lll_rl_irk_idx+0x90>)
   229d2:	4914      	ldr	r1, [pc, #80]	; (22a24 <ull_filter_lll_rl_irk_idx+0x9c>)
   229d4:	4812      	ldr	r0, [pc, #72]	; (22a20 <ull_filter_lll_rl_irk_idx+0x98>)
   229d6:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   229da:	f005 f8b2 	bl	27b42 <printk>
   229de:	4040      	eors	r0, r0
   229e0:	f380 8811 	msr	BASEPRI, r0
   229e4:	f04f 0003 	mov.w	r0, #3
   229e8:	df02      	svc	2
   229ea:	e7d7      	b.n	2299c <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   229ec:	4a0a      	ldr	r2, [pc, #40]	; (22a18 <ull_filter_lll_rl_irk_idx+0x90>)
   229ee:	490e      	ldr	r1, [pc, #56]	; (22a28 <ull_filter_lll_rl_irk_idx+0xa0>)
   229f0:	480b      	ldr	r0, [pc, #44]	; (22a20 <ull_filter_lll_rl_irk_idx+0x98>)
   229f2:	f240 23c9 	movw	r3, #713	; 0x2c9
   229f6:	f005 f8a4 	bl	27b42 <printk>
   229fa:	4040      	eors	r0, r0
   229fc:	f380 8811 	msr	BASEPRI, r0
   22a00:	f04f 0003 	mov.w	r0, #3
   22a04:	df02      	svc	2
}
   22a06:	4620      	mov	r0, r4
   22a08:	bd10      	pop	{r4, pc}
   22a0a:	bf00      	nop
   22a0c:	20002639 	.word	0x20002639
   22a10:	20001e54 	.word	0x20001e54
   22a14:	20001edc 	.word	0x20001edc
   22a18:	0002c10c 	.word	0x0002c10c
   22a1c:	0002c2f0 	.word	0x0002c2f0
   22a20:	0002b8dc 	.word	0x0002b8dc
   22a24:	0002c310 	.word	0x0002c310
   22a28:	0002c2e4 	.word	0x0002c2e4

00022a2c <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   22a2c:	2807      	cmp	r0, #7
   22a2e:	d823      	bhi.n	22a78 <ull_filter_lll_irk_whitelisted+0x4c>
{
   22a30:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   22a32:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   22a36:	4e11      	ldr	r6, [pc, #68]	; (22a7c <ull_filter_lll_irk_whitelisted+0x50>)
   22a38:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   22a3c:	07db      	lsls	r3, r3, #31
   22a3e:	4604      	mov	r4, r0
   22a40:	ea4f 0580 	mov.w	r5, r0, lsl #2
   22a44:	d505      	bpl.n	22a52 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   22a46:	442c      	add	r4, r5
   22a48:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   22a4c:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   22a50:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   22a52:	4a0b      	ldr	r2, [pc, #44]	; (22a80 <ull_filter_lll_irk_whitelisted+0x54>)
   22a54:	490b      	ldr	r1, [pc, #44]	; (22a84 <ull_filter_lll_irk_whitelisted+0x58>)
   22a56:	480c      	ldr	r0, [pc, #48]	; (22a88 <ull_filter_lll_irk_whitelisted+0x5c>)
   22a58:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   22a5c:	f005 f871 	bl	27b42 <printk>
   22a60:	4040      	eors	r0, r0
   22a62:	f380 8811 	msr	BASEPRI, r0
   22a66:	f04f 0003 	mov.w	r0, #3
   22a6a:	df02      	svc	2
	return rl[rl_idx].wl;
   22a6c:	442c      	add	r4, r5
   22a6e:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   22a72:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   22a76:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   22a78:	2000      	movs	r0, #0
}
   22a7a:	4770      	bx	lr
   22a7c:	20001edc 	.word	0x20001edc
   22a80:	0002c10c 	.word	0x0002c10c
   22a84:	0002c15c 	.word	0x0002c15c
   22a88:	0002b8dc 	.word	0x0002b8dc

00022a8c <ull_filter_lll_get>:
		return &wl_filter;
   22a8c:	4a03      	ldr	r2, [pc, #12]	; (22a9c <ull_filter_lll_get+0x10>)
   22a8e:	4b04      	ldr	r3, [pc, #16]	; (22aa0 <ull_filter_lll_get+0x14>)
}
   22a90:	2800      	cmp	r0, #0
   22a92:	bf0c      	ite	eq
   22a94:	4610      	moveq	r0, r2
   22a96:	4618      	movne	r0, r3
   22a98:	4770      	bx	lr
   22a9a:	bf00      	nop
   22a9c:	2000201c 	.word	0x2000201c
   22aa0:	20002094 	.word	0x20002094

00022aa4 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   22aa4:	7813      	ldrb	r3, [r2, #0]
   22aa6:	2bff      	cmp	r3, #255	; 0xff
   22aa8:	d11b      	bne.n	22ae2 <ull_filter_lll_rl_addr_allowed+0x3e>
{
   22aaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22aae:	4d19      	ldr	r5, [pc, #100]	; (22b14 <ull_filter_lll_rl_addr_allowed+0x70>)
   22ab0:	4604      	mov	r4, r0
   22ab2:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   22ab4:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   22ab6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   22aba:	b2df      	uxtb	r7, r3
   22abc:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   22ac0:	f01c 0001 	ands.w	r0, ip, #1
   22ac4:	ea4f 0683 	mov.w	r6, r3, lsl #2
   22ac8:	d003      	beq.n	22ad2 <ull_filter_lll_rl_addr_allowed+0x2e>
   22aca:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   22ace:	45a4      	cmp	ip, r4
   22ad0:	d009      	beq.n	22ae6 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   22ad2:	3301      	adds	r3, #1
   22ad4:	2b08      	cmp	r3, #8
   22ad6:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   22ada:	d1ec      	bne.n	22ab6 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   22adc:	2001      	movs	r0, #1
}
   22ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   22ae2:	2001      	movs	r0, #1
}
   22ae4:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   22ae6:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   22aea:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   22aec:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   22af0:	f81c af01 	ldrb.w	sl, [ip, #1]!
   22af4:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   22af8:	45ca      	cmp	sl, r9
   22afa:	d1ea      	bne.n	22ad2 <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   22afc:	45dc      	cmp	ip, fp
   22afe:	d1f7      	bne.n	22af0 <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   22b00:	4433      	add	r3, r6
				*rl_idx = i;
   22b02:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   22b04:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   22b08:	075a      	lsls	r2, r3, #29
   22b0a:	d5e8      	bpl.n	22ade <ull_filter_lll_rl_addr_allowed+0x3a>
   22b0c:	f3c3 1000 	ubfx	r0, r3, #4, #1
   22b10:	e7e5      	b.n	22ade <ull_filter_lll_rl_addr_allowed+0x3a>
   22b12:	bf00      	nop
   22b14:	20001edc 	.word	0x20001edc

00022b18 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   22b18:	4b02      	ldr	r3, [pc, #8]	; (22b24 <ull_filter_lll_rl_enabled+0xc>)
   22b1a:	7818      	ldrb	r0, [r3, #0]
}
   22b1c:	3800      	subs	r0, #0
   22b1e:	bf18      	it	ne
   22b20:	2001      	movne	r0, #1
   22b22:	4770      	bx	lr
   22b24:	2000263a 	.word	0x2000263a

00022b28 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   22b28:	4668      	mov	r0, sp
   22b2a:	f020 0107 	bic.w	r1, r0, #7
   22b2e:	468d      	mov	sp, r1
   22b30:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   22b32:	f001 ff55 	bl	249e0 <isr_radio>

	ISR_DIRECT_PM();
   22b36:	f7f0 f925 	bl	12d84 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   22b3a:	f7f0 fc55 	bl	133e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   22b3e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   22b42:	4685      	mov	sp, r0
   22b44:	4770      	bx	lr
   22b46:	bf00      	nop

00022b48 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   22b48:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   22b4a:	4b09      	ldr	r3, [pc, #36]	; (22b70 <rtc0_nrf5_isr+0x28>)
   22b4c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   22b50:	b93a      	cbnz	r2, 22b62 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   22b52:	2001      	movs	r0, #1
   22b54:	f7f5 fc8a 	bl	1846c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   22b58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   22b5c:	2002      	movs	r0, #2
   22b5e:	f7f5 bc85 	b.w	1846c <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   22b62:	2000      	movs	r0, #0
   22b64:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   22b68:	f7f6 fd00 	bl	1956c <ticker_trigger>
   22b6c:	e7f1      	b.n	22b52 <rtc0_nrf5_isr+0xa>
   22b6e:	bf00      	nop
   22b70:	4000b000 	.word	0x4000b000

00022b74 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   22b74:	2000      	movs	r0, #0
   22b76:	f7f5 bc79 	b.w	1846c <mayfly_run>
   22b7a:	bf00      	nop

00022b7c <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   22b7c:	f002 b84a 	b.w	24c14 <radio_status_reset>

00022b80 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   22b80:	2801      	cmp	r0, #1
   22b82:	d800      	bhi.n	22b86 <ticker_stop_op_cb+0x6>
   22b84:	4770      	bx	lr
{
   22b86:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   22b88:	4a06      	ldr	r2, [pc, #24]	; (22ba4 <ticker_stop_op_cb+0x24>)
   22b8a:	4907      	ldr	r1, [pc, #28]	; (22ba8 <ticker_stop_op_cb+0x28>)
   22b8c:	4807      	ldr	r0, [pc, #28]	; (22bac <ticker_stop_op_cb+0x2c>)
   22b8e:	f240 23eb 	movw	r3, #747	; 0x2eb
   22b92:	f004 ffd6 	bl	27b42 <printk>
   22b96:	4040      	eors	r0, r0
   22b98:	f380 8811 	msr	BASEPRI, r0
   22b9c:	f04f 0003 	mov.w	r0, #3
   22ba0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   22ba2:	bd08      	pop	{r3, pc}
   22ba4:	0002c32c 	.word	0x0002c32c
   22ba8:	0002c374 	.word	0x0002c374
   22bac:	0002b8dc 	.word	0x0002b8dc

00022bb0 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   22bb0:	2801      	cmp	r0, #1
   22bb2:	d800      	bhi.n	22bb6 <ticker_start_op_cb+0x6>
   22bb4:	4770      	bx	lr
{
   22bb6:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   22bb8:	4a06      	ldr	r2, [pc, #24]	; (22bd4 <ticker_start_op_cb+0x24>)
   22bba:	4907      	ldr	r1, [pc, #28]	; (22bd8 <ticker_start_op_cb+0x28>)
   22bbc:	4807      	ldr	r0, [pc, #28]	; (22bdc <ticker_start_op_cb+0x2c>)
   22bbe:	f240 23f6 	movw	r3, #758	; 0x2f6
   22bc2:	f004 ffbe 	bl	27b42 <printk>
   22bc6:	4040      	eors	r0, r0
   22bc8:	f380 8811 	msr	BASEPRI, r0
   22bcc:	f04f 0003 	mov.w	r0, #3
   22bd0:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   22bd2:	bd08      	pop	{r3, pc}
   22bd4:	0002c32c 	.word	0x0002c32c
   22bd8:	0002c374 	.word	0x0002c374
   22bdc:	0002b8dc 	.word	0x0002b8dc

00022be0 <preempt_ticker_cb>:
	return ret;
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
			       uint16_t lazy, uint8_t force, void *param)
{
   22be0:	b508      	push	{r3, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	mfy.param = param;
   22be2:	4b0c      	ldr	r3, [pc, #48]	; (22c14 <preempt_ticker_cb+0x34>)
{
   22be4:	9802      	ldr	r0, [sp, #8]
	mfy.param = param;
   22be6:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   22be8:	2200      	movs	r2, #0
   22bea:	4611      	mov	r1, r2
   22bec:	2001      	movs	r0, #1
   22bee:	f7f5 fbe9 	bl	183c4 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   22bf2:	b900      	cbnz	r0, 22bf6 <preempt_ticker_cb+0x16>
}
   22bf4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   22bf6:	4a08      	ldr	r2, [pc, #32]	; (22c18 <preempt_ticker_cb+0x38>)
   22bf8:	4908      	ldr	r1, [pc, #32]	; (22c1c <preempt_ticker_cb+0x3c>)
   22bfa:	4809      	ldr	r0, [pc, #36]	; (22c20 <preempt_ticker_cb+0x40>)
   22bfc:	f240 3325 	movw	r3, #805	; 0x325
   22c00:	f004 ff9f 	bl	27b42 <printk>
   22c04:	4040      	eors	r0, r0
   22c06:	f380 8811 	msr	BASEPRI, r0
   22c0a:	f04f 0003 	mov.w	r0, #3
   22c0e:	df02      	svc	2
}
   22c10:	bd08      	pop	{r3, pc}
   22c12:	bf00      	nop
   22c14:	200004c4 	.word	0x200004c4
   22c18:	0002c32c 	.word	0x0002c32c
   22c1c:	0002bc88 	.word	0x0002bc88
   22c20:	0002b8dc 	.word	0x0002b8dc

00022c24 <preempt_ticker_start.constprop.0>:
static uint32_t preempt_ticker_start(struct lll_event *event,
   22c24:	b530      	push	{r4, r5, lr}
	ull = HDR_LLL2ULL(p->param);
   22c26:	68c3      	ldr	r3, [r0, #12]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   22c28:	4c0e      	ldr	r4, [pc, #56]	; (22c64 <preempt_ticker_start.constprop.0+0x40>)
   22c2a:	490f      	ldr	r1, [pc, #60]	; (22c68 <preempt_ticker_start.constprop.0+0x44>)
	ull = HDR_LLL2ULL(p->param);
   22c2c:	681b      	ldr	r3, [r3, #0]
static uint32_t preempt_ticker_start(struct lll_event *event,
   22c2e:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   22c30:	2200      	movs	r2, #0
   22c32:	e9cd 4007 	strd	r4, r0, [sp, #28]
   22c36:	e9cd 1005 	strd	r1, r0, [sp, #20]
   22c3a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   22c3e:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(ull->ticks_active_to_start,
   22c42:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
   22c46:	68d9      	ldr	r1, [r3, #12]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   22c48:	6803      	ldr	r3, [r0, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   22c4a:	42a5      	cmp	r5, r4
   22c4c:	bf2c      	ite	cs
   22c4e:	ebc1 0105 	rsbcs	r1, r1, r5
   22c52:	ebc1 0104 	rsbcc	r1, r1, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   22c56:	9100      	str	r1, [sp, #0]
   22c58:	4610      	mov	r0, r2
   22c5a:	4611      	mov	r1, r2
   22c5c:	f7f6 fcf4 	bl	19648 <ticker_start>
}
   22c60:	b00b      	add	sp, #44	; 0x2c
   22c62:	bd30      	pop	{r4, r5, pc}
   22c64:	00022bb1 	.word	0x00022bb1
   22c68:	00022be1 	.word	0x00022be1

00022c6c <preempt>:

static void preempt(void *param)
{
   22c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   22c6e:	4e4a      	ldr	r6, [pc, #296]	; (22d98 <preempt+0x12c>)
   22c70:	68b3      	ldr	r3, [r6, #8]
{
   22c72:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   22c74:	b1b3      	cbz	r3, 22ca4 <preempt+0x38>
   22c76:	6833      	ldr	r3, [r6, #0]
   22c78:	b1a3      	cbz	r3, 22ca4 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   22c7a:	23ff      	movs	r3, #255	; 0xff
   22c7c:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   22c7e:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   22c82:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   22c86:	f7f9 fa8d 	bl	1c1a4 <ull_prepare_dequeue_iter>
	if (!next) {
   22c8a:	4603      	mov	r3, r0
   22c8c:	b150      	cbz	r0, 22ca4 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   22c8e:	7f1a      	ldrb	r2, [r3, #28]
   22c90:	f012 0403 	ands.w	r4, r2, #3
		next = ull_prepare_dequeue_iter(&idx);
   22c94:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   22c98:	d006      	beq.n	22ca8 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   22c9a:	f7f9 fa83 	bl	1c1a4 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   22c9e:	4603      	mov	r3, r0
   22ca0:	2800      	cmp	r0, #0
   22ca2:	d1f4      	bne.n	22c8e <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   22ca4:	b009      	add	sp, #36	; 0x24
   22ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   22ca8:	429d      	cmp	r5, r3
   22caa:	d126      	bne.n	22cfa <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   22cac:	6873      	ldr	r3, [r6, #4]
   22cae:	6831      	ldr	r1, [r6, #0]
   22cb0:	68e8      	ldr	r0, [r5, #12]
   22cb2:	aa03      	add	r2, sp, #12
   22cb4:	4798      	blx	r3
	if (!err) {
   22cb6:	4607      	mov	r7, r0
   22cb8:	b1b0      	cbz	r0, 22ce8 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   22cba:	68b3      	ldr	r3, [r6, #8]
   22cbc:	6831      	ldr	r1, [r6, #0]
   22cbe:	4620      	mov	r0, r4
   22cc0:	4798      	blx	r3
	if (err == -EAGAIN) {
   22cc2:	f117 0f0b 	cmn.w	r7, #11
   22cc6:	d02b      	beq.n	22d20 <preempt+0xb4>
		LL_ASSERT(err == -ECANCELED);
   22cc8:	378c      	adds	r7, #140	; 0x8c
   22cca:	d0eb      	beq.n	22ca4 <preempt+0x38>
   22ccc:	4a33      	ldr	r2, [pc, #204]	; (22d9c <preempt+0x130>)
   22cce:	4934      	ldr	r1, [pc, #208]	; (22da0 <preempt+0x134>)
   22cd0:	4834      	ldr	r0, [pc, #208]	; (22da4 <preempt+0x138>)
   22cd2:	f44f 7360 	mov.w	r3, #896	; 0x380
   22cd6:	f004 ff34 	bl	27b42 <printk>
   22cda:	4040      	eors	r0, r0
   22cdc:	f380 8811 	msr	BASEPRI, r0
   22ce0:	f04f 0003 	mov.w	r0, #3
   22ce4:	df02      	svc	2
   22ce6:	e7dd      	b.n	22ca4 <preempt+0x38>
		next->is_aborted = 1;
   22ce8:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   22cea:	69aa      	ldr	r2, [r5, #24]
   22cec:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   22cee:	f043 0302 	orr.w	r3, r3, #2
   22cf2:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   22cf4:	4628      	mov	r0, r5
   22cf6:	4790      	blx	r2
		return;
   22cf8:	e7d4      	b.n	22ca4 <preempt+0x38>
		ret = preempt_ticker_start(next, ticker_start_op_cb);
   22cfa:	4618      	mov	r0, r3
   22cfc:	f7ff ff92 	bl	22c24 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   22d00:	2802      	cmp	r0, #2
   22d02:	d9cf      	bls.n	22ca4 <preempt+0x38>
   22d04:	4a25      	ldr	r2, [pc, #148]	; (22d9c <preempt+0x130>)
   22d06:	4928      	ldr	r1, [pc, #160]	; (22da8 <preempt+0x13c>)
   22d08:	4826      	ldr	r0, [pc, #152]	; (22da4 <preempt+0x138>)
   22d0a:	f240 334b 	movw	r3, #843	; 0x34b
   22d0e:	f004 ff18 	bl	27b42 <printk>
   22d12:	4040      	eors	r0, r0
   22d14:	f380 8811 	msr	BASEPRI, r0
   22d18:	f04f 0003 	mov.w	r0, #3
   22d1c:	df02      	svc	2
   22d1e:	e7c1      	b.n	22ca4 <preempt+0x38>
		iter_idx = UINT8_MAX;
   22d20:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   22d22:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   22d26:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   22d2a:	f7f9 fa3b 	bl	1c1a4 <ull_prepare_dequeue_iter>
		while (iter) {
   22d2e:	b928      	cbnz	r0, 22d3c <preempt+0xd0>
   22d30:	e013      	b.n	22d5a <preempt+0xee>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   22d32:	f10d 000b 	add.w	r0, sp, #11
   22d36:	f7f9 fa35 	bl	1c1a4 <ull_prepare_dequeue_iter>
		while (iter) {
   22d3a:	b170      	cbz	r0, 22d5a <preempt+0xee>
			if (!iter->is_aborted &&
   22d3c:	7f03      	ldrb	r3, [r0, #28]
   22d3e:	079a      	lsls	r2, r3, #30
   22d40:	d4f7      	bmi.n	22d32 <preempt+0xc6>
			    event.curr.param == iter->prepare_param.param) {
   22d42:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   22d44:	6831      	ldr	r1, [r6, #0]
   22d46:	4291      	cmp	r1, r2
   22d48:	d1f3      	bne.n	22d32 <preempt+0xc6>
				iter->is_aborted = 1;
   22d4a:	f043 0302 	orr.w	r3, r3, #2
   22d4e:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   22d50:	6983      	ldr	r3, [r0, #24]
   22d52:	4798      	blx	r3
				idx = UINT8_MAX;
   22d54:	f88d 400a 	strb.w	r4, [sp, #10]
   22d58:	e7eb      	b.n	22d32 <preempt+0xc6>
	struct lll_prepare_param prepare_param = {0};
   22d5a:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   22d5c:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   22d5e:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   22d60:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   22d62:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   22d66:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   22d68:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   22d6a:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   22d6c:	9b03      	ldr	r3, [sp, #12]
   22d6e:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   22d72:	aa04      	add	r2, sp, #16
   22d74:	f7f9 f9d6 	bl	1c124 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   22d78:	2800      	cmp	r0, #0
   22d7a:	d193      	bne.n	22ca4 <preempt+0x38>
   22d7c:	4a07      	ldr	r2, [pc, #28]	; (22d9c <preempt+0x130>)
   22d7e:	490b      	ldr	r1, [pc, #44]	; (22dac <preempt+0x140>)
   22d80:	4808      	ldr	r0, [pc, #32]	; (22da4 <preempt+0x138>)
   22d82:	f240 337e 	movw	r3, #894	; 0x37e
   22d86:	f004 fedc 	bl	27b42 <printk>
   22d8a:	4040      	eors	r0, r0
   22d8c:	f380 8811 	msr	BASEPRI, r0
   22d90:	f04f 0003 	mov.w	r0, #3
   22d94:	df02      	svc	2
   22d96:	e785      	b.n	22ca4 <preempt+0x38>
   22d98:	200020cc 	.word	0x200020cc
   22d9c:	0002c32c 	.word	0x0002c32c
   22da0:	0002c3c4 	.word	0x0002c3c4
   22da4:	0002b8dc 	.word	0x0002b8dc
   22da8:	0002c394 	.word	0x0002c394
   22dac:	0002c3bc 	.word	0x0002c3bc

00022db0 <lll_init>:
{
   22db0:	b510      	push	{r4, lr}
   22db2:	4816      	ldr	r0, [pc, #88]	; (22e0c <lll_init+0x5c>)
   22db4:	f003 fc1a 	bl	265ec <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   22db8:	4b15      	ldr	r3, [pc, #84]	; (22e10 <lll_init+0x60>)
   22dba:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   22dbc:	b310      	cbz	r0, 22e04 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   22dbe:	4b15      	ldr	r3, [pc, #84]	; (22e14 <lll_init+0x64>)
   22dc0:	2400      	movs	r4, #0
   22dc2:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   22dc4:	f000 faf8 	bl	233b8 <lll_clock_init>
	if (err < 0) {
   22dc8:	2800      	cmp	r0, #0
   22dca:	db1a      	blt.n	22e02 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   22dcc:	4621      	mov	r1, r4
   22dce:	2001      	movs	r0, #1
   22dd0:	4622      	mov	r2, r4
   22dd2:	f7ef ffbf 	bl	12d54 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   22dd6:	4622      	mov	r2, r4
   22dd8:	200b      	movs	r0, #11
   22dda:	2101      	movs	r1, #1
   22ddc:	f7ef ffba 	bl	12d54 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   22de0:	4622      	mov	r2, r4
   22de2:	4621      	mov	r1, r4
   22de4:	2018      	movs	r0, #24
   22de6:	f7ef ffb5 	bl	12d54 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   22dea:	2001      	movs	r0, #1
   22dec:	f7ef ff80 	bl	12cf0 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   22df0:	200b      	movs	r0, #11
   22df2:	f7ef ff7d 	bl	12cf0 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   22df6:	2018      	movs	r0, #24
   22df8:	f7ef ff7a 	bl	12cf0 <arch_irq_enable>
	radio_setup();
   22dfc:	f001 fe20 	bl	24a40 <radio_setup>
	return 0;
   22e00:	4620      	mov	r0, r4
}
   22e02:	bd10      	pop	{r4, pc}
		return -ENODEV;
   22e04:	f06f 0012 	mvn.w	r0, #18
}
   22e08:	bd10      	pop	{r4, pc}
   22e0a:	bf00      	nop
   22e0c:	0002c3d0 	.word	0x0002c3d0
   22e10:	200020c8 	.word	0x200020c8
   22e14:	200020cc 	.word	0x200020cc

00022e18 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   22e18:	4a05      	ldr	r2, [pc, #20]	; (22e30 <lll_csrand_get+0x18>)
{
   22e1a:	b410      	push	{r4}
   22e1c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   22e1e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   22e20:	6884      	ldr	r4, [r0, #8]
   22e22:	6824      	ldr	r4, [r4, #0]
   22e24:	b28a      	uxth	r2, r1
   22e26:	4619      	mov	r1, r3
   22e28:	4623      	mov	r3, r4
}
   22e2a:	bc10      	pop	{r4}
   22e2c:	4718      	bx	r3
   22e2e:	bf00      	nop
   22e30:	200020c8 	.word	0x200020c8

00022e34 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   22e34:	4b08      	ldr	r3, [pc, #32]	; (22e58 <lll_csrand_isr_get+0x24>)
{
   22e36:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   22e38:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   22e3a:	68ab      	ldr	r3, [r5, #8]
   22e3c:	685c      	ldr	r4, [r3, #4]
   22e3e:	b13c      	cbz	r4, 22e50 <lll_csrand_isr_get+0x1c>
   22e40:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22e42:	46a4      	mov	ip, r4
   22e44:	4601      	mov	r1, r0
   22e46:	b292      	uxth	r2, r2
   22e48:	4628      	mov	r0, r5
   22e4a:	2300      	movs	r3, #0
}
   22e4c:	bc30      	pop	{r4, r5}
   22e4e:	4760      	bx	ip
   22e50:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22e54:	bc30      	pop	{r4, r5}
   22e56:	4770      	bx	lr
   22e58:	200020c8 	.word	0x200020c8

00022e5c <lll_rand_isr_get>:
   22e5c:	4b08      	ldr	r3, [pc, #32]	; (22e80 <lll_rand_isr_get+0x24>)
   22e5e:	b430      	push	{r4, r5}
   22e60:	681d      	ldr	r5, [r3, #0]
   22e62:	68ab      	ldr	r3, [r5, #8]
   22e64:	685c      	ldr	r4, [r3, #4]
   22e66:	b13c      	cbz	r4, 22e78 <lll_rand_isr_get+0x1c>
   22e68:	460a      	mov	r2, r1
   22e6a:	46a4      	mov	ip, r4
   22e6c:	4601      	mov	r1, r0
   22e6e:	b292      	uxth	r2, r2
   22e70:	4628      	mov	r0, r5
   22e72:	2300      	movs	r3, #0
   22e74:	bc30      	pop	{r4, r5}
   22e76:	4760      	bx	ip
   22e78:	f06f 0085 	mvn.w	r0, #133	; 0x85
   22e7c:	bc30      	pop	{r4, r5}
   22e7e:	4770      	bx	lr
   22e80:	200020c8 	.word	0x200020c8

00022e84 <lll_reset>:
}
   22e84:	2000      	movs	r0, #0
   22e86:	4770      	bx	lr

00022e88 <lll_disable>:
{
   22e88:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   22e8a:	4604      	mov	r4, r0
{
   22e8c:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   22e8e:	2800      	cmp	r0, #0
   22e90:	d032      	beq.n	22ef8 <lll_disable+0x70>
   22e92:	4b25      	ldr	r3, [pc, #148]	; (22f28 <lll_disable+0xa0>)
   22e94:	681a      	ldr	r2, [r3, #0]
   22e96:	4282      	cmp	r2, r0
   22e98:	d028      	beq.n	22eec <lll_disable+0x64>
		idx = UINT8_MAX;
   22e9a:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   22e9c:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   22ea0:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   22ea4:	f7f9 f97e 	bl	1c1a4 <ull_prepare_dequeue_iter>
		while (next) {
   22ea8:	b940      	cbnz	r0, 22ebc <lll_disable+0x34>
   22eaa:	e01b      	b.n	22ee4 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   22eac:	68c3      	ldr	r3, [r0, #12]
   22eae:	42a3      	cmp	r3, r4
   22eb0:	d01a      	beq.n	22ee8 <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   22eb2:	f10d 0007 	add.w	r0, sp, #7
   22eb6:	f7f9 f975 	bl	1c1a4 <ull_prepare_dequeue_iter>
		while (next) {
   22eba:	b198      	cbz	r0, 22ee4 <lll_disable+0x5c>
			if (!next->is_aborted &&
   22ebc:	7f03      	ldrb	r3, [r0, #28]
   22ebe:	079b      	lsls	r3, r3, #30
   22ec0:	d4f7      	bmi.n	22eb2 <lll_disable+0x2a>
   22ec2:	2c00      	cmp	r4, #0
   22ec4:	d1f2      	bne.n	22eac <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   22ec6:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   22ec8:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   22eca:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   22ecc:	f043 0302 	orr.w	r3, r3, #2
   22ed0:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   22ed2:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   22ed4:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   22ed8:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   22edc:	f7f9 f962 	bl	1c1a4 <ull_prepare_dequeue_iter>
		while (next) {
   22ee0:	2800      	cmp	r0, #0
   22ee2:	d1eb      	bne.n	22ebc <lll_disable+0x34>
}
   22ee4:	b003      	add	sp, #12
   22ee6:	bd30      	pop	{r4, r5, pc}
   22ee8:	4621      	mov	r1, r4
   22eea:	e7ed      	b.n	22ec8 <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   22eec:	689b      	ldr	r3, [r3, #8]
   22eee:	b16b      	cbz	r3, 22f0c <lll_disable+0x84>
   22ef0:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   22ef2:	2000      	movs	r0, #0
   22ef4:	4798      	blx	r3
   22ef6:	e7d0      	b.n	22e9a <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   22ef8:	4a0b      	ldr	r2, [pc, #44]	; (22f28 <lll_disable+0xa0>)
   22efa:	6893      	ldr	r3, [r2, #8]
   22efc:	2b00      	cmp	r3, #0
   22efe:	d0cc      	beq.n	22e9a <lll_disable+0x12>
   22f00:	6811      	ldr	r1, [r2, #0]
   22f02:	2900      	cmp	r1, #0
   22f04:	d0c9      	beq.n	22e9a <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   22f06:	2000      	movs	r0, #0
   22f08:	4798      	blx	r3
   22f0a:	e7c6      	b.n	22e9a <lll_disable+0x12>
			LL_ASSERT(!param);
   22f0c:	4a07      	ldr	r2, [pc, #28]	; (22f2c <lll_disable+0xa4>)
   22f0e:	4908      	ldr	r1, [pc, #32]	; (22f30 <lll_disable+0xa8>)
   22f10:	4808      	ldr	r0, [pc, #32]	; (22f34 <lll_disable+0xac>)
   22f12:	23fd      	movs	r3, #253	; 0xfd
   22f14:	f004 fe15 	bl	27b42 <printk>
   22f18:	4040      	eors	r0, r0
   22f1a:	f380 8811 	msr	BASEPRI, r0
   22f1e:	f04f 0003 	mov.w	r0, #3
   22f22:	df02      	svc	2
   22f24:	e7b9      	b.n	22e9a <lll_disable+0x12>
   22f26:	bf00      	nop
   22f28:	200020cc 	.word	0x200020cc
   22f2c:	0002c32c 	.word	0x0002c32c
   22f30:	0002c3d4 	.word	0x0002c3d4
   22f34:	0002b8dc 	.word	0x0002b8dc

00022f38 <lll_prepare_done>:
}
   22f38:	2000      	movs	r0, #0
   22f3a:	4770      	bx	lr

00022f3c <lll_done>:
{
   22f3c:	b538      	push	{r3, r4, r5, lr}
   22f3e:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   22f40:	f7f9 f922 	bl	1c188 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   22f44:	b154      	cbz	r4, 22f5c <lll_done+0x20>
   22f46:	b310      	cbz	r0, 22f8e <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   22f48:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   22f4a:	2000      	movs	r0, #0
   22f4c:	f7f9 f94a 	bl	1c1e4 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   22f50:	4620      	mov	r0, r4
   22f52:	f7f9 f9b3 	bl	1c2bc <ull_event_done>
	LL_ASSERT(evdone);
   22f56:	b158      	cbz	r0, 22f70 <lll_done+0x34>
}
   22f58:	2000      	movs	r0, #0
   22f5a:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   22f5c:	4d1a      	ldr	r5, [pc, #104]	; (22fc8 <lll_done+0x8c>)
   22f5e:	68ab      	ldr	r3, [r5, #8]
   22f60:	b31b      	cbz	r3, 22faa <lll_done+0x6e>
		param = event.curr.param;
   22f62:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   22f64:	2300      	movs	r3, #0
   22f66:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   22f68:	602b      	str	r3, [r5, #0]
		if (param) {
   22f6a:	2c00      	cmp	r4, #0
   22f6c:	d1ec      	bne.n	22f48 <lll_done+0xc>
   22f6e:	e7ec      	b.n	22f4a <lll_done+0xe>
	LL_ASSERT(evdone);
   22f70:	4a16      	ldr	r2, [pc, #88]	; (22fcc <lll_done+0x90>)
   22f72:	4917      	ldr	r1, [pc, #92]	; (22fd0 <lll_done+0x94>)
   22f74:	4817      	ldr	r0, [pc, #92]	; (22fd4 <lll_done+0x98>)
   22f76:	f240 1361 	movw	r3, #353	; 0x161
   22f7a:	f004 fde2 	bl	27b42 <printk>
   22f7e:	4040      	eors	r0, r0
   22f80:	f380 8811 	msr	BASEPRI, r0
   22f84:	f04f 0003 	mov.w	r0, #3
   22f88:	df02      	svc	2
}
   22f8a:	2000      	movs	r0, #0
   22f8c:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   22f8e:	4a0f      	ldr	r2, [pc, #60]	; (22fcc <lll_done+0x90>)
   22f90:	4911      	ldr	r1, [pc, #68]	; (22fd8 <lll_done+0x9c>)
   22f92:	4810      	ldr	r0, [pc, #64]	; (22fd4 <lll_done+0x98>)
   22f94:	f240 1337 	movw	r3, #311	; 0x137
   22f98:	f004 fdd3 	bl	27b42 <printk>
   22f9c:	4040      	eors	r0, r0
   22f9e:	f380 8811 	msr	BASEPRI, r0
   22fa2:	f04f 0003 	mov.w	r0, #3
   22fa6:	df02      	svc	2
   22fa8:	e7ce      	b.n	22f48 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   22faa:	4a08      	ldr	r2, [pc, #32]	; (22fcc <lll_done+0x90>)
   22fac:	490b      	ldr	r1, [pc, #44]	; (22fdc <lll_done+0xa0>)
   22fae:	4809      	ldr	r0, [pc, #36]	; (22fd4 <lll_done+0x98>)
   22fb0:	f240 133d 	movw	r3, #317	; 0x13d
   22fb4:	f004 fdc5 	bl	27b42 <printk>
   22fb8:	4040      	eors	r0, r0
   22fba:	f380 8811 	msr	BASEPRI, r0
   22fbe:	f04f 0003 	mov.w	r0, #3
   22fc2:	df02      	svc	2
   22fc4:	e7cd      	b.n	22f62 <lll_done+0x26>
   22fc6:	bf00      	nop
   22fc8:	200020cc 	.word	0x200020cc
   22fcc:	0002c32c 	.word	0x0002c32c
   22fd0:	0002c400 	.word	0x0002c400
   22fd4:	0002b8dc 	.word	0x0002b8dc
   22fd8:	0002c3dc 	.word	0x0002c3dc
   22fdc:	0002c3ec 	.word	0x0002c3ec

00022fe0 <lll_is_abort_cb>:
}
   22fe0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   22fe4:	4770      	bx	lr
   22fe6:	bf00      	nop

00022fe8 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   22fe8:	6883      	ldr	r3, [r0, #8]
   22fea:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   22fec:	bfb8      	it	lt
   22fee:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   22ff0:	6840      	ldr	r0, [r0, #4]
   22ff2:	4298      	cmp	r0, r3
   22ff4:	bf38      	it	cc
   22ff6:	4618      	movcc	r0, r3
}
   22ff8:	4770      	bx	lr
   22ffa:	bf00      	nop

00022ffc <lll_preempt_calc>:
{
   22ffc:	b510      	push	{r4, lr}
   22ffe:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   23000:	f7f6 fbee 	bl	197e0 <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   23004:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   23006:	0203      	lsls	r3, r0, #8
   23008:	d405      	bmi.n	23016 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   2300a:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   2300c:	2809      	cmp	r0, #9
   2300e:	bf94      	ite	ls
   23010:	2000      	movls	r0, #0
   23012:	2001      	movhi	r0, #1
}
   23014:	bd10      	pop	{r4, pc}
		return 0;
   23016:	2000      	movs	r0, #0
}
   23018:	bd10      	pop	{r4, pc}
   2301a:	bf00      	nop

0002301c <lll_chan_set>:
	switch (chan) {
   2301c:	2826      	cmp	r0, #38	; 0x26
{
   2301e:	b510      	push	{r4, lr}
   23020:	4604      	mov	r4, r0
	switch (chan) {
   23022:	d01c      	beq.n	2305e <lll_chan_set+0x42>
   23024:	2827      	cmp	r0, #39	; 0x27
   23026:	d012      	beq.n	2304e <lll_chan_set+0x32>
   23028:	2825      	cmp	r0, #37	; 0x25
   2302a:	d008      	beq.n	2303e <lll_chan_set+0x22>
		if (chan < 11) {
   2302c:	280a      	cmp	r0, #10
   2302e:	d91e      	bls.n	2306e <lll_chan_set+0x52>
		} else if (chan < 40) {
   23030:	2827      	cmp	r0, #39	; 0x27
   23032:	d821      	bhi.n	23078 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   23034:	3003      	adds	r0, #3
   23036:	0040      	lsls	r0, r0, #1
   23038:	f001 fd5e 	bl	24af8 <radio_freq_chan_set>
   2303c:	e002      	b.n	23044 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   2303e:	2002      	movs	r0, #2
   23040:	f001 fd5a 	bl	24af8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   23044:	4620      	mov	r0, r4
}
   23046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2304a:	f001 bd5b 	b.w	24b04 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   2304e:	2050      	movs	r0, #80	; 0x50
   23050:	f001 fd52 	bl	24af8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   23054:	4620      	mov	r0, r4
}
   23056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2305a:	f001 bd53 	b.w	24b04 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   2305e:	201a      	movs	r0, #26
   23060:	f001 fd4a 	bl	24af8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   23064:	4620      	mov	r0, r4
}
   23066:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   2306a:	f001 bd4b 	b.w	24b04 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   2306e:	3002      	adds	r0, #2
   23070:	0040      	lsls	r0, r0, #1
   23072:	f001 fd41 	bl	24af8 <radio_freq_chan_set>
   23076:	e7e5      	b.n	23044 <lll_chan_set+0x28>
			LL_ASSERT(0);
   23078:	4a06      	ldr	r2, [pc, #24]	; (23094 <lll_chan_set+0x78>)
   2307a:	4907      	ldr	r1, [pc, #28]	; (23098 <lll_chan_set+0x7c>)
   2307c:	4807      	ldr	r0, [pc, #28]	; (2309c <lll_chan_set+0x80>)
   2307e:	f240 13cd 	movw	r3, #461	; 0x1cd
   23082:	f004 fd5e 	bl	27b42 <printk>
   23086:	4040      	eors	r0, r0
   23088:	f380 8811 	msr	BASEPRI, r0
   2308c:	f04f 0003 	mov.w	r0, #3
   23090:	df02      	svc	2
   23092:	e7d7      	b.n	23044 <lll_chan_set+0x28>
   23094:	0002c32c 	.word	0x0002c32c
   23098:	0002b974 	.word	0x0002b974
   2309c:	0002b8dc 	.word	0x0002b8dc

000230a0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   230a0:	f001 bd96 	b.w	24bd0 <radio_rx_ready_delay_get>

000230a4 <lll_isr_tx_status_reset>:
{
   230a4:	b508      	push	{r3, lr}
	radio_status_reset();
   230a6:	f001 fdb5 	bl	24c14 <radio_status_reset>
}
   230aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   230ae:	f001 bf03 	b.w	24eb8 <radio_tmr_status_reset>
   230b2:	bf00      	nop

000230b4 <lll_isr_rx_status_reset>:
{
   230b4:	b508      	push	{r3, lr}
	radio_status_reset();
   230b6:	f001 fdad 	bl	24c14 <radio_status_reset>
	radio_tmr_status_reset();
   230ba:	f001 fefd 	bl	24eb8 <radio_tmr_status_reset>
}
   230be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   230c2:	f001 bea5 	b.w	24e10 <radio_rssi_status_reset>
   230c6:	bf00      	nop

000230c8 <lll_isr_status_reset>:
{
   230c8:	b508      	push	{r3, lr}
	radio_status_reset();
   230ca:	f001 fda3 	bl	24c14 <radio_status_reset>
	radio_tmr_status_reset();
   230ce:	f001 fef3 	bl	24eb8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   230d2:	f001 fed9 	bl	24e88 <radio_filter_status_reset>
	radio_ar_status_reset();
   230d6:	f002 f8b9 	bl	2524c <radio_ar_status_reset>
}
   230da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   230de:	f001 be97 	b.w	24e10 <radio_rssi_status_reset>
   230e2:	bf00      	nop

000230e4 <lll_isr_cleanup>:
{
   230e4:	b508      	push	{r3, lr}
   230e6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   230e8:	4815      	ldr	r0, [pc, #84]	; (23140 <lll_isr_cleanup+0x5c>)
   230ea:	f001 fc89 	bl	24a00 <radio_isr_set>
	if (!radio_is_idle()) {
   230ee:	f001 fdb1 	bl	24c54 <radio_is_idle>
   230f2:	b150      	cbz	r0, 2310a <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   230f4:	f001 ff84 	bl	25000 <radio_tmr_stop>
	err = lll_hfclock_off();
   230f8:	f000 f9a2 	bl	23440 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   230fc:	2800      	cmp	r0, #0
   230fe:	db0c      	blt.n	2311a <lll_isr_cleanup+0x36>
}
   23100:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   23104:	2000      	movs	r0, #0
   23106:	f7ff bf19 	b.w	22f3c <lll_done>
		radio_disable();
   2310a:	f001 fd6f 	bl	24bec <radio_disable>
	radio_tmr_stop();
   2310e:	f001 ff77 	bl	25000 <radio_tmr_stop>
	err = lll_hfclock_off();
   23112:	f000 f995 	bl	23440 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   23116:	2800      	cmp	r0, #0
   23118:	daf2      	bge.n	23100 <lll_isr_cleanup+0x1c>
   2311a:	4a0a      	ldr	r2, [pc, #40]	; (23144 <lll_isr_cleanup+0x60>)
   2311c:	490a      	ldr	r1, [pc, #40]	; (23148 <lll_isr_cleanup+0x64>)
   2311e:	480b      	ldr	r0, [pc, #44]	; (2314c <lll_isr_cleanup+0x68>)
   23120:	f44f 730c 	mov.w	r3, #560	; 0x230
   23124:	f004 fd0d 	bl	27b42 <printk>
   23128:	4040      	eors	r0, r0
   2312a:	f380 8811 	msr	BASEPRI, r0
   2312e:	f04f 0003 	mov.w	r0, #3
   23132:	df02      	svc	2
	lll_done(NULL);
   23134:	2000      	movs	r0, #0
}
   23136:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   2313a:	f7ff beff 	b.w	22f3c <lll_done>
   2313e:	bf00      	nop
   23140:	00022b7d 	.word	0x00022b7d
   23144:	0002c32c 	.word	0x0002c32c
   23148:	0002c408 	.word	0x0002c408
   2314c:	0002b8dc 	.word	0x0002b8dc

00023150 <lll_isr_abort>:
{
   23150:	b510      	push	{r4, lr}
   23152:	4604      	mov	r4, r0
	radio_status_reset();
   23154:	f001 fd5e 	bl	24c14 <radio_status_reset>
	radio_tmr_status_reset();
   23158:	f001 feae 	bl	24eb8 <radio_tmr_status_reset>
	radio_filter_status_reset();
   2315c:	f001 fe94 	bl	24e88 <radio_filter_status_reset>
	radio_ar_status_reset();
   23160:	f002 f874 	bl	2524c <radio_ar_status_reset>
	radio_rssi_status_reset();
   23164:	f001 fe54 	bl	24e10 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   23168:	4620      	mov	r0, r4
}
   2316a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2316e:	f7ff bfb9 	b.w	230e4 <lll_isr_cleanup>
   23172:	bf00      	nop

00023174 <lll_isr_early_abort>:
{
   23174:	b508      	push	{r3, lr}
   23176:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   23178:	4813      	ldr	r0, [pc, #76]	; (231c8 <lll_isr_early_abort+0x54>)
   2317a:	f001 fc41 	bl	24a00 <radio_isr_set>
	if (!radio_is_idle()) {
   2317e:	f001 fd69 	bl	24c54 <radio_is_idle>
   23182:	b140      	cbz	r0, 23196 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   23184:	f000 f95c 	bl	23440 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   23188:	2800      	cmp	r0, #0
   2318a:	db0a      	blt.n	231a2 <lll_isr_early_abort+0x2e>
}
   2318c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   23190:	2000      	movs	r0, #0
   23192:	f7ff bed3 	b.w	22f3c <lll_done>
		radio_disable();
   23196:	f001 fd29 	bl	24bec <radio_disable>
	err = lll_hfclock_off();
   2319a:	f000 f951 	bl	23440 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   2319e:	2800      	cmp	r0, #0
   231a0:	daf4      	bge.n	2318c <lll_isr_early_abort+0x18>
   231a2:	4a0a      	ldr	r2, [pc, #40]	; (231cc <lll_isr_early_abort+0x58>)
   231a4:	490a      	ldr	r1, [pc, #40]	; (231d0 <lll_isr_early_abort+0x5c>)
   231a6:	480b      	ldr	r0, [pc, #44]	; (231d4 <lll_isr_early_abort+0x60>)
   231a8:	f240 233f 	movw	r3, #575	; 0x23f
   231ac:	f004 fcc9 	bl	27b42 <printk>
   231b0:	4040      	eors	r0, r0
   231b2:	f380 8811 	msr	BASEPRI, r0
   231b6:	f04f 0003 	mov.w	r0, #3
   231ba:	df02      	svc	2
	lll_done(NULL);
   231bc:	2000      	movs	r0, #0
}
   231be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   231c2:	f7ff bebb 	b.w	22f3c <lll_done>
   231c6:	bf00      	nop
   231c8:	00022b7d 	.word	0x00022b7d
   231cc:	0002c32c 	.word	0x0002c32c
   231d0:	0002c408 	.word	0x0002c408
   231d4:	0002b8dc 	.word	0x0002b8dc

000231d8 <lll_prepare_resolve>:
{
   231d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   231dc:	b085      	sub	sp, #20
   231de:	4605      	mov	r5, r0
   231e0:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   231e2:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   231e6:	23ff      	movs	r3, #255	; 0xff
{
   231e8:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   231ec:	f88d 300f 	strb.w	r3, [sp, #15]
{
   231f0:	460e      	mov	r6, r1
   231f2:	4617      	mov	r7, r2
	p = ull_prepare_dequeue_iter(&idx);
   231f4:	f7f8 ffd6 	bl	1c1a4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   231f8:	4684      	mov	ip, r0
   231fa:	b920      	cbnz	r0, 23206 <lll_prepare_resolve+0x2e>
   231fc:	e021      	b.n	23242 <lll_prepare_resolve+0x6a>
		p = ull_prepare_dequeue_iter(&idx);
   231fe:	f7f8 ffd1 	bl	1c1a4 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   23202:	4684      	mov	ip, r0
   23204:	b1e8      	cbz	r0, 23242 <lll_prepare_resolve+0x6a>
   23206:	f89c 301c 	ldrb.w	r3, [ip, #28]
   2320a:	079a      	lsls	r2, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   2320c:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   23210:	d1f5      	bne.n	231fe <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   23212:	f8df 912c 	ldr.w	r9, [pc, #300]	; 23340 <lll_prepare_resolve+0x168>
	if ((!is_dequeue && !is_done_sync()) ||
   23216:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2321a:	b9bb      	cbnz	r3, 2324c <lll_prepare_resolve+0x74>
	    (p && is_resume)) {
   2321c:	f1b8 0f00 	cmp.w	r8, #0
   23220:	d033      	beq.n	2328a <lll_prepare_resolve+0xb2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   23222:	f8cd 8000 	str.w	r8, [sp]
   23226:	463b      	mov	r3, r7
   23228:	4622      	mov	r2, r4
   2322a:	4631      	mov	r1, r6
   2322c:	4628      	mov	r0, r5
   2322e:	f7f8 ff79 	bl	1c124 <ull_prepare_enqueue>
		LL_ASSERT(next);
   23232:	2800      	cmp	r0, #0
   23234:	d064      	beq.n	23300 <lll_prepare_resolve+0x128>
		return -EINPROGRESS;
   23236:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   2323a:	4620      	mov	r0, r4
   2323c:	b005      	add	sp, #20
   2323e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    event.curr.abort_cb ||
   23242:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 23340 <lll_prepare_resolve+0x168>
	if ((!is_dequeue && !is_done_sync()) ||
   23246:	f8d9 3008 	ldr.w	r3, [r9, #8]
   2324a:	b36b      	cbz	r3, 232a8 <lll_prepare_resolve+0xd0>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   2324c:	f8cd 8000 	str.w	r8, [sp]
   23250:	463b      	mov	r3, r7
   23252:	4622      	mov	r2, r4
   23254:	4631      	mov	r1, r6
   23256:	4628      	mov	r0, r5
   23258:	f7f8 ff64 	bl	1c124 <ull_prepare_enqueue>
		LL_ASSERT(next);
   2325c:	2800      	cmp	r0, #0
   2325e:	d04f      	beq.n	23300 <lll_prepare_resolve+0x128>
		if (is_resume) {
   23260:	f1b8 0f00 	cmp.w	r8, #0
   23264:	d1e7      	bne.n	23236 <lll_prepare_resolve+0x5e>
		ret  = preempt_ticker_start(next, ticker_start_op_cb);
   23266:	f7ff fcdd 	bl	22c24 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   2326a:	2802      	cmp	r0, #2
   2326c:	d9e3      	bls.n	23236 <lll_prepare_resolve+0x5e>
   2326e:	4a35      	ldr	r2, [pc, #212]	; (23344 <lll_prepare_resolve+0x16c>)
   23270:	4935      	ldr	r1, [pc, #212]	; (23348 <lll_prepare_resolve+0x170>)
   23272:	4836      	ldr	r0, [pc, #216]	; (2334c <lll_prepare_resolve+0x174>)
   23274:	f240 2385 	movw	r3, #645	; 0x285
   23278:	f004 fc63 	bl	27b42 <printk>
   2327c:	4040      	eors	r0, r0
   2327e:	f380 8811 	msr	BASEPRI, r0
   23282:	f04f 0003 	mov.w	r0, #3
   23286:	df02      	svc	2
   23288:	e7d5      	b.n	23236 <lll_prepare_resolve+0x5e>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   2328a:	45a4      	cmp	ip, r4
   2328c:	d00c      	beq.n	232a8 <lll_prepare_resolve+0xd0>
   2328e:	4a2d      	ldr	r2, [pc, #180]	; (23344 <lll_prepare_resolve+0x16c>)
   23290:	492f      	ldr	r1, [pc, #188]	; (23350 <lll_prepare_resolve+0x178>)
   23292:	482e      	ldr	r0, [pc, #184]	; (2334c <lll_prepare_resolve+0x174>)
   23294:	f44f 732b 	mov.w	r3, #684	; 0x2ac
   23298:	f004 fc53 	bl	27b42 <printk>
   2329c:	4040      	eors	r0, r0
   2329e:	f380 8811 	msr	BASEPRI, r0
   232a2:	f04f 0003 	mov.w	r0, #3
   232a6:	df02      	svc	2
	event.curr.param = prepare_param->param;
   232a8:	68e3      	ldr	r3, [r4, #12]
   232aa:	f8c9 3000 	str.w	r3, [r9]
	err = prepare_cb(prepare_param);
   232ae:	4620      	mov	r0, r4
	event.curr.abort_cb = abort_cb;
   232b0:	e9c9 5601 	strd	r5, r6, [r9, #4]
	err = prepare_cb(prepare_param);
   232b4:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   232b6:	2200      	movs	r2, #0
   232b8:	4b26      	ldr	r3, [pc, #152]	; (23354 <lll_prepare_resolve+0x17c>)
   232ba:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   232bc:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   232be:	4611      	mov	r1, r2
   232c0:	4610      	mov	r0, r2
   232c2:	f7f6 fa4b 	bl	1975c <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   232c6:	2802      	cmp	r0, #2
   232c8:	d82c      	bhi.n	23324 <lll_prepare_resolve+0x14c>
		p = ull_prepare_dequeue_iter(&idx);
   232ca:	f10d 000f 	add.w	r0, sp, #15
   232ce:	f7f8 ff69 	bl	1c1a4 <ull_prepare_dequeue_iter>
		if (!p) {
   232d2:	2800      	cmp	r0, #0
   232d4:	d0b1      	beq.n	2323a <lll_prepare_resolve+0x62>
	} while (p->is_aborted || p->is_resume);
   232d6:	7f03      	ldrb	r3, [r0, #28]
   232d8:	079b      	lsls	r3, r3, #30
   232da:	d1f6      	bne.n	232ca <lll_prepare_resolve+0xf2>
	ret = preempt_ticker_start(p, ticker_start_op_cb);
   232dc:	f7ff fca2 	bl	22c24 <preempt_ticker_start.constprop.0>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   232e0:	2802      	cmp	r0, #2
   232e2:	d9aa      	bls.n	2323a <lll_prepare_resolve+0x62>
   232e4:	4a17      	ldr	r2, [pc, #92]	; (23344 <lll_prepare_resolve+0x16c>)
   232e6:	4918      	ldr	r1, [pc, #96]	; (23348 <lll_prepare_resolve+0x170>)
   232e8:	4818      	ldr	r0, [pc, #96]	; (2334c <lll_prepare_resolve+0x174>)
   232ea:	f240 23ca 	movw	r3, #714	; 0x2ca
   232ee:	f004 fc28 	bl	27b42 <printk>
   232f2:	4040      	eors	r0, r0
   232f4:	f380 8811 	msr	BASEPRI, r0
   232f8:	f04f 0003 	mov.w	r0, #3
   232fc:	df02      	svc	2
   232fe:	e79c      	b.n	2323a <lll_prepare_resolve+0x62>
		LL_ASSERT(next);
   23300:	4a10      	ldr	r2, [pc, #64]	; (23344 <lll_prepare_resolve+0x16c>)
   23302:	4915      	ldr	r1, [pc, #84]	; (23358 <lll_prepare_resolve+0x180>)
   23304:	4811      	ldr	r0, [pc, #68]	; (2334c <lll_prepare_resolve+0x174>)
   23306:	f240 237a 	movw	r3, #634	; 0x27a
   2330a:	f004 fc1a 	bl	27b42 <printk>
   2330e:	4040      	eors	r0, r0
   23310:	f380 8811 	msr	BASEPRI, r0
   23314:	f04f 0003 	mov.w	r0, #3
   23318:	df02      	svc	2
   2331a:	2000      	movs	r0, #0
		if (is_resume) {
   2331c:	f1b8 0f00 	cmp.w	r8, #0
   23320:	d189      	bne.n	23236 <lll_prepare_resolve+0x5e>
   23322:	e7a0      	b.n	23266 <lll_prepare_resolve+0x8e>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   23324:	4a07      	ldr	r2, [pc, #28]	; (23344 <lll_prepare_resolve+0x16c>)
   23326:	4908      	ldr	r1, [pc, #32]	; (23348 <lll_prepare_resolve+0x170>)
   23328:	4808      	ldr	r0, [pc, #32]	; (2334c <lll_prepare_resolve+0x174>)
   2332a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   2332e:	f004 fc08 	bl	27b42 <printk>
   23332:	4040      	eors	r0, r0
   23334:	f380 8811 	msr	BASEPRI, r0
   23338:	f04f 0003 	mov.w	r0, #3
   2333c:	df02      	svc	2
   2333e:	e7c4      	b.n	232ca <lll_prepare_resolve+0xf2>
   23340:	200020cc 	.word	0x200020cc
   23344:	0002c32c 	.word	0x0002c32c
   23348:	0002c394 	.word	0x0002c394
   2334c:	0002b8dc 	.word	0x0002b8dc
   23350:	0002c41c 	.word	0x0002c41c
   23354:	00022b81 	.word	0x00022b81
   23358:	0002c414 	.word	0x0002c414

0002335c <clock_ready>:
	z_impl_k_sem_give(sem);
   2335c:	f101 0010 	add.w	r0, r1, #16
   23360:	f003 bbf8 	b.w	26b54 <z_impl_k_sem_give>

00023364 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   23364:	b570      	push	{r4, r5, r6, lr}
   23366:	4605      	mov	r5, r0
   23368:	b08a      	sub	sp, #40	; 0x28
   2336a:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   2336c:	2201      	movs	r2, #1
   2336e:	2100      	movs	r1, #0
   23370:	a804      	add	r0, sp, #16
   23372:	f007 fa51 	bl	2a818 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   23376:	4b0f      	ldr	r3, [pc, #60]	; (233b4 <blocking_on+0x50>)
   23378:	9301      	str	r3, [sp, #4]
   2337a:	2600      	movs	r6, #0
   2337c:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   2337e:	4669      	mov	r1, sp
   23380:	4628      	mov	r0, r5
   23382:	9603      	str	r6, [sp, #12]
   23384:	9302      	str	r3, [sp, #8]
   23386:	f004 fc58 	bl	27c3a <onoff_request>
	if (err < 0) {
   2338a:	2800      	cmp	r0, #0
   2338c:	db10      	blt.n	233b0 <blocking_on+0x4c>
   2338e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   23392:	4631      	mov	r1, r6
   23394:	f240 30e7 	movw	r0, #999	; 0x3e7
   23398:	fbe4 0103 	umlal	r0, r1, r4, r3
   2339c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   233a0:	2300      	movs	r3, #0
   233a2:	f7ec fead 	bl	10100 <__aeabi_uldivmod>
   233a6:	4602      	mov	r2, r0
   233a8:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   233aa:	a804      	add	r0, sp, #16
   233ac:	f003 fbf8 	bl	26ba0 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   233b0:	b00a      	add	sp, #40	; 0x28
   233b2:	bd70      	pop	{r4, r5, r6, pc}
   233b4:	0002335d 	.word	0x0002335d

000233b8 <lll_clock_init>:

int lll_clock_init(void)
{
   233b8:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   233ba:	2001      	movs	r0, #1
   233bc:	f7ef fa34 	bl	12828 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   233c0:	4904      	ldr	r1, [pc, #16]	; (233d4 <lll_clock_init+0x1c>)
   233c2:	2300      	movs	r3, #0
   233c4:	2401      	movs	r4, #1
   233c6:	608c      	str	r4, [r1, #8]
   233c8:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   233ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   233ce:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   233d0:	f004 bc33 	b.w	27c3a <onoff_request>
   233d4:	200020e4 	.word	0x200020e4

000233d8 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   233d8:	4b0c      	ldr	r3, [pc, #48]	; (2340c <lll_clock_wait+0x34>)
   233da:	781a      	ldrb	r2, [r3, #0]
   233dc:	b10a      	cbz	r2, 233e2 <lll_clock_wait+0xa>
		return 0;
   233de:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   233e0:	4770      	bx	lr
{
   233e2:	b510      	push	{r4, lr}
	done = true;
   233e4:	2001      	movs	r0, #1
   233e6:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   233e8:	f7ef fa1e 	bl	12828 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   233ec:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   233f0:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   233f2:	f7ff ffb7 	bl	23364 <blocking_on>
	if (err) {
   233f6:	b938      	cbnz	r0, 23408 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   233f8:	4620      	mov	r0, r4
   233fa:	f004 fc67 	bl	27ccc <onoff_release>
	if (err != ONOFF_STATE_ON) {
   233fe:	2802      	cmp	r0, #2
		return 0;
   23400:	bf0c      	ite	eq
   23402:	2000      	moveq	r0, #0
		return -EIO;
   23404:	f06f 0004 	mvnne.w	r0, #4
}
   23408:	bd10      	pop	{r4, pc}
   2340a:	bf00      	nop
   2340c:	2000263c 	.word	0x2000263c

00023410 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   23410:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   23412:	4b0a      	ldr	r3, [pc, #40]	; (2343c <lll_hfclock_on+0x2c>)
   23414:	f3bf 8f5b 	dmb	ish
   23418:	e853 2f00 	ldrex	r2, [r3]
   2341c:	1c51      	adds	r1, r2, #1
   2341e:	e843 1000 	strex	r0, r1, [r3]
   23422:	2800      	cmp	r0, #0
   23424:	d1f8      	bne.n	23418 <lll_hfclock_on+0x8>
   23426:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   2342a:	2a00      	cmp	r2, #0
   2342c:	dd01      	ble.n	23432 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   2342e:	2000      	movs	r0, #0
   23430:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   23432:	f7ef fa01 	bl	12838 <z_nrf_clock_bt_ctlr_hf_request>
}
   23436:	2000      	movs	r0, #0
   23438:	bd08      	pop	{r3, pc}
   2343a:	bf00      	nop
   2343c:	200020e0 	.word	0x200020e0

00023440 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   23440:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   23442:	4b0d      	ldr	r3, [pc, #52]	; (23478 <lll_hfclock_off+0x38>)
   23444:	681a      	ldr	r2, [r3, #0]
   23446:	2a00      	cmp	r2, #0
   23448:	dd12      	ble.n	23470 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2344a:	f3bf 8f5b 	dmb	ish
   2344e:	e853 2f00 	ldrex	r2, [r3]
   23452:	1e51      	subs	r1, r2, #1
   23454:	e843 1000 	strex	r0, r1, [r3]
   23458:	2800      	cmp	r0, #0
   2345a:	d1f8      	bne.n	2344e <lll_hfclock_off+0xe>
   2345c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   23460:	2a01      	cmp	r2, #1
   23462:	dd01      	ble.n	23468 <lll_hfclock_off+0x28>
		return 0;
   23464:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   23466:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   23468:	f7ef f9fc 	bl	12864 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   2346c:	2000      	movs	r0, #0
}
   2346e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   23470:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   23474:	bd08      	pop	{r3, pc}
   23476:	bf00      	nop
   23478:	200020e0 	.word	0x200020e0

0002347c <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   2347c:	2014      	movs	r0, #20
   2347e:	4770      	bx	lr

00023480 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   23480:	4b01      	ldr	r3, [pc, #4]	; (23488 <lll_clock_ppm_get+0x8>)
}
   23482:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   23486:	4770      	bx	lr
   23488:	0002c468 	.word	0x0002c468

0002348c <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   2348c:	b510      	push	{r4, lr}
   2348e:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   23490:	f7ff fe1a 	bl	230c8 <lll_isr_status_reset>

	radio_filter_disable();
   23494:	f001 fcee 	bl	24e74 <radio_filter_disable>

	lll_isr_cleanup(param);
   23498:	4620      	mov	r0, r4
}
   2349a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   2349e:	f7ff be21 	b.w	230e4 <lll_isr_cleanup>
   234a2:	bf00      	nop

000234a4 <isr_tx>:
{
   234a4:	b530      	push	{r4, r5, lr}
   234a6:	b083      	sub	sp, #12
   234a8:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   234aa:	f7ff fdfb 	bl	230a4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   234ae:	2096      	movs	r0, #150	; 0x96
   234b0:	f001 fd12 	bl	24ed8 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   234b4:	2300      	movs	r3, #0
   234b6:	461a      	mov	r2, r3
   234b8:	4619      	mov	r1, r3
   234ba:	4618      	mov	r0, r3
   234bc:	f001 fc3a 	bl	24d34 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   234c0:	f001 fbec 	bl	24c9c <radio_pkt_scratch_get>
   234c4:	f001 fb76 	bl	24bb4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   234c8:	f001 fbb0 	bl	24c2c <radio_is_ready>
   234cc:	b9e0      	cbnz	r0, 23508 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   234ce:	481e      	ldr	r0, [pc, #120]	; (23548 <isr_tx+0xa4>)
   234d0:	4621      	mov	r1, r4
   234d2:	f001 fa95 	bl	24a00 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   234d6:	f7ff fb1f 	bl	22b18 <ull_filter_lll_rl_enabled>
   234da:	bb50      	cbnz	r0, 23532 <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   234dc:	f001 fde4 	bl	250a8 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   234e0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   234e2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   234e4:	4608      	mov	r0, r1
   234e6:	f001 fb75 	bl	24bd4 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   234ea:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   234ec:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   234ee:	4608      	mov	r0, r1
   234f0:	f001 fb6c 	bl	24bcc <radio_tx_chain_delay_get>
   234f4:	442c      	add	r4, r5
   234f6:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   234f8:	1a20      	subs	r0, r4, r0
   234fa:	f001 fd8d 	bl	25018 <radio_tmr_hcto_configure>
}
   234fe:	b003      	add	sp, #12
   23500:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   23504:	f001 bdc2 	b.w	2508c <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   23508:	4a10      	ldr	r2, [pc, #64]	; (2354c <isr_tx+0xa8>)
   2350a:	4911      	ldr	r1, [pc, #68]	; (23550 <isr_tx+0xac>)
   2350c:	4811      	ldr	r0, [pc, #68]	; (23554 <isr_tx+0xb0>)
   2350e:	f240 33b9 	movw	r3, #953	; 0x3b9
   23512:	f004 fb16 	bl	27b42 <printk>
   23516:	4040      	eors	r0, r0
   23518:	f380 8811 	msr	BASEPRI, r0
   2351c:	f04f 0003 	mov.w	r0, #3
   23520:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   23522:	4809      	ldr	r0, [pc, #36]	; (23548 <isr_tx+0xa4>)
   23524:	4621      	mov	r1, r4
   23526:	f001 fa6b 	bl	24a00 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   2352a:	f7ff faf5 	bl	22b18 <ull_filter_lll_rl_enabled>
   2352e:	2800      	cmp	r0, #0
   23530:	d0d4      	beq.n	234dc <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   23532:	f10d 0007 	add.w	r0, sp, #7
   23536:	f7ff fa1d 	bl	22974 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   2353a:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   2353c:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   2353e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23542:	f001 fe49 	bl	251d8 <radio_ar_configure>
   23546:	e7c9      	b.n	234dc <isr_tx+0x38>
   23548:	00023cbd 	.word	0x00023cbd
   2354c:	0002c478 	.word	0x0002c478
   23550:	0002c4c4 	.word	0x0002c4c4
   23554:	0002b8dc 	.word	0x0002b8dc

00023558 <is_abort_cb>:
	if (next != curr) {
   23558:	4281      	cmp	r1, r0
{
   2355a:	b508      	push	{r3, lr}
	if (next != curr) {
   2355c:	d00e      	beq.n	2357c <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   2355e:	7a0b      	ldrb	r3, [r1, #8]
   23560:	07db      	lsls	r3, r3, #31
   23562:	d402      	bmi.n	2356a <is_abort_cb+0x12>
			return -ECANCELED;
   23564:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   23568:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   2356a:	4b13      	ldr	r3, [pc, #76]	; (235b8 <is_abort_cb+0x60>)
   2356c:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   2356e:	f7ff ff4f 	bl	23410 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   23572:	2800      	cmp	r0, #0
   23574:	db0f      	blt.n	23596 <is_abort_cb+0x3e>
   23576:	f06f 000a 	mvn.w	r0, #10
}
   2357a:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   2357c:	7b0b      	ldrb	r3, [r1, #12]
   2357e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   23582:	690b      	ldr	r3, [r1, #16]
   23584:	781b      	ldrb	r3, [r3, #0]
   23586:	f003 030f 	and.w	r3, r3, #15
		return 0;
   2358a:	2b01      	cmp	r3, #1
   2358c:	bf14      	ite	ne
   2358e:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   23592:	2000      	moveq	r0, #0
}
   23594:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   23596:	4a09      	ldr	r2, [pc, #36]	; (235bc <is_abort_cb+0x64>)
   23598:	4909      	ldr	r1, [pc, #36]	; (235c0 <is_abort_cb+0x68>)
   2359a:	480a      	ldr	r0, [pc, #40]	; (235c4 <is_abort_cb+0x6c>)
   2359c:	f240 3377 	movw	r3, #887	; 0x377
   235a0:	f004 facf 	bl	27b42 <printk>
   235a4:	4040      	eors	r0, r0
   235a6:	f380 8811 	msr	BASEPRI, r0
   235aa:	f04f 0003 	mov.w	r0, #3
   235ae:	df02      	svc	2
   235b0:	f06f 000a 	mvn.w	r0, #10
}
   235b4:	bd08      	pop	{r3, pc}
   235b6:	bf00      	nop
   235b8:	00023ad9 	.word	0x00023ad9
   235bc:	0002c478 	.word	0x0002c478
   235c0:	0002c408 	.word	0x0002c408
   235c4:	0002b8dc 	.word	0x0002b8dc

000235c8 <abort_cb>:
{
   235c8:	b510      	push	{r4, lr}
	if (!prepare_param) {
   235ca:	b1d8      	cbz	r0, 23604 <abort_cb+0x3c>
	err = lll_hfclock_off();
   235cc:	460c      	mov	r4, r1
   235ce:	f7ff ff37 	bl	23440 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   235d2:	2800      	cmp	r0, #0
   235d4:	db04      	blt.n	235e0 <abort_cb+0x18>
	lll_done(param);
   235d6:	4620      	mov	r0, r4
}
   235d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   235dc:	f7ff bcae 	b.w	22f3c <lll_done>
	LL_ASSERT(err >= 0);
   235e0:	4a0c      	ldr	r2, [pc, #48]	; (23614 <abort_cb+0x4c>)
   235e2:	490d      	ldr	r1, [pc, #52]	; (23618 <abort_cb+0x50>)
   235e4:	480d      	ldr	r0, [pc, #52]	; (2361c <abort_cb+0x54>)
   235e6:	f240 339d 	movw	r3, #925	; 0x39d
   235ea:	f004 faaa 	bl	27b42 <printk>
   235ee:	4040      	eors	r0, r0
   235f0:	f380 8811 	msr	BASEPRI, r0
   235f4:	f04f 0003 	mov.w	r0, #3
   235f8:	df02      	svc	2
	lll_done(param);
   235fa:	4620      	mov	r0, r4
}
   235fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   23600:	f7ff bc9c 	b.w	22f3c <lll_done>
		radio_isr_set(isr_abort, param);
   23604:	4806      	ldr	r0, [pc, #24]	; (23620 <abort_cb+0x58>)
   23606:	f001 f9fb 	bl	24a00 <radio_isr_set>
}
   2360a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   2360e:	f001 baed 	b.w	24bec <radio_disable>
   23612:	bf00      	nop
   23614:	0002c478 	.word	0x0002c478
   23618:	0002c408 	.word	0x0002c408
   2361c:	0002b8dc 	.word	0x0002b8dc
   23620:	0002348d 	.word	0x0002348d

00023624 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   23624:	4b08      	ldr	r3, [pc, #32]	; (23648 <lll_adv_init+0x24>)
{
   23626:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   23628:	1d18      	adds	r0, r3, #4
   2362a:	2205      	movs	r2, #5
   2362c:	2128      	movs	r1, #40	; 0x28
   2362e:	f7f4 fdc1 	bl	181b4 <mem_init>
	MFIFO_INIT(pdu_free);
   23632:	4b06      	ldr	r3, [pc, #24]	; (2364c <lll_adv_init+0x28>)
   23634:	2400      	movs	r4, #0
   23636:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   23638:	2203      	movs	r2, #3
   2363a:	4621      	mov	r1, r4
   2363c:	4804      	ldr	r0, [pc, #16]	; (23650 <lll_adv_init+0x2c>)
   2363e:	f007 f8eb 	bl	2a818 <z_impl_k_sem_init>
}
   23642:	4620      	mov	r0, r4
   23644:	bd10      	pop	{r4, pc}
   23646:	bf00      	nop
   23648:	200020f4 	.word	0x200020f4
   2364c:	200004d4 	.word	0x200004d4
   23650:	200021c0 	.word	0x200021c0

00023654 <lll_adv_reset>:
   23654:	4b08      	ldr	r3, [pc, #32]	; (23678 <lll_adv_reset+0x24>)
   23656:	b510      	push	{r4, lr}
   23658:	1d18      	adds	r0, r3, #4
   2365a:	2205      	movs	r2, #5
   2365c:	2128      	movs	r1, #40	; 0x28
   2365e:	f7f4 fda9 	bl	181b4 <mem_init>
   23662:	4b06      	ldr	r3, [pc, #24]	; (2367c <lll_adv_reset+0x28>)
   23664:	2400      	movs	r4, #0
   23666:	805c      	strh	r4, [r3, #2]
   23668:	2203      	movs	r2, #3
   2366a:	4621      	mov	r1, r4
   2366c:	4804      	ldr	r0, [pc, #16]	; (23680 <lll_adv_reset+0x2c>)
   2366e:	f007 f8d3 	bl	2a818 <z_impl_k_sem_init>
   23672:	4620      	mov	r0, r4
   23674:	bd10      	pop	{r4, pc}
   23676:	bf00      	nop
   23678:	200020f4 	.word	0x200020f4
   2367c:	200004d4 	.word	0x200004d4
   23680:	200021c0 	.word	0x200021c0

00023684 <lll_adv_data_init>:
{
   23684:	b510      	push	{r4, lr}
   23686:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   23688:	4805      	ldr	r0, [pc, #20]	; (236a0 <lll_adv_data_init+0x1c>)
   2368a:	f7f4 fdc3 	bl	18214 <mem_acquire>
	if (!p) {
   2368e:	b120      	cbz	r0, 2369a <lll_adv_data_init+0x16>
   23690:	4603      	mov	r3, r0
	p->len = 0U;
   23692:	2000      	movs	r0, #0
   23694:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   23696:	6063      	str	r3, [r4, #4]
}
   23698:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   2369a:	f06f 000b 	mvn.w	r0, #11
}
   2369e:	bd10      	pop	{r4, pc}
   236a0:	200020f4 	.word	0x200020f4

000236a4 <lll_adv_data_reset>:
{
   236a4:	4603      	mov	r3, r0
	pdu->first = 0U;
   236a6:	2000      	movs	r0, #0
   236a8:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   236aa:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   236ac:	6098      	str	r0, [r3, #8]
}
   236ae:	4770      	bx	lr

000236b0 <lll_adv_pdu_alloc>:
{
   236b0:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   236b2:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   236b4:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   236b6:	429a      	cmp	r2, r3
   236b8:	d004      	beq.n	236c4 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   236ba:	b2d4      	uxtb	r4, r2
   236bc:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   236be:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   236c0:	4294      	cmp	r4, r2
   236c2:	d003      	beq.n	236cc <lll_adv_pdu_alloc+0x1c>
		last++;
   236c4:	3301      	adds	r3, #1
   236c6:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   236c8:	2b02      	cmp	r3, #2
   236ca:	d007      	beq.n	236dc <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   236cc:	461c      	mov	r4, r3
   236ce:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   236d2:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   236d4:	6865      	ldr	r5, [r4, #4]
	if (p) {
   236d6:	b14d      	cbz	r5, 236ec <lll_adv_pdu_alloc+0x3c>
}
   236d8:	4628      	mov	r0, r5
   236da:	bd70      	pop	{r4, r5, r6, pc}
{
   236dc:	2400      	movs	r4, #0
			last = 0U;
   236de:	4623      	mov	r3, r4
	*idx = last;
   236e0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   236e4:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   236e6:	6865      	ldr	r5, [r4, #4]
	if (p) {
   236e8:	2d00      	cmp	r5, #0
   236ea:	d1f5      	bne.n	236d8 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   236ec:	4e34      	ldr	r6, [pc, #208]	; (237c0 <lll_adv_pdu_alloc+0x110>)
   236ee:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   236f0:	78f1      	ldrb	r1, [r6, #3]
   236f2:	7833      	ldrb	r3, [r6, #0]
   236f4:	4291      	cmp	r1, r2
   236f6:	d003      	beq.n	23700 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   236f8:	fb02 6303 	mla	r3, r2, r3, r6
   236fc:	685d      	ldr	r5, [r3, #4]
	if (p) {
   236fe:	b93d      	cbnz	r5, 23710 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   23700:	4830      	ldr	r0, [pc, #192]	; (237c4 <lll_adv_pdu_alloc+0x114>)
   23702:	f7f4 fd87 	bl	18214 <mem_acquire>
	if (p) {
   23706:	4605      	mov	r5, r0
   23708:	b1a8      	cbz	r0, 23736 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   2370a:	6065      	str	r5, [r4, #4]
}
   2370c:	4628      	mov	r0, r5
   2370e:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   23710:	482d      	ldr	r0, [pc, #180]	; (237c8 <lll_adv_pdu_alloc+0x118>)
   23712:	2200      	movs	r2, #0
   23714:	2300      	movs	r3, #0
   23716:	f003 fa43 	bl	26ba0 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   2371a:	2800      	cmp	r0, #0
   2371c:	d134      	bne.n	23788 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   2371e:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   23720:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   23722:	7871      	ldrb	r1, [r6, #1]
   23724:	429a      	cmp	r2, r3
   23726:	d0f0      	beq.n	2370a <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   23728:	3301      	adds	r3, #1
   2372a:	b2db      	uxtb	r3, r3
		_first = 0U;
   2372c:	4299      	cmp	r1, r3
   2372e:	bf08      	it	eq
   23730:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   23732:	70b3      	strb	r3, [r6, #2]
	return mem;
   23734:	e7e9      	b.n	2370a <lll_adv_pdu_alloc+0x5a>
   23736:	4824      	ldr	r0, [pc, #144]	; (237c8 <lll_adv_pdu_alloc+0x118>)
   23738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2373c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   23740:	f003 fa2e 	bl	26ba0 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   23744:	2800      	cmp	r0, #0
   23746:	d12d      	bne.n	237a4 <lll_adv_pdu_alloc+0xf4>
	uint8_t _first = *first; /* Copy read-index */
   23748:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   2374a:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   2374c:	7832      	ldrb	r2, [r6, #0]
   2374e:	7870      	ldrb	r0, [r6, #1]
   23750:	4299      	cmp	r1, r3
   23752:	d00a      	beq.n	2376a <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   23754:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   23758:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   2375a:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   2375c:	b2db      	uxtb	r3, r3
		_first = 0U;
   2375e:	4298      	cmp	r0, r3
   23760:	bf08      	it	eq
   23762:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   23764:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   23766:	2d00      	cmp	r5, #0
   23768:	d1cf      	bne.n	2370a <lll_adv_pdu_alloc+0x5a>
   2376a:	4a18      	ldr	r2, [pc, #96]	; (237cc <lll_adv_pdu_alloc+0x11c>)
   2376c:	4918      	ldr	r1, [pc, #96]	; (237d0 <lll_adv_pdu_alloc+0x120>)
   2376e:	4819      	ldr	r0, [pc, #100]	; (237d4 <lll_adv_pdu_alloc+0x124>)
   23770:	f240 2382 	movw	r3, #642	; 0x282
   23774:	f004 f9e5 	bl	27b42 <printk>
   23778:	4040      	eors	r0, r0
   2377a:	f380 8811 	msr	BASEPRI, r0
   2377e:	f04f 0003 	mov.w	r0, #3
   23782:	df02      	svc	2
   23784:	2500      	movs	r5, #0
   23786:	e7c0      	b.n	2370a <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   23788:	4a10      	ldr	r2, [pc, #64]	; (237cc <lll_adv_pdu_alloc+0x11c>)
   2378a:	4913      	ldr	r1, [pc, #76]	; (237d8 <lll_adv_pdu_alloc+0x128>)
   2378c:	4811      	ldr	r0, [pc, #68]	; (237d4 <lll_adv_pdu_alloc+0x124>)
   2378e:	f240 236f 	movw	r3, #623	; 0x26f
   23792:	f004 f9d6 	bl	27b42 <printk>
   23796:	4040      	eors	r0, r0
   23798:	f380 8811 	msr	BASEPRI, r0
   2379c:	f04f 0003 	mov.w	r0, #3
   237a0:	df02      	svc	2
   237a2:	e7bc      	b.n	2371e <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   237a4:	4a09      	ldr	r2, [pc, #36]	; (237cc <lll_adv_pdu_alloc+0x11c>)
   237a6:	490c      	ldr	r1, [pc, #48]	; (237d8 <lll_adv_pdu_alloc+0x128>)
   237a8:	480a      	ldr	r0, [pc, #40]	; (237d4 <lll_adv_pdu_alloc+0x124>)
   237aa:	f240 237f 	movw	r3, #639	; 0x27f
   237ae:	f004 f9c8 	bl	27b42 <printk>
   237b2:	4040      	eors	r0, r0
   237b4:	f380 8811 	msr	BASEPRI, r0
   237b8:	f04f 0003 	mov.w	r0, #3
   237bc:	df02      	svc	2
   237be:	e7c3      	b.n	23748 <lll_adv_pdu_alloc+0x98>
   237c0:	200004d4 	.word	0x200004d4
   237c4:	200020f4 	.word	0x200020f4
   237c8:	200021c0 	.word	0x200021c0
   237cc:	0002c478 	.word	0x0002c478
   237d0:	0002c4d8 	.word	0x0002c4d8
   237d4:	0002b8dc 	.word	0x0002b8dc
   237d8:	0002bb88 	.word	0x0002bb88

000237dc <lll_adv_pdu_latest_get>:
{
   237dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   237de:	4604      	mov	r4, r0
	first = pdu->first;
   237e0:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   237e2:	7840      	ldrb	r0, [r0, #1]
   237e4:	4298      	cmp	r0, r3
   237e6:	d028      	beq.n	2383a <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   237e8:	4d16      	ldr	r5, [pc, #88]	; (23844 <lll_adv_pdu_latest_get+0x68>)
   237ea:	b2da      	uxtb	r2, r3
	last = last + 1;
   237ec:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   237ee:	786e      	ldrb	r6, [r5, #1]
   237f0:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   237f2:	3301      	adds	r3, #1
   237f4:	b2db      	uxtb	r3, r3
		last = 0U;
   237f6:	429e      	cmp	r6, r3
   237f8:	bf08      	it	eq
   237fa:	2300      	moveq	r3, #0
	if (last == first) {
   237fc:	4298      	cmp	r0, r3
   237fe:	d01e      	beq.n	2383e <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   23800:	1c50      	adds	r0, r2, #1
   23802:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   23804:	2802      	cmp	r0, #2
   23806:	bf04      	itt	eq
   23808:	2600      	moveq	r6, #0
			first = 0U;
   2380a:	4630      	moveq	r0, r6
		pdu->first = first;
   2380c:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   2380e:	bf18      	it	ne
   23810:	4606      	movne	r6, r0
		*is_modified = 1U;
   23812:	2001      	movs	r0, #1
   23814:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   23816:	78e8      	ldrb	r0, [r5, #3]
   23818:	7829      	ldrb	r1, [r5, #0]
   2381a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   2381e:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   23822:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   23824:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   23826:	6057      	str	r7, [r2, #4]
   23828:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   2382a:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   2382c:	4806      	ldr	r0, [pc, #24]	; (23848 <lll_adv_pdu_latest_get+0x6c>)
   2382e:	f003 f991 	bl	26b54 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   23832:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   23836:	6860      	ldr	r0, [r4, #4]
}
   23838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   2383a:	4606      	mov	r6, r0
   2383c:	e7f9      	b.n	23832 <lll_adv_pdu_latest_get+0x56>
			return NULL;
   2383e:	2000      	movs	r0, #0
}
   23840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23842:	bf00      	nop
   23844:	200004d4 	.word	0x200004d4
   23848:	200021c0 	.word	0x200021c0

0002384c <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   2384c:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   2384e:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   23850:	f3c3 1302 	ubfx	r3, r3, #4, #3
   23854:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   23856:	4604      	mov	r4, r0
   23858:	fa93 f0a3 	rbit	r0, r3
   2385c:	fab0 f080 	clz	r0, r0
   23860:	bf08      	it	eq
   23862:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   23866:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   23868:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   2386a:	d043      	beq.n	238f4 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   2386c:	7a22      	ldrb	r2, [r4, #8]
   2386e:	1e59      	subs	r1, r3, #1
   23870:	400b      	ands	r3, r1
   23872:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   23876:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   2387a:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   2387c:	f7ff fbce 	bl	2301c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   23880:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   23882:	f10d 0107 	add.w	r1, sp, #7
   23886:	f104 000c 	add.w	r0, r4, #12
   2388a:	f88d 3007 	strb.w	r3, [sp, #7]
   2388e:	f7ff ffa5 	bl	237dc <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   23892:	4605      	mov	r5, r0
   23894:	2800      	cmp	r0, #0
   23896:	d03e      	beq.n	23916 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   23898:	4628      	mov	r0, r5
   2389a:	f001 f991 	bl	24bc0 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   2389e:	782b      	ldrb	r3, [r5, #0]
   238a0:	f003 030f 	and.w	r3, r3, #15
   238a4:	2b02      	cmp	r3, #2
   238a6:	d01d      	beq.n	238e4 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   238a8:	f10d 0107 	add.w	r1, sp, #7
   238ac:	f104 0018 	add.w	r0, r4, #24
   238b0:	f7ff ff94 	bl	237dc <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   238b4:	4606      	mov	r6, r0
   238b6:	2800      	cmp	r0, #0
   238b8:	d03b      	beq.n	23932 <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   238ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   238be:	b95b      	cbnz	r3, 238d8 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   238c0:	4621      	mov	r1, r4
   238c2:	4823      	ldr	r0, [pc, #140]	; (23950 <chan_prepare.isra.0+0x104>)
   238c4:	f001 f89c 	bl	24a00 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   238c8:	2096      	movs	r0, #150	; 0x96
   238ca:	f001 fb05 	bl	24ed8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   238ce:	2000      	movs	r0, #0
   238d0:	f001 f9e8 	bl	24ca4 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   238d4:	b002      	add	sp, #8
   238d6:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   238d8:	2206      	movs	r2, #6
   238da:	1ca9      	adds	r1, r5, #2
   238dc:	1cb0      	adds	r0, r6, #2
   238de:	f005 f99a 	bl	28c16 <memcpy>
   238e2:	e7ed      	b.n	238c0 <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   238e4:	481b      	ldr	r0, [pc, #108]	; (23954 <chan_prepare.isra.0+0x108>)
   238e6:	4621      	mov	r1, r4
   238e8:	f001 f88a 	bl	24a00 <radio_isr_set>
		radio_switch_complete_and_disable();
   238ec:	f001 fa82 	bl	24df4 <radio_switch_complete_and_disable>
}
   238f0:	b002      	add	sp, #8
   238f2:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   238f4:	4a18      	ldr	r2, [pc, #96]	; (23958 <chan_prepare.isra.0+0x10c>)
   238f6:	4919      	ldr	r1, [pc, #100]	; (2395c <chan_prepare.isra.0+0x110>)
   238f8:	4819      	ldr	r0, [pc, #100]	; (23960 <chan_prepare.isra.0+0x114>)
   238fa:	f240 43a6 	movw	r3, #1190	; 0x4a6
   238fe:	f004 f920 	bl	27b42 <printk>
   23902:	4040      	eors	r0, r0
   23904:	f380 8811 	msr	BASEPRI, r0
   23908:	f04f 0003 	mov.w	r0, #3
   2390c:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   2390e:	7a23      	ldrb	r3, [r4, #8]
   23910:	f3c3 1302 	ubfx	r3, r3, #4, #3
   23914:	e7aa      	b.n	2386c <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   23916:	4a10      	ldr	r2, [pc, #64]	; (23958 <chan_prepare.isra.0+0x10c>)
   23918:	4912      	ldr	r1, [pc, #72]	; (23964 <chan_prepare.isra.0+0x118>)
   2391a:	4811      	ldr	r0, [pc, #68]	; (23960 <chan_prepare.isra.0+0x114>)
   2391c:	f240 43af 	movw	r3, #1199	; 0x4af
   23920:	f004 f90f 	bl	27b42 <printk>
   23924:	4040      	eors	r0, r0
   23926:	f380 8811 	msr	BASEPRI, r0
   2392a:	f04f 0003 	mov.w	r0, #3
   2392e:	df02      	svc	2
   23930:	e7b2      	b.n	23898 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   23932:	4a09      	ldr	r2, [pc, #36]	; (23958 <chan_prepare.isra.0+0x10c>)
   23934:	490c      	ldr	r1, [pc, #48]	; (23968 <chan_prepare.isra.0+0x11c>)
   23936:	480a      	ldr	r0, [pc, #40]	; (23960 <chan_prepare.isra.0+0x114>)
   23938:	f240 43b9 	movw	r3, #1209	; 0x4b9
   2393c:	f004 f901 	bl	27b42 <printk>
   23940:	4040      	eors	r0, r0
   23942:	f380 8811 	msr	BASEPRI, r0
   23946:	f04f 0003 	mov.w	r0, #3
   2394a:	df02      	svc	2
   2394c:	e7b5      	b.n	238ba <chan_prepare.isra.0+0x6e>
   2394e:	bf00      	nop
   23950:	000234a5 	.word	0x000234a5
   23954:	0002396d 	.word	0x0002396d
   23958:	0002c478 	.word	0x0002c478
   2395c:	0002c104 	.word	0x0002c104
   23960:	0002b8dc 	.word	0x0002b8dc
   23964:	0002c4dc 	.word	0x0002c4dc
   23968:	0002c4e0 	.word	0x0002c4e0

0002396c <isr_done>:
{
   2396c:	b510      	push	{r4, lr}
   2396e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   23970:	f7ff fbaa 	bl	230c8 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   23974:	7a23      	ldrb	r3, [r4, #8]
   23976:	f003 0271 	and.w	r2, r3, #113	; 0x71
   2397a:	2a01      	cmp	r2, #1
   2397c:	d105      	bne.n	2398a <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   2397e:	f3c3 0242 	ubfx	r2, r3, #1, #3
   23982:	f362 1306 	bfi	r3, r2, #4, #3
   23986:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   23988:	b2db      	uxtb	r3, r3
   2398a:	f013 0f70 	tst.w	r3, #112	; 0x70
   2398e:	d005      	beq.n	2399c <isr_done+0x30>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   23990:	6863      	ldr	r3, [r4, #4]
   23992:	b153      	cbz	r3, 239aa <isr_done+0x3e>
   23994:	f893 3020 	ldrb.w	r3, [r3, #32]
   23998:	079b      	lsls	r3, r3, #30
   2399a:	d506      	bpl.n	239aa <isr_done+0x3e>
	radio_filter_disable();
   2399c:	f001 fa6a 	bl	24e74 <radio_filter_disable>
	lll_isr_cleanup(param);
   239a0:	4620      	mov	r0, r4
}
   239a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   239a6:	f7ff bb9d 	b.w	230e4 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   239aa:	4620      	mov	r0, r4
   239ac:	f7ff ff4e 	bl	2384c <chan_prepare.isra.0>
		radio_tx_enable();
   239b0:	f001 f916 	bl	24be0 <radio_tx_enable>
}
   239b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   239b8:	f001 bb68 	b.w	2508c <radio_tmr_end_capture>

000239bc <prepare_cb>:
{
   239bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   239be:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   239c0:	6863      	ldr	r3, [r4, #4]
{
   239c2:	b083      	sub	sp, #12
   239c4:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   239c6:	2b00      	cmp	r3, #0
   239c8:	d16d      	bne.n	23aa6 <prepare_cb+0xea>
	radio_reset();
   239ca:	f001 f85b 	bl	24a84 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   239ce:	2000      	movs	r0, #0
   239d0:	f001 f88c 	bl	24aec <radio_tx_power_set>
	radio_phy_set(0, 0);
   239d4:	2100      	movs	r1, #0
   239d6:	4608      	mov	r0, r1
   239d8:	f001 f878 	bl	24acc <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   239dc:	2200      	movs	r2, #0
   239de:	2125      	movs	r1, #37	; 0x25
   239e0:	2008      	movs	r0, #8
   239e2:	f001 f8b9 	bl	24b58 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   239e6:	4b35      	ldr	r3, [pc, #212]	; (23abc <prepare_cb+0x100>)
   239e8:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   239ea:	a801      	add	r0, sp, #4
   239ec:	f001 f89c 	bl	24b28 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   239f0:	4933      	ldr	r1, [pc, #204]	; (23ac0 <prepare_cb+0x104>)
   239f2:	f240 605b 	movw	r0, #1627	; 0x65b
   239f6:	f001 f937 	bl	24c68 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   239fa:	7a23      	ldrb	r3, [r4, #8]
   239fc:	f3c3 0242 	ubfx	r2, r3, #1, #3
   23a00:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   23a04:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   23a06:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   23a08:	f7ff ff20 	bl	2384c <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   23a0c:	f7ff f884 	bl	22b18 <ull_filter_lll_rl_enabled>
   23a10:	bb98      	cbnz	r0, 23a7a <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   23a12:	7a63      	ldrb	r3, [r4, #9]
   23a14:	079b      	lsls	r3, r3, #30
   23a16:	d127      	bne.n	23a68 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   23a18:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   23a1a:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   23a1c:	4638      	mov	r0, r7
   23a1e:	f7ff fae3 	bl	22fe8 <lll_event_offset_get>
   23a22:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   23a24:	686a      	ldr	r2, [r5, #4]
   23a26:	f106 0109 	add.w	r1, r6, #9
   23a2a:	2001      	movs	r0, #1
   23a2c:	f001 fa60 	bl	24ef0 <radio_tmr_start>
	radio_tmr_end_capture();
   23a30:	f001 fb2c 	bl	2508c <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   23a34:	4620      	mov	r0, r4
   23a36:	f7f9 f887 	bl	1cb48 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   23a3a:	1c81      	adds	r1, r0, #2
   23a3c:	4632      	mov	r2, r6
   23a3e:	b2c9      	uxtb	r1, r1
   23a40:	4638      	mov	r0, r7
   23a42:	f7ff fadb 	bl	22ffc <lll_preempt_calc>
   23a46:	b930      	cbnz	r0, 23a56 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   23a48:	4620      	mov	r0, r4
   23a4a:	f7ff fa75 	bl	22f38 <lll_prepare_done>
		LL_ASSERT(!ret);
   23a4e:	b9d0      	cbnz	r0, 23a86 <prepare_cb+0xca>
}
   23a50:	2000      	movs	r0, #0
   23a52:	b003      	add	sp, #12
   23a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   23a56:	481b      	ldr	r0, [pc, #108]	; (23ac4 <prepare_cb+0x108>)
   23a58:	4621      	mov	r1, r4
   23a5a:	f000 ffd1 	bl	24a00 <radio_isr_set>
		radio_disable();
   23a5e:	f001 f8c5 	bl	24bec <radio_disable>
}
   23a62:	2000      	movs	r0, #0
   23a64:	b003      	add	sp, #12
   23a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   23a68:	2001      	movs	r0, #1
   23a6a:	f7ff f80f 	bl	22a8c <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   23a6e:	7841      	ldrb	r1, [r0, #1]
   23a70:	1c82      	adds	r2, r0, #2
   23a72:	7800      	ldrb	r0, [r0, #0]
   23a74:	f001 f9de 	bl	24e34 <radio_filter_configure>
   23a78:	e7ce      	b.n	23a18 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   23a7a:	7a60      	ldrb	r0, [r4, #9]
   23a7c:	f010 0003 	ands.w	r0, r0, #3
   23a80:	bf18      	it	ne
   23a82:	2001      	movne	r0, #1
   23a84:	e7f1      	b.n	23a6a <prepare_cb+0xae>
		LL_ASSERT(!ret);
   23a86:	4a10      	ldr	r2, [pc, #64]	; (23ac8 <prepare_cb+0x10c>)
   23a88:	4910      	ldr	r1, [pc, #64]	; (23acc <prepare_cb+0x110>)
   23a8a:	4811      	ldr	r0, [pc, #68]	; (23ad0 <prepare_cb+0x114>)
   23a8c:	f240 334e 	movw	r3, #846	; 0x34e
   23a90:	f004 f857 	bl	27b42 <printk>
   23a94:	4040      	eors	r0, r0
   23a96:	f380 8811 	msr	BASEPRI, r0
   23a9a:	f04f 0003 	mov.w	r0, #3
   23a9e:	df02      	svc	2
}
   23aa0:	2000      	movs	r0, #0
   23aa2:	b003      	add	sp, #12
   23aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   23aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
   23aaa:	079a      	lsls	r2, r3, #30
   23aac:	d08d      	beq.n	239ca <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   23aae:	4809      	ldr	r0, [pc, #36]	; (23ad4 <prepare_cb+0x118>)
   23ab0:	4621      	mov	r1, r4
   23ab2:	f000 ffa5 	bl	24a00 <radio_isr_set>
		radio_disable();
   23ab6:	f001 f899 	bl	24bec <radio_disable>
		return 0;
   23aba:	e7c9      	b.n	23a50 <prepare_cb+0x94>
   23abc:	8e89bed6 	.word	0x8e89bed6
   23ac0:	00555555 	.word	0x00555555
   23ac4:	0002348d 	.word	0x0002348d
   23ac8:	0002c478 	.word	0x0002c478
   23acc:	0002bc88 	.word	0x0002bc88
   23ad0:	0002b8dc 	.word	0x0002b8dc
   23ad4:	00023175 	.word	0x00023175

00023ad8 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   23ad8:	68c3      	ldr	r3, [r0, #12]
{
   23ada:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   23adc:	681e      	ldr	r6, [r3, #0]
{
   23ade:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   23ae0:	f7f5 fe7e 	bl	197e0 <ticker_ticks_now_get>
   23ae4:	4605      	mov	r5, r0
   23ae6:	4630      	mov	r0, r6
   23ae8:	f7ff fa7e 	bl	22fe8 <lll_event_offset_get>
	p->remainder = 0;
   23aec:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   23aee:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   23af0:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   23af4:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   23af6:	4620      	mov	r0, r4
}
   23af8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   23afc:	f7ff bf5e 	b.w	239bc <prepare_cb>

00023b00 <lll_adv_prepare>:
{
   23b00:	b510      	push	{r4, lr}
   23b02:	b082      	sub	sp, #8
   23b04:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   23b06:	f7ff fc83 	bl	23410 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   23b0a:	2800      	cmp	r0, #0
   23b0c:	db1a      	blt.n	23b44 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   23b0e:	4a14      	ldr	r2, [pc, #80]	; (23b60 <lll_adv_prepare+0x60>)
   23b10:	4914      	ldr	r1, [pc, #80]	; (23b64 <lll_adv_prepare+0x64>)
   23b12:	4815      	ldr	r0, [pc, #84]	; (23b68 <lll_adv_prepare+0x68>)
   23b14:	9400      	str	r4, [sp, #0]
   23b16:	2300      	movs	r3, #0
   23b18:	f7f8 fbfe 	bl	1c318 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   23b1c:	b108      	cbz	r0, 23b22 <lll_adv_prepare+0x22>
   23b1e:	3077      	adds	r0, #119	; 0x77
   23b20:	d101      	bne.n	23b26 <lll_adv_prepare+0x26>
}
   23b22:	b002      	add	sp, #8
   23b24:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   23b26:	4a11      	ldr	r2, [pc, #68]	; (23b6c <lll_adv_prepare+0x6c>)
   23b28:	4911      	ldr	r1, [pc, #68]	; (23b70 <lll_adv_prepare+0x70>)
   23b2a:	4812      	ldr	r0, [pc, #72]	; (23b74 <lll_adv_prepare+0x74>)
   23b2c:	f44f 73f4 	mov.w	r3, #488	; 0x1e8
   23b30:	f004 f807 	bl	27b42 <printk>
   23b34:	4040      	eors	r0, r0
   23b36:	f380 8811 	msr	BASEPRI, r0
   23b3a:	f04f 0003 	mov.w	r0, #3
   23b3e:	df02      	svc	2
}
   23b40:	b002      	add	sp, #8
   23b42:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   23b44:	4a09      	ldr	r2, [pc, #36]	; (23b6c <lll_adv_prepare+0x6c>)
   23b46:	490c      	ldr	r1, [pc, #48]	; (23b78 <lll_adv_prepare+0x78>)
   23b48:	480a      	ldr	r0, [pc, #40]	; (23b74 <lll_adv_prepare+0x74>)
   23b4a:	f240 13e5 	movw	r3, #485	; 0x1e5
   23b4e:	f003 fff8 	bl	27b42 <printk>
   23b52:	4040      	eors	r0, r0
   23b54:	f380 8811 	msr	BASEPRI, r0
   23b58:	f04f 0003 	mov.w	r0, #3
   23b5c:	df02      	svc	2
   23b5e:	e7d6      	b.n	23b0e <lll_adv_prepare+0xe>
   23b60:	000239bd 	.word	0x000239bd
   23b64:	000235c9 	.word	0x000235c9
   23b68:	00023559 	.word	0x00023559
   23b6c:	0002c478 	.word	0x0002c478
   23b70:	0002c4ec 	.word	0x0002c4ec
   23b74:	0002b8dc 	.word	0x0002b8dc
   23b78:	0002c408 	.word	0x0002c408

00023b7c <lll_adv_scan_req_check>:
{
   23b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   23b80:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   23b84:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   23b88:	f01c 0f01 	tst.w	ip, #1
{
   23b8c:	460f      	mov	r7, r1
   23b8e:	4616      	mov	r6, r2
   23b90:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   23b92:	d009      	beq.n	23ba8 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   23b94:	f1b8 0f00 	cmp.w	r8, #0
   23b98:	d016      	beq.n	23bc8 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   23b9a:	783b      	ldrb	r3, [r7, #0]
   23b9c:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   23ba0:	d019      	beq.n	23bd6 <lll_adv_scan_req_check+0x5a>
{
   23ba2:	2000      	movs	r0, #0
}
   23ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23ba8:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   23baa:	f811 0b02 	ldrb.w	r0, [r1], #2
   23bae:	9a07      	ldr	r2, [sp, #28]
   23bb0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   23bb4:	f7fe ff76 	bl	22aa4 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   23bb8:	2800      	cmp	r0, #0
   23bba:	d1ee      	bne.n	23b9a <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   23bbc:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   23bbe:	07db      	lsls	r3, r3, #31
   23bc0:	d5ef      	bpl.n	23ba2 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   23bc2:	f1b8 0f00 	cmp.w	r8, #0
   23bc6:	d1e8      	bne.n	23b9a <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   23bc8:	9b07      	ldr	r3, [sp, #28]
   23bca:	7818      	ldrb	r0, [r3, #0]
   23bcc:	f7fe ff2e 	bl	22a2c <ull_filter_lll_irk_whitelisted>
   23bd0:	2800      	cmp	r0, #0
   23bd2:	d1e2      	bne.n	23b9a <lll_adv_scan_req_check+0x1e>
   23bd4:	e7e5      	b.n	23ba2 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   23bd6:	2206      	movs	r2, #6
   23bd8:	f107 0108 	add.w	r1, r7, #8
   23bdc:	4628      	mov	r0, r5
   23bde:	f005 f809 	bl	28bf4 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   23be2:	fab0 f080 	clz	r0, r0
   23be6:	0940      	lsrs	r0, r0, #5
}
   23be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023bec <lll_adv_connect_ind_check>:
{
   23bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23bf0:	461f      	mov	r7, r3
	if (tgt_addr) {
   23bf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   23bf4:	f89d 9020 	ldrb.w	r9, [sp, #32]
   23bf8:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   23bfc:	4605      	mov	r5, r0
   23bfe:	460c      	mov	r4, r1
   23c00:	4690      	mov	r8, r2
	if (tgt_addr) {
   23c02:	b9fb      	cbnz	r3, 23c44 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   23c04:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   23c06:	079a      	lsls	r2, r3, #30
   23c08:	d507      	bpl.n	23c1a <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   23c0a:	b1a6      	cbz	r6, 23c36 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   23c0c:	7823      	ldrb	r3, [r4, #0]
   23c0e:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   23c12:	d03a      	beq.n	23c8a <lll_adv_connect_ind_check+0x9e>
   23c14:	2000      	movs	r0, #0
}
   23c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   23c1a:	f811 0b02 	ldrb.w	r0, [r1], #2
   23c1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23c20:	f3c0 1080 	ubfx	r0, r0, #6, #1
   23c24:	f7fe ff3e 	bl	22aa4 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   23c28:	2800      	cmp	r0, #0
   23c2a:	d1ef      	bne.n	23c0c <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   23c2c:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   23c2e:	079b      	lsls	r3, r3, #30
   23c30:	d5f0      	bpl.n	23c14 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   23c32:	2e00      	cmp	r6, #0
   23c34:	d1ea      	bne.n	23c0c <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   23c36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23c38:	7818      	ldrb	r0, [r3, #0]
   23c3a:	f7fe fef7 	bl	22a2c <ull_filter_lll_irk_whitelisted>
   23c3e:	2800      	cmp	r0, #0
   23c40:	d1e4      	bne.n	23c0c <lll_adv_connect_ind_check+0x20>
   23c42:	e7e7      	b.n	23c14 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   23c44:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   23c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   23c48:	f81a 0b02 	ldrb.w	r0, [sl], #2
   23c4c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   23c50:	4651      	mov	r1, sl
   23c52:	f7fe ff27 	bl	22aa4 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   23c56:	2800      	cmp	r0, #0
   23c58:	d0dc      	beq.n	23c14 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   23c5a:	7823      	ldrb	r3, [r4, #0]
   23c5c:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   23c60:	d1d8      	bne.n	23c14 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   23c62:	4638      	mov	r0, r7
   23c64:	2206      	movs	r2, #6
   23c66:	f104 0108 	add.w	r1, r4, #8
   23c6a:	f004 ffc3 	bl	28bf4 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   23c6e:	2800      	cmp	r0, #0
   23c70:	d1d0      	bne.n	23c14 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   23c72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   23c74:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   23c76:	28ff      	cmp	r0, #255	; 0xff
   23c78:	d011      	beq.n	23c9e <lll_adv_connect_ind_check+0xb2>
   23c7a:	7aab      	ldrb	r3, [r5, #10]
   23c7c:	2bff      	cmp	r3, #255	; 0xff
   23c7e:	d00e      	beq.n	23c9e <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   23c80:	1ac0      	subs	r0, r0, r3
   23c82:	fab0 f080 	clz	r0, r0
   23c86:	0940      	lsrs	r0, r0, #5
   23c88:	e7c5      	b.n	23c16 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   23c8a:	2206      	movs	r2, #6
   23c8c:	f104 0108 	add.w	r1, r4, #8
   23c90:	4638      	mov	r0, r7
   23c92:	f004 ffaf 	bl	28bf4 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   23c96:	fab0 f080 	clz	r0, r0
   23c9a:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   23c9c:	e7bb      	b.n	23c16 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   23c9e:	7823      	ldrb	r3, [r4, #0]
   23ca0:	f3c3 1380 	ubfx	r3, r3, #6, #1
   23ca4:	454b      	cmp	r3, r9
   23ca6:	d1b5      	bne.n	23c14 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   23ca8:	9809      	ldr	r0, [sp, #36]	; 0x24
   23caa:	2206      	movs	r2, #6
   23cac:	4651      	mov	r1, sl
   23cae:	f004 ffa1 	bl	28bf4 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   23cb2:	fab0 f080 	clz	r0, r0
   23cb6:	0940      	lsrs	r0, r0, #5
   23cb8:	e7ad      	b.n	23c16 <lll_adv_connect_ind_check+0x2a>
   23cba:	bf00      	nop

00023cbc <isr_rx>:
{
   23cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23cc0:	b089      	sub	sp, #36	; 0x24
   23cc2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   23cc4:	f000 ffbc 	bl	24c40 <radio_is_done>
	if (trx_done) {
   23cc8:	b2c0      	uxtb	r0, r0
   23cca:	b950      	cbnz	r0, 23ce2 <isr_rx+0x26>
	lll_isr_status_reset();
   23ccc:	f7ff f9fc 	bl	230c8 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   23cd0:	4874      	ldr	r0, [pc, #464]	; (23ea4 <isr_rx+0x1e8>)
   23cd2:	4621      	mov	r1, r4
   23cd4:	f000 fe94 	bl	24a00 <radio_isr_set>
}
   23cd8:	b009      	add	sp, #36	; 0x24
   23cda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   23cde:	f000 bf85 	b.w	24bec <radio_disable>
		crc_ok = radio_crc_is_valid();
   23ce2:	f000 ffcd 	bl	24c80 <radio_crc_is_valid>
   23ce6:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   23ce8:	f001 f8d6 	bl	24e98 <radio_filter_has_match>
   23cec:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   23cee:	f001 f8dd 	bl	24eac <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   23cf2:	f001 fac1 	bl	25278 <radio_ar_has_match>
   23cf6:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   23cf8:	f001 faa2 	bl	25240 <radio_ar_match_get>
	if (crc_ok) {
   23cfc:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   23cfe:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   23d00:	f001 f88e 	bl	24e20 <radio_rssi_is_ready>
	lll_isr_status_reset();
   23d04:	f7ff f9e0 	bl	230c8 <lll_isr_status_reset>
	if (crc_ok) {
   23d08:	2d00      	cmp	r5, #0
   23d0a:	d0e1      	beq.n	23cd0 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   23d0c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   23d10:	d17a      	bne.n	23e08 <isr_rx+0x14c>
   23d12:	20ff      	movs	r0, #255	; 0xff
   23d14:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   23d18:	f000 ffc0 	bl	24c9c <radio_pkt_scratch_get>
   23d1c:	7b23      	ldrb	r3, [r4, #12]
   23d1e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   23d22:	4680      	mov	r8, r0
   23d24:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   23d26:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   23d28:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   23d2a:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   23d2e:	f005 000f 	and.w	r0, r5, #15
   23d32:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   23d34:	bf08      	it	eq
   23d36:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   23d3a:	f898 1000 	ldrb.w	r1, [r8]
   23d3e:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   23d42:	bf18      	it	ne
   23d44:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   23d48:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   23d4a:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   23d4e:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   23d52:	d060      	beq.n	23e16 <isr_rx+0x15a>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   23d54:	2905      	cmp	r1, #5
   23d56:	d1bb      	bne.n	23cd0 <isr_rx+0x14>
   23d58:	f898 1001 	ldrb.w	r1, [r8, #1]
   23d5c:	2922      	cmp	r1, #34	; 0x22
   23d5e:	d1b7      	bne.n	23cd0 <isr_rx+0x14>
		   lll->conn && !lll->conn->slave.cancelled &&
   23d60:	6861      	ldr	r1, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   23d62:	2900      	cmp	r1, #0
   23d64:	d0b4      	beq.n	23cd0 <isr_rx+0x14>
		   lll->conn && !lll->conn->slave.cancelled &&
   23d66:	f891 1020 	ldrb.w	r1, [r1, #32]
   23d6a:	0789      	lsls	r1, r1, #30
   23d6c:	d4b0      	bmi.n	23cd0 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   23d6e:	f10d 011f 	add.w	r1, sp, #31
   23d72:	9103      	str	r1, [sp, #12]
   23d74:	e9cd 9701 	strd	r9, r7, [sp, #4]
   23d78:	9500      	str	r5, [sp, #0]
   23d7a:	4641      	mov	r1, r8
   23d7c:	4620      	mov	r0, r4
   23d7e:	f7ff ff35 	bl	23bec <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   23d82:	2800      	cmp	r0, #0
   23d84:	d0a4      	beq.n	23cd0 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   23d86:	2004      	movs	r0, #4
   23d88:	f7f8 f980 	bl	1c08c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   23d8c:	2800      	cmp	r0, #0
   23d8e:	d09f      	beq.n	23cd0 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   23d90:	4845      	ldr	r0, [pc, #276]	; (23ea8 <isr_rx+0x1ec>)
   23d92:	4621      	mov	r1, r4
   23d94:	f000 fe34 	bl	24a00 <radio_isr_set>
		radio_disable();
   23d98:	f000 ff28 	bl	24bec <radio_disable>
		LL_ASSERT(!radio_is_ready());
   23d9c:	f000 ff46 	bl	24c2c <radio_is_ready>
   23da0:	2800      	cmp	r0, #0
   23da2:	d153      	bne.n	23e4c <isr_rx+0x190>
		lll->conn->slave.initiated = 1;
   23da4:	6862      	ldr	r2, [r4, #4]
   23da6:	f892 3020 	ldrb.w	r3, [r2, #32]
   23daa:	f043 0301 	orr.w	r3, r3, #1
   23dae:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   23db2:	f7f8 f989 	bl	1c0c8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   23db6:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
   23db8:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   23dba:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   23dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23dc0:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   23dc2:	4641      	mov	r1, r8
   23dc4:	2224      	movs	r2, #36	; 0x24
   23dc6:	301c      	adds	r0, #28
   23dc8:	f004 ff25 	bl	28c16 <memcpy>
		ftr->param = lll;
   23dcc:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   23dce:	f001 f911 	bl	24ff4 <radio_tmr_start_get>
   23dd2:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   23dd4:	f001 f962 	bl	2509c <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   23dd8:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   23dda:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   23ddc:	4608      	mov	r0, r1
   23dde:	f000 fef5 	bl	24bcc <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   23de2:	1a24      	subs	r4, r4, r0
   23de4:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   23de6:	b1a6      	cbz	r6, 23e12 <isr_rx+0x156>
   23de8:	f89d 301f 	ldrb.w	r3, [sp, #31]
   23dec:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   23dee:	f7f8 f96b 	bl	1c0c8 <ull_pdu_rx_alloc>
   23df2:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   23df4:	4629      	mov	r1, r5
   23df6:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   23df8:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   23dfa:	f7f8 f97b 	bl	1c0f4 <ull_rx_put>
		ull_rx_sched();
   23dfe:	f7f8 f989 	bl	1c114 <ull_rx_sched>
}
   23e02:	b009      	add	sp, #36	; 0x24
   23e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   23e08:	fa5f f088 	uxtb.w	r0, r8
   23e0c:	f7fe fdbc 	bl	22988 <ull_filter_lll_rl_irk_idx>
   23e10:	e780      	b.n	23d14 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   23e12:	23ff      	movs	r3, #255	; 0xff
   23e14:	e7ea      	b.n	23dec <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   23e16:	f898 1001 	ldrb.w	r1, [r8, #1]
   23e1a:	290c      	cmp	r1, #12
   23e1c:	f47f af58 	bne.w	23cd0 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   23e20:	f1b9 0f00 	cmp.w	r9, #0
   23e24:	f47f af54 	bne.w	23cd0 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   23e28:	f10d 011f 	add.w	r1, sp, #31
   23e2c:	9101      	str	r1, [sp, #4]
   23e2e:	9700      	str	r7, [sp, #0]
   23e30:	4641      	mov	r1, r8
   23e32:	4620      	mov	r0, r4
   23e34:	e9cd 2304 	strd	r2, r3, [sp, #16]
   23e38:	f7ff fea0 	bl	23b7c <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   23e3c:	b9a0      	cbnz	r0, 23e68 <isr_rx+0x1ac>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   23e3e:	f898 1000 	ldrb.w	r1, [r8]
   23e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   23e46:	f001 010f 	and.w	r1, r1, #15
   23e4a:	e783      	b.n	23d54 <isr_rx+0x98>
		LL_ASSERT(!radio_is_ready());
   23e4c:	4a17      	ldr	r2, [pc, #92]	; (23eac <isr_rx+0x1f0>)
   23e4e:	4918      	ldr	r1, [pc, #96]	; (23eb0 <isr_rx+0x1f4>)
   23e50:	4818      	ldr	r0, [pc, #96]	; (23eb4 <isr_rx+0x1f8>)
   23e52:	f240 5345 	movw	r3, #1349	; 0x545
   23e56:	f003 fe74 	bl	27b42 <printk>
   23e5a:	4040      	eors	r0, r0
   23e5c:	f380 8811 	msr	BASEPRI, r0
   23e60:	f04f 0003 	mov.w	r0, #3
   23e64:	df02      	svc	2
   23e66:	e79d      	b.n	23da4 <isr_rx+0xe8>
		radio_isr_set(isr_done, lll);
   23e68:	4621      	mov	r1, r4
   23e6a:	480e      	ldr	r0, [pc, #56]	; (23ea4 <isr_rx+0x1e8>)
   23e6c:	f000 fdc8 	bl	24a00 <radio_isr_set>
		radio_switch_complete_and_disable();
   23e70:	f000 ffc0 	bl	24df4 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   23e74:	7e23      	ldrb	r3, [r4, #24]
   23e76:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   23e7a:	69e0      	ldr	r0, [r4, #28]
   23e7c:	f000 fea0 	bl	24bc0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   23e80:	f000 fed4 	bl	24c2c <radio_is_ready>
   23e84:	2800      	cmp	r0, #0
   23e86:	d0bc      	beq.n	23e02 <isr_rx+0x146>
   23e88:	4a08      	ldr	r2, [pc, #32]	; (23eac <isr_rx+0x1f0>)
   23e8a:	4909      	ldr	r1, [pc, #36]	; (23eb0 <isr_rx+0x1f4>)
   23e8c:	4809      	ldr	r0, [pc, #36]	; (23eb4 <isr_rx+0x1f8>)
   23e8e:	f240 43fe 	movw	r3, #1278	; 0x4fe
   23e92:	f003 fe56 	bl	27b42 <printk>
   23e96:	4040      	eors	r0, r0
   23e98:	f380 8811 	msr	BASEPRI, r0
   23e9c:	f04f 0003 	mov.w	r0, #3
   23ea0:	df02      	svc	2
		if (!err) {
   23ea2:	e7ae      	b.n	23e02 <isr_rx+0x146>
   23ea4:	0002396d 	.word	0x0002396d
   23ea8:	0002348d 	.word	0x0002348d
   23eac:	0002c478 	.word	0x0002c478
   23eb0:	0002c4c4 	.word	0x0002c4c4
   23eb4:	0002b8dc 	.word	0x0002b8dc

00023eb8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   23eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23eba:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   23ebc:	f7ff f904 	bl	230c8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   23ec0:	f7f8 f9ec 	bl	1c29c <ull_event_done_extra_get>
	LL_ASSERT(e);
   23ec4:	4604      	mov	r4, r0
   23ec6:	2800      	cmp	r0, #0
   23ec8:	d033      	beq.n	23f32 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   23eca:	4b21      	ldr	r3, [pc, #132]	; (23f50 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   23ecc:	4921      	ldr	r1, [pc, #132]	; (23f54 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   23ece:	4a22      	ldr	r2, [pc, #136]	; (23f58 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   23ed0:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   23ed2:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   23ed4:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   23ed6:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   23ed8:	2001      	movs	r0, #1
   23eda:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   23edc:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   23ede:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   23ee0:	b11b      	cbz	r3, 23eea <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   23ee2:	f995 301d 	ldrsb.w	r3, [r5, #29]
   23ee6:	2b00      	cmp	r3, #0
   23ee8:	db04      	blt.n	23ef4 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   23eea:	4628      	mov	r0, r5
}
   23eec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   23ef0:	f7ff b8f8 	b.w	230e4 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   23ef4:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   23ef8:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   23efc:	2b02      	cmp	r3, #2
   23efe:	d016      	beq.n	23f2e <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   23f00:	2b04      	cmp	r3, #4
   23f02:	bf14      	ite	ne
   23f04:	2728      	movne	r7, #40	; 0x28
   23f06:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   23f0a:	f001 f8b3 	bl	25074 <radio_tmr_aa_restore>
   23f0e:	4606      	mov	r6, r0
   23f10:	f001 f8b6 	bl	25080 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   23f14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   23f16:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   23f18:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   23f1a:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   23f1e:	2300      	movs	r3, #0
   23f20:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   23f22:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   23f24:	4628      	mov	r0, r5
}
   23f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   23f2a:	f7ff b8db 	b.w	230e4 <lll_isr_cleanup>
	switch (phy) {
   23f2e:	2718      	movs	r7, #24
   23f30:	e7eb      	b.n	23f0a <isr_done+0x52>
	LL_ASSERT(e);
   23f32:	4a0a      	ldr	r2, [pc, #40]	; (23f5c <isr_done+0xa4>)
   23f34:	490a      	ldr	r1, [pc, #40]	; (23f60 <isr_done+0xa8>)
   23f36:	480b      	ldr	r0, [pc, #44]	; (23f64 <isr_done+0xac>)
   23f38:	f240 2379 	movw	r3, #633	; 0x279
   23f3c:	f003 fe01 	bl	27b42 <printk>
   23f40:	4040      	eors	r0, r0
   23f42:	f380 8811 	msr	BASEPRI, r0
   23f46:	f04f 0003 	mov.w	r0, #3
   23f4a:	df02      	svc	2
   23f4c:	e7bd      	b.n	23eca <isr_done+0x12>
   23f4e:	bf00      	nop
   23f50:	20002592 	.word	0x20002592
   23f54:	2000263e 	.word	0x2000263e
   23f58:	2000263f 	.word	0x2000263f
   23f5c:	0002c510 	.word	0x0002c510
   23f60:	0002bda0 	.word	0x0002bda0
   23f64:	0002b8dc 	.word	0x0002b8dc

00023f68 <lll_conn_init>:
{
   23f68:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   23f6a:	f000 fe93 	bl	24c94 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   23f6e:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   23f70:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   23f72:	2101      	movs	r1, #1
   23f74:	f361 0201 	bfi	r2, r1, #0, #2
}
   23f78:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   23f7a:	701a      	strb	r2, [r3, #0]
}
   23f7c:	bd08      	pop	{r3, pc}
   23f7e:	bf00      	nop

00023f80 <lll_conn_reset>:
}
   23f80:	2000      	movs	r0, #0
   23f82:	4770      	bx	lr

00023f84 <lll_conn_flush>:
}
   23f84:	4770      	bx	lr
   23f86:	bf00      	nop

00023f88 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   23f88:	4805      	ldr	r0, [pc, #20]	; (23fa0 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   23f8a:	4906      	ldr	r1, [pc, #24]	; (23fa4 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   23f8c:	4a06      	ldr	r2, [pc, #24]	; (23fa8 <lll_conn_prepare_reset+0x20>)
{
   23f8e:	b410      	push	{r4}
	trx_cnt = 0U;
   23f90:	2300      	movs	r3, #0
   23f92:	4c06      	ldr	r4, [pc, #24]	; (23fac <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   23f94:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   23f96:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   23f98:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   23f9a:	8023      	strh	r3, [r4, #0]
}
   23f9c:	bc10      	pop	{r4}
   23f9e:	4770      	bx	lr
   23fa0:	2000263e 	.word	0x2000263e
   23fa4:	2000263d 	.word	0x2000263d
   23fa8:	2000263f 	.word	0x2000263f
   23fac:	20002592 	.word	0x20002592

00023fb0 <lll_conn_abort_cb>:
{
   23fb0:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   23fb2:	b1e8      	cbz	r0, 23ff0 <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   23fb4:	460d      	mov	r5, r1
   23fb6:	4604      	mov	r4, r0
   23fb8:	f7ff fa42 	bl	23440 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   23fbc:	2800      	cmp	r0, #0
   23fbe:	db0a      	blt.n	23fd6 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   23fc0:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   23fc2:	8921      	ldrh	r1, [r4, #8]
   23fc4:	8a53      	ldrh	r3, [r2, #18]
   23fc6:	440b      	add	r3, r1
   23fc8:	3301      	adds	r3, #1
	lll_done(param);
   23fca:	4628      	mov	r0, r5
	lll->latency_prepare += (prepare_param->lazy + 1);
   23fcc:	8253      	strh	r3, [r2, #18]
}
   23fce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   23fd2:	f7fe bfb3 	b.w	22f3c <lll_done>
	LL_ASSERT(err >= 0);
   23fd6:	4a0a      	ldr	r2, [pc, #40]	; (24000 <lll_conn_abort_cb+0x50>)
   23fd8:	490a      	ldr	r1, [pc, #40]	; (24004 <lll_conn_abort_cb+0x54>)
   23fda:	480b      	ldr	r0, [pc, #44]	; (24008 <lll_conn_abort_cb+0x58>)
   23fdc:	239d      	movs	r3, #157	; 0x9d
   23fde:	f003 fdb0 	bl	27b42 <printk>
   23fe2:	4040      	eors	r0, r0
   23fe4:	f380 8811 	msr	BASEPRI, r0
   23fe8:	f04f 0003 	mov.w	r0, #3
   23fec:	df02      	svc	2
   23fee:	e7e7      	b.n	23fc0 <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   23ff0:	4806      	ldr	r0, [pc, #24]	; (2400c <lll_conn_abort_cb+0x5c>)
   23ff2:	f000 fd05 	bl	24a00 <radio_isr_set>
}
   23ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   23ffa:	f000 bdf7 	b.w	24bec <radio_disable>
   23ffe:	bf00      	nop
   24000:	0002c510 	.word	0x0002c510
   24004:	0002c408 	.word	0x0002c408
   24008:	0002b8dc 	.word	0x0002b8dc
   2400c:	00023eb9 	.word	0x00023eb9

00024010 <lll_conn_rx_pkt_set>:
{
   24010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24012:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   24014:	2001      	movs	r0, #1
   24016:	f7f8 f839 	bl	1c08c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   2401a:	4606      	mov	r6, r0
   2401c:	b360      	cbz	r0, 24078 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   2401e:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   24022:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   24024:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   24028:	2100      	movs	r1, #0
   2402a:	4620      	mov	r0, r4
   2402c:	f000 fd4e 	bl	24acc <radio_phy_set>
	} else if (lll->enc_rx) {
   24030:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   24034:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   24036:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   2403a:	d511      	bpl.n	24060 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   2403c:	1d39      	adds	r1, r7, #4
   2403e:	f042 0201 	orr.w	r2, r2, #1
   24042:	b2c9      	uxtb	r1, r1
   24044:	2008      	movs	r0, #8
   24046:	f000 fd87 	bl	24b58 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   2404a:	f106 021c 	add.w	r2, r6, #28
   2404e:	4621      	mov	r1, r4
   24050:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   24054:	f001 f82e 	bl	250b4 <radio_ccm_rx_pkt_set>
}
   24058:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   2405c:	f000 bdaa 	b.w	24bb4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   24060:	2008      	movs	r0, #8
   24062:	b2f9      	uxtb	r1, r7
   24064:	f042 0201 	orr.w	r2, r2, #1
   24068:	f000 fd76 	bl	24b58 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   2406c:	f106 001c 	add.w	r0, r6, #28
}
   24070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   24074:	f000 bd9e 	b.w	24bb4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   24078:	4a06      	ldr	r2, [pc, #24]	; (24094 <lll_conn_rx_pkt_set+0x84>)
   2407a:	4907      	ldr	r1, [pc, #28]	; (24098 <lll_conn_rx_pkt_set+0x88>)
   2407c:	4807      	ldr	r0, [pc, #28]	; (2409c <lll_conn_rx_pkt_set+0x8c>)
   2407e:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   24082:	f003 fd5e 	bl	27b42 <printk>
   24086:	4040      	eors	r0, r0
   24088:	f380 8811 	msr	BASEPRI, r0
   2408c:	f04f 0003 	mov.w	r0, #3
   24090:	df02      	svc	2
   24092:	e7c4      	b.n	2401e <lll_conn_rx_pkt_set+0xe>
   24094:	0002c510 	.word	0x0002c510
   24098:	0002c55c 	.word	0x0002c55c
   2409c:	0002b8dc 	.word	0x0002b8dc

000240a0 <lll_conn_isr_tx>:
{
   240a0:	b538      	push	{r3, r4, r5, lr}
   240a2:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   240a4:	f7fe fffe 	bl	230a4 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   240a8:	2096      	movs	r0, #150	; 0x96
   240aa:	f000 ff15 	bl	24ed8 <radio_tmr_tifs_set>
				     lll->phy_flags);
   240ae:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   240b2:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   240b6:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   240ba:	f000 0007 	and.w	r0, r0, #7
   240be:	f002 0207 	and.w	r2, r2, #7
   240c2:	2100      	movs	r1, #0
   240c4:	f000 fe36 	bl	24d34 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   240c8:	4620      	mov	r0, r4
   240ca:	f7ff ffa1 	bl	24010 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   240ce:	f000 fdad 	bl	24c2c <radio_is_ready>
   240d2:	bb58      	cbnz	r0, 2412c <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   240d4:	f000 ffe8 	bl	250a8 <radio_tmr_tifs_base_get>
   240d8:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   240da:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   240de:	2101      	movs	r1, #1
   240e0:	f000 0007 	and.w	r0, r0, #7
   240e4:	f000 fd76 	bl	24bd4 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   240e8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   240ec:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   240f0:	4405      	add	r5, r0
   240f2:	2b02      	cmp	r3, #2
   240f4:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   240f8:	d016      	beq.n	24128 <lll_conn_isr_tx+0x88>
		return 376;
   240fa:	2b04      	cmp	r3, #4
   240fc:	bf14      	ite	ne
   240fe:	2328      	movne	r3, #40	; 0x28
   24100:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   24104:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   24108:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   2410c:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   24110:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   24112:	f000 fd5b 	bl	24bcc <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   24116:	1a28      	subs	r0, r5, r0
   24118:	f000 ff7e 	bl	25018 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   2411c:	4621      	mov	r1, r4
   2411e:	480a      	ldr	r0, [pc, #40]	; (24148 <lll_conn_isr_tx+0xa8>)
}
   24120:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   24124:	f000 bc6c 	b.w	24a00 <radio_isr_set>
	switch (phy) {
   24128:	2318      	movs	r3, #24
   2412a:	e7eb      	b.n	24104 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   2412c:	4a07      	ldr	r2, [pc, #28]	; (2414c <lll_conn_isr_tx+0xac>)
   2412e:	4908      	ldr	r1, [pc, #32]	; (24150 <lll_conn_isr_tx+0xb0>)
   24130:	4808      	ldr	r0, [pc, #32]	; (24154 <lll_conn_isr_tx+0xb4>)
   24132:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   24136:	f003 fd04 	bl	27b42 <printk>
   2413a:	4040      	eors	r0, r0
   2413c:	f380 8811 	msr	BASEPRI, r0
   24140:	f04f 0003 	mov.w	r0, #3
   24144:	df02      	svc	2
   24146:	e7c5      	b.n	240d4 <lll_conn_isr_tx+0x34>
   24148:	00024295 	.word	0x00024295
   2414c:	0002c510 	.word	0x0002c510
   24150:	0002c4c4 	.word	0x0002c4c4
   24154:	0002b8dc 	.word	0x0002b8dc

00024158 <lll_conn_tx_pkt_set>:
{
   24158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2415a:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   2415c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   24160:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   24162:	f001 0507 	and.w	r5, r1, #7
{
   24166:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   24168:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   2416c:	4628      	mov	r0, r5
   2416e:	f000 fcad 	bl	24acc <radio_phy_set>
	} else if (lll->enc_tx) {
   24172:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24176:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   24178:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   2417c:	d50f      	bpl.n	2419e <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   2417e:	1d39      	adds	r1, r7, #4
   24180:	f042 0201 	orr.w	r2, r2, #1
   24184:	b2c9      	uxtb	r1, r1
   24186:	2008      	movs	r0, #8
   24188:	f000 fce6 	bl	24b58 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   2418c:	4631      	mov	r1, r6
   2418e:	f104 0080 	add.w	r0, r4, #128	; 0x80
   24192:	f000 ffcd 	bl	25130 <radio_ccm_tx_pkt_set>
}
   24196:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   2419a:	f000 bd11 	b.w	24bc0 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   2419e:	b2f9      	uxtb	r1, r7
   241a0:	2008      	movs	r0, #8
   241a2:	f042 0201 	orr.w	r2, r2, #1
   241a6:	f000 fcd7 	bl	24b58 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   241aa:	4630      	mov	r0, r6
}
   241ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   241b0:	f000 bd06 	b.w	24bc0 <radio_pkt_tx_set>

000241b4 <lll_conn_pdu_tx_prep>:
{
   241b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   241b8:	4604      	mov	r4, r0
   241ba:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   241bc:	aa01      	add	r2, sp, #4
   241be:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   241c0:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   241c2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   241c4:	f7f4 f894 	bl	182f0 <memq_peek>
	if (lll->empty || !link) {
   241c8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   241cc:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   241ce:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   241d0:	d432      	bmi.n	24238 <lll_conn_pdu_tx_prep+0x84>
   241d2:	2800      	cmp	r0, #0
   241d4:	d04e      	beq.n	24274 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   241d6:	9b01      	ldr	r3, [sp, #4]
   241d8:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   241dc:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   241e0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   241e4:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   241e8:	b913      	cbnz	r3, 241f0 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   241ea:	786b      	ldrb	r3, [r5, #1]
   241ec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   241f0:	b137      	cbz	r7, 24200 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   241f2:	f818 2007 	ldrb.w	r2, [r8, r7]
   241f6:	2101      	movs	r1, #1
   241f8:	f361 0201 	bfi	r2, r1, #0, #2
   241fc:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   24200:	1bdb      	subs	r3, r3, r7
   24202:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   24204:	4620      	mov	r0, r4
   24206:	f7fd faa9 	bl	2175c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   2420a:	786b      	ldrb	r3, [r5, #1]
   2420c:	4283      	cmp	r3, r0
   2420e:	d924      	bls.n	2425a <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   24210:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   24212:	f818 3007 	ldrb.w	r3, [r8, r7]
   24216:	f043 0310 	orr.w	r3, r3, #16
   2421a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   2421e:	f818 3007 	ldrb.w	r3, [r8, r7]
   24222:	f36f 1347 	bfc	r3, #5, #3
   24226:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   2422a:	2300      	movs	r3, #0
   2422c:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   2422e:	f8c9 5000 	str.w	r5, [r9]
}
   24232:	b003      	add	sp, #12
   24234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   24238:	f043 0304 	orr.w	r3, r3, #4
   2423c:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   24240:	f000 fd28 	bl	24c94 <radio_pkt_empty_get>
   24244:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   24246:	b1e6      	cbz	r6, 24282 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   24248:	7803      	ldrb	r3, [r0, #0]
   2424a:	f043 0310 	orr.w	r3, r3, #16
   2424e:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   24250:	f8c9 5000 	str.w	r5, [r9]
}
   24254:	b003      	add	sp, #12
   24256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   2425a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   2425c:	6832      	ldr	r2, [r6, #0]
   2425e:	429a      	cmp	r2, r3
			p->md = 1U;
   24260:	f818 3007 	ldrb.w	r3, [r8, r7]
   24264:	bf14      	ite	ne
   24266:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   2426a:	f36f 1304 	bfceq	r3, #4, #1
   2426e:	f808 3007 	strb.w	r3, [r8, r7]
   24272:	e7d4      	b.n	2421e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   24274:	f043 0304 	orr.w	r3, r3, #4
   24278:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   2427c:	f000 fd0a 	bl	24c94 <radio_pkt_empty_get>
   24280:	4605      	mov	r5, r0
			p->md = 0U;
   24282:	782b      	ldrb	r3, [r5, #0]
   24284:	f36f 1304 	bfc	r3, #4, #1
   24288:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   2428a:	f8c9 5000 	str.w	r5, [r9]
}
   2428e:	b003      	add	sp, #12
   24290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00024294 <lll_conn_isr_rx>:
{
   24294:	b5f0      	push	{r4, r5, r6, r7, lr}
   24296:	b083      	sub	sp, #12
   24298:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   2429a:	f000 fcd1 	bl	24c40 <radio_is_done>
	if (trx_done) {
   2429e:	b2c0      	uxtb	r0, r0
   242a0:	b950      	cbnz	r0, 242b8 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   242a2:	f7fe ff07 	bl	230b4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   242a6:	48ae      	ldr	r0, [pc, #696]	; (24560 <lll_conn_isr_rx+0x2cc>)
   242a8:	4621      	mov	r1, r4
   242aa:	f000 fba9 	bl	24a00 <radio_isr_set>
}
   242ae:	b003      	add	sp, #12
   242b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   242b4:	f000 bc9a 	b.w	24bec <radio_disable>
		crc_ok = radio_crc_is_valid();
   242b8:	f000 fce2 	bl	24c80 <radio_crc_is_valid>
   242bc:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   242be:	f000 fdaf 	bl	24e20 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   242c2:	f7fe fef7 	bl	230b4 <lll_isr_rx_status_reset>
	trx_cnt++;
   242c6:	4aa7      	ldr	r2, [pc, #668]	; (24564 <lll_conn_isr_rx+0x2d0>)
   242c8:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   242ca:	2001      	movs	r0, #1
	trx_cnt++;
   242cc:	4403      	add	r3, r0
   242ce:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   242d0:	f7f7 fedc 	bl	1c08c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   242d4:	4606      	mov	r6, r0
   242d6:	2800      	cmp	r0, #0
   242d8:	f000 80bf 	beq.w	2445a <lll_conn_isr_rx+0x1c6>
	if (crc_ok) {
   242dc:	2d00      	cmp	r5, #0
   242de:	d155      	bne.n	2438c <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   242e0:	4ba1      	ldr	r3, [pc, #644]	; (24568 <lll_conn_isr_rx+0x2d4>)
   242e2:	781f      	ldrb	r7, [r3, #0]
   242e4:	2f00      	cmp	r7, #0
   242e6:	f040 80a7 	bne.w	24438 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   242ea:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   242ec:	a901      	add	r1, sp, #4
   242ee:	4620      	mov	r0, r4
		crc_expire--;
   242f0:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   242f2:	f7ff ff5f 	bl	241b4 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   242f6:	2096      	movs	r0, #150	; 0x96
   242f8:	f000 fdee 	bl	24ed8 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   242fc:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   24300:	f000 0007 	and.w	r0, r0, #7
   24304:	f000 fcce 	bl	24ca4 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   24308:	4898      	ldr	r0, [pc, #608]	; (2456c <lll_conn_isr_rx+0x2d8>)
   2430a:	4621      	mov	r1, r4
   2430c:	f000 fb78 	bl	24a00 <radio_isr_set>
		radio_tmr_end_capture();
   24310:	f000 febc 	bl	2508c <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   24314:	9901      	ldr	r1, [sp, #4]
   24316:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   2431a:	780b      	ldrb	r3, [r1, #0]
   2431c:	f023 000c 	bic.w	r0, r3, #12
   24320:	f3c2 0340 	ubfx	r3, r2, #1, #1
   24324:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   24326:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   2432a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   2432e:	4303      	orrs	r3, r0
   24330:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   24332:	4620      	mov	r0, r4
   24334:	f7ff ff10 	bl	24158 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   24338:	f000 fc78 	bl	24c2c <radio_is_ready>
   2433c:	2800      	cmp	r0, #0
   2433e:	f040 80bb 	bne.w	244b8 <lll_conn_isr_rx+0x224>
	if (!radio_tmr_aa_restore()) {
   24342:	f000 fe97 	bl	25074 <radio_tmr_aa_restore>
   24346:	b170      	cbz	r0, 24366 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   24348:	b19d      	cbz	r5, 24372 <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   2434a:	89a0      	ldrh	r0, [r4, #12]
   2434c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24350:	4298      	cmp	r0, r3
   24352:	f000 80bf 	beq.w	244d4 <lll_conn_isr_rx+0x240>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   24356:	4629      	mov	r1, r5
   24358:	f7fd f894 	bl	21484 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   2435c:	b95f      	cbnz	r7, 24376 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   2435e:	f7f7 fed9 	bl	1c114 <ull_rx_sched>
}
   24362:	b003      	add	sp, #12
   24364:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   24366:	f000 fe79 	bl	2505c <radio_tmr_aa_get>
   2436a:	f000 fe7d 	bl	25068 <radio_tmr_aa_save>
	if (tx_release) {
   2436e:	2d00      	cmp	r5, #0
   24370:	d1eb      	bne.n	2434a <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   24372:	2f00      	cmp	r7, #0
   24374:	d0f5      	beq.n	24362 <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   24376:	f7f7 fea7 	bl	1c0c8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   2437a:	2303      	movs	r3, #3
   2437c:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   2437e:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   24380:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   24382:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   24384:	4631      	mov	r1, r6
   24386:	f7f7 feb5 	bl	1c0f4 <ull_rx_put>
	if (is_ull_rx) {
   2438a:	e7e8      	b.n	2435e <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   2438c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24390:	7f32      	ldrb	r2, [r6, #28]
   24392:	f003 0101 	and.w	r1, r3, #1
   24396:	f3c2 0080 	ubfx	r0, r2, #2, #1
   2439a:	4288      	cmp	r0, r1
   2439c:	d06d      	beq.n	2447a <lll_conn_isr_rx+0x1e6>
		if (lll->role) {
   2439e:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   243a2:	f081 0101 	eor.w	r1, r1, #1
   243a6:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   243aa:	2a00      	cmp	r2, #0
		lll->sn++;
   243ac:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   243b0:	da05      	bge.n	243be <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   243b2:	f894 3020 	ldrb.w	r3, [r4, #32]
   243b6:	f043 0304 	orr.w	r3, r3, #4
   243ba:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   243be:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   243c2:	075a      	lsls	r2, r3, #29
   243c4:	f100 8095 	bmi.w	244f2 <lll_conn_isr_rx+0x25e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   243c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   243cc:	aa01      	add	r2, sp, #4
   243ce:	f7f3 ff8f 	bl	182f0 <memq_peek>
		if (link) {
   243d2:	4605      	mov	r5, r0
   243d4:	2800      	cmp	r0, #0
   243d6:	f000 80bf 	beq.w	24558 <lll_conn_isr_rx+0x2c4>
					       lll->packet_tx_head_offset);
   243da:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   243de:	9b01      	ldr	r3, [sp, #4]
   243e0:	4413      	add	r3, r2
   243e2:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   243e4:	b171      	cbz	r1, 24404 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   243e6:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   243ea:	06df      	lsls	r7, r3, #27
   243ec:	d50a      	bpl.n	24404 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   243ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   243f2:	3301      	adds	r3, #1
   243f4:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   243f8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   243fc:	f143 0300 	adc.w	r3, r3, #0
   24400:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   24404:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   24408:	440a      	add	r2, r1
   2440a:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   2440c:	429a      	cmp	r2, r3
   2440e:	d37b      	bcc.n	24508 <lll_conn_isr_rx+0x274>
			} else if (offset == lll->packet_tx_head_len) {
   24410:	f000 8095 	beq.w	2453e <lll_conn_isr_rx+0x2aa>
				LL_ASSERT(0);
   24414:	4a56      	ldr	r2, [pc, #344]	; (24570 <lll_conn_isr_rx+0x2dc>)
   24416:	4957      	ldr	r1, [pc, #348]	; (24574 <lll_conn_isr_rx+0x2e0>)
   24418:	4857      	ldr	r0, [pc, #348]	; (24578 <lll_conn_isr_rx+0x2e4>)
   2441a:	f240 3305 	movw	r3, #773	; 0x305
   2441e:	f003 fb90 	bl	27b42 <printk>
   24422:	4040      	eors	r0, r0
   24424:	f380 8811 	msr	BASEPRI, r0
   24428:	f04f 0003 	mov.w	r0, #3
   2442c:	df02      	svc	2
	tx_release = NULL;
   2442e:	2500      	movs	r5, #0
   24430:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24434:	7f32      	ldrb	r2, [r6, #28]
   24436:	e021      	b.n	2447c <lll_conn_isr_rx+0x1e8>
		crc_expire--;
   24438:	3f01      	subs	r7, #1
   2443a:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2443c:	a901      	add	r1, sp, #4
   2443e:	4620      	mov	r0, r4
		crc_expire--;
   24440:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   24442:	f7ff feb7 	bl	241b4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   24446:	2f00      	cmp	r7, #0
   24448:	f040 80eb 	bne.w	24622 <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   2444c:	4844      	ldr	r0, [pc, #272]	; (24560 <lll_conn_isr_rx+0x2cc>)
   2444e:	4621      	mov	r1, r4
   24450:	f000 fad6 	bl	24a00 <radio_isr_set>
			radio_switch_complete_and_disable();
   24454:	f000 fcce 	bl	24df4 <radio_switch_complete_and_disable>
   24458:	e75c      	b.n	24314 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   2445a:	4a45      	ldr	r2, [pc, #276]	; (24570 <lll_conn_isr_rx+0x2dc>)
   2445c:	4947      	ldr	r1, [pc, #284]	; (2457c <lll_conn_isr_rx+0x2e8>)
   2445e:	4846      	ldr	r0, [pc, #280]	; (24578 <lll_conn_isr_rx+0x2e4>)
   24460:	23d6      	movs	r3, #214	; 0xd6
   24462:	f003 fb6e 	bl	27b42 <printk>
   24466:	4040      	eors	r0, r0
   24468:	f380 8811 	msr	BASEPRI, r0
   2446c:	f04f 0003 	mov.w	r0, #3
   24470:	df02      	svc	2
	if (crc_ok) {
   24472:	2d00      	cmp	r5, #0
   24474:	f43f af34 	beq.w	242e0 <lll_conn_isr_rx+0x4c>
   24478:	e788      	b.n	2438c <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   2447a:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   2447c:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   24480:	f3c3 0340 	ubfx	r3, r3, #1, #1
   24484:	429a      	cmp	r2, r3
   24486:	d046      	beq.n	24516 <lll_conn_isr_rx+0x282>
	is_rx_enqueue = 0U;
   24488:	2700      	movs	r7, #0
		crc_expire = 0U;
   2448a:	4a37      	ldr	r2, [pc, #220]	; (24568 <lll_conn_isr_rx+0x2d4>)
		crc_valid = 1U;
   2448c:	4b3c      	ldr	r3, [pc, #240]	; (24580 <lll_conn_isr_rx+0x2ec>)
		crc_expire = 0U;
   2448e:	2100      	movs	r1, #0
   24490:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   24492:	4620      	mov	r0, r4
		crc_valid = 1U;
   24494:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   24496:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   24498:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   2449a:	f7ff fe8b 	bl	241b4 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   2449e:	7f33      	ldrb	r3, [r6, #28]
   244a0:	06d9      	lsls	r1, r3, #27
   244a2:	f53f af28 	bmi.w	242f6 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   244a6:	9b01      	ldr	r3, [sp, #4]
   244a8:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   244aa:	06d2      	lsls	r2, r2, #27
   244ac:	f53f af23 	bmi.w	242f6 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   244b0:	785b      	ldrb	r3, [r3, #1]
   244b2:	2b00      	cmp	r3, #0
   244b4:	d0ca      	beq.n	2444c <lll_conn_isr_rx+0x1b8>
   244b6:	e71e      	b.n	242f6 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   244b8:	4a2d      	ldr	r2, [pc, #180]	; (24570 <lll_conn_isr_rx+0x2dc>)
   244ba:	4932      	ldr	r1, [pc, #200]	; (24584 <lll_conn_isr_rx+0x2f0>)
   244bc:	482e      	ldr	r0, [pc, #184]	; (24578 <lll_conn_isr_rx+0x2e4>)
   244be:	f44f 73a1 	mov.w	r3, #322	; 0x142
   244c2:	f003 fb3e 	bl	27b42 <printk>
   244c6:	4040      	eors	r0, r0
   244c8:	f380 8811 	msr	BASEPRI, r0
   244cc:	f04f 0003 	mov.w	r0, #3
   244d0:	df02      	svc	2
   244d2:	e736      	b.n	24342 <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   244d4:	4a26      	ldr	r2, [pc, #152]	; (24570 <lll_conn_isr_rx+0x2dc>)
   244d6:	492c      	ldr	r1, [pc, #176]	; (24588 <lll_conn_isr_rx+0x2f4>)
   244d8:	4827      	ldr	r0, [pc, #156]	; (24578 <lll_conn_isr_rx+0x2e4>)
   244da:	f240 1351 	movw	r3, #337	; 0x151
   244de:	f003 fb30 	bl	27b42 <printk>
   244e2:	4040      	eors	r0, r0
   244e4:	f380 8811 	msr	BASEPRI, r0
   244e8:	f04f 0003 	mov.w	r0, #3
   244ec:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   244ee:	89a0      	ldrh	r0, [r4, #12]
   244f0:	e731      	b.n	24356 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   244f2:	f36f 0382 	bfc	r3, #2, #1
   244f6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   244fa:	f000 fbcb 	bl	24c94 <radio_pkt_empty_get>
	tx_release = NULL;
   244fe:	2500      	movs	r5, #0
   24500:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24504:	7f32      	ldrb	r2, [r6, #28]
   24506:	e7b9      	b.n	2447c <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   24508:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   2450c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24510:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   24512:	2500      	movs	r5, #0
   24514:	e7b2      	b.n	2447c <lll_conn_isr_rx+0x1e8>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   24516:	2003      	movs	r0, #3
   24518:	f7f7 fdb8 	bl	1c08c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   2451c:	2800      	cmp	r0, #0
   2451e:	d0b3      	beq.n	24488 <lll_conn_isr_rx+0x1f4>
		lll->nesn++;
   24520:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24524:	f083 0302 	eor.w	r3, r3, #2
   24528:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   2452c:	7f73      	ldrb	r3, [r6, #29]
   2452e:	2b00      	cmp	r3, #0
   24530:	d0aa      	beq.n	24488 <lll_conn_isr_rx+0x1f4>
			if (lll->enc_rx) {
   24532:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   24536:	0718      	lsls	r0, r3, #28
   24538:	d428      	bmi.n	2458c <lll_conn_isr_rx+0x2f8>
			*is_rx_enqueue = 1U;
   2453a:	2701      	movs	r7, #1
   2453c:	e7a5      	b.n	2448a <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_len = 0;
   2453e:	2200      	movs	r2, #0
   24540:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   24544:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   24546:	f104 0148 	add.w	r1, r4, #72	; 0x48
   2454a:	f7f3 fed9 	bl	18300 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   2454e:	9b01      	ldr	r3, [sp, #4]
   24550:	681a      	ldr	r2, [r3, #0]
   24552:	602a      	str	r2, [r5, #0]
				tx->next = link;
   24554:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   24556:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   24558:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   2455c:	7f32      	ldrb	r2, [r6, #28]
   2455e:	e78d      	b.n	2447c <lll_conn_isr_rx+0x1e8>
   24560:	00023eb9 	.word	0x00023eb9
   24564:	20002592 	.word	0x20002592
   24568:	2000263d 	.word	0x2000263d
   2456c:	000240a1 	.word	0x000240a1
   24570:	0002c510 	.word	0x0002c510
   24574:	0002b974 	.word	0x0002b974
   24578:	0002b8dc 	.word	0x0002b8dc
   2457c:	0002c55c 	.word	0x0002c55c
   24580:	2000263e 	.word	0x2000263e
   24584:	0002c4c4 	.word	0x0002c4c4
   24588:	0002c56c 	.word	0x0002c56c
				done = radio_ccm_is_done();
   2458c:	f000 fdf8 	bl	25180 <radio_ccm_is_done>
				LL_ASSERT(done);
   24590:	b3c8      	cbz	r0, 24606 <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   24592:	f000 fe17 	bl	251c4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   24596:	bb30      	cbnz	r0, 245e6 <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   24598:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   2459c:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   245a0:	4313      	orrs	r3, r2
   245a2:	d104      	bne.n	245ae <lll_conn_isr_rx+0x31a>
				    (pdu_data_rx->ll_id ==
   245a4:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   245a6:	f003 0303 	and.w	r3, r3, #3
   245aa:	2b03      	cmp	r3, #3
   245ac:	d004      	beq.n	245b8 <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   245ae:	4b1e      	ldr	r3, [pc, #120]	; (24628 <lll_conn_isr_rx+0x394>)
   245b0:	2202      	movs	r2, #2
   245b2:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   245b4:	2700      	movs	r7, #0
   245b6:	e6c4      	b.n	24342 <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   245b8:	f000 fb70 	bl	24c9c <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   245bc:	7843      	ldrb	r3, [r0, #1]
   245be:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   245c0:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   245c2:	d8f4      	bhi.n	245ae <lll_conn_isr_rx+0x31a>
						memcpy(pdu_data_rx,
   245c4:	3303      	adds	r3, #3
   245c6:	b2da      	uxtb	r2, r3
   245c8:	f106 001c 	add.w	r0, r6, #28
   245cc:	f004 fb23 	bl	28c16 <memcpy>
						lll->ccm_rx.counter--;
   245d0:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   245d4:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   245d8:	3b01      	subs	r3, #1
   245da:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   245de:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   245e2:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   245e6:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   245ea:	4a0f      	ldr	r2, [pc, #60]	; (24628 <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   245ec:	3301      	adds	r3, #1
   245ee:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   245f2:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   245f6:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   245fa:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   245fe:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   24600:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   24602:	7017      	strb	r7, [r2, #0]
		if (err) {
   24604:	e741      	b.n	2448a <lll_conn_isr_rx+0x1f6>
				LL_ASSERT(done);
   24606:	4a09      	ldr	r2, [pc, #36]	; (2462c <lll_conn_isr_rx+0x398>)
   24608:	4909      	ldr	r1, [pc, #36]	; (24630 <lll_conn_isr_rx+0x39c>)
   2460a:	480a      	ldr	r0, [pc, #40]	; (24634 <lll_conn_isr_rx+0x3a0>)
   2460c:	f44f 7348 	mov.w	r3, #800	; 0x320
   24610:	f003 fa97 	bl	27b42 <printk>
   24614:	4040      	eors	r0, r0
   24616:	f380 8811 	msr	BASEPRI, r0
   2461a:	f04f 0003 	mov.w	r0, #3
   2461e:	df02      	svc	2
   24620:	e7b7      	b.n	24592 <lll_conn_isr_rx+0x2fe>
	is_rx_enqueue = 0U;
   24622:	462f      	mov	r7, r5
   24624:	e667      	b.n	242f6 <lll_conn_isr_rx+0x62>
   24626:	bf00      	nop
   24628:	2000263f 	.word	0x2000263f
   2462c:	0002c510 	.word	0x0002c510
   24630:	0002c564 	.word	0x0002c564
   24634:	0002b8dc 	.word	0x0002b8dc

00024638 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   24638:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   2463a:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   2463c:	89a2      	ldrh	r2, [r4, #12]
   2463e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   24642:	429a      	cmp	r2, r3
{
   24644:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   24646:	f000 80d2 	beq.w	247ee <prepare_cb+0x1b6>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   2464a:	4605      	mov	r5, r0
   2464c:	f7ff fc9c 	bl	23f88 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   24650:	892b      	ldrh	r3, [r5, #8]
   24652:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   24654:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   24656:	441a      	add	r2, r3
   24658:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   2465a:	4410      	add	r0, r2
   2465c:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   2465e:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   24660:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   24662:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   24664:	2100      	movs	r1, #0
   24666:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   24668:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   2466a:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   2466c:	f100 8091 	bmi.w	24792 <prepare_cb+0x15a>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   24670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24674:	7fa1      	ldrb	r1, [r4, #30]
   24676:	9300      	str	r3, [sp, #0]
   24678:	f104 001f 	add.w	r0, r4, #31
   2467c:	f104 0318 	add.w	r3, r4, #24
   24680:	f7fd f9ba 	bl	219f8 <lll_chan_sel_1>
   24684:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   24686:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   2468a:	4419      	add	r1, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   2468c:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   24690:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   24692:	2200      	movs	r2, #0
	lll->slave.window_size_event_us +=
   24694:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   24696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->slave.window_widening_prepare_us = 0;
   24698:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   2469a:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   2469c:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->slave.window_widening_event_us =
   246a0:	428b      	cmp	r3, r1
   246a2:	bf28      	it	cs
   246a4:	460b      	movcs	r3, r1
	if (!lll->empty) {
   246a6:	f012 0204 	ands.w	r2, r2, #4
		lll->slave.window_widening_event_us =
   246aa:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   246ac:	f000 8091 	beq.w	247d2 <prepare_cb+0x19a>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   246b0:	f000 f9e8 	bl	24a84 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   246b4:	2000      	movs	r0, #0
   246b6:	f000 fa19 	bl	24aec <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   246ba:	4620      	mov	r0, r4
   246bc:	f7ff fca8 	bl	24010 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   246c0:	1d20      	adds	r0, r4, #4
   246c2:	f000 fa31 	bl	24b28 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   246c6:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   246c8:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   246ca:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   246cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   246d0:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   246d2:	f240 605b 	movw	r0, #1627	; 0x65b
   246d6:	4319      	orrs	r1, r3
   246d8:	f000 fac6 	bl	24c68 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   246dc:	4630      	mov	r0, r6
   246de:	f7fe fc9d 	bl	2301c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   246e2:	4621      	mov	r1, r4
   246e4:	4846      	ldr	r0, [pc, #280]	; (24800 <prepare_cb+0x1c8>)
   246e6:	f000 f98b 	bl	24a00 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   246ea:	2096      	movs	r0, #150	; 0x96
   246ec:	f000 fbf4 	bl	24ed8 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   246f0:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   246f4:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   246f8:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   246fc:	2100      	movs	r1, #0
   246fe:	f002 0207 	and.w	r2, r2, #7
   24702:	f000 0007 	and.w	r0, r0, #7
   24706:	f000 fb15 	bl	24d34 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   2470a:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   2470c:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   2470e:	4638      	mov	r0, r7
   24710:	f7fe fc6a 	bl	22fe8 <lll_event_offset_get>
   24714:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   24716:	686a      	ldr	r2, [r5, #4]
   24718:	f106 0109 	add.w	r1, r6, #9
   2471c:	2000      	movs	r0, #0
   2471e:	f000 fbe7 	bl	24ef0 <radio_tmr_start>
   24722:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   24724:	f000 fc86 	bl	25034 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   24728:	2000      	movs	r0, #0
   2472a:	f000 fc9d 	bl	25068 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   2472e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24730:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   24734:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   24736:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   2473a:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   2473e:	2101      	movs	r1, #1
   24740:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   24744:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   24746:	f000 fa43 	bl	24bd0 <radio_rx_ready_delay_get>
   2474a:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   2474c:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   24750:	f000 0007 	and.w	r0, r0, #7
   24754:	2802      	cmp	r0, #2
   24756:	d03a      	beq.n	247ce <prepare_cb+0x196>
		return 40;
   24758:	2804      	cmp	r0, #4
   2475a:	bf0c      	ite	eq
   2475c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   24760:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   24762:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   24764:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   24766:	f000 fa35 	bl	24bd4 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   2476a:	4428      	add	r0, r5
   2476c:	f000 fc54 	bl	25018 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   24770:	89a1      	ldrh	r1, [r4, #12]
   24772:	3103      	adds	r1, #3
   24774:	4632      	mov	r2, r6
   24776:	b2c9      	uxtb	r1, r1
   24778:	4638      	mov	r0, r7
   2477a:	f7fe fc3f 	bl	22ffc <lll_preempt_calc>
   2477e:	b188      	cbz	r0, 247a4 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   24780:	4820      	ldr	r0, [pc, #128]	; (24804 <prepare_cb+0x1cc>)
   24782:	4621      	mov	r1, r4
   24784:	f000 f93c 	bl	24a00 <radio_isr_set>
		radio_disable();
   24788:	f000 fa30 	bl	24bec <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   2478c:	2000      	movs	r0, #0
   2478e:	b003      	add	sp, #12
   24790:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   24792:	8be1      	ldrh	r1, [r4, #30]
   24794:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   24798:	f104 0218 	add.w	r2, r4, #24
   2479c:	f7fd f970 	bl	21a80 <lll_chan_sel_2>
   247a0:	4606      	mov	r6, r0
   247a2:	e770      	b.n	24686 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   247a4:	4620      	mov	r0, r4
   247a6:	f7fe fbc7 	bl	22f38 <lll_prepare_done>
		LL_ASSERT(!ret);
   247aa:	2800      	cmp	r0, #0
   247ac:	d0ee      	beq.n	2478c <prepare_cb+0x154>
   247ae:	4a16      	ldr	r2, [pc, #88]	; (24808 <prepare_cb+0x1d0>)
   247b0:	4916      	ldr	r1, [pc, #88]	; (2480c <prepare_cb+0x1d4>)
   247b2:	4817      	ldr	r0, [pc, #92]	; (24810 <prepare_cb+0x1d8>)
   247b4:	f240 1319 	movw	r3, #281	; 0x119
   247b8:	f003 f9c3 	bl	27b42 <printk>
   247bc:	4040      	eors	r0, r0
   247be:	f380 8811 	msr	BASEPRI, r0
   247c2:	f04f 0003 	mov.w	r0, #3
   247c6:	df02      	svc	2
}
   247c8:	2000      	movs	r0, #0
   247ca:	b003      	add	sp, #12
   247cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   247ce:	2318      	movs	r3, #24
   247d0:	e7c7      	b.n	24762 <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   247d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   247d6:	f7f3 fd8b 	bl	182f0 <memq_peek>
		if (!link) {
   247da:	2800      	cmp	r0, #0
   247dc:	f47f af68 	bne.w	246b0 <prepare_cb+0x78>
			lll->empty = 1U;
   247e0:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   247e4:	f043 0304 	orr.w	r3, r3, #4
   247e8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   247ec:	e760      	b.n	246b0 <prepare_cb+0x78>
		radio_isr_set(lll_isr_early_abort, lll);
   247ee:	4809      	ldr	r0, [pc, #36]	; (24814 <prepare_cb+0x1dc>)
   247f0:	4621      	mov	r1, r4
   247f2:	f000 f905 	bl	24a00 <radio_isr_set>
		radio_disable();
   247f6:	f000 f9f9 	bl	24bec <radio_disable>
}
   247fa:	2000      	movs	r0, #0
   247fc:	b003      	add	sp, #12
   247fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24800:	00024295 	.word	0x00024295
   24804:	00023151 	.word	0x00023151
   24808:	0002c598 	.word	0x0002c598
   2480c:	0002bc88 	.word	0x0002bc88
   24810:	0002b8dc 	.word	0x0002b8dc
   24814:	00023175 	.word	0x00023175

00024818 <lll_slave_prepare>:
{
   24818:	b510      	push	{r4, lr}
   2481a:	b082      	sub	sp, #8
   2481c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   2481e:	f7fe fdf7 	bl	23410 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   24822:	2800      	cmp	r0, #0
   24824:	db25      	blt.n	24872 <lll_slave_prepare+0x5a>
	lll = p->param;
   24826:	68e1      	ldr	r1, [r4, #12]
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   24828:	8920      	ldrh	r0, [r4, #8]
   2482a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->slave.window_widening_prepare_us +=
   2482c:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   2482e:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->slave.window_widening_max_us) {
   24832:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   24834:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us =
   24836:	4283      	cmp	r3, r0
   24838:	bf28      	it	cs
   2483a:	4603      	movcs	r3, r0
   2483c:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   2483e:	4a13      	ldr	r2, [pc, #76]	; (2488c <lll_slave_prepare+0x74>)
   24840:	4913      	ldr	r1, [pc, #76]	; (24890 <lll_slave_prepare+0x78>)
   24842:	4814      	ldr	r0, [pc, #80]	; (24894 <lll_slave_prepare+0x7c>)
   24844:	9400      	str	r4, [sp, #0]
   24846:	2300      	movs	r3, #0
   24848:	f7f7 fd66 	bl	1c318 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   2484c:	b108      	cbz	r0, 24852 <lll_slave_prepare+0x3a>
   2484e:	3077      	adds	r0, #119	; 0x77
   24850:	d101      	bne.n	24856 <lll_slave_prepare+0x3e>
}
   24852:	b002      	add	sp, #8
   24854:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   24856:	4a10      	ldr	r2, [pc, #64]	; (24898 <lll_slave_prepare+0x80>)
   24858:	4910      	ldr	r1, [pc, #64]	; (2489c <lll_slave_prepare+0x84>)
   2485a:	4811      	ldr	r0, [pc, #68]	; (248a0 <lll_slave_prepare+0x88>)
   2485c:	2358      	movs	r3, #88	; 0x58
   2485e:	f003 f970 	bl	27b42 <printk>
   24862:	4040      	eors	r0, r0
   24864:	f380 8811 	msr	BASEPRI, r0
   24868:	f04f 0003 	mov.w	r0, #3
   2486c:	df02      	svc	2
}
   2486e:	b002      	add	sp, #8
   24870:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   24872:	4a09      	ldr	r2, [pc, #36]	; (24898 <lll_slave_prepare+0x80>)
   24874:	490b      	ldr	r1, [pc, #44]	; (248a4 <lll_slave_prepare+0x8c>)
   24876:	480a      	ldr	r0, [pc, #40]	; (248a0 <lll_slave_prepare+0x88>)
   24878:	2347      	movs	r3, #71	; 0x47
   2487a:	f003 f962 	bl	27b42 <printk>
   2487e:	4040      	eors	r0, r0
   24880:	f380 8811 	msr	BASEPRI, r0
   24884:	f04f 0003 	mov.w	r0, #3
   24888:	df02      	svc	2
   2488a:	e7cc      	b.n	24826 <lll_slave_prepare+0xe>
   2488c:	00024639 	.word	0x00024639
   24890:	00023fb1 	.word	0x00023fb1
   24894:	00022fe1 	.word	0x00022fe1
   24898:	0002c598 	.word	0x0002c598
   2489c:	0002c4ec 	.word	0x0002c4ec
   248a0:	0002b8dc 	.word	0x0002b8dc
   248a4:	0002c408 	.word	0x0002c408

000248a8 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   248a8:	4b05      	ldr	r3, [pc, #20]	; (248c0 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   248aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   248ae:	2100      	movs	r1, #0
   248b0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   248b4:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   248b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   248bc:	4770      	bx	lr
   248be:	bf00      	nop
   248c0:	4000b000 	.word	0x4000b000

000248c4 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   248c4:	4b05      	ldr	r3, [pc, #20]	; (248dc <cntr_start+0x18>)
   248c6:	7818      	ldrb	r0, [r3, #0]
   248c8:	1c42      	adds	r2, r0, #1
   248ca:	701a      	strb	r2, [r3, #0]
   248cc:	b918      	cbnz	r0, 248d6 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   248ce:	4b04      	ldr	r3, [pc, #16]	; (248e0 <cntr_start+0x1c>)
   248d0:	2201      	movs	r2, #1
   248d2:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   248d4:	4770      	bx	lr
		return 1;
   248d6:	2001      	movs	r0, #1
}
   248d8:	4770      	bx	lr
   248da:	bf00      	nop
   248dc:	20002640 	.word	0x20002640
   248e0:	4000b000 	.word	0x4000b000

000248e4 <cntr_stop>:

uint32_t cntr_stop(void)
{
   248e4:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   248e6:	4c0d      	ldr	r4, [pc, #52]	; (2491c <cntr_stop+0x38>)
   248e8:	7820      	ldrb	r0, [r4, #0]
   248ea:	b148      	cbz	r0, 24900 <cntr_stop+0x1c>

	if (--_refcount) {
   248ec:	3801      	subs	r0, #1
   248ee:	b2c0      	uxtb	r0, r0
   248f0:	7020      	strb	r0, [r4, #0]
   248f2:	b918      	cbnz	r0, 248fc <cntr_stop+0x18>
   248f4:	4b0a      	ldr	r3, [pc, #40]	; (24920 <cntr_stop+0x3c>)
   248f6:	2201      	movs	r2, #1
   248f8:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   248fa:	bd10      	pop	{r4, pc}
		return 1;
   248fc:	2001      	movs	r0, #1
}
   248fe:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   24900:	4a08      	ldr	r2, [pc, #32]	; (24924 <cntr_stop+0x40>)
   24902:	4909      	ldr	r1, [pc, #36]	; (24928 <cntr_stop+0x44>)
   24904:	4809      	ldr	r0, [pc, #36]	; (2492c <cntr_stop+0x48>)
   24906:	232d      	movs	r3, #45	; 0x2d
   24908:	f003 f91b 	bl	27b42 <printk>
   2490c:	4040      	eors	r0, r0
   2490e:	f380 8811 	msr	BASEPRI, r0
   24912:	f04f 0003 	mov.w	r0, #3
   24916:	df02      	svc	2
	if (--_refcount) {
   24918:	7820      	ldrb	r0, [r4, #0]
   2491a:	e7e7      	b.n	248ec <cntr_stop+0x8>
   2491c:	20002640 	.word	0x20002640
   24920:	4000b000 	.word	0x4000b000
   24924:	0002c5f8 	.word	0x0002c5f8
   24928:	0002c644 	.word	0x0002c644
   2492c:	0002b8dc 	.word	0x0002b8dc

00024930 <cntr_cnt_get>:
     return p_reg->COUNTER;
   24930:	4b01      	ldr	r3, [pc, #4]	; (24938 <cntr_cnt_get+0x8>)
   24932:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   24936:	4770      	bx	lr
   24938:	4000b000 	.word	0x4000b000

0002493c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   2493c:	4b02      	ldr	r3, [pc, #8]	; (24948 <cntr_cmp_set+0xc>)
   2493e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   24942:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   24946:	4770      	bx	lr
   24948:	4000b000 	.word	0x4000b000

0002494c <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2494c:	4b12      	ldr	r3, [pc, #72]	; (24998 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   2494e:	b430      	push	{r4, r5}
   24950:	2101      	movs	r1, #1
   24952:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   24954:	2000      	movs	r0, #0
   24956:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   24958:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   2495c:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   24960:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   24964:	6019      	str	r1, [r3, #0]
}
   24966:	e005      	b.n	24974 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   24968:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   2496c:	b932      	cbnz	r2, 2497c <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   2496e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   24972:	b11a      	cbz	r2, 2497c <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   24974:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   24978:	2a00      	cmp	r2, #0
   2497a:	d0f5      	beq.n	24968 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2497c:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   2497e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   24982:	2a00      	cmp	r2, #0
   24984:	d1e7      	bne.n	24956 <do_ecb+0xa>
   24986:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   2498a:	2d00      	cmp	r5, #0
   2498c:	d0e3      	beq.n	24956 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   2498e:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   24990:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   24994:	4770      	bx	lr
   24996:	bf00      	nop
   24998:	4000e000 	.word	0x4000e000

0002499c <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   2499c:	b570      	push	{r4, r5, r6, lr}
   2499e:	b08c      	sub	sp, #48	; 0x30
   249a0:	460e      	mov	r6, r1
   249a2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   249a4:	4601      	mov	r1, r0
   249a6:	2210      	movs	r2, #16
   249a8:	4668      	mov	r0, sp
{
   249aa:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   249ac:	f7f3 fc6e 	bl	1828c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   249b0:	2210      	movs	r2, #16
   249b2:	eb0d 0002 	add.w	r0, sp, r2
   249b6:	4631      	mov	r1, r6
   249b8:	f7f3 fc68 	bl	1828c <mem_rcopy>

	do_ecb(&ecb);
   249bc:	4668      	mov	r0, sp
   249be:	f7ff ffc5 	bl	2494c <do_ecb>

	if (cipher_text_le) {
   249c2:	b125      	cbz	r5, 249ce <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   249c4:	2210      	movs	r2, #16
   249c6:	a908      	add	r1, sp, #32
   249c8:	4628      	mov	r0, r5
   249ca:	f7f3 fc5f 	bl	1828c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   249ce:	b124      	cbz	r4, 249da <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   249d0:	2210      	movs	r2, #16
   249d2:	a908      	add	r1, sp, #32
   249d4:	4620      	mov	r0, r4
   249d6:	f004 f91e 	bl	28c16 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   249da:	b00c      	add	sp, #48	; 0x30
   249dc:	bd70      	pop	{r4, r5, r6, pc}
   249de:	bf00      	nop

000249e0 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   249e0:	4b04      	ldr	r3, [pc, #16]	; (249f4 <isr_radio+0x14>)
   249e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   249e6:	b123      	cbz	r3, 249f2 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   249e8:	4a03      	ldr	r2, [pc, #12]	; (249f8 <isr_radio+0x18>)
   249ea:	4b04      	ldr	r3, [pc, #16]	; (249fc <isr_radio+0x1c>)
   249ec:	6810      	ldr	r0, [r2, #0]
   249ee:	681b      	ldr	r3, [r3, #0]
   249f0:	4718      	bx	r3
}
   249f2:	4770      	bx	lr
   249f4:	40001000 	.word	0x40001000
   249f8:	200023f4 	.word	0x200023f4
   249fc:	200023f0 	.word	0x200023f0

00024a00 <radio_isr_set>:
{
   24a00:	b538      	push	{r3, r4, r5, lr}
   24a02:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   24a04:	2001      	movs	r0, #1
{
   24a06:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   24a08:	f7ee f982 	bl	12d10 <arch_irq_disable>
	isr_cb = cb;
   24a0c:	4b08      	ldr	r3, [pc, #32]	; (24a30 <radio_isr_set+0x30>)
	isr_cb_param = param;
   24a0e:	4a09      	ldr	r2, [pc, #36]	; (24a34 <radio_isr_set+0x34>)
	isr_cb = cb;
   24a10:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   24a12:	4909      	ldr	r1, [pc, #36]	; (24a38 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   24a14:	4b09      	ldr	r3, [pc, #36]	; (24a3c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   24a16:	6015      	str	r5, [r2, #0]
   24a18:	2010      	movs	r0, #16
   24a1a:	2202      	movs	r2, #2
   24a1c:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   24a20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   24a24:	2001      	movs	r0, #1
}
   24a26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   24a2a:	f7ee b961 	b.w	12cf0 <arch_irq_enable>
   24a2e:	bf00      	nop
   24a30:	200023f0 	.word	0x200023f0
   24a34:	200023f4 	.word	0x200023f4
   24a38:	40001000 	.word	0x40001000
   24a3c:	e000e100 	.word	0xe000e100

00024a40 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   24a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24a44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   24a48:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   24a4a:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   24a4e:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   24a52:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   24a56:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   24a5a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   24a5e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   24a62:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   24a66:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   24a6a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   24a6e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   24a72:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   24a76:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   24a7a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   24a7e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   24a82:	4770      	bx	lr

00024a84 <radio_reset>:
{
   24a84:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   24a86:	2001      	movs	r0, #1
   24a88:	f7ee f942 	bl	12d10 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   24a8c:	4a0d      	ldr	r2, [pc, #52]	; (24ac4 <radio_reset+0x40>)
   24a8e:	2100      	movs	r1, #0
   24a90:	2301      	movs	r3, #1
   24a92:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   24a96:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   24a9a:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   24a9e:	490a      	ldr	r1, [pc, #40]	; (24ac8 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   24aa0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   24aa4:	f023 0301 	bic.w	r3, r3, #1
   24aa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   24aac:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   24ab0:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   24ab4:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   24ab8:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   24abc:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   24ac0:	bd10      	pop	{r4, pc}
   24ac2:	bf00      	nop
   24ac4:	40001000 	.word	0x40001000
   24ac8:	4001f000 	.word	0x4001f000

00024acc <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   24acc:	4b06      	ldr	r3, [pc, #24]	; (24ae8 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   24ace:	2802      	cmp	r0, #2
   24ad0:	bf14      	ite	ne
   24ad2:	2203      	movne	r2, #3
   24ad4:	2204      	moveq	r2, #4
   24ad6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   24ada:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   24ade:	f042 0201 	orr.w	r2, r2, #1
   24ae2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   24ae6:	4770      	bx	lr
   24ae8:	40001000 	.word	0x40001000

00024aec <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   24aec:	4b01      	ldr	r3, [pc, #4]	; (24af4 <radio_tx_power_set+0x8>)
   24aee:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   24af2:	4770      	bx	lr
   24af4:	40001000 	.word	0x40001000

00024af8 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   24af8:	4b01      	ldr	r3, [pc, #4]	; (24b00 <radio_freq_chan_set+0x8>)
   24afa:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   24afe:	4770      	bx	lr
   24b00:	40001000 	.word	0x40001000

00024b04 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   24b04:	4b07      	ldr	r3, [pc, #28]	; (24b24 <radio_whiten_iv_set+0x20>)
   24b06:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   24b0a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   24b0e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   24b12:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   24b16:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   24b1a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   24b1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   24b22:	4770      	bx	lr
   24b24:	40001000 	.word	0x40001000

00024b28 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   24b28:	4a0a      	ldr	r2, [pc, #40]	; (24b54 <radio_aa_set+0x2c>)
   24b2a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   24b2c:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   24b2e:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   24b32:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   24b36:	78c3      	ldrb	r3, [r0, #3]
   24b38:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   24b3c:	7843      	ldrb	r3, [r0, #1]
   24b3e:	f890 c002 	ldrb.w	ip, [r0, #2]
   24b42:	7801      	ldrb	r1, [r0, #0]
   24b44:	041b      	lsls	r3, r3, #16
   24b46:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   24b4a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   24b4e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   24b52:	4770      	bx	lr
   24b54:	40001000 	.word	0x40001000

00024b58 <radio_pkt_configure>:
	switch (phy) {
   24b58:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   24b5c:	2b02      	cmp	r3, #2
   24b5e:	bf14      	ite	ne
   24b60:	f04f 0c00 	movne.w	ip, #0
   24b64:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   24b68:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   24b6a:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   24b6e:	bf48      	it	mi
   24b70:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   24b74:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   24b76:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   24b7a:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   24b7e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   24b82:	4a0a      	ldr	r2, [pc, #40]	; (24bac <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   24b84:	4303      	orrs	r3, r0
   24b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   24b8a:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   24b8e:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   24b92:	4b07      	ldr	r3, [pc, #28]	; (24bb0 <radio_pkt_configure+0x58>)
   24b94:	4003      	ands	r3, r0
   24b96:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   24b9a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   24b9e:	4319      	orrs	r1, r3
   24ba0:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   24ba4:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   24ba8:	4770      	bx	lr
   24baa:	bf00      	nop
   24bac:	40001000 	.word	0x40001000
   24bb0:	fef80000 	.word	0xfef80000

00024bb4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   24bb4:	4b01      	ldr	r3, [pc, #4]	; (24bbc <radio_pkt_rx_set+0x8>)
   24bb6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   24bba:	4770      	bx	lr
   24bbc:	40001000 	.word	0x40001000

00024bc0 <radio_pkt_tx_set>:
   24bc0:	4b01      	ldr	r3, [pc, #4]	; (24bc8 <radio_pkt_tx_set+0x8>)
   24bc2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   24bc6:	4770      	bx	lr
   24bc8:	40001000 	.word	0x40001000

00024bcc <radio_tx_chain_delay_get>:
}
   24bcc:	2001      	movs	r0, #1
   24bce:	4770      	bx	lr

00024bd0 <radio_rx_ready_delay_get>:
}
   24bd0:	2029      	movs	r0, #41	; 0x29
   24bd2:	4770      	bx	lr

00024bd4 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   24bd4:	2802      	cmp	r0, #2
}
   24bd6:	bf14      	ite	ne
   24bd8:	200a      	movne	r0, #10
   24bda:	2005      	moveq	r0, #5
   24bdc:	4770      	bx	lr
   24bde:	bf00      	nop

00024be0 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24be0:	4b01      	ldr	r3, [pc, #4]	; (24be8 <radio_tx_enable+0x8>)
   24be2:	2201      	movs	r2, #1
   24be4:	601a      	str	r2, [r3, #0]
}
   24be6:	4770      	bx	lr
   24be8:	40001000 	.word	0x40001000

00024bec <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   24bec:	4a07      	ldr	r2, [pc, #28]	; (24c0c <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   24bee:	4908      	ldr	r1, [pc, #32]	; (24c10 <radio_disable+0x24>)
{
   24bf0:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   24bf2:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   24bf4:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   24bf8:	2000      	movs	r0, #0
   24bfa:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   24bfe:	6053      	str	r3, [r2, #4]
}
   24c00:	bc10      	pop	{r4}
   24c02:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   24c04:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   24c08:	610b      	str	r3, [r1, #16]
}
   24c0a:	4770      	bx	lr
   24c0c:	4001f000 	.word	0x4001f000
   24c10:	40001000 	.word	0x40001000

00024c14 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   24c14:	4b04      	ldr	r3, [pc, #16]	; (24c28 <radio_status_reset+0x14>)
   24c16:	2200      	movs	r2, #0
   24c18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   24c1c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   24c20:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   24c24:	4770      	bx	lr
   24c26:	bf00      	nop
   24c28:	40001000 	.word	0x40001000

00024c2c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   24c2c:	4b03      	ldr	r3, [pc, #12]	; (24c3c <radio_is_ready+0x10>)
   24c2e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   24c32:	3800      	subs	r0, #0
   24c34:	bf18      	it	ne
   24c36:	2001      	movne	r0, #1
   24c38:	4770      	bx	lr
   24c3a:	bf00      	nop
   24c3c:	40001000 	.word	0x40001000

00024c40 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   24c40:	4b03      	ldr	r3, [pc, #12]	; (24c50 <radio_is_done+0x10>)
   24c42:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   24c46:	3800      	subs	r0, #0
   24c48:	bf18      	it	ne
   24c4a:	2001      	movne	r0, #1
   24c4c:	4770      	bx	lr
   24c4e:	bf00      	nop
   24c50:	40001000 	.word	0x40001000

00024c54 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   24c54:	4b03      	ldr	r3, [pc, #12]	; (24c64 <radio_is_idle+0x10>)
   24c56:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   24c5a:	fab0 f080 	clz	r0, r0
   24c5e:	0940      	lsrs	r0, r0, #5
   24c60:	4770      	bx	lr
   24c62:	bf00      	nop
   24c64:	40001000 	.word	0x40001000

00024c68 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   24c68:	4b04      	ldr	r3, [pc, #16]	; (24c7c <radio_crc_configure+0x14>)
   24c6a:	f240 1203 	movw	r2, #259	; 0x103
   24c6e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   24c72:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   24c76:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   24c7a:	4770      	bx	lr
   24c7c:	40001000 	.word	0x40001000

00024c80 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   24c80:	4b03      	ldr	r3, [pc, #12]	; (24c90 <radio_crc_is_valid+0x10>)
   24c82:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   24c86:	3800      	subs	r0, #0
   24c88:	bf18      	it	ne
   24c8a:	2001      	movne	r0, #1
   24c8c:	4770      	bx	lr
   24c8e:	bf00      	nop
   24c90:	40001000 	.word	0x40001000

00024c94 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   24c94:	4800      	ldr	r0, [pc, #0]	; (24c98 <radio_pkt_empty_get+0x4>)
   24c96:	4770      	bx	lr
   24c98:	200022e8 	.word	0x200022e8

00024c9c <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   24c9c:	4800      	ldr	r0, [pc, #0]	; (24ca0 <radio_pkt_scratch_get+0x4>)
   24c9e:	4770      	bx	lr
   24ca0:	200022ec 	.word	0x200022ec

00024ca4 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   24ca4:	4b1d      	ldr	r3, [pc, #116]	; (24d1c <radio_switch_complete_and_rx+0x78>)
{
   24ca6:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   24ca8:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   24caa:	4d1d      	ldr	r5, [pc, #116]	; (24d20 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   24cac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   24cb0:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24cb2:	4e1c      	ldr	r6, [pc, #112]	; (24d24 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   24cb4:	4c1c      	ldr	r4, [pc, #112]	; (24d28 <radio_switch_complete_and_rx+0x84>)
   24cb6:	4f1d      	ldr	r7, [pc, #116]	; (24d2c <radio_switch_complete_and_rx+0x88>)
   24cb8:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   24cbc:	f102 030c 	add.w	r3, r2, #12
   24cc0:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   24cc2:	00d0      	lsls	r0, r2, #3
   24cc4:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   24cc6:	0091      	lsls	r1, r2, #2
   24cc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   24ccc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   24cd0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   24cd4:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24cd8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   24cdc:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   24ce0:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   24ce4:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24ce8:	4811      	ldr	r0, [pc, #68]	; (24d30 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24cea:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24cee:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   24cf2:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   24cf6:	2b28      	cmp	r3, #40	; 0x28
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   24cf8:	bf8a      	itet	hi
   24cfa:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   24cfe:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   24d00:	3b28      	subhi	r3, #40	; 0x28
   24d02:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   24d06:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   24d08:	4b06      	ldr	r3, [pc, #24]	; (24d24 <radio_switch_complete_and_rx+0x80>)
   24d0a:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   24d0e:	f002 0201 	and.w	r2, r2, #1
   24d12:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   24d16:	702a      	strb	r2, [r5, #0]
	 */
	sw_switch(SW_SWITCH_PREV_TX, SW_SWITCH_NEXT_RX,
		  SW_SWITCH_PREV_PHY_1M, SW_SWITCH_PREV_FLAGS_DONTCARE,
		  phy_rx, SW_SWITCH_NEXT_FLAGS_DONTCARE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   24d18:	bcf0      	pop	{r4, r5, r6, r7}
   24d1a:	4770      	bx	lr
   24d1c:	40001000 	.word	0x40001000
   24d20:	20002641 	.word	0x20002641
   24d24:	4001f000 	.word	0x4001f000
   24d28:	40009140 	.word	0x40009140
   24d2c:	4000110c 	.word	0x4000110c
   24d30:	40001004 	.word	0x40001004

00024d34 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   24d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   24d38:	4e28      	ldr	r6, [pc, #160]	; (24ddc <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   24d3a:	4c29      	ldr	r4, [pc, #164]	; (24de0 <radio_switch_complete_and_tx+0xac>)
   24d3c:	4f29      	ldr	r7, [pc, #164]	; (24de4 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24d3e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 24de8 <radio_switch_complete_and_tx+0xb4>
   24d42:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 24dec <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   24d46:	2303      	movs	r3, #3
   24d48:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   24d4c:	7821      	ldrb	r1, [r4, #0]
   24d4e:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   24d52:	f101 030c 	add.w	r3, r1, #12
   24d56:	b2db      	uxtb	r3, r3
   24d58:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   24d5a:	00cd      	lsls	r5, r1, #3
   24d5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24d60:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   24d64:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   24d68:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   24d6c:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24d70:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24d74:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   24d78:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24d7c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   24d80:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   24d84:	2a02      	cmp	r2, #2
   24d86:	bf08      	it	eq
   24d88:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   24d8a:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   24d8e:	f242 42b8 	movw	r2, #9400	; 0x24b8
   24d92:	f241 3588 	movw	r5, #5000	; 0x1388
   24d96:	2802      	cmp	r0, #2
   24d98:	bf08      	it	eq
   24d9a:	462a      	moveq	r2, r5
   24d9c:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   24da0:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   24da4:	4413      	add	r3, r2
   24da6:	4a12      	ldr	r2, [pc, #72]	; (24df0 <radio_switch_complete_and_tx+0xbc>)
   24da8:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   24dac:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   24db0:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   24db4:	bf85      	ittet	hi
   24db6:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   24db8:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   24dbc:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   24dbe:	1a1b      	subhi	r3, r3, r0
   24dc0:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   24dc4:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   24dc6:	4b08      	ldr	r3, [pc, #32]	; (24de8 <radio_switch_complete_and_tx+0xb4>)
   24dc8:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   24dcc:	f001 0101 	and.w	r1, r1, #1
   24dd0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   24dd4:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;

	sw_switch(SW_SWITCH_PREV_RX, SW_SWITCH_NEXT_TX,
		  phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   24dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24dda:	bf00      	nop
   24ddc:	40001000 	.word	0x40001000
   24de0:	20002641 	.word	0x20002641
   24de4:	40009140 	.word	0x40009140
   24de8:	4001f000 	.word	0x4001f000
   24dec:	4000110c 	.word	0x4000110c
   24df0:	10624dd3 	.word	0x10624dd3

00024df4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   24df4:	4904      	ldr	r1, [pc, #16]	; (24e08 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   24df6:	4b05      	ldr	r3, [pc, #20]	; (24e0c <radio_switch_complete_and_disable+0x18>)
   24df8:	2003      	movs	r0, #3
   24dfa:	f44f 6210 	mov.w	r2, #2304	; 0x900
   24dfe:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   24e02:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   24e06:	4770      	bx	lr
   24e08:	40001000 	.word	0x40001000
   24e0c:	4001f000 	.word	0x4001f000

00024e10 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   24e10:	4b02      	ldr	r3, [pc, #8]	; (24e1c <radio_rssi_status_reset+0xc>)
   24e12:	2200      	movs	r2, #0
   24e14:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   24e18:	4770      	bx	lr
   24e1a:	bf00      	nop
   24e1c:	40001000 	.word	0x40001000

00024e20 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   24e20:	4b03      	ldr	r3, [pc, #12]	; (24e30 <radio_rssi_is_ready+0x10>)
   24e22:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   24e26:	3800      	subs	r0, #0
   24e28:	bf18      	it	ne
   24e2a:	2001      	movne	r0, #1
   24e2c:	4770      	bx	lr
   24e2e:	bf00      	nop
   24e30:	40001000 	.word	0x40001000

00024e34 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   24e34:	b410      	push	{r4}
   24e36:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   24e3a:	ea4f 038c 	mov.w	r3, ip, lsl #2
   24e3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   24e46:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   24e48:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   24e4c:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   24e50:	8894      	ldrh	r4, [r2, #4]
   24e52:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   24e56:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   24e5a:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   24e5e:	d1ec      	bne.n	24e3a <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   24e60:	4b03      	ldr	r3, [pc, #12]	; (24e70 <radio_filter_configure+0x3c>)
}
   24e62:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   24e64:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   24e68:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   24e6c:	4770      	bx	lr
   24e6e:	bf00      	nop
   24e70:	40001000 	.word	0x40001000

00024e74 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   24e74:	4a03      	ldr	r2, [pc, #12]	; (24e84 <radio_filter_disable+0x10>)
   24e76:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   24e7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   24e7e:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   24e82:	4770      	bx	lr
   24e84:	40001000 	.word	0x40001000

00024e88 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   24e88:	4b02      	ldr	r3, [pc, #8]	; (24e94 <radio_filter_status_reset+0xc>)
   24e8a:	2200      	movs	r2, #0
   24e8c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   24e90:	4770      	bx	lr
   24e92:	bf00      	nop
   24e94:	40001000 	.word	0x40001000

00024e98 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   24e98:	4b03      	ldr	r3, [pc, #12]	; (24ea8 <radio_filter_has_match+0x10>)
   24e9a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   24e9e:	3800      	subs	r0, #0
   24ea0:	bf18      	it	ne
   24ea2:	2001      	movne	r0, #1
   24ea4:	4770      	bx	lr
   24ea6:	bf00      	nop
   24ea8:	40001000 	.word	0x40001000

00024eac <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   24eac:	4b01      	ldr	r3, [pc, #4]	; (24eb4 <radio_filter_match_get+0x8>)
   24eae:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   24eb2:	4770      	bx	lr
   24eb4:	40001000 	.word	0x40001000

00024eb8 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   24eb8:	4904      	ldr	r1, [pc, #16]	; (24ecc <radio_tmr_status_reset+0x14>)
   24eba:	4b05      	ldr	r3, [pc, #20]	; (24ed0 <radio_tmr_status_reset+0x18>)
   24ebc:	4a05      	ldr	r2, [pc, #20]	; (24ed4 <radio_tmr_status_reset+0x1c>)
   24ebe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   24ec2:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   24ec6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   24eca:	4770      	bx	lr
   24ecc:	4000b000 	.word	0x4000b000
   24ed0:	4001f000 	.word	0x4001f000
   24ed4:	0e7000c0 	.word	0x0e7000c0

00024ed8 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   24ed8:	4b03      	ldr	r3, [pc, #12]	; (24ee8 <radio_tmr_tifs_set+0x10>)
   24eda:	4a04      	ldr	r2, [pc, #16]	; (24eec <radio_tmr_tifs_set+0x14>)
   24edc:	781b      	ldrb	r3, [r3, #0]
   24ede:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   24ee2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   24ee6:	4770      	bx	lr
   24ee8:	20002641 	.word	0x20002641
   24eec:	40009000 	.word	0x40009000

00024ef0 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   24ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   24ef4:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   24ef8:	4d31      	ldr	r5, [pc, #196]	; (24fc0 <radio_tmr_start+0xd0>)
   24efa:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   24efe:	42ab      	cmp	r3, r5
{
   24f00:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   24f02:	d906      	bls.n	24f12 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   24f04:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   24f08:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   24f0c:	3901      	subs	r1, #1
		remainder += 30517578UL;
   24f0e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f12:	4b2c      	ldr	r3, [pc, #176]	; (24fc4 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   24f14:	482c      	ldr	r0, [pc, #176]	; (24fc8 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   24f16:	4d2d      	ldr	r5, [pc, #180]	; (24fcc <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f18:	4e2d      	ldr	r6, [pc, #180]	; (24fd0 <radio_tmr_start+0xe0>)
   24f1a:	2701      	movs	r7, #1
   24f1c:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   24f1e:	2700      	movs	r7, #0
   24f20:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   24f24:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   24f28:	2704      	movs	r7, #4
   24f2a:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   24f2e:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   24f30:	2702      	movs	r7, #2
   24f32:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   24f36:	4a27      	ldr	r2, [pc, #156]	; (24fd4 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   24f38:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   24f3c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   24f40:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   24f44:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   24f48:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f4a:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24f4e:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   24f52:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   24f56:	bb64      	cbnz	r4, 24fb2 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   24f58:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   24f5c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   24f60:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   24f64:	4b1b      	ldr	r3, [pc, #108]	; (24fd4 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   24f66:	4a1c      	ldr	r2, [pc, #112]	; (24fd8 <radio_tmr_start+0xe8>)
   24f68:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   24f6c:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   24f6e:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f70:	f8df 8068 	ldr.w	r8, [pc, #104]	; 24fdc <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24f74:	f8df e068 	ldr.w	lr, [pc, #104]	; 24fe0 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f78:	f8df c068 	ldr.w	ip, [pc, #104]	; 24fe4 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24f7c:	4f1a      	ldr	r7, [pc, #104]	; (24fe8 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f7e:	4e1b      	ldr	r6, [pc, #108]	; (24fec <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24f80:	4d1b      	ldr	r5, [pc, #108]	; (24ff0 <radio_tmr_start+0x100>)
   24f82:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   24f84:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   24f88:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   24f8c:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   24f90:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   24f94:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f96:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24f9a:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24f9e:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24fa2:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   24fa6:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   24faa:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   24fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   24fb2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   24fb6:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   24fba:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   24fbe:	e7d1      	b.n	24f64 <radio_tmr_start+0x74>
   24fc0:	7ff0bdbf 	.word	0x7ff0bdbf
   24fc4:	40008000 	.word	0x40008000
   24fc8:	431bde83 	.word	0x431bde83
   24fcc:	4000b000 	.word	0x4000b000
   24fd0:	4000b148 	.word	0x4000b148
   24fd4:	4001f000 	.word	0x4001f000
   24fd8:	40009000 	.word	0x40009000
   24fdc:	4000110c 	.word	0x4000110c
   24fe0:	4000900c 	.word	0x4000900c
   24fe4:	40009140 	.word	0x40009140
   24fe8:	4001f004 	.word	0x4001f004
   24fec:	40009144 	.word	0x40009144
   24ff0:	4001f00c 	.word	0x4001f00c

00024ff4 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   24ff4:	4b01      	ldr	r3, [pc, #4]	; (24ffc <radio_tmr_start_get+0x8>)
   24ff6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   24ffa:	4770      	bx	lr
   24ffc:	4000b000 	.word	0x4000b000

00025000 <radio_tmr_stop>:
   25000:	4903      	ldr	r1, [pc, #12]	; (25010 <radio_tmr_stop+0x10>)
   25002:	4a04      	ldr	r2, [pc, #16]	; (25014 <radio_tmr_stop+0x14>)
   25004:	2301      	movs	r3, #1
   25006:	604b      	str	r3, [r1, #4]
   25008:	610b      	str	r3, [r1, #16]
   2500a:	6053      	str	r3, [r2, #4]
   2500c:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   2500e:	4770      	bx	lr
   25010:	40008000 	.word	0x40008000
   25014:	40009000 	.word	0x40009000

00025018 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   25018:	4904      	ldr	r1, [pc, #16]	; (2502c <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   2501a:	4b05      	ldr	r3, [pc, #20]	; (25030 <radio_tmr_hcto_configure+0x18>)
   2501c:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   25020:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   25024:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   25028:	4770      	bx	lr
   2502a:	bf00      	nop
   2502c:	40008000 	.word	0x40008000
   25030:	4001f000 	.word	0x4001f000

00025034 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   25034:	4b05      	ldr	r3, [pc, #20]	; (2504c <radio_tmr_aa_capture+0x18>)
   25036:	4806      	ldr	r0, [pc, #24]	; (25050 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   25038:	4906      	ldr	r1, [pc, #24]	; (25054 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   2503a:	4a07      	ldr	r2, [pc, #28]	; (25058 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   2503c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   25040:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   25044:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   25048:	4770      	bx	lr
   2504a:	bf00      	nop
   2504c:	4001f000 	.word	0x4001f000
   25050:	40001100 	.word	0x40001100
   25054:	40008040 	.word	0x40008040
   25058:	04000080 	.word	0x04000080

0002505c <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   2505c:	4b01      	ldr	r3, [pc, #4]	; (25064 <radio_tmr_aa_get+0x8>)
   2505e:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   25062:	4770      	bx	lr
   25064:	40008000 	.word	0x40008000

00025068 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   25068:	4b01      	ldr	r3, [pc, #4]	; (25070 <radio_tmr_aa_save+0x8>)
   2506a:	6018      	str	r0, [r3, #0]
}
   2506c:	4770      	bx	lr
   2506e:	bf00      	nop
   25070:	200023f8 	.word	0x200023f8

00025074 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   25074:	4b01      	ldr	r3, [pc, #4]	; (2507c <radio_tmr_aa_restore+0x8>)
}
   25076:	6818      	ldr	r0, [r3, #0]
   25078:	4770      	bx	lr
   2507a:	bf00      	nop
   2507c:	200023f8 	.word	0x200023f8

00025080 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   25080:	4b01      	ldr	r3, [pc, #4]	; (25088 <radio_tmr_ready_get+0x8>)
   25082:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   25086:	4770      	bx	lr
   25088:	40008000 	.word	0x40008000

0002508c <radio_tmr_end_capture>:
   2508c:	4b02      	ldr	r3, [pc, #8]	; (25098 <radio_tmr_end_capture+0xc>)
   2508e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   25092:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
#if defined(CONFIG_BT_CTLR_TIFS_HW) || !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* CONFIG_BT_CTLR_TIFS_HW || !CONFIG_SOC_SERIES_NRF53X */
}
   25096:	4770      	bx	lr
   25098:	4001f000 	.word	0x4001f000

0002509c <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   2509c:	4b01      	ldr	r3, [pc, #4]	; (250a4 <radio_tmr_end_get+0x8>)
   2509e:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   250a2:	4770      	bx	lr
   250a4:	40008000 	.word	0x40008000

000250a8 <radio_tmr_tifs_base_get>:
   250a8:	4b01      	ldr	r3, [pc, #4]	; (250b0 <radio_tmr_tifs_base_get+0x8>)
   250aa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   250ae:	4770      	bx	lr
   250b0:	40008000 	.word	0x40008000

000250b4 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   250b4:	4b17      	ldr	r3, [pc, #92]	; (25114 <radio_ccm_rx_pkt_set+0x60>)
{
   250b6:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   250b8:	2400      	movs	r4, #0
{
   250ba:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   250bc:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   250be:	4816      	ldr	r0, [pc, #88]	; (25118 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   250c0:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   250c4:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   250c8:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   250cc:	4e13      	ldr	r6, [pc, #76]	; (2511c <radio_ccm_rx_pkt_set+0x68>)
   250ce:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   250d0:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   250d4:	4812      	ldr	r0, [pc, #72]	; (25120 <radio_ccm_rx_pkt_set+0x6c>)
   250d6:	2902      	cmp	r1, #2
   250d8:	bf08      	it	eq
   250da:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   250dc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   250e0:	4810      	ldr	r0, [pc, #64]	; (25124 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   250e2:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   250e6:	4910      	ldr	r1, [pc, #64]	; (25128 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   250e8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   250ec:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   250f0:	4a0e      	ldr	r2, [pc, #56]	; (2512c <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   250f2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   250f6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   250fa:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   250fe:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   25102:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   25106:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2510a:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   2510c:	bc70      	pop	{r4, r5, r6}
   2510e:	601a      	str	r2, [r3, #0]
   25110:	4770      	bx	lr
   25112:	bf00      	nop
   25114:	4000f000 	.word	0x4000f000
   25118:	40001000 	.word	0x40001000
   2511c:	01010001 	.word	0x01010001
   25120:	01000001 	.word	0x01000001
   25124:	200022ec 	.word	0x200022ec
   25128:	200021dc 	.word	0x200021dc
   2512c:	4001f000 	.word	0x4001f000

00025130 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   25130:	4b0f      	ldr	r3, [pc, #60]	; (25170 <radio_ccm_tx_pkt_set+0x40>)
{
   25132:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   25134:	2200      	movs	r2, #0
{
   25136:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   25138:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2513a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   2513e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   25142:	480c      	ldr	r0, [pc, #48]	; (25174 <radio_ccm_tx_pkt_set+0x44>)
   25144:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   25148:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   2514c:	480a      	ldr	r0, [pc, #40]	; (25178 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   2514e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   25152:	4c0a      	ldr	r4, [pc, #40]	; (2517c <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   25154:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   25158:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   2515a:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   2515e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   25162:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   25164:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   25168:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   2516c:	6019      	str	r1, [r3, #0]
}
   2516e:	4770      	bx	lr
   25170:	4000f000 	.word	0x4000f000
   25174:	01010000 	.word	0x01010000
   25178:	200022ec 	.word	0x200022ec
   2517c:	200021dc 	.word	0x200021dc

00025180 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   25180:	4a0e      	ldr	r2, [pc, #56]	; (251bc <radio_ccm_is_done+0x3c>)
   25182:	2302      	movs	r3, #2
   25184:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   25188:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   2518c:	b933      	cbnz	r3, 2519c <radio_ccm_is_done+0x1c>
		__WFE();
   2518e:	bf20      	wfe
		__SEV();
   25190:	bf40      	sev
		__WFE();
   25192:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   25194:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   25198:	2b00      	cmp	r3, #0
   2519a:	d0f8      	beq.n	2518e <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   2519c:	4b07      	ldr	r3, [pc, #28]	; (251bc <radio_ccm_is_done+0x3c>)
   2519e:	4a08      	ldr	r2, [pc, #32]	; (251c0 <radio_ccm_is_done+0x40>)
   251a0:	2002      	movs	r0, #2
   251a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   251a6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   251aa:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   251ae:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   251b2:	fab0 f080 	clz	r0, r0
   251b6:	0940      	lsrs	r0, r0, #5
   251b8:	4770      	bx	lr
   251ba:	bf00      	nop
   251bc:	4000f000 	.word	0x4000f000
   251c0:	e000e100 	.word	0xe000e100

000251c4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   251c4:	4b03      	ldr	r3, [pc, #12]	; (251d4 <radio_ccm_mic_is_valid+0x10>)
   251c6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   251ca:	3800      	subs	r0, #0
   251cc:	bf18      	it	ne
   251ce:	2001      	movne	r0, #1
   251d0:	4770      	bx	lr
   251d2:	bf00      	nop
   251d4:	4000f000 	.word	0x4000f000

000251d8 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   251d8:	4a15      	ldr	r2, [pc, #84]	; (25230 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   251da:	4b16      	ldr	r3, [pc, #88]	; (25234 <radio_ar_configure+0x5c>)
{
   251dc:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   251de:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   251e2:	4e15      	ldr	r6, [pc, #84]	; (25238 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   251e4:	2703      	movs	r7, #3
   251e6:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   251ea:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   251ec:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   251f0:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   251f2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   251f6:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   251f8:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   251fc:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   25200:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   25204:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   25208:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   2520c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   25210:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   25214:	4909      	ldr	r1, [pc, #36]	; (2523c <radio_ar_configure+0x64>)
   25216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2521a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   2521e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   25222:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   25226:	bcf0      	pop	{r4, r5, r6, r7}
   25228:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   2522c:	4770      	bx	lr
   2522e:	bf00      	nop
   25230:	40001000 	.word	0x40001000
   25234:	4000f000 	.word	0x4000f000
   25238:	200021d8 	.word	0x200021d8
   2523c:	4001f000 	.word	0x4001f000

00025240 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   25240:	4b01      	ldr	r3, [pc, #4]	; (25248 <radio_ar_match_get+0x8>)
   25242:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   25246:	4770      	bx	lr
   25248:	4000f000 	.word	0x4000f000

0002524c <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   2524c:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2524e:	4807      	ldr	r0, [pc, #28]	; (2526c <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   25250:	4c07      	ldr	r4, [pc, #28]	; (25270 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   25252:	4a08      	ldr	r2, [pc, #32]	; (25274 <radio_ar_status_reset+0x28>)
   25254:	2300      	movs	r3, #0
   25256:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   2525a:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   2525e:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   25262:	bc10      	pop	{r4}
   25264:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   25268:	4770      	bx	lr
   2526a:	bf00      	nop
   2526c:	4000f000 	.word	0x4000f000
   25270:	40001000 	.word	0x40001000
   25274:	4001f000 	.word	0x4001f000

00025278 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   25278:	4b08      	ldr	r3, [pc, #32]	; (2529c <radio_ar_has_match+0x24>)
   2527a:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   2527e:	b160      	cbz	r0, 2529a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   25280:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   25284:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   25288:	b138      	cbz	r0, 2529a <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   2528a:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   2528e:	b120      	cbz	r0, 2529a <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   25290:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   25294:	fab0 f080 	clz	r0, r0
   25298:	0940      	lsrs	r0, r0, #5
}
   2529a:	4770      	bx	lr
   2529c:	40001000 	.word	0x40001000

000252a0 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   252a0:	2902      	cmp	r1, #2
{
   252a2:	b510      	push	{r4, lr}
   252a4:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   252a6:	d00b      	beq.n	252c0 <mayfly_enable_cb+0x20>
   252a8:	4a0a      	ldr	r2, [pc, #40]	; (252d4 <mayfly_enable_cb+0x34>)
   252aa:	490b      	ldr	r1, [pc, #44]	; (252d8 <mayfly_enable_cb+0x38>)
   252ac:	480b      	ldr	r0, [pc, #44]	; (252dc <mayfly_enable_cb+0x3c>)
   252ae:	231e      	movs	r3, #30
   252b0:	f002 fc47 	bl	27b42 <printk>
   252b4:	4040      	eors	r0, r0
   252b6:	f380 8811 	msr	BASEPRI, r0
   252ba:	f04f 0003 	mov.w	r0, #3
   252be:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   252c0:	200b      	movs	r0, #11
	if (enable) {
   252c2:	b11c      	cbz	r4, 252cc <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   252c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   252c8:	f7ed bd12 	b.w	12cf0 <arch_irq_enable>
}
   252cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   252d0:	f7ed bd1e 	b.w	12d10 <arch_irq_disable>
   252d4:	0002c674 	.word	0x0002c674
   252d8:	0002c6c4 	.word	0x0002c6c4
   252dc:	0002b8dc 	.word	0x0002b8dc

000252e0 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   252e0:	b129      	cbz	r1, 252ee <mayfly_is_enabled+0xe>
   252e2:	3901      	subs	r1, #1
   252e4:	2901      	cmp	r1, #1
   252e6:	d805      	bhi.n	252f4 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   252e8:	200b      	movs	r0, #11
   252ea:	f7ed bd25 	b.w	12d38 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   252ee:	2018      	movs	r0, #24
   252f0:	f7ed bd22 	b.w	12d38 <arch_irq_is_enabled>
{
   252f4:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   252f6:	4a07      	ldr	r2, [pc, #28]	; (25314 <mayfly_is_enabled+0x34>)
   252f8:	4907      	ldr	r1, [pc, #28]	; (25318 <mayfly_is_enabled+0x38>)
   252fa:	4808      	ldr	r0, [pc, #32]	; (2531c <mayfly_is_enabled+0x3c>)
   252fc:	2336      	movs	r3, #54	; 0x36
   252fe:	f002 fc20 	bl	27b42 <printk>
   25302:	4040      	eors	r0, r0
   25304:	f380 8811 	msr	BASEPRI, r0
   25308:	f04f 0003 	mov.w	r0, #3
   2530c:	df02      	svc	2
		break;
	}

	return 0;
}
   2530e:	2000      	movs	r0, #0
   25310:	bd08      	pop	{r3, pc}
   25312:	bf00      	nop
   25314:	0002c674 	.word	0x0002c674
   25318:	0002b974 	.word	0x0002b974
   2531c:	0002b8dc 	.word	0x0002b8dc

00025320 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   25320:	4288      	cmp	r0, r1
   25322:	d00b      	beq.n	2533c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   25324:	2801      	cmp	r0, #1
   25326:	d003      	beq.n	25330 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   25328:	2802      	cmp	r0, #2
   2532a:	d009      	beq.n	25340 <mayfly_prio_is_equal+0x20>
   2532c:	2000      	movs	r0, #0
#endif
	       0;
}
   2532e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   25330:	f1a1 0002 	sub.w	r0, r1, #2
   25334:	fab0 f080 	clz	r0, r0
   25338:	0940      	lsrs	r0, r0, #5
   2533a:	4770      	bx	lr
   2533c:	2001      	movs	r0, #1
   2533e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   25340:	f1a1 0001 	sub.w	r0, r1, #1
   25344:	fab0 f080 	clz	r0, r0
   25348:	0940      	lsrs	r0, r0, #5
   2534a:	4770      	bx	lr

0002534c <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   2534c:	2901      	cmp	r1, #1
{
   2534e:	b508      	push	{r3, lr}
	switch (callee_id) {
   25350:	d00f      	beq.n	25372 <mayfly_pend+0x26>
   25352:	2902      	cmp	r1, #2
   25354:	d00d      	beq.n	25372 <mayfly_pend+0x26>
   25356:	b191      	cbz	r1, 2537e <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   25358:	4a0c      	ldr	r2, [pc, #48]	; (2538c <mayfly_pend+0x40>)
   2535a:	490d      	ldr	r1, [pc, #52]	; (25390 <mayfly_pend+0x44>)
   2535c:	480d      	ldr	r0, [pc, #52]	; (25394 <mayfly_pend+0x48>)
   2535e:	2367      	movs	r3, #103	; 0x67
   25360:	f002 fbef 	bl	27b42 <printk>
   25364:	4040      	eors	r0, r0
   25366:	f380 8811 	msr	BASEPRI, r0
   2536a:	f04f 0003 	mov.w	r0, #3
   2536e:	df02      	svc	2
		break;
	}
}
   25370:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25372:	4b09      	ldr	r3, [pc, #36]	; (25398 <mayfly_pend+0x4c>)
   25374:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25378:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2537c:	bd08      	pop	{r3, pc}
   2537e:	4b06      	ldr	r3, [pc, #24]	; (25398 <mayfly_pend+0x4c>)
   25380:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   25384:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   25388:	bd08      	pop	{r3, pc}
   2538a:	bf00      	nop
   2538c:	0002c674 	.word	0x0002c674
   25390:	0002b974 	.word	0x0002b974
   25394:	0002b8dc 	.word	0x0002b8dc
   25398:	e000e100 	.word	0xe000e100

0002539c <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   2539c:	2803      	cmp	r0, #3
{
   2539e:	b510      	push	{r4, lr}
   253a0:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   253a2:	d804      	bhi.n	253ae <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   253a4:	4b11      	ldr	r3, [pc, #68]	; (253ec <hal_ticker_instance0_caller_id_get+0x50>)
   253a6:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   253a8:	b18c      	cbz	r4, 253ce <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   253aa:	4620      	mov	r0, r4
   253ac:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   253ae:	4a10      	ldr	r2, [pc, #64]	; (253f0 <hal_ticker_instance0_caller_id_get+0x54>)
   253b0:	4910      	ldr	r1, [pc, #64]	; (253f4 <hal_ticker_instance0_caller_id_get+0x58>)
   253b2:	4811      	ldr	r0, [pc, #68]	; (253f8 <hal_ticker_instance0_caller_id_get+0x5c>)
   253b4:	232b      	movs	r3, #43	; 0x2b
   253b6:	f002 fbc4 	bl	27b42 <printk>
   253ba:	4040      	eors	r0, r0
   253bc:	f380 8811 	msr	BASEPRI, r0
   253c0:	f04f 0003 	mov.w	r0, #3
   253c4:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   253c6:	4b09      	ldr	r3, [pc, #36]	; (253ec <hal_ticker_instance0_caller_id_get+0x50>)
   253c8:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   253ca:	2c00      	cmp	r4, #0
   253cc:	d1ed      	bne.n	253aa <hal_ticker_instance0_caller_id_get+0xe>
   253ce:	4a08      	ldr	r2, [pc, #32]	; (253f0 <hal_ticker_instance0_caller_id_get+0x54>)
   253d0:	490a      	ldr	r1, [pc, #40]	; (253fc <hal_ticker_instance0_caller_id_get+0x60>)
   253d2:	4809      	ldr	r0, [pc, #36]	; (253f8 <hal_ticker_instance0_caller_id_get+0x5c>)
   253d4:	232e      	movs	r3, #46	; 0x2e
   253d6:	f002 fbb4 	bl	27b42 <printk>
   253da:	4040      	eors	r0, r0
   253dc:	f380 8811 	msr	BASEPRI, r0
   253e0:	f04f 0003 	mov.w	r0, #3
   253e4:	df02      	svc	2
}
   253e6:	4620      	mov	r0, r4
   253e8:	bd10      	pop	{r4, pc}
   253ea:	bf00      	nop
   253ec:	0002c77c 	.word	0x0002c77c
   253f0:	0002c6e8 	.word	0x0002c6e8
   253f4:	0002c738 	.word	0x0002c738
   253f8:	0002b8dc 	.word	0x0002b8dc
   253fc:	0002c758 	.word	0x0002c758

00025400 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   25400:	3801      	subs	r0, #1
{
   25402:	b510      	push	{r4, lr}
   25404:	461c      	mov	r4, r3
   25406:	2804      	cmp	r0, #4
   25408:	f200 8082 	bhi.w	25510 <hal_ticker_instance0_sched+0x110>
   2540c:	e8df f000 	tbb	[pc, r0]
   25410:	3f302112 	.word	0x3f302112
   25414:	03          	.byte	0x03
   25415:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   25416:	2904      	cmp	r1, #4
   25418:	d04a      	beq.n	254b0 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   2541a:	4a44      	ldr	r2, [pc, #272]	; (2552c <hal_ticker_instance0_sched+0x12c>)
   2541c:	4944      	ldr	r1, [pc, #272]	; (25530 <hal_ticker_instance0_sched+0x130>)
   2541e:	4845      	ldr	r0, [pc, #276]	; (25534 <hal_ticker_instance0_sched+0x134>)
   25420:	23ba      	movs	r3, #186	; 0xba
   25422:	f002 fb8e 	bl	27b42 <printk>
   25426:	4040      	eors	r0, r0
   25428:	f380 8811 	msr	BASEPRI, r0
   2542c:	f04f 0003 	mov.w	r0, #3
   25430:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   25432:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   25434:	2904      	cmp	r1, #4
   25436:	d043      	beq.n	254c0 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   25438:	4a3c      	ldr	r2, [pc, #240]	; (2552c <hal_ticker_instance0_sched+0x12c>)
   2543a:	493d      	ldr	r1, [pc, #244]	; (25530 <hal_ticker_instance0_sched+0x130>)
   2543c:	483d      	ldr	r0, [pc, #244]	; (25534 <hal_ticker_instance0_sched+0x134>)
   2543e:	234e      	movs	r3, #78	; 0x4e
   25440:	f002 fb7f 	bl	27b42 <printk>
   25444:	4040      	eors	r0, r0
   25446:	f380 8811 	msr	BASEPRI, r0
   2544a:	f04f 0003 	mov.w	r0, #3
   2544e:	df02      	svc	2
}
   25450:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   25452:	2903      	cmp	r1, #3
   25454:	d03c      	beq.n	254d0 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   25456:	4a35      	ldr	r2, [pc, #212]	; (2552c <hal_ticker_instance0_sched+0x12c>)
   25458:	4935      	ldr	r1, [pc, #212]	; (25530 <hal_ticker_instance0_sched+0x130>)
   2545a:	4836      	ldr	r0, [pc, #216]	; (25534 <hal_ticker_instance0_sched+0x134>)
   2545c:	2365      	movs	r3, #101	; 0x65
   2545e:	f002 fb70 	bl	27b42 <printk>
   25462:	4040      	eors	r0, r0
   25464:	f380 8811 	msr	BASEPRI, r0
   25468:	f04f 0003 	mov.w	r0, #3
   2546c:	df02      	svc	2
}
   2546e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   25470:	2904      	cmp	r1, #4
   25472:	d035      	beq.n	254e0 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   25474:	4a2d      	ldr	r2, [pc, #180]	; (2552c <hal_ticker_instance0_sched+0x12c>)
   25476:	492e      	ldr	r1, [pc, #184]	; (25530 <hal_ticker_instance0_sched+0x130>)
   25478:	482e      	ldr	r0, [pc, #184]	; (25534 <hal_ticker_instance0_sched+0x134>)
   2547a:	237c      	movs	r3, #124	; 0x7c
   2547c:	f002 fb61 	bl	27b42 <printk>
   25480:	4040      	eors	r0, r0
   25482:	f380 8811 	msr	BASEPRI, r0
   25486:	f04f 0003 	mov.w	r0, #3
   2548a:	df02      	svc	2
}
   2548c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   2548e:	2903      	cmp	r1, #3
   25490:	d036      	beq.n	25500 <hal_ticker_instance0_sched+0x100>
   25492:	2904      	cmp	r1, #4
   25494:	d02c      	beq.n	254f0 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   25496:	4a25      	ldr	r2, [pc, #148]	; (2552c <hal_ticker_instance0_sched+0x12c>)
   25498:	4925      	ldr	r1, [pc, #148]	; (25530 <hal_ticker_instance0_sched+0x130>)
   2549a:	4826      	ldr	r0, [pc, #152]	; (25534 <hal_ticker_instance0_sched+0x134>)
   2549c:	23a2      	movs	r3, #162	; 0xa2
   2549e:	f002 fb50 	bl	27b42 <printk>
   254a2:	4040      	eors	r0, r0
   254a4:	f380 8811 	msr	BASEPRI, r0
   254a8:	f04f 0003 	mov.w	r0, #3
   254ac:	df02      	svc	2
}
   254ae:	bd10      	pop	{r4, pc}
			m.param = instance;
   254b0:	4b21      	ldr	r3, [pc, #132]	; (25538 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   254b2:	2102      	movs	r1, #2
			m.param = instance;
   254b4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   254b6:	2003      	movs	r0, #3
}
   254b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   254bc:	f7f2 bf82 	b.w	183c4 <mayfly_enqueue>
			m.param = instance;
   254c0:	4b1e      	ldr	r3, [pc, #120]	; (2553c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   254c2:	2102      	movs	r1, #2
			m.param = instance;
   254c4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   254c6:	2000      	movs	r0, #0
}
   254c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   254cc:	f7f2 bf7a 	b.w	183c4 <mayfly_enqueue>
			m.param = instance;
   254d0:	4b1b      	ldr	r3, [pc, #108]	; (25540 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   254d2:	2101      	movs	r1, #1
			m.param = instance;
   254d4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   254d6:	4608      	mov	r0, r1
}
   254d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   254dc:	f7f2 bf72 	b.w	183c4 <mayfly_enqueue>
			m.param = instance;
   254e0:	4b18      	ldr	r3, [pc, #96]	; (25544 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   254e2:	2102      	movs	r1, #2
			m.param = instance;
   254e4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   254e6:	2001      	movs	r0, #1
}
   254e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   254ec:	f7f2 bf6a 	b.w	183c4 <mayfly_enqueue>
			m.param = instance;
   254f0:	4b15      	ldr	r3, [pc, #84]	; (25548 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   254f2:	2102      	movs	r1, #2
			m.param = instance;
   254f4:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   254f6:	4608      	mov	r0, r1
}
   254f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   254fc:	f7f2 bf62 	b.w	183c4 <mayfly_enqueue>
			m.param = instance;
   25500:	4b12      	ldr	r3, [pc, #72]	; (2554c <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   25502:	2101      	movs	r1, #1
			m.param = instance;
   25504:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   25506:	2002      	movs	r0, #2
}
   25508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   2550c:	f7f2 bf5a 	b.w	183c4 <mayfly_enqueue>
		LL_ASSERT(0);
   25510:	4a06      	ldr	r2, [pc, #24]	; (2552c <hal_ticker_instance0_sched+0x12c>)
   25512:	4907      	ldr	r1, [pc, #28]	; (25530 <hal_ticker_instance0_sched+0x130>)
   25514:	4807      	ldr	r0, [pc, #28]	; (25534 <hal_ticker_instance0_sched+0x134>)
   25516:	23c0      	movs	r3, #192	; 0xc0
   25518:	f002 fb13 	bl	27b42 <printk>
   2551c:	4040      	eors	r0, r0
   2551e:	f380 8811 	msr	BASEPRI, r0
   25522:	f04f 0003 	mov.w	r0, #3
   25526:	df02      	svc	2
}
   25528:	bd10      	pop	{r4, pc}
   2552a:	bf00      	nop
   2552c:	0002c6e8 	.word	0x0002c6e8
   25530:	0002b974 	.word	0x0002b974
   25534:	0002b8dc 	.word	0x0002b8dc
   25538:	20000508 	.word	0x20000508
   2553c:	200004f8 	.word	0x200004f8
   25540:	200004e8 	.word	0x200004e8
   25544:	20000538 	.word	0x20000538
   25548:	20000518 	.word	0x20000518
   2554c:	20000528 	.word	0x20000528

00025550 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   25550:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   25552:	2000      	movs	r0, #0
   25554:	f7ff b9f2 	b.w	2493c <cntr_cmp_set>

00025558 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   25558:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   2555a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2555e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   25562:	3201      	adds	r2, #1
   25564:	d008      	beq.n	25578 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   25566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2556a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   2556e:	f013 0301 	ands.w	r3, r3, #1
   25572:	d10a      	bne.n	2558a <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   25574:	4618      	mov	r0, r3
}
   25576:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   25578:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   2557c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   25580:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   25582:	4293      	cmp	r3, r2
   25584:	d1ef      	bne.n	25566 <hci_vendor_read_static_addr+0xe>
	return 0;
   25586:	2000      	movs	r0, #0
}
   25588:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   2558a:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   2558e:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   25590:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   25592:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   25596:	f3c3 2307 	ubfx	r3, r3, #8, #8
   2559a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   2559c:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   2559e:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   255a2:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   255a6:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   255a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   255ac:	f063 033f 	orn	r3, r3, #63	; 0x3f
   255b0:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   255b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   255b6:	3301      	adds	r3, #1
   255b8:	d03b      	beq.n	25632 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   255ba:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   255be:	3301      	adds	r3, #1
   255c0:	d037      	beq.n	25632 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   255c2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   255c6:	3301      	adds	r3, #1
   255c8:	d033      	beq.n	25632 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   255ca:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   255ce:	3301      	adds	r3, #1
   255d0:	d02f      	beq.n	25632 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   255d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   255d6:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   255d8:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   255da:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   255de:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   255e2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   255e4:	f880 c009 	strb.w	ip, [r0, #9]
   255e8:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   255ea:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   255ee:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   255f0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   255f2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   255f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   255fa:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   255fc:	f880 c00d 	strb.w	ip, [r0, #13]
   25600:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   25602:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   25606:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   25608:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   2560a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   2560e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   25612:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   25614:	73c3      	strb	r3, [r0, #15]
   25616:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   2561a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   2561e:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   25620:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   25622:	0a11      	lsrs	r1, r2, #8
   25624:	f3c3 2307 	ubfx	r3, r3, #8, #8
   25628:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   2562a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   2562c:	7541      	strb	r1, [r0, #21]
		return 1;
   2562e:	2001      	movs	r0, #1
}
   25630:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   25632:	2210      	movs	r2, #16
   25634:	2100      	movs	r1, #0
   25636:	3006      	adds	r0, #6
   25638:	f003 fb18 	bl	28c6c <memset>
		return 1;
   2563c:	2001      	movs	r0, #1
}
   2563e:	bd08      	pop	{r3, pc}

00025640 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   25640:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   25642:	2210      	movs	r2, #16
{
   25644:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   25646:	2100      	movs	r1, #0
   25648:	f003 fb10 	bl	28c6c <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2564c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25650:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   25654:	3201      	adds	r2, #1
   25656:	d034      	beq.n	256c2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   25658:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   2565c:	3201      	adds	r2, #1
   2565e:	d030      	beq.n	256c2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   25660:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   25664:	3201      	adds	r2, #1
   25666:	d02c      	beq.n	256c2 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   25668:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   2566c:	3201      	adds	r2, #1
   2566e:	d028      	beq.n	256c2 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   25670:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   25674:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   25676:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   25678:	0a08      	lsrs	r0, r1, #8
   2567a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   2567e:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   25680:	70e0      	strb	r0, [r4, #3]
   25682:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   25684:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   25688:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   2568a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   2568c:	0a08      	lsrs	r0, r1, #8
   2568e:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   25692:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   25694:	71e0      	strb	r0, [r4, #7]
   25696:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   25698:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   2569c:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   2569e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   256a0:	0a08      	lsrs	r0, r1, #8
   256a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
   256a6:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   256a8:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   256aa:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   256ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   256b0:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   256b2:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   256b4:	0a11      	lsrs	r1, r2, #8
   256b6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   256ba:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   256bc:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   256be:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   256c0:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   256c2:	4620      	mov	r0, r4
   256c4:	2210      	movs	r2, #16
}
   256c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   256ca:	2100      	movs	r1, #0
   256cc:	f003 bace 	b.w	28c6c <memset>

000256d0 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   256d0:	4b02      	ldr	r3, [pc, #8]	; (256dc <net_buf_pool_get+0xc>)
   256d2:	2228      	movs	r2, #40	; 0x28
   256d4:	fb02 3000 	mla	r0, r2, r0, r3
   256d8:	4770      	bx	lr
   256da:	bf00      	nop
   256dc:	20000744 	.word	0x20000744

000256e0 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   256e0:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   256e2:	4b05      	ldr	r3, [pc, #20]	; (256f8 <net_buf_id+0x18>)
   256e4:	2128      	movs	r1, #40	; 0x28
   256e6:	fb01 3302 	mla	r3, r1, r2, r3
   256ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   256ec:	1ac0      	subs	r0, r0, r3
}
   256ee:	4b03      	ldr	r3, [pc, #12]	; (256fc <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   256f0:	10c0      	asrs	r0, r0, #3
}
   256f2:	4358      	muls	r0, r3
   256f4:	4770      	bx	lr
   256f6:	bf00      	nop
   256f8:	20000744 	.word	0x20000744
   256fc:	aaaaaaab 	.word	0xaaaaaaab

00025700 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   25700:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25702:	4b0a      	ldr	r3, [pc, #40]	; (2572c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25704:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   25706:	2428      	movs	r4, #40	; 0x28
   25708:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   2570c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2570e:	6a1b      	ldr	r3, [r3, #32]
   25710:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   25712:	6823      	ldr	r3, [r4, #0]
   25714:	429a      	cmp	r2, r3
   25716:	bf94      	ite	ls
   25718:	600a      	strls	r2, [r1, #0]
   2571a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   2571c:	f7ff ffe0 	bl	256e0 <net_buf_id>
   25720:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   25724:	fb02 3000 	mla	r0, r2, r0, r3
   25728:	bd10      	pop	{r4, pc}
   2572a:	bf00      	nop
   2572c:	20000744 	.word	0x20000744

00025730 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   25730:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25734:	4605      	mov	r5, r0
   25736:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   25738:	4610      	mov	r0, r2
   2573a:	4619      	mov	r1, r3
{
   2573c:	4691      	mov	r9, r2
   2573e:	4698      	mov	r8, r3
   25740:	4617      	mov	r7, r2
   25742:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   25744:	f005 fab9 	bl	2acba <sys_clock_timeout_end_calc>
   25748:	4682      	mov	sl, r0
   2574a:	468b      	mov	fp, r1
	__asm__ volatile(
   2574c:	f04f 0320 	mov.w	r3, #32
   25750:	f3ef 8111 	mrs	r1, BASEPRI
   25754:	f383 8811 	msr	BASEPRI, r3
   25758:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   2575c:	8b6b      	ldrh	r3, [r5, #26]
   2575e:	2b00      	cmp	r3, #0
   25760:	d055      	beq.n	2580e <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   25762:	8b2a      	ldrh	r2, [r5, #24]
   25764:	429a      	cmp	r2, r3
   25766:	d93e      	bls.n	257e6 <net_buf_alloc_len+0xb6>
   25768:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   2576a:	2200      	movs	r2, #0
   2576c:	2300      	movs	r3, #0
   2576e:	4628      	mov	r0, r5
   25770:	f001 f9bc 	bl	26aec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   25774:	9900      	ldr	r1, [sp, #0]
   25776:	4604      	mov	r4, r0
   25778:	2800      	cmp	r0, #0
   2577a:	d034      	beq.n	257e6 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   2577c:	f381 8811 	msr	BASEPRI, r1
   25780:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   25784:	9b01      	ldr	r3, [sp, #4]
   25786:	2b00      	cmp	r3, #0
   25788:	d051      	beq.n	2582e <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   2578a:	ea58 0309 	orrs.w	r3, r8, r9
   2578e:	d00f      	beq.n	257b0 <net_buf_alloc_len+0x80>
   25790:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   25794:	bf08      	it	eq
   25796:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   2579a:	d009      	beq.n	257b0 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   2579c:	f002 f83a 	bl	27814 <sys_clock_tick_get>
   257a0:	ebba 0700 	subs.w	r7, sl, r0
   257a4:	eb6b 0601 	sbc.w	r6, fp, r1
   257a8:	2e00      	cmp	r6, #0
   257aa:	bfbc      	itt	lt
   257ac:	2700      	movlt	r7, #0
   257ae:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   257b0:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   257b2:	f8df 8090 	ldr.w	r8, [pc, #144]	; 25844 <net_buf_alloc_len+0x114>
   257b6:	2228      	movs	r2, #40	; 0x28
   257b8:	fb02 8303 	mla	r3, r2, r3, r8
   257bc:	a901      	add	r1, sp, #4
   257be:	6a1b      	ldr	r3, [r3, #32]
   257c0:	681b      	ldr	r3, [r3, #0]
   257c2:	463a      	mov	r2, r7
   257c4:	681d      	ldr	r5, [r3, #0]
   257c6:	4620      	mov	r0, r4
   257c8:	4633      	mov	r3, r6
   257ca:	47a8      	blx	r5
   257cc:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   257ce:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   257d0:	bb70      	cbnz	r0, 25830 <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   257d2:	79a0      	ldrb	r0, [r4, #6]
   257d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   257d8:	4621      	mov	r1, r4
   257da:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   257de:	f004 ffd5 	bl	2a78c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   257e2:	462c      	mov	r4, r5
}
   257e4:	e01f      	b.n	25826 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   257e6:	8b6b      	ldrh	r3, [r5, #26]
   257e8:	1e5a      	subs	r2, r3, #1
   257ea:	836a      	strh	r2, [r5, #26]
   257ec:	f381 8811 	msr	BASEPRI, r1
   257f0:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   257f4:	8b2c      	ldrh	r4, [r5, #24]
   257f6:	1ae3      	subs	r3, r4, r3
   257f8:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   257fa:	2018      	movs	r0, #24
   257fc:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   25800:	4810      	ldr	r0, [pc, #64]	; (25844 <net_buf_alloc_len+0x114>)
   25802:	4b11      	ldr	r3, [pc, #68]	; (25848 <net_buf_alloc_len+0x118>)
   25804:	1a2d      	subs	r5, r5, r0
   25806:	10ed      	asrs	r5, r5, #3
   25808:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   2580a:	71a5      	strb	r5, [r4, #6]
		goto success;
   2580c:	e7ba      	b.n	25784 <net_buf_alloc_len+0x54>
   2580e:	f381 8811 	msr	BASEPRI, r1
   25812:	f3bf 8f6f 	isb	sy
   25816:	464a      	mov	r2, r9
   25818:	4643      	mov	r3, r8
   2581a:	4628      	mov	r0, r5
   2581c:	f001 f966 	bl	26aec <z_impl_k_queue_get>
	if (!buf) {
   25820:	4604      	mov	r4, r0
   25822:	2800      	cmp	r0, #0
   25824:	d1ae      	bne.n	25784 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   25826:	4620      	mov	r0, r4
   25828:	b003      	add	sp, #12
   2582a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   2582e:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   25830:	2300      	movs	r3, #0
	buf->ref   = 1U;
   25832:	2201      	movs	r2, #1
	buf->frags = NULL;
   25834:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   25836:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   25838:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   2583a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   2583c:	6923      	ldr	r3, [r4, #16]
   2583e:	81e2      	strh	r2, [r4, #14]
   25840:	60a3      	str	r3, [r4, #8]
	return buf;
   25842:	e7f0      	b.n	25826 <net_buf_alloc_len+0xf6>
   25844:	20000744 	.word	0x20000744
   25848:	cccccccd 	.word	0xcccccccd

0002584c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   2584c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25850:	4d17      	ldr	r5, [pc, #92]	; (258b0 <net_buf_unref+0x64>)
   25852:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   25854:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   25856:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   25858:	b90c      	cbnz	r4, 2585e <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2585a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   2585e:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   25860:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   25864:	3b01      	subs	r3, #1
   25866:	b2db      	uxtb	r3, r3
   25868:	7123      	strb	r3, [r4, #4]
   2586a:	2b00      	cmp	r3, #0
   2586c:	d1f5      	bne.n	2585a <net_buf_unref+0xe>
		if (buf->__buf) {
   2586e:	6921      	ldr	r1, [r4, #16]
   25870:	b159      	cbz	r1, 2588a <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   25872:	7963      	ldrb	r3, [r4, #5]
   25874:	079b      	lsls	r3, r3, #30
   25876:	d407      	bmi.n	25888 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   25878:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   2587a:	fb07 5303 	mla	r3, r7, r3, r5
   2587e:	4620      	mov	r0, r4
   25880:	6a1b      	ldr	r3, [r3, #32]
   25882:	681b      	ldr	r3, [r3, #0]
   25884:	689b      	ldr	r3, [r3, #8]
   25886:	4798      	blx	r3
			buf->__buf = NULL;
   25888:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   2588a:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   2588c:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   2588e:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   25892:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   25894:	69db      	ldr	r3, [r3, #28]
   25896:	b11b      	cbz	r3, 258a0 <net_buf_unref+0x54>
			pool->destroy(buf);
   25898:	4620      	mov	r0, r4
   2589a:	4798      	blx	r3
{
   2589c:	4644      	mov	r4, r8
   2589e:	e7db      	b.n	25858 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   258a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   258a4:	4621      	mov	r1, r4
   258a6:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   258aa:	f004 ff6f 	bl	2a78c <k_queue_prepend>
}
   258ae:	e7f5      	b.n	2589c <net_buf_unref+0x50>
   258b0:	20000744 	.word	0x20000744

000258b4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   258b4:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   258b6:	4b09      	ldr	r3, [pc, #36]	; (258dc <gpio_nrfx_init+0x28>)
   258b8:	781a      	ldrb	r2, [r3, #0]
   258ba:	b96a      	cbnz	r2, 258d8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   258bc:	2101      	movs	r1, #1
   258be:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   258c0:	2006      	movs	r0, #6
   258c2:	2105      	movs	r1, #5
   258c4:	f7ed fa46 	bl	12d54 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   258c8:	2006      	movs	r0, #6
   258ca:	f7ed fa11 	bl	12cf0 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   258ce:	4b04      	ldr	r3, [pc, #16]	; (258e0 <gpio_nrfx_init+0x2c>)
   258d0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   258d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   258d8:	2000      	movs	r0, #0
   258da:	bd08      	pop	{r3, pc}
   258dc:	20002642 	.word	0x20002642
   258e0:	40006000 	.word	0x40006000

000258e4 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   258e4:	4b2b      	ldr	r3, [pc, #172]	; (25994 <gpio_nrfx_config+0xb0>)
{
   258e6:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   258e8:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   258ea:	482b      	ldr	r0, [pc, #172]	; (25998 <gpio_nrfx_config+0xb4>)
   258ec:	4013      	ands	r3, r2
   258ee:	4283      	cmp	r3, r0
   258f0:	d041      	beq.n	25976 <gpio_nrfx_config+0x92>
   258f2:	d80d      	bhi.n	25910 <gpio_nrfx_config+0x2c>
   258f4:	2b06      	cmp	r3, #6
   258f6:	d015      	beq.n	25924 <gpio_nrfx_config+0x40>
   258f8:	d805      	bhi.n	25906 <gpio_nrfx_config+0x22>
   258fa:	b19b      	cbz	r3, 25924 <gpio_nrfx_config+0x40>
   258fc:	2b02      	cmp	r3, #2
   258fe:	d03c      	beq.n	2597a <gpio_nrfx_config+0x96>
   25900:	f06f 0015 	mvn.w	r0, #21
   25904:	e036      	b.n	25974 <gpio_nrfx_config+0x90>
   25906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2590a:	d1f9      	bne.n	25900 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   2590c:	2301      	movs	r3, #1
   2590e:	e009      	b.n	25924 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   25910:	4822      	ldr	r0, [pc, #136]	; (2599c <gpio_nrfx_config+0xb8>)
   25912:	4283      	cmp	r3, r0
   25914:	d033      	beq.n	2597e <gpio_nrfx_config+0x9a>
   25916:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   2591a:	d032      	beq.n	25982 <gpio_nrfx_config+0x9e>
   2591c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   25920:	d1ee      	bne.n	25900 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   25922:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   25924:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   25926:	bf54      	ite	pl
   25928:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   2592c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   2592e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   25932:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   25934:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   25938:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   2593c:	d507      	bpl.n	2594e <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   2593e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   25942:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   25944:	d01f      	beq.n	25986 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   25946:	2201      	movs	r2, #1
   25948:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   2594a:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   2594e:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   25950:	4c13      	ldr	r4, [pc, #76]	; (259a0 <gpio_nrfx_config+0xbc>)
   25952:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   25954:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25958:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   2595c:	bf18      	it	ne
   2595e:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   25962:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   25966:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2596a:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2596e:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   25972:	2000      	movs	r0, #0
}
   25974:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   25976:	2307      	movs	r3, #7
   25978:	e7d4      	b.n	25924 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   2597a:	2304      	movs	r3, #4
   2597c:	e7d2      	b.n	25924 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   2597e:	2305      	movs	r3, #5
   25980:	e7d0      	b.n	25924 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   25982:	2303      	movs	r3, #3
   25984:	e7ce      	b.n	25924 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   25986:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   25988:	bf42      	ittt	mi
   2598a:	2201      	movmi	r2, #1
   2598c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   2598e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   25992:	e7dc      	b.n	2594e <gpio_nrfx_config+0x6a>
   25994:	00f00006 	.word	0x00f00006
   25998:	00100006 	.word	0x00100006
   2599c:	00400002 	.word	0x00400002
   259a0:	50000300 	.word	0x50000300

000259a4 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   259a4:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   259a8:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   259aa:	4b08      	ldr	r3, [pc, #32]	; (259cc <nrf_gpio_cfg_sense_set+0x28>)
   259ac:	2801      	cmp	r0, #1
   259ae:	bf18      	it	ne
   259b0:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   259b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   259b8:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   259bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   259c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   259c4:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   259c8:	4770      	bx	lr
   259ca:	bf00      	nop
   259cc:	50000300 	.word	0x50000300

000259d0 <check_level_trigger_pins>:
{
   259d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
   259d4:	6903      	ldr	r3, [r0, #16]
	return port->config;
   259d6:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   259da:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   259dc:	f8df b07c 	ldr.w	fp, [pc, #124]	; 25a5c <check_level_trigger_pins+0x8c>
{
   259e0:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   259e2:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   259e6:	430a      	orrs	r2, r1
   259e8:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   259ec:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   259f0:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   259f2:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   259f6:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   259f8:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   259fc:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   259fe:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   25a00:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   25a04:	b917      	cbnz	r7, 25a0c <check_level_trigger_pins+0x3c>
}
   25a06:	4628      	mov	r0, r5
   25a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   25a0c:	423c      	tst	r4, r7
   25a0e:	d021      	beq.n	25a54 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25a10:	f89a 3008 	ldrb.w	r3, [sl, #8]
   25a14:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   25a18:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   25a1a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   25a1e:	d114      	bne.n	25a4a <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   25a20:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   25a22:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   25a24:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   25a28:	bf14      	ite	ne
   25a2a:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   25a2e:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   25a30:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   25a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   25a38:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   25a3c:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   25a3e:	bf02      	ittt	eq
   25a40:	f8d8 3000 	ldreq.w	r3, [r8]
   25a44:	4323      	orreq	r3, r4
   25a46:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   25a4a:	2100      	movs	r1, #0
   25a4c:	f7ff ffaa 	bl	259a4 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   25a50:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   25a54:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   25a58:	0064      	lsls	r4, r4, #1
   25a5a:	e7d3      	b.n	25a04 <check_level_trigger_pins+0x34>
   25a5c:	50000300 	.word	0x50000300

00025a60 <gpiote_event_handler>:
{
   25a60:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   25a62:	2400      	movs	r4, #0
{
   25a64:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   25a66:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   25a6a:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25a6e:	4e28      	ldr	r6, [pc, #160]	; (25b10 <gpiote_event_handler+0xb0>)
   25a70:	f8d6 517c 	ldr.w	r5, [r6, #380]	; 0x17c
	if (port_event) {
   25a74:	b16d      	cbz	r5, 25a92 <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   25a76:	a902      	add	r1, sp, #8
   25a78:	4826      	ldr	r0, [pc, #152]	; (25b14 <gpiote_event_handler+0xb4>)
   25a7a:	f7ff ffa9 	bl	259d0 <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   25a7e:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   25a80:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   25a82:	4825      	ldr	r0, [pc, #148]	; (25b18 <gpiote_event_handler+0xb8>)
   25a84:	f7ff ffa4 	bl	259d0 <check_level_trigger_pins>
		fired_triggers[1] =
   25a88:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25a8a:	f8c6 417c 	str.w	r4, [r6, #380]	; 0x17c
   25a8e:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
{
   25a92:	4922      	ldr	r1, [pc, #136]	; (25b1c <gpiote_event_handler+0xbc>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   25a94:	4c1e      	ldr	r4, [pc, #120]	; (25b10 <gpiote_event_handler+0xb0>)
   25a96:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   25a98:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25a9a:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   25a9c:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   25aa0:	fa06 f002 	lsl.w	r0, r6, r2
   25aa4:	4218      	tst	r0, r3
   25aa6:	d016      	beq.n	25ad6 <gpiote_event_handler+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25aa8:	680b      	ldr	r3, [r1, #0]
   25aaa:	b1a3      	cbz	r3, 25ad6 <gpiote_event_handler+0x76>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25aac:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   25ab0:	af04      	add	r7, sp, #16
   25ab2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25ab6:	f8c1 c000 	str.w	ip, [r1]
   25aba:	f3c3 3040 	ubfx	r0, r3, #13, #1
   25abe:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   25ac2:	f3c3 2304 	ubfx	r3, r3, #8, #5
   25ac6:	f850 7c10 	ldr.w	r7, [r0, #-16]
   25aca:	fa06 f303 	lsl.w	r3, r6, r3
   25ace:	433b      	orrs	r3, r7
   25ad0:	f840 3c10 	str.w	r3, [r0, #-16]
   25ad4:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   25ad6:	3201      	adds	r2, #1
   25ad8:	2a08      	cmp	r2, #8
   25ada:	f101 0104 	add.w	r1, r1, #4
   25ade:	d1dd      	bne.n	25a9c <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
   25ae0:	9a00      	ldr	r2, [sp, #0]
   25ae2:	b122      	cbz	r2, 25aee <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(list, port, pins);
   25ae4:	4b0e      	ldr	r3, [pc, #56]	; (25b20 <gpiote_event_handler+0xc0>)
   25ae6:	490b      	ldr	r1, [pc, #44]	; (25b14 <gpiote_event_handler+0xb4>)
   25ae8:	6858      	ldr	r0, [r3, #4]
   25aea:	f004 fc75 	bl	2a3d8 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   25aee:	9a01      	ldr	r2, [sp, #4]
   25af0:	b122      	cbz	r2, 25afc <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
   25af2:	4b0c      	ldr	r3, [pc, #48]	; (25b24 <gpiote_event_handler+0xc4>)
   25af4:	4908      	ldr	r1, [pc, #32]	; (25b18 <gpiote_event_handler+0xb8>)
   25af6:	6858      	ldr	r0, [r3, #4]
   25af8:	f004 fc6e 	bl	2a3d8 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   25afc:	b12d      	cbz	r5, 25b0a <gpiote_event_handler+0xaa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   25afe:	4805      	ldr	r0, [pc, #20]	; (25b14 <gpiote_event_handler+0xb4>)
   25b00:	f004 fc7b 	bl	2a3fa <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   25b04:	4804      	ldr	r0, [pc, #16]	; (25b18 <gpiote_event_handler+0xb8>)
   25b06:	f004 fc78 	bl	2a3fa <cfg_level_pins>
}
   25b0a:	b005      	add	sp, #20
   25b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25b0e:	bf00      	nop
   25b10:	40006000 	.word	0x40006000
   25b14:	20000660 	.word	0x20000660
   25b18:	20000678 	.word	0x20000678
   25b1c:	40006100 	.word	0x40006100
   25b20:	20002434 	.word	0x20002434
   25b24:	20002450 	.word	0x20002450

00025b28 <gpio_nrfx_pin_interrupt_configure>:
{
   25b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25b2a:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   25b2c:	6842      	ldr	r2, [r0, #4]
	return port->data;
   25b2e:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   25b30:	7a12      	ldrb	r2, [r2, #8]
   25b32:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   25b36:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   25b3a:	460e      	mov	r6, r1
   25b3c:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   25b40:	d110      	bne.n	25b64 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   25b42:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   25b44:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   25b46:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   25b4a:	4961      	ldr	r1, [pc, #388]	; (25cd0 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   25b4c:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   25b50:	bf18      	it	ne
   25b52:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   25b56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   25b5a:	07d0      	lsls	r0, r2, #31
   25b5c:	d507      	bpl.n	25b6e <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   25b5e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25b62:	e09a      	b.n	25c9a <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   25b64:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   25b68:	68f9      	ldr	r1, [r7, #12]
   25b6a:	f000 8098 	beq.w	25c9e <gpio_nrfx_pin_interrupt_configure+0x176>
   25b6e:	68fa      	ldr	r2, [r7, #12]
   25b70:	2101      	movs	r1, #1
   25b72:	40b1      	lsls	r1, r6
   25b74:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   25b76:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   25b78:	60f9      	str	r1, [r7, #12]
   25b7a:	2101      	movs	r1, #1
   25b7c:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   25b7e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   25b82:	bf0c      	ite	eq
   25b84:	430a      	orreq	r2, r1
   25b86:	438a      	bicne	r2, r1
   25b88:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   25b8a:	69ba      	ldr	r2, [r7, #24]
   25b8c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   25b90:	bf0c      	ite	eq
   25b92:	430a      	orreq	r2, r1
   25b94:	438a      	bicne	r2, r1
   25b96:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   25b98:	693a      	ldr	r2, [r7, #16]
   25b9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   25b9e:	bf0c      	ite	eq
   25ba0:	4311      	orreq	r1, r2
   25ba2:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   25ba6:	4a4b      	ldr	r2, [pc, #300]	; (25cd4 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   25ba8:	6139      	str	r1, [r7, #16]
   25baa:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   25bae:	2000      	movs	r0, #0
   25bb0:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   25bb2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   25bb6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   25bba:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   25bbe:	428d      	cmp	r5, r1
   25bc0:	d172      	bne.n	25ca8 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   25bc2:	fa23 f100 	lsr.w	r1, r3, r0
   25bc6:	07c9      	lsls	r1, r1, #31
   25bc8:	d56e      	bpl.n	25ca8 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   25bca:	0083      	lsls	r3, r0, #2
   25bcc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25bd0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   25bd4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   25bd8:	f021 0101 	bic.w	r1, r1, #1
   25bdc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   25be0:	2301      	movs	r3, #1
   25be2:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   25be4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   25be8:	b2c0      	uxtb	r0, r0
   25bea:	f000 fc87 	bl	264fc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   25bee:	4628      	mov	r0, r5
   25bf0:	2100      	movs	r1, #0
   25bf2:	f7ff fed7 	bl	259a4 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   25bf6:	68f8      	ldr	r0, [r7, #12]
   25bf8:	40f0      	lsrs	r0, r6
   25bfa:	f010 0001 	ands.w	r0, r0, #1
   25bfe:	d04c      	beq.n	25c9a <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   25c00:	6978      	ldr	r0, [r7, #20]
   25c02:	40f0      	lsrs	r0, r6
   25c04:	f010 0401 	ands.w	r4, r0, #1
   25c08:	d055      	beq.n	25cb6 <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
   25c0a:	69bb      	ldr	r3, [r7, #24]
   25c0c:	40f3      	lsrs	r3, r6
   25c0e:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   25c10:	bf5f      	itttt	pl
   25c12:	6939      	ldrpl	r1, [r7, #16]
   25c14:	fa21 f606 	lsrpl.w	r6, r1, r6
   25c18:	f006 0601 	andpl.w	r6, r6, #1
   25c1c:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   25c20:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   25c24:	bf54      	ite	pl
   25c26:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   25c28:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   25c2a:	f000 fc87 	bl	2653c <nrfx_gpiote_channel_alloc>
   25c2e:	4b2a      	ldr	r3, [pc, #168]	; (25cd8 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   25c30:	4298      	cmp	r0, r3
   25c32:	d13d      	bne.n	25cb0 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   25c34:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25c38:	0093      	lsls	r3, r2, #2
   25c3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25c3e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25c42:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   25c44:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   25c48:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   25c4c:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   25c50:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   25c54:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   25c58:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   25c5c:	430d      	orrs	r5, r1
   25c5e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   25c62:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   25c66:	0093      	lsls	r3, r2, #2
   25c68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25c6c:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   25c70:	2000      	movs	r0, #0
   25c72:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   25c74:	f89d 1007 	ldrb.w	r1, [sp, #7]
   25c78:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   25c7a:	008b      	lsls	r3, r1, #2
   25c7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   25c80:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   25c84:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   25c88:	f042 0201 	orr.w	r2, r2, #1
   25c8c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   25c90:	4a10      	ldr	r2, [pc, #64]	; (25cd4 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   25c92:	2301      	movs	r3, #1
   25c94:	408b      	lsls	r3, r1
   25c96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   25c9a:	b003      	add	sp, #12
   25c9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   25c9e:	2201      	movs	r2, #1
   25ca0:	40b2      	lsls	r2, r6
   25ca2:	ea21 0102 	bic.w	r1, r1, r2
   25ca6:	e766      	b.n	25b76 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   25ca8:	3001      	adds	r0, #1
   25caa:	2808      	cmp	r0, #8
   25cac:	d181      	bne.n	25bb2 <gpio_nrfx_pin_interrupt_configure+0x8a>
   25cae:	e79e      	b.n	25bee <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   25cb0:	f06f 0012 	mvn.w	r0, #18
   25cb4:	e7f1      	b.n	25c9a <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   25cb6:	6939      	ldr	r1, [r7, #16]
   25cb8:	40f1      	lsrs	r1, r6
   25cba:	f001 0101 	and.w	r1, r1, #1
   25cbe:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   25cc2:	4628      	mov	r0, r5
   25cc4:	b2c9      	uxtb	r1, r1
   25cc6:	f7ff fe6d 	bl	259a4 <nrf_gpio_cfg_sense_set>
	int res = 0;
   25cca:	4620      	mov	r0, r4
   25ccc:	e7e5      	b.n	25c9a <gpio_nrfx_pin_interrupt_configure+0x172>
   25cce:	bf00      	nop
   25cd0:	50000300 	.word	0x50000300
   25cd4:	40006000 	.word	0x40006000
   25cd8:	0bad0000 	.word	0x0bad0000

00025cdc <uart_nrfx_poll_in>:
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_uart_event_check(NRF_UART_Type const * p_reg, nrf_uart_event_t event)
{
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25cdc:	4b07      	ldr	r3, [pc, #28]	; (25cfc <uart_nrfx_poll_in+0x20>)
   25cde:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrfx_poll_in(const struct device *dev, unsigned char *c)
{
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
   25ce2:	b142      	cbz	r2, 25cf6 <uart_nrfx_poll_in+0x1a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25ce4:	2000      	movs	r0, #0
   25ce6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
   25cea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    nrf_uart_hwfc_pins_set(p_reg, NRF_UART_PSEL_DISCONNECTED, NRF_UART_PSEL_DISCONNECTED);
}

NRF_STATIC_INLINE uint8_t nrf_uart_rxd_get(NRF_UART_Type const * p_reg)
{
    return p_reg->RXD;
   25cee:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
   25cf2:	700b      	strb	r3, [r1, #0]
	nrf_uart_event_clear(uart0_addr, NRF_UART_EVENT_RXDRDY);

	/* got a character */
	*c = nrf_uart_rxd_get(uart0_addr);

	return 0;
   25cf4:	4770      	bx	lr
		return -1;
   25cf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   25cfa:	4770      	bx	lr
   25cfc:	40002000 	.word	0x40002000

00025d00 <uart_nrfx_err_check>:
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   25d00:	4b02      	ldr	r3, [pc, #8]	; (25d0c <uart_nrfx_err_check+0xc>)
   25d02:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   25d06:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(const struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
   25d0a:	4770      	bx	lr
   25d0c:	40002000 	.word	0x40002000

00025d10 <uart_nrfx_configure>:

static int uart_nrfx_configure(const struct device *dev,
			       const struct uart_config *cfg)
{
   25d10:	b530      	push	{r4, r5, lr}
	nrf_uart_config_t uart_cfg;

#if defined(UART_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   25d12:	794b      	ldrb	r3, [r1, #5]
   25d14:	2b01      	cmp	r3, #1
   25d16:	d022      	beq.n	25d5e <uart_nrfx_configure+0x4e>
   25d18:	2b03      	cmp	r3, #3
   25d1a:	d11d      	bne.n	25d58 <uart_nrfx_configure+0x48>
	case UART_CFG_STOP_BITS_1:
		uart_cfg.stop = NRF_UART_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uart_cfg.stop = NRF_UART_STOP_TWO;
   25d1c:	2510      	movs	r5, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   25d1e:	798b      	ldrb	r3, [r1, #6]
   25d20:	2b03      	cmp	r3, #3
   25d22:	d119      	bne.n	25d58 <uart_nrfx_configure+0x48>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   25d24:	79cb      	ldrb	r3, [r1, #7]
   25d26:	b9bb      	cbnz	r3, 25d58 <uart_nrfx_configure+0x48>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   25d28:	790a      	ldrb	r2, [r1, #4]
   25d2a:	b112      	cbz	r2, 25d32 <uart_nrfx_configure+0x22>
   25d2c:	2a02      	cmp	r2, #2
   25d2e:	d113      	bne.n	25d58 <uart_nrfx_configure+0x48>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
   25d30:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   25d32:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
   25d34:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
   25d38:	d061      	beq.n	25dfe <uart_nrfx_configure+0xee>
   25d3a:	d82d      	bhi.n	25d98 <uart_nrfx_configure+0x88>
   25d3c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   25d40:	d05f      	beq.n	25e02 <uart_nrfx_configure+0xf2>
   25d42:	d816      	bhi.n	25d72 <uart_nrfx_configure+0x62>
   25d44:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   25d48:	d05d      	beq.n	25e06 <uart_nrfx_configure+0xf6>
   25d4a:	d80a      	bhi.n	25d62 <uart_nrfx_configure+0x52>
   25d4c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   25d50:	d05c      	beq.n	25e0c <uart_nrfx_configure+0xfc>
   25d52:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   25d56:	d05c      	beq.n	25e12 <uart_nrfx_configure+0x102>
   25d58:	f06f 0085 	mvn.w	r0, #133	; 0x85
   25d5c:	e04e      	b.n	25dfc <uart_nrfx_configure+0xec>
	switch (cfg->stop_bits) {
   25d5e:	2500      	movs	r5, #0
   25d60:	e7dd      	b.n	25d1e <uart_nrfx_configure+0xe>
	switch (baudrate) {
   25d62:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   25d66:	d057      	beq.n	25e18 <uart_nrfx_configure+0x108>
   25d68:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   25d6c:	d1f4      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
   25d6e:	4b34      	ldr	r3, [pc, #208]	; (25e40 <uart_nrfx_configure+0x130>)
   25d70:	e039      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25d72:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   25d76:	d052      	beq.n	25e1e <uart_nrfx_configure+0x10e>
   25d78:	d807      	bhi.n	25d8a <uart_nrfx_configure+0x7a>
   25d7a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   25d7e:	d050      	beq.n	25e22 <uart_nrfx_configure+0x112>
   25d80:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   25d84:	d1e8      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
   25d86:	4b2f      	ldr	r3, [pc, #188]	; (25e44 <uart_nrfx_configure+0x134>)
   25d88:	e02d      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25d8a:	f647 2412 	movw	r4, #31250	; 0x7a12
   25d8e:	42a3      	cmp	r3, r4
   25d90:	d1e2      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
   25d92:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   25d96:	e026      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25d98:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   25d9c:	d044      	beq.n	25e28 <uart_nrfx_configure+0x118>
   25d9e:	d811      	bhi.n	25dc4 <uart_nrfx_configure+0xb4>
   25da0:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   25da4:	d042      	beq.n	25e2c <uart_nrfx_configure+0x11c>
   25da6:	d808      	bhi.n	25dba <uart_nrfx_configure+0xaa>
   25da8:	f64d 24c0 	movw	r4, #56000	; 0xdac0
   25dac:	42a3      	cmp	r3, r4
   25dae:	d03f      	beq.n	25e30 <uart_nrfx_configure+0x120>
   25db0:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   25db4:	d1d0      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
   25db6:	4b24      	ldr	r3, [pc, #144]	; (25e48 <uart_nrfx_configure+0x138>)
   25db8:	e015      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25dba:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   25dbe:	d1cb      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
   25dc0:	4b22      	ldr	r3, [pc, #136]	; (25e4c <uart_nrfx_configure+0x13c>)
   25dc2:	e010      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25dc4:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   25dc8:	d035      	beq.n	25e36 <uart_nrfx_configure+0x126>
   25dca:	d807      	bhi.n	25ddc <uart_nrfx_configure+0xcc>
   25dcc:	4c20      	ldr	r4, [pc, #128]	; (25e50 <uart_nrfx_configure+0x140>)
   25dce:	42a3      	cmp	r3, r4
   25dd0:	d033      	beq.n	25e3a <uart_nrfx_configure+0x12a>
   25dd2:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   25dd6:	d1bf      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
   25dd8:	4b1e      	ldr	r3, [pc, #120]	; (25e54 <uart_nrfx_configure+0x144>)
   25dda:	e004      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25ddc:	4c1e      	ldr	r4, [pc, #120]	; (25e58 <uart_nrfx_configure+0x148>)
   25dde:	42a3      	cmp	r3, r4
   25de0:	d1ba      	bne.n	25d58 <uart_nrfx_configure+0x48>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
   25de2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   25de6:	4c1d      	ldr	r4, [pc, #116]	; (25e5c <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
   25de8:	432a      	orrs	r2, r5
    p_reg->BAUDRATE = baudrate;
   25dea:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   25dee:	f8c4 256c 	str.w	r2, [r4, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   25df2:	6903      	ldr	r3, [r0, #16]
   25df4:	c903      	ldmia	r1, {r0, r1}
   25df6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   25dfa:	2000      	movs	r0, #0
}
   25dfc:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
   25dfe:	4b18      	ldr	r3, [pc, #96]	; (25e60 <uart_nrfx_configure+0x150>)
   25e00:	e7f1      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
   25e02:	4b18      	ldr	r3, [pc, #96]	; (25e64 <uart_nrfx_configure+0x154>)
   25e04:	e7ef      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
   25e06:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   25e0a:	e7ec      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = 0x00014000;
   25e0c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   25e10:	e7e9      	b.n	25de6 <uart_nrfx_configure+0xd6>
	switch (baudrate) {
   25e12:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   25e16:	e7e6      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
   25e18:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   25e1c:	e7e3      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
   25e1e:	4b12      	ldr	r3, [pc, #72]	; (25e68 <uart_nrfx_configure+0x158>)
   25e20:	e7e1      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
   25e22:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
   25e26:	e7de      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
   25e28:	4b10      	ldr	r3, [pc, #64]	; (25e6c <uart_nrfx_configure+0x15c>)
   25e2a:	e7dc      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
   25e2c:	4b10      	ldr	r3, [pc, #64]	; (25e70 <uart_nrfx_configure+0x160>)
   25e2e:	e7da      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
   25e30:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   25e34:	e7d7      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
   25e36:	4b0f      	ldr	r3, [pc, #60]	; (25e74 <uart_nrfx_configure+0x164>)
   25e38:	e7d5      	b.n	25de6 <uart_nrfx_configure+0xd6>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
   25e3a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   25e3e:	e7d2      	b.n	25de6 <uart_nrfx_configure+0xd6>
   25e40:	0013b000 	.word	0x0013b000
   25e44:	004ea000 	.word	0x004ea000
   25e48:	00ebf000 	.word	0x00ebf000
   25e4c:	01d7e000 	.word	0x01d7e000
   25e50:	0003d090 	.word	0x0003d090
   25e54:	075f7000 	.word	0x075f7000
   25e58:	000f4240 	.word	0x000f4240
   25e5c:	40002000 	.word	0x40002000
   25e60:	009d5000 	.word	0x009d5000
   25e64:	00275000 	.word	0x00275000
   25e68:	0075f000 	.word	0x0075f000
   25e6c:	03afb000 	.word	0x03afb000
   25e70:	013a9000 	.word	0x013a9000
   25e74:	0ebed000 	.word	0x0ebed000

00025e78 <uart_nrfx_poll_out>:
{
   25e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25e7a:	460e      	mov	r6, r1
	if (!k_is_in_isr()) {
   25e7c:	f004 fbeb 	bl	2a656 <k_is_in_isr>
   25e80:	4d1a      	ldr	r5, [pc, #104]	; (25eec <uart_nrfx_poll_out+0x74>)
   25e82:	bb78      	cbnz	r0, 25ee4 <uart_nrfx_poll_out+0x6c>
   25e84:	2464      	movs	r4, #100	; 0x64
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   25e86:	2701      	movs	r7, #1
   25e88:	f3bf 8f5b 	dmb	ish
   25e8c:	e855 3f00 	ldrex	r3, [r5]
   25e90:	2b00      	cmp	r3, #0
   25e92:	d103      	bne.n	25e9c <uart_nrfx_poll_out+0x24>
   25e94:	e845 7200 	strex	r2, r7, [r5]
   25e98:	2a00      	cmp	r2, #0
   25e9a:	d1f7      	bne.n	25e8c <uart_nrfx_poll_out+0x14>
   25e9c:	f3bf 8f5b 	dmb	ish
		while (atomic_cas((atomic_t *) lock,
   25ea0:	d007      	beq.n	25eb2 <uart_nrfx_poll_out+0x3a>
	return z_impl_k_sleep(timeout);
   25ea2:	2021      	movs	r0, #33	; 0x21
   25ea4:	2100      	movs	r1, #0
			if (--safety_cnt == 0) {
   25ea6:	3c01      	subs	r4, #1
   25ea8:	f001 fae4 	bl	27474 <z_impl_k_sleep>
   25eac:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   25eb0:	d1ea      	bne.n	25e88 <uart_nrfx_poll_out+0x10>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25eb2:	4c0f      	ldr	r4, [pc, #60]	; (25ef0 <uart_nrfx_poll_out+0x78>)
   25eb4:	2300      	movs	r3, #0
   25eb6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   25eba:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25ebe:	2301      	movs	r3, #1
   25ec0:	60a3      	str	r3, [r4, #8]
    p_reg->TXD = txd;
   25ec2:	f8c4 651c 	str.w	r6, [r4, #1308]	; 0x51c
   25ec6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   25eca:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	NRFX_WAIT_FOR(event_txdrdy_check(), 1000, 1, res);
   25ece:	b923      	cbnz	r3, 25eda <uart_nrfx_poll_out+0x62>
   25ed0:	2001      	movs	r0, #1
   25ed2:	f004 faca 	bl	2a46a <nrfx_busy_wait>
   25ed6:	3e01      	subs	r6, #1
   25ed8:	d1f7      	bne.n	25eca <uart_nrfx_poll_out+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25eda:	2301      	movs	r3, #1
   25edc:	60e3      	str	r3, [r4, #12]
	*lock = 0;
   25ede:	2300      	movs	r3, #0
   25ee0:	602b      	str	r3, [r5, #0]
}
   25ee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*lock = 1;
   25ee4:	2301      	movs	r3, #1
   25ee6:	602b      	str	r3, [r5, #0]
   25ee8:	e7e3      	b.n	25eb2 <uart_nrfx_poll_out+0x3a>
   25eea:	bf00      	nop
   25eec:	20002470 	.word	0x20002470
   25ef0:	40002000 	.word	0x40002000

00025ef4 <uart_nrfx_init>:
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(const struct device *dev)
{
   25ef4:	b510      	push	{r4, lr}
    p_reg->OUTSET = set_mask;
   25ef6:	4b13      	ldr	r3, [pc, #76]	; (25f44 <uart_nrfx_init+0x50>)
    p_reg->ENABLE = UART_ENABLE_ENABLE_Disabled;
   25ef8:	4c13      	ldr	r4, [pc, #76]	; (25f48 <uart_nrfx_init+0x54>)
   25efa:	2200      	movs	r2, #0
   25efc:	2108      	movs	r1, #8
   25efe:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
   25f02:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
   25f06:	2103      	movs	r1, #3
   25f08:	f8c3 170c 	str.w	r1, [r3, #1804]	; 0x70c
   25f0c:	f8c3 2728 	str.w	r2, [r3, #1832]	; 0x728
    p_reg->PSEL.RXD = pselrxd;
   25f10:	232a      	movs	r3, #42	; 0x2a
   25f12:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
    p_reg->PSEL.TXD = pseltxd;
   25f16:	2323      	movs	r3, #35	; 0x23
   25f18:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    p_reg->PSEL.RTS = pselrts;
   25f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25f20:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
	}

	nrf_uart_hwfc_pins_set(uart0_addr, RTS_PIN, CTS_PIN);

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   25f24:	6901      	ldr	r1, [r0, #16]
    p_reg->PSEL.CTS = pselcts;
   25f26:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   25f2a:	f7ff fef1 	bl	25d10 <uart_nrfx_configure>
	if (err) {
   25f2e:	b940      	cbnz	r0, 25f42 <uart_nrfx_init+0x4e>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
   25f30:	2304      	movs	r3, #4
   25f32:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   25f36:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
   25f3a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   25f3e:	2301      	movs	r3, #1
   25f40:	6023      	str	r3, [r4, #0]
#if HW_FLOW_CONTROL_AVAILABLE
	k_timer_init(&uart0_cb.tx_timeout_timer, tx_timeout, NULL);
#endif
#endif
	return 0;
}
   25f42:	bd10      	pop	{r4, pc}
   25f44:	50000300 	.word	0x50000300
   25f48:	40002000 	.word	0x40002000

00025f4c <random_byte_get>:
	__asm__ volatile(
   25f4c:	f04f 0320 	mov.w	r3, #32
   25f50:	f3ef 8211 	mrs	r2, BASEPRI
   25f54:	f383 8811 	msr	BASEPRI, r3
   25f58:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   25f5c:	4b09      	ldr	r3, [pc, #36]	; (25f84 <random_byte_get+0x38>)
   25f5e:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   25f62:	b161      	cbz	r1, 25f7e <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   25f64:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   25f66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   25f6a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   25f6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   25f72:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   25f74:	f382 8811 	msr	BASEPRI, r2
   25f78:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   25f7c:	4770      	bx	lr
	int retval = -EAGAIN;
   25f7e:	f06f 000a 	mvn.w	r0, #10
   25f82:	e7f7      	b.n	25f74 <random_byte_get+0x28>
   25f84:	4000d000 	.word	0x4000d000

00025f88 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   25f88:	b5f0      	push	{r4, r5, r6, r7, lr}
   25f8a:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   25f8c:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   25f8e:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   25f90:	f04f 0020 	mov.w	r0, #32
   25f94:	f3ef 8e11 	mrs	lr, BASEPRI
   25f98:	f380 8811 	msr	BASEPRI, r0
   25f9c:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   25fa0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   25fa2:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   25fa6:	1ba4      	subs	r4, r4, r6
   25fa8:	403c      	ands	r4, r7
	if (available < len) {
   25faa:	42a2      	cmp	r2, r4
		len = available;
   25fac:	bf88      	it	hi
   25fae:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   25fb0:	18b0      	adds	r0, r6, r2
   25fb2:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   25fb4:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   25fb6:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   25fb8:	f38e 8811 	msr	BASEPRI, lr
   25fbc:	f3bf 8f6f 	isb	sy
   25fc0:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   25fc2:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   25fc4:	4290      	cmp	r0, r2
   25fc6:	d119      	bne.n	25ffc <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   25fc8:	4566      	cmp	r6, ip
   25fca:	d10d      	bne.n	25fe8 <rng_pool_get+0x60>
	__asm__ volatile(
   25fcc:	f04f 0520 	mov.w	r5, #32
   25fd0:	f3ef 8011 	mrs	r0, BASEPRI
   25fd4:	f385 8811 	msr	BASEPRI, r5
   25fd8:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   25fdc:	781d      	ldrb	r5, [r3, #0]
   25fde:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   25fe0:	f380 8811 	msr	BASEPRI, r0
   25fe4:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   25fe8:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   25fea:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   25fec:	b290      	uxth	r0, r2
	available = available - len;
   25fee:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   25ff0:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   25ff2:	bf22      	ittt	cs
   25ff4:	4b06      	ldrcs	r3, [pc, #24]	; (26010 <rng_pool_get+0x88>)
   25ff6:	2201      	movcs	r2, #1
   25ff8:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   25ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   25ffc:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   26000:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   26002:	f89e e005 	ldrb.w	lr, [lr, #5]
   26006:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   2600a:	403d      	ands	r5, r7
   2600c:	e7da      	b.n	25fc4 <rng_pool_get+0x3c>
   2600e:	bf00      	nop
   26010:	4000d000 	.word	0x4000d000

00026014 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   26014:	43db      	mvns	r3, r3
{
   26016:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   2601a:	f013 0501 	ands.w	r5, r3, #1
{
   2601e:	460e      	mov	r6, r1
   26020:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   26022:	d004      	beq.n	2602e <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   26024:	4821      	ldr	r0, [pc, #132]	; (260ac <entropy_nrf5_get_entropy_isr+0x98>)
   26026:	f7ff ffaf 	bl	25f88 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   2602a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   2602e:	b3a2      	cbz	r2, 2609a <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   26030:	f04f 0320 	mov.w	r3, #32
   26034:	f3ef 8811 	mrs	r8, BASEPRI
   26038:	f383 8811 	msr	BASEPRI, r3
   2603c:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   26040:	200d      	movs	r0, #13
   26042:	f7ec fe79 	bl	12d38 <arch_irq_is_enabled>
   26046:	4607      	mov	r7, r0
		irq_disable(IRQN);
   26048:	200d      	movs	r0, #13
   2604a:	f7ec fe61 	bl	12d10 <arch_irq_disable>
	__asm__ volatile(
   2604e:	f388 8811 	msr	BASEPRI, r8
   26052:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   26056:	f8df 8058 	ldr.w	r8, [pc, #88]	; 260b0 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2605a:	f8df 9058 	ldr.w	r9, [pc, #88]	; 260b4 <entropy_nrf5_get_entropy_isr+0xa0>
   2605e:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   26062:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   26066:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2606a:	2301      	movs	r3, #1
   2606c:	f8c8 3000 	str.w	r3, [r8]
   26070:	4625      	mov	r5, r4
   26072:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   26076:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   2607a:	b183      	cbz	r3, 2609e <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   2607c:	f7ff ff66 	bl	25f4c <random_byte_get>
			if (byte < 0) {
   26080:	1e03      	subs	r3, r0, #0
   26082:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   26086:	dbf6      	blt.n	26076 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   26088:	3d01      	subs	r5, #1
   2608a:	b2ad      	uxth	r5, r5
   2608c:	5573      	strb	r3, [r6, r5]
		} while (len);
   2608e:	2d00      	cmp	r5, #0
   26090:	d1f1      	bne.n	26076 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   26092:	b117      	cbz	r7, 2609a <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   26094:	200d      	movs	r0, #13
   26096:	f7ec fe2b 	bl	12cf0 <arch_irq_enable>
	return cnt;
   2609a:	4620      	mov	r0, r4
   2609c:	e7c5      	b.n	2602a <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   2609e:	f3bf 8f4f 	dsb	sy
				__WFE();
   260a2:	bf20      	wfe
				__SEV();
   260a4:	bf40      	sev
				__WFE();
   260a6:	bf20      	wfe
   260a8:	e7e5      	b.n	26076 <entropy_nrf5_get_entropy_isr+0x62>
   260aa:	bf00      	nop
   260ac:	200024a8 	.word	0x200024a8
   260b0:	4000d000 	.word	0x4000d000
   260b4:	e000e100 	.word	0xe000e100

000260b8 <entropy_nrf5_get_entropy>:
{
   260b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   260bc:	4f13      	ldr	r7, [pc, #76]	; (2610c <entropy_nrf5_get_entropy+0x54>)
   260be:	460d      	mov	r5, r1
   260c0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   260c2:	f107 0845 	add.w	r8, r7, #69	; 0x45
   260c6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   260ca:	b914      	cbnz	r4, 260d2 <entropy_nrf5_get_entropy+0x1a>
}
   260cc:	4620      	mov	r0, r4
   260ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   260d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   260d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   260da:	4638      	mov	r0, r7
   260dc:	f000 fd60 	bl	26ba0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   260e0:	4622      	mov	r2, r4
   260e2:	4629      	mov	r1, r5
   260e4:	4640      	mov	r0, r8
   260e6:	f7ff ff4f 	bl	25f88 <rng_pool_get>
   260ea:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   260ec:	4638      	mov	r0, r7
   260ee:	f000 fd31 	bl	26b54 <z_impl_k_sem_give>
		if (bytes == 0U) {
   260f2:	b93e      	cbnz	r6, 26104 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   260f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   260f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   260fc:	4648      	mov	r0, r9
   260fe:	f000 fd4f 	bl	26ba0 <z_impl_k_sem_take>
			continue;
   26102:	e7e2      	b.n	260ca <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   26104:	1ba4      	subs	r4, r4, r6
   26106:	b2a4      	uxth	r4, r4
		buf += bytes;
   26108:	4435      	add	r5, r6
   2610a:	e7de      	b.n	260ca <entropy_nrf5_get_entropy+0x12>
   2610c:	20002478 	.word	0x20002478

00026110 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   26110:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   26112:	4c19      	ldr	r4, [pc, #100]	; (26178 <entropy_nrf5_init+0x68>)
   26114:	2201      	movs	r2, #1
   26116:	4611      	mov	r1, r2
   26118:	4620      	mov	r0, r4
   2611a:	f004 fb7d 	bl	2a818 <z_impl_k_sem_init>
   2611e:	2201      	movs	r2, #1
   26120:	2100      	movs	r1, #0
   26122:	f104 0018 	add.w	r0, r4, #24
   26126:	f004 fb77 	bl	2a818 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2612a:	f240 4307 	movw	r3, #1031	; 0x407
   2612e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   26132:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   26136:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   26138:	230c      	movs	r3, #12
   2613a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   2613e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   26140:	4b0e      	ldr	r3, [pc, #56]	; (2617c <entropy_nrf5_init+0x6c>)
   26142:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   26146:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2614a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   2614e:	f042 0201 	orr.w	r2, r2, #1
   26152:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   26156:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   26158:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   2615c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   26160:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   26164:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   26166:	6019      	str	r1, [r3, #0]
   26168:	200d      	movs	r0, #13
   2616a:	f7ec fdf3 	bl	12d54 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2616e:	200d      	movs	r0, #13
   26170:	f7ec fdbe 	bl	12cf0 <arch_irq_enable>

	return 0;
}
   26174:	4628      	mov	r0, r5
   26176:	bd38      	pop	{r3, r4, r5, pc}
   26178:	20002478 	.word	0x20002478
   2617c:	4000d000 	.word	0x4000d000

00026180 <isr>:
{
   26180:	b510      	push	{r4, lr}
	byte = random_byte_get();
   26182:	f7ff fee3 	bl	25f4c <random_byte_get>
	if (byte < 0) {
   26186:	2800      	cmp	r0, #0
   26188:	db20      	blt.n	261cc <isr+0x4c>
	uint8_t last  = rngp->last;
   2618a:	4b17      	ldr	r3, [pc, #92]	; (261e8 <isr+0x68>)
   2618c:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   26190:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   26194:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   26198:	1a51      	subs	r1, r2, r1
   2619a:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   2619e:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   261a0:	d10d      	bne.n	261be <isr+0x3e>
	uint8_t last  = rngp->last;
   261a2:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   261a6:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   261aa:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   261ae:	1a51      	subs	r1, r2, r1
   261b0:	ea34 0101 	bics.w	r1, r4, r1
   261b4:	d10b      	bne.n	261ce <isr+0x4e>
   261b6:	4b0d      	ldr	r3, [pc, #52]	; (261ec <isr+0x6c>)
   261b8:	2201      	movs	r2, #1
   261ba:	605a      	str	r2, [r3, #4]
}
   261bc:	e00e      	b.n	261dc <isr+0x5c>
	rngp->buffer[last] = byte;
   261be:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   261c0:	3201      	adds	r2, #1
   261c2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   261c4:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   261c8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   261cc:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   261ce:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   261d0:	3201      	adds	r2, #1
   261d2:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   261d4:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   261d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   261dc:	4804      	ldr	r0, [pc, #16]	; (261f0 <isr+0x70>)
}
   261de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   261e2:	f000 bcb7 	b.w	26b54 <z_impl_k_sem_give>
   261e6:	bf00      	nop
   261e8:	20002478 	.word	0x20002478
   261ec:	4000d000 	.word	0x4000d000
   261f0:	20002490 	.word	0x20002490

000261f4 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   261f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   261f8:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   261fc:	2a08      	cmp	r2, #8
   261fe:	d106      	bne.n	2620e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   26200:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   26204:	2b05      	cmp	r3, #5
   26206:	d802      	bhi.n	2620e <nrf52_errata_103+0x1a>
   26208:	4a02      	ldr	r2, [pc, #8]	; (26214 <nrf52_errata_103+0x20>)
   2620a:	5cd0      	ldrb	r0, [r2, r3]
   2620c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   2620e:	2000      	movs	r0, #0
    #endif
}
   26210:	4770      	bx	lr
   26212:	bf00      	nop
   26214:	0002de43 	.word	0x0002de43

00026218 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   26218:	4a02      	ldr	r2, [pc, #8]	; (26224 <nvmc_wait+0xc>)
   2621a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   2621e:	2b00      	cmp	r3, #0
   26220:	d0fb      	beq.n	2621a <nvmc_wait+0x2>
}
   26222:	4770      	bx	lr
   26224:	4001e000 	.word	0x4001e000

00026228 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   26228:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   2622a:	f004 f914 	bl	2a456 <nrf52_errata_136>
   2622e:	b140      	cbz	r0, 26242 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   26230:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26234:	2200      	movs	r2, #0
   26236:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   2623a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   2623e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   26242:	f004 f908 	bl	2a456 <nrf52_errata_136>
   26246:	2800      	cmp	r0, #0
   26248:	d046      	beq.n	262d8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   2624a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   2624e:	4b60      	ldr	r3, [pc, #384]	; (263d0 <SystemInit+0x1a8>)
   26250:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   26254:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   26258:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   2625c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   26260:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   26264:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   26268:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   2626c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   26270:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   26274:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   26278:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   2627c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   26280:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   26284:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   26288:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   2628c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   26290:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   26294:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   26298:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   2629c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   262a0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   262a4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   262a8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   262ac:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   262b0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   262b4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   262b8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   262bc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   262c0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   262c4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   262c8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   262cc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   262d0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   262d4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   262d8:	f7ff ff8c 	bl	261f4 <nrf52_errata_103>
   262dc:	b118      	cbz	r0, 262e6 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   262de:	4b3d      	ldr	r3, [pc, #244]	; (263d4 <SystemInit+0x1ac>)
   262e0:	4a3d      	ldr	r2, [pc, #244]	; (263d8 <SystemInit+0x1b0>)
   262e2:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   262e6:	f7ff ff85 	bl	261f4 <nrf52_errata_103>
   262ea:	b118      	cbz	r0, 262f4 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   262ec:	4b3b      	ldr	r3, [pc, #236]	; (263dc <SystemInit+0x1b4>)
   262ee:	22fb      	movs	r2, #251	; 0xfb
   262f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   262f4:	f7ff ff7e 	bl	261f4 <nrf52_errata_103>
   262f8:	b170      	cbz	r0, 26318 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   262fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   262fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26302:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   26306:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   2630a:	f022 020f 	bic.w	r2, r2, #15
   2630e:	f003 030f 	and.w	r3, r3, #15
   26312:	4313      	orrs	r3, r2
   26314:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   26318:	f7ff ff6c 	bl	261f4 <nrf52_errata_103>
   2631c:	b120      	cbz	r0, 26328 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   2631e:	4b30      	ldr	r3, [pc, #192]	; (263e0 <SystemInit+0x1b8>)
   26320:	f44f 7200 	mov.w	r2, #512	; 0x200
   26324:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   26328:	f004 f895 	bl	2a456 <nrf52_errata_136>
   2632c:	b148      	cbz	r0, 26342 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   2632e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26332:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   26336:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   26338:	bf44      	itt	mi
   2633a:	f06f 0201 	mvnmi.w	r2, #1
   2633e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   26342:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   26346:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   2634a:	2a08      	cmp	r2, #8
   2634c:	d10e      	bne.n	2636c <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   2634e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   26352:	2b05      	cmp	r3, #5
   26354:	d802      	bhi.n	2635c <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   26356:	4a23      	ldr	r2, [pc, #140]	; (263e4 <SystemInit+0x1bc>)
   26358:	5cd3      	ldrb	r3, [r2, r3]
   2635a:	b13b      	cbz	r3, 2636c <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   2635c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26360:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   26364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26368:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2636c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26370:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   26374:	2a00      	cmp	r2, #0
   26376:	db03      	blt.n	26380 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   26378:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   2637c:	2b00      	cmp	r3, #0
   2637e:	da22      	bge.n	263c6 <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   26380:	4919      	ldr	r1, [pc, #100]	; (263e8 <SystemInit+0x1c0>)
   26382:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   26384:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   26388:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   2638c:	2412      	movs	r4, #18
    nvmc_wait();
   2638e:	f7ff ff43 	bl	26218 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   26392:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   26396:	f7ff ff3f 	bl	26218 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   2639a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   2639e:	f7ff ff3b 	bl	26218 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   263a2:	2300      	movs	r3, #0
   263a4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   263a8:	f7ff ff36 	bl	26218 <nvmc_wait>
   263ac:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   263b0:	490e      	ldr	r1, [pc, #56]	; (263ec <SystemInit+0x1c4>)
   263b2:	4b0f      	ldr	r3, [pc, #60]	; (263f0 <SystemInit+0x1c8>)
   263b4:	68ca      	ldr	r2, [r1, #12]
   263b6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   263ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   263bc:	60cb      	str	r3, [r1, #12]
   263be:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   263c2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   263c4:	e7fd      	b.n	263c2 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   263c6:	4b0b      	ldr	r3, [pc, #44]	; (263f4 <SystemInit+0x1cc>)
   263c8:	4a0b      	ldr	r2, [pc, #44]	; (263f8 <SystemInit+0x1d0>)
   263ca:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   263cc:	bd10      	pop	{r4, pc}
   263ce:	bf00      	nop
   263d0:	4000c000 	.word	0x4000c000
   263d4:	40005000 	.word	0x40005000
   263d8:	00038148 	.word	0x00038148
   263dc:	4000f000 	.word	0x4000f000
   263e0:	40029000 	.word	0x40029000
   263e4:	0002de3d 	.word	0x0002de3d
   263e8:	4001e000 	.word	0x4001e000
   263ec:	e000ed00 	.word	0xe000ed00
   263f0:	05fa0004 	.word	0x05fa0004
   263f4:	20000550 	.word	0x20000550
   263f8:	03d09000 	.word	0x03d09000

000263fc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   263fc:	4b04      	ldr	r3, [pc, #16]	; (26410 <nrfx_clock_init+0x14>)
   263fe:	791a      	ldrb	r2, [r3, #4]
   26400:	b922      	cbnz	r2, 2640c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   26402:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   26404:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   26406:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   26408:	4802      	ldr	r0, [pc, #8]	; (26414 <nrfx_clock_init+0x18>)
   2640a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   2640c:	4802      	ldr	r0, [pc, #8]	; (26418 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2640e:	4770      	bx	lr
   26410:	200024cc 	.word	0x200024cc
   26414:	0bad0000 	.word	0x0bad0000
   26418:	0bad000c 	.word	0x0bad000c

0002641c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   2641c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   2641e:	b110      	cbz	r0, 26426 <nrfx_clock_stop+0xa>
   26420:	2801      	cmp	r0, #1
   26422:	d017      	beq.n	26454 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   26424:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   26426:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   2642a:	2302      	movs	r3, #2
   2642c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26430:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   26434:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26438:	2301      	movs	r3, #1
   2643a:	60e3      	str	r3, [r4, #12]
   2643c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   26440:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   26444:	03db      	lsls	r3, r3, #15
   26446:	d5ed      	bpl.n	26424 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   26448:	2001      	movs	r0, #1
   2644a:	f004 f80e 	bl	2a46a <nrfx_busy_wait>
   2644e:	3d01      	subs	r5, #1
   26450:	d1f6      	bne.n	26440 <nrfx_clock_stop+0x24>
   26452:	e7e7      	b.n	26424 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   26454:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26458:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   2645a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2645e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   26462:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26466:	6060      	str	r0, [r4, #4]
   26468:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2646c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   26470:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   26474:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   26476:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   2647a:	d505      	bpl.n	26488 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   2647c:	b123      	cbz	r3, 26488 <nrfx_clock_stop+0x6c>
   2647e:	2001      	movs	r0, #1
   26480:	f003 fff3 	bl	2a46a <nrfx_busy_wait>
   26484:	3d01      	subs	r5, #1
   26486:	d1f1      	bne.n	2646c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   26488:	4b01      	ldr	r3, [pc, #4]	; (26490 <nrfx_clock_stop+0x74>)
   2648a:	2200      	movs	r2, #0
   2648c:	715a      	strb	r2, [r3, #5]
   2648e:	e7c9      	b.n	26424 <nrfx_clock_stop+0x8>
   26490:	200024cc 	.word	0x200024cc

00026494 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   26494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   26498:	b510      	push	{r4, lr}
   2649a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   2649e:	b16a      	cbz	r2, 264bc <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   264a0:	2200      	movs	r2, #0
   264a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   264a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   264aa:	2201      	movs	r2, #1
   264ac:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   264b0:	4b11      	ldr	r3, [pc, #68]	; (264f8 <nrfx_power_clock_irq_handler+0x64>)
   264b2:	7958      	ldrb	r0, [r3, #5]
   264b4:	b910      	cbnz	r0, 264bc <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   264b6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   264b8:	681b      	ldr	r3, [r3, #0]
   264ba:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   264bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   264c0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   264c4:	b172      	cbz	r2, 264e4 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   264c6:	2200      	movs	r2, #0
   264c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   264cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   264d0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   264d4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   264d8:	0792      	lsls	r2, r2, #30
   264da:	d104      	bne.n	264e6 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   264dc:	2201      	movs	r2, #1
   264de:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   264e2:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   264e4:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   264e6:	2202      	movs	r2, #2
   264e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   264ec:	4b02      	ldr	r3, [pc, #8]	; (264f8 <nrfx_power_clock_irq_handler+0x64>)
}
   264ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   264f2:	681b      	ldr	r3, [r3, #0]
   264f4:	2001      	movs	r0, #1
   264f6:	4718      	bx	r3
   264f8:	200024cc 	.word	0x200024cc

000264fc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   264fc:	2301      	movs	r3, #1
   264fe:	fa03 f000 	lsl.w	r0, r3, r0
   26502:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   26504:	b193      	cbz	r3, 2652c <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   26506:	f04f 0320 	mov.w	r3, #32
   2650a:	f3ef 8111 	mrs	r1, BASEPRI
   2650e:	f383 8811 	msr	BASEPRI, r3
   26512:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   26516:	4a06      	ldr	r2, [pc, #24]	; (26530 <nrfx_gpiote_channel_free+0x34>)
   26518:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   2651a:	ea23 0000 	bic.w	r0, r3, r0
   2651e:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   26520:	f381 8811 	msr	BASEPRI, r1
   26524:	f3bf 8f6f 	isb	sy
   26528:	4802      	ldr	r0, [pc, #8]	; (26534 <nrfx_gpiote_channel_free+0x38>)
   2652a:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   2652c:	4802      	ldr	r0, [pc, #8]	; (26538 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2652e:	4770      	bx	lr
   26530:	200024d4 	.word	0x200024d4
   26534:	0bad0000 	.word	0x0bad0000
   26538:	0bad0004 	.word	0x0bad0004

0002653c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   2653c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26540:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   26542:	f8df e05c 	ldr.w	lr, [pc, #92]	; 265a0 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   26546:	4817      	ldr	r0, [pc, #92]	; (265a4 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   26548:	f8df 805c 	ldr.w	r8, [pc, #92]	; 265a8 <nrfx_gpiote_channel_alloc+0x6c>
{
   2654c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   2654e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   26550:	2601      	movs	r6, #1
   26552:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   26554:	f04f 0120 	mov.w	r1, #32
   26558:	f3ef 8c11 	mrs	ip, BASEPRI
   2655c:	f381 8811 	msr	BASEPRI, r1
   26560:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   26564:	fa22 f103 	lsr.w	r1, r2, r3
   26568:	07c9      	lsls	r1, r1, #31
   2656a:	d50a      	bpl.n	26582 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   2656c:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   26570:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   26574:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   26576:	bf01      	itttt	eq
   26578:	4339      	orreq	r1, r7
   2657a:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   2657e:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   26580:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   26582:	f38c 8811 	msr	BASEPRI, ip
   26586:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   2658a:	4540      	cmp	r0, r8
   2658c:	d005      	beq.n	2659a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   2658e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   26592:	439a      	bics	r2, r3
   26594:	f104 0401 	add.w	r4, r4, #1
   26598:	d1db      	bne.n	26552 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   2659a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2659e:	bf00      	nop
   265a0:	200024d4 	.word	0x200024d4
   265a4:	0bad0002 	.word	0x0bad0002
   265a8:	0bad0000 	.word	0x0bad0000

000265ac <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   265ac:	4b0e      	ldr	r3, [pc, #56]	; (265e8 <z_sys_init_run_level+0x3c>)
{
   265ae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   265b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   265b4:	3001      	adds	r0, #1
   265b6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   265ba:	42a6      	cmp	r6, r4
   265bc:	d800      	bhi.n	265c0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   265be:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   265c0:	e9d4 3500 	ldrd	r3, r5, [r4]
   265c4:	4628      	mov	r0, r5
   265c6:	4798      	blx	r3
		if (dev != NULL) {
   265c8:	b165      	cbz	r5, 265e4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   265ca:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   265cc:	b130      	cbz	r0, 265dc <z_sys_init_run_level+0x30>
				if (rc < 0) {
   265ce:	2800      	cmp	r0, #0
   265d0:	bfb8      	it	lt
   265d2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   265d4:	28ff      	cmp	r0, #255	; 0xff
   265d6:	bfa8      	it	ge
   265d8:	20ff      	movge	r0, #255	; 0xff
   265da:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   265dc:	785a      	ldrb	r2, [r3, #1]
   265de:	f042 0201 	orr.w	r2, r2, #1
   265e2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   265e4:	3408      	adds	r4, #8
   265e6:	e7e8      	b.n	265ba <z_sys_init_run_level+0xe>
   265e8:	0002c7e4 	.word	0x0002c7e4

000265ec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   265ec:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   265ee:	4605      	mov	r5, r0
   265f0:	b910      	cbnz	r0, 265f8 <z_impl_device_get_binding+0xc>
		return NULL;
   265f2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   265f4:	4620      	mov	r0, r4
   265f6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   265f8:	7803      	ldrb	r3, [r0, #0]
   265fa:	2b00      	cmp	r3, #0
   265fc:	d0f9      	beq.n	265f2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   265fe:	4c0e      	ldr	r4, [pc, #56]	; (26638 <z_impl_device_get_binding+0x4c>)
   26600:	4e0e      	ldr	r6, [pc, #56]	; (2663c <z_impl_device_get_binding+0x50>)
   26602:	42b4      	cmp	r4, r6
   26604:	d108      	bne.n	26618 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   26606:	4c0c      	ldr	r4, [pc, #48]	; (26638 <z_impl_device_get_binding+0x4c>)
   26608:	42b4      	cmp	r4, r6
   2660a:	d0f2      	beq.n	265f2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2660c:	4620      	mov	r0, r4
   2660e:	f003 ff65 	bl	2a4dc <z_device_ready>
   26612:	b950      	cbnz	r0, 2662a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   26614:	3418      	adds	r4, #24
   26616:	e7f7      	b.n	26608 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   26618:	4620      	mov	r0, r4
   2661a:	f003 ff5f 	bl	2a4dc <z_device_ready>
   2661e:	b110      	cbz	r0, 26626 <z_impl_device_get_binding+0x3a>
   26620:	6823      	ldr	r3, [r4, #0]
   26622:	42ab      	cmp	r3, r5
   26624:	d0e6      	beq.n	265f4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   26626:	3418      	adds	r4, #24
   26628:	e7eb      	b.n	26602 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2662a:	6821      	ldr	r1, [r4, #0]
   2662c:	4628      	mov	r0, r5
   2662e:	f002 fad5 	bl	28bdc <strcmp>
   26632:	2800      	cmp	r0, #0
   26634:	d1ee      	bne.n	26614 <z_impl_device_get_binding+0x28>
   26636:	e7dd      	b.n	265f4 <z_impl_device_get_binding+0x8>
   26638:	20000600 	.word	0x20000600
   2663c:	20000690 	.word	0x20000690

00026640 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   26640:	b510      	push	{r4, lr}
   26642:	4604      	mov	r4, r0
	z_impl_log_panic();
   26644:	f7eb fe5e 	bl	12304 <z_impl_log_panic>
   26648:	4b06      	ldr	r3, [pc, #24]	; (26664 <k_sys_fatal_error_handler+0x24>)
   2664a:	4907      	ldr	r1, [pc, #28]	; (26668 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   2664c:	4807      	ldr	r0, [pc, #28]	; (2666c <k_sys_fatal_error_handler+0x2c>)
   2664e:	1ac9      	subs	r1, r1, r3
   26650:	08c9      	lsrs	r1, r1, #3
   26652:	0189      	lsls	r1, r1, #6
   26654:	f041 0101 	orr.w	r1, r1, #1
   26658:	f001 feb2 	bl	283c0 <log_0>
	arch_system_halt(reason);
   2665c:	4620      	mov	r0, r4
   2665e:	f003 ff47 	bl	2a4f0 <arch_system_halt>
   26662:	bf00      	nop
   26664:	0002b248 	.word	0x0002b248
   26668:	0002b370 	.word	0x0002b370
   2666c:	0002de49 	.word	0x0002de49

00026670 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   26670:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26674:	4606      	mov	r6, r0
   26676:	460f      	mov	r7, r1
	__asm__ volatile(
   26678:	f04f 0320 	mov.w	r3, #32
   2667c:	f3ef 8811 	mrs	r8, BASEPRI
   26680:	f383 8811 	msr	BASEPRI, r3
   26684:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   26688:	f000 ff0e 	bl	274a8 <z_impl_k_current_get>
   2668c:	4c1f      	ldr	r4, [pc, #124]	; (2670c <z_fatal_error+0x9c>)
   2668e:	4b20      	ldr	r3, [pc, #128]	; (26710 <z_fatal_error+0xa0>)
   26690:	1ae4      	subs	r4, r4, r3
   26692:	2e04      	cmp	r6, #4
   26694:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   26698:	bf96      	itet	ls
   2669a:	4a1e      	ldrls	r2, [pc, #120]	; (26714 <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   2669c:	4a1e      	ldrhi	r2, [pc, #120]	; (26718 <z_fatal_error+0xa8>)
   2669e:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   266a2:	01a4      	lsls	r4, r4, #6
   266a4:	f044 0301 	orr.w	r3, r4, #1
   266a8:	4605      	mov	r5, r0
   266aa:	f8ad 3000 	strh.w	r3, [sp]
   266ae:	481b      	ldr	r0, [pc, #108]	; (2671c <z_fatal_error+0xac>)
   266b0:	2300      	movs	r3, #0
   266b2:	4631      	mov	r1, r6
   266b4:	f001 febe 	bl	28434 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   266b8:	b147      	cbz	r7, 266cc <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   266ba:	69fb      	ldr	r3, [r7, #28]
   266bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
   266c0:	b123      	cbz	r3, 266cc <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   266c2:	4817      	ldr	r0, [pc, #92]	; (26720 <z_fatal_error+0xb0>)
   266c4:	f044 0101 	orr.w	r1, r4, #1
   266c8:	f001 fe7a 	bl	283c0 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   266cc:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   266d0:	b12d      	cbz	r5, 266de <z_fatal_error+0x6e>
   266d2:	4628      	mov	r0, r5
   266d4:	f003 ffc8 	bl	2a668 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   266d8:	b108      	cbz	r0, 266de <z_fatal_error+0x6e>
   266da:	7803      	ldrb	r3, [r0, #0]
   266dc:	b903      	cbnz	r3, 266e0 <z_fatal_error+0x70>
		thread_name = "unknown";
   266de:	4811      	ldr	r0, [pc, #68]	; (26724 <z_fatal_error+0xb4>)
   266e0:	f7eb fc96 	bl	12010 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   266e4:	4623      	mov	r3, r4
   266e6:	4602      	mov	r2, r0
   266e8:	4629      	mov	r1, r5
   266ea:	480f      	ldr	r0, [pc, #60]	; (26728 <z_fatal_error+0xb8>)
   266ec:	f001 fe89 	bl	28402 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   266f0:	4639      	mov	r1, r7
   266f2:	4630      	mov	r0, r6
   266f4:	f7ff ffa4 	bl	26640 <k_sys_fatal_error_handler>
	__asm__ volatile(
   266f8:	f388 8811 	msr	BASEPRI, r8
   266fc:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   26700:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   26702:	b002      	add	sp, #8
   26704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26708:	f7ec be88 	b.w	1341c <z_impl_k_thread_abort>
   2670c:	0002b370 	.word	0x0002b370
   26710:	0002b248 	.word	0x0002b248
   26714:	0002c7fc 	.word	0x0002c7fc
   26718:	0002de58 	.word	0x0002de58
   2671c:	0002de66 	.word	0x0002de66
   26720:	0002de8e 	.word	0x0002de8e
   26724:	0002d034 	.word	0x0002d034
   26728:	0002deaf 	.word	0x0002deaf

0002672c <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2672c:	4802      	ldr	r0, [pc, #8]	; (26738 <z_bss_zero+0xc>)
   2672e:	4a03      	ldr	r2, [pc, #12]	; (2673c <z_bss_zero+0x10>)
   26730:	2100      	movs	r1, #0
   26732:	1a12      	subs	r2, r2, r0
   26734:	f002 ba9a 	b.w	28c6c <memset>
   26738:	20000838 	.word	0x20000838
   2673c:	20002644 	.word	0x20002644

00026740 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   26740:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   26742:	4b0a      	ldr	r3, [pc, #40]	; (2676c <bg_thread_main+0x2c>)
   26744:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   26746:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   26748:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2674a:	f7ff ff2f 	bl	265ac <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   2674e:	f004 fc5e 	bl	2b00e <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   26752:	2003      	movs	r0, #3
   26754:	f7ff ff2a 	bl	265ac <z_sys_init_run_level>

	z_init_static_threads();
   26758:	f000 f956 	bl	26a08 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   2675c:	f7ea fe48 	bl	113f0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   26760:	4a03      	ldr	r2, [pc, #12]	; (26770 <bg_thread_main+0x30>)
   26762:	7b13      	ldrb	r3, [r2, #12]
   26764:	f023 0301 	bic.w	r3, r3, #1
   26768:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2676a:	bd08      	pop	{r3, pc}
   2676c:	20002643 	.word	0x20002643
   26770:	20001060 	.word	0x20001060

00026774 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   26774:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   26778:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   2677a:	f7eb fb8f 	bl	11e9c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   2677e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 26860 <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   26782:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   26786:	4d37      	ldr	r5, [pc, #220]	; (26864 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
   26788:	4e37      	ldr	r6, [pc, #220]	; (26868 <z_cstart+0xf4>)
   2678a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   2678c:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 2686c <z_cstart+0xf8>
	z_setup_new_thread(thread, stack,
   26790:	4f37      	ldr	r7, [pc, #220]	; (26870 <z_cstart+0xfc>)
   26792:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26796:	2400      	movs	r4, #0
   26798:	616b      	str	r3, [r5, #20]
   2679a:	23e0      	movs	r3, #224	; 0xe0
   2679c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   267a0:	77ec      	strb	r4, [r5, #31]
   267a2:	762c      	strb	r4, [r5, #24]
   267a4:	766c      	strb	r4, [r5, #25]
   267a6:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   267a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   267aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   267ae:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   267b0:	f7ec fe12 	bl	133d8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   267b4:	f7ec fb3c 	bl	12e30 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   267b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   267bc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   267be:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   267c0:	f7ec fef2 	bl	135a8 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   267c4:	4d2b      	ldr	r5, [pc, #172]	; (26874 <z_cstart+0x100>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   267c6:	f7ec fe3b 	bl	13440 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   267ca:	f240 1301 	movw	r3, #257	; 0x101
   267ce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   267d2:	ab06      	add	r3, sp, #24
   267d4:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   267d6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   267da:	f003 fe7e 	bl	2a4da <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   267de:	4620      	mov	r0, r4
   267e0:	f7ff fee4 	bl	265ac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   267e4:	2001      	movs	r0, #1
   267e6:	f7ff fee1 	bl	265ac <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   267ea:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   267ee:	f000 fdb9 	bl	27364 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   267f2:	4b21      	ldr	r3, [pc, #132]	; (26878 <z_cstart+0x104>)
	_kernel.ready_q.cache = &z_main_thread;
   267f4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   267f6:	4921      	ldr	r1, [pc, #132]	; (2687c <z_cstart+0x108>)
   267f8:	9305      	str	r3, [sp, #20]
   267fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   267fe:	4653      	mov	r3, sl
   26800:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   26804:	e9cd 4401 	strd	r4, r4, [sp, #4]
   26808:	9400      	str	r4, [sp, #0]
   2680a:	4630      	mov	r0, r6
   2680c:	f000 f89e 	bl	2694c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   26810:	7b73      	ldrb	r3, [r6, #13]
   26812:	4680      	mov	r8, r0
   26814:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   26818:	4630      	mov	r0, r6
   2681a:	7373      	strb	r3, [r6, #13]
   2681c:	f004 f977 	bl	2ab0e <z_ready_thread>
	z_setup_new_thread(thread, stack,
   26820:	230f      	movs	r3, #15
   26822:	e9cd 4302 	strd	r4, r3, [sp, #8]
   26826:	4916      	ldr	r1, [pc, #88]	; (26880 <z_cstart+0x10c>)
   26828:	4b16      	ldr	r3, [pc, #88]	; (26884 <z_cstart+0x110>)
   2682a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2682e:	e9cd b404 	strd	fp, r4, [sp, #16]
   26832:	e9cd 5400 	strd	r5, r4, [sp]
   26836:	4638      	mov	r0, r7
   26838:	f000 f888 	bl	2694c <z_setup_new_thread>
   2683c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2683e:	60ef      	str	r7, [r5, #12]
   26840:	f023 0304 	bic.w	r3, r3, #4
   26844:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   26846:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   2684a:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   2684e:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   26850:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   26854:	4652      	mov	r2, sl
   26856:	4641      	mov	r1, r8
   26858:	4630      	mov	r0, r6
   2685a:	f7ec fad3 	bl	12e04 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2685e:	bf00      	nop
   26860:	20003fc0 	.word	0x20003fc0
   26864:	e000ed00 	.word	0xe000ed00
   26868:	20001060 	.word	0x20001060
   2686c:	00026741 	.word	0x00026741
   26870:	20000fe0 	.word	0x20000fe0
   26874:	20002534 	.word	0x20002534
   26878:	0002df11 	.word	0x0002df11
   2687c:	20003220 	.word	0x20003220
   26880:	20003640 	.word	0x20003640
   26884:	00026ac1 	.word	0x00026ac1

00026888 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   26888:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   2688a:	4c06      	ldr	r4, [pc, #24]	; (268a4 <statics_init+0x1c>)
   2688c:	4d06      	ldr	r5, [pc, #24]	; (268a8 <statics_init+0x20>)
   2688e:	42ac      	cmp	r4, r5
   26890:	d301      	bcc.n	26896 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   26892:	2000      	movs	r0, #0
   26894:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   26896:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   2689a:	4620      	mov	r0, r4
   2689c:	f003 fe31 	bl	2a502 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   268a0:	3414      	adds	r4, #20
   268a2:	e7f4      	b.n	2688e <statics_init+0x6>
   268a4:	200006e4 	.word	0x200006e4
   268a8:	200006e4 	.word	0x200006e4

000268ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   268ac:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   268ae:	4b0e      	ldr	r3, [pc, #56]	; (268e8 <init_mem_slab_module+0x3c>)
   268b0:	4c0e      	ldr	r4, [pc, #56]	; (268ec <init_mem_slab_module+0x40>)
   268b2:	42a3      	cmp	r3, r4
   268b4:	d301      	bcc.n	268ba <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   268b6:	2000      	movs	r0, #0
	return rc;
}
   268b8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   268ba:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   268be:	ea41 0200 	orr.w	r2, r1, r0
   268c2:	f012 0203 	ands.w	r2, r2, #3
   268c6:	d10b      	bne.n	268e0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   268c8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   268ca:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   268cc:	42aa      	cmp	r2, r5
   268ce:	d101      	bne.n	268d4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   268d0:	331c      	adds	r3, #28
   268d2:	e7ee      	b.n	268b2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   268d4:	695e      	ldr	r6, [r3, #20]
   268d6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   268d8:	3201      	adds	r2, #1
		slab->free_list = p;
   268da:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   268dc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   268de:	e7f5      	b.n	268cc <init_mem_slab_module+0x20>
	return rc;
   268e0:	f06f 0015 	mvn.w	r0, #21
   268e4:	e7e8      	b.n	268b8 <init_mem_slab_module+0xc>
   268e6:	bf00      	nop
   268e8:	20000690 	.word	0x20000690
   268ec:	200006e4 	.word	0x200006e4

000268f0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   268f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   268f2:	460c      	mov	r4, r1
	__asm__ volatile(
   268f4:	f04f 0520 	mov.w	r5, #32
   268f8:	f3ef 8111 	mrs	r1, BASEPRI
   268fc:	f385 8811 	msr	BASEPRI, r5
   26900:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   26904:	6945      	ldr	r5, [r0, #20]
   26906:	b15d      	cbz	r5, 26920 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   26908:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   2690a:	682b      	ldr	r3, [r5, #0]
   2690c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2690e:	6983      	ldr	r3, [r0, #24]
   26910:	3301      	adds	r3, #1
   26912:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   26914:	2000      	movs	r0, #0
	__asm__ volatile(
   26916:	f381 8811 	msr	BASEPRI, r1
   2691a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   2691e:	e011      	b.n	26944 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   26920:	ea52 0c03 	orrs.w	ip, r2, r3
   26924:	d103      	bne.n	2692e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   26926:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   26928:	f06f 000b 	mvn.w	r0, #11
   2692c:	e7f3      	b.n	26916 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   2692e:	e9cd 2300 	strd	r2, r3, [sp]
   26932:	4602      	mov	r2, r0
   26934:	3008      	adds	r0, #8
   26936:	f000 fbe5 	bl	27104 <z_pend_curr>
		if (result == 0) {
   2693a:	b918      	cbnz	r0, 26944 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   2693c:	4b02      	ldr	r3, [pc, #8]	; (26948 <k_mem_slab_alloc+0x58>)
   2693e:	689b      	ldr	r3, [r3, #8]
   26940:	695b      	ldr	r3, [r3, #20]
   26942:	6023      	str	r3, [r4, #0]
}
   26944:	b003      	add	sp, #12
   26946:	bd30      	pop	{r4, r5, pc}
   26948:	20002534 	.word	0x20002534

0002694c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   2694c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   26950:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   26952:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   26954:	2604      	movs	r6, #4
   26956:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   26958:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   2695a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   2695c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   26960:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   26962:	1dd6      	adds	r6, r2, #7
   26964:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26968:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   2696a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2696c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   26970:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   26972:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   26976:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   2697a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   2697c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   2697e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   26980:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26984:	9202      	str	r2, [sp, #8]
   26986:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   26988:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2698a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2698c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2698e:	9200      	str	r2, [sp, #0]
   26990:	4642      	mov	r2, r8
{
   26992:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   26994:	f7ec fa04 	bl	12da0 <arch_new_thread>
	if (!_current) {
   26998:	4b04      	ldr	r3, [pc, #16]	; (269ac <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   2699a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   2699c:	689b      	ldr	r3, [r3, #8]
   2699e:	b103      	cbz	r3, 269a2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   269a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   269a2:	6763      	str	r3, [r4, #116]	; 0x74
}
   269a4:	4640      	mov	r0, r8
   269a6:	b004      	add	sp, #16
   269a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   269ac:	20002534 	.word	0x20002534

000269b0 <z_impl_k_thread_create>:
{
   269b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   269b2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   269b4:	2700      	movs	r7, #0
   269b6:	9705      	str	r7, [sp, #20]
   269b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   269ba:	9704      	str	r7, [sp, #16]
   269bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   269be:	9703      	str	r7, [sp, #12]
   269c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   269c2:	9702      	str	r7, [sp, #8]
{
   269c4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   269c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   269ca:	9701      	str	r7, [sp, #4]
   269cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   269ce:	9700      	str	r7, [sp, #0]
{
   269d0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   269d2:	f7ff ffbb 	bl	2694c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   269d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   269da:	bf08      	it	eq
   269dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   269e0:	d005      	beq.n	269ee <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   269e2:	ea55 0306 	orrs.w	r3, r5, r6
   269e6:	d105      	bne.n	269f4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   269e8:	4620      	mov	r0, r4
   269ea:	f000 fc9d 	bl	27328 <z_sched_start>
}
   269ee:	4620      	mov	r0, r4
   269f0:	b007      	add	sp, #28
   269f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   269f4:	4903      	ldr	r1, [pc, #12]	; (26a04 <z_impl_k_thread_create+0x54>)
   269f6:	4632      	mov	r2, r6
   269f8:	462b      	mov	r3, r5
   269fa:	f104 0018 	add.w	r0, r4, #24
   269fe:	f000 fe33 	bl	27668 <z_add_timeout>
   26a02:	e7f4      	b.n	269ee <z_impl_k_thread_create+0x3e>
   26a04:	0002ab2f 	.word	0x0002ab2f

00026a08 <z_init_static_threads>:
{
   26a08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26a0c:	4c29      	ldr	r4, [pc, #164]	; (26ab4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   26a0e:	4d2a      	ldr	r5, [pc, #168]	; (26ab8 <z_init_static_threads+0xb0>)
{
   26a10:	b087      	sub	sp, #28
   26a12:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   26a14:	42ae      	cmp	r6, r5
   26a16:	f104 0430 	add.w	r4, r4, #48	; 0x30
   26a1a:	d30f      	bcc.n	26a3c <z_init_static_threads+0x34>
	k_sched_lock();
   26a1c:	f000 fb00 	bl	27020 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   26a20:	4c24      	ldr	r4, [pc, #144]	; (26ab4 <z_init_static_threads+0xac>)
   26a22:	f8df 9098 	ldr.w	r9, [pc, #152]	; 26abc <z_init_static_threads+0xb4>
   26a26:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   26a2a:	f240 37e7 	movw	r7, #999	; 0x3e7
   26a2e:	42ac      	cmp	r4, r5
   26a30:	d320      	bcc.n	26a74 <z_init_static_threads+0x6c>
}
   26a32:	b007      	add	sp, #28
   26a34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   26a38:	f000 bbaa 	b.w	27190 <k_sched_unlock>
		z_setup_new_thread(
   26a3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   26a40:	9305      	str	r3, [sp, #20]
   26a42:	f854 3c10 	ldr.w	r3, [r4, #-16]
   26a46:	9304      	str	r3, [sp, #16]
   26a48:	f854 3c14 	ldr.w	r3, [r4, #-20]
   26a4c:	9303      	str	r3, [sp, #12]
   26a4e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   26a52:	9302      	str	r3, [sp, #8]
   26a54:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   26a58:	9301      	str	r3, [sp, #4]
   26a5a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   26a5e:	9300      	str	r3, [sp, #0]
   26a60:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   26a64:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   26a68:	f7ff ff70 	bl	2694c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   26a6c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   26a70:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   26a72:	e7ce      	b.n	26a12 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   26a74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   26a76:	1c5a      	adds	r2, r3, #1
   26a78:	d00d      	beq.n	26a96 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   26a7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   26a7e:	2100      	movs	r1, #0
   26a80:	4638      	mov	r0, r7
   26a82:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26a86:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   26a8a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26a8e:	d104      	bne.n	26a9a <z_init_static_threads+0x92>
	z_sched_start(thread);
   26a90:	4640      	mov	r0, r8
   26a92:	f000 fc49 	bl	27328 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   26a96:	3430      	adds	r4, #48	; 0x30
   26a98:	e7c9      	b.n	26a2e <z_init_static_threads+0x26>
   26a9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26a9e:	2300      	movs	r3, #0
   26aa0:	f7e9 fb2e 	bl	10100 <__aeabi_uldivmod>
   26aa4:	4602      	mov	r2, r0
   26aa6:	460b      	mov	r3, r1
   26aa8:	f108 0018 	add.w	r0, r8, #24
   26aac:	4649      	mov	r1, r9
   26aae:	f000 fddb 	bl	27668 <z_add_timeout>
   26ab2:	e7f0      	b.n	26a96 <z_init_static_threads+0x8e>
   26ab4:	20000690 	.word	0x20000690
   26ab8:	20000690 	.word	0x20000690
   26abc:	0002ab2f 	.word	0x0002ab2f

00026ac0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   26ac0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   26ac2:	4c09      	ldr	r4, [pc, #36]	; (26ae8 <idle+0x28>)
	__asm__ volatile(
   26ac4:	f04f 0220 	mov.w	r2, #32
   26ac8:	f3ef 8311 	mrs	r3, BASEPRI
   26acc:	f382 8811 	msr	BASEPRI, r2
   26ad0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   26ad4:	f004 f8bd 	bl	2ac52 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   26ad8:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   26ada:	f7eb fd71 	bl	125c0 <pm_system_suspend>
   26ade:	2800      	cmp	r0, #0
   26ae0:	d1f0      	bne.n	26ac4 <idle+0x4>
	arch_cpu_idle();
   26ae2:	f7ec f9ab 	bl	12e3c <arch_cpu_idle>
}
   26ae6:	e7ed      	b.n	26ac4 <idle+0x4>
   26ae8:	20002534 	.word	0x20002534

00026aec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   26aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   26aee:	4611      	mov	r1, r2
   26af0:	f04f 0220 	mov.w	r2, #32
   26af4:	f3ef 8511 	mrs	r5, BASEPRI
   26af8:	f382 8811 	msr	BASEPRI, r2
   26afc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   26b00:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   26b02:	b19c      	cbz	r4, 26b2c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26b04:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   26b06:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26b08:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   26b0c:	4294      	cmp	r4, r2
	list->head = node;
   26b0e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   26b10:	bf08      	it	eq
   26b12:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   26b14:	2101      	movs	r1, #1
   26b16:	4620      	mov	r0, r4
   26b18:	f003 fe15 	bl	2a746 <z_queue_node_peek>
   26b1c:	4604      	mov	r4, r0
	__asm__ volatile(
   26b1e:	f385 8811 	msr	BASEPRI, r5
   26b22:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   26b26:	4620      	mov	r0, r4
   26b28:	b003      	add	sp, #12
   26b2a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26b2c:	ea51 0203 	orrs.w	r2, r1, r3
   26b30:	d0f5      	beq.n	26b1e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26b32:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   26b36:	e9cd 1300 	strd	r1, r3, [sp]
   26b3a:	4610      	mov	r0, r2
   26b3c:	4629      	mov	r1, r5
   26b3e:	f000 fae1 	bl	27104 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   26b42:	2800      	cmp	r0, #0
   26b44:	d1ef      	bne.n	26b26 <z_impl_k_queue_get+0x3a>
   26b46:	4b02      	ldr	r3, [pc, #8]	; (26b50 <z_impl_k_queue_get+0x64>)
   26b48:	689b      	ldr	r3, [r3, #8]
   26b4a:	695c      	ldr	r4, [r3, #20]
   26b4c:	e7eb      	b.n	26b26 <z_impl_k_queue_get+0x3a>
   26b4e:	bf00      	nop
   26b50:	20002534 	.word	0x20002534

00026b54 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   26b54:	b538      	push	{r3, r4, r5, lr}
   26b56:	4604      	mov	r4, r0
	__asm__ volatile(
   26b58:	f04f 0320 	mov.w	r3, #32
   26b5c:	f3ef 8511 	mrs	r5, BASEPRI
   26b60:	f383 8811 	msr	BASEPRI, r3
   26b64:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   26b68:	f004 f818 	bl	2ab9c <z_unpend_first_thread>

	if (thread != NULL) {
   26b6c:	b148      	cbz	r0, 26b82 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   26b6e:	2200      	movs	r2, #0
   26b70:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   26b72:	f003 ffcc 	bl	2ab0e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   26b76:	4629      	mov	r1, r5
   26b78:	4808      	ldr	r0, [pc, #32]	; (26b9c <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   26b7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   26b7e:	f000 ba3d 	b.w	26ffc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   26b82:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   26b86:	429a      	cmp	r2, r3
   26b88:	bf18      	it	ne
   26b8a:	3301      	addne	r3, #1
   26b8c:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   26b8e:	2102      	movs	r1, #2
   26b90:	f104 0010 	add.w	r0, r4, #16
   26b94:	f004 fa26 	bl	2afe4 <z_handle_obj_poll_events>
}
   26b98:	e7ed      	b.n	26b76 <z_impl_k_sem_give+0x22>
   26b9a:	bf00      	nop
   26b9c:	20002644 	.word	0x20002644

00026ba0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   26ba0:	b513      	push	{r0, r1, r4, lr}
   26ba2:	f04f 0420 	mov.w	r4, #32
   26ba6:	f3ef 8111 	mrs	r1, BASEPRI
   26baa:	f384 8811 	msr	BASEPRI, r4
   26bae:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   26bb2:	6884      	ldr	r4, [r0, #8]
   26bb4:	b144      	cbz	r4, 26bc8 <z_impl_k_sem_take+0x28>
		sem->count--;
   26bb6:	3c01      	subs	r4, #1
   26bb8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   26bba:	f381 8811 	msr	BASEPRI, r1
   26bbe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   26bc2:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   26bc4:	b002      	add	sp, #8
   26bc6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   26bc8:	ea52 0403 	orrs.w	r4, r2, r3
   26bcc:	d106      	bne.n	26bdc <z_impl_k_sem_take+0x3c>
   26bce:	f381 8811 	msr	BASEPRI, r1
   26bd2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   26bd6:	f06f 000f 	mvn.w	r0, #15
   26bda:	e7f3      	b.n	26bc4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   26bdc:	e9cd 2300 	strd	r2, r3, [sp]
   26be0:	4602      	mov	r2, r0
   26be2:	4802      	ldr	r0, [pc, #8]	; (26bec <z_impl_k_sem_take+0x4c>)
   26be4:	f000 fa8e 	bl	27104 <z_pend_curr>
	return ret;
   26be8:	e7ec      	b.n	26bc4 <z_impl_k_sem_take+0x24>
   26bea:	bf00      	nop
   26bec:	20002644 	.word	0x20002644

00026bf0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   26bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   26bf2:	4b09      	ldr	r3, [pc, #36]	; (26c18 <k_sys_work_q_init+0x28>)
   26bf4:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   26bf6:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   26bf8:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   26bfa:	9300      	str	r3, [sp, #0]
   26bfc:	4907      	ldr	r1, [pc, #28]	; (26c1c <k_sys_work_q_init+0x2c>)
   26bfe:	4808      	ldr	r0, [pc, #32]	; (26c20 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   26c00:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   26c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
   26c0c:	f000 f914 	bl	26e38 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   26c10:	4620      	mov	r0, r4
   26c12:	b004      	add	sp, #16
   26c14:	bd10      	pop	{r4, pc}
   26c16:	bf00      	nop
   26c18:	0002df19 	.word	0x0002df19
   26c1c:	20003fc0 	.word	0x20003fc0
   26c20:	200010e0 	.word	0x200010e0

00026c24 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   26c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   26c28:	4e47      	ldr	r6, [pc, #284]	; (26d48 <work_queue_main+0x124>)
   26c2a:	b085      	sub	sp, #20
   26c2c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   26c2e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   26c32:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   26c36:	f04f 0320 	mov.w	r3, #32
   26c3a:	f3ef 8711 	mrs	r7, BASEPRI
   26c3e:	f383 8811 	msr	BASEPRI, r3
   26c42:	f3bf 8f6f 	isb	sy
   26c46:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   26c4a:	b98d      	cbnz	r5, 26c70 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   26c4c:	2102      	movs	r1, #2
   26c4e:	f104 0098 	add.w	r0, r4, #152	; 0x98
   26c52:	f003 fdf1 	bl	2a838 <flag_test_and_clear>
   26c56:	2800      	cmp	r0, #0
   26c58:	d135      	bne.n	26cc6 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   26c5a:	2300      	movs	r3, #0
   26c5c:	e9cd 8900 	strd	r8, r9, [sp]
   26c60:	9302      	str	r3, [sp, #8]
   26c62:	f104 0288 	add.w	r2, r4, #136	; 0x88
   26c66:	4639      	mov	r1, r7
   26c68:	4838      	ldr	r0, [pc, #224]	; (26d4c <work_queue_main+0x128>)
   26c6a:	f000 fc85 	bl	27578 <z_sched_wait>
			continue;
   26c6e:	e7e2      	b.n	26c36 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26c70:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   26c74:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   26c76:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26c7a:	4295      	cmp	r5, r2
   26c7c:	d101      	bne.n	26c82 <work_queue_main+0x5e>
	list->tail = node;
   26c7e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   26c82:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   26c86:	f043 0302 	orr.w	r3, r3, #2
   26c8a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   26c8e:	68eb      	ldr	r3, [r5, #12]
   26c90:	f023 0304 	bic.w	r3, r3, #4
   26c94:	f043 0301 	orr.w	r3, r3, #1
   26c98:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   26c9a:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   26c9c:	f387 8811 	msr	BASEPRI, r7
   26ca0:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   26ca4:	4628      	mov	r0, r5
   26ca6:	4798      	blx	r3
	__asm__ volatile(
   26ca8:	f04f 0320 	mov.w	r3, #32
   26cac:	f3ef 8b11 	mrs	fp, BASEPRI
   26cb0:	f383 8811 	msr	BASEPRI, r3
   26cb4:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   26cb8:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26cba:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   26cbc:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26cc0:	d40b      	bmi.n	26cda <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   26cc2:	60ea      	str	r2, [r5, #12]
   26cc4:	e00e      	b.n	26ce4 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   26cc6:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   26cca:	2200      	movs	r2, #0
   26ccc:	2101      	movs	r1, #1
   26cce:	4628      	mov	r0, r5
   26cd0:	f003 ff8c 	bl	2abec <z_sched_wake>
   26cd4:	2800      	cmp	r0, #0
   26cd6:	d1f8      	bne.n	26cca <work_queue_main+0xa6>
   26cd8:	e7bf      	b.n	26c5a <work_queue_main+0x36>
	return list->head;
   26cda:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   26cdc:	f023 0303 	bic.w	r3, r3, #3
   26ce0:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26ce2:	b970      	cbnz	r0, 26d02 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   26ce4:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   26ce8:	f023 0302 	bic.w	r3, r3, #2
   26cec:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   26cf0:	f38b 8811 	msr	BASEPRI, fp
   26cf4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   26cf8:	05d8      	lsls	r0, r3, #23
   26cfa:	d49c      	bmi.n	26c36 <work_queue_main+0x12>
	z_impl_k_yield();
   26cfc:	f000 fb3e 	bl	2737c <z_impl_k_yield>
}
   26d00:	e799      	b.n	26c36 <work_queue_main+0x12>
	return node->next;
   26d02:	2700      	movs	r7, #0
   26d04:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   26d08:	463b      	mov	r3, r7
		if (wc->work == work) {
   26d0a:	6842      	ldr	r2, [r0, #4]
   26d0c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   26d0e:	4601      	mov	r1, r0
		if (wc->work == work) {
   26d10:	d10c      	bne.n	26d2c <work_queue_main+0x108>
	return node->next;
   26d12:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   26d14:	b997      	cbnz	r7, 26d3c <work_queue_main+0x118>
   26d16:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   26d18:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   26d1a:	4282      	cmp	r2, r0
   26d1c:	d100      	bne.n	26d20 <work_queue_main+0xfc>
	list->tail = node;
   26d1e:	6071      	str	r1, [r6, #4]
	parent->next = child;
   26d20:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   26d24:	f7ff ff16 	bl	26b54 <z_impl_k_sem_give>
}
   26d28:	4639      	mov	r1, r7
   26d2a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26d2c:	f1ba 0f00 	cmp.w	sl, #0
   26d30:	d0d8      	beq.n	26ce4 <work_queue_main+0xc0>
	return node->next;
   26d32:	4650      	mov	r0, sl
   26d34:	460f      	mov	r7, r1
   26d36:	f8da a000 	ldr.w	sl, [sl]
   26d3a:	e7e6      	b.n	26d0a <work_queue_main+0xe6>
	return list->tail;
   26d3c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   26d3e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   26d40:	4282      	cmp	r2, r0
	list->tail = node;
   26d42:	bf08      	it	eq
   26d44:	6077      	streq	r7, [r6, #4]
}
   26d46:	e7eb      	b.n	26d20 <work_queue_main+0xfc>
   26d48:	20002564 	.word	0x20002564
   26d4c:	20002644 	.word	0x20002644

00026d50 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   26d50:	68c3      	ldr	r3, [r0, #12]
{
   26d52:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   26d54:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   26d58:	079b      	lsls	r3, r3, #30
{
   26d5a:	4605      	mov	r5, r0
   26d5c:	460c      	mov	r4, r1
	if (ret) {
   26d5e:	d50d      	bpl.n	26d7c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   26d60:	2201      	movs	r2, #1
   26d62:	2100      	movs	r1, #0
   26d64:	f104 0008 	add.w	r0, r4, #8
   26d68:	f003 fd56 	bl	2a818 <z_impl_k_sem_init>
	parent->next = child;
   26d6c:	2300      	movs	r3, #0
   26d6e:	6023      	str	r3, [r4, #0]
	return list->tail;
   26d70:	4b05      	ldr	r3, [pc, #20]	; (26d88 <cancel_sync_locked+0x38>)
	canceler->work = work;
   26d72:	6065      	str	r5, [r4, #4]
   26d74:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   26d76:	b91a      	cbnz	r2, 26d80 <cancel_sync_locked+0x30>
	list->head = node;
   26d78:	e9c3 4400 	strd	r4, r4, [r3]
}
   26d7c:	4630      	mov	r0, r6
   26d7e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   26d80:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26d82:	605c      	str	r4, [r3, #4]
}
   26d84:	e7fa      	b.n	26d7c <cancel_sync_locked+0x2c>
   26d86:	bf00      	nop
   26d88:	20002564 	.word	0x20002564

00026d8c <submit_to_queue_locked>:
{
   26d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   26d8e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26d90:	079a      	lsls	r2, r3, #30
{
   26d92:	4604      	mov	r4, r0
   26d94:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26d96:	f3c3 0540 	ubfx	r5, r3, #1, #1
   26d9a:	d41f      	bmi.n	26ddc <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   26d9c:	075f      	lsls	r7, r3, #29
   26d9e:	d41f      	bmi.n	26de0 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   26da0:	680a      	ldr	r2, [r1, #0]
   26da2:	b90a      	cbnz	r2, 26da8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   26da4:	6882      	ldr	r2, [r0, #8]
   26da6:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   26da8:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   26daa:	bf44      	itt	mi
   26dac:	68a3      	ldrmi	r3, [r4, #8]
   26dae:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   26db0:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   26db2:	bf4c      	ite	mi
   26db4:	2502      	movmi	r5, #2
		ret = 1;
   26db6:	2501      	movpl	r5, #1
	if (queue == NULL) {
   26db8:	b37f      	cbz	r7, 26e1a <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26dba:	4b1b      	ldr	r3, [pc, #108]	; (26e28 <submit_to_queue_locked+0x9c>)
   26dbc:	689b      	ldr	r3, [r3, #8]
   26dbe:	42bb      	cmp	r3, r7
   26dc0:	d111      	bne.n	26de6 <submit_to_queue_locked+0x5a>
   26dc2:	f003 fc48 	bl	2a656 <k_is_in_isr>
   26dc6:	f080 0001 	eor.w	r0, r0, #1
   26dca:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   26dcc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26dd0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   26dd2:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26dd6:	d523      	bpl.n	26e20 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   26dd8:	b13a      	cbz	r2, 26dea <submit_to_queue_locked+0x5e>
   26dda:	b940      	cbnz	r0, 26dee <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   26ddc:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   26de0:	2300      	movs	r3, #0
   26de2:	6033      	str	r3, [r6, #0]
	return ret;
   26de4:	e013      	b.n	26e0e <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26de6:	2000      	movs	r0, #0
   26de8:	e7f0      	b.n	26dcc <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   26dea:	071b      	lsls	r3, r3, #28
   26dec:	d4f6      	bmi.n	26ddc <submit_to_queue_locked+0x50>
	parent->next = child;
   26dee:	2300      	movs	r3, #0
   26df0:	6023      	str	r3, [r4, #0]
	return list->tail;
   26df2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   26df6:	b963      	cbnz	r3, 26e12 <submit_to_queue_locked+0x86>
	list->head = node;
   26df8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   26dfc:	4638      	mov	r0, r7
   26dfe:	f003 fd34 	bl	2a86a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   26e02:	68e3      	ldr	r3, [r4, #12]
   26e04:	f043 0304 	orr.w	r3, r3, #4
   26e08:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   26e0a:	6833      	ldr	r3, [r6, #0]
   26e0c:	60a3      	str	r3, [r4, #8]
}
   26e0e:	4628      	mov	r0, r5
   26e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   26e12:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26e14:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   26e18:	e7f0      	b.n	26dfc <submit_to_queue_locked+0x70>
		return -EINVAL;
   26e1a:	f06f 0515 	mvn.w	r5, #21
   26e1e:	e7df      	b.n	26de0 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   26e20:	f06f 0512 	mvn.w	r5, #18
   26e24:	e7dc      	b.n	26de0 <submit_to_queue_locked+0x54>
   26e26:	bf00      	nop
   26e28:	20002534 	.word	0x20002534

00026e2c <k_work_submit>:
{
   26e2c:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   26e2e:	4801      	ldr	r0, [pc, #4]	; (26e34 <k_work_submit+0x8>)
   26e30:	f003 bd7b 	b.w	2a92a <k_work_submit_to_queue>
   26e34:	200010e0 	.word	0x200010e0

00026e38 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   26e38:	b5f0      	push	{r4, r5, r6, r7, lr}
   26e3a:	b089      	sub	sp, #36	; 0x24
   26e3c:	4604      	mov	r4, r0
	list->head = NULL;
   26e3e:	2000      	movs	r0, #0
	list->tail = NULL;
   26e40:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   26e44:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   26e46:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   26e4a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   26e4e:	f104 0090 	add.w	r0, r4, #144	; 0x90
   26e52:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   26e56:	b31d      	cbz	r5, 26ea0 <k_work_queue_start+0x68>
   26e58:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   26e5a:	2800      	cmp	r0, #0
   26e5c:	f240 1001 	movw	r0, #257	; 0x101
   26e60:	bf08      	it	eq
   26e62:	2001      	moveq	r0, #1
	*flagp = flags;
   26e64:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26e68:	2000      	movs	r0, #0
   26e6a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   26e6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   26e72:	e9cd 3003 	strd	r3, r0, [sp, #12]
   26e76:	e9cd 0001 	strd	r0, r0, [sp, #4]
   26e7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   26e7e:	4b09      	ldr	r3, [pc, #36]	; (26ea4 <k_work_queue_start+0x6c>)
   26e80:	9400      	str	r4, [sp, #0]
   26e82:	4620      	mov	r0, r4
   26e84:	f7ff fd94 	bl	269b0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   26e88:	b125      	cbz	r5, 26e94 <k_work_queue_start+0x5c>
   26e8a:	6829      	ldr	r1, [r5, #0]
   26e8c:	b111      	cbz	r1, 26e94 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   26e8e:	4620      	mov	r0, r4
   26e90:	f003 fbe7 	bl	2a662 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   26e94:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   26e96:	b009      	add	sp, #36	; 0x24
   26e98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   26e9c:	f003 bbe6 	b.w	2a66c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   26ea0:	2001      	movs	r0, #1
   26ea2:	e7df      	b.n	26e64 <k_work_queue_start+0x2c>
   26ea4:	00026c25 	.word	0x00026c25

00026ea8 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   26ea8:	b513      	push	{r0, r1, r4, lr}
   26eaa:	9001      	str	r0, [sp, #4]
   26eac:	4608      	mov	r0, r1
	__asm__ volatile(
   26eae:	f04f 0120 	mov.w	r1, #32
   26eb2:	f3ef 8411 	mrs	r4, BASEPRI
   26eb6:	f381 8811 	msr	BASEPRI, r1
   26eba:	f3bf 8f6f 	isb	sy
	return *flagp;
   26ebe:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   26ec0:	f011 0f0e 	tst.w	r1, #14
   26ec4:	d116      	bne.n	26ef4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26ec6:	ea53 0c02 	orrs.w	ip, r3, r2
   26eca:	d108      	bne.n	26ede <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   26ecc:	a901      	add	r1, sp, #4
   26ece:	f7ff ff5d 	bl	26d8c <submit_to_queue_locked>
	__asm__ volatile(
   26ed2:	f384 8811 	msr	BASEPRI, r4
   26ed6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26eda:	b002      	add	sp, #8
   26edc:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   26ede:	f041 0108 	orr.w	r1, r1, #8
   26ee2:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   26ee4:	9901      	ldr	r1, [sp, #4]
   26ee6:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26ee8:	3010      	adds	r0, #16
   26eea:	4903      	ldr	r1, [pc, #12]	; (26ef8 <k_work_schedule_for_queue+0x50>)
   26eec:	f000 fbbc 	bl	27668 <z_add_timeout>
	return ret;
   26ef0:	2001      	movs	r0, #1
   26ef2:	e7ee      	b.n	26ed2 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   26ef4:	2000      	movs	r0, #0
   26ef6:	e7ec      	b.n	26ed2 <k_work_schedule_for_queue+0x2a>
   26ef8:	0002a8db 	.word	0x0002a8db

00026efc <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   26efc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   26efe:	4801      	ldr	r0, [pc, #4]	; (26f04 <k_work_schedule+0x8>)
   26f00:	f7ff bfd2 	b.w	26ea8 <k_work_schedule_for_queue>
   26f04:	200010e0 	.word	0x200010e0

00026f08 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   26f08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26f0a:	460c      	mov	r4, r1
   26f0c:	9001      	str	r0, [sp, #4]
   26f0e:	4616      	mov	r6, r2
   26f10:	461d      	mov	r5, r3
	__asm__ volatile(
   26f12:	f04f 0320 	mov.w	r3, #32
   26f16:	f3ef 8711 	mrs	r7, BASEPRI
   26f1a:	f383 8811 	msr	BASEPRI, r3
   26f1e:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   26f22:	4608      	mov	r0, r1
   26f24:	f003 fc93 	bl	2a84e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26f28:	ea55 0306 	orrs.w	r3, r5, r6
   26f2c:	d109      	bne.n	26f42 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   26f2e:	a901      	add	r1, sp, #4
   26f30:	4620      	mov	r0, r4
   26f32:	f7ff ff2b 	bl	26d8c <submit_to_queue_locked>
	__asm__ volatile(
   26f36:	f387 8811 	msr	BASEPRI, r7
   26f3a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   26f3e:	b003      	add	sp, #12
   26f40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   26f42:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26f44:	4906      	ldr	r1, [pc, #24]	; (26f60 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   26f46:	f043 0308 	orr.w	r3, r3, #8
   26f4a:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   26f4c:	9b01      	ldr	r3, [sp, #4]
   26f4e:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   26f50:	f104 0010 	add.w	r0, r4, #16
   26f54:	4632      	mov	r2, r6
   26f56:	462b      	mov	r3, r5
   26f58:	f000 fb86 	bl	27668 <z_add_timeout>
	return ret;
   26f5c:	2001      	movs	r0, #1
   26f5e:	e7ea      	b.n	26f36 <k_work_reschedule_for_queue+0x2e>
   26f60:	0002a8db 	.word	0x0002a8db

00026f64 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   26f64:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   26f66:	4801      	ldr	r0, [pc, #4]	; (26f6c <k_work_reschedule+0x8>)
   26f68:	f7ff bfce 	b.w	26f08 <k_work_reschedule_for_queue>
   26f6c:	200010e0 	.word	0x200010e0

00026f70 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   26f70:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   26f72:	4c08      	ldr	r4, [pc, #32]	; (26f94 <z_reset_time_slice+0x24>)
   26f74:	6823      	ldr	r3, [r4, #0]
   26f76:	b15b      	cbz	r3, 26f90 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   26f78:	f7eb fde0 	bl	12b3c <sys_clock_elapsed>
   26f7c:	4603      	mov	r3, r0
   26f7e:	6820      	ldr	r0, [r4, #0]
   26f80:	4a05      	ldr	r2, [pc, #20]	; (26f98 <z_reset_time_slice+0x28>)
   26f82:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   26f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   26f88:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   26f8a:	2100      	movs	r1, #0
   26f8c:	f003 be71 	b.w	2ac72 <z_set_timeout_expiry>
}
   26f90:	bd10      	pop	{r4, pc}
   26f92:	bf00      	nop
   26f94:	20002574 	.word	0x20002574
   26f98:	20002534 	.word	0x20002534

00026f9c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   26f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26f9e:	4604      	mov	r4, r0
   26fa0:	460d      	mov	r5, r1
	__asm__ volatile(
   26fa2:	f04f 0320 	mov.w	r3, #32
   26fa6:	f3ef 8611 	mrs	r6, BASEPRI
   26faa:	f383 8811 	msr	BASEPRI, r3
   26fae:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   26fb2:	4b0f      	ldr	r3, [pc, #60]	; (26ff0 <k_sched_time_slice_set+0x54>)
   26fb4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   26fb6:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   26fba:	f240 30e7 	movw	r0, #999	; 0x3e7
   26fbe:	6119      	str	r1, [r3, #16]
   26fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26fc4:	2300      	movs	r3, #0
   26fc6:	fbe4 0107 	umlal	r0, r1, r4, r7
   26fca:	f7e9 f899 	bl	10100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26fce:	2c00      	cmp	r4, #0
   26fd0:	4b08      	ldr	r3, [pc, #32]	; (26ff4 <k_sched_time_slice_set+0x58>)
   26fd2:	dc09      	bgt.n	26fe8 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   26fd4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   26fd6:	4b08      	ldr	r3, [pc, #32]	; (26ff8 <k_sched_time_slice_set+0x5c>)
   26fd8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   26fda:	f7ff ffc9 	bl	26f70 <z_reset_time_slice>
	__asm__ volatile(
   26fde:	f386 8811 	msr	BASEPRI, r6
   26fe2:	f3bf 8f6f 	isb	sy
	}
}
   26fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   26fe8:	2802      	cmp	r0, #2
   26fea:	bfb8      	it	lt
   26fec:	2002      	movlt	r0, #2
   26fee:	e7f1      	b.n	26fd4 <k_sched_time_slice_set+0x38>
   26ff0:	20002534 	.word	0x20002534
   26ff4:	20002574 	.word	0x20002574
   26ff8:	20002570 	.word	0x20002570

00026ffc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26ffc:	b949      	cbnz	r1, 27012 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26ffe:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   27002:	b930      	cbnz	r0, 27012 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   27004:	4b05      	ldr	r3, [pc, #20]	; (2701c <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   27006:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   27008:	689b      	ldr	r3, [r3, #8]
   2700a:	429a      	cmp	r2, r3
   2700c:	d001      	beq.n	27012 <z_reschedule+0x16>
	ret = arch_swap(key);
   2700e:	f7eb be1b 	b.w	12c48 <arch_swap>
   27012:	f381 8811 	msr	BASEPRI, r1
   27016:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   2701a:	4770      	bx	lr
   2701c:	20002534 	.word	0x20002534

00027020 <k_sched_lock>:
	__asm__ volatile(
   27020:	f04f 0320 	mov.w	r3, #32
   27024:	f3ef 8111 	mrs	r1, BASEPRI
   27028:	f383 8811 	msr	BASEPRI, r3
   2702c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   27030:	4b04      	ldr	r3, [pc, #16]	; (27044 <k_sched_lock+0x24>)
   27032:	689a      	ldr	r2, [r3, #8]
   27034:	7bd3      	ldrb	r3, [r2, #15]
   27036:	3b01      	subs	r3, #1
   27038:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   2703a:	f381 8811 	msr	BASEPRI, r1
   2703e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   27042:	4770      	bx	lr
   27044:	20002534 	.word	0x20002534

00027048 <update_cache>:
{
   27048:	b538      	push	{r3, r4, r5, lr}
   2704a:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   2704c:	480c      	ldr	r0, [pc, #48]	; (27080 <update_cache+0x38>)
   2704e:	4d0d      	ldr	r5, [pc, #52]	; (27084 <update_cache+0x3c>)
   27050:	f003 fd2d 	bl	2aaae <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   27054:	4604      	mov	r4, r0
   27056:	b900      	cbnz	r0, 2705a <update_cache+0x12>
   27058:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   2705a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   2705c:	b94a      	cbnz	r2, 27072 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   2705e:	7b5a      	ldrb	r2, [r3, #13]
   27060:	06d2      	lsls	r2, r2, #27
   27062:	d106      	bne.n	27072 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   27064:	69a2      	ldr	r2, [r4, #24]
   27066:	b922      	cbnz	r2, 27072 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   27068:	89da      	ldrh	r2, [r3, #14]
   2706a:	2a7f      	cmp	r2, #127	; 0x7f
   2706c:	d901      	bls.n	27072 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   2706e:	626b      	str	r3, [r5, #36]	; 0x24
}
   27070:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   27072:	429c      	cmp	r4, r3
   27074:	d001      	beq.n	2707a <update_cache+0x32>
			z_reset_time_slice();
   27076:	f7ff ff7b 	bl	26f70 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   2707a:	626c      	str	r4, [r5, #36]	; 0x24
}
   2707c:	e7f8      	b.n	27070 <update_cache+0x28>
   2707e:	bf00      	nop
   27080:	2000255c 	.word	0x2000255c
   27084:	20002534 	.word	0x20002534

00027088 <unready_thread>:
{
   27088:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   2708a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   2708e:	7b43      	ldrb	r3, [r0, #13]
   27090:	2a00      	cmp	r2, #0
{
   27092:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   27094:	da04      	bge.n	270a0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2709a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   2709c:	f003 fcb2 	bl	2aa04 <sys_dlist_remove>
	update_cache(thread == _current);
   270a0:	4b04      	ldr	r3, [pc, #16]	; (270b4 <unready_thread+0x2c>)
   270a2:	6898      	ldr	r0, [r3, #8]
   270a4:	1a43      	subs	r3, r0, r1
   270a6:	4258      	negs	r0, r3
   270a8:	4158      	adcs	r0, r3
}
   270aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   270ae:	f7ff bfcb 	b.w	27048 <update_cache>
   270b2:	bf00      	nop
   270b4:	20002534 	.word	0x20002534

000270b8 <pend>:
{
   270b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   270bc:	4606      	mov	r6, r0
   270be:	4615      	mov	r5, r2
   270c0:	461c      	mov	r4, r3
	__asm__ volatile(
   270c2:	f04f 0320 	mov.w	r3, #32
   270c6:	f3ef 8711 	mrs	r7, BASEPRI
   270ca:	f383 8811 	msr	BASEPRI, r3
   270ce:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   270d2:	f003 fcf2 	bl	2aaba <add_to_waitq_locked>
	__asm__ volatile(
   270d6:	f387 8811 	msr	BASEPRI, r7
   270da:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   270de:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   270e2:	bf08      	it	eq
   270e4:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   270e8:	d008      	beq.n	270fc <pend+0x44>
   270ea:	462a      	mov	r2, r5
   270ec:	4623      	mov	r3, r4
   270ee:	f106 0018 	add.w	r0, r6, #24
   270f2:	4903      	ldr	r1, [pc, #12]	; (27100 <pend+0x48>)
}
   270f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   270f8:	f000 bab6 	b.w	27668 <z_add_timeout>
   270fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27100:	0002ab2f 	.word	0x0002ab2f

00027104 <z_pend_curr>:
{
   27104:	b510      	push	{r4, lr}
	pending_current = _current;
   27106:	4b07      	ldr	r3, [pc, #28]	; (27124 <z_pend_curr+0x20>)
   27108:	6898      	ldr	r0, [r3, #8]
   2710a:	4b07      	ldr	r3, [pc, #28]	; (27128 <z_pend_curr+0x24>)
{
   2710c:	460c      	mov	r4, r1
	pending_current = _current;
   2710e:	6018      	str	r0, [r3, #0]
{
   27110:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   27112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   27116:	f7ff ffcf 	bl	270b8 <pend>
   2711a:	4620      	mov	r0, r4
}
   2711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   27120:	f7eb bd92 	b.w	12c48 <arch_swap>
   27124:	20002534 	.word	0x20002534
   27128:	2000256c 	.word	0x2000256c

0002712c <z_impl_k_thread_suspend>:
{
   2712c:	b570      	push	{r4, r5, r6, lr}
   2712e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   27130:	3018      	adds	r0, #24
   27132:	f003 fd78 	bl	2ac26 <z_abort_timeout>
	__asm__ volatile(
   27136:	f04f 0320 	mov.w	r3, #32
   2713a:	f3ef 8611 	mrs	r6, BASEPRI
   2713e:	f383 8811 	msr	BASEPRI, r3
   27142:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   27146:	f994 200d 	ldrsb.w	r2, [r4, #13]
   2714a:	7b63      	ldrb	r3, [r4, #13]
   2714c:	2a00      	cmp	r2, #0
   2714e:	da05      	bge.n	2715c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27154:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   27156:	4620      	mov	r0, r4
   27158:	f003 fc54 	bl	2aa04 <sys_dlist_remove>
		update_cache(thread == _current);
   2715c:	4d0b      	ldr	r5, [pc, #44]	; (2718c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2715e:	7b63      	ldrb	r3, [r4, #13]
   27160:	68a8      	ldr	r0, [r5, #8]
   27162:	f043 0310 	orr.w	r3, r3, #16
   27166:	7363      	strb	r3, [r4, #13]
   27168:	1b03      	subs	r3, r0, r4
   2716a:	4258      	negs	r0, r3
   2716c:	4158      	adcs	r0, r3
   2716e:	f7ff ff6b 	bl	27048 <update_cache>
	__asm__ volatile(
   27172:	f386 8811 	msr	BASEPRI, r6
   27176:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   2717a:	68ab      	ldr	r3, [r5, #8]
   2717c:	42a3      	cmp	r3, r4
   2717e:	d103      	bne.n	27188 <z_impl_k_thread_suspend+0x5c>
}
   27180:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   27184:	f003 bc89 	b.w	2aa9a <z_reschedule_unlocked>
}
   27188:	bd70      	pop	{r4, r5, r6, pc}
   2718a:	bf00      	nop
   2718c:	20002534 	.word	0x20002534

00027190 <k_sched_unlock>:
{
   27190:	b510      	push	{r4, lr}
	__asm__ volatile(
   27192:	f04f 0320 	mov.w	r3, #32
   27196:	f3ef 8411 	mrs	r4, BASEPRI
   2719a:	f383 8811 	msr	BASEPRI, r3
   2719e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   271a2:	4b08      	ldr	r3, [pc, #32]	; (271c4 <k_sched_unlock+0x34>)
   271a4:	689a      	ldr	r2, [r3, #8]
   271a6:	7bd3      	ldrb	r3, [r2, #15]
   271a8:	3301      	adds	r3, #1
   271aa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   271ac:	2000      	movs	r0, #0
   271ae:	f7ff ff4b 	bl	27048 <update_cache>
	__asm__ volatile(
   271b2:	f384 8811 	msr	BASEPRI, r4
   271b6:	f3bf 8f6f 	isb	sy
}
   271ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   271be:	f003 bc6c 	b.w	2aa9a <z_reschedule_unlocked>
   271c2:	bf00      	nop
   271c4:	20002534 	.word	0x20002534

000271c8 <move_thread_to_end_of_prio_q>:
{
   271c8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   271ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   271ce:	7b43      	ldrb	r3, [r0, #13]
   271d0:	2a00      	cmp	r2, #0
{
   271d2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   271d4:	da04      	bge.n	271e0 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   271d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   271da:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   271dc:	f003 fc12 	bl	2aa04 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   271e0:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   271e2:	4a15      	ldr	r2, [pc, #84]	; (27238 <move_thread_to_end_of_prio_q+0x70>)
   271e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   271e8:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   271ea:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   271ee:	f102 0528 	add.w	r5, r2, #40	; 0x28
   271f2:	42ab      	cmp	r3, r5
   271f4:	d01b      	beq.n	2722e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   271f6:	b1d3      	cbz	r3, 2722e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   271f8:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   271fc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   27200:	4286      	cmp	r6, r0
   27202:	d00f      	beq.n	27224 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   27204:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   27206:	2800      	cmp	r0, #0
   27208:	dd0c      	ble.n	27224 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   2720a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   2720c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   27210:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   27212:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   27214:	6890      	ldr	r0, [r2, #8]
   27216:	1a43      	subs	r3, r0, r1
   27218:	4258      	negs	r0, r3
}
   2721a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   2721e:	4158      	adcs	r0, r3
   27220:	f7ff bf12 	b.w	27048 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   27224:	42a3      	cmp	r3, r4
   27226:	d002      	beq.n	2722e <move_thread_to_end_of_prio_q+0x66>
   27228:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2722a:	2b00      	cmp	r3, #0
   2722c:	d1e6      	bne.n	271fc <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   2722e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   27232:	6021      	str	r1, [r4, #0]
	list->tail = node;
   27234:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   27236:	e7ed      	b.n	27214 <move_thread_to_end_of_prio_q+0x4c>
   27238:	20002534 	.word	0x20002534

0002723c <z_time_slice>:
{
   2723c:	b538      	push	{r3, r4, r5, lr}
   2723e:	4601      	mov	r1, r0
	__asm__ volatile(
   27240:	f04f 0320 	mov.w	r3, #32
   27244:	f3ef 8411 	mrs	r4, BASEPRI
   27248:	f383 8811 	msr	BASEPRI, r3
   2724c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   27250:	4b15      	ldr	r3, [pc, #84]	; (272a8 <z_time_slice+0x6c>)
   27252:	4a16      	ldr	r2, [pc, #88]	; (272ac <z_time_slice+0x70>)
   27254:	6898      	ldr	r0, [r3, #8]
   27256:	6815      	ldr	r5, [r2, #0]
   27258:	42a8      	cmp	r0, r5
   2725a:	d106      	bne.n	2726a <z_time_slice+0x2e>
			z_reset_time_slice();
   2725c:	f7ff fe88 	bl	26f70 <z_reset_time_slice>
	__asm__ volatile(
   27260:	f384 8811 	msr	BASEPRI, r4
   27264:	f3bf 8f6f 	isb	sy
}
   27268:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   2726a:	2500      	movs	r5, #0
   2726c:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2726e:	4a10      	ldr	r2, [pc, #64]	; (272b0 <z_time_slice+0x74>)
   27270:	6812      	ldr	r2, [r2, #0]
   27272:	b1ba      	cbz	r2, 272a4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   27274:	89c2      	ldrh	r2, [r0, #14]
   27276:	2a7f      	cmp	r2, #127	; 0x7f
   27278:	d814      	bhi.n	272a4 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   2727a:	7b42      	ldrb	r2, [r0, #13]
   2727c:	06d2      	lsls	r2, r2, #27
   2727e:	d111      	bne.n	272a4 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   27280:	4a0c      	ldr	r2, [pc, #48]	; (272b4 <z_time_slice+0x78>)
   27282:	f990 500e 	ldrsb.w	r5, [r0, #14]
   27286:	6812      	ldr	r2, [r2, #0]
   27288:	4295      	cmp	r5, r2
   2728a:	db0b      	blt.n	272a4 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   2728c:	4a0a      	ldr	r2, [pc, #40]	; (272b8 <z_time_slice+0x7c>)
   2728e:	4290      	cmp	r0, r2
   27290:	d008      	beq.n	272a4 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   27292:	691a      	ldr	r2, [r3, #16]
   27294:	428a      	cmp	r2, r1
   27296:	dc02      	bgt.n	2729e <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   27298:	f7ff ff96 	bl	271c8 <move_thread_to_end_of_prio_q>
   2729c:	e7de      	b.n	2725c <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   2729e:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   272a0:	611a      	str	r2, [r3, #16]
   272a2:	e7dd      	b.n	27260 <z_time_slice+0x24>
   272a4:	2200      	movs	r2, #0
   272a6:	e7fb      	b.n	272a0 <z_time_slice+0x64>
   272a8:	20002534 	.word	0x20002534
   272ac:	2000256c 	.word	0x2000256c
   272b0:	20002574 	.word	0x20002574
   272b4:	20002570 	.word	0x20002570
   272b8:	20000fe0 	.word	0x20000fe0

000272bc <ready_thread>:
{
   272bc:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   272be:	f990 200d 	ldrsb.w	r2, [r0, #13]
   272c2:	7b43      	ldrb	r3, [r0, #13]
   272c4:	2a00      	cmp	r2, #0
   272c6:	db2a      	blt.n	2731e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   272c8:	06da      	lsls	r2, r3, #27
   272ca:	d128      	bne.n	2731e <ready_thread+0x62>
   272cc:	6982      	ldr	r2, [r0, #24]
   272ce:	bb32      	cbnz	r2, 2731e <ready_thread+0x62>
	return list->head == list;
   272d0:	4a14      	ldr	r2, [pc, #80]	; (27324 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   272d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   272d6:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   272d8:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272dc:	f102 0528 	add.w	r5, r2, #40	; 0x28
   272e0:	42ab      	cmp	r3, r5
   272e2:	d017      	beq.n	27314 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   272e4:	b1b3      	cbz	r3, 27314 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   272e6:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   272ea:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   272ee:	428e      	cmp	r6, r1
   272f0:	d00b      	beq.n	2730a <ready_thread+0x4e>
		return b2 - b1;
   272f2:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   272f4:	2900      	cmp	r1, #0
   272f6:	dd08      	ble.n	2730a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   272f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   272fa:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   272fe:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   27300:	6058      	str	r0, [r3, #4]
}
   27302:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   27304:	2000      	movs	r0, #0
   27306:	f7ff be9f 	b.w	27048 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   2730a:	42a3      	cmp	r3, r4
   2730c:	d002      	beq.n	27314 <ready_thread+0x58>
   2730e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27310:	2b00      	cmp	r3, #0
   27312:	d1ea      	bne.n	272ea <ready_thread+0x2e>
	node->prev = tail;
   27314:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   27318:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2731a:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   2731c:	e7f1      	b.n	27302 <ready_thread+0x46>
}
   2731e:	bc70      	pop	{r4, r5, r6}
   27320:	4770      	bx	lr
   27322:	bf00      	nop
   27324:	20002534 	.word	0x20002534

00027328 <z_sched_start>:
{
   27328:	b510      	push	{r4, lr}
	__asm__ volatile(
   2732a:	f04f 0220 	mov.w	r2, #32
   2732e:	f3ef 8411 	mrs	r4, BASEPRI
   27332:	f382 8811 	msr	BASEPRI, r2
   27336:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   2733a:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   2733c:	0751      	lsls	r1, r2, #29
   2733e:	d404      	bmi.n	2734a <z_sched_start+0x22>
	__asm__ volatile(
   27340:	f384 8811 	msr	BASEPRI, r4
   27344:	f3bf 8f6f 	isb	sy
}
   27348:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2734a:	f022 0204 	bic.w	r2, r2, #4
   2734e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   27350:	f7ff ffb4 	bl	272bc <ready_thread>
	z_reschedule(&sched_spinlock, key);
   27354:	4621      	mov	r1, r4
   27356:	4802      	ldr	r0, [pc, #8]	; (27360 <z_sched_start+0x38>)
}
   27358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   2735c:	f7ff be4e 	b.w	26ffc <z_reschedule>
   27360:	20002644 	.word	0x20002644

00027364 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   27364:	4b04      	ldr	r3, [pc, #16]	; (27378 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   27366:	2100      	movs	r1, #0
   27368:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   2736c:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   27370:	4608      	mov	r0, r1
   27372:	f7ff be13 	b.w	26f9c <k_sched_time_slice_set>
   27376:	bf00      	nop
   27378:	20002534 	.word	0x20002534

0002737c <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   2737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2737e:	f04f 0320 	mov.w	r3, #32
   27382:	f3ef 8511 	mrs	r5, BASEPRI
   27386:	f383 8811 	msr	BASEPRI, r3
   2738a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   2738e:	491a      	ldr	r1, [pc, #104]	; (273f8 <z_impl_k_yield+0x7c>)
   27390:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27392:	7b43      	ldrb	r3, [r0, #13]
   27394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   27398:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   2739a:	f003 fb33 	bl	2aa04 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   2739e:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   273a0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   273a2:	4608      	mov	r0, r1
   273a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
   273a8:	735a      	strb	r2, [r3, #13]
   273aa:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   273ae:	4282      	cmp	r2, r0
   273b0:	d01c      	beq.n	273ec <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   273b2:	b1da      	cbz	r2, 273ec <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   273b4:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   273b6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   273ba:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   273be:	42a6      	cmp	r6, r4
   273c0:	d00f      	beq.n	273e2 <z_impl_k_yield+0x66>
		return b2 - b1;
   273c2:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   273c4:	2c00      	cmp	r4, #0
   273c6:	dd0c      	ble.n	273e2 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   273c8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   273ca:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   273ce:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   273d0:	6053      	str	r3, [r2, #4]
	update_cache(1);
   273d2:	2001      	movs	r0, #1
   273d4:	f7ff fe38 	bl	27048 <update_cache>
   273d8:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   273da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   273de:	f7eb bc33 	b.w	12c48 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   273e2:	42ba      	cmp	r2, r7
   273e4:	d002      	beq.n	273ec <z_impl_k_yield+0x70>
   273e6:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   273e8:	2a00      	cmp	r2, #0
   273ea:	d1e6      	bne.n	273ba <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   273ec:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   273ee:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   273f2:	6013      	str	r3, [r2, #0]
	list->tail = node;
   273f4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   273f6:	e7ec      	b.n	273d2 <z_impl_k_yield+0x56>
   273f8:	20002534 	.word	0x20002534

000273fc <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   273fc:	ea50 0301 	orrs.w	r3, r0, r1
{
   27400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27404:	4605      	mov	r5, r0
   27406:	460e      	mov	r6, r1
	if (ticks == 0) {
   27408:	d104      	bne.n	27414 <z_tick_sleep+0x18>
	z_impl_k_yield();
   2740a:	f7ff ffb7 	bl	2737c <z_impl_k_yield>
		k_yield();
		return 0;
   2740e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   27410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27414:	f003 fc47 	bl	2aca6 <sys_clock_tick_get_32>
   27418:	4604      	mov	r4, r0
   2741a:	f04f 0320 	mov.w	r3, #32
   2741e:	f3ef 8811 	mrs	r8, BASEPRI
   27422:	f383 8811 	msr	BASEPRI, r3
   27426:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   2742a:	4f0f      	ldr	r7, [pc, #60]	; (27468 <z_tick_sleep+0x6c>)
   2742c:	4b0f      	ldr	r3, [pc, #60]	; (2746c <z_tick_sleep+0x70>)
   2742e:	68b8      	ldr	r0, [r7, #8]
   27430:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   27432:	f7ff fe29 	bl	27088 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27436:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27438:	490d      	ldr	r1, [pc, #52]	; (27470 <z_tick_sleep+0x74>)
   2743a:	462a      	mov	r2, r5
   2743c:	4633      	mov	r3, r6
   2743e:	3018      	adds	r0, #24
   27440:	f000 f912 	bl	27668 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   27444:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27446:	7b53      	ldrb	r3, [r2, #13]
   27448:	f043 0310 	orr.w	r3, r3, #16
   2744c:	7353      	strb	r3, [r2, #13]
   2744e:	4640      	mov	r0, r8
   27450:	f7eb fbfa 	bl	12c48 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27454:	f003 fc27 	bl	2aca6 <sys_clock_tick_get_32>
	expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27458:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   2745a:	1a10      	subs	r0, r2, r0
   2745c:	eb63 0303 	sbc.w	r3, r3, r3
   27460:	2b00      	cmp	r3, #0
   27462:	bfb8      	it	lt
   27464:	2000      	movlt	r0, #0
   27466:	e7d3      	b.n	27410 <z_tick_sleep+0x14>
   27468:	20002534 	.word	0x20002534
   2746c:	2000256c 	.word	0x2000256c
   27470:	0002ab2f 	.word	0x0002ab2f

00027474 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27474:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   27478:	bf08      	it	eq
   2747a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2747e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27480:	d106      	bne.n	27490 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   27482:	4b08      	ldr	r3, [pc, #32]	; (274a4 <z_impl_k_sleep+0x30>)
   27484:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   27486:	f7ff fe51 	bl	2712c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   2748a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   2748e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   27490:	f7ff ffb4 	bl	273fc <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   27494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27498:	fb80 0303 	smull	r0, r3, r0, r3
   2749c:	0bc0      	lsrs	r0, r0, #15
   2749e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   274a2:	e7f4      	b.n	2748e <z_impl_k_sleep+0x1a>
   274a4:	20002534 	.word	0x20002534

000274a8 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   274a8:	4b01      	ldr	r3, [pc, #4]	; (274b0 <z_impl_k_current_get+0x8>)
   274aa:	6898      	ldr	r0, [r3, #8]
   274ac:	4770      	bx	lr
   274ae:	bf00      	nop
   274b0:	20002534 	.word	0x20002534

000274b4 <z_impl_k_is_preempt_thread>:
   274b4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   274b8:	b93b      	cbnz	r3, 274ca <z_impl_k_is_preempt_thread+0x16>
   274ba:	4b05      	ldr	r3, [pc, #20]	; (274d0 <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   274bc:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   274be:	89d8      	ldrh	r0, [r3, #14]
   274c0:	287f      	cmp	r0, #127	; 0x7f
   274c2:	bf8c      	ite	hi
   274c4:	2000      	movhi	r0, #0
   274c6:	2001      	movls	r0, #1
   274c8:	4770      	bx	lr
   274ca:	2000      	movs	r0, #0
}
   274cc:	4770      	bx	lr
   274ce:	bf00      	nop
   274d0:	20002534 	.word	0x20002534

000274d4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   274d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   274d8:	4604      	mov	r4, r0
   274da:	f04f 0320 	mov.w	r3, #32
   274de:	f3ef 8611 	mrs	r6, BASEPRI
   274e2:	f383 8811 	msr	BASEPRI, r3
   274e6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   274ea:	7b43      	ldrb	r3, [r0, #13]
   274ec:	071a      	lsls	r2, r3, #28
   274ee:	d505      	bpl.n	274fc <z_thread_abort+0x28>
	__asm__ volatile(
   274f0:	f386 8811 	msr	BASEPRI, r6
   274f4:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   274f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   274fc:	f023 0220 	bic.w	r2, r3, #32
   27500:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   27504:	09d2      	lsrs	r2, r2, #7
   27506:	d120      	bne.n	2754a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27508:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   2750a:	68a3      	ldr	r3, [r4, #8]
   2750c:	b113      	cbz	r3, 27514 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   2750e:	4620      	mov	r0, r4
   27510:	f003 fa80 	bl	2aa14 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   27514:	f104 0018 	add.w	r0, r4, #24
   27518:	f003 fb85 	bl	2ac26 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2751c:	f104 0758 	add.w	r7, r4, #88	; 0x58
   27520:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   27524:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27526:	42bd      	cmp	r5, r7
   27528:	d000      	beq.n	2752c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2752a:	b9b5      	cbnz	r5, 2755a <z_thread_abort+0x86>
		update_cache(1);
   2752c:	2001      	movs	r0, #1
   2752e:	f7ff fd8b 	bl	27048 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   27532:	4b10      	ldr	r3, [pc, #64]	; (27574 <z_thread_abort+0xa0>)
   27534:	689b      	ldr	r3, [r3, #8]
   27536:	42a3      	cmp	r3, r4
   27538:	d1da      	bne.n	274f0 <z_thread_abort+0x1c>
   2753a:	f3ef 8305 	mrs	r3, IPSR
   2753e:	2b00      	cmp	r3, #0
   27540:	d1d6      	bne.n	274f0 <z_thread_abort+0x1c>
   27542:	4630      	mov	r0, r6
   27544:	f7eb fb80 	bl	12c48 <arch_swap>
	return ret;
   27548:	e7d2      	b.n	274f0 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   2754a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   2754e:	f043 0308 	orr.w	r3, r3, #8
   27552:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   27554:	f003 fa56 	bl	2aa04 <sys_dlist_remove>
}
   27558:	e7d7      	b.n	2750a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   2755a:	4628      	mov	r0, r5
   2755c:	f003 fa5a 	bl	2aa14 <unpend_thread_no_timeout>
   27560:	f105 0018 	add.w	r0, r5, #24
   27564:	f003 fb5f 	bl	2ac26 <z_abort_timeout>
   27568:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   2756c:	4628      	mov	r0, r5
   2756e:	f7ff fea5 	bl	272bc <ready_thread>
   27572:	e7d7      	b.n	27524 <z_thread_abort+0x50>
   27574:	20002534 	.word	0x20002534

00027578 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27578:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   2757a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   2757e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27580:	e9cd 6700 	strd	r6, r7, [sp]
   27584:	f7ff fdbe 	bl	27104 <z_pend_curr>

	if (data != NULL) {
   27588:	b11c      	cbz	r4, 27592 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   2758a:	4b03      	ldr	r3, [pc, #12]	; (27598 <z_sched_wait+0x20>)
   2758c:	689b      	ldr	r3, [r3, #8]
   2758e:	695b      	ldr	r3, [r3, #20]
   27590:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27592:	b002      	add	sp, #8
   27594:	bdd0      	pop	{r4, r6, r7, pc}
   27596:	bf00      	nop
   27598:	20002534 	.word	0x20002534

0002759c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2759c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   2759e:	4806      	ldr	r0, [pc, #24]	; (275b8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   275a0:	4a06      	ldr	r2, [pc, #24]	; (275bc <z_data_copy+0x20>)
   275a2:	4907      	ldr	r1, [pc, #28]	; (275c0 <z_data_copy+0x24>)
   275a4:	1a12      	subs	r2, r2, r0
   275a6:	f001 fb36 	bl	28c16 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   275aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   275ae:	4a05      	ldr	r2, [pc, #20]	; (275c4 <z_data_copy+0x28>)
   275b0:	4905      	ldr	r1, [pc, #20]	; (275c8 <z_data_copy+0x2c>)
   275b2:	4806      	ldr	r0, [pc, #24]	; (275cc <z_data_copy+0x30>)
   275b4:	f001 bb2f 	b.w	28c16 <memcpy>
   275b8:	20000000 	.word	0x20000000
   275bc:	20000834 	.word	0x20000834
   275c0:	0002df24 	.word	0x0002df24
   275c4:	00000000 	.word	0x00000000
   275c8:	0002df24 	.word	0x0002df24
   275cc:	20000000 	.word	0x20000000

000275d0 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   275d0:	4b03      	ldr	r3, [pc, #12]	; (275e0 <elapsed+0x10>)
   275d2:	681b      	ldr	r3, [r3, #0]
   275d4:	b90b      	cbnz	r3, 275da <elapsed+0xa>
   275d6:	f7eb bab1 	b.w	12b3c <sys_clock_elapsed>
}
   275da:	2000      	movs	r0, #0
   275dc:	4770      	bx	lr
   275de:	bf00      	nop
   275e0:	20002578 	.word	0x20002578

000275e4 <next_timeout>:
	return list->head == list;
   275e4:	4b11      	ldr	r3, [pc, #68]	; (2762c <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   275e6:	b510      	push	{r4, lr}
   275e8:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   275ea:	429c      	cmp	r4, r3
   275ec:	bf08      	it	eq
   275ee:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   275f0:	f7ff ffee 	bl	275d0 <elapsed>
   275f4:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   275f6:	b16c      	cbz	r4, 27614 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   275f8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   275fc:	1ac0      	subs	r0, r0, r3
   275fe:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   27602:	2801      	cmp	r0, #1
   27604:	f173 0200 	sbcs.w	r2, r3, #0
   27608:	db0d      	blt.n	27626 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2760a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   2760e:	f173 0300 	sbcs.w	r3, r3, #0
   27612:	db01      	blt.n	27618 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   27614:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   27618:	4b05      	ldr	r3, [pc, #20]	; (27630 <next_timeout+0x4c>)
   2761a:	691b      	ldr	r3, [r3, #16]
   2761c:	b113      	cbz	r3, 27624 <next_timeout+0x40>
   2761e:	4298      	cmp	r0, r3
   27620:	bfa8      	it	ge
   27622:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   27624:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   27626:	2000      	movs	r0, #0
   27628:	e7f6      	b.n	27618 <next_timeout+0x34>
   2762a:	bf00      	nop
   2762c:	20000554 	.word	0x20000554
   27630:	20002534 	.word	0x20002534

00027634 <remove_timeout>:
{
   27634:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   27636:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27638:	b168      	cbz	r0, 27656 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2763a:	4a0a      	ldr	r2, [pc, #40]	; (27664 <remove_timeout+0x30>)
   2763c:	6852      	ldr	r2, [r2, #4]
   2763e:	4290      	cmp	r0, r2
   27640:	d009      	beq.n	27656 <remove_timeout+0x22>
	if (next(t) != NULL) {
   27642:	b143      	cbz	r3, 27656 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   27644:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   27648:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   2764c:	1912      	adds	r2, r2, r4
   2764e:	eb41 0105 	adc.w	r1, r1, r5
   27652:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   27656:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   27658:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2765a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2765c:	2300      	movs	r3, #0
	node->prev = NULL;
   2765e:	e9c0 3300 	strd	r3, r3, [r0]
}
   27662:	bd30      	pop	{r4, r5, pc}
   27664:	20000554 	.word	0x20000554

00027668 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2766c:	bf08      	it	eq
   2766e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   27672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27674:	4604      	mov	r4, r0
   27676:	461f      	mov	r7, r3
   27678:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2767a:	d067      	beq.n	2774c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   2767c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   2767e:	f04f 0320 	mov.w	r3, #32
   27682:	f3ef 8611 	mrs	r6, BASEPRI
   27686:	f383 8811 	msr	BASEPRI, r3
   2768a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2768e:	f06f 0201 	mvn.w	r2, #1
   27692:	1b53      	subs	r3, r2, r5
   27694:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   27698:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2769c:	2b00      	cmp	r3, #0
   2769e:	db1b      	blt.n	276d8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   276a0:	4b2b      	ldr	r3, [pc, #172]	; (27750 <z_add_timeout+0xe8>)
   276a2:	e9d3 1300 	ldrd	r1, r3, [r3]
   276a6:	1a52      	subs	r2, r2, r1
   276a8:	eb6c 0303 	sbc.w	r3, ip, r3
   276ac:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   276ae:	eb63 0307 	sbc.w	r3, r3, r7
   276b2:	2d01      	cmp	r5, #1
   276b4:	f173 0200 	sbcs.w	r2, r3, #0
   276b8:	bfbc      	itt	lt
   276ba:	2501      	movlt	r5, #1
   276bc:	2300      	movlt	r3, #0
   276be:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   276c2:	4824      	ldr	r0, [pc, #144]	; (27754 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   276c4:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   276c8:	4283      	cmp	r3, r0
   276ca:	d118      	bne.n	276fe <z_add_timeout+0x96>
	node->prev = tail;
   276cc:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   276d0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   276d4:	6044      	str	r4, [r0, #4]
}
   276d6:	e026      	b.n	27726 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   276d8:	f7ff ff7a 	bl	275d0 <elapsed>
   276dc:	3501      	adds	r5, #1
   276de:	f147 0700 	adc.w	r7, r7, #0
   276e2:	182d      	adds	r5, r5, r0
   276e4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   276e8:	e9c4 5704 	strd	r5, r7, [r4, #16]
   276ec:	e7e9      	b.n	276c2 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   276ee:	1a52      	subs	r2, r2, r1
   276f0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   276f4:	4563      	cmp	r3, ip
   276f6:	e9c4 2504 	strd	r2, r5, [r4, #16]
   276fa:	d0e7      	beq.n	276cc <z_add_timeout+0x64>
   276fc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   276fe:	2b00      	cmp	r3, #0
   27700:	d0e4      	beq.n	276cc <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   27702:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   27706:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   2770a:	428a      	cmp	r2, r1
   2770c:	eb75 0e07 	sbcs.w	lr, r5, r7
   27710:	daed      	bge.n	276ee <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   27712:	1a8a      	subs	r2, r1, r2
   27714:	eb67 0505 	sbc.w	r5, r7, r5
   27718:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2771c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2771e:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27722:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27724:	605c      	str	r4, [r3, #4]
	return list->head == list;
   27726:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27728:	4283      	cmp	r3, r0
   2772a:	d00b      	beq.n	27744 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2772c:	429c      	cmp	r4, r3
   2772e:	d109      	bne.n	27744 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   27730:	f7ff ff58 	bl	275e4 <next_timeout>

			if (next_time == 0 ||
   27734:	b118      	cbz	r0, 2773e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   27736:	4b08      	ldr	r3, [pc, #32]	; (27758 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   27738:	691b      	ldr	r3, [r3, #16]
   2773a:	4283      	cmp	r3, r0
   2773c:	d002      	beq.n	27744 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   2773e:	2100      	movs	r1, #0
   27740:	f7eb f9ca 	bl	12ad8 <sys_clock_set_timeout>
	__asm__ volatile(
   27744:	f386 8811 	msr	BASEPRI, r6
   27748:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2774e:	bf00      	nop
   27750:	20001180 	.word	0x20001180
   27754:	20000554 	.word	0x20000554
   27758:	20002534 	.word	0x20002534

0002775c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   2775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27760:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   27762:	f7ff fd6b 	bl	2723c <z_time_slice>
	__asm__ volatile(
   27766:	f04f 0320 	mov.w	r3, #32
   2776a:	f3ef 8411 	mrs	r4, BASEPRI
   2776e:	f383 8811 	msr	BASEPRI, r3
   27772:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   27776:	4e24      	ldr	r6, [pc, #144]	; (27808 <sys_clock_announce+0xac>)
	return list->head == list;
   27778:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2780c <sys_clock_announce+0xb0>
   2777c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2777e:	4d24      	ldr	r5, [pc, #144]	; (27810 <sys_clock_announce+0xb4>)
   27780:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   27784:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27786:	4540      	cmp	r0, r8
		curr_tick += dt;
   27788:	e9d5 1e00 	ldrd	r1, lr, [r5]
   2778c:	ea4f 77e2 	mov.w	r7, r2, asr #31
   27790:	d00b      	beq.n	277aa <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   27792:	b150      	cbz	r0, 277aa <sys_clock_announce+0x4e>
   27794:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   27798:	429a      	cmp	r2, r3
   2779a:	eb77 090c 	sbcs.w	r9, r7, ip
   2779e:	da16      	bge.n	277ce <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   277a0:	1a9b      	subs	r3, r3, r2
   277a2:	eb6c 0c07 	sbc.w	ip, ip, r7
   277a6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   277aa:	1852      	adds	r2, r2, r1
   277ac:	eb4e 0707 	adc.w	r7, lr, r7
   277b0:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   277b4:	2500      	movs	r5, #0
   277b6:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   277b8:	f7ff ff14 	bl	275e4 <next_timeout>
   277bc:	4629      	mov	r1, r5
   277be:	f7eb f98b 	bl	12ad8 <sys_clock_set_timeout>
	__asm__ volatile(
   277c2:	f384 8811 	msr	BASEPRI, r4
   277c6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   277ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   277ce:	1859      	adds	r1, r3, r1
   277d0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   277d4:	1ad3      	subs	r3, r2, r3
   277d6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   277d8:	2200      	movs	r2, #0
   277da:	2300      	movs	r3, #0
   277dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   277e0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   277e4:	f7ff ff26 	bl	27634 <remove_timeout>
   277e8:	f384 8811 	msr	BASEPRI, r4
   277ec:	f3bf 8f6f 	isb	sy
		t->fn(t);
   277f0:	6883      	ldr	r3, [r0, #8]
   277f2:	4798      	blx	r3
	__asm__ volatile(
   277f4:	f04f 0320 	mov.w	r3, #32
   277f8:	f3ef 8411 	mrs	r4, BASEPRI
   277fc:	f383 8811 	msr	BASEPRI, r3
   27800:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   27804:	e7bc      	b.n	27780 <sys_clock_announce+0x24>
   27806:	bf00      	nop
   27808:	20002578 	.word	0x20002578
   2780c:	20000554 	.word	0x20000554
   27810:	20001180 	.word	0x20001180

00027814 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   27814:	b510      	push	{r4, lr}
   27816:	f04f 0320 	mov.w	r3, #32
   2781a:	f3ef 8411 	mrs	r4, BASEPRI
   2781e:	f383 8811 	msr	BASEPRI, r3
   27822:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   27826:	f7eb f989 	bl	12b3c <sys_clock_elapsed>
   2782a:	4a05      	ldr	r2, [pc, #20]	; (27840 <sys_clock_tick_get+0x2c>)
   2782c:	e9d2 3100 	ldrd	r3, r1, [r2]
   27830:	18c0      	adds	r0, r0, r3
   27832:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   27836:	f384 8811 	msr	BASEPRI, r4
   2783a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2783e:	bd10      	pop	{r4, pc}
   27840:	20001180 	.word	0x20001180

00027844 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   27844:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27846:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   2784a:	3301      	adds	r3, #1
   2784c:	f142 0200 	adc.w	r2, r2, #0
   27850:	2b02      	cmp	r3, #2
   27852:	f172 0300 	sbcs.w	r3, r2, #0
{
   27856:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   27858:	d304      	bcc.n	27864 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2785a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2785e:	490d      	ldr	r1, [pc, #52]	; (27894 <z_timer_expiration_handler+0x50>)
   27860:	f7ff ff02 	bl	27668 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   27864:	6b23      	ldr	r3, [r4, #48]	; 0x30
   27866:	3301      	adds	r3, #1
   27868:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   2786a:	6a23      	ldr	r3, [r4, #32]
   2786c:	b10b      	cbz	r3, 27872 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   2786e:	4620      	mov	r0, r4
   27870:	4798      	blx	r3
	return list->head == list;
   27872:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27876:	42a5      	cmp	r5, r4
   27878:	d00a      	beq.n	27890 <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2787a:	b14d      	cbz	r5, 27890 <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   2787c:	4628      	mov	r0, r5
   2787e:	f003 f8dc 	bl	2aa3a <z_unpend_thread_no_timeout>
   27882:	2300      	movs	r3, #0
   27884:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   27886:	4628      	mov	r0, r5
}
   27888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   2788c:	f003 b93f 	b.w	2ab0e <z_ready_thread>
}
   27890:	bd38      	pop	{r3, r4, r5, pc}
   27892:	bf00      	nop
   27894:	00027845 	.word	0x00027845

00027898 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   27898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2789c:	4611      	mov	r1, r2
   2789e:	4605      	mov	r5, r0
   278a0:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   278a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   278a6:	bf08      	it	eq
   278a8:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   278ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   278b0:	4688      	mov	r8, r1
   278b2:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   278b4:	d03c      	beq.n	27930 <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   278b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   278ba:	bf08      	it	eq
   278bc:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   278c0:	4614      	mov	r4, r2
   278c2:	461e      	mov	r6, r3
   278c4:	d013      	beq.n	278ee <z_impl_k_timer_start+0x56>
   278c6:	431a      	orrs	r2, r3
   278c8:	d011      	beq.n	278ee <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   278ca:	f06f 0201 	mvn.w	r2, #1
   278ce:	1b12      	subs	r2, r2, r4
   278d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   278d4:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   278d8:	2a00      	cmp	r2, #0
   278da:	da08      	bge.n	278ee <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   278dc:	3c01      	subs	r4, #1
   278de:	f163 0600 	sbc.w	r6, r3, #0
   278e2:	2c01      	cmp	r4, #1
   278e4:	f176 0300 	sbcs.w	r3, r6, #0
   278e8:	bfbc      	itt	lt
   278ea:	2401      	movlt	r4, #1
   278ec:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   278ee:	f06f 0301 	mvn.w	r3, #1
   278f2:	1a5b      	subs	r3, r3, r1
   278f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   278f8:	eb63 0300 	sbc.w	r3, r3, r0
   278fc:	2b00      	cmp	r3, #0
   278fe:	da08      	bge.n	27912 <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   27900:	1e4a      	subs	r2, r1, #1
   27902:	f160 0700 	sbc.w	r7, r0, #0
   27906:	2f00      	cmp	r7, #0
   27908:	4690      	mov	r8, r2
   2790a:	bfbc      	itt	lt
   2790c:	f04f 0800 	movlt.w	r8, #0
   27910:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   27912:	4628      	mov	r0, r5
   27914:	f003 f987 	bl	2ac26 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   27918:	2300      	movs	r3, #0
   2791a:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   2791c:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   27920:	4642      	mov	r2, r8
   27922:	463b      	mov	r3, r7
   27924:	4628      	mov	r0, r5
   27926:	4903      	ldr	r1, [pc, #12]	; (27934 <z_impl_k_timer_start+0x9c>)
		     duration);
}
   27928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   2792c:	f7ff be9c 	b.w	27668 <z_add_timeout>
}
   27930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   27934:	00027845 	.word	0x00027845

00027938 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   27938:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2793c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   2793e:	4b29      	ldr	r3, [pc, #164]	; (279e4 <z_impl_k_poll+0xac>)
   27940:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   27942:	2301      	movs	r3, #1
   27944:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   27948:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   2794c:	ea52 0305 	orrs.w	r3, r2, r5
{
   27950:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   27952:	bf0c      	ite	eq
   27954:	2301      	moveq	r3, #1
   27956:	2300      	movne	r3, #0
   27958:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   2795c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   2795e:	f003 fa32 	bl	2adc6 <register_events>
   27962:	4681      	mov	r9, r0
	__asm__ volatile(
   27964:	f04f 0320 	mov.w	r3, #32
   27968:	f3ef 8a11 	mrs	sl, BASEPRI
   2796c:	f383 8811 	msr	BASEPRI, r3
   27970:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   27974:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   27978:	b964      	cbnz	r4, 27994 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   2797a:	4601      	mov	r1, r0
   2797c:	4652      	mov	r2, sl
   2797e:	4640      	mov	r0, r8
   27980:	f003 faf2 	bl	2af68 <clear_event_registrations>
	__asm__ volatile(
   27984:	f38a 8811 	msr	BASEPRI, sl
   27988:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   2798c:	4620      	mov	r0, r4
   2798e:	b002      	add	sp, #8
   27990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   27994:	2300      	movs	r3, #0
   27996:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2799a:	ea56 0305 	orrs.w	r3, r6, r5
   2799e:	d106      	bne.n	279ae <z_impl_k_poll+0x76>
   279a0:	f38a 8811 	msr	BASEPRI, sl
   279a4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   279a8:	f06f 040a 	mvn.w	r4, #10
   279ac:	e7ee      	b.n	2798c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   279ae:	e9cd 6500 	strd	r6, r5, [sp]
   279b2:	4a0d      	ldr	r2, [pc, #52]	; (279e8 <z_impl_k_poll+0xb0>)
   279b4:	480d      	ldr	r0, [pc, #52]	; (279ec <z_impl_k_poll+0xb4>)
   279b6:	4651      	mov	r1, sl
   279b8:	f7ff fba4 	bl	27104 <z_pend_curr>
   279bc:	4604      	mov	r4, r0
	__asm__ volatile(
   279be:	f04f 0320 	mov.w	r3, #32
   279c2:	f3ef 8511 	mrs	r5, BASEPRI
   279c6:	f383 8811 	msr	BASEPRI, r3
   279ca:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   279ce:	462a      	mov	r2, r5
   279d0:	4649      	mov	r1, r9
   279d2:	4640      	mov	r0, r8
   279d4:	f003 fac8 	bl	2af68 <clear_event_registrations>
	__asm__ volatile(
   279d8:	f385 8811 	msr	BASEPRI, r5
   279dc:	f3bf 8f6f 	isb	sy
	return swap_rc;
   279e0:	e7d4      	b.n	2798c <z_impl_k_poll+0x54>
   279e2:	bf00      	nop
   279e4:	20002534 	.word	0x20002534
   279e8:	2000055c 	.word	0x2000055c
   279ec:	20002644 	.word	0x20002644

000279f0 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   279f0:	b538      	push	{r3, r4, r5, lr}
   279f2:	4603      	mov	r3, r0
	__asm__ volatile(
   279f4:	f04f 0220 	mov.w	r2, #32
   279f8:	f3ef 8511 	mrs	r5, BASEPRI
   279fc:	f382 8811 	msr	BASEPRI, r2
   27a00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   27a04:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   27a06:	2101      	movs	r1, #1
   27a08:	6081      	str	r1, [r0, #8]
	return list->head == list;
   27a0a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27a0c:	4283      	cmp	r3, r0
   27a0e:	d106      	bne.n	27a1e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   27a10:	f385 8811 	msr	BASEPRI, r5
   27a14:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   27a18:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   27a1a:	4620      	mov	r0, r4
   27a1c:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   27a1e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27a22:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27a24:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27a26:	2300      	movs	r3, #0
	node->prev = NULL;
   27a28:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27a2c:	f003 fa42 	bl	2aeb4 <signal_poll_event>
	z_reschedule(&lock, key);
   27a30:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27a32:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   27a34:	4801      	ldr	r0, [pc, #4]	; (27a3c <z_impl_k_poll_signal_raise+0x4c>)
   27a36:	f7ff fae1 	bl	26ffc <z_reschedule>
	return rc;
   27a3a:	e7ee      	b.n	27a1a <z_impl_k_poll_signal_raise+0x2a>
   27a3c:	20002644 	.word	0x20002644

00027a40 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   27a40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   27a42:	4606      	mov	r6, r0
   27a44:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   27a46:	f002 fe06 	bl	2a656 <k_is_in_isr>
   27a4a:	b978      	cbnz	r0, 27a6c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   27a4c:	4b0b      	ldr	r3, [pc, #44]	; (27a7c <z_thread_aligned_alloc+0x3c>)
   27a4e:	689b      	ldr	r3, [r3, #8]
   27a50:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   27a52:	b17c      	cbz	r4, 27a74 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   27a54:	1d2a      	adds	r2, r5, #4
   27a56:	d209      	bcs.n	27a6c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   27a58:	2000      	movs	r0, #0
   27a5a:	2100      	movs	r1, #0
   27a5c:	e9cd 0100 	strd	r0, r1, [sp]
   27a60:	f046 0104 	orr.w	r1, r6, #4
   27a64:	4620      	mov	r0, r4
   27a66:	f002 fd54 	bl	2a512 <k_heap_aligned_alloc>
	if (mem == NULL) {
   27a6a:	b908      	cbnz	r0, 27a70 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   27a6c:	2400      	movs	r4, #0
	}

	return ret;
   27a6e:	e001      	b.n	27a74 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   27a70:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   27a72:	1d04      	adds	r4, r0, #4
}
   27a74:	4620      	mov	r0, r4
   27a76:	b002      	add	sp, #8
   27a78:	bd70      	pop	{r4, r5, r6, pc}
   27a7a:	bf00      	nop
   27a7c:	20002534 	.word	0x20002534

00027a80 <gpio_pin_configure.constprop.0>:
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   27a80:	b430      	push	{r4, r5}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   27a82:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   27a84:	6885      	ldr	r5, [r0, #8]
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   27a86:	2301      	movs	r3, #1
   27a88:	fa03 f201 	lsl.w	r2, r3, r1
   27a8c:	6823      	ldr	r3, [r4, #0]
   27a8e:	ea23 0302 	bic.w	r3, r3, r2
   27a92:	6023      	str	r3, [r4, #0]
	}

	return api->pin_configure(port, pin, flags);
   27a94:	f44f 6220 	mov.w	r2, #2560	; 0xa00
   27a98:	682b      	ldr	r3, [r5, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   27a9a:	bc30      	pop	{r4, r5}
   27a9c:	4718      	bx	r3

00027a9e <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   27a9e:	2301      	movs	r3, #1
   27aa0:	fa03 f101 	lsl.w	r1, r3, r1
   27aa4:	6903      	ldr	r3, [r0, #16]
   27aa6:	681b      	ldr	r3, [r3, #0]
   27aa8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   27aaa:	bf18      	it	ne
   27aac:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   27ab0:	b112      	cbz	r2, 27ab8 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   27ab2:	6883      	ldr	r3, [r0, #8]
   27ab4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   27ab6:	4718      	bx	r3
   27ab8:	6883      	ldr	r3, [r0, #8]
   27aba:	691b      	ldr	r3, [r3, #16]
   27abc:	e7fb      	b.n	27ab6 <gpio_pin_set.isra.0+0x18>

00027abe <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   27abe:	4603      	mov	r3, r0
   27ac0:	b140      	cbz	r0, 27ad4 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27ac2:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27ac4:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   27ac8:	2a02      	cmp	r2, #2
   27aca:	d006      	beq.n	27ada <sys_notify_validate+0x1c>
   27acc:	2a03      	cmp	r2, #3
   27ace:	d004      	beq.n	27ada <sys_notify_validate+0x1c>
   27ad0:	2a01      	cmp	r2, #1
   27ad2:	d005      	beq.n	27ae0 <sys_notify_validate+0x22>
		return -EINVAL;
   27ad4:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   27ad8:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   27ada:	681a      	ldr	r2, [r3, #0]
   27adc:	2a00      	cmp	r2, #0
   27ade:	d0f9      	beq.n	27ad4 <sys_notify_validate+0x16>
		notify->result = 0;
   27ae0:	2000      	movs	r0, #0
   27ae2:	6098      	str	r0, [r3, #8]
   27ae4:	4770      	bx	lr

00027ae6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   27ae6:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   27ae8:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   27aec:	2a02      	cmp	r2, #2
{
   27aee:	b510      	push	{r4, lr}
   27af0:	4603      	mov	r3, r0
	notify->result = res;
   27af2:	6081      	str	r1, [r0, #8]
	switch (method) {
   27af4:	d00a      	beq.n	27b0c <sys_notify_finalize+0x26>
   27af6:	2a03      	cmp	r2, #3
   27af8:	d10b      	bne.n	27b12 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   27afa:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   27afc:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   27afe:	2200      	movs	r2, #0
   27b00:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   27b02:	b108      	cbz	r0, 27b08 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   27b04:	f7ff ff74 	bl	279f0 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   27b08:	4620      	mov	r0, r4
   27b0a:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   27b0c:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   27b0e:	2400      	movs	r4, #0
		break;
   27b10:	e7f5      	b.n	27afe <sys_notify_finalize+0x18>
	switch (method) {
   27b12:	2400      	movs	r4, #0
   27b14:	4620      	mov	r0, r4
   27b16:	e7f2      	b.n	27afe <sys_notify_finalize+0x18>

00027b18 <arch_printk_char_out>:
}
   27b18:	2000      	movs	r0, #0
   27b1a:	4770      	bx	lr

00027b1c <str_out>:
{
   27b1c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27b1e:	688a      	ldr	r2, [r1, #8]
   27b20:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   27b22:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   27b24:	b114      	cbz	r4, 27b2c <str_out+0x10>
   27b26:	684b      	ldr	r3, [r1, #4]
   27b28:	4293      	cmp	r3, r2
   27b2a:	dc01      	bgt.n	27b30 <str_out+0x14>
		ctx->count++;
   27b2c:	608d      	str	r5, [r1, #8]
}
   27b2e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   27b30:	3b01      	subs	r3, #1
   27b32:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   27b34:	bf08      	it	eq
   27b36:	2200      	moveq	r2, #0
   27b38:	608d      	str	r5, [r1, #8]
   27b3a:	bf0c      	ite	eq
   27b3c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   27b3e:	54a0      	strbne	r0, [r4, r2]
   27b40:	e7f5      	b.n	27b2e <str_out+0x12>

00027b42 <printk>:
{
   27b42:	b40f      	push	{r0, r1, r2, r3}
   27b44:	b507      	push	{r0, r1, r2, lr}
   27b46:	a904      	add	r1, sp, #16
   27b48:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   27b4c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   27b4e:	f7e9 fcad 	bl	114ac <vprintk>
}
   27b52:	b003      	add	sp, #12
   27b54:	f85d eb04 	ldr.w	lr, [sp], #4
   27b58:	b004      	add	sp, #16
   27b5a:	4770      	bx	lr

00027b5c <snprintk>:
{
   27b5c:	b40c      	push	{r2, r3}
   27b5e:	b507      	push	{r0, r1, r2, lr}
   27b60:	ab04      	add	r3, sp, #16
   27b62:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   27b66:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   27b68:	f7e9 fcae 	bl	114c8 <vsnprintk>
}
   27b6c:	b003      	add	sp, #12
   27b6e:	f85d eb04 	ldr.w	lr, [sp], #4
   27b72:	b002      	add	sp, #8
   27b74:	4770      	bx	lr

00027b76 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27b76:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   27b78:	f013 0307 	ands.w	r3, r3, #7
   27b7c:	d105      	bne.n	27b8a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   27b7e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   27b80:	2b00      	cmp	r3, #0
   27b82:	bf0c      	ite	eq
   27b84:	2000      	moveq	r0, #0
   27b86:	2003      	movne	r0, #3
   27b88:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   27b8a:	2b02      	cmp	r3, #2
   27b8c:	d105      	bne.n	27b9a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   27b8e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   27b90:	2b00      	cmp	r3, #0
   27b92:	bf14      	ite	ne
   27b94:	2000      	movne	r0, #0
   27b96:	2004      	moveq	r0, #4
   27b98:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   27b9a:	2b01      	cmp	r3, #1
   27b9c:	d105      	bne.n	27baa <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   27b9e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   27ba0:	2b00      	cmp	r3, #0
   27ba2:	bf0c      	ite	eq
   27ba4:	2000      	moveq	r0, #0
   27ba6:	2005      	movne	r0, #5
   27ba8:	4770      	bx	lr
	int evt = EVT_NOP;
   27baa:	2000      	movs	r0, #0
}
   27bac:	4770      	bx	lr

00027bae <notify_one>:
{
   27bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27bb2:	460d      	mov	r5, r1
   27bb4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27bb6:	4619      	mov	r1, r3
   27bb8:	1d28      	adds	r0, r5, #4
{
   27bba:	4690      	mov	r8, r2
   27bbc:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   27bbe:	f7ff ff92 	bl	27ae6 <sys_notify_finalize>
	if (cb) {
   27bc2:	4604      	mov	r4, r0
   27bc4:	b138      	cbz	r0, 27bd6 <notify_one+0x28>
		cb(mgr, cli, state, res);
   27bc6:	4633      	mov	r3, r6
   27bc8:	4642      	mov	r2, r8
   27bca:	4629      	mov	r1, r5
   27bcc:	4638      	mov	r0, r7
   27bce:	46a4      	mov	ip, r4
}
   27bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   27bd4:	4760      	bx	ip
}
   27bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027bda <transition_complete>:
{
   27bda:	b410      	push	{r4}
	__asm__ volatile(
   27bdc:	f04f 0420 	mov.w	r4, #32
   27be0:	f3ef 8211 	mrs	r2, BASEPRI
   27be4:	f384 8811 	msr	BASEPRI, r4
   27be8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   27bec:	6141      	str	r1, [r0, #20]
}
   27bee:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   27bf0:	2101      	movs	r1, #1
   27bf2:	f7e9 bc7d 	b.w	114f0 <process_event>

00027bf6 <validate_args>:
{
   27bf6:	b510      	push	{r4, lr}
   27bf8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   27bfa:	b140      	cbz	r0, 27c0e <validate_args+0x18>
   27bfc:	b139      	cbz	r1, 27c0e <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   27bfe:	1d08      	adds	r0, r1, #4
   27c00:	f7ff ff5d 	bl	27abe <sys_notify_validate>
	if ((rv == 0)
   27c04:	b928      	cbnz	r0, 27c12 <validate_args+0x1c>
	    && ((cli->notify.flags
   27c06:	68a3      	ldr	r3, [r4, #8]
   27c08:	f033 0303 	bics.w	r3, r3, #3
   27c0c:	d001      	beq.n	27c12 <validate_args+0x1c>
		rv = -EINVAL;
   27c0e:	f06f 0015 	mvn.w	r0, #21
}
   27c12:	bd10      	pop	{r4, pc}

00027c14 <onoff_manager_init>:
{
   27c14:	b538      	push	{r3, r4, r5, lr}
   27c16:	460c      	mov	r4, r1
	if ((mgr == NULL)
   27c18:	4605      	mov	r5, r0
   27c1a:	b158      	cbz	r0, 27c34 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   27c1c:	b151      	cbz	r1, 27c34 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   27c1e:	680b      	ldr	r3, [r1, #0]
   27c20:	b143      	cbz	r3, 27c34 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   27c22:	684b      	ldr	r3, [r1, #4]
   27c24:	b133      	cbz	r3, 27c34 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   27c26:	221c      	movs	r2, #28
   27c28:	2100      	movs	r1, #0
   27c2a:	f001 f81f 	bl	28c6c <memset>
   27c2e:	612c      	str	r4, [r5, #16]
	return 0;
   27c30:	2000      	movs	r0, #0
}
   27c32:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   27c34:	f06f 0015 	mvn.w	r0, #21
   27c38:	e7fb      	b.n	27c32 <onoff_manager_init+0x1e>

00027c3a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   27c3a:	b570      	push	{r4, r5, r6, lr}
   27c3c:	4604      	mov	r4, r0
   27c3e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   27c40:	f7ff ffd9 	bl	27bf6 <validate_args>

	if (rv < 0) {
   27c44:	1e05      	subs	r5, r0, #0
   27c46:	db31      	blt.n	27cac <onoff_request+0x72>
   27c48:	f04f 0320 	mov.w	r3, #32
   27c4c:	f3ef 8111 	mrs	r1, BASEPRI
   27c50:	f383 8811 	msr	BASEPRI, r3
   27c54:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   27c58:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27c5a:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   27c5c:	f64f 75ff 	movw	r5, #65535	; 0xffff
   27c60:	42ab      	cmp	r3, r5
   27c62:	f000 0207 	and.w	r2, r0, #7
   27c66:	d02e      	beq.n	27cc6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   27c68:	2a02      	cmp	r2, #2
   27c6a:	d10e      	bne.n	27c8a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   27c6c:	3301      	adds	r3, #1
   27c6e:	8363      	strh	r3, [r4, #26]
	rv = state;
   27c70:	4615      	mov	r5, r2
		notify = true;
   27c72:	2301      	movs	r3, #1
	__asm__ volatile(
   27c74:	f381 8811 	msr	BASEPRI, r1
   27c78:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   27c7c:	b1b3      	cbz	r3, 27cac <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   27c7e:	2300      	movs	r3, #0
   27c80:	4631      	mov	r1, r6
   27c82:	4620      	mov	r0, r4
   27c84:	f7ff ff93 	bl	27bae <notify_one>
   27c88:	e010      	b.n	27cac <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   27c8a:	0783      	lsls	r3, r0, #30
   27c8c:	d001      	beq.n	27c92 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   27c8e:	2a06      	cmp	r2, #6
   27c90:	d10e      	bne.n	27cb0 <onoff_request+0x76>
	parent->next = child;
   27c92:	2300      	movs	r3, #0
   27c94:	6033      	str	r3, [r6, #0]
	return list->tail;
   27c96:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   27c98:	b993      	cbnz	r3, 27cc0 <onoff_request+0x86>
	list->head = node;
   27c9a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   27c9e:	4615      	mov	r5, r2
   27ca0:	b962      	cbnz	r2, 27cbc <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   27ca2:	460a      	mov	r2, r1
   27ca4:	4620      	mov	r0, r4
   27ca6:	2102      	movs	r1, #2
   27ca8:	f7e9 fc22 	bl	114f0 <process_event>
		}
	}

	return rv;
}
   27cac:	4628      	mov	r0, r5
   27cae:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   27cb0:	2a05      	cmp	r2, #5
   27cb2:	bf0c      	ite	eq
   27cb4:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   27cb8:	f06f 0504 	mvnne.w	r5, #4
   27cbc:	2300      	movs	r3, #0
   27cbe:	e7d9      	b.n	27c74 <onoff_request+0x3a>
	parent->next = child;
   27cc0:	601e      	str	r6, [r3, #0]
	list->tail = node;
   27cc2:	6066      	str	r6, [r4, #4]
}
   27cc4:	e7eb      	b.n	27c9e <onoff_request+0x64>
		rv = -EAGAIN;
   27cc6:	f06f 050a 	mvn.w	r5, #10
   27cca:	e7f7      	b.n	27cbc <onoff_request+0x82>

00027ccc <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   27ccc:	b510      	push	{r4, lr}
	__asm__ volatile(
   27cce:	f04f 0320 	mov.w	r3, #32
   27cd2:	f3ef 8211 	mrs	r2, BASEPRI
   27cd6:	f383 8811 	msr	BASEPRI, r3
   27cda:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   27cde:	8b04      	ldrh	r4, [r0, #24]
   27ce0:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   27ce4:	2c02      	cmp	r4, #2
   27ce6:	d00a      	beq.n	27cfe <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   27ce8:	2c01      	cmp	r4, #1
   27cea:	bf0c      	ite	eq
   27cec:	f06f 0004 	mvneq.w	r0, #4
   27cf0:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   27cf4:	f382 8811 	msr	BASEPRI, r2
   27cf8:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   27cfc:	e008      	b.n	27d10 <onoff_release+0x44>
	mgr->refs -= 1U;
   27cfe:	8b43      	ldrh	r3, [r0, #26]
   27d00:	3b01      	subs	r3, #1
   27d02:	b29b      	uxth	r3, r3
   27d04:	8343      	strh	r3, [r0, #26]
	if (stop) {
   27d06:	b923      	cbnz	r3, 27d12 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   27d08:	4621      	mov	r1, r4
   27d0a:	f7e9 fbf1 	bl	114f0 <process_event>
	int rv = state;
   27d0e:	4620      	mov	r0, r4
}
   27d10:	bd10      	pop	{r4, pc}
	int rv = state;
   27d12:	4620      	mov	r0, r4
   27d14:	e7ee      	b.n	27cf4 <onoff_release+0x28>

00027d16 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   27d16:	4604      	mov	r4, r0
   27d18:	b508      	push	{r3, lr}
   27d1a:	4608      	mov	r0, r1
   27d1c:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   27d1e:	461a      	mov	r2, r3
   27d20:	47a0      	blx	r4
	return z_impl_k_current_get();
   27d22:	f7ff fbc1 	bl	274a8 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   27d26:	f7eb fb79 	bl	1341c <z_impl_k_thread_abort>

00027d2a <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   27d2a:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   27d2c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   27d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   27d34:	bf2c      	ite	cs
   27d36:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   27d3a:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   27d3e:	4770      	bx	lr

00027d40 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   27d40:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   27d44:	6880      	ldr	r0, [r0, #8]
   27d46:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   27d4a:	bf2c      	ite	cs
   27d4c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   27d50:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   27d54:	4770      	bx	lr

00027d56 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   27d56:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   27d58:	2201      	movs	r2, #1
   27d5a:	f7ff ffe6 	bl	27d2a <chunk_field>
}
   27d5e:	40d0      	lsrs	r0, r2
   27d60:	bd08      	pop	{r3, pc}

00027d62 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   27d62:	6883      	ldr	r3, [r0, #8]
   27d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   27d68:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   27d6c:	d308      	bcc.n	27d80 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   27d6e:	684b      	ldr	r3, [r1, #4]
		if (used) {
   27d70:	b11a      	cbz	r2, 27d7a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   27d72:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27d76:	604b      	str	r3, [r1, #4]
   27d78:	4770      	bx	lr
   27d7a:	f023 0301 	bic.w	r3, r3, #1
   27d7e:	e7fa      	b.n	27d76 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27d80:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   27d82:	b11a      	cbz	r2, 27d8c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   27d84:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27d88:	804b      	strh	r3, [r1, #2]
		}
	}
}
   27d8a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   27d8c:	f023 0301 	bic.w	r3, r3, #1
   27d90:	e7fa      	b.n	27d88 <set_chunk_used+0x26>

00027d92 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   27d92:	0053      	lsls	r3, r2, #1
   27d94:	2201      	movs	r2, #1
   27d96:	f7ff bfd3 	b.w	27d40 <chunk_set>

00027d9a <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   27d9a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   27d9e:	bf2c      	ite	cs
   27da0:	2008      	movcs	r0, #8
   27da2:	2004      	movcc	r0, #4
	return chunksz * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   27da4:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   27da6:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   27da8:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   27dac:	fab0 f080 	clz	r0, r0
}
   27db0:	f1c0 001f 	rsb	r0, r0, #31
   27db4:	4770      	bx	lr

00027db6 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   27db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27dba:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   27dbc:	2203      	movs	r2, #3
   27dbe:	460e      	mov	r6, r1
   27dc0:	4604      	mov	r4, r0
   27dc2:	f7ff ffb2 	bl	27d2a <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   27dc6:	4286      	cmp	r6, r0
   27dc8:	4605      	mov	r5, r0
   27dca:	f107 0804 	add.w	r8, r7, #4
   27dce:	d10b      	bne.n	27de8 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   27dd0:	2301      	movs	r3, #1
   27dd2:	fa03 f707 	lsl.w	r7, r3, r7
   27dd6:	68e3      	ldr	r3, [r4, #12]
   27dd8:	ea23 0307 	bic.w	r3, r3, r7
   27ddc:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   27dde:	2300      	movs	r3, #0
   27de0:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   27de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   27de8:	4631      	mov	r1, r6
   27dea:	2202      	movs	r2, #2
   27dec:	4620      	mov	r0, r4
   27dee:	f7ff ff9c 	bl	27d2a <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   27df2:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   27df4:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   27df6:	4601      	mov	r1, r0
		b->next = second;
   27df8:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   27dfc:	4620      	mov	r0, r4
   27dfe:	2203      	movs	r2, #3
   27e00:	f7ff ff9e 	bl	27d40 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   27e04:	4633      	mov	r3, r6
   27e06:	4629      	mov	r1, r5
   27e08:	4620      	mov	r0, r4
   27e0a:	2202      	movs	r2, #2
}
   27e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27e10:	f7ff bf96 	b.w	27d40 <chunk_set>

00027e14 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   27e14:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   27e16:	6886      	ldr	r6, [r0, #8]
   27e18:	460d      	mov	r5, r1
   27e1a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   27e1c:	f7ff ff9b 	bl	27d56 <chunk_size>
   27e20:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   27e24:	4601      	mov	r1, r0
   27e26:	d301      	bcc.n	27e2c <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   27e28:	2801      	cmp	r0, #1
   27e2a:	d009      	beq.n	27e40 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   27e2c:	4630      	mov	r0, r6
   27e2e:	f7ff ffb4 	bl	27d9a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   27e32:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   27e34:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   27e36:	4620      	mov	r0, r4
	}
}
   27e38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   27e3c:	f7ff bfbb 	b.w	27db6 <free_list_remove_bidx>
}
   27e40:	bd70      	pop	{r4, r5, r6, pc}

00027e42 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   27e42:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27e46:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   27e48:	6880      	ldr	r0, [r0, #8]
{
   27e4a:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   27e4c:	f7ff ffa5 	bl	27d9a <bucket_idx.isra.0>
   27e50:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   27e54:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   27e56:	f8da 9010 	ldr.w	r9, [sl, #16]
   27e5a:	f1b9 0f00 	cmp.w	r9, #0
   27e5e:	d01b      	beq.n	27e98 <alloc_chunk+0x56>
   27e60:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   27e62:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   27e66:	4628      	mov	r0, r5
   27e68:	4621      	mov	r1, r4
   27e6a:	f7ff ff74 	bl	27d56 <chunk_size>
   27e6e:	4540      	cmp	r0, r8
   27e70:	d307      	bcc.n	27e82 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   27e72:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   27e74:	4621      	mov	r1, r4
   27e76:	4628      	mov	r0, r5
   27e78:	f7ff ff9d 	bl	27db6 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   27e7c:	4620      	mov	r0, r4
   27e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   27e82:	2203      	movs	r2, #3
   27e84:	4621      	mov	r1, r4
   27e86:	4628      	mov	r0, r5
   27e88:	f7ff ff4f 	bl	27d2a <chunk_field>
		} while (--i && b->next != first);
   27e8c:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   27e8e:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   27e92:	d001      	beq.n	27e98 <alloc_chunk+0x56>
   27e94:	4581      	cmp	r9, r0
   27e96:	d1e4      	bne.n	27e62 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   27e98:	68e9      	ldr	r1, [r5, #12]
   27e9a:	3601      	adds	r6, #1
   27e9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   27ea0:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   27ea2:	400c      	ands	r4, r1
   27ea4:	d0ea      	beq.n	27e7c <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   27ea6:	fa94 f2a4 	rbit	r2, r4
   27eaa:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   27eae:	1d13      	adds	r3, r2, #4
   27eb0:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   27eb4:	e7de      	b.n	27e74 <alloc_chunk+0x32>

00027eb6 <split_chunks>:
{
   27eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27eba:	4614      	mov	r4, r2
   27ebc:	4605      	mov	r5, r0
   27ebe:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   27ec0:	f7ff ff49 	bl	27d56 <chunk_size>
	chunksz_t lsz = rc - lc;
   27ec4:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   27ec8:	1b37      	subs	r7, r6, r4
   27eca:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   27ecc:	4642      	mov	r2, r8
   27ece:	4631      	mov	r1, r6
   27ed0:	4628      	mov	r0, r5
   27ed2:	f7ff ff5e 	bl	27d92 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   27ed6:	463a      	mov	r2, r7
   27ed8:	4621      	mov	r1, r4
   27eda:	4628      	mov	r0, r5
   27edc:	f7ff ff59 	bl	27d92 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   27ee0:	4643      	mov	r3, r8
   27ee2:	2200      	movs	r2, #0
   27ee4:	4621      	mov	r1, r4
   27ee6:	4628      	mov	r0, r5
   27ee8:	f7ff ff2a 	bl	27d40 <chunk_set>
	return c + chunk_size(h, c);
   27eec:	4621      	mov	r1, r4
   27eee:	4628      	mov	r0, r5
   27ef0:	f7ff ff31 	bl	27d56 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   27ef4:	463b      	mov	r3, r7
   27ef6:	1821      	adds	r1, r4, r0
   27ef8:	2200      	movs	r2, #0
   27efa:	4628      	mov	r0, r5
}
   27efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27f00:	f7ff bf1e 	b.w	27d40 <chunk_set>

00027f04 <merge_chunks>:
{
   27f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27f08:	4616      	mov	r6, r2
   27f0a:	4604      	mov	r4, r0
   27f0c:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   27f0e:	f7ff ff22 	bl	27d56 <chunk_size>
   27f12:	4631      	mov	r1, r6
   27f14:	4605      	mov	r5, r0
   27f16:	4620      	mov	r0, r4
   27f18:	f7ff ff1d 	bl	27d56 <chunk_size>
   27f1c:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   27f1e:	462a      	mov	r2, r5
   27f20:	4639      	mov	r1, r7
   27f22:	4620      	mov	r0, r4
   27f24:	f7ff ff35 	bl	27d92 <set_chunk_size>
	return c + chunk_size(h, c);
   27f28:	4631      	mov	r1, r6
   27f2a:	4620      	mov	r0, r4
   27f2c:	f7ff ff13 	bl	27d56 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   27f30:	462b      	mov	r3, r5
   27f32:	1831      	adds	r1, r6, r0
   27f34:	2200      	movs	r2, #0
   27f36:	4620      	mov	r0, r4
}
   27f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27f3c:	f7ff bf00 	b.w	27d40 <chunk_set>

00027f40 <free_list_add>:
{
   27f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   27f44:	6886      	ldr	r6, [r0, #8]
   27f46:	460d      	mov	r5, r1
   27f48:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   27f4a:	f7ff ff04 	bl	27d56 <chunk_size>
   27f4e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   27f52:	4601      	mov	r1, r0
   27f54:	d301      	bcc.n	27f5a <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   27f56:	2801      	cmp	r0, #1
   27f58:	d033      	beq.n	27fc2 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   27f5a:	4630      	mov	r0, r6
   27f5c:	f7ff ff1d 	bl	27d9a <bucket_idx.isra.0>
	if (b->next == 0U) {
   27f60:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   27f64:	6916      	ldr	r6, [r2, #16]
   27f66:	b99e      	cbnz	r6, 27f90 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   27f68:	2301      	movs	r3, #1
   27f6a:	fa03 f000 	lsl.w	r0, r3, r0
   27f6e:	68e3      	ldr	r3, [r4, #12]
   27f70:	4303      	orrs	r3, r0
   27f72:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   27f74:	4629      	mov	r1, r5
		b->next = c;
   27f76:	6115      	str	r5, [r2, #16]
   27f78:	462b      	mov	r3, r5
   27f7a:	2202      	movs	r2, #2
   27f7c:	4620      	mov	r0, r4
   27f7e:	f7ff fedf 	bl	27d40 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   27f82:	2203      	movs	r2, #3
   27f84:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   27f86:	4620      	mov	r0, r4
}
   27f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   27f8c:	f7ff bed8 	b.w	27d40 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   27f90:	2202      	movs	r2, #2
   27f92:	4631      	mov	r1, r6
   27f94:	4620      	mov	r0, r4
   27f96:	f7ff fec8 	bl	27d2a <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   27f9a:	4629      	mov	r1, r5
   27f9c:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   27f9e:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   27fa0:	4620      	mov	r0, r4
   27fa2:	f7ff fecd 	bl	27d40 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   27fa6:	2203      	movs	r2, #3
   27fa8:	4633      	mov	r3, r6
   27faa:	4629      	mov	r1, r5
   27fac:	4620      	mov	r0, r4
   27fae:	f7ff fec7 	bl	27d40 <chunk_set>
   27fb2:	4639      	mov	r1, r7
   27fb4:	462b      	mov	r3, r5
   27fb6:	4620      	mov	r0, r4
   27fb8:	f7ff fec2 	bl	27d40 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   27fbc:	2202      	movs	r2, #2
   27fbe:	4631      	mov	r1, r6
   27fc0:	e7e1      	b.n	27f86 <free_list_add+0x46>
   27fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00027fc6 <free_chunk>:
{
   27fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27fc8:	460c      	mov	r4, r1
   27fca:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   27fcc:	f7ff fec3 	bl	27d56 <chunk_size>
   27fd0:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   27fd2:	2201      	movs	r2, #1
   27fd4:	4631      	mov	r1, r6
   27fd6:	4628      	mov	r0, r5
   27fd8:	f7ff fea7 	bl	27d2a <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   27fdc:	07c3      	lsls	r3, r0, #31
   27fde:	d40c      	bmi.n	27ffa <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   27fe0:	4631      	mov	r1, r6
   27fe2:	4628      	mov	r0, r5
   27fe4:	f7ff ff16 	bl	27e14 <free_list_remove>
	return c + chunk_size(h, c);
   27fe8:	4621      	mov	r1, r4
   27fea:	4628      	mov	r0, r5
   27fec:	f7ff feb3 	bl	27d56 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   27ff0:	4621      	mov	r1, r4
   27ff2:	1822      	adds	r2, r4, r0
   27ff4:	4628      	mov	r0, r5
   27ff6:	f7ff ff85 	bl	27f04 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   27ffa:	2200      	movs	r2, #0
   27ffc:	4621      	mov	r1, r4
   27ffe:	4628      	mov	r0, r5
   28000:	f7ff fe93 	bl	27d2a <chunk_field>
   28004:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28006:	2201      	movs	r2, #1
   28008:	4639      	mov	r1, r7
   2800a:	4628      	mov	r0, r5
   2800c:	f7ff fe8d 	bl	27d2a <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   28010:	ea10 0602 	ands.w	r6, r0, r2
   28014:	d113      	bne.n	2803e <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   28016:	4639      	mov	r1, r7
   28018:	4628      	mov	r0, r5
   2801a:	f7ff fefb 	bl	27e14 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   2801e:	4621      	mov	r1, r4
   28020:	4632      	mov	r2, r6
   28022:	4628      	mov	r0, r5
   28024:	f7ff fe81 	bl	27d2a <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   28028:	4622      	mov	r2, r4
   2802a:	1a21      	subs	r1, r4, r0
   2802c:	4628      	mov	r0, r5
   2802e:	f7ff ff69 	bl	27f04 <merge_chunks>
   28032:	4621      	mov	r1, r4
   28034:	4632      	mov	r2, r6
   28036:	4628      	mov	r0, r5
   28038:	f7ff fe77 	bl	27d2a <chunk_field>
   2803c:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   2803e:	4621      	mov	r1, r4
   28040:	4628      	mov	r0, r5
}
   28042:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   28046:	f7ff bf7b 	b.w	27f40 <free_list_add>

0002804a <sys_heap_free>:
{
   2804a:	b510      	push	{r4, lr}
	if (mem == NULL) {
   2804c:	b191      	cbz	r1, 28074 <sys_heap_free+0x2a>
   2804e:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   28050:	6883      	ldr	r3, [r0, #8]
   28052:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28056:	bf2c      	ite	cs
   28058:	2408      	movcs	r4, #8
   2805a:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   2805c:	1b0c      	subs	r4, r1, r4
   2805e:	1a24      	subs	r4, r4, r0
   28060:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   28062:	4621      	mov	r1, r4
   28064:	2200      	movs	r2, #0
   28066:	f7ff fe7c 	bl	27d62 <set_chunk_used>
	free_chunk(h, c);
   2806a:	4621      	mov	r1, r4
}
   2806c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   28070:	f7ff bfa9 	b.w	27fc6 <free_chunk>
}
   28074:	bd10      	pop	{r4, pc}

00028076 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   28076:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   28078:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   2807a:	b909      	cbnz	r1, 28080 <sys_heap_alloc+0xa>
		return NULL;
   2807c:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   2807e:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   28080:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   28082:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   28086:	d9f9      	bls.n	2807c <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   28088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2808c:	bf2c      	ite	cs
   2808e:	2208      	movcs	r2, #8
   28090:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   28092:	1dcc      	adds	r4, r1, #7
   28094:	4414      	add	r4, r2
   28096:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   28098:	4621      	mov	r1, r4
   2809a:	4630      	mov	r0, r6
   2809c:	f7ff fed1 	bl	27e42 <alloc_chunk>
	if (c == 0U) {
   280a0:	4605      	mov	r5, r0
   280a2:	2800      	cmp	r0, #0
   280a4:	d0ea      	beq.n	2807c <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   280a6:	4601      	mov	r1, r0
   280a8:	4630      	mov	r0, r6
   280aa:	f7ff fe54 	bl	27d56 <chunk_size>
   280ae:	42a0      	cmp	r0, r4
   280b0:	d909      	bls.n	280c6 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   280b2:	442c      	add	r4, r5
   280b4:	4629      	mov	r1, r5
   280b6:	4630      	mov	r0, r6
   280b8:	4622      	mov	r2, r4
   280ba:	f7ff fefc 	bl	27eb6 <split_chunks>
		free_list_add(h, c + chunk_sz);
   280be:	4621      	mov	r1, r4
   280c0:	4630      	mov	r0, r6
   280c2:	f7ff ff3d 	bl	27f40 <free_list_add>
	set_chunk_used(h, c, true);
   280c6:	4629      	mov	r1, r5
   280c8:	4630      	mov	r0, r6
   280ca:	2201      	movs	r2, #1
   280cc:	f7ff fe49 	bl	27d62 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   280d0:	68b3      	ldr	r3, [r6, #8]
   280d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   280d6:	bf2c      	ite	cs
   280d8:	2308      	movcs	r3, #8
   280da:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   280dc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   280e0:	4428      	add	r0, r5
	return chunk_mem(h, c);
   280e2:	e7cc      	b.n	2807e <sys_heap_alloc+0x8>

000280e4 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   280e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   280e8:	6806      	ldr	r6, [r0, #0]
{
   280ea:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   280ec:	424a      	negs	r2, r1
   280ee:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   280f2:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   280f6:	68b5      	ldr	r5, [r6, #8]
{
   280f8:	460b      	mov	r3, r1
	if (align != rew) {
   280fa:	d00f      	beq.n	2811c <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   280fc:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   28100:	bf34      	ite	cc
   28102:	2104      	movcc	r1, #4
   28104:	2108      	movcs	r1, #8
   28106:	42b9      	cmp	r1, r7
   28108:	460a      	mov	r2, r1
   2810a:	46b9      	mov	r9, r7
   2810c:	bf28      	it	cs
   2810e:	463a      	movcs	r2, r7
		align -= rew;
   28110:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   28112:	b994      	cbnz	r4, 2813a <sys_heap_aligned_alloc+0x56>
		return NULL;
   28114:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   28116:	4628      	mov	r0, r5
   28118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2811c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   28120:	bf34      	ite	cc
   28122:	2204      	movcc	r2, #4
   28124:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   28126:	4291      	cmp	r1, r2
   28128:	d804      	bhi.n	28134 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   2812a:	4621      	mov	r1, r4
}
   2812c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   28130:	f7ff bfa1 	b.w	28076 <sys_heap_alloc>
		rew = 0;
   28134:	f04f 0900 	mov.w	r9, #0
   28138:	e7eb      	b.n	28112 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2813a:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   2813e:	d9e9      	bls.n	28114 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   28140:	1de1      	adds	r1, r4, #7
   28142:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   28146:	4439      	add	r1, r7
   28148:	bf2c      	ite	cs
   2814a:	2308      	movcs	r3, #8
   2814c:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2814e:	1a89      	subs	r1, r1, r2
   28150:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   28152:	08c9      	lsrs	r1, r1, #3
   28154:	4630      	mov	r0, r6
   28156:	f7ff fe74 	bl	27e42 <alloc_chunk>
	if (c0 == 0) {
   2815a:	4680      	mov	r8, r0
   2815c:	2800      	cmp	r0, #0
   2815e:	d0d9      	beq.n	28114 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   28160:	68b3      	ldr	r3, [r6, #8]
   28162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   28166:	bf2c      	ite	cs
   28168:	2308      	movcs	r3, #8
   2816a:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   2816c:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   28170:	441d      	add	r5, r3
   28172:	1e7a      	subs	r2, r7, #1
   28174:	4435      	add	r5, r6
   28176:	427f      	negs	r7, r7
   28178:	4415      	add	r5, r2
   2817a:	403d      	ands	r5, r7
   2817c:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   28180:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   28182:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   28184:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   28186:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   28188:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2818c:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   2818e:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   28192:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   28196:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2819a:	d208      	bcs.n	281ae <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   2819c:	4601      	mov	r1, r0
   2819e:	463a      	mov	r2, r7
   281a0:	4630      	mov	r0, r6
   281a2:	f7ff fe88 	bl	27eb6 <split_chunks>
		free_list_add(h, c0);
   281a6:	4641      	mov	r1, r8
   281a8:	4630      	mov	r0, r6
   281aa:	f7ff fec9 	bl	27f40 <free_list_add>
	return c + chunk_size(h, c);
   281ae:	4639      	mov	r1, r7
   281b0:	4630      	mov	r0, r6
   281b2:	f7ff fdd0 	bl	27d56 <chunk_size>
   281b6:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   281b8:	4284      	cmp	r4, r0
   281ba:	d208      	bcs.n	281ce <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   281bc:	4639      	mov	r1, r7
   281be:	4630      	mov	r0, r6
   281c0:	4622      	mov	r2, r4
   281c2:	f7ff fe78 	bl	27eb6 <split_chunks>
		free_list_add(h, c_end);
   281c6:	4621      	mov	r1, r4
   281c8:	4630      	mov	r0, r6
   281ca:	f7ff feb9 	bl	27f40 <free_list_add>
	set_chunk_used(h, c, true);
   281ce:	2201      	movs	r2, #1
   281d0:	4639      	mov	r1, r7
   281d2:	4630      	mov	r0, r6
   281d4:	f7ff fdc5 	bl	27d62 <set_chunk_used>
	return mem;
   281d8:	e79d      	b.n	28116 <sys_heap_aligned_alloc+0x32>

000281da <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   281da:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   281de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   281e0:	bf2c      	ite	cs
   281e2:	2408      	movcs	r4, #8
   281e4:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   281e6:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   281e8:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   281ea:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   281ec:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   281f0:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   281f4:	1ba4      	subs	r4, r4, r6
   281f6:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   281f8:	2300      	movs	r3, #0
	heap->heap = h;
   281fa:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   281fc:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   281fe:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   28200:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   28202:	4620      	mov	r0, r4
   28204:	f7ff fdc9 	bl	27d9a <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   28208:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2820a:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   2820c:	1c41      	adds	r1, r0, #1
   2820e:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   28210:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   28214:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   28216:	428b      	cmp	r3, r1
   28218:	db2e      	blt.n	28278 <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   2821a:	462a      	mov	r2, r5
   2821c:	4630      	mov	r0, r6
   2821e:	2100      	movs	r1, #0
   28220:	f7ff fdb7 	bl	27d92 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   28224:	2300      	movs	r3, #0
   28226:	461a      	mov	r2, r3
   28228:	4619      	mov	r1, r3
   2822a:	4630      	mov	r0, r6
   2822c:	f7ff fd88 	bl	27d40 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   28230:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   28232:	4619      	mov	r1, r3
   28234:	4630      	mov	r0, r6
   28236:	2201      	movs	r2, #1
   28238:	f7ff fd93 	bl	27d62 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   2823c:	463a      	mov	r2, r7
   2823e:	4629      	mov	r1, r5
   28240:	f7ff fda7 	bl	27d92 <set_chunk_size>
   28244:	462b      	mov	r3, r5
   28246:	2200      	movs	r2, #0
   28248:	4629      	mov	r1, r5
   2824a:	4630      	mov	r0, r6
   2824c:	f7ff fd78 	bl	27d40 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   28250:	4621      	mov	r1, r4
   28252:	4630      	mov	r0, r6
   28254:	f7ff fd9d 	bl	27d92 <set_chunk_size>
   28258:	463b      	mov	r3, r7
   2825a:	4621      	mov	r1, r4
   2825c:	4630      	mov	r0, r6
   2825e:	2200      	movs	r2, #0
   28260:	f7ff fd6e 	bl	27d40 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   28264:	4621      	mov	r1, r4
   28266:	4630      	mov	r0, r6
   28268:	2201      	movs	r2, #1
   2826a:	f7ff fd7a 	bl	27d62 <set_chunk_used>

	free_list_add(h, chunk0_size);
   2826e:	4629      	mov	r1, r5
}
   28270:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   28274:	f7ff be64 	b.w	27f40 <free_list_add>
		h->buckets[i].next = 0;
   28278:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   2827c:	3301      	adds	r3, #1
   2827e:	e7ca      	b.n	28216 <sys_heap_init+0x3c>

00028280 <encode_uint>:
{
   28280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28284:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   28286:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   28288:	2b6f      	cmp	r3, #111	; 0x6f
{
   2828a:	4680      	mov	r8, r0
   2828c:	460f      	mov	r7, r1
   2828e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   28290:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   28294:	d029      	beq.n	282ea <encode_uint+0x6a>
   28296:	d824      	bhi.n	282e2 <encode_uint+0x62>
		return 16;
   28298:	2b58      	cmp	r3, #88	; 0x58
   2829a:	bf14      	ite	ne
   2829c:	260a      	movne	r6, #10
   2829e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   282a0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   282a4:	4632      	mov	r2, r6
   282a6:	2300      	movs	r3, #0
   282a8:	4640      	mov	r0, r8
   282aa:	4639      	mov	r1, r7
   282ac:	f7e7 ff28 	bl	10100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   282b0:	2a09      	cmp	r2, #9
   282b2:	b2d4      	uxtb	r4, r2
   282b4:	d81e      	bhi.n	282f4 <encode_uint+0x74>
   282b6:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   282b8:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   282ba:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   282bc:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   282c0:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   282c4:	d301      	bcc.n	282ca <encode_uint+0x4a>
   282c6:	45d1      	cmp	r9, sl
   282c8:	d811      	bhi.n	282ee <encode_uint+0x6e>
	if (conv->flag_hash) {
   282ca:	782b      	ldrb	r3, [r5, #0]
   282cc:	069b      	lsls	r3, r3, #26
   282ce:	d505      	bpl.n	282dc <encode_uint+0x5c>
		if (radix == 8) {
   282d0:	2e08      	cmp	r6, #8
   282d2:	d115      	bne.n	28300 <encode_uint+0x80>
			conv->altform_0 = true;
   282d4:	78ab      	ldrb	r3, [r5, #2]
   282d6:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   282da:	70ab      	strb	r3, [r5, #2]
}
   282dc:	4648      	mov	r0, r9
   282de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   282e2:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   282e6:	2b70      	cmp	r3, #112	; 0x70
   282e8:	e7d7      	b.n	2829a <encode_uint+0x1a>
	switch (specifier) {
   282ea:	2608      	movs	r6, #8
   282ec:	e7d8      	b.n	282a0 <encode_uint+0x20>
		value /= radix;
   282ee:	4680      	mov	r8, r0
   282f0:	460f      	mov	r7, r1
   282f2:	e7d7      	b.n	282a4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   282f4:	f1bb 0f19 	cmp.w	fp, #25
   282f8:	bf94      	ite	ls
   282fa:	3437      	addls	r4, #55	; 0x37
   282fc:	3457      	addhi	r4, #87	; 0x57
   282fe:	e7db      	b.n	282b8 <encode_uint+0x38>
		} else if (radix == 16) {
   28300:	2e10      	cmp	r6, #16
   28302:	d1eb      	bne.n	282dc <encode_uint+0x5c>
			conv->altform_0c = true;
   28304:	78ab      	ldrb	r3, [r5, #2]
   28306:	f043 0310 	orr.w	r3, r3, #16
   2830a:	e7e6      	b.n	282da <encode_uint+0x5a>

0002830c <outs>:
{
   2830c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28310:	4607      	mov	r7, r0
   28312:	4688      	mov	r8, r1
   28314:	4615      	mov	r5, r2
   28316:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28318:	4614      	mov	r4, r2
   2831a:	42b4      	cmp	r4, r6
   2831c:	eba4 0005 	sub.w	r0, r4, r5
   28320:	d302      	bcc.n	28328 <outs+0x1c>
   28322:	b93e      	cbnz	r6, 28334 <outs+0x28>
   28324:	7823      	ldrb	r3, [r4, #0]
   28326:	b12b      	cbz	r3, 28334 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   28328:	f814 0b01 	ldrb.w	r0, [r4], #1
   2832c:	4641      	mov	r1, r8
   2832e:	47b8      	blx	r7
		if (rc < 0) {
   28330:	2800      	cmp	r0, #0
   28332:	daf2      	bge.n	2831a <outs+0xe>
}
   28334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028338 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BOOTLOADER_BOSSA_LEGACY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   28338:	4770      	bx	lr

0002833a <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2833a:	2300      	movs	r3, #0
	list->head = NULL;
   2833c:	e9c0 3300 	strd	r3, r3, [r0]
}
   28340:	4770      	bx	lr

00028342 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   28342:	6803      	ldr	r3, [r0, #0]
   28344:	b923      	cbnz	r3, 28350 <log_list_add_tail+0xe>
		list->head = msg;
   28346:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   28348:	2300      	movs	r3, #0
	list->tail = msg;
   2834a:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2834c:	600b      	str	r3, [r1, #0]
}
   2834e:	4770      	bx	lr
		list->tail->next = msg;
   28350:	6843      	ldr	r3, [r0, #4]
   28352:	6019      	str	r1, [r3, #0]
   28354:	e7f8      	b.n	28348 <log_list_add_tail+0x6>

00028356 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   28356:	6800      	ldr	r0, [r0, #0]
   28358:	4770      	bx	lr

0002835a <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2835a:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2835c:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2835e:	b108      	cbz	r0, 28364 <log_list_head_get+0xa>
		list->head = list->head->next;
   28360:	6802      	ldr	r2, [r0, #0]
   28362:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   28364:	4770      	bx	lr

00028366 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   28366:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   28368:	f7ea f82c 	bl	123c4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   2836c:	b118      	cbz	r0, 28376 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2836e:	2301      	movs	r3, #1
   28370:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   28372:	2300      	movs	r3, #0
   28374:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   28376:	bd08      	pop	{r3, pc}

00028378 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   28378:	f7ea bbee 	b.w	12b58 <sys_clock_cycle_get_32>

0002837c <dummy_timestamp>:
   2837c:	2000      	movs	r0, #0
   2837e:	4770      	bx	lr

00028380 <z_log_get_s_mask>:
{
   28380:	b5f0      	push	{r4, r5, r6, r7, lr}
   28382:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   28384:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   28386:	4603      	mov	r3, r0
	bool arm = false;
   28388:	4602      	mov	r2, r0
				mask |= BIT(arg);
   2838a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   2838c:	f815 4b01 	ldrb.w	r4, [r5], #1
   28390:	b10c      	cbz	r4, 28396 <z_log_get_s_mask+0x16>
   28392:	428b      	cmp	r3, r1
   28394:	d300      	bcc.n	28398 <z_log_get_s_mask+0x18>
}
   28396:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   28398:	2c25      	cmp	r4, #37	; 0x25
   2839a:	d102      	bne.n	283a2 <z_log_get_s_mask+0x22>
			arm = !arm;
   2839c:	f082 0201 	eor.w	r2, r2, #1
   283a0:	e7f4      	b.n	2838c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   283a2:	2a00      	cmp	r2, #0
   283a4:	d0f2      	beq.n	2838c <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   283a6:	f044 0620 	orr.w	r6, r4, #32
   283aa:	3e61      	subs	r6, #97	; 0x61
   283ac:	2e19      	cmp	r6, #25
   283ae:	d8ed      	bhi.n	2838c <z_log_get_s_mask+0xc>
			if (curr == 's') {
   283b0:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   283b2:	bf04      	itt	eq
   283b4:	fa07 f203 	lsleq.w	r2, r7, r3
   283b8:	4310      	orreq	r0, r2
			arg++;
   283ba:	3301      	adds	r3, #1
			arm = false;
   283bc:	2200      	movs	r2, #0
   283be:	e7e5      	b.n	2838c <z_log_get_s_mask+0xc>

000283c0 <log_0>:
{
   283c0:	b538      	push	{r3, r4, r5, lr}
   283c2:	4605      	mov	r5, r0
   283c4:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   283c6:	f7ff ffce 	bl	28366 <z_log_msg_std_alloc>

	if (msg != NULL) {
   283ca:	b128      	cbz	r0, 283d8 <log_0+0x18>
		msg->str = str;
   283cc:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   283ce:	4621      	mov	r1, r4
}
   283d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   283d4:	f7e9 bf34 	b.w	12240 <msg_finalize>
}
   283d8:	bd38      	pop	{r3, r4, r5, pc}

000283da <log_1>:
{
   283da:	b570      	push	{r4, r5, r6, lr}
   283dc:	4606      	mov	r6, r0
   283de:	460d      	mov	r5, r1
   283e0:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   283e2:	f7ff ffc0 	bl	28366 <z_log_msg_std_alloc>

	if (msg != NULL) {
   283e6:	b158      	cbz	r0, 28400 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   283e8:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   283ea:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   283ec:	2101      	movs	r1, #1
   283ee:	f361 1207 	bfi	r2, r1, #4, #4
   283f2:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   283f4:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   283f6:	4621      	mov	r1, r4
}
   283f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   283fc:	f7e9 bf20 	b.w	12240 <msg_finalize>
}
   28400:	bd70      	pop	{r4, r5, r6, pc}

00028402 <log_2>:
{
   28402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28406:	4680      	mov	r8, r0
   28408:	460f      	mov	r7, r1
   2840a:	4616      	mov	r6, r2
   2840c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2840e:	f7ff ffaa 	bl	28366 <z_log_msg_std_alloc>

	if (msg != NULL) {
   28412:	b168      	cbz	r0, 28430 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   28414:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   28416:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   2841a:	2202      	movs	r2, #2
   2841c:	f362 1307 	bfi	r3, r2, #4, #4
   28420:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   28422:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   28426:	4629      	mov	r1, r5
}
   28428:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2842c:	f7e9 bf08 	b.w	12240 <msg_finalize>
}
   28430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028434 <log_3>:
{
   28434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28438:	4680      	mov	r8, r0
   2843a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2843e:	460f      	mov	r7, r1
   28440:	4616      	mov	r6, r2
   28442:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   28444:	f7ff ff8f 	bl	28366 <z_log_msg_std_alloc>

	if (msg != NULL) {
   28448:	b170      	cbz	r0, 28468 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2844a:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   2844c:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   28450:	2203      	movs	r2, #3
   28452:	f362 1307 	bfi	r3, r2, #4, #4
   28456:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   28458:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   2845c:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   2845e:	4649      	mov	r1, r9
}
   28460:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   28464:	f7e9 beec 	b.w	12240 <msg_finalize>
}
   28468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002846c <log_n>:
{
   2846c:	b510      	push	{r4, lr}
   2846e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   28470:	f000 f83e 	bl	284f0 <log_msg_create_n>
		if (msg == NULL) {
   28474:	b120      	cbz	r0, 28480 <log_n+0x14>
		msg_finalize(msg, src_level);
   28476:	4621      	mov	r1, r4
}
   28478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2847c:	f7e9 bee0 	b.w	12240 <msg_finalize>
}
   28480:	bd10      	pop	{r4, pc}

00028482 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   28482:	7a40      	ldrb	r0, [r0, #9]
}
   28484:	0900      	lsrs	r0, r0, #4
   28486:	4770      	bx	lr

00028488 <log_msg_arg_get>:
log_arg_t log_msg_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	log_arg_t arg;

	/* Return early if requested argument not present in the message. */
	if (arg_idx >= msg->hdr.params.std.nargs) {
   28488:	7a43      	ldrb	r3, [r0, #9]
   2848a:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2848e:	ea4f 1213 	mov.w	r2, r3, lsr #4
   28492:	d216      	bcs.n	284c2 <log_msg_arg_get+0x3a>
		return 0;
	}

	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   28494:	2a03      	cmp	r2, #3
   28496:	d803      	bhi.n	284a0 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   28498:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2849c:	6940      	ldr	r0, [r0, #20]
   2849e:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   284a0:	2901      	cmp	r1, #1
   284a2:	d803      	bhi.n	284ac <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   284a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   284a8:	6980      	ldr	r0, [r0, #24]
   284aa:	4770      	bx	lr
	cont = msg->payload.ext.next;
   284ac:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   284ae:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   284b0:	2906      	cmp	r1, #6
   284b2:	d803      	bhi.n	284bc <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   284b4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   284b8:	6848      	ldr	r0, [r1, #4]
   284ba:	4770      	bx	lr
		cont = cont->next;
   284bc:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   284be:	3907      	subs	r1, #7
		cont = cont->next;
   284c0:	e7f6      	b.n	284b0 <log_msg_arg_get+0x28>
		return 0;
   284c2:	2000      	movs	r0, #0
	} else {
		arg = cont_arg_get(msg, arg_idx);
	}

	return arg;
}
   284c4:	4770      	bx	lr

000284c6 <log_msg_put>:
{
   284c6:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   284c8:	1d02      	adds	r2, r0, #4
   284ca:	f3bf 8f5b 	dmb	ish
   284ce:	e852 1f00 	ldrex	r1, [r2]
   284d2:	3901      	subs	r1, #1
   284d4:	e842 1c00 	strex	ip, r1, [r2]
   284d8:	f1bc 0f00 	cmp.w	ip, #0
   284dc:	d1f7      	bne.n	284ce <log_msg_put+0x8>
   284de:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   284e2:	685b      	ldr	r3, [r3, #4]
   284e4:	b90b      	cbnz	r3, 284ea <log_msg_put+0x24>
		msg_free(msg);
   284e6:	f7e9 bf81 	b.w	123ec <msg_free>
}
   284ea:	4770      	bx	lr

000284ec <log_msg_str_get>:

const char *log_msg_str_get(struct log_msg *msg)
{
	return msg->str;
}
   284ec:	6900      	ldr	r0, [r0, #16]
   284ee:	4770      	bx	lr

000284f0 <log_msg_create_n>:
		cont = cont->next;
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
   284f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   284f4:	4680      	mov	r8, r0
   284f6:	460f      	mov	r7, r1
   284f8:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   284fa:	f7e9 ff63 	bl	123c4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   284fe:	4604      	mov	r4, r0
   28500:	b358      	cbz	r0, 2855a <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   28502:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   28504:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   28508:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   2850a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2850c:	f8a0 a008 	strh.w	sl, [r0, #8]
   28510:	d90c      	bls.n	2852c <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   28512:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   28514:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   28518:	f043 0302 	orr.w	r3, r3, #2
   2851c:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   2851e:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   28522:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   28526:	f1b9 0f00 	cmp.w	r9, #0
   2852a:	dc0e      	bgt.n	2854a <log_msg_create_n+0x5a>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   2852c:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   2852e:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   28532:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   28536:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   28538:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2853a:	d819      	bhi.n	28570 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   2853c:	00aa      	lsls	r2, r5, #2
   2853e:	4639      	mov	r1, r7
   28540:	f104 0014 	add.w	r0, r4, #20
   28544:	f000 fb67 	bl	28c16 <memcpy>
	while (nargs != 0U) {
   28548:	e007      	b.n	2855a <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2854a:	f7e9 ff3b 	bl	123c4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2854e:	4606      	mov	r6, r0
   28550:	b930      	cbnz	r0, 28560 <log_msg_create_n+0x70>
			msg_free(msg);
   28552:	4620      	mov	r0, r4
   28554:	f7e9 ff4a 	bl	123ec <msg_free>
			return NULL;
   28558:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   2855a:	4620      	mov	r0, r4
   2855c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   28560:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   28564:	f1a9 0907 	sub.w	r9, r9, #7
   28568:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   2856c:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   2856e:	e7da      	b.n	28526 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   28570:	4639      	mov	r1, r7
   28572:	2208      	movs	r2, #8
   28574:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   28578:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   2857c:	f000 fb4b 	bl	28c16 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   28580:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   28582:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   28584:	2d07      	cmp	r5, #7
   28586:	462e      	mov	r6, r5
   28588:	bf28      	it	cs
   2858a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   2858c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   28590:	4639      	mov	r1, r7
   28592:	f108 0004 	add.w	r0, r8, #4
   28596:	464a      	mov	r2, r9
   28598:	f000 fb3d 	bl	28c16 <memcpy>
	while (nargs != 0U) {
   2859c:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   2859e:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   285a2:	444f      	add	r7, r9
	while (nargs != 0U) {
   285a4:	d1ee      	bne.n	28584 <log_msg_create_n+0x94>
   285a6:	e7d8      	b.n	2855a <log_msg_create_n+0x6a>

000285a8 <read_str>:
#endif /* CONFIG_BT_DIS_SETTINGS */

static ssize_t read_str(struct bt_conn *conn,
			  const struct bt_gatt_attr *attr, void *buf,
			  uint16_t len, uint16_t offset)
{
   285a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   285ac:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   285b0:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   285b2:	4640      	mov	r0, r8
{
   285b4:	461f      	mov	r7, r3
   285b6:	460c      	mov	r4, r1
   285b8:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   285ba:	f000 faff 	bl	28bbc <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   285be:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   285c2:	9300      	str	r3, [sp, #0]
   285c4:	b280      	uxth	r0, r0
   285c6:	e9cd 8001 	strd	r8, r0, [sp, #4]
   285ca:	463b      	mov	r3, r7
   285cc:	4632      	mov	r2, r6
   285ce:	4621      	mov	r1, r4
   285d0:	4628      	mov	r0, r5
   285d2:	f001 fd18 	bl	2a006 <bt_gatt_attr_read>
}
   285d6:	b004      	add	sp, #16
   285d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000285dc <bas_init>:
}
   285dc:	2000      	movs	r0, #0
   285de:	4770      	bx	lr

000285e0 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   285e0:	2200      	movs	r2, #0
   285e2:	e9c0 2200 	strd	r2, r2, [r0]
   285e6:	6082      	str	r2, [r0, #8]
}
   285e8:	4770      	bx	lr

000285ea <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   285ea:	6903      	ldr	r3, [r0, #16]
   285ec:	b2c9      	uxtb	r1, r1
   285ee:	220c      	movs	r2, #12
   285f0:	fb01 3302 	mla	r3, r1, r2, r3
   285f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   285f6:	f000 0007 	and.w	r0, r0, #7
   285fa:	4770      	bx	lr

000285fc <set_on_state>:
	__asm__ volatile(
   285fc:	f04f 0320 	mov.w	r3, #32
   28600:	f3ef 8211 	mrs	r2, BASEPRI
   28604:	f383 8811 	msr	BASEPRI, r3
   28608:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2860c:	6803      	ldr	r3, [r0, #0]
   2860e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   28612:	f043 0302 	orr.w	r3, r3, #2
   28616:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   28618:	f382 8811 	msr	BASEPRI, r2
   2861c:	f3bf 8f6f 	isb	sy
}
   28620:	4770      	bx	lr

00028622 <stop>:
{
   28622:	4603      	mov	r3, r0
   28624:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   28626:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   28628:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   2862a:	f04f 0420 	mov.w	r4, #32
   2862e:	f3ef 8611 	mrs	r6, BASEPRI
   28632:	f384 8811 	msr	BASEPRI, r4
   28636:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2863a:	250c      	movs	r5, #12
   2863c:	fb05 0401 	mla	r4, r5, r1, r0
   28640:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   28642:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   28646:	d001      	beq.n	2864c <stop+0x2a>
   28648:	42a2      	cmp	r2, r4
   2864a:	d111      	bne.n	28670 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2864c:	fb05 0001 	mla	r0, r5, r1, r0
   28650:	2201      	movs	r2, #1
   28652:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   28654:	2000      	movs	r0, #0
	__asm__ volatile(
   28656:	f386 8811 	msr	BASEPRI, r6
   2865a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2865e:	b930      	cbnz	r0, 2866e <stop+0x4c>
	get_sub_config(dev, type)->stop();
   28660:	685b      	ldr	r3, [r3, #4]
   28662:	220c      	movs	r2, #12
   28664:	fb02 3101 	mla	r1, r2, r1, r3
   28668:	684b      	ldr	r3, [r1, #4]
   2866a:	4798      	blx	r3
	return 0;
   2866c:	2000      	movs	r0, #0
}
   2866e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   28670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   28674:	e7ef      	b.n	28656 <stop+0x34>

00028676 <api_stop>:
	return stop(dev, subsys, CTX_API);
   28676:	2280      	movs	r2, #128	; 0x80
   28678:	f7ff bfd3 	b.w	28622 <stop>

0002867c <async_start>:
{
   2867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2867e:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   28680:	6904      	ldr	r4, [r0, #16]
{
   28682:	4605      	mov	r5, r0
   28684:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   28686:	f04f 0020 	mov.w	r0, #32
   2868a:	f3ef 8c11 	mrs	ip, BASEPRI
   2868e:	f380 8811 	msr	BASEPRI, r0
   28692:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   28696:	260c      	movs	r6, #12
   28698:	fb06 4601 	mla	r6, r6, r1, r4
   2869c:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2869e:	f000 0e07 	and.w	lr, r0, #7
   286a2:	f1be 0f01 	cmp.w	lr, #1
   286a6:	d110      	bne.n	286ca <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   286a8:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   286aa:	2600      	movs	r6, #0
	__asm__ volatile(
   286ac:	f38c 8811 	msr	BASEPRI, ip
   286b0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   286b4:	b93e      	cbnz	r6, 286c6 <async_start+0x4a>
	subdata->cb = cb;
   286b6:	200c      	movs	r0, #12
   286b8:	4341      	muls	r1, r0
   286ba:	440c      	add	r4, r1
	subdata->user_data = user_data;
   286bc:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   286c0:	686b      	ldr	r3, [r5, #4]
   286c2:	585b      	ldr	r3, [r3, r1]
   286c4:	4798      	blx	r3
}
   286c6:	4630      	mov	r0, r6
   286c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   286ca:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   286ce:	4287      	cmp	r7, r0
   286d0:	bf14      	ite	ne
   286d2:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   286d6:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   286da:	e7e7      	b.n	286ac <async_start+0x30>

000286dc <api_start>:
{
   286dc:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   286de:	2480      	movs	r4, #128	; 0x80
   286e0:	9400      	str	r4, [sp, #0]
   286e2:	f7ff ffcb 	bl	2867c <async_start>
}
   286e6:	b002      	add	sp, #8
   286e8:	bd10      	pop	{r4, pc}

000286ea <onoff_started_callback>:
	return &data->mgr[type];
   286ea:	6900      	ldr	r0, [r0, #16]
{
   286ec:	b410      	push	{r4}
	return &data->mgr[type];
   286ee:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   286f0:	241c      	movs	r4, #28
   286f2:	fb03 0004 	mla	r0, r3, r4, r0
   286f6:	2100      	movs	r1, #0
}
   286f8:	bc10      	pop	{r4}
	notify(mgr, 0);
   286fa:	4710      	bx	r2

000286fc <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   286fc:	2000      	movs	r0, #0
   286fe:	f001 bec0 	b.w	2a482 <nrfx_clock_start>

00028702 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   28702:	2000      	movs	r0, #0
   28704:	f7fd be8a 	b.w	2641c <nrfx_clock_stop>

00028708 <blocking_start_callback>:
{
   28708:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2870a:	f7fe ba23 	b.w	26b54 <z_impl_k_sem_give>

0002870e <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   2870e:	4770      	bx	lr

00028710 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   28710:	4770      	bx	lr

00028712 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   28712:	b538      	push	{r3, r4, r5, lr}
   28714:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   28716:	42ab      	cmp	r3, r5
{
   28718:	4611      	mov	r1, r2
   2871a:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2871c:	d804      	bhi.n	28728 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   2871e:	461a      	mov	r2, r3
   28720:	f000 fa79 	bl	28c16 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   28724:	4620      	mov	r0, r4
   28726:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   28728:	2400      	movs	r4, #0
   2872a:	e7fb      	b.n	28724 <_copy+0x12>

0002872c <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   2872c:	f000 ba9e 	b.w	28c6c <memset>

00028730 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   28730:	09c3      	lsrs	r3, r0, #7
   28732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   28736:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2873a:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2873e:	b2c0      	uxtb	r0, r0
   28740:	4770      	bx	lr

00028742 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   28742:	78cb      	ldrb	r3, [r1, #3]
   28744:	7802      	ldrb	r2, [r0, #0]
   28746:	4053      	eors	r3, r2
   28748:	7003      	strb	r3, [r0, #0]
   2874a:	884b      	ldrh	r3, [r1, #2]
   2874c:	7842      	ldrb	r2, [r0, #1]
   2874e:	4053      	eors	r3, r2
   28750:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   28752:	680a      	ldr	r2, [r1, #0]
   28754:	7883      	ldrb	r3, [r0, #2]
   28756:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2875a:	7083      	strb	r3, [r0, #2]
   2875c:	680a      	ldr	r2, [r1, #0]
   2875e:	78c3      	ldrb	r3, [r0, #3]
   28760:	4053      	eors	r3, r2
   28762:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   28764:	79cb      	ldrb	r3, [r1, #7]
   28766:	7902      	ldrb	r2, [r0, #4]
   28768:	4053      	eors	r3, r2
   2876a:	7103      	strb	r3, [r0, #4]
   2876c:	88cb      	ldrh	r3, [r1, #6]
   2876e:	7942      	ldrb	r2, [r0, #5]
   28770:	4053      	eors	r3, r2
   28772:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   28774:	684a      	ldr	r2, [r1, #4]
   28776:	7983      	ldrb	r3, [r0, #6]
   28778:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2877c:	7183      	strb	r3, [r0, #6]
   2877e:	684a      	ldr	r2, [r1, #4]
   28780:	79c3      	ldrb	r3, [r0, #7]
   28782:	4053      	eors	r3, r2
   28784:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   28786:	7acb      	ldrb	r3, [r1, #11]
   28788:	7a02      	ldrb	r2, [r0, #8]
   2878a:	4053      	eors	r3, r2
   2878c:	7203      	strb	r3, [r0, #8]
   2878e:	7a42      	ldrb	r2, [r0, #9]
   28790:	894b      	ldrh	r3, [r1, #10]
   28792:	4053      	eors	r3, r2
   28794:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   28796:	688a      	ldr	r2, [r1, #8]
   28798:	7a83      	ldrb	r3, [r0, #10]
   2879a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2879e:	7283      	strb	r3, [r0, #10]
   287a0:	688a      	ldr	r2, [r1, #8]
   287a2:	7ac3      	ldrb	r3, [r0, #11]
   287a4:	4053      	eors	r3, r2
   287a6:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   287a8:	7bcb      	ldrb	r3, [r1, #15]
   287aa:	7b02      	ldrb	r2, [r0, #12]
   287ac:	4053      	eors	r3, r2
   287ae:	7303      	strb	r3, [r0, #12]
   287b0:	89cb      	ldrh	r3, [r1, #14]
   287b2:	7b42      	ldrb	r2, [r0, #13]
   287b4:	4053      	eors	r3, r2
   287b6:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   287b8:	68ca      	ldr	r2, [r1, #12]
   287ba:	7b83      	ldrb	r3, [r0, #14]
   287bc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   287c0:	7383      	strb	r3, [r0, #14]
   287c2:	68ca      	ldr	r2, [r1, #12]
   287c4:	7bc3      	ldrb	r3, [r0, #15]
   287c6:	4053      	eors	r3, r2
   287c8:	73c3      	strb	r3, [r0, #15]
}
   287ca:	4770      	bx	lr

000287cc <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   287cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   287ce:	7802      	ldrb	r2, [r0, #0]
   287d0:	f88d 2000 	strb.w	r2, [sp]
   287d4:	7942      	ldrb	r2, [r0, #5]
   287d6:	f88d 2001 	strb.w	r2, [sp, #1]
   287da:	7a82      	ldrb	r2, [r0, #10]
   287dc:	f88d 2002 	strb.w	r2, [sp, #2]
   287e0:	7bc2      	ldrb	r2, [r0, #15]
   287e2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   287e6:	7902      	ldrb	r2, [r0, #4]
   287e8:	f88d 2004 	strb.w	r2, [sp, #4]
   287ec:	7a42      	ldrb	r2, [r0, #9]
   287ee:	f88d 2005 	strb.w	r2, [sp, #5]
   287f2:	7b82      	ldrb	r2, [r0, #14]
   287f4:	f88d 2006 	strb.w	r2, [sp, #6]
   287f8:	78c2      	ldrb	r2, [r0, #3]
   287fa:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   287fe:	7a02      	ldrb	r2, [r0, #8]
   28800:	f88d 2008 	strb.w	r2, [sp, #8]
   28804:	7b42      	ldrb	r2, [r0, #13]
   28806:	f88d 2009 	strb.w	r2, [sp, #9]
   2880a:	7882      	ldrb	r2, [r0, #2]
   2880c:	f88d 200a 	strb.w	r2, [sp, #10]
   28810:	79c2      	ldrb	r2, [r0, #7]
   28812:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   28816:	7b02      	ldrb	r2, [r0, #12]
   28818:	f88d 200c 	strb.w	r2, [sp, #12]
   2881c:	7842      	ldrb	r2, [r0, #1]
   2881e:	7ac3      	ldrb	r3, [r0, #11]
   28820:	f88d 200d 	strb.w	r2, [sp, #13]
   28824:	7982      	ldrb	r2, [r0, #6]
   28826:	f88d 200e 	strb.w	r2, [sp, #14]
   2882a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2882e:	2310      	movs	r3, #16
   28830:	466a      	mov	r2, sp
   28832:	4619      	mov	r1, r3
   28834:	f7ff ff6d 	bl	28712 <_copy>
}
   28838:	b005      	add	sp, #20
   2883a:	f85d fb04 	ldr.w	pc, [sp], #4

0002883e <mult_row_column>:
{
   2883e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28840:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28842:	7808      	ldrb	r0, [r1, #0]
{
   28844:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   28846:	f7ff ff73 	bl	28730 <_double_byte>
   2884a:	4605      	mov	r5, r0
   2884c:	7860      	ldrb	r0, [r4, #1]
   2884e:	f7ff ff6f 	bl	28730 <_double_byte>
   28852:	78a2      	ldrb	r2, [r4, #2]
   28854:	7863      	ldrb	r3, [r4, #1]
   28856:	4053      	eors	r3, r2
   28858:	78e2      	ldrb	r2, [r4, #3]
   2885a:	4053      	eors	r3, r2
   2885c:	405d      	eors	r5, r3
   2885e:	4045      	eors	r5, r0
   28860:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   28862:	7860      	ldrb	r0, [r4, #1]
   28864:	7827      	ldrb	r7, [r4, #0]
   28866:	f7ff ff63 	bl	28730 <_double_byte>
   2886a:	4605      	mov	r5, r0
   2886c:	78a0      	ldrb	r0, [r4, #2]
   2886e:	f7ff ff5f 	bl	28730 <_double_byte>
   28872:	78a3      	ldrb	r3, [r4, #2]
   28874:	405f      	eors	r7, r3
   28876:	78e3      	ldrb	r3, [r4, #3]
   28878:	405f      	eors	r7, r3
   2887a:	407d      	eors	r5, r7
   2887c:	4045      	eors	r5, r0
   2887e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   28880:	78a0      	ldrb	r0, [r4, #2]
   28882:	7865      	ldrb	r5, [r4, #1]
   28884:	7827      	ldrb	r7, [r4, #0]
   28886:	f7ff ff53 	bl	28730 <_double_byte>
   2888a:	406f      	eors	r7, r5
   2888c:	4605      	mov	r5, r0
   2888e:	78e0      	ldrb	r0, [r4, #3]
   28890:	f7ff ff4e 	bl	28730 <_double_byte>
   28894:	78e3      	ldrb	r3, [r4, #3]
   28896:	405f      	eors	r7, r3
   28898:	407d      	eors	r5, r7
   2889a:	4045      	eors	r5, r0
   2889c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2889e:	7820      	ldrb	r0, [r4, #0]
   288a0:	f7ff ff46 	bl	28730 <_double_byte>
   288a4:	7863      	ldrb	r3, [r4, #1]
   288a6:	7825      	ldrb	r5, [r4, #0]
   288a8:	405d      	eors	r5, r3
   288aa:	78a3      	ldrb	r3, [r4, #2]
   288ac:	405d      	eors	r5, r3
   288ae:	4045      	eors	r5, r0
   288b0:	78e0      	ldrb	r0, [r4, #3]
   288b2:	f7ff ff3d 	bl	28730 <_double_byte>
   288b6:	b2ed      	uxtb	r5, r5
   288b8:	4045      	eors	r5, r0
   288ba:	70f5      	strb	r5, [r6, #3]
}
   288bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000288be <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   288be:	b570      	push	{r4, r5, r6, lr}
   288c0:	4614      	mov	r4, r2
   288c2:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   288c4:	4605      	mov	r5, r0
   288c6:	2800      	cmp	r0, #0
   288c8:	d049      	beq.n	2895e <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   288ca:	2900      	cmp	r1, #0
   288cc:	d049      	beq.n	28962 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   288ce:	2a00      	cmp	r2, #0
   288d0:	d049      	beq.n	28966 <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   288d2:	2310      	movs	r3, #16
   288d4:	460a      	mov	r2, r1
   288d6:	4668      	mov	r0, sp
   288d8:	4619      	mov	r1, r3
   288da:	f7ff ff1a 	bl	28712 <_copy>
	add_round_key(state, s->words);
   288de:	4621      	mov	r1, r4
   288e0:	4668      	mov	r0, sp
   288e2:	f7ff ff2e 	bl	28742 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   288e6:	3410      	adds	r4, #16
   288e8:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   288ec:	4668      	mov	r0, sp
   288ee:	f7ea f94d 	bl	12b8c <sub_bytes>
		shift_rows(state);
   288f2:	4668      	mov	r0, sp
   288f4:	f7ff ff6a 	bl	287cc <shift_rows>
	mult_row_column(t, s);
   288f8:	4669      	mov	r1, sp
   288fa:	a804      	add	r0, sp, #16
   288fc:	f7ff ff9f 	bl	2883e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   28900:	a901      	add	r1, sp, #4
   28902:	a805      	add	r0, sp, #20
   28904:	f7ff ff9b 	bl	2883e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   28908:	a902      	add	r1, sp, #8
   2890a:	a806      	add	r0, sp, #24
   2890c:	f7ff ff97 	bl	2883e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   28910:	a903      	add	r1, sp, #12
   28912:	a807      	add	r0, sp, #28
   28914:	f7ff ff93 	bl	2883e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   28918:	2310      	movs	r3, #16
   2891a:	4619      	mov	r1, r3
   2891c:	eb0d 0203 	add.w	r2, sp, r3
   28920:	4668      	mov	r0, sp
   28922:	f7ff fef6 	bl	28712 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   28926:	4621      	mov	r1, r4
   28928:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   2892a:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   2892c:	f7ff ff09 	bl	28742 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   28930:	42a6      	cmp	r6, r4
   28932:	d1db      	bne.n	288ec <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   28934:	f7ea f92a 	bl	12b8c <sub_bytes>
	shift_rows(state);
   28938:	4668      	mov	r0, sp
   2893a:	f7ff ff47 	bl	287cc <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   2893e:	4631      	mov	r1, r6
   28940:	4668      	mov	r0, sp
   28942:	f7ff fefe 	bl	28742 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   28946:	2310      	movs	r3, #16
   28948:	4619      	mov	r1, r3
   2894a:	466a      	mov	r2, sp
   2894c:	4628      	mov	r0, r5
   2894e:	f7ff fee0 	bl	28712 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   28952:	4668      	mov	r0, sp
   28954:	2210      	movs	r2, #16
   28956:	2100      	movs	r1, #0
   28958:	f7ff fee8 	bl	2872c <_set>

	return TC_CRYPTO_SUCCESS;
   2895c:	2001      	movs	r0, #1
}
   2895e:	b008      	add	sp, #32
   28960:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28962:	4608      	mov	r0, r1
   28964:	e7fb      	b.n	2895e <tc_aes_encrypt+0xa0>
   28966:	4610      	mov	r0, r2
   28968:	e7f9      	b.n	2895e <tc_aes_encrypt+0xa0>

0002896a <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2896a:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2896c:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2896e:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   28970:	f912 3b10 	ldrsb.w	r3, [r2], #16
   28974:	2b00      	cmp	r3, #0
   28976:	bfb4      	ite	lt
   28978:	2387      	movlt	r3, #135	; 0x87
   2897a:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2897c:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   28980:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   28984:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   28986:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2898a:	d002      	beq.n	28992 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2898c:	7813      	ldrb	r3, [r2, #0]
   2898e:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   28990:	e7f4      	b.n	2897c <gf_double+0x12>
	}
}
   28992:	bd10      	pop	{r4, pc}

00028994 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   28994:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   28996:	b120      	cbz	r0, 289a2 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   28998:	2258      	movs	r2, #88	; 0x58
   2899a:	2100      	movs	r1, #0
   2899c:	f7ff fec6 	bl	2872c <_set>
   289a0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   289a2:	bd08      	pop	{r3, pc}

000289a4 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   289a4:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   289a6:	4604      	mov	r4, r0
   289a8:	b188      	cbz	r0, 289ce <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   289aa:	2210      	movs	r2, #16
   289ac:	2100      	movs	r1, #0
   289ae:	f7ff febd 	bl	2872c <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   289b2:	2210      	movs	r2, #16
   289b4:	f104 0030 	add.w	r0, r4, #48	; 0x30
   289b8:	2100      	movs	r1, #0
   289ba:	f7ff feb7 	bl	2872c <_set>
	s->leftover_offset = 0;
   289be:	2300      	movs	r3, #0
   289c0:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   289c2:	2200      	movs	r2, #0
   289c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   289c8:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   289cc:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   289ce:	bd10      	pop	{r4, pc}

000289d0 <tc_cmac_setup>:
{
   289d0:	b570      	push	{r4, r5, r6, lr}
   289d2:	460d      	mov	r5, r1
   289d4:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   289d6:	4604      	mov	r4, r0
   289d8:	b310      	cbz	r0, 28a20 <tc_cmac_setup+0x50>
   289da:	b311      	cbz	r1, 28a22 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   289dc:	2258      	movs	r2, #88	; 0x58
   289de:	2100      	movs	r1, #0
   289e0:	f7ff fea4 	bl	2872c <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   289e4:	4629      	mov	r1, r5
	s->sched = sched;
   289e6:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   289e8:	4630      	mov	r0, r6
   289ea:	f7ea f8db 	bl	12ba4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   289ee:	2210      	movs	r2, #16
   289f0:	2100      	movs	r1, #0
   289f2:	4620      	mov	r0, r4
   289f4:	f7ff fe9a 	bl	2872c <_set>
	gf_double (s->K1, s->iv);
   289f8:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   289fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   289fe:	4621      	mov	r1, r4
   28a00:	4620      	mov	r0, r4
   28a02:	f7ff ff5c 	bl	288be <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   28a06:	4621      	mov	r1, r4
   28a08:	4628      	mov	r0, r5
   28a0a:	f7ff ffae 	bl	2896a <gf_double>
	gf_double (s->K2, s->K1);
   28a0e:	4629      	mov	r1, r5
   28a10:	f104 0020 	add.w	r0, r4, #32
   28a14:	f7ff ffa9 	bl	2896a <gf_double>
	tc_cmac_init(s);
   28a18:	4620      	mov	r0, r4
   28a1a:	f7ff ffc3 	bl	289a4 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   28a1e:	2001      	movs	r0, #1
}
   28a20:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   28a22:	4608      	mov	r0, r1
   28a24:	e7fc      	b.n	28a20 <tc_cmac_setup+0x50>

00028a26 <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   28a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a2a:	460d      	mov	r5, r1
   28a2c:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   28a2e:	4604      	mov	r4, r0
   28a30:	2800      	cmp	r0, #0
   28a32:	d061      	beq.n	28af8 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   28a34:	b912      	cbnz	r2, 28a3c <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   28a36:	2001      	movs	r0, #1
}
   28a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   28a3c:	2900      	cmp	r1, #0
   28a3e:	d05b      	beq.n	28af8 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   28a40:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   28a44:	ea53 0102 	orrs.w	r1, r3, r2
   28a48:	d056      	beq.n	28af8 <tc_cmac_update+0xd2>
	s->countdown--;
   28a4a:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   28a4c:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   28a50:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   28a54:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   28a58:	f1b8 0f00 	cmp.w	r8, #0
   28a5c:	d02a      	beq.n	28ab4 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   28a5e:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28a62:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   28a66:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28a68:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   28a6a:	d208      	bcs.n	28a7e <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   28a6c:	462a      	mov	r2, r5
   28a6e:	4633      	mov	r3, r6
   28a70:	4631      	mov	r1, r6
   28a72:	f7ff fe4e 	bl	28712 <_copy>
			s->leftover_offset += data_length;
   28a76:	6c62      	ldr	r2, [r4, #68]	; 0x44
   28a78:	4432      	add	r2, r6
   28a7a:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   28a7c:	e7db      	b.n	28a36 <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   28a7e:	463b      	mov	r3, r7
   28a80:	462a      	mov	r2, r5
   28a82:	4639      	mov	r1, r7
   28a84:	f7ff fe45 	bl	28712 <_copy>
		data_length -= remaining_space;
   28a88:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   28a8a:	2300      	movs	r3, #0
   28a8c:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   28a8e:	4446      	add	r6, r8
		data += remaining_space;
   28a90:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28a92:	1e63      	subs	r3, r4, #1
   28a94:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   28a98:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28a9c:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28aa0:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   28aa2:	ea82 0200 	eor.w	r2, r2, r0
   28aa6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28aa8:	d1f6      	bne.n	28a98 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28aaa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28aac:	4621      	mov	r1, r4
   28aae:	4620      	mov	r0, r4
   28ab0:	f7ff ff05 	bl	288be <tc_aes_encrypt>
   28ab4:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   28ab8:	2e10      	cmp	r6, #16
   28aba:	d80a      	bhi.n	28ad2 <tc_cmac_update+0xac>
	if (data_length > 0) {
   28abc:	2e00      	cmp	r6, #0
   28abe:	d0ba      	beq.n	28a36 <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   28ac0:	4633      	mov	r3, r6
   28ac2:	462a      	mov	r2, r5
   28ac4:	4631      	mov	r1, r6
   28ac6:	f104 0030 	add.w	r0, r4, #48	; 0x30
   28aca:	f7ff fe22 	bl	28712 <_copy>
		s->leftover_offset = data_length;
   28ace:	6466      	str	r6, [r4, #68]	; 0x44
   28ad0:	e7b1      	b.n	28a36 <tc_cmac_update+0x10>
   28ad2:	1e63      	subs	r3, r4, #1
   28ad4:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   28ad6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28ada:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28ade:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   28ae0:	ea82 0200 	eor.w	r2, r2, r0
   28ae4:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28ae6:	d1f6      	bne.n	28ad6 <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   28ae8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28aea:	4621      	mov	r1, r4
   28aec:	4620      	mov	r0, r4
   28aee:	f7ff fee6 	bl	288be <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   28af2:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   28af4:	3e10      	subs	r6, #16
   28af6:	e7df      	b.n	28ab8 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   28af8:	2000      	movs	r0, #0
   28afa:	e79d      	b.n	28a38 <tc_cmac_update+0x12>

00028afc <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   28afc:	b570      	push	{r4, r5, r6, lr}
   28afe:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   28b00:	4605      	mov	r5, r0
   28b02:	b1e8      	cbz	r0, 28b40 <tc_cmac_final+0x44>
   28b04:	b369      	cbz	r1, 28b62 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   28b06:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   28b08:	2a10      	cmp	r2, #16
   28b0a:	d11a      	bne.n	28b42 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   28b0c:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b0e:	1e63      	subs	r3, r4, #1
   28b10:	3901      	subs	r1, #1
   28b12:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28b16:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28b1a:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   28b1e:	4072      	eors	r2, r6
   28b20:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b24:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   28b26:	ea82 0206 	eor.w	r2, r2, r6
   28b2a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   28b2c:	d1f3      	bne.n	28b16 <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   28b2e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   28b30:	4621      	mov	r1, r4
   28b32:	4628      	mov	r0, r5
   28b34:	f7ff fec3 	bl	288be <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   28b38:	4620      	mov	r0, r4
   28b3a:	f7ff ff2b 	bl	28994 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   28b3e:	2001      	movs	r0, #1
}
   28b40:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   28b42:	f102 0030 	add.w	r0, r2, #48	; 0x30
   28b46:	2100      	movs	r1, #0
   28b48:	f1c2 0210 	rsb	r2, r2, #16
   28b4c:	4420      	add	r0, r4
   28b4e:	f7ff fded 	bl	2872c <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   28b52:	6c63      	ldr	r3, [r4, #68]	; 0x44
   28b54:	4423      	add	r3, r4
   28b56:	2280      	movs	r2, #128	; 0x80
   28b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   28b5c:	f104 0120 	add.w	r1, r4, #32
   28b60:	e7d5      	b.n	28b0e <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   28b62:	4608      	mov	r0, r1
   28b64:	e7ec      	b.n	28b40 <tc_cmac_final+0x44>

00028b66 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   28b66:	2100      	movs	r1, #0
   28b68:	2001      	movs	r0, #1
   28b6a:	f7ea b97f 	b.w	12e6c <z_arm_fatal_error>

00028b6e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   28b6e:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   28b70:	6800      	ldr	r0, [r0, #0]
   28b72:	f7ea b97b 	b.w	12e6c <z_arm_fatal_error>

00028b76 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   28b76:	b508      	push	{r3, lr}
	handler();
   28b78:	f7ea f9b0 	bl	12edc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   28b7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   28b80:	f7ea bc32 	b.w	133e8 <z_arm_exc_exit>

00028b84 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   28b84:	3901      	subs	r1, #1
   28b86:	4603      	mov	r3, r0
   28b88:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   28b8c:	b90a      	cbnz	r2, 28b92 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   28b8e:	701a      	strb	r2, [r3, #0]

	return dest;
}
   28b90:	4770      	bx	lr
		*d = *s;
   28b92:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   28b96:	e7f7      	b.n	28b88 <strcpy+0x4>

00028b98 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   28b98:	b570      	push	{r4, r5, r6, lr}
   28b9a:	4605      	mov	r5, r0
   28b9c:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   28b9e:	b142      	cbz	r2, 28bb2 <strncpy+0x1a>
   28ba0:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   28ba4:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   28ba6:	b92c      	cbnz	r4, 28bb4 <strncpy+0x1c>
   28ba8:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   28baa:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   28bae:	429a      	cmp	r2, r3
   28bb0:	d1fb      	bne.n	28baa <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   28bb2:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   28bb4:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   28bb8:	4632      	mov	r2, r6
   28bba:	e7ef      	b.n	28b9c <strncpy+0x4>

00028bbc <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   28bbc:	4603      	mov	r3, r0
	size_t n = 0;
   28bbe:	2000      	movs	r0, #0

	while (*s != '\0') {
   28bc0:	5c1a      	ldrb	r2, [r3, r0]
   28bc2:	b902      	cbnz	r2, 28bc6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   28bc4:	4770      	bx	lr
		n++;
   28bc6:	3001      	adds	r0, #1
   28bc8:	e7fa      	b.n	28bc0 <strlen+0x4>

00028bca <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   28bca:	4603      	mov	r3, r0
	size_t n = 0;
   28bcc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   28bce:	5c1a      	ldrb	r2, [r3, r0]
   28bd0:	b10a      	cbz	r2, 28bd6 <strnlen+0xc>
   28bd2:	4288      	cmp	r0, r1
   28bd4:	d100      	bne.n	28bd8 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   28bd6:	4770      	bx	lr
		n++;
   28bd8:	3001      	adds	r0, #1
   28bda:	e7f8      	b.n	28bce <strnlen+0x4>

00028bdc <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   28bdc:	1e43      	subs	r3, r0, #1
   28bde:	3901      	subs	r1, #1
   28be0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   28be4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   28be8:	4282      	cmp	r2, r0
   28bea:	d101      	bne.n	28bf0 <strcmp+0x14>
   28bec:	2a00      	cmp	r2, #0
   28bee:	d1f7      	bne.n	28be0 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   28bf0:	1a10      	subs	r0, r2, r0
   28bf2:	4770      	bx	lr

00028bf4 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   28bf4:	b510      	push	{r4, lr}
   28bf6:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   28bf8:	b15a      	cbz	r2, 28c12 <memcmp+0x1e>
   28bfa:	3901      	subs	r1, #1
   28bfc:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   28bfe:	f813 0b01 	ldrb.w	r0, [r3], #1
   28c02:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   28c06:	42a3      	cmp	r3, r4
   28c08:	d001      	beq.n	28c0e <memcmp+0x1a>
   28c0a:	4290      	cmp	r0, r2
   28c0c:	d0f7      	beq.n	28bfe <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   28c0e:	1a80      	subs	r0, r0, r2
}
   28c10:	bd10      	pop	{r4, pc}
		return 0;
   28c12:	4610      	mov	r0, r2
   28c14:	e7fc      	b.n	28c10 <memcmp+0x1c>

00028c16 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   28c16:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   28c18:	ea81 0400 	eor.w	r4, r1, r0
   28c1c:	07a5      	lsls	r5, r4, #30
   28c1e:	4603      	mov	r3, r0
   28c20:	d00b      	beq.n	28c3a <memcpy+0x24>
   28c22:	3b01      	subs	r3, #1
   28c24:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   28c26:	4291      	cmp	r1, r2
   28c28:	d11b      	bne.n	28c62 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   28c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   28c2c:	2a00      	cmp	r2, #0
   28c2e:	d0fc      	beq.n	28c2a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   28c30:	f811 4b01 	ldrb.w	r4, [r1], #1
   28c34:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   28c38:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   28c3a:	079c      	lsls	r4, r3, #30
   28c3c:	d1f6      	bne.n	28c2c <memcpy+0x16>
   28c3e:	f022 0403 	bic.w	r4, r2, #3
   28c42:	1f1d      	subs	r5, r3, #4
   28c44:	0896      	lsrs	r6, r2, #2
   28c46:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   28c48:	42b9      	cmp	r1, r7
   28c4a:	d105      	bne.n	28c58 <memcpy+0x42>
   28c4c:	f06f 0503 	mvn.w	r5, #3
   28c50:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   28c54:	4423      	add	r3, r4
   28c56:	e7e4      	b.n	28c22 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   28c58:	f851 cb04 	ldr.w	ip, [r1], #4
   28c5c:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   28c60:	e7f2      	b.n	28c48 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   28c62:	f811 4b01 	ldrb.w	r4, [r1], #1
   28c66:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   28c6a:	e7dc      	b.n	28c26 <memcpy+0x10>

00028c6c <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   28c6c:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   28c6e:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   28c70:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   28c72:	07a3      	lsls	r3, r4, #30
   28c74:	d111      	bne.n	28c9a <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   28c76:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   28c7a:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   28c7e:	f022 0303 	bic.w	r3, r2, #3
   28c82:	0896      	lsrs	r6, r2, #2
   28c84:	4423      	add	r3, r4
   28c86:	429c      	cmp	r4, r3
   28c88:	d10d      	bne.n	28ca6 <memset+0x3a>
   28c8a:	f06f 0403 	mvn.w	r4, #3
   28c8e:	fb04 2206 	mla	r2, r4, r6, r2
   28c92:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   28c94:	4293      	cmp	r3, r2
   28c96:	d109      	bne.n	28cac <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   28c98:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   28c9a:	2a00      	cmp	r2, #0
   28c9c:	d0fc      	beq.n	28c98 <memset+0x2c>
		*(d_byte++) = c_byte;
   28c9e:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   28ca2:	3a01      	subs	r2, #1
   28ca4:	e7e5      	b.n	28c72 <memset+0x6>
		*(d_word++) = c_word;
   28ca6:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   28caa:	e7ec      	b.n	28c86 <memset+0x1a>
		*(d_byte++) = c_byte;
   28cac:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   28cb0:	e7f0      	b.n	28c94 <memset+0x28>

00028cb2 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   28cb2:	f7fd bab9 	b.w	26228 <SystemInit>

00028cb6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   28cb6:	b084      	sub	sp, #16
   28cb8:	ab04      	add	r3, sp, #16
   28cba:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   28cbe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   28cc2:	2b06      	cmp	r3, #6
   28cc4:	d108      	bne.n	28cd8 <pm_power_state_set+0x22>
#endif // defined(POWER_RAMSTATUS_RAMBLOCK0_Msk)

#if defined(POWER_SYSTEMOFF_SYSTEMOFF_Enter)
NRF_STATIC_INLINE void nrf_power_system_off(NRF_POWER_Type * p_reg)
{
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   28cc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28cca:	2201      	movs	r2, #1
   28ccc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   28cd0:	f3bf 8f4f 	dsb	sy
    __DSB();

    /* Solution for simulated System OFF in debug mode */
    while (true)
    {
        __WFE();
   28cd4:	bf20      	wfe
    while (true)
   28cd6:	e7fd      	b.n	28cd4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   28cd8:	b004      	add	sp, #16
   28cda:	4770      	bx	lr

00028cdc <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   28cdc:	b084      	sub	sp, #16
   28cde:	ab04      	add	r3, sp, #16
   28ce0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   28ce4:	2300      	movs	r3, #0
   28ce6:	f383 8811 	msr	BASEPRI, r3
   28cea:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   28cee:	b004      	add	sp, #16
   28cf0:	4770      	bx	lr

00028cf2 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   28cf2:	b530      	push	{r4, r5, lr}
   28cf4:	b085      	sub	sp, #20
   28cf6:	4604      	mov	r4, r0
   28cf8:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   28cfa:	4668      	mov	r0, sp
   28cfc:	2203      	movs	r2, #3
   28cfe:	f7ff ff8a 	bl	28c16 <memcpy>
	(void)memset(res + 3, 0, 13);
   28d02:	220d      	movs	r2, #13
   28d04:	2100      	movs	r1, #0
   28d06:	f10d 0003 	add.w	r0, sp, #3
   28d0a:	f7ff ffaf 	bl	28c6c <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   28d0e:	4620      	mov	r0, r4
   28d10:	466a      	mov	r2, sp
   28d12:	4669      	mov	r1, sp
   28d14:	f7f2 f974 	bl	1b000 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   28d18:	4604      	mov	r4, r0
   28d1a:	b920      	cbnz	r0, 28d26 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   28d1c:	2203      	movs	r2, #3
   28d1e:	4669      	mov	r1, sp
   28d20:	4628      	mov	r0, r5
   28d22:	f7ff ff78 	bl	28c16 <memcpy>

	return 0;
}
   28d26:	4620      	mov	r0, r4
   28d28:	b005      	add	sp, #20
   28d2a:	bd30      	pop	{r4, r5, pc}

00028d2c <bt_rpa_create>:
}
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   28d2c:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   28d2e:	1cce      	adds	r6, r1, #3
{
   28d30:	4605      	mov	r5, r0
   28d32:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   28d34:	4630      	mov	r0, r6
   28d36:	2103      	movs	r1, #3
   28d38:	f7f2 f960 	bl	1affc <bt_rand>
	if (err) {
   28d3c:	b960      	cbnz	r0, 28d58 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   28d3e:	7963      	ldrb	r3, [r4, #5]
   28d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   28d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   28d48:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   28d4a:	4622      	mov	r2, r4
   28d4c:	4631      	mov	r1, r6
   28d4e:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   28d50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   28d54:	f7ff bfcd 	b.w	28cf2 <ah>
}
   28d58:	bd70      	pop	{r4, r5, r6, pc}

00028d5a <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   28d5a:	b510      	push	{r4, lr}
   28d5c:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   28d5e:	7801      	ldrb	r1, [r0, #0]
   28d60:	7822      	ldrb	r2, [r4, #0]
   28d62:	428a      	cmp	r2, r1
{
   28d64:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   28d66:	d00f      	beq.n	28d88 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   28d68:	4669      	mov	r1, sp
   28d6a:	f7ea fccb 	bl	13704 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   28d6e:	a905      	add	r1, sp, #20
   28d70:	4620      	mov	r0, r4
   28d72:	f7ea fcc7 	bl	13704 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   28d76:	2210      	movs	r2, #16
   28d78:	f10d 0115 	add.w	r1, sp, #21
   28d7c:	f10d 0001 	add.w	r0, sp, #1
   28d80:	f7ff ff38 	bl	28bf4 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   28d84:	b00a      	add	sp, #40	; 0x28
   28d86:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   28d88:	2a01      	cmp	r2, #1
   28d8a:	d006      	beq.n	28d9a <bt_uuid_cmp+0x40>
   28d8c:	2a02      	cmp	r2, #2
   28d8e:	d007      	beq.n	28da0 <bt_uuid_cmp+0x46>
   28d90:	b972      	cbnz	r2, 28db0 <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   28d92:	8840      	ldrh	r0, [r0, #2]
   28d94:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   28d96:	1ac0      	subs	r0, r0, r3
   28d98:	e7f4      	b.n	28d84 <bt_uuid_cmp+0x2a>
   28d9a:	6840      	ldr	r0, [r0, #4]
   28d9c:	6863      	ldr	r3, [r4, #4]
   28d9e:	e7fa      	b.n	28d96 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28da0:	2210      	movs	r2, #16
   28da2:	1c61      	adds	r1, r4, #1
   28da4:	3001      	adds	r0, #1
}
   28da6:	b00a      	add	sp, #40	; 0x28
   28da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   28dac:	f7ff bf22 	b.w	28bf4 <memcmp>
	switch (u1->type) {
   28db0:	f06f 0015 	mvn.w	r0, #21
   28db4:	e7e6      	b.n	28d84 <bt_uuid_cmp+0x2a>

00028db6 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   28db6:	2a04      	cmp	r2, #4
{
   28db8:	b510      	push	{r4, lr}
	switch (data_len) {
   28dba:	d00a      	beq.n	28dd2 <bt_uuid_create+0x1c>
   28dbc:	2a10      	cmp	r2, #16
   28dbe:	d00d      	beq.n	28ddc <bt_uuid_create+0x26>
   28dc0:	2a02      	cmp	r2, #2
   28dc2:	f04f 0300 	mov.w	r3, #0
   28dc6:	d10f      	bne.n	28de8 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   28dc8:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   28dca:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   28dcc:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   28dce:	2001      	movs	r0, #1
}
   28dd0:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   28dd2:	2301      	movs	r3, #1
   28dd4:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   28dd6:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   28dd8:	6042      	str	r2, [r0, #4]
		break;
   28dda:	e7f8      	b.n	28dce <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   28ddc:	2302      	movs	r3, #2
   28dde:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   28de2:	f7ff ff18 	bl	28c16 <memcpy>
		break;
   28de6:	e7f2      	b.n	28dce <bt_uuid_create+0x18>
	switch (data_len) {
   28de8:	4618      	mov	r0, r3
   28dea:	e7f1      	b.n	28dd0 <bt_uuid_create+0x1a>

00028dec <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   28dec:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   28dee:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   28df0:	2106      	movs	r1, #6
{
   28df2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   28df4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   28df8:	f7f2 f900 	bl	1affc <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   28dfc:	b918      	cbnz	r0, 28e06 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   28dfe:	79a3      	ldrb	r3, [r4, #6]
   28e00:	f063 033f 	orn	r3, r3, #63	; 0x3f
   28e04:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   28e06:	bd10      	pop	{r4, pc}

00028e08 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   28e08:	280f      	cmp	r0, #15
   28e0a:	d806      	bhi.n	28e1a <bt_hci_evt_get_flags+0x12>
   28e0c:	280d      	cmp	r0, #13
   28e0e:	d80b      	bhi.n	28e28 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   28e10:	2805      	cmp	r0, #5
   28e12:	bf14      	ite	ne
   28e14:	2002      	movne	r0, #2
   28e16:	2003      	moveq	r0, #3
   28e18:	4770      	bx	lr
	switch (evt) {
   28e1a:	2813      	cmp	r0, #19
   28e1c:	d004      	beq.n	28e28 <bt_hci_evt_get_flags+0x20>
   28e1e:	281a      	cmp	r0, #26
   28e20:	bf14      	ite	ne
   28e22:	2002      	movne	r0, #2
   28e24:	2001      	moveq	r0, #1
   28e26:	4770      	bx	lr
   28e28:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   28e2a:	4770      	bx	lr

00028e2c <atomic_or>:
{
   28e2c:	4603      	mov	r3, r0
}
   28e2e:	f3bf 8f5b 	dmb	ish
   28e32:	e853 0f00 	ldrex	r0, [r3]
   28e36:	ea40 0201 	orr.w	r2, r0, r1
   28e3a:	e843 2c00 	strex	ip, r2, [r3]
   28e3e:	f1bc 0f00 	cmp.w	ip, #0
   28e42:	d1f6      	bne.n	28e32 <atomic_or+0x6>
   28e44:	f3bf 8f5b 	dmb	ish
   28e48:	4770      	bx	lr

00028e4a <bt_hci_disconnect>:
{
   28e4a:	b570      	push	{r4, r5, r6, lr}
   28e4c:	4606      	mov	r6, r0
   28e4e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   28e50:	f240 4006 	movw	r0, #1030	; 0x406
   28e54:	2103      	movs	r1, #3
   28e56:	f7ea ffd1 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   28e5a:	4604      	mov	r4, r0
   28e5c:	b168      	cbz	r0, 28e7a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   28e5e:	2103      	movs	r1, #3
   28e60:	3008      	adds	r0, #8
   28e62:	f001 fa25 	bl	2a2b0 <net_buf_simple_add>
	disconn->reason = reason;
   28e66:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   28e68:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   28e6a:	4621      	mov	r1, r4
   28e6c:	2200      	movs	r2, #0
}
   28e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   28e72:	f240 4006 	movw	r0, #1030	; 0x406
   28e76:	f7ea bffb 	b.w	13e70 <bt_hci_cmd_send_sync>
}
   28e7a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28e7e:	bd70      	pop	{r4, r5, r6, pc}

00028e80 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   28e80:	8803      	ldrh	r3, [r0, #0]
   28e82:	8842      	ldrh	r2, [r0, #2]
   28e84:	4293      	cmp	r3, r2
{
   28e86:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   28e88:	d819      	bhi.n	28ebe <bt_le_conn_params_valid+0x3e>
   28e8a:	2b05      	cmp	r3, #5
   28e8c:	d917      	bls.n	28ebe <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   28e8e:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   28e92:	d814      	bhi.n	28ebe <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   28e94:	8883      	ldrh	r3, [r0, #4]
   28e96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   28e9a:	d210      	bcs.n	28ebe <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   28e9c:	88c0      	ldrh	r0, [r0, #6]
   28e9e:	f1a0 010a 	sub.w	r1, r0, #10
   28ea2:	b289      	uxth	r1, r1
   28ea4:	f640 4476 	movw	r4, #3190	; 0xc76
   28ea8:	42a1      	cmp	r1, r4
   28eaa:	d808      	bhi.n	28ebe <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   28eac:	3301      	adds	r3, #1
   28eae:	b29b      	uxth	r3, r3
   28eb0:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   28eb2:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   28eb6:	bf34      	ite	cc
   28eb8:	2001      	movcc	r0, #1
   28eba:	2000      	movcs	r0, #0
}
   28ebc:	bd10      	pop	{r4, pc}
		return false;
   28ebe:	2000      	movs	r0, #0
   28ec0:	e7fc      	b.n	28ebc <bt_le_conn_params_valid+0x3c>

00028ec2 <bt_le_set_data_len>:
{
   28ec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28ec4:	4607      	mov	r7, r0
   28ec6:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28ec8:	f242 0022 	movw	r0, #8226	; 0x2022
   28ecc:	2106      	movs	r1, #6
{
   28ece:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   28ed0:	f7ea ff94 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   28ed4:	4604      	mov	r4, r0
   28ed6:	b170      	cbz	r0, 28ef6 <bt_le_set_data_len+0x34>
   28ed8:	2106      	movs	r1, #6
   28eda:	3008      	adds	r0, #8
   28edc:	f001 f9e8 	bl	2a2b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28ee0:	883b      	ldrh	r3, [r7, #0]
   28ee2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   28ee4:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   28ee6:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   28ee8:	4621      	mov	r1, r4
   28eea:	f242 0022 	movw	r0, #8226	; 0x2022
}
   28eee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   28ef2:	f7eb b869 	b.w	13fc8 <bt_hci_cmd_send>
}
   28ef6:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00028efc <bt_le_set_phy>:
{
   28efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28f00:	4680      	mov	r8, r0
   28f02:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28f04:	f242 0032 	movw	r0, #8242	; 0x2032
   28f08:	2107      	movs	r1, #7
{
   28f0a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   28f0e:	4616      	mov	r6, r2
   28f10:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   28f12:	f7ea ff73 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   28f16:	4604      	mov	r4, r0
   28f18:	b190      	cbz	r0, 28f40 <bt_le_set_phy+0x44>
   28f1a:	2107      	movs	r1, #7
   28f1c:	3008      	adds	r0, #8
   28f1e:	f001 f9c7 	bl	2a2b0 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   28f22:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   28f26:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   28f28:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   28f2a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   28f2c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   28f2e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28f32:	4621      	mov	r1, r4
   28f34:	f242 0032 	movw	r0, #8242	; 0x2032
}
   28f38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   28f3c:	f7eb b844 	b.w	13fc8 <bt_hci_cmd_send>
}
   28f40:	f06f 0068 	mvn.w	r0, #104	; 0x68
   28f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00028f48 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   28f48:	6880      	ldr	r0, [r0, #8]
   28f4a:	f7eb b8ef 	b.w	1412c <bt_hci_le_enh_conn_complete>

00028f4e <le_legacy_conn_complete>:
{
   28f4e:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   28f50:	6881      	ldr	r1, [r0, #8]
{
   28f52:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   28f54:	780b      	ldrb	r3, [r1, #0]
   28f56:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   28f5a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   28f5e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   28f62:	78cb      	ldrb	r3, [r1, #3]
   28f64:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   28f68:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   28f6c:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   28f70:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   28f74:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   28f78:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   28f7c:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   28f80:	7c4b      	ldrb	r3, [r1, #17]
   28f82:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   28f86:	2207      	movs	r2, #7
   28f88:	3104      	adds	r1, #4
   28f8a:	a803      	add	r0, sp, #12
   28f8c:	f7ff fe43 	bl	28c16 <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   28f90:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   28f92:	4669      	mov	r1, sp
   28f94:	2206      	movs	r2, #6
   28f96:	f10d 0013 	add.w	r0, sp, #19
   28f9a:	9400      	str	r4, [sp, #0]
   28f9c:	f8ad 4004 	strh.w	r4, [sp, #4]
   28fa0:	f7ff fe39 	bl	28c16 <memcpy>
   28fa4:	2206      	movs	r2, #6
   28fa6:	4669      	mov	r1, sp
   28fa8:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   28fac:	9400      	str	r4, [sp, #0]
   28fae:	f8ad 4004 	strh.w	r4, [sp, #4]
   28fb2:	f7ff fe30 	bl	28c16 <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   28fb6:	a802      	add	r0, sp, #8
   28fb8:	f7eb f8b8 	bl	1412c <bt_hci_le_enh_conn_complete>
}
   28fbc:	b00a      	add	sp, #40	; 0x28
   28fbe:	bd10      	pop	{r4, pc}

00028fc0 <bt_addr_le_is_bonded>:
		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
	} else {
		return false;
	}
}
   28fc0:	2000      	movs	r0, #0
   28fc2:	4770      	bx	lr

00028fc4 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   28fc4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   28fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   28fca:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   28fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28fd0:	2100      	movs	r1, #0
{
   28fd2:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   28fd4:	f7ea fc02 	bl	137dc <bt_buf_get_evt>
   28fd8:	2102      	movs	r1, #2
   28fda:	4604      	mov	r4, r0
   28fdc:	3008      	adds	r0, #8
   28fde:	f001 f967 	bl	2a2b0 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   28fe2:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   28fe4:	7045      	strb	r5, [r0, #1]

	return buf;
}
   28fe6:	4620      	mov	r0, r4
   28fe8:	bd70      	pop	{r4, r5, r6, pc}

00028fea <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   28fea:	3103      	adds	r1, #3
{
   28fec:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   28fee:	b2c9      	uxtb	r1, r1
{
   28ff0:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   28ff2:	200e      	movs	r0, #14
   28ff4:	f7ff ffe6 	bl	28fc4 <bt_hci_evt_create>
   28ff8:	2103      	movs	r1, #3
   28ffa:	4604      	mov	r4, r0
   28ffc:	3008      	adds	r0, #8
   28ffe:	f001 f957 	bl	2a2b0 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   29002:	2301      	movs	r3, #1
   29004:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   29006:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   2900a:	4620      	mov	r0, r4
   2900c:	bd38      	pop	{r3, r4, r5, pc}

0002900e <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   2900e:	b570      	push	{r4, r5, r6, lr}
   29010:	4605      	mov	r5, r0
   29012:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   29014:	200f      	movs	r0, #15
   29016:	2104      	movs	r1, #4
   29018:	f7ff ffd4 	bl	28fc4 <bt_hci_evt_create>
   2901c:	2104      	movs	r1, #4
   2901e:	4604      	mov	r4, r0
   29020:	3008      	adds	r0, #8
   29022:	f001 f945 	bl	2a2b0 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   29026:	2201      	movs	r2, #1
	cs->status = status;
   29028:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   2902a:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   2902c:	8045      	strh	r5, [r0, #2]

	return buf;
}
   2902e:	4620      	mov	r0, r4
   29030:	bd70      	pop	{r4, r5, r6, pc}

00029032 <bt_lookup_id_addr>:
}
   29032:	4608      	mov	r0, r1
   29034:	4770      	bx	lr

00029036 <bt_id_set_adv_private_addr>:
{
   29036:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   29038:	2106      	movs	r1, #6
   2903a:	4668      	mov	r0, sp
   2903c:	f7f1 ffde 	bl	1affc <bt_rand>
	if (err) {
   29040:	b940      	cbnz	r0, 29054 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   29042:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   29046:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   29048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2904c:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   29050:	f7eb ffaa 	bl	14fa8 <set_random_address>
}
   29054:	b003      	add	sp, #12
   29056:	f85d fb04 	ldr.w	pc, [sp], #4

0002905a <bt_id_adv_random_addr_check>:
}
   2905a:	2001      	movs	r0, #1
   2905c:	4770      	bx	lr

0002905e <get_adv_channel_map>:
{
   2905e:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   29060:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   29064:	bf0c      	ite	eq
   29066:	2007      	moveq	r0, #7
   29068:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   2906a:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   2906c:	bf48      	it	mi
   2906e:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   29072:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   29074:	bf48      	it	mi
   29076:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   2907a:	4770      	bx	lr

0002907c <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2907c:	f3bf 8f5b 	dmb	ish
   29080:	6800      	ldr	r0, [r0, #0]
   29082:	f3bf 8f5b 	dmb	ish
}
   29086:	4770      	bx	lr

00029088 <atomic_and>:
{
   29088:	4603      	mov	r3, r0
}
   2908a:	f3bf 8f5b 	dmb	ish
   2908e:	e853 0f00 	ldrex	r0, [r3]
   29092:	ea00 0201 	and.w	r2, r0, r1
   29096:	e843 2c00 	strex	ip, r2, [r3]
   2909a:	f1bc 0f00 	cmp.w	ip, #0
   2909e:	d1f6      	bne.n	2908e <atomic_and+0x6>
   290a0:	f3bf 8f5b 	dmb	ish
   290a4:	4770      	bx	lr

000290a6 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   290a6:	2301      	movs	r3, #1
{
   290a8:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   290aa:	fa03 f101 	lsl.w	r1, r3, r1
{
   290ae:	4604      	mov	r4, r0
	if (val) {
   290b0:	b162      	cbz	r2, 290cc <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   290b2:	f3bf 8f5b 	dmb	ish
   290b6:	e854 3f00 	ldrex	r3, [r4]
   290ba:	430b      	orrs	r3, r1
   290bc:	e844 3200 	strex	r2, r3, [r4]
   290c0:	2a00      	cmp	r2, #0
   290c2:	d1f8      	bne.n	290b6 <atomic_set_bit_to+0x10>
   290c4:	f3bf 8f5b 	dmb	ish
	}
}
   290c8:	bc10      	pop	{r4}
   290ca:	4770      	bx	lr
   290cc:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   290ce:	43c9      	mvns	r1, r1
   290d0:	f7ff bfda 	b.w	29088 <atomic_and>

000290d4 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   290d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   290d8:	b087      	sub	sp, #28
   290da:	4605      	mov	r5, r0
   290dc:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   290e0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   290e4:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   290e8:	460c      	mov	r4, r1
   290ea:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   290ec:	2100      	movs	r1, #0
   290ee:	2210      	movs	r2, #16
   290f0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   290f2:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   290f4:	f7ff fdba 	bl	28c6c <memset>
	if (use_name) {
   290f8:	b187      	cbz	r7, 2911c <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   290fa:	f7eb ff37 	bl	14f6c <bt_get_name>
   290fe:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   29100:	2c00      	cmp	r4, #0
   29102:	d13e      	bne.n	29182 <le_adv_update.constprop.0+0xae>
   29104:	2e00      	cmp	r6, #0
   29106:	d148      	bne.n	2919a <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   29108:	4648      	mov	r0, r9
   2910a:	f7ff fd57 	bl	28bbc <strlen>
   2910e:	2209      	movs	r2, #9
   29110:	f88d 2000 	strb.w	r2, [sp]
   29114:	f88d 0001 	strb.w	r0, [sp, #1]
   29118:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   2911c:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   29120:	2f00      	cmp	r7, #0
   29122:	d03c      	beq.n	2919e <le_adv_update.constprop.0+0xca>
   29124:	f1ba 0f00 	cmp.w	sl, #0
   29128:	d002      	beq.n	29130 <le_adv_update.constprop.0+0x5c>
   2912a:	f1b8 0f00 	cmp.w	r8, #0
   2912e:	d036      	beq.n	2919e <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   29130:	2301      	movs	r3, #1
			d[1].data = &data;
   29132:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   29136:	9305      	str	r3, [sp, #20]
			d_len = 2;
   29138:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   2913a:	a902      	add	r1, sp, #8
   2913c:	f242 0008 	movw	r0, #8200	; 0x2008
   29140:	f7ec f998 	bl	15474 <hci_set_ad>
		if (err) {
   29144:	4604      	mov	r4, r0
   29146:	b978      	cbnz	r0, 29168 <le_adv_update.constprop.0+0x94>
	if (scannable) {
   29148:	f1ba 0f00 	cmp.w	sl, #0
   2914c:	d129      	bne.n	291a2 <le_adv_update.constprop.0+0xce>
   2914e:	3510      	adds	r5, #16
   29150:	f3bf 8f5b 	dmb	ish
   29154:	e855 3f00 	ldrex	r3, [r5]
   29158:	f043 0304 	orr.w	r3, r3, #4
   2915c:	e845 3200 	strex	r2, r3, [r5]
   29160:	2a00      	cmp	r2, #0
   29162:	d1f7      	bne.n	29154 <le_adv_update.constprop.0+0x80>
   29164:	f3bf 8f5b 	dmb	ish
}
   29168:	4620      	mov	r0, r4
   2916a:	b007      	add	sp, #28
   2916c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29170:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   29174:	3908      	subs	r1, #8
   29176:	2901      	cmp	r1, #1
   29178:	d92a      	bls.n	291d0 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   2917a:	3201      	adds	r2, #1
   2917c:	4593      	cmp	fp, r2
   2917e:	d1f7      	bne.n	29170 <le_adv_update.constprop.0+0x9c>
   29180:	e7c0      	b.n	29104 <le_adv_update.constprop.0+0x30>
   29182:	2200      	movs	r2, #0
   29184:	e7fa      	b.n	2917c <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   29186:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   2918a:	3908      	subs	r1, #8
   2918c:	2901      	cmp	r1, #1
   2918e:	d91f      	bls.n	291d0 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   29190:	3201      	adds	r2, #1
   29192:	9b10      	ldr	r3, [sp, #64]	; 0x40
   29194:	4293      	cmp	r3, r2
   29196:	d1f6      	bne.n	29186 <le_adv_update.constprop.0+0xb2>
   29198:	e7b6      	b.n	29108 <le_adv_update.constprop.0+0x34>
   2919a:	2200      	movs	r2, #0
   2919c:	e7f9      	b.n	29192 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   2919e:	2201      	movs	r2, #1
   291a0:	e7cb      	b.n	2913a <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   291a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   291a4:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   291a6:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   291a8:	b187      	cbz	r7, 291cc <le_adv_update.constprop.0+0xf8>
   291aa:	f1b8 0f00 	cmp.w	r8, #0
   291ae:	d10d      	bne.n	291cc <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   291b0:	2301      	movs	r3, #1
			d[1].data = &data;
   291b2:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   291b6:	9305      	str	r3, [sp, #20]
			d_len = 2;
   291b8:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   291ba:	a902      	add	r1, sp, #8
   291bc:	f242 0009 	movw	r0, #8201	; 0x2009
   291c0:	f7ec f958 	bl	15474 <hci_set_ad>
		if (err) {
   291c4:	2800      	cmp	r0, #0
   291c6:	d0c2      	beq.n	2914e <le_adv_update.constprop.0+0x7a>
   291c8:	4604      	mov	r4, r0
   291ca:	e7cd      	b.n	29168 <le_adv_update.constprop.0+0x94>
		d_len = 1;
   291cc:	2201      	movs	r2, #1
   291ce:	e7f4      	b.n	291ba <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   291d0:	f06f 0415 	mvn.w	r4, #21
   291d4:	e7c8      	b.n	29168 <le_adv_update.constprop.0+0x94>

000291d6 <bt_le_adv_set_enable_legacy>:
{
   291d6:	b570      	push	{r4, r5, r6, lr}
   291d8:	4606      	mov	r6, r0
   291da:	b086      	sub	sp, #24
   291dc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   291de:	f242 000a 	movw	r0, #8202	; 0x200a
   291e2:	2101      	movs	r1, #1
   291e4:	f7ea fe0a 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   291e8:	4604      	mov	r4, r0
   291ea:	b1b0      	cbz	r0, 2921a <bt_le_adv_set_enable_legacy+0x44>
	return net_buf_simple_add_u8(&buf->b, val);
   291ec:	3008      	adds	r0, #8
	if (enable) {
   291ee:	b195      	cbz	r5, 29216 <bt_le_adv_set_enable_legacy+0x40>
   291f0:	2101      	movs	r1, #1
   291f2:	f001 f86c 	bl	2a2ce <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   291f6:	f106 0210 	add.w	r2, r6, #16
   291fa:	a903      	add	r1, sp, #12
   291fc:	4620      	mov	r0, r4
   291fe:	9500      	str	r5, [sp, #0]
   29200:	2306      	movs	r3, #6
   29202:	f7ea fde9 	bl	13dd8 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   29206:	2200      	movs	r2, #0
   29208:	4621      	mov	r1, r4
   2920a:	f242 000a 	movw	r0, #8202	; 0x200a
   2920e:	f7ea fe2f 	bl	13e70 <bt_hci_cmd_send_sync>
}
   29212:	b006      	add	sp, #24
   29214:	bd70      	pop	{r4, r5, r6, pc}
   29216:	4629      	mov	r1, r5
   29218:	e7eb      	b.n	291f2 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   2921a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2921e:	e7f8      	b.n	29212 <bt_le_adv_set_enable_legacy+0x3c>

00029220 <tx_notify>:
{
   29220:	b570      	push	{r4, r5, r6, lr}
   29222:	4604      	mov	r4, r0
	__asm__ volatile(
   29224:	f04f 0220 	mov.w	r2, #32
   29228:	f3ef 8311 	mrs	r3, BASEPRI
   2922c:	f382 8811 	msr	BASEPRI, r2
   29230:	f3bf 8f6f 	isb	sy
	return list->head;
   29234:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   29236:	b920      	cbnz	r0, 29242 <tx_notify+0x22>
	__asm__ volatile(
   29238:	f383 8811 	msr	BASEPRI, r3
   2923c:	f3bf 8f6f 	isb	sy
}
   29240:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29242:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   29244:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29246:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29248:	4288      	cmp	r0, r1
	list->tail = node;
   2924a:	bf08      	it	eq
   2924c:	6262      	streq	r2, [r4, #36]	; 0x24
   2924e:	f383 8811 	msr	BASEPRI, r3
   29252:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   29256:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2925a:	f7ec fb45 	bl	158e8 <tx_free>
		cb(conn, user_data);
   2925e:	4631      	mov	r1, r6
   29260:	4620      	mov	r0, r4
   29262:	47a8      	blx	r5
	while (1) {
   29264:	e7de      	b.n	29224 <tx_notify+0x4>

00029266 <tx_complete_work>:
	tx_notify(conn);
   29266:	3828      	subs	r0, #40	; 0x28
   29268:	f7ff bfda 	b.w	29220 <tx_notify>

0002926c <bt_conn_new>:
{
   2926c:	b538      	push	{r3, r4, r5, lr}
   2926e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   29270:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   29272:	2501      	movs	r5, #1
   29274:	428b      	cmp	r3, r1
   29276:	d102      	bne.n	2927e <bt_conn_new+0x12>
		return NULL;
   29278:	2400      	movs	r4, #0
}
   2927a:	4620      	mov	r0, r4
   2927c:	bd38      	pop	{r3, r4, r5, pc}
   2927e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   29282:	f3bf 8f5b 	dmb	ish
   29286:	e852 0f00 	ldrex	r0, [r2]
   2928a:	2800      	cmp	r0, #0
   2928c:	d104      	bne.n	29298 <bt_conn_new+0x2c>
   2928e:	e842 5c00 	strex	ip, r5, [r2]
   29292:	f1bc 0f00 	cmp.w	ip, #0
   29296:	d1f6      	bne.n	29286 <bt_conn_new+0x1a>
   29298:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   2929c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   292a0:	d002      	beq.n	292a8 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   292a2:	3301      	adds	r3, #1
   292a4:	4604      	mov	r4, r0
   292a6:	e7e5      	b.n	29274 <bt_conn_new+0x8>
	if (!conn) {
   292a8:	2c00      	cmp	r4, #0
   292aa:	d0e6      	beq.n	2927a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   292ac:	22b8      	movs	r2, #184	; 0xb8
   292ae:	2100      	movs	r1, #0
   292b0:	4620      	mov	r0, r4
   292b2:	f7ff fcdb 	bl	28c6c <memset>
	return conn;
   292b6:	e7e0      	b.n	2927a <bt_conn_new+0xe>

000292b8 <bt_conn_get_security>:
}
   292b8:	2001      	movs	r0, #1
   292ba:	4770      	bx	lr

000292bc <bt_conn_reset_rx_state>:
{
   292bc:	b510      	push	{r4, lr}
   292be:	4604      	mov	r4, r0
	if (!conn->rx) {
   292c0:	6900      	ldr	r0, [r0, #16]
   292c2:	b118      	cbz	r0, 292cc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   292c4:	f7fc fac2 	bl	2584c <net_buf_unref>
	conn->rx = NULL;
   292c8:	2300      	movs	r3, #0
   292ca:	6123      	str	r3, [r4, #16]
}
   292cc:	bd10      	pop	{r4, pc}

000292ce <conn_cleanup>:
{
   292ce:	b570      	push	{r4, r5, r6, lr}
   292d0:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   292d2:	f100 0638 	add.w	r6, r0, #56	; 0x38
   292d6:	2200      	movs	r2, #0
   292d8:	2300      	movs	r3, #0
   292da:	4630      	mov	r0, r6
   292dc:	f000 ff8b 	bl	2a1f6 <net_buf_get>
   292e0:	4605      	mov	r5, r0
   292e2:	b950      	cbnz	r0, 292fa <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   292e4:	4620      	mov	r0, r4
   292e6:	f7ff ffe9 	bl	292bc <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   292ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
   292ee:	2200      	movs	r2, #0
}
   292f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   292f4:	2300      	movs	r3, #0
   292f6:	f7fd be35 	b.w	26f64 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   292fa:	6968      	ldr	r0, [r5, #20]
   292fc:	b108      	cbz	r0, 29302 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   292fe:	f7ec faf3 	bl	158e8 <tx_free>
		net_buf_unref(buf);
   29302:	4628      	mov	r0, r5
   29304:	f7fc faa2 	bl	2584c <net_buf_unref>
   29308:	e7e5      	b.n	292d6 <conn_cleanup+0x8>

0002930a <bt_conn_connected>:
{
   2930a:	b510      	push	{r4, lr}
   2930c:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2930e:	f7ed f891 	bl	16434 <bt_l2cap_connected>
	notify_connected(conn);
   29312:	4620      	mov	r0, r4
}
   29314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   29318:	f7ec baf0 	b.w	158fc <notify_connected>

0002931c <bt_conn_is_peer_addr_le>:
{
   2931c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2931e:	7a03      	ldrb	r3, [r0, #8]
   29320:	428b      	cmp	r3, r1
{
   29322:	4604      	mov	r4, r0
   29324:	4615      	mov	r5, r2
	if (id != conn->id) {
   29326:	d115      	bne.n	29354 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   29328:	f100 0188 	add.w	r1, r0, #136	; 0x88
   2932c:	2207      	movs	r2, #7
   2932e:	4628      	mov	r0, r5
   29330:	f7ff fc60 	bl	28bf4 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   29334:	b180      	cbz	r0, 29358 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   29336:	78e3      	ldrb	r3, [r4, #3]
   29338:	2207      	movs	r2, #7
   2933a:	b943      	cbnz	r3, 2934e <bt_conn_is_peer_addr_le+0x32>
   2933c:	f104 0196 	add.w	r1, r4, #150	; 0x96
   29340:	4628      	mov	r0, r5
   29342:	f7ff fc57 	bl	28bf4 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   29346:	fab0 f080 	clz	r0, r0
   2934a:	0940      	lsrs	r0, r0, #5
}
   2934c:	bd38      	pop	{r3, r4, r5, pc}
   2934e:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   29352:	e7f5      	b.n	29340 <bt_conn_is_peer_addr_le+0x24>
		return false;
   29354:	2000      	movs	r0, #0
   29356:	e7f9      	b.n	2934c <bt_conn_is_peer_addr_le+0x30>
		return true;
   29358:	2001      	movs	r0, #1
   2935a:	e7f7      	b.n	2934c <bt_conn_is_peer_addr_le+0x30>

0002935c <bt_conn_ref>:
{
   2935c:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   2935e:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29362:	f3bf 8f5b 	dmb	ish
   29366:	6813      	ldr	r3, [r2, #0]
   29368:	f3bf 8f5b 	dmb	ish
		if (!old) {
   2936c:	b17b      	cbz	r3, 2938e <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2936e:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   29372:	1c59      	adds	r1, r3, #1
   29374:	e852 4f00 	ldrex	r4, [r2]
   29378:	429c      	cmp	r4, r3
   2937a:	d104      	bne.n	29386 <bt_conn_ref+0x2a>
   2937c:	e842 1c00 	strex	ip, r1, [r2]
   29380:	f1bc 0f00 	cmp.w	ip, #0
   29384:	d1f6      	bne.n	29374 <bt_conn_ref+0x18>
   29386:	f3bf 8f5b 	dmb	ish
   2938a:	d1ea      	bne.n	29362 <bt_conn_ref+0x6>
}
   2938c:	bd10      	pop	{r4, pc}
			return NULL;
   2938e:	4618      	mov	r0, r3
   29390:	e7fc      	b.n	2938c <bt_conn_ref+0x30>

00029392 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   29392:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   29396:	f3bf 8f5b 	dmb	ish
   2939a:	e853 2f00 	ldrex	r2, [r3]
   2939e:	3a01      	subs	r2, #1
   293a0:	e843 2100 	strex	r1, r2, [r3]
   293a4:	2900      	cmp	r1, #0
   293a6:	d1f8      	bne.n	2939a <bt_conn_unref+0x8>
   293a8:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   293ac:	f3bf 8f5b 	dmb	ish
   293b0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   293b4:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   293b8:	b90b      	cbnz	r3, 293be <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   293ba:	f7ec ba55 	b.w	15868 <bt_le_adv_resume>
}
   293be:	4770      	bx	lr

000293c0 <conn_lookup_handle>:
{
   293c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   293c4:	4607      	mov	r7, r0
   293c6:	460e      	mov	r6, r1
   293c8:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   293ca:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   293cc:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   293d0:	42b4      	cmp	r4, r6
   293d2:	d103      	bne.n	293dc <conn_lookup_handle+0x1c>
	return NULL;
   293d4:	2300      	movs	r3, #0
}
   293d6:	4618      	mov	r0, r3
   293d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   293dc:	fb09 7004 	mla	r0, r9, r4, r7
   293e0:	f7ff ffbc 	bl	2935c <bt_conn_ref>
   293e4:	4603      	mov	r3, r0
		if (!conn) {
   293e6:	b158      	cbz	r0, 29400 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   293e8:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   293ea:	2d01      	cmp	r5, #1
   293ec:	d002      	beq.n	293f4 <conn_lookup_handle+0x34>
   293ee:	3d07      	subs	r5, #7
   293f0:	2d01      	cmp	r5, #1
   293f2:	d803      	bhi.n	293fc <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   293f4:	881a      	ldrh	r2, [r3, #0]
   293f6:	4542      	cmp	r2, r8
   293f8:	d0ed      	beq.n	293d6 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   293fa:	4618      	mov	r0, r3
   293fc:	f7ff ffc9 	bl	29392 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   29400:	3401      	adds	r4, #1
   29402:	e7e5      	b.n	293d0 <conn_lookup_handle+0x10>

00029404 <bt_conn_le_conn_update>:
{
   29404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29406:	4607      	mov	r7, r0
   29408:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2940a:	f242 0013 	movw	r0, #8211	; 0x2013
   2940e:	210e      	movs	r1, #14
   29410:	f7ea fcf4 	bl	13dfc <bt_hci_cmd_create>
	if (!buf) {
   29414:	4606      	mov	r6, r0
   29416:	b1d0      	cbz	r0, 2944e <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   29418:	210e      	movs	r1, #14
   2941a:	3008      	adds	r0, #8
   2941c:	f000 ff48 	bl	2a2b0 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   29420:	220e      	movs	r2, #14
   29422:	4604      	mov	r4, r0
   29424:	2100      	movs	r1, #0
   29426:	f7ff fc21 	bl	28c6c <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2942a:	883b      	ldrh	r3, [r7, #0]
   2942c:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2942e:	882b      	ldrh	r3, [r5, #0]
   29430:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   29432:	886b      	ldrh	r3, [r5, #2]
   29434:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   29436:	88ab      	ldrh	r3, [r5, #4]
   29438:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2943a:	88eb      	ldrh	r3, [r5, #6]
   2943c:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2943e:	4631      	mov	r1, r6
   29440:	2200      	movs	r2, #0
}
   29442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   29446:	f242 0013 	movw	r0, #8211	; 0x2013
   2944a:	f7ea bd11 	b.w	13e70 <bt_hci_cmd_send_sync>
}
   2944e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   29452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029454 <l2cap_connected>:
}
   29454:	4770      	bx	lr

00029456 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   29456:	3010      	adds	r0, #16
   29458:	f001 ba90 	b.w	2a97c <k_work_cancel_delayable>

0002945c <bt_l2cap_chan_remove>:
	return list->head;
   2945c:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   2945e:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29460:	b17b      	cbz	r3, 29482 <bt_l2cap_chan_remove+0x26>
   29462:	3b08      	subs	r3, #8
   29464:	2200      	movs	r2, #0
   29466:	b163      	cbz	r3, 29482 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   29468:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   2946a:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   2946e:	d10e      	bne.n	2948e <bt_l2cap_chan_remove+0x32>
	return node->next;
   29470:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   29472:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   29474:	b932      	cbnz	r2, 29484 <bt_l2cap_chan_remove+0x28>
   29476:	42ac      	cmp	r4, r5
	list->head = node;
   29478:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   2947a:	d100      	bne.n	2947e <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2947c:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   2947e:	2200      	movs	r2, #0
   29480:	609a      	str	r2, [r3, #8]
}
   29482:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   29484:	42ac      	cmp	r4, r5
	parent->next = child;
   29486:	6011      	str	r1, [r2, #0]
	list->tail = node;
   29488:	bf08      	it	eq
   2948a:	6542      	streq	r2, [r0, #84]	; 0x54
}
   2948c:	e7f7      	b.n	2947e <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2948e:	2c00      	cmp	r4, #0
   29490:	d0f7      	beq.n	29482 <bt_l2cap_chan_remove+0x26>
	return node->next;
   29492:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   29494:	2b00      	cmp	r3, #0
   29496:	d0f4      	beq.n	29482 <bt_l2cap_chan_remove+0x26>
   29498:	3b08      	subs	r3, #8
   2949a:	4622      	mov	r2, r4
   2949c:	e7e3      	b.n	29466 <bt_l2cap_chan_remove+0xa>

0002949e <bt_l2cap_chan_del>:
{
   2949e:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   294a0:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   294a4:	4604      	mov	r4, r0
	if (!chan->conn) {
   294a6:	b123      	cbz	r3, 294b2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   294a8:	686b      	ldr	r3, [r5, #4]
   294aa:	b103      	cbz	r3, 294ae <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   294ac:	4798      	blx	r3
	chan->conn = NULL;
   294ae:	2300      	movs	r3, #0
   294b0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   294b2:	68e3      	ldr	r3, [r4, #12]
   294b4:	b10b      	cbz	r3, 294ba <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   294b6:	4620      	mov	r0, r4
   294b8:	4798      	blx	r3
	if (ops->released) {
   294ba:	69eb      	ldr	r3, [r5, #28]
   294bc:	b11b      	cbz	r3, 294c6 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   294be:	4620      	mov	r0, r4
}
   294c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   294c4:	4718      	bx	r3
}
   294c6:	bd70      	pop	{r4, r5, r6, pc}

000294c8 <bt_l2cap_disconnected>:
	return list->head;
   294c8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   294ca:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   294cc:	b18b      	cbz	r3, 294f2 <bt_l2cap_disconnected+0x2a>
   294ce:	f1b3 0008 	subs.w	r0, r3, #8
   294d2:	d00e      	beq.n	294f2 <bt_l2cap_disconnected+0x2a>
	return node->next;
   294d4:	681c      	ldr	r4, [r3, #0]
   294d6:	b104      	cbz	r4, 294da <bt_l2cap_disconnected+0x12>
   294d8:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   294da:	f7ff ffe0 	bl	2949e <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   294de:	b144      	cbz	r4, 294f2 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   294e0:	f114 0308 	adds.w	r3, r4, #8
   294e4:	d002      	beq.n	294ec <bt_l2cap_disconnected+0x24>
	return node->next;
   294e6:	68a3      	ldr	r3, [r4, #8]
   294e8:	b103      	cbz	r3, 294ec <bt_l2cap_disconnected+0x24>
   294ea:	3b08      	subs	r3, #8
{
   294ec:	4620      	mov	r0, r4
   294ee:	461c      	mov	r4, r3
   294f0:	e7f3      	b.n	294da <bt_l2cap_disconnected+0x12>
}
   294f2:	bd10      	pop	{r4, pc}

000294f4 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   294f4:	3104      	adds	r1, #4
   294f6:	f7ec be43 	b.w	16180 <bt_conn_create_pdu_timeout>

000294fa <bt_l2cap_send_cb>:
{
   294fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   294fe:	4614      	mov	r4, r2
   29500:	4605      	mov	r5, r0
   29502:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   29504:	f102 0008 	add.w	r0, r2, #8
   29508:	2104      	movs	r1, #4
   2950a:	461e      	mov	r6, r3
   2950c:	f8dd 8018 	ldr.w	r8, [sp, #24]
   29510:	f000 fee5 	bl	2a2de <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29514:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   29516:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   29518:	3a04      	subs	r2, #4
   2951a:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2951c:	4643      	mov	r3, r8
   2951e:	4632      	mov	r2, r6
   29520:	4621      	mov	r1, r4
   29522:	4628      	mov	r0, r5
}
   29524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   29528:	f7ec bb82 	b.w	15c30 <bt_conn_send_cb>

0002952c <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   2952c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2952e:	b160      	cbz	r0, 2954a <bt_l2cap_le_lookup_tx_cid+0x1e>
   29530:	3808      	subs	r0, #8
   29532:	b900      	cbnz	r0, 29536 <bt_l2cap_le_lookup_tx_cid+0xa>
   29534:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   29536:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   2953a:	428b      	cmp	r3, r1
   2953c:	d005      	beq.n	2954a <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2953e:	f110 0308 	adds.w	r3, r0, #8
   29542:	d001      	beq.n	29548 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   29544:	6880      	ldr	r0, [r0, #8]
   29546:	e7f2      	b.n	2952e <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   29548:	4618      	mov	r0, r3
}
   2954a:	4770      	bx	lr

0002954c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   2954c:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2954e:	b160      	cbz	r0, 2956a <bt_l2cap_le_lookup_rx_cid+0x1e>
   29550:	3808      	subs	r0, #8
   29552:	b900      	cbnz	r0, 29556 <bt_l2cap_le_lookup_rx_cid+0xa>
   29554:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   29556:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2955a:	428b      	cmp	r3, r1
   2955c:	d005      	beq.n	2956a <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2955e:	f110 0308 	adds.w	r3, r0, #8
   29562:	d001      	beq.n	29568 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   29564:	6880      	ldr	r0, [r0, #8]
   29566:	e7f2      	b.n	2954e <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   29568:	4618      	mov	r0, r3
}
   2956a:	4770      	bx	lr

0002956c <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2956c:	4770      	bx	lr

0002956e <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2956e:	4603      	mov	r3, r0
	return list->head;
   29570:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   29572:	b128      	cbz	r0, 29580 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   29574:	6859      	ldr	r1, [r3, #4]
	return node->next;
   29576:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   29578:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2957a:	4288      	cmp	r0, r1
	list->tail = node;
   2957c:	bf08      	it	eq
   2957e:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   29580:	4770      	bx	lr

00029582 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   29582:	4603      	mov	r3, r0
	size_t bytes = 0;
   29584:	2000      	movs	r0, #0

	while (buf) {
   29586:	b903      	cbnz	r3, 2958a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   29588:	4770      	bx	lr
		bytes += buf->len;
   2958a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2958c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2958e:	4410      	add	r0, r2
		buf = buf->frags;
   29590:	e7f9      	b.n	29586 <net_buf_frags_len+0x4>

00029592 <att_sent>:
	if (chan->ops->sent) {
   29592:	684b      	ldr	r3, [r1, #4]
   29594:	695b      	ldr	r3, [r3, #20]
{
   29596:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   29598:	b103      	cbz	r3, 2959c <att_sent+0xa>
		chan->ops->sent(chan);
   2959a:	4718      	bx	r3
}
   2959c:	4770      	bx	lr

0002959e <attr_read_type_cb>:
{
   2959e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   295a0:	68d4      	ldr	r4, [r2, #12]
   295a2:	7823      	ldrb	r3, [r4, #0]
   295a4:	3102      	adds	r1, #2
   295a6:	b913      	cbnz	r3, 295ae <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   295a8:	7021      	strb	r1, [r4, #0]
	return true;
   295aa:	2001      	movs	r0, #1
   295ac:	e006      	b.n	295bc <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   295ae:	428b      	cmp	r3, r1
   295b0:	d0fb      	beq.n	295aa <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   295b2:	8983      	ldrh	r3, [r0, #12]
   295b4:	3b02      	subs	r3, #2
   295b6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   295b8:	2000      	movs	r0, #0
   295ba:	6110      	str	r0, [r2, #16]
}
   295bc:	bd10      	pop	{r4, pc}

000295be <att_prepare_write_req>:
}
   295be:	2006      	movs	r0, #6
   295c0:	4770      	bx	lr

000295c2 <att_op_get_type>:
	switch (op) {
   295c2:	281e      	cmp	r0, #30
   295c4:	d816      	bhi.n	295f4 <att_op_get_type+0x32>
   295c6:	b308      	cbz	r0, 2960c <att_op_get_type+0x4a>
   295c8:	1e43      	subs	r3, r0, #1
   295ca:	2b1d      	cmp	r3, #29
   295cc:	d81e      	bhi.n	2960c <att_op_get_type+0x4a>
   295ce:	e8df f003 	tbb	[pc, r3]
   295d2:	2317      	.short	0x2317
   295d4:	23172317 	.word	0x23172317
   295d8:	23172317 	.word	0x23172317
   295dc:	23172317 	.word	0x23172317
   295e0:	23172317 	.word	0x23172317
   295e4:	231d1d17 	.word	0x231d1d17
   295e8:	1d172317 	.word	0x1d172317
   295ec:	0f1b1d19 	.word	0x0f1b1d19
   295f0:	2004      	movs	r0, #4
   295f2:	4770      	bx	lr
   295f4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   295f8:	2b52      	cmp	r3, #82	; 0x52
   295fa:	d107      	bne.n	2960c <att_op_get_type+0x4a>
		return ATT_COMMAND;
   295fc:	2000      	movs	r0, #0
}
   295fe:	4770      	bx	lr
		return ATT_RESPONSE;
   29600:	2002      	movs	r0, #2
   29602:	4770      	bx	lr
		return ATT_NOTIFICATION;
   29604:	2003      	movs	r0, #3
   29606:	4770      	bx	lr
		return ATT_INDICATION;
   29608:	2005      	movs	r0, #5
   2960a:	4770      	bx	lr
		return ATT_COMMAND;
   2960c:	f010 0f40 	tst.w	r0, #64	; 0x40
   29610:	bf0c      	ite	eq
   29612:	2006      	moveq	r0, #6
   29614:	2000      	movne	r0, #0
   29616:	4770      	bx	lr
		return ATT_REQUEST;
   29618:	2001      	movs	r0, #1
   2961a:	4770      	bx	lr

0002961c <bt_gatt_foreach_attr>:
{
   2961c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2961e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   29622:	2300      	movs	r3, #0
   29624:	9300      	str	r3, [sp, #0]
   29626:	461a      	mov	r2, r3
   29628:	f7ee f9ae 	bl	17988 <bt_gatt_foreach_attr_type>
}
   2962c:	b005      	add	sp, #20
   2962e:	f85d fb04 	ldr.w	pc, [sp], #4

00029632 <find_info_cb>:
{
   29632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   29634:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   29636:	6817      	ldr	r7, [r2, #0]
{
   29638:	4605      	mov	r5, r0
   2963a:	460e      	mov	r6, r1
   2963c:	4614      	mov	r4, r2
	if (!data->rsp) {
   2963e:	b963      	cbnz	r3, 2965a <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   29640:	6850      	ldr	r0, [r2, #4]
   29642:	2101      	movs	r1, #1
   29644:	3008      	adds	r0, #8
   29646:	f000 fe33 	bl	2a2b0 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2964a:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2964c:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2964e:	781b      	ldrb	r3, [r3, #0]
   29650:	2b00      	cmp	r3, #0
   29652:	bf0c      	ite	eq
   29654:	2301      	moveq	r3, #1
   29656:	2302      	movne	r3, #2
   29658:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2965a:	68a3      	ldr	r3, [r4, #8]
   2965c:	781b      	ldrb	r3, [r3, #0]
   2965e:	2b01      	cmp	r3, #1
   29660:	d003      	beq.n	2966a <find_info_cb+0x38>
   29662:	2b02      	cmp	r3, #2
   29664:	d019      	beq.n	2969a <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   29666:	2000      	movs	r0, #0
   29668:	e016      	b.n	29698 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2966a:	682b      	ldr	r3, [r5, #0]
   2966c:	781b      	ldrb	r3, [r3, #0]
   2966e:	2b00      	cmp	r3, #0
   29670:	d1f9      	bne.n	29666 <find_info_cb+0x34>
   29672:	6860      	ldr	r0, [r4, #4]
   29674:	2104      	movs	r1, #4
   29676:	3008      	adds	r0, #8
   29678:	f000 fe1a 	bl	2a2b0 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2967c:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2967e:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   29680:	885b      	ldrh	r3, [r3, #2]
   29682:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   29684:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   29686:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   29688:	899b      	ldrh	r3, [r3, #12]
   2968a:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   2968e:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   29690:	2804      	cmp	r0, #4
   29692:	bf94      	ite	ls
   29694:	2000      	movls	r0, #0
   29696:	2001      	movhi	r0, #1
}
   29698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2969a:	682b      	ldr	r3, [r5, #0]
   2969c:	781b      	ldrb	r3, [r3, #0]
   2969e:	2b02      	cmp	r3, #2
   296a0:	d1e1      	bne.n	29666 <find_info_cb+0x34>
   296a2:	6860      	ldr	r0, [r4, #4]
   296a4:	2112      	movs	r1, #18
   296a6:	3008      	adds	r0, #8
   296a8:	f000 fe02 	bl	2a2b0 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   296ac:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   296ae:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   296b0:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   296b2:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   296b6:	3101      	adds	r1, #1
   296b8:	f7ff faad 	bl	28c16 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   296bc:	6863      	ldr	r3, [r4, #4]
   296be:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   296c2:	899b      	ldrh	r3, [r3, #12]
   296c4:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   296c6:	2812      	cmp	r0, #18
   296c8:	e7e3      	b.n	29692 <find_info_cb+0x60>

000296ca <attr_read_group_cb>:
	if (!data->rsp->len) {
   296ca:	68d0      	ldr	r0, [r2, #12]
   296cc:	7803      	ldrb	r3, [r0, #0]
   296ce:	3104      	adds	r1, #4
   296d0:	b913      	cbnz	r3, 296d8 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   296d2:	7001      	strb	r1, [r0, #0]
	return true;
   296d4:	2001      	movs	r0, #1
}
   296d6:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   296d8:	428b      	cmp	r3, r1
   296da:	d0fb      	beq.n	296d4 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   296dc:	6891      	ldr	r1, [r2, #8]
   296de:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   296e0:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   296e2:	3b04      	subs	r3, #4
   296e4:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   296e6:	6110      	str	r0, [r2, #16]
		return false;
   296e8:	4770      	bx	lr

000296ea <chan_req_sent>:
	if (chan->req) {
   296ea:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   296ee:	b133      	cbz	r3, 296fe <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   296f0:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   296f4:	2300      	movs	r3, #0
   296f6:	f500 7088 	add.w	r0, r0, #272	; 0x110
   296fa:	f7fd bc33 	b.w	26f64 <k_work_reschedule>
}
   296fe:	4770      	bx	lr

00029700 <write_cb>:
{
   29700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29702:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   29704:	4601      	mov	r1, r0
{
   29706:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   29708:	222a      	movs	r2, #42	; 0x2a
   2970a:	6820      	ldr	r0, [r4, #0]
   2970c:	f000 fced 	bl	2a0ea <bt_gatt_check_perm>
   29710:	4605      	mov	r5, r0
   29712:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   29714:	bb00      	cbnz	r0, 29758 <write_cb+0x58>
	if (!data->req) {
   29716:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   29718:	68b7      	ldr	r7, [r6, #8]
   2971a:	68e2      	ldr	r2, [r4, #12]
   2971c:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2971e:	2b00      	cmp	r3, #0
   29720:	bf14      	ite	ne
   29722:	2300      	movne	r3, #0
   29724:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   29726:	9301      	str	r3, [sp, #4]
   29728:	8a63      	ldrh	r3, [r4, #18]
   2972a:	9300      	str	r3, [sp, #0]
   2972c:	4631      	mov	r1, r6
   2972e:	8a23      	ldrh	r3, [r4, #16]
   29730:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   29732:	1e03      	subs	r3, r0, #0
   29734:	db05      	blt.n	29742 <write_cb+0x42>
   29736:	8a22      	ldrh	r2, [r4, #16]
   29738:	4293      	cmp	r3, r2
   2973a:	d10b      	bne.n	29754 <write_cb+0x54>
	data->err = 0U;
   2973c:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2973e:	2501      	movs	r5, #1
   29740:	e005      	b.n	2974e <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   29742:	f113 0fff 	cmn.w	r3, #255	; 0xff
   29746:	d305      	bcc.n	29754 <write_cb+0x54>
		return -err;
   29748:	425b      	negs	r3, r3
   2974a:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2974c:	7523      	strb	r3, [r4, #20]
}
   2974e:	4628      	mov	r0, r5
   29750:	b003      	add	sp, #12
   29752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   29754:	230e      	movs	r3, #14
   29756:	e7f9      	b.n	2974c <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   29758:	2500      	movs	r5, #0
   2975a:	e7f8      	b.n	2974e <write_cb+0x4e>

0002975c <att_chan_read>:
{
   2975c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29760:	4680      	mov	r8, r0
   29762:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29764:	4610      	mov	r0, r2
{
   29766:	4699      	mov	r9, r3
   29768:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2976a:	f7ff ff0a 	bl	29582 <net_buf_frags_len>
   2976e:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   29772:	4283      	cmp	r3, r0
{
   29774:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   29776:	d97a      	bls.n	2986e <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   29778:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2977c:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2977e:	4630      	mov	r0, r6
   29780:	f000 fd68 	bl	2a254 <net_buf_frag_last>
	size_t len, total = 0;
   29784:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   29788:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2978a:	4630      	mov	r0, r6
   2978c:	f7ff fef9 	bl	29582 <net_buf_frags_len>
   29790:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   29794:	f105 0708 	add.w	r7, r5, #8
   29798:	1a24      	subs	r4, r4, r0
   2979a:	4638      	mov	r0, r7
   2979c:	f000 fdc3 	bl	2a326 <net_buf_simple_tailroom>
   297a0:	4284      	cmp	r4, r0
   297a2:	d211      	bcs.n	297c8 <att_chan_read+0x6c>
   297a4:	4630      	mov	r0, r6
   297a6:	f7ff feec 	bl	29582 <net_buf_frags_len>
   297aa:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   297ae:	1a24      	subs	r4, r4, r0
		if (!len) {
   297b0:	bb34      	cbnz	r4, 29800 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   297b2:	79b0      	ldrb	r0, [r6, #6]
   297b4:	f7fb ff8c 	bl	256d0 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   297b8:	2200      	movs	r2, #0
   297ba:	2300      	movs	r3, #0
   297bc:	f000 fd16 	bl	2a1ec <net_buf_alloc_fixed>
			if (!frag) {
   297c0:	4605      	mov	r5, r0
   297c2:	b930      	cbnz	r0, 297d2 <att_chan_read+0x76>
	return total;
   297c4:	4657      	mov	r7, sl
   297c6:	e02c      	b.n	29822 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   297c8:	4638      	mov	r0, r7
   297ca:	f000 fdac 	bl	2a326 <net_buf_simple_tailroom>
   297ce:	4604      	mov	r4, r0
   297d0:	e7ee      	b.n	297b0 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   297d2:	4601      	mov	r1, r0
   297d4:	4630      	mov	r0, r6
   297d6:	f000 fd4e 	bl	2a276 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   297da:	4630      	mov	r0, r6
   297dc:	f7ff fed1 	bl	29582 <net_buf_frags_len>
   297e0:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   297e4:	f105 0708 	add.w	r7, r5, #8
   297e8:	1a24      	subs	r4, r4, r0
   297ea:	4638      	mov	r0, r7
   297ec:	f000 fd9b 	bl	2a326 <net_buf_simple_tailroom>
   297f0:	4284      	cmp	r4, r0
   297f2:	d21a      	bcs.n	2982a <att_chan_read+0xce>
   297f4:	4630      	mov	r0, r6
   297f6:	f7ff fec4 	bl	29582 <net_buf_frags_len>
   297fa:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   297fe:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   29800:	68a9      	ldr	r1, [r5, #8]
   29802:	89aa      	ldrh	r2, [r5, #12]
   29804:	f8db 7004 	ldr.w	r7, [fp, #4]
   29808:	9803      	ldr	r0, [sp, #12]
   2980a:	f8cd 9000 	str.w	r9, [sp]
   2980e:	440a      	add	r2, r1
   29810:	b2a3      	uxth	r3, r4
   29812:	4659      	mov	r1, fp
   29814:	47b8      	blx	r7
		if (read < 0) {
   29816:	1e07      	subs	r7, r0, #0
   29818:	da0c      	bge.n	29834 <att_chan_read+0xd8>
				return total;
   2981a:	f1ba 0f00 	cmp.w	sl, #0
   2981e:	bf18      	it	ne
   29820:	4657      	movne	r7, sl
}
   29822:	4638      	mov	r0, r7
   29824:	b005      	add	sp, #20
   29826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2982a:	4638      	mov	r0, r7
   2982c:	f000 fd7b 	bl	2a326 <net_buf_simple_tailroom>
   29830:	4604      	mov	r4, r0
   29832:	e7e5      	b.n	29800 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   29834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29836:	b993      	cbnz	r3, 2985e <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   29838:	4639      	mov	r1, r7
   2983a:	f105 0008 	add.w	r0, r5, #8
   2983e:	f000 fd37 	bl	2a2b0 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29842:	4630      	mov	r0, r6
   29844:	f7ff fe9d 	bl	29582 <net_buf_frags_len>
   29848:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   2984c:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2984e:	4283      	cmp	r3, r0
		total += read;
   29850:	44ba      	add	sl, r7
		offset += read;
   29852:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   29856:	d9b5      	bls.n	297c4 <att_chan_read+0x68>
   29858:	42a7      	cmp	r7, r4
   2985a:	d096      	beq.n	2978a <att_chan_read+0x2e>
   2985c:	e7b2      	b.n	297c4 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2985e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   29860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   29862:	4639      	mov	r1, r7
   29864:	4628      	mov	r0, r5
   29866:	4798      	blx	r3
   29868:	2800      	cmp	r0, #0
   2986a:	d1e5      	bne.n	29838 <att_chan_read+0xdc>
   2986c:	e7aa      	b.n	297c4 <att_chan_read+0x68>
		return 0;
   2986e:	2700      	movs	r7, #0
   29870:	e7d7      	b.n	29822 <att_chan_read+0xc6>

00029872 <chan_req_send>:
{
   29872:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29874:	688e      	ldr	r6, [r1, #8]
{
   29876:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29878:	4630      	mov	r0, r6
   2987a:	f7ff fe82 	bl	29582 <net_buf_frags_len>
   2987e:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   29882:	4283      	cmp	r3, r0
{
   29884:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   29886:	d30a      	bcc.n	2989e <chan_req_send+0x2c>
	req->buf = NULL;
   29888:	2200      	movs	r2, #0
	chan->req = req;
   2988a:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   2988e:	4628      	mov	r0, r5
	req->buf = NULL;
   29890:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   29892:	4631      	mov	r1, r6
   29894:	f7ed f8dc 	bl	16a50 <chan_send>
	if (err) {
   29898:	b100      	cbz	r0, 2989c <chan_req_send+0x2a>
		req->buf = buf;
   2989a:	60a6      	str	r6, [r4, #8]
}
   2989c:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2989e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   298a2:	e7fb      	b.n	2989c <chan_req_send+0x2a>

000298a4 <process_queue>:
{
   298a4:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   298a6:	2200      	movs	r2, #0
{
   298a8:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   298aa:	2300      	movs	r3, #0
   298ac:	4608      	mov	r0, r1
{
   298ae:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   298b0:	f000 fca1 	bl	2a1f6 <net_buf_get>
	if (buf) {
   298b4:	4605      	mov	r5, r0
   298b6:	b160      	cbz	r0, 298d2 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   298b8:	4601      	mov	r1, r0
   298ba:	2200      	movs	r2, #0
   298bc:	4620      	mov	r0, r4
   298be:	f7ed f8c7 	bl	16a50 <chan_send>
		if (err) {
   298c2:	4604      	mov	r4, r0
   298c4:	b118      	cbz	r0, 298ce <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   298c6:	4629      	mov	r1, r5
   298c8:	4630      	mov	r0, r6
   298ca:	f000 ff5f 	bl	2a78c <k_queue_prepend>
}
   298ce:	4620      	mov	r0, r4
   298d0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   298d2:	f06f 0401 	mvn.w	r4, #1
   298d6:	e7fa      	b.n	298ce <process_queue+0x2a>

000298d8 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   298d8:	b510      	push	{r4, lr}
	return list->head;
   298da:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   298dc:	2200      	movs	r2, #0
   298de:	b153      	cbz	r3, 298f6 <sys_slist_find_and_remove.isra.0+0x1e>
   298e0:	428b      	cmp	r3, r1
   298e2:	d10e      	bne.n	29902 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   298e4:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   298e6:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   298e8:	b932      	cbnz	r2, 298f8 <sys_slist_find_and_remove.isra.0+0x20>
   298ea:	42a1      	cmp	r1, r4
	list->head = node;
   298ec:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   298ee:	d100      	bne.n	298f2 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   298f0:	6043      	str	r3, [r0, #4]
	parent->next = child;
   298f2:	2300      	movs	r3, #0
   298f4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   298f6:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   298f8:	42a1      	cmp	r1, r4
	parent->next = child;
   298fa:	6013      	str	r3, [r2, #0]
	list->tail = node;
   298fc:	bf08      	it	eq
   298fe:	6042      	streq	r2, [r0, #4]
}
   29900:	e7f7      	b.n	298f2 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   29902:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   29904:	681b      	ldr	r3, [r3, #0]
   29906:	e7ea      	b.n	298de <sys_slist_find_and_remove.isra.0+0x6>

00029908 <att_exec_write_req>:
   29908:	2006      	movs	r0, #6
   2990a:	4770      	bx	lr

0002990c <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2990c:	30f0      	adds	r0, #240	; 0xf0
   2990e:	f3bf 8f5b 	dmb	ish
   29912:	e850 3f00 	ldrex	r3, [r0]
   29916:	f023 0301 	bic.w	r3, r3, #1
   2991a:	e840 3200 	strex	r2, r3, [r0]
   2991e:	2a00      	cmp	r2, #0
   29920:	d1f7      	bne.n	29912 <chan_rsp_sent+0x6>
   29922:	f3bf 8f5b 	dmb	ish
}
   29926:	4770      	bx	lr

00029928 <chan_cfm_sent>:
   29928:	30f0      	adds	r0, #240	; 0xf0
   2992a:	f3bf 8f5b 	dmb	ish
   2992e:	e850 3f00 	ldrex	r3, [r0]
   29932:	f023 0302 	bic.w	r3, r3, #2
   29936:	e840 3200 	strex	r2, r3, [r0]
   2993a:	2a00      	cmp	r2, #0
   2993c:	d1f7      	bne.n	2992e <chan_cfm_sent+0x6>
   2993e:	f3bf 8f5b 	dmb	ish
}
   29942:	4770      	bx	lr

00029944 <read_cb>:
{
   29944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   29948:	f8d2 8000 	ldr.w	r8, [r2]
{
   2994c:	4606      	mov	r6, r0
	data->err = 0x00;
   2994e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   29950:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   29954:	7317      	strb	r7, [r2, #12]
{
   29956:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   29958:	4631      	mov	r1, r6
   2995a:	2215      	movs	r2, #21
   2995c:	f000 fbc5 	bl	2a0ea <bt_gatt_check_perm>
   29960:	4604      	mov	r4, r0
   29962:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   29964:	b9a0      	cbnz	r0, 29990 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   29966:	e9cd 0000 	strd	r0, r0, [sp]
   2996a:	88ab      	ldrh	r3, [r5, #4]
   2996c:	68aa      	ldr	r2, [r5, #8]
   2996e:	4631      	mov	r1, r6
   29970:	4640      	mov	r0, r8
   29972:	f7ff fef3 	bl	2975c <att_chan_read>
	if (ret < 0) {
   29976:	1e03      	subs	r3, r0, #0
   29978:	da0c      	bge.n	29994 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2997a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2997e:	bf26      	itte	cs
   29980:	425b      	negcs	r3, r3
   29982:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   29984:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   29986:	732b      	strb	r3, [r5, #12]
}
   29988:	4620      	mov	r0, r4
   2998a:	b002      	add	sp, #8
   2998c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   29990:	463c      	mov	r4, r7
   29992:	e7f9      	b.n	29988 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   29994:	2401      	movs	r4, #1
   29996:	e7f7      	b.n	29988 <read_cb+0x44>

00029998 <bt_att_sent>:
{
   29998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2999a:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   2999e:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   299a2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   299a4:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   299a8:	b10b      	cbz	r3, 299ae <bt_att_sent+0x16>
		chan->sent(chan);
   299aa:	4638      	mov	r0, r7
   299ac:	4798      	blx	r3
   299ae:	f3bf 8f5b 	dmb	ish
   299b2:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   299b6:	e853 2f00 	ldrex	r2, [r3]
   299ba:	f022 0210 	bic.w	r2, r2, #16
   299be:	e843 2100 	strex	r1, r2, [r3]
   299c2:	2900      	cmp	r1, #0
   299c4:	d1f7      	bne.n	299b6 <bt_att_sent+0x1e>
   299c6:	f3bf 8f5b 	dmb	ish
	if (!att) {
   299ca:	b30c      	cbz	r4, 29a10 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   299cc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   299d0:	b98b      	cbnz	r3, 299f6 <bt_att_sent+0x5e>
   299d2:	6863      	ldr	r3, [r4, #4]
   299d4:	b17b      	cbz	r3, 299f6 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   299d6:	1d20      	adds	r0, r4, #4
   299d8:	f7ff fdc9 	bl	2956e <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   299dc:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   299de:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   299e0:	4638      	mov	r0, r7
   299e2:	f7ff ff46 	bl	29872 <chan_req_send>
   299e6:	2800      	cmp	r0, #0
   299e8:	da12      	bge.n	29a10 <bt_att_sent+0x78>
	parent->next = child;
   299ea:	6863      	ldr	r3, [r4, #4]
   299ec:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   299ee:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   299f0:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   299f2:	b903      	cbnz	r3, 299f6 <bt_att_sent+0x5e>
	list->tail = node;
   299f4:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   299f6:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   299fa:	4638      	mov	r0, r7
   299fc:	f7ff ff52 	bl	298a4 <process_queue>
	if (!err) {
   29a00:	b130      	cbz	r0, 29a10 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   29a02:	f104 010c 	add.w	r1, r4, #12
   29a06:	4638      	mov	r0, r7
}
   29a08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   29a0c:	f7ff bf4a 	b.w	298a4 <process_queue>
}
   29a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029a12 <att_req_send_process>:
{
   29a12:	b570      	push	{r4, r5, r6, lr}
   29a14:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   29a16:	3004      	adds	r0, #4
   29a18:	f7ff fda9 	bl	2956e <sys_slist_get>
	if (!node) {
   29a1c:	4606      	mov	r6, r0
   29a1e:	b1c0      	cbz	r0, 29a52 <att_req_send_process+0x40>
	return list->head;
   29a20:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29a22:	b153      	cbz	r3, 29a3a <att_req_send_process+0x28>
   29a24:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   29a28:	d007      	beq.n	29a3a <att_req_send_process+0x28>
	return node->next;
   29a2a:	681c      	ldr	r4, [r3, #0]
   29a2c:	b10c      	cbz	r4, 29a32 <att_req_send_process+0x20>
   29a2e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   29a32:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   29a36:	b13b      	cbz	r3, 29a48 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29a38:	b964      	cbnz	r4, 29a54 <att_req_send_process+0x42>
	parent->next = child;
   29a3a:	686b      	ldr	r3, [r5, #4]
   29a3c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   29a3e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   29a40:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   29a42:	b933      	cbnz	r3, 29a52 <att_req_send_process+0x40>
	list->tail = node;
   29a44:	60ae      	str	r6, [r5, #8]
}
   29a46:	e004      	b.n	29a52 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   29a48:	4631      	mov	r1, r6
   29a4a:	f7ff ff12 	bl	29872 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29a4e:	2800      	cmp	r0, #0
   29a50:	dbf2      	blt.n	29a38 <att_req_send_process+0x26>
}
   29a52:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   29a54:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   29a58:	d004      	beq.n	29a64 <att_req_send_process+0x52>
	return node->next;
   29a5a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29a5e:	b10b      	cbz	r3, 29a64 <att_req_send_process+0x52>
   29a60:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   29a64:	4620      	mov	r0, r4
   29a66:	461c      	mov	r4, r3
   29a68:	e7e3      	b.n	29a32 <att_req_send_process+0x20>

00029a6a <bt_att_status>:
{
   29a6a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29a6c:	f3bf 8f5b 	dmb	ish
   29a70:	680b      	ldr	r3, [r1, #0]
   29a72:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   29a76:	07db      	lsls	r3, r3, #31
{
   29a78:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   29a7a:	d519      	bpl.n	29ab0 <bt_att_status+0x46>
	if (!chan->att) {
   29a7c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   29a80:	b1b0      	cbz	r0, 29ab0 <bt_att_status+0x46>
	if (chan->req) {
   29a82:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   29a86:	b99b      	cbnz	r3, 29ab0 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   29a88:	3004      	adds	r0, #4
   29a8a:	f7ff fd70 	bl	2956e <sys_slist_get>
	if (!node) {
   29a8e:	4604      	mov	r4, r0
   29a90:	b170      	cbz	r0, 29ab0 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   29a92:	4601      	mov	r1, r0
   29a94:	f1a5 0008 	sub.w	r0, r5, #8
   29a98:	f7ff feeb 	bl	29872 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   29a9c:	2800      	cmp	r0, #0
   29a9e:	da07      	bge.n	29ab0 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   29aa0:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   29aa4:	685a      	ldr	r2, [r3, #4]
   29aa6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   29aa8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   29aaa:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   29aac:	b902      	cbnz	r2, 29ab0 <bt_att_status+0x46>
	list->tail = node;
   29aae:	609c      	str	r4, [r3, #8]
}
   29ab0:	bd38      	pop	{r3, r4, r5, pc}

00029ab2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29ab6:	4688      	mov	r8, r1
   29ab8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29aba:	2101      	movs	r1, #1
   29abc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   29abe:	4605      	mov	r5, r0
   29ac0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   29ac2:	f7ed f8c7 	bl	16c54 <bt_att_chan_create_pdu>
	if (!buf) {
   29ac6:	4604      	mov	r4, r0
   29ac8:	b170      	cbz	r0, 29ae8 <send_err_rsp.part.0+0x36>
   29aca:	2104      	movs	r1, #4
   29acc:	3008      	adds	r0, #8
   29ace:	f000 fbef 	bl	2a2b0 <net_buf_simple_add>
	rsp->request = req;
   29ad2:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   29ad6:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   29ad8:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   29adc:	4621      	mov	r1, r4
   29ade:	4628      	mov	r0, r5
}
   29ae0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   29ae4:	f7ed b822 	b.w	16b2c <bt_att_chan_send_rsp.constprop.0>
}
   29ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029aec <att_write_req>:
{
   29aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29aee:	460c      	mov	r4, r1
   29af0:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   29af2:	f101 0008 	add.w	r0, r1, #8
   29af6:	f000 fc0a 	bl	2a30e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   29afa:	89a2      	ldrh	r2, [r4, #12]
   29afc:	9201      	str	r2, [sp, #4]
   29afe:	68a2      	ldr	r2, [r4, #8]
   29b00:	9200      	str	r2, [sp, #0]
   29b02:	4603      	mov	r3, r0
   29b04:	2213      	movs	r2, #19
   29b06:	2112      	movs	r1, #18
   29b08:	4628      	mov	r0, r5
   29b0a:	f7ed f997 	bl	16e3c <att_write_rsp.constprop.0>
}
   29b0e:	b003      	add	sp, #12
   29b10:	bd30      	pop	{r4, r5, pc}

00029b12 <att_write_cmd>:
{
   29b12:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29b14:	460c      	mov	r4, r1
   29b16:	4605      	mov	r5, r0
   29b18:	f101 0008 	add.w	r0, r1, #8
   29b1c:	f000 fbf7 	bl	2a30e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   29b20:	89a2      	ldrh	r2, [r4, #12]
   29b22:	9201      	str	r2, [sp, #4]
   29b24:	68a2      	ldr	r2, [r4, #8]
   29b26:	9200      	str	r2, [sp, #0]
   29b28:	2200      	movs	r2, #0
   29b2a:	4603      	mov	r3, r0
   29b2c:	4611      	mov	r1, r2
   29b2e:	4628      	mov	r0, r5
   29b30:	f7ed f984 	bl	16e3c <att_write_rsp.constprop.0>
}
   29b34:	b003      	add	sp, #12
   29b36:	bd30      	pop	{r4, r5, pc}

00029b38 <att_read_blob_req>:
{
   29b38:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   29b3a:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   29b3c:	8813      	ldrh	r3, [r2, #0]
   29b3e:	8852      	ldrh	r2, [r2, #2]
   29b40:	9200      	str	r2, [sp, #0]
   29b42:	210c      	movs	r1, #12
   29b44:	220d      	movs	r2, #13
   29b46:	f7ed fad7 	bl	170f8 <att_read_rsp>
}
   29b4a:	b003      	add	sp, #12
   29b4c:	f85d fb04 	ldr.w	pc, [sp], #4

00029b50 <att_read_req>:
{
   29b50:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   29b52:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   29b54:	2200      	movs	r2, #0
   29b56:	881b      	ldrh	r3, [r3, #0]
   29b58:	9200      	str	r2, [sp, #0]
   29b5a:	210a      	movs	r1, #10
   29b5c:	220b      	movs	r2, #11
   29b5e:	f7ed facb 	bl	170f8 <att_read_rsp>
}
   29b62:	b003      	add	sp, #12
   29b64:	f85d fb04 	ldr.w	pc, [sp], #4

00029b68 <att_mtu_req>:
{
   29b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   29b6a:	6803      	ldr	r3, [r0, #0]
{
   29b6c:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   29b6e:	6818      	ldr	r0, [r3, #0]
   29b70:	f3bf 8f5b 	dmb	ish
   29b74:	f8d5 30f0 	ldr.w	r3, [r5, #240]	; 0xf0
   29b78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   29b7c:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   29b80:	071b      	lsls	r3, r3, #28
   29b82:	d41a      	bmi.n	29bba <att_mtu_req+0x52>
	mtu_client = sys_le16_to_cpu(req->mtu);
   29b84:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   29b86:	881b      	ldrh	r3, [r3, #0]
   29b88:	2b16      	cmp	r3, #22
   29b8a:	d918      	bls.n	29bbe <att_mtu_req+0x56>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   29b8c:	2202      	movs	r2, #2
   29b8e:	2103      	movs	r1, #3
   29b90:	f7ed f9b6 	bl	16f00 <bt_att_create_pdu>
	if (!pdu) {
   29b94:	4606      	mov	r6, r0
   29b96:	b1a0      	cbz	r0, 29bc2 <att_mtu_req+0x5a>
	return net_buf_simple_add(&buf->b, len);
   29b98:	2102      	movs	r1, #2
   29b9a:	3008      	adds	r0, #8
   29b9c:	f000 fb88 	bl	2a2b0 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   29ba0:	2717      	movs	r7, #23
   29ba2:	7007      	strb	r7, [r0, #0]
   29ba4:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   29ba6:	4631      	mov	r1, r6
   29ba8:	4628      	mov	r0, r5
   29baa:	f7ec ffbf 	bl	16b2c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   29bae:	f8a5 707a 	strh.w	r7, [r5, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   29bb2:	f8a5 7086 	strh.w	r7, [r5, #134]	; 0x86
	return 0;
   29bb6:	4620      	mov	r0, r4
}
   29bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   29bba:	2006      	movs	r0, #6
   29bbc:	e7fc      	b.n	29bb8 <att_mtu_req+0x50>
		return BT_ATT_ERR_INVALID_PDU;
   29bbe:	2004      	movs	r0, #4
   29bc0:	e7fa      	b.n	29bb8 <att_mtu_req+0x50>
		return BT_ATT_ERR_UNLIKELY;
   29bc2:	200e      	movs	r0, #14
   29bc4:	e7f8      	b.n	29bb8 <att_mtu_req+0x50>

00029bc6 <bt_att_init>:
	bt_gatt_init();
   29bc6:	f7ed be5f 	b.w	17888 <bt_gatt_init>

00029bca <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   29bca:	898a      	ldrh	r2, [r1, #12]
   29bcc:	6889      	ldr	r1, [r1, #8]
   29bce:	2300      	movs	r3, #0
   29bd0:	f7ed bc04 	b.w	173dc <att_handle_rsp>

00029bd4 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   29bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   29bd8:	4607      	mov	r7, r0
   29bda:	460d      	mov	r5, r1
   29bdc:	4616      	mov	r6, r2
   29bde:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   29be0:	f7ec fd7e 	bl	166e0 <att_get>
	if (!att) {
   29be4:	4604      	mov	r4, r0
   29be6:	b938      	cbnz	r0, 29bf8 <bt_att_send+0x24>
		net_buf_unref(buf);
   29be8:	4628      	mov	r0, r5
   29bea:	f7fb fe2f 	bl	2584c <net_buf_unref>
		return -ENOTCONN;
   29bee:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   29bf2:	b002      	add	sp, #8
   29bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   29bf8:	b146      	cbz	r6, 29c0c <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   29bfa:	f8cd 8000 	str.w	r8, [sp]
   29bfe:	4633      	mov	r3, r6
   29c00:	462a      	mov	r2, r5
   29c02:	2104      	movs	r1, #4
   29c04:	4638      	mov	r0, r7
   29c06:	f7ff fc78 	bl	294fa <bt_l2cap_send_cb>
   29c0a:	e7f2      	b.n	29bf2 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   29c0c:	f100 060c 	add.w	r6, r0, #12
   29c10:	4629      	mov	r1, r5
   29c12:	4630      	mov	r0, r6
   29c14:	f000 fb0d 	bl	2a232 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   29c18:	2200      	movs	r2, #0
   29c1a:	2300      	movs	r3, #0
   29c1c:	4630      	mov	r0, r6
   29c1e:	f000 faea 	bl	2a1f6 <net_buf_get>
	if (!buf) {
   29c22:	4605      	mov	r5, r0
   29c24:	b908      	cbnz	r0, 29c2a <bt_att_send+0x56>
	return 0;
   29c26:	2000      	movs	r0, #0
   29c28:	e7e3      	b.n	29bf2 <bt_att_send+0x1e>
	return list->head;
   29c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29c2c:	b1c3      	cbz	r3, 29c60 <bt_att_send+0x8c>
   29c2e:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   29c32:	d015      	beq.n	29c60 <bt_att_send+0x8c>
	return node->next;
   29c34:	681c      	ldr	r4, [r3, #0]
   29c36:	b10c      	cbz	r4, 29c3c <bt_att_send+0x68>
   29c38:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   29c3c:	2200      	movs	r2, #0
   29c3e:	4629      	mov	r1, r5
   29c40:	f7ec ff06 	bl	16a50 <chan_send>
		if (err >= 0) {
   29c44:	2800      	cmp	r0, #0
   29c46:	daee      	bge.n	29c26 <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   29c48:	b154      	cbz	r4, 29c60 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   29c4a:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   29c4e:	d004      	beq.n	29c5a <bt_att_send+0x86>
	return node->next;
   29c50:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   29c54:	b10b      	cbz	r3, 29c5a <bt_att_send+0x86>
   29c56:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   29c5a:	4620      	mov	r0, r4
   29c5c:	461c      	mov	r4, r3
   29c5e:	e7ed      	b.n	29c3c <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   29c60:	4629      	mov	r1, r5
   29c62:	4630      	mov	r0, r6
   29c64:	f000 fd92 	bl	2a78c <k_queue_prepend>
   29c68:	e7dd      	b.n	29c26 <bt_att_send+0x52>

00029c6a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   29c6a:	b510      	push	{r4, lr}
   29c6c:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   29c6e:	f7ec fd37 	bl	166e0 <att_get>
	if (!att) {
   29c72:	b160      	cbz	r0, 29c8e <bt_att_req_send+0x24>
	parent->next = child;
   29c74:	2300      	movs	r3, #0
   29c76:	6023      	str	r3, [r4, #0]
	return list->tail;
   29c78:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   29c7a:	b92b      	cbnz	r3, 29c88 <bt_att_req_send+0x1e>
	list->head = node;
   29c7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   29c80:	f7ff fec7 	bl	29a12 <att_req_send_process>

	return 0;
   29c84:	2000      	movs	r0, #0
}
   29c86:	bd10      	pop	{r4, pc}
	parent->next = child;
   29c88:	601c      	str	r4, [r3, #0]
	list->tail = node;
   29c8a:	6084      	str	r4, [r0, #8]
}
   29c8c:	e7f8      	b.n	29c80 <bt_att_req_send+0x16>
		return -ENOTCONN;
   29c8e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   29c92:	e7f8      	b.n	29c86 <bt_att_req_send+0x1c>

00029c94 <gatt_ccc_changed>:
{
   29c94:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   29c96:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   29c98:	895a      	ldrh	r2, [r3, #10]
   29c9a:	428a      	cmp	r2, r1
   29c9c:	d003      	beq.n	29ca6 <gatt_ccc_changed+0x12>
		ccc->value = value;
   29c9e:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   29ca0:	68db      	ldr	r3, [r3, #12]
   29ca2:	b103      	cbz	r3, 29ca6 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   29ca4:	4718      	bx	r3
}
   29ca6:	4770      	bx	lr

00029ca8 <gatt_indicate_rsp>:
{
   29ca8:	b510      	push	{r4, lr}
   29caa:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   29cac:	68a3      	ldr	r3, [r4, #8]
{
   29cae:	460a      	mov	r2, r1
	if (params->func) {
   29cb0:	b10b      	cbz	r3, 29cb6 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   29cb2:	4621      	mov	r1, r4
   29cb4:	4798      	blx	r3
	params->_ref--;
   29cb6:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29cb8:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   29cba:	3b01      	subs	r3, #1
   29cbc:	b2db      	uxtb	r3, r3
   29cbe:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   29cc0:	b122      	cbz	r2, 29ccc <gatt_indicate_rsp+0x24>
   29cc2:	b91b      	cbnz	r3, 29ccc <gatt_indicate_rsp+0x24>
		params->destroy(params);
   29cc4:	4620      	mov	r0, r4
}
   29cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   29cca:	4710      	bx	r2
}
   29ccc:	bd10      	pop	{r4, pc}

00029cce <match_uuid>:
	data->attr = attr;
   29cce:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   29cd0:	8091      	strh	r1, [r2, #4]
}
   29cd2:	2000      	movs	r0, #0
   29cd4:	4770      	bx	lr

00029cd6 <gen_hash_m>:
{
   29cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29cd8:	6807      	ldr	r7, [r0, #0]
   29cda:	783d      	ldrb	r5, [r7, #0]
{
   29cdc:	b089      	sub	sp, #36	; 0x24
   29cde:	4606      	mov	r6, r0
   29ce0:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   29ce2:	b10d      	cbz	r5, 29ce8 <gen_hash_m+0x12>
	switch (u16->val) {
   29ce4:	2501      	movs	r5, #1
   29ce6:	e014      	b.n	29d12 <gen_hash_m+0x3c>
   29ce8:	887b      	ldrh	r3, [r7, #2]
   29cea:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   29cee:	d004      	beq.n	29cfa <gen_hash_m+0x24>
   29cf0:	d812      	bhi.n	29d18 <gen_hash_m+0x42>
   29cf2:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   29cf6:	2b03      	cmp	r3, #3
   29cf8:	d8f4      	bhi.n	29ce4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29cfa:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29cfe:	2202      	movs	r2, #2
   29d00:	f10d 010e 	add.w	r1, sp, #14
   29d04:	4620      	mov	r0, r4
   29d06:	f7fe fe8e 	bl	28a26 <tc_cmac_update>
   29d0a:	b9e0      	cbnz	r0, 29d46 <gen_hash_m+0x70>
			state->err = -EINVAL;
   29d0c:	f06f 0315 	mvn.w	r3, #21
   29d10:	65a3      	str	r3, [r4, #88]	; 0x58
}
   29d12:	4628      	mov	r0, r5
   29d14:	b009      	add	sp, #36	; 0x24
   29d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   29d18:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   29d1c:	33ff      	adds	r3, #255	; 0xff
   29d1e:	b29b      	uxth	r3, r3
   29d20:	2b04      	cmp	r3, #4
   29d22:	d8df      	bhi.n	29ce4 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   29d24:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29d28:	2202      	movs	r2, #2
   29d2a:	f10d 010e 	add.w	r1, sp, #14
   29d2e:	4620      	mov	r0, r4
   29d30:	f7fe fe79 	bl	28a26 <tc_cmac_update>
   29d34:	2800      	cmp	r0, #0
   29d36:	d0e9      	beq.n	29d0c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   29d38:	887b      	ldrh	r3, [r7, #2]
   29d3a:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29d3e:	2202      	movs	r2, #2
   29d40:	f10d 010e 	add.w	r1, sp, #14
   29d44:	e017      	b.n	29d76 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   29d46:	887b      	ldrh	r3, [r7, #2]
   29d48:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29d4c:	2202      	movs	r2, #2
   29d4e:	f10d 010e 	add.w	r1, sp, #14
   29d52:	4620      	mov	r0, r4
   29d54:	f7fe fe67 	bl	28a26 <tc_cmac_update>
   29d58:	2800      	cmp	r0, #0
   29d5a:	d0d7      	beq.n	29d0c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   29d5c:	2000      	movs	r0, #0
   29d5e:	2310      	movs	r3, #16
   29d60:	eb0d 0203 	add.w	r2, sp, r3
   29d64:	6877      	ldr	r7, [r6, #4]
   29d66:	9000      	str	r0, [sp, #0]
   29d68:	4631      	mov	r1, r6
   29d6a:	47b8      	blx	r7
		if (len < 0) {
   29d6c:	1e02      	subs	r2, r0, #0
   29d6e:	da01      	bge.n	29d74 <gen_hash_m+0x9e>
			state->err = len;
   29d70:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   29d72:	e7ce      	b.n	29d12 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   29d74:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   29d76:	4620      	mov	r0, r4
   29d78:	f7fe fe55 	bl	28a26 <tc_cmac_update>
   29d7c:	2800      	cmp	r0, #0
   29d7e:	d1b1      	bne.n	29ce4 <gen_hash_m+0xe>
   29d80:	e7c4      	b.n	29d0c <gen_hash_m+0x36>

00029d82 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   29d82:	2207      	movs	r2, #7
   29d84:	f7fe bf47 	b.w	28c16 <memcpy>

00029d88 <clear_cf_cfg>:
{
   29d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29d8a:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   29d8c:	2500      	movs	r5, #0
   29d8e:	4669      	mov	r1, sp
   29d90:	3001      	adds	r0, #1
   29d92:	9500      	str	r5, [sp, #0]
   29d94:	f8cd 5003 	str.w	r5, [sp, #3]
   29d98:	f7ff fff3 	bl	29d82 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   29d9c:	f104 0008 	add.w	r0, r4, #8
   29da0:	2201      	movs	r2, #1
   29da2:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   29da4:	340c      	adds	r4, #12
   29da6:	f7fe ff61 	bl	28c6c <memset>
   29daa:	f3bf 8f5b 	dmb	ish
   29dae:	e854 3f00 	ldrex	r3, [r4]
   29db2:	e844 5200 	strex	r2, r5, [r4]
   29db6:	2a00      	cmp	r2, #0
   29db8:	d1f9      	bne.n	29dae <clear_cf_cfg+0x26>
   29dba:	f3bf 8f5b 	dmb	ish
}
   29dbe:	b003      	add	sp, #12
   29dc0:	bd30      	pop	{r4, r5, pc}

00029dc2 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   29dc2:	2301      	movs	r3, #1
   29dc4:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29dc6:	f3bf 8f5b 	dmb	ish
   29dca:	e850 2f00 	ldrex	r2, [r0]
   29dce:	431a      	orrs	r2, r3
   29dd0:	e840 2100 	strex	r1, r2, [r0]
   29dd4:	2900      	cmp	r1, #0
   29dd6:	d1f8      	bne.n	29dca <atomic_set_bit+0x8>
   29dd8:	f3bf 8f5b 	dmb	ish
}
   29ddc:	4770      	bx	lr

00029dde <sc_restore_rsp>:
{
   29dde:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   29de0:	f7ed fbb4 	bl	1754c <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   29de4:	b140      	cbz	r0, 29df8 <sc_restore_rsp+0x1a>
   29de6:	7a03      	ldrb	r3, [r0, #8]
   29de8:	07db      	lsls	r3, r3, #31
   29dea:	d505      	bpl.n	29df8 <sc_restore_rsp+0x1a>
}
   29dec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   29df0:	2100      	movs	r1, #0
   29df2:	300c      	adds	r0, #12
   29df4:	f7ff bfe5 	b.w	29dc2 <atomic_set_bit>
}
   29df8:	bd08      	pop	{r3, pc}

00029dfa <read_ppcp>:
{
   29dfa:	b513      	push	{r0, r1, r4, lr}
   29dfc:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   29dfe:	2218      	movs	r2, #24
{
   29e00:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   29e04:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   29e08:	2228      	movs	r2, #40	; 0x28
   29e0a:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   29e0e:	2200      	movs	r2, #0
   29e10:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   29e14:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   29e16:	f04f 022a 	mov.w	r2, #42	; 0x2a
   29e1a:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   29e1e:	d80b      	bhi.n	29e38 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   29e20:	f1c1 0408 	rsb	r4, r1, #8
   29e24:	429c      	cmp	r4, r3
   29e26:	bfa8      	it	ge
   29e28:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   29e2a:	4622      	mov	r2, r4
   29e2c:	4469      	add	r1, sp
   29e2e:	f7fe fef2 	bl	28c16 <memcpy>
}
   29e32:	4620      	mov	r0, r4
   29e34:	b002      	add	sp, #8
   29e36:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29e38:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   29e3c:	e7f9      	b.n	29e32 <read_ppcp+0x38>

00029e3e <read_appearance>:
{
   29e3e:	b513      	push	{r0, r1, r4, lr}
   29e40:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   29e44:	4610      	mov	r0, r2
	if (offset > value_len) {
   29e46:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   29e48:	f04f 0200 	mov.w	r2, #0
   29e4c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   29e50:	d80d      	bhi.n	29e6e <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   29e52:	f1c1 0402 	rsb	r4, r1, #2
   29e56:	429c      	cmp	r4, r3
   29e58:	bfa8      	it	ge
   29e5a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   29e5c:	f10d 0306 	add.w	r3, sp, #6
   29e60:	4622      	mov	r2, r4
   29e62:	4419      	add	r1, r3
   29e64:	f7fe fed7 	bl	28c16 <memcpy>
}
   29e68:	4620      	mov	r0, r4
   29e6a:	b002      	add	sp, #8
   29e6c:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29e6e:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   29e72:	e7f9      	b.n	29e68 <read_appearance+0x2a>

00029e74 <read_name>:
{
   29e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29e78:	4698      	mov	r8, r3
   29e7a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   29e7e:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   29e80:	f7eb f874 	bl	14f6c <bt_get_name>
   29e84:	4607      	mov	r7, r0
				 strlen(name));
   29e86:	f7fe fe99 	bl	28bbc <strlen>
	if (offset > value_len) {
   29e8a:	b283      	uxth	r3, r0
   29e8c:	42b3      	cmp	r3, r6
   29e8e:	d30c      	bcc.n	29eaa <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   29e90:	1b9c      	subs	r4, r3, r6
   29e92:	4544      	cmp	r4, r8
   29e94:	bfa8      	it	ge
   29e96:	4644      	movge	r4, r8
   29e98:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   29e9a:	4622      	mov	r2, r4
   29e9c:	19b9      	adds	r1, r7, r6
   29e9e:	4628      	mov	r0, r5
   29ea0:	f7fe feb9 	bl	28c16 <memcpy>
}
   29ea4:	4620      	mov	r0, r4
   29ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29eaa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   29eae:	e7f9      	b.n	29ea4 <read_name+0x30>

00029eb0 <cf_read>:
{
   29eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29eb2:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   29eb4:	2300      	movs	r3, #0
{
   29eb6:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   29eba:	f88d 3004 	strb.w	r3, [sp, #4]
{
   29ebe:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   29ec0:	f7ed fb44 	bl	1754c <find_cf_cfg>
	if (cfg) {
   29ec4:	b128      	cbz	r0, 29ed2 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   29ec6:	f100 0108 	add.w	r1, r0, #8
   29eca:	2201      	movs	r2, #1
   29ecc:	a801      	add	r0, sp, #4
   29ece:	f7fe fea2 	bl	28c16 <memcpy>
	if (offset > value_len) {
   29ed2:	2e01      	cmp	r6, #1
   29ed4:	d80d      	bhi.n	29ef2 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   29ed6:	f1c6 0401 	rsb	r4, r6, #1
   29eda:	42bc      	cmp	r4, r7
   29edc:	bfa8      	it	ge
   29ede:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29ee0:	ab01      	add	r3, sp, #4
   29ee2:	4622      	mov	r2, r4
   29ee4:	1999      	adds	r1, r3, r6
   29ee6:	4628      	mov	r0, r5
   29ee8:	f7fe fe95 	bl	28c16 <memcpy>
}
   29eec:	4620      	mov	r0, r4
   29eee:	b003      	add	sp, #12
   29ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29ef2:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   29ef6:	e7f9      	b.n	29eec <cf_read+0x3c>

00029ef8 <bt_gatt_attr_read_service>:
{
   29ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   29efa:	68c9      	ldr	r1, [r1, #12]
{
   29efc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   29f00:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   29f02:	780b      	ldrb	r3, [r1, #0]
{
   29f04:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   29f06:	b993      	cbnz	r3, 29f2e <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   29f08:	884b      	ldrh	r3, [r1, #2]
   29f0a:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   29f0e:	2d02      	cmp	r5, #2
   29f10:	d819      	bhi.n	29f46 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29f12:	f1c5 0202 	rsb	r2, r5, #2
   29f16:	4294      	cmp	r4, r2
   29f18:	bfa8      	it	ge
   29f1a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29f1c:	f10d 0306 	add.w	r3, sp, #6
   29f20:	4622      	mov	r2, r4
   29f22:	1959      	adds	r1, r3, r5
   29f24:	f7fe fe77 	bl	28c16 <memcpy>
}
   29f28:	4620      	mov	r0, r4
   29f2a:	b003      	add	sp, #12
   29f2c:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   29f2e:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   29f30:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   29f34:	d807      	bhi.n	29f46 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   29f36:	f1c5 0210 	rsb	r2, r5, #16
   29f3a:	4294      	cmp	r4, r2
   29f3c:	bfa8      	it	ge
   29f3e:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   29f40:	4622      	mov	r2, r4
   29f42:	4429      	add	r1, r5
   29f44:	e7ee      	b.n	29f24 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29f46:	f06f 0406 	mvn.w	r4, #6
   29f4a:	e7ed      	b.n	29f28 <bt_gatt_attr_read_service+0x30>

00029f4c <find_ccc_cfg>:
{
   29f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   29f4e:	460c      	mov	r4, r1
						    &cfg->peer)) {
   29f50:	1c4d      	adds	r5, r1, #1
		if (conn) {
   29f52:	b148      	cbz	r0, 29f68 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   29f54:	7809      	ldrb	r1, [r1, #0]
   29f56:	462a      	mov	r2, r5
   29f58:	f7ff f9e0 	bl	2931c <bt_conn_is_peer_addr_le>
	return NULL;
   29f5c:	2800      	cmp	r0, #0
   29f5e:	bf08      	it	eq
   29f60:	2400      	moveq	r4, #0
}
   29f62:	4620      	mov	r0, r4
   29f64:	b003      	add	sp, #12
   29f66:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   29f68:	9000      	str	r0, [sp, #0]
	return memcmp(a, b, sizeof(*a));
   29f6a:	2207      	movs	r2, #7
   29f6c:	f8cd 0003 	str.w	r0, [sp, #3]
   29f70:	4669      	mov	r1, sp
   29f72:	4628      	mov	r0, r5
   29f74:	f7fe fe3e 	bl	28bf4 <memcmp>
	return NULL;
   29f78:	2800      	cmp	r0, #0
   29f7a:	bf18      	it	ne
   29f7c:	2400      	movne	r4, #0
   29f7e:	e7f0      	b.n	29f62 <find_ccc_cfg+0x16>

00029f80 <bt_gatt_attr_read_ccc>:
{
   29f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   29f82:	68c9      	ldr	r1, [r1, #12]
{
   29f84:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   29f88:	4615      	mov	r5, r2
   29f8a:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   29f8c:	f7ff ffde 	bl	29f4c <find_ccc_cfg>
	if (cfg) {
   29f90:	b100      	cbz	r0, 29f94 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   29f92:	8900      	ldrh	r0, [r0, #8]
   29f94:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   29f98:	2e02      	cmp	r6, #2
   29f9a:	d80e      	bhi.n	29fba <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   29f9c:	f1c6 0402 	rsb	r4, r6, #2
   29fa0:	42bc      	cmp	r4, r7
   29fa2:	bfa8      	it	ge
   29fa4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   29fa6:	f10d 0306 	add.w	r3, sp, #6
   29faa:	4622      	mov	r2, r4
   29fac:	1999      	adds	r1, r3, r6
   29fae:	4628      	mov	r0, r5
   29fb0:	f7fe fe31 	bl	28c16 <memcpy>
}
   29fb4:	4620      	mov	r0, r4
   29fb6:	b003      	add	sp, #12
   29fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   29fba:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   29fbe:	e7f9      	b.n	29fb4 <bt_gatt_attr_read_ccc+0x34>

00029fc0 <sc_clear>:
{
   29fc0:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29fc2:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   29fc6:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   29fc8:	4631      	mov	r1, r6
   29fca:	7a00      	ldrb	r0, [r0, #8]
   29fcc:	f7fe fff8 	bl	28fc0 <bt_addr_le_is_bonded>
   29fd0:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   29fd2:	4631      	mov	r1, r6
   29fd4:	f7ed fb94 	bl	17700 <find_sc_cfg>
	if (!cfg) {
   29fd8:	b128      	cbz	r0, 29fe6 <sc_clear+0x26>
}
   29fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   29fde:	220c      	movs	r2, #12
   29fe0:	2100      	movs	r1, #0
   29fe2:	f7fe be43 	b.w	28c6c <memset>
}
   29fe6:	bd70      	pop	{r4, r5, r6, pc}

00029fe8 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   29fe8:	2a02      	cmp	r2, #2
{
   29fea:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   29fec:	d108      	bne.n	2a000 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   29fee:	2300      	movs	r3, #0
   29ff0:	f100 0188 	add.w	r1, r0, #136	; 0x88
   29ff4:	461a      	mov	r2, r3
   29ff6:	7a00      	ldrb	r0, [r0, #8]
   29ff8:	f7ed fb92 	bl	17720 <sc_save>
}
   29ffc:	2002      	movs	r0, #2
   29ffe:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2a000:	f7ff ffde 	bl	29fc0 <sc_clear>
   2a004:	e7fa      	b.n	29ffc <sc_ccc_cfg_write+0x14>

0002a006 <bt_gatt_attr_read>:
{
   2a006:	b538      	push	{r3, r4, r5, lr}
   2a008:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2a00c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   2a010:	42a9      	cmp	r1, r5
{
   2a012:	4610      	mov	r0, r2
	if (offset > value_len) {
   2a014:	d80b      	bhi.n	2a02e <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   2a016:	1a6d      	subs	r5, r5, r1
   2a018:	429d      	cmp	r5, r3
   2a01a:	bfa8      	it	ge
   2a01c:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   2a01e:	9b05      	ldr	r3, [sp, #20]
   2a020:	b2ad      	uxth	r5, r5
   2a022:	462a      	mov	r2, r5
   2a024:	4419      	add	r1, r3
   2a026:	f7fe fdf6 	bl	28c16 <memcpy>
}
   2a02a:	4628      	mov	r0, r5
   2a02c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a02e:	f06f 0506 	mvn.w	r5, #6
   2a032:	e7fa      	b.n	2a02a <bt_gatt_attr_read+0x24>

0002a034 <bt_gatt_attr_value_handle>:
{
   2a034:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a036:	4604      	mov	r4, r0
   2a038:	b910      	cbnz	r0, 2a040 <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2a03a:	2000      	movs	r0, #0
}
   2a03c:	b002      	add	sp, #8
   2a03e:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2a040:	2300      	movs	r3, #0
   2a042:	f88d 3004 	strb.w	r3, [sp, #4]
   2a046:	6800      	ldr	r0, [r0, #0]
   2a048:	f642 0303 	movw	r3, #10243	; 0x2803
   2a04c:	a901      	add	r1, sp, #4
   2a04e:	f8ad 3006 	strh.w	r3, [sp, #6]
   2a052:	f7fe fe82 	bl	28d5a <bt_uuid_cmp>
   2a056:	2800      	cmp	r0, #0
   2a058:	d1ef      	bne.n	2a03a <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2a05a:	68e3      	ldr	r3, [r4, #12]
   2a05c:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2a05e:	2800      	cmp	r0, #0
   2a060:	d1ec      	bne.n	2a03c <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2a062:	4620      	mov	r0, r4
   2a064:	f7ed fc60 	bl	17928 <bt_gatt_attr_get_handle>
   2a068:	3001      	adds	r0, #1
   2a06a:	b280      	uxth	r0, r0
	return handle;
   2a06c:	e7e6      	b.n	2a03c <bt_gatt_attr_value_handle+0x8>

0002a06e <bt_gatt_attr_read_chrc>:
{
   2a06e:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2a070:	68cf      	ldr	r7, [r1, #12]
{
   2a072:	b087      	sub	sp, #28
   2a074:	4608      	mov	r0, r1
   2a076:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   2a078:	79bb      	ldrb	r3, [r7, #6]
   2a07a:	f88d 3004 	strb.w	r3, [sp, #4]
{
   2a07e:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   2a082:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2a084:	f7ff ffd6 	bl	2a034 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2a088:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2a08a:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2a08e:	780b      	ldrb	r3, [r1, #0]
   2a090:	b99b      	cbnz	r3, 2a0ba <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2a092:	884b      	ldrh	r3, [r1, #2]
   2a094:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   2a098:	2105      	movs	r1, #5
	if (offset > value_len) {
   2a09a:	42b1      	cmp	r1, r6
   2a09c:	d315      	bcc.n	2a0ca <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   2a09e:	1b89      	subs	r1, r1, r6
   2a0a0:	42a1      	cmp	r1, r4
   2a0a2:	bfa8      	it	ge
   2a0a4:	4621      	movge	r1, r4
   2a0a6:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   2a0a8:	ab01      	add	r3, sp, #4
   2a0aa:	4622      	mov	r2, r4
   2a0ac:	1999      	adds	r1, r3, r6
   2a0ae:	4628      	mov	r0, r5
   2a0b0:	f7fe fdb1 	bl	28c16 <memcpy>
}
   2a0b4:	4620      	mov	r0, r4
   2a0b6:	b007      	add	sp, #28
   2a0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2a0ba:	3101      	adds	r1, #1
   2a0bc:	2210      	movs	r2, #16
   2a0be:	f10d 0007 	add.w	r0, sp, #7
   2a0c2:	f7fe fda8 	bl	28c16 <memcpy>
		value_len += 16U;
   2a0c6:	2113      	movs	r1, #19
   2a0c8:	e7e7      	b.n	2a09a <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2a0ca:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2a0ce:	e7f1      	b.n	2a0b4 <bt_gatt_attr_read_chrc+0x46>

0002a0d0 <bt_gatt_foreach_attr>:
{
   2a0d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2a0d2:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2a0d6:	2300      	movs	r3, #0
   2a0d8:	9300      	str	r3, [sp, #0]
   2a0da:	461a      	mov	r2, r3
   2a0dc:	f7ed fc54 	bl	17988 <bt_gatt_foreach_attr_type>
}
   2a0e0:	b005      	add	sp, #20
   2a0e2:	f85d fb04 	ldr.w	pc, [sp], #4

0002a0e6 <db_hash_process>:
	db_hash_gen(true);
   2a0e6:	f7ed bca9 	b.w	17a3c <db_hash_gen.constprop.0>

0002a0ea <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2a0ea:	07d3      	lsls	r3, r2, #31
{
   2a0ec:	b510      	push	{r4, lr}
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a0ee:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2a0f0:	d504      	bpl.n	2a0fc <bt_gatt_check_perm+0x12>
   2a0f2:	f014 0f15 	tst.w	r4, #21
   2a0f6:	d017      	beq.n	2a128 <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2a0f8:	684b      	ldr	r3, [r1, #4]
   2a0fa:	b1ab      	cbz	r3, 2a128 <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2a0fc:	0793      	lsls	r3, r2, #30
   2a0fe:	d504      	bpl.n	2a10a <bt_gatt_check_perm+0x20>
   2a100:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2a104:	d012      	beq.n	2a12c <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2a106:	688b      	ldr	r3, [r1, #8]
   2a108:	b183      	cbz	r3, 2a12c <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2a10a:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2a10c:	f014 0f30 	tst.w	r4, #48	; 0x30
   2a110:	d104      	bne.n	2a11c <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2a112:	f014 000c 	ands.w	r0, r4, #12
   2a116:	bf18      	it	ne
   2a118:	200f      	movne	r0, #15
}
   2a11a:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2a11c:	f7ff f8cc 	bl	292b8 <bt_conn_get_security>
   2a120:	2802      	cmp	r0, #2
   2a122:	d8f6      	bhi.n	2a112 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2a124:	2005      	movs	r0, #5
   2a126:	e7f8      	b.n	2a11a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2a128:	2002      	movs	r0, #2
   2a12a:	e7f6      	b.n	2a11a <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2a12c:	2003      	movs	r0, #3
   2a12e:	e7f4      	b.n	2a11a <bt_gatt_check_perm+0x30>

0002a130 <bt_gatt_change_aware>:
{
   2a130:	b510      	push	{r4, lr}
   2a132:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2a134:	f7ed fa0a 	bl	1754c <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a138:	4603      	mov	r3, r0
   2a13a:	b910      	cbnz	r0, 2a142 <bt_gatt_change_aware+0x12>
		return true;
   2a13c:	2401      	movs	r4, #1
}
   2a13e:	4620      	mov	r0, r4
   2a140:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2a142:	7a02      	ldrb	r2, [r0, #8]
   2a144:	07d2      	lsls	r2, r2, #31
   2a146:	d5f9      	bpl.n	2a13c <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a148:	f3bf 8f5b 	dmb	ish
   2a14c:	68d9      	ldr	r1, [r3, #12]
   2a14e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2a152:	f011 0101 	ands.w	r1, r1, #1
   2a156:	f100 000c 	add.w	r0, r0, #12
   2a15a:	d1ef      	bne.n	2a13c <bt_gatt_change_aware+0xc>
	if (!req) {
   2a15c:	2c00      	cmp	r4, #0
   2a15e:	d0ee      	beq.n	2a13e <bt_gatt_change_aware+0xe>
   2a160:	f3bf 8f5b 	dmb	ish
   2a164:	68db      	ldr	r3, [r3, #12]
   2a166:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2a16a:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2a16e:	079b      	lsls	r3, r3, #30
   2a170:	d50e      	bpl.n	2a190 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a172:	f3bf 8f5b 	dmb	ish
   2a176:	e850 3f00 	ldrex	r3, [r0]
   2a17a:	f023 0302 	bic.w	r3, r3, #2
   2a17e:	e840 3200 	strex	r2, r3, [r0]
   2a182:	2a00      	cmp	r2, #0
   2a184:	d1f7      	bne.n	2a176 <bt_gatt_change_aware+0x46>
   2a186:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2a18a:	f7ff fe1a 	bl	29dc2 <atomic_set_bit>
	return false;
   2a18e:	e7d6      	b.n	2a13e <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2a190:	2101      	movs	r1, #1
   2a192:	e7fa      	b.n	2a18a <bt_gatt_change_aware+0x5a>

0002a194 <bt_smp_recv>:
{
   2a194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2a196:	2100      	movs	r1, #0
   2a198:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a19c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	struct bt_conn *conn = chan->conn;
   2a1a0:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2a1a2:	4608      	mov	r0, r1
   2a1a4:	f7ff f9a6 	bl	294f4 <bt_l2cap_create_pdu_timeout>
   2a1a8:	f100 0608 	add.w	r6, r0, #8
   2a1ac:	4604      	mov	r4, r0
   2a1ae:	2101      	movs	r1, #1
   2a1b0:	4630      	mov	r0, r6
   2a1b2:	f000 f87d 	bl	2a2b0 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2a1b6:	2505      	movs	r5, #5
   2a1b8:	7005      	strb	r5, [r0, #0]
   2a1ba:	2101      	movs	r1, #1
   2a1bc:	4630      	mov	r0, r6
   2a1be:	f000 f877 	bl	2a2b0 <net_buf_simple_add>
   2a1c2:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2a1c4:	7005      	strb	r5, [r0, #0]
   2a1c6:	4622      	mov	r2, r4
   2a1c8:	9300      	str	r3, [sp, #0]
   2a1ca:	2106      	movs	r1, #6
   2a1cc:	4638      	mov	r0, r7
   2a1ce:	f7ff f994 	bl	294fa <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2a1d2:	b110      	cbz	r0, 2a1da <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2a1d4:	4620      	mov	r0, r4
   2a1d6:	f7fb fb39 	bl	2584c <net_buf_unref>
}
   2a1da:	2000      	movs	r0, #0
   2a1dc:	b003      	add	sp, #12
   2a1de:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a1e0 <bt_smp_sign>:
   2a1e0:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2a1e4:	4770      	bx	lr

0002a1e6 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2a1e6:	2000      	movs	r0, #0
   2a1e8:	4770      	bx	lr

0002a1ea <fixed_data_unref>:
}
   2a1ea:	4770      	bx	lr

0002a1ec <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2a1ec:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2a1ee:	6849      	ldr	r1, [r1, #4]
   2a1f0:	6809      	ldr	r1, [r1, #0]
   2a1f2:	f7fb ba9d 	b.w	25730 <net_buf_alloc_len>

0002a1f6 <net_buf_get>:
{
   2a1f6:	b570      	push	{r4, r5, r6, lr}
   2a1f8:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2a1fa:	f7fc fc77 	bl	26aec <z_impl_k_queue_get>
	if (!buf) {
   2a1fe:	4605      	mov	r5, r0
   2a200:	b128      	cbz	r0, 2a20e <net_buf_get+0x18>
   2a202:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a204:	7963      	ldrb	r3, [r4, #5]
   2a206:	f013 0301 	ands.w	r3, r3, #1
   2a20a:	d102      	bne.n	2a212 <net_buf_get+0x1c>
	frag->frags = NULL;
   2a20c:	6023      	str	r3, [r4, #0]
}
   2a20e:	4628      	mov	r0, r5
   2a210:	bd70      	pop	{r4, r5, r6, pc}
   2a212:	2300      	movs	r3, #0
   2a214:	2200      	movs	r2, #0
   2a216:	4630      	mov	r0, r6
   2a218:	f7fc fc68 	bl	26aec <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   2a21c:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   2a21e:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   2a220:	f023 0301 	bic.w	r3, r3, #1
   2a224:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2a226:	4604      	mov	r4, r0
   2a228:	e7ec      	b.n	2a204 <net_buf_get+0xe>

0002a22a <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2a22a:	6883      	ldr	r3, [r0, #8]
   2a22c:	440b      	add	r3, r1
   2a22e:	6003      	str	r3, [r0, #0]
}
   2a230:	4770      	bx	lr

0002a232 <net_buf_put>:
{
   2a232:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   2a234:	460a      	mov	r2, r1
   2a236:	6814      	ldr	r4, [r2, #0]
   2a238:	b914      	cbnz	r4, 2a240 <net_buf_put+0xe>
}
   2a23a:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   2a23c:	f000 bab0 	b.w	2a7a0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   2a240:	7953      	ldrb	r3, [r2, #5]
   2a242:	f043 0301 	orr.w	r3, r3, #1
   2a246:	7153      	strb	r3, [r2, #5]
   2a248:	4622      	mov	r2, r4
   2a24a:	e7f4      	b.n	2a236 <net_buf_put+0x4>

0002a24c <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   2a24c:	7902      	ldrb	r2, [r0, #4]
   2a24e:	3201      	adds	r2, #1
   2a250:	7102      	strb	r2, [r0, #4]
	return buf;
}
   2a252:	4770      	bx	lr

0002a254 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   2a254:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2a256:	4618      	mov	r0, r3
   2a258:	681b      	ldr	r3, [r3, #0]
   2a25a:	2b00      	cmp	r3, #0
   2a25c:	d1fb      	bne.n	2a256 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   2a25e:	4770      	bx	lr

0002a260 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   2a260:	6802      	ldr	r2, [r0, #0]
{
   2a262:	b510      	push	{r4, lr}
	if (parent->frags) {
   2a264:	b12a      	cbz	r2, 2a272 <net_buf_frag_insert+0x12>
   2a266:	460b      	mov	r3, r1
	while (buf->frags) {
   2a268:	461c      	mov	r4, r3
   2a26a:	681b      	ldr	r3, [r3, #0]
   2a26c:	2b00      	cmp	r3, #0
   2a26e:	d1fb      	bne.n	2a268 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   2a270:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   2a272:	6001      	str	r1, [r0, #0]
}
   2a274:	bd10      	pop	{r4, pc}

0002a276 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2a276:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2a278:	4604      	mov	r4, r0
   2a27a:	b920      	cbnz	r0, 2a286 <net_buf_frag_add+0x10>
	buf->ref++;
   2a27c:	790b      	ldrb	r3, [r1, #4]
   2a27e:	3301      	adds	r3, #1
   2a280:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   2a282:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2a284:	bd10      	pop	{r4, pc}
   2a286:	4603      	mov	r3, r0
	while (buf->frags) {
   2a288:	4618      	mov	r0, r3
   2a28a:	681b      	ldr	r3, [r3, #0]
   2a28c:	2b00      	cmp	r3, #0
   2a28e:	d1fb      	bne.n	2a288 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   2a290:	f7ff ffe6 	bl	2a260 <net_buf_frag_insert>
   2a294:	4620      	mov	r0, r4
   2a296:	e7f5      	b.n	2a284 <net_buf_frag_add+0xe>

0002a298 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   2a298:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   2a29a:	b108      	cbz	r0, 2a2a0 <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   2a29c:	680b      	ldr	r3, [r1, #0]
   2a29e:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   2a2a0:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   2a2a2:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   2a2a4:	4608      	mov	r0, r1
	frag->frags = NULL;
   2a2a6:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   2a2a8:	f7fb fad0 	bl	2584c <net_buf_unref>
#endif

	return next_frag;
}
   2a2ac:	4620      	mov	r0, r4
   2a2ae:	bd10      	pop	{r4, pc}

0002a2b0 <net_buf_simple_add>:
	return buf->data + buf->len;
   2a2b0:	8883      	ldrh	r3, [r0, #4]
   2a2b2:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   2a2b4:	4419      	add	r1, r3
   2a2b6:	8081      	strh	r1, [r0, #4]
	return tail;
}
   2a2b8:	18d0      	adds	r0, r2, r3
   2a2ba:	4770      	bx	lr

0002a2bc <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2a2bc:	b430      	push	{r4, r5}
   2a2be:	8884      	ldrh	r4, [r0, #4]
   2a2c0:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   2a2c2:	18a3      	adds	r3, r4, r2
   2a2c4:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a2c6:	1928      	adds	r0, r5, r4
}
   2a2c8:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2a2ca:	f7fe bca4 	b.w	28c16 <memcpy>

0002a2ce <net_buf_simple_add_u8>:
   2a2ce:	8883      	ldrh	r3, [r0, #4]
   2a2d0:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   2a2d2:	b510      	push	{r4, lr}
	buf->len += len;
   2a2d4:	1c5c      	adds	r4, r3, #1
   2a2d6:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   2a2d8:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2a2da:	18d0      	adds	r0, r2, r3
   2a2dc:	bd10      	pop	{r4, pc}

0002a2de <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2a2de:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   2a2e0:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   2a2e2:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   2a2e4:	1a40      	subs	r0, r0, r1
	buf->len += len;
   2a2e6:	4411      	add	r1, r2
	buf->data -= len;
   2a2e8:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2a2ea:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2a2ec:	4770      	bx	lr

0002a2ee <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2a2ee:	8882      	ldrh	r2, [r0, #4]
   2a2f0:	1a52      	subs	r2, r2, r1
{
   2a2f2:	4603      	mov	r3, r0
	buf->len -= len;
   2a2f4:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   2a2f6:	6800      	ldr	r0, [r0, #0]
   2a2f8:	4408      	add	r0, r1
   2a2fa:	6018      	str	r0, [r3, #0]
}
   2a2fc:	4770      	bx	lr

0002a2fe <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2a2fe:	4603      	mov	r3, r0
	void *data = buf->data;
   2a300:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2a302:	889a      	ldrh	r2, [r3, #4]
   2a304:	1a52      	subs	r2, r2, r1
	buf->data += len;
   2a306:	4401      	add	r1, r0
	buf->len -= len;
   2a308:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2a30a:	6019      	str	r1, [r3, #0]

	return data;
}
   2a30c:	4770      	bx	lr

0002a30e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2a30e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2a310:	6803      	ldr	r3, [r0, #0]
   2a312:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2a314:	2102      	movs	r1, #2
   2a316:	f7ff ffea 	bl	2a2ee <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2a31a:	4620      	mov	r0, r4
   2a31c:	bd10      	pop	{r4, pc}

0002a31e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2a31e:	6802      	ldr	r2, [r0, #0]
   2a320:	6880      	ldr	r0, [r0, #8]
}
   2a322:	1a10      	subs	r0, r2, r0
   2a324:	4770      	bx	lr

0002a326 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2a326:	8883      	ldrh	r3, [r0, #4]
   2a328:	88c2      	ldrh	r2, [r0, #6]
   2a32a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2a32c:	6803      	ldr	r3, [r0, #0]
   2a32e:	6880      	ldr	r0, [r0, #8]
   2a330:	1a18      	subs	r0, r3, r0
}
   2a332:	1a10      	subs	r0, r2, r0
   2a334:	4770      	bx	lr

0002a336 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a336:	6843      	ldr	r3, [r0, #4]
   2a338:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2a33a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2a33e:	600b      	str	r3, [r1, #0]
}
   2a340:	2000      	movs	r0, #0
   2a342:	4770      	bx	lr

0002a344 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a344:	6843      	ldr	r3, [r0, #4]
   2a346:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2a348:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2a34c:	4042      	eors	r2, r0
   2a34e:	400a      	ands	r2, r1
   2a350:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2a352:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2a356:	2000      	movs	r0, #0
   2a358:	4770      	bx	lr

0002a35a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a35a:	6843      	ldr	r3, [r0, #4]
   2a35c:	685b      	ldr	r3, [r3, #4]
}
   2a35e:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2a360:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2a364:	4770      	bx	lr

0002a366 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a366:	6843      	ldr	r3, [r0, #4]
   2a368:	685b      	ldr	r3, [r3, #4]
}
   2a36a:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2a36c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2a370:	4770      	bx	lr

0002a372 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2a372:	6843      	ldr	r3, [r0, #4]
   2a374:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2a376:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2a37a:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2a37c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2a380:	2000      	movs	r0, #0
   2a382:	4770      	bx	lr

0002a384 <gpio_nrfx_manage_callback>:
	return port->data;
   2a384:	6903      	ldr	r3, [r0, #16]
	return list->head;
   2a386:	6858      	ldr	r0, [r3, #4]
{
   2a388:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   2a38a:	b158      	cbz	r0, 2a3a4 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a38c:	2400      	movs	r4, #0
   2a38e:	4281      	cmp	r1, r0
   2a390:	d112      	bne.n	2a3b8 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2a392:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   2a394:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   2a396:	b954      	cbnz	r4, 2a3ae <gpio_nrfx_manage_callback+0x2a>
   2a398:	428d      	cmp	r5, r1
	list->head = node;
   2a39a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   2a39c:	d100      	bne.n	2a3a0 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2a39e:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2a3a0:	2000      	movs	r0, #0
   2a3a2:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   2a3a4:	b96a      	cbnz	r2, 2a3c2 <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   2a3a6:	2000      	movs	r0, #0
}
   2a3a8:	bd30      	pop	{r4, r5, pc}
   2a3aa:	4628      	mov	r0, r5
   2a3ac:	e7ef      	b.n	2a38e <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2a3ae:	428d      	cmp	r5, r1
	parent->next = child;
   2a3b0:	6020      	str	r0, [r4, #0]
	list->tail = node;
   2a3b2:	bf08      	it	eq
   2a3b4:	609c      	streq	r4, [r3, #8]
}
   2a3b6:	e7f3      	b.n	2a3a0 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   2a3b8:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a3ba:	4604      	mov	r4, r0
   2a3bc:	2d00      	cmp	r5, #0
   2a3be:	d1f4      	bne.n	2a3aa <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   2a3c0:	b13a      	cbz	r2, 2a3d2 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   2a3c2:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   2a3c4:	685a      	ldr	r2, [r3, #4]
   2a3c6:	600a      	str	r2, [r1, #0]
	list->head = node;
   2a3c8:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2a3ca:	2800      	cmp	r0, #0
   2a3cc:	d1eb      	bne.n	2a3a6 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2a3ce:	6099      	str	r1, [r3, #8]
}
   2a3d0:	e7ea      	b.n	2a3a8 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   2a3d2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   2a3d6:	e7e7      	b.n	2a3a8 <gpio_nrfx_manage_callback+0x24>

0002a3d8 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   2a3d8:	b570      	push	{r4, r5, r6, lr}
   2a3da:	460e      	mov	r6, r1
   2a3dc:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a3de:	4601      	mov	r1, r0
   2a3e0:	b150      	cbz	r0, 2a3f8 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   2a3e2:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   2a3e4:	688a      	ldr	r2, [r1, #8]
   2a3e6:	402a      	ands	r2, r5
   2a3e8:	d002      	beq.n	2a3f0 <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2a3ea:	684b      	ldr	r3, [r1, #4]
   2a3ec:	4630      	mov	r0, r6
   2a3ee:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2a3f0:	b114      	cbz	r4, 2a3f8 <gpio_fire_callbacks.isra.0+0x20>
   2a3f2:	4621      	mov	r1, r4
   2a3f4:	6824      	ldr	r4, [r4, #0]
   2a3f6:	e7f5      	b.n	2a3e4 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   2a3f8:	bd70      	pop	{r4, r5, r6, pc}

0002a3fa <cfg_level_pins>:
{
   2a3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   2a3fe:	6907      	ldr	r7, [r0, #16]
	return port->config;
   2a400:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   2a404:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   2a406:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2a40a:	4313      	orrs	r3, r2
   2a40c:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2a410:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2a412:	2500      	movs	r5, #0
	while (level_pins) {
   2a414:	b90c      	cbnz	r4, 2a41a <cfg_level_pins+0x20>
}
   2a416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2a41a:	4226      	tst	r6, r4
   2a41c:	d010      	beq.n	2a440 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a41e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a420:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2a424:	40e9      	lsrs	r1, r5
   2a426:	f001 0101 	and.w	r1, r1, #1
   2a42a:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2a42e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2a432:	b2c9      	uxtb	r1, r1
   2a434:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   2a438:	f7fb fab4 	bl	259a4 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2a43c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2a440:	3501      	adds	r5, #1
		bit <<= 1;
   2a442:	0076      	lsls	r6, r6, #1
   2a444:	e7e6      	b.n	2a414 <cfg_level_pins+0x1a>

0002a446 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2a446:	6902      	ldr	r2, [r0, #16]
{
   2a448:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2a44a:	e892 0003 	ldmia.w	r2, {r0, r1}
   2a44e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2a452:	2000      	movs	r0, #0
   2a454:	4770      	bx	lr

0002a456 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   2a456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   2a45a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   2a45e:	f1a0 0308 	sub.w	r3, r0, #8
   2a462:	4258      	negs	r0, r3
   2a464:	4158      	adcs	r0, r3
   2a466:	4770      	bx	lr

0002a468 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2a468:	4700      	bx	r0

0002a46a <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2a46a:	f000 bc22 	b.w	2acb2 <z_impl_k_busy_wait>

0002a46e <nrfx_clock_enable>:
{
   2a46e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   2a470:	2000      	movs	r0, #0
   2a472:	f7e8 fc61 	bl	12d38 <arch_irq_is_enabled>
   2a476:	b918      	cbnz	r0, 2a480 <nrfx_clock_enable+0x12>
}
   2a478:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   2a47c:	f7e8 bc38 	b.w	12cf0 <arch_irq_enable>
   2a480:	bd08      	pop	{r3, pc}

0002a482 <nrfx_clock_start>:
    switch (domain)
   2a482:	b110      	cbz	r0, 2a48a <nrfx_clock_start+0x8>
   2a484:	2801      	cmp	r0, #1
   2a486:	d01d      	beq.n	2a4c4 <nrfx_clock_start+0x42>
   2a488:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2a48a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a48e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2a492:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2a496:	03c9      	lsls	r1, r1, #15
   2a498:	d512      	bpl.n	2a4c0 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2a49a:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   2a49e:	2a01      	cmp	r2, #1
   2a4a0:	d10e      	bne.n	2a4c0 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   2a4a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a4a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a4aa:	2200      	movs	r2, #0
   2a4ac:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   2a4b0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   2a4b4:	2202      	movs	r2, #2
   2a4b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a4ba:	2201      	movs	r2, #1
   2a4bc:	609a      	str	r2, [r3, #8]
}
   2a4be:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   2a4c0:	2200      	movs	r2, #0
   2a4c2:	e7ee      	b.n	2a4a2 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2a4c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a4c8:	2200      	movs	r2, #0
   2a4ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   2a4ce:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   2a4d2:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2a4d6:	6018      	str	r0, [r3, #0]
}
   2a4d8:	4770      	bx	lr

0002a4da <z_device_state_init>:
}
   2a4da:	4770      	bx	lr

0002a4dc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   2a4dc:	b138      	cbz	r0, 2a4ee <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   2a4de:	68c3      	ldr	r3, [r0, #12]
   2a4e0:	8818      	ldrh	r0, [r3, #0]
   2a4e2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2a4e6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2a4ea:	4258      	negs	r0, r3
   2a4ec:	4158      	adcs	r0, r3
}
   2a4ee:	4770      	bx	lr

0002a4f0 <arch_system_halt>:
	__asm__ volatile(
   2a4f0:	f04f 0220 	mov.w	r2, #32
   2a4f4:	f3ef 8311 	mrs	r3, BASEPRI
   2a4f8:	f382 8811 	msr	BASEPRI, r2
   2a4fc:	f3bf 8f6f 	isb	sy
	for (;;) {
   2a500:	e7fe      	b.n	2a500 <arch_system_halt+0x10>

0002a502 <k_heap_init>:
{
   2a502:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2a504:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   2a508:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2a50c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2a50e:	f7fd be64 	b.w	281da <sys_heap_init>

0002a512 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   2a512:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a516:	b085      	sub	sp, #20
   2a518:	4606      	mov	r6, r0
   2a51a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a51c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   2a520:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a522:	f000 fbca 	bl	2acba <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   2a526:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2a52a:	4605      	mov	r5, r0
   2a52c:	460f      	mov	r7, r1
   2a52e:	f04f 0320 	mov.w	r3, #32
   2a532:	f3ef 8411 	mrs	r4, BASEPRI
   2a536:	f383 8811 	msr	BASEPRI, r3
   2a53a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a53e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   2a542:	464a      	mov	r2, r9
   2a544:	4641      	mov	r1, r8
   2a546:	4630      	mov	r0, r6
   2a548:	f7fd fdcc 	bl	280e4 <sys_heap_aligned_alloc>
   2a54c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2a54e:	f7fd f961 	bl	27814 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   2a552:	9b03      	ldr	r3, [sp, #12]
   2a554:	b13b      	cbz	r3, 2a566 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   2a556:	f384 8811 	msr	BASEPRI, r4
   2a55a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2a55e:	4618      	mov	r0, r3
   2a560:	b005      	add	sp, #20
   2a562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   2a566:	1a28      	subs	r0, r5, r0
   2a568:	eb67 0101 	sbc.w	r1, r7, r1
   2a56c:	2801      	cmp	r0, #1
   2a56e:	f171 0200 	sbcs.w	r2, r1, #0
   2a572:	dbf0      	blt.n	2a556 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2a574:	e9cd 0100 	strd	r0, r1, [sp]
   2a578:	465a      	mov	r2, fp
   2a57a:	4621      	mov	r1, r4
   2a57c:	4650      	mov	r0, sl
   2a57e:	f7fc fdc1 	bl	27104 <z_pend_curr>
	__asm__ volatile(
   2a582:	f04f 0320 	mov.w	r3, #32
   2a586:	f3ef 8411 	mrs	r4, BASEPRI
   2a58a:	f383 8811 	msr	BASEPRI, r3
   2a58e:	f3bf 8f6f 	isb	sy
   2a592:	e7d6      	b.n	2a542 <k_heap_aligned_alloc+0x30>

0002a594 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   2a594:	b538      	push	{r3, r4, r5, lr}
   2a596:	4604      	mov	r4, r0
   2a598:	f04f 0320 	mov.w	r3, #32
   2a59c:	f3ef 8511 	mrs	r5, BASEPRI
   2a5a0:	f383 8811 	msr	BASEPRI, r3
   2a5a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   2a5a8:	f7fd fd4f 	bl	2804a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2a5ac:	f104 000c 	add.w	r0, r4, #12
   2a5b0:	f000 fb0c 	bl	2abcc <z_unpend_all>
   2a5b4:	b130      	cbz	r0, 2a5c4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   2a5b6:	4629      	mov	r1, r5
   2a5b8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   2a5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   2a5c0:	f7fc bd1c 	b.w	26ffc <z_reschedule>
	__asm__ volatile(
   2a5c4:	f385 8811 	msr	BASEPRI, r5
   2a5c8:	f3bf 8f6f 	isb	sy
}
   2a5cc:	bd38      	pop	{r3, r4, r5, pc}

0002a5ce <k_mem_slab_init>:
{
   2a5ce:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2a5d0:	2400      	movs	r4, #0
   2a5d2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a5d4:	ea41 0402 	orr.w	r4, r1, r2
   2a5d8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2a5dc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   2a5e0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2a5e2:	d10c      	bne.n	2a5fe <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   2a5e4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a5e6:	42a3      	cmp	r3, r4
   2a5e8:	d103      	bne.n	2a5f2 <k_mem_slab_init+0x24>
   2a5ea:	e9c0 0000 	strd	r0, r0, [r0]
}
   2a5ee:	2000      	movs	r0, #0
}
   2a5f0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2a5f2:	6945      	ldr	r5, [r0, #20]
   2a5f4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2a5f6:	3401      	adds	r4, #1
		slab->free_list = p;
   2a5f8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   2a5fa:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2a5fc:	e7f3      	b.n	2a5e6 <k_mem_slab_init+0x18>
		return -EINVAL;
   2a5fe:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2a602:	e7f5      	b.n	2a5f0 <k_mem_slab_init+0x22>

0002a604 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   2a604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a606:	4604      	mov	r4, r0
   2a608:	460d      	mov	r5, r1
	__asm__ volatile(
   2a60a:	f04f 0320 	mov.w	r3, #32
   2a60e:	f3ef 8611 	mrs	r6, BASEPRI
   2a612:	f383 8811 	msr	BASEPRI, r3
   2a616:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2a61a:	6947      	ldr	r7, [r0, #20]
   2a61c:	b977      	cbnz	r7, 2a63c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2a61e:	f000 fabd 	bl	2ab9c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   2a622:	b158      	cbz	r0, 2a63c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   2a624:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   2a626:	6142      	str	r2, [r0, #20]
   2a628:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2a62a:	f000 fa70 	bl	2ab0e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2a62e:	4631      	mov	r1, r6
   2a630:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   2a634:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   2a638:	f7fc bce0 	b.w	26ffc <z_reschedule>
	**(char ***) mem = slab->free_list;
   2a63c:	682b      	ldr	r3, [r5, #0]
   2a63e:	6962      	ldr	r2, [r4, #20]
   2a640:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   2a642:	682b      	ldr	r3, [r5, #0]
   2a644:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   2a646:	69a3      	ldr	r3, [r4, #24]
   2a648:	3b01      	subs	r3, #1
   2a64a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2a64c:	f386 8811 	msr	BASEPRI, r6
   2a650:	f3bf 8f6f 	isb	sy
}
   2a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a656 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2a656:	f3ef 8005 	mrs	r0, IPSR
}
   2a65a:	3800      	subs	r0, #0
   2a65c:	bf18      	it	ne
   2a65e:	2001      	movne	r0, #1
   2a660:	4770      	bx	lr

0002a662 <z_impl_k_thread_name_set>:
}
   2a662:	f06f 0057 	mvn.w	r0, #87	; 0x57
   2a666:	4770      	bx	lr

0002a668 <k_thread_name_get>:
}
   2a668:	2000      	movs	r0, #0
   2a66a:	4770      	bx	lr

0002a66c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2a66c:	f7fc be5c 	b.w	27328 <z_sched_start>

0002a670 <z_pm_save_idle_exit>:
{
   2a670:	b508      	push	{r3, lr}
	pm_system_resume();
   2a672:	f7e7 ff8f 	bl	12594 <pm_system_resume>
}
   2a676:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2a67a:	f7fe b849 	b.w	28710 <sys_clock_idle_exit>

0002a67e <queue_insert>:
{
   2a67e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a682:	4699      	mov	r9, r3
   2a684:	4604      	mov	r4, r0
   2a686:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2a68a:	460d      	mov	r5, r1
   2a68c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a68e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   2a692:	f04f 0220 	mov.w	r2, #32
   2a696:	f3ef 8711 	mrs	r7, BASEPRI
   2a69a:	f382 8811 	msr	BASEPRI, r2
   2a69e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   2a6a2:	b103      	cbz	r3, 2a6a6 <queue_insert+0x28>
	return list->tail;
   2a6a4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   2a6a6:	4630      	mov	r0, r6
   2a6a8:	f000 fa78 	bl	2ab9c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   2a6ac:	b158      	cbz	r0, 2a6c6 <queue_insert+0x48>
   2a6ae:	2400      	movs	r4, #0
   2a6b0:	67c4      	str	r4, [r0, #124]	; 0x7c
   2a6b2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   2a6b6:	f000 fa2a 	bl	2ab0e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   2a6ba:	4630      	mov	r0, r6
   2a6bc:	4639      	mov	r1, r7
   2a6be:	f7fc fc9d 	bl	26ffc <z_reschedule>
	return 0;
   2a6c2:	2000      	movs	r0, #0
   2a6c4:	e00c      	b.n	2a6e0 <queue_insert+0x62>
	if (alloc) {
   2a6c6:	f1b9 0f00 	cmp.w	r9, #0
   2a6ca:	d01b      	beq.n	2a704 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   2a6cc:	2108      	movs	r1, #8
   2a6ce:	f7fd f9b7 	bl	27a40 <z_thread_aligned_alloc>
		if (anode == NULL) {
   2a6d2:	b938      	cbnz	r0, 2a6e4 <queue_insert+0x66>
	__asm__ volatile(
   2a6d4:	f387 8811 	msr	BASEPRI, r7
   2a6d8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   2a6dc:	f06f 000b 	mvn.w	r0, #11
}
   2a6e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   2a6e4:	2301      	movs	r3, #1
		anode->data = data;
   2a6e6:	f8c0 8004 	str.w	r8, [r0, #4]
   2a6ea:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a6ec:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a6ee:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   2a6f2:	b95d      	cbnz	r5, 2a70c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a6f4:	6823      	ldr	r3, [r4, #0]
   2a6f6:	4313      	orrs	r3, r2
   2a6f8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a6fa:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   2a6fc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   2a6fe:	b973      	cbnz	r3, 2a71e <queue_insert+0xa0>
	list->tail = node;
   2a700:	6060      	str	r0, [r4, #4]
}
   2a702:	e00c      	b.n	2a71e <queue_insert+0xa0>
	node->next_and_flags = flags;
   2a704:	f8c8 9000 	str.w	r9, [r8]
}
   2a708:	4640      	mov	r0, r8
   2a70a:	e7ef      	b.n	2a6ec <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2a70c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2a70e:	f033 0303 	bics.w	r3, r3, #3
   2a712:	d110      	bne.n	2a736 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a714:	6002      	str	r2, [r0, #0]
	return list->tail;
   2a716:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   2a718:	b93a      	cbnz	r2, 2a72a <queue_insert+0xac>
	list->head = node;
   2a71a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a71e:	2104      	movs	r1, #4
   2a720:	f104 0010 	add.w	r0, r4, #16
   2a724:	f000 fc5e 	bl	2afe4 <z_handle_obj_poll_events>
   2a728:	e7c7      	b.n	2a6ba <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a72a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a72c:	f003 0303 	and.w	r3, r3, #3
   2a730:	4303      	orrs	r3, r0
   2a732:	6013      	str	r3, [r2, #0]
   2a734:	e7e4      	b.n	2a700 <queue_insert+0x82>
   2a736:	4313      	orrs	r3, r2
   2a738:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a73a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a73c:	f003 0303 	and.w	r3, r3, #3
   2a740:	4303      	orrs	r3, r0
   2a742:	602b      	str	r3, [r5, #0]
}
   2a744:	e7eb      	b.n	2a71e <queue_insert+0xa0>

0002a746 <z_queue_node_peek>:
{
   2a746:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2a748:	4604      	mov	r4, r0
   2a74a:	b130      	cbz	r0, 2a75a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a74c:	6802      	ldr	r2, [r0, #0]
   2a74e:	0793      	lsls	r3, r2, #30
   2a750:	d003      	beq.n	2a75a <z_queue_node_peek+0x14>
		ret = anode->data;
   2a752:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2a754:	b109      	cbz	r1, 2a75a <z_queue_node_peek+0x14>
			k_free(anode);
   2a756:	f000 fc53 	bl	2b000 <k_free>
}
   2a75a:	4620      	mov	r0, r4
   2a75c:	bd10      	pop	{r4, pc}

0002a75e <z_impl_k_queue_init>:
	list->head = NULL;
   2a75e:	2300      	movs	r3, #0
	list->tail = NULL;
   2a760:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   2a764:	f100 0308 	add.w	r3, r0, #8
   2a768:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2a76c:	f100 0310 	add.w	r3, r0, #16
   2a770:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   2a774:	4770      	bx	lr

0002a776 <k_queue_append>:
{
   2a776:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2a778:	2301      	movs	r3, #1
   2a77a:	9300      	str	r3, [sp, #0]
   2a77c:	2300      	movs	r3, #0
{
   2a77e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2a780:	4619      	mov	r1, r3
   2a782:	f7ff ff7c 	bl	2a67e <queue_insert>
}
   2a786:	b003      	add	sp, #12
   2a788:	f85d fb04 	ldr.w	pc, [sp], #4

0002a78c <k_queue_prepend>:
{
   2a78c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2a78e:	2300      	movs	r3, #0
{
   2a790:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2a792:	9300      	str	r3, [sp, #0]
   2a794:	4619      	mov	r1, r3
   2a796:	f7ff ff72 	bl	2a67e <queue_insert>
}
   2a79a:	b003      	add	sp, #12
   2a79c:	f85d fb04 	ldr.w	pc, [sp], #4

0002a7a0 <k_queue_append_list>:
{
   2a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a7a4:	4605      	mov	r5, r0
   2a7a6:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   2a7a8:	460c      	mov	r4, r1
   2a7aa:	b391      	cbz	r1, 2a812 <k_queue_append_list+0x72>
   2a7ac:	b38a      	cbz	r2, 2a812 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2a7ae:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   2a7b2:	f04f 0320 	mov.w	r3, #32
   2a7b6:	f3ef 8811 	mrs	r8, BASEPRI
   2a7ba:	f383 8811 	msr	BASEPRI, r3
   2a7be:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   2a7c2:	4638      	mov	r0, r7
   2a7c4:	f000 f9ea 	bl	2ab9c <z_unpend_first_thread>
   2a7c8:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   2a7cc:	b920      	cbnz	r0, 2a7d8 <k_queue_append_list+0x38>
	return list->tail;
   2a7ce:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2a7d0:	b9ca      	cbnz	r2, 2a806 <k_queue_append_list+0x66>
	list->head = node;
   2a7d2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2a7d4:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   2a7d6:	e00a      	b.n	2a7ee <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   2a7d8:	6144      	str	r4, [r0, #20]
   2a7da:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   2a7de:	f000 f996 	bl	2ab0e <z_ready_thread>
		head = *(void **)head;
   2a7e2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   2a7e4:	4638      	mov	r0, r7
   2a7e6:	f000 f9d9 	bl	2ab9c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   2a7ea:	2c00      	cmp	r4, #0
   2a7ec:	d1ee      	bne.n	2a7cc <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   2a7ee:	2104      	movs	r1, #4
   2a7f0:	f105 0010 	add.w	r0, r5, #16
   2a7f4:	f000 fbf6 	bl	2afe4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   2a7f8:	4638      	mov	r0, r7
   2a7fa:	4641      	mov	r1, r8
   2a7fc:	f7fc fbfe 	bl	26ffc <z_reschedule>
	return 0;
   2a800:	2000      	movs	r0, #0
}
   2a802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2a806:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2a808:	f003 0303 	and.w	r3, r3, #3
   2a80c:	431c      	orrs	r4, r3
   2a80e:	6014      	str	r4, [r2, #0]
}
   2a810:	e7e0      	b.n	2a7d4 <k_queue_append_list+0x34>
		return -EINVAL;
   2a812:	f06f 0015 	mvn.w	r0, #21
   2a816:	e7f4      	b.n	2a802 <k_queue_append_list+0x62>

0002a818 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2a818:	b15a      	cbz	r2, 2a832 <z_impl_k_sem_init+0x1a>
   2a81a:	428a      	cmp	r2, r1
   2a81c:	d309      	bcc.n	2a832 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2a81e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2a822:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2a826:	e9c0 0000 	strd	r0, r0, [r0]
   2a82a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2a82e:	2000      	movs	r0, #0
   2a830:	4770      	bx	lr
		return -EINVAL;
   2a832:	f06f 0015 	mvn.w	r0, #21
}
   2a836:	4770      	bx	lr

0002a838 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   2a838:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2a83a:	2301      	movs	r3, #1
   2a83c:	408b      	lsls	r3, r1
   2a83e:	ea22 0303 	bic.w	r3, r2, r3
   2a842:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   2a844:	fa22 f001 	lsr.w	r0, r2, r1
}
   2a848:	f000 0001 	and.w	r0, r0, #1
   2a84c:	4770      	bx	lr

0002a84e <unschedule_locked>:
{
   2a84e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a850:	2103      	movs	r1, #3
{
   2a852:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2a854:	300c      	adds	r0, #12
   2a856:	f7ff ffef 	bl	2a838 <flag_test_and_clear>
   2a85a:	4604      	mov	r4, r0
   2a85c:	b118      	cbz	r0, 2a866 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2a85e:	f105 0010 	add.w	r0, r5, #16
   2a862:	f000 f9e0 	bl	2ac26 <z_abort_timeout>
}
   2a866:	4620      	mov	r0, r4
   2a868:	bd38      	pop	{r3, r4, r5, pc}

0002a86a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2a86a:	b120      	cbz	r0, 2a876 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2a86c:	2200      	movs	r2, #0
   2a86e:	4611      	mov	r1, r2
   2a870:	3088      	adds	r0, #136	; 0x88
   2a872:	f000 b9bb 	b.w	2abec <z_sched_wake>
}
   2a876:	4770      	bx	lr

0002a878 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   2a878:	68c3      	ldr	r3, [r0, #12]
{
   2a87a:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a87c:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2a880:	079b      	lsls	r3, r3, #30
{
   2a882:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2a884:	d416      	bmi.n	2a8b4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   2a886:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2a888:	2102      	movs	r1, #2
   2a88a:	300c      	adds	r0, #12
   2a88c:	f7ff ffd4 	bl	2a838 <flag_test_and_clear>
   2a890:	b180      	cbz	r0, 2a8b4 <cancel_async_locked+0x3c>
	return list->head;
   2a892:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a896:	b16a      	cbz	r2, 2a8b4 <cancel_async_locked+0x3c>
   2a898:	4294      	cmp	r4, r2
   2a89a:	d11b      	bne.n	2a8d4 <cancel_async_locked+0x5c>
	return node->next;
   2a89c:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2a89e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   2a8a2:	b98d      	cbnz	r5, 2a8c8 <cancel_async_locked+0x50>
   2a8a4:	428c      	cmp	r4, r1
	list->head = node;
   2a8a6:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   2a8aa:	d101      	bne.n	2a8b0 <cancel_async_locked+0x38>
	list->tail = node;
   2a8ac:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   2a8b0:	2300      	movs	r3, #0
   2a8b2:	6023      	str	r3, [r4, #0]
	return *flagp;
   2a8b4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   2a8b6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   2a8ba:	bf1e      	ittt	ne
   2a8bc:	f043 0302 	orrne.w	r3, r3, #2
   2a8c0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2a8c2:	f003 000f 	andne.w	r0, r3, #15
}
   2a8c6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   2a8c8:	428c      	cmp	r4, r1
	parent->next = child;
   2a8ca:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2a8cc:	bf08      	it	eq
   2a8ce:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   2a8d2:	e7ed      	b.n	2a8b0 <cancel_async_locked+0x38>
	return node->next;
   2a8d4:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2a8d6:	6812      	ldr	r2, [r2, #0]
   2a8d8:	e7dd      	b.n	2a896 <cancel_async_locked+0x1e>

0002a8da <work_timeout>:
{
   2a8da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2a8dc:	4604      	mov	r4, r0
   2a8de:	f04f 0320 	mov.w	r3, #32
   2a8e2:	f3ef 8511 	mrs	r5, BASEPRI
   2a8e6:	f383 8811 	msr	BASEPRI, r3
   2a8ea:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   2a8ee:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a8f0:	f1a0 0610 	sub.w	r6, r0, #16
   2a8f4:	2103      	movs	r1, #3
   2a8f6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   2a8f8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2a8fa:	f7ff ff9d 	bl	2a838 <flag_test_and_clear>
   2a8fe:	b128      	cbz	r0, 2a90c <work_timeout+0x32>
		queue = dw->queue;
   2a900:	69a3      	ldr	r3, [r4, #24]
   2a902:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2a904:	a901      	add	r1, sp, #4
   2a906:	4630      	mov	r0, r6
   2a908:	f7fc fa40 	bl	26d8c <submit_to_queue_locked>
	__asm__ volatile(
   2a90c:	f385 8811 	msr	BASEPRI, r5
   2a910:	f3bf 8f6f 	isb	sy
}
   2a914:	b002      	add	sp, #8
   2a916:	bd70      	pop	{r4, r5, r6, pc}

0002a918 <k_work_init>:
{
   2a918:	b538      	push	{r3, r4, r5, lr}
   2a91a:	4604      	mov	r4, r0
   2a91c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2a91e:	2210      	movs	r2, #16
   2a920:	2100      	movs	r1, #0
   2a922:	f7fe f9a3 	bl	28c6c <memset>
   2a926:	6065      	str	r5, [r4, #4]
}
   2a928:	bd38      	pop	{r3, r4, r5, pc}

0002a92a <k_work_submit_to_queue>:
{
   2a92a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2a92c:	9001      	str	r0, [sp, #4]
   2a92e:	4608      	mov	r0, r1
	__asm__ volatile(
   2a930:	f04f 0320 	mov.w	r3, #32
   2a934:	f3ef 8511 	mrs	r5, BASEPRI
   2a938:	f383 8811 	msr	BASEPRI, r3
   2a93c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   2a940:	a901      	add	r1, sp, #4
   2a942:	f7fc fa23 	bl	26d8c <submit_to_queue_locked>
   2a946:	4604      	mov	r4, r0
	__asm__ volatile(
   2a948:	f385 8811 	msr	BASEPRI, r5
   2a94c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2a950:	2800      	cmp	r0, #0
   2a952:	dd04      	ble.n	2a95e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   2a954:	f7fc fdae 	bl	274b4 <z_impl_k_is_preempt_thread>
   2a958:	b108      	cbz	r0, 2a95e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2a95a:	f7fc fd0f 	bl	2737c <z_impl_k_yield>
}
   2a95e:	4620      	mov	r0, r4
   2a960:	b003      	add	sp, #12
   2a962:	bd30      	pop	{r4, r5, pc}

0002a964 <k_work_init_delayable>:
{
   2a964:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   2a966:	2230      	movs	r2, #48	; 0x30
{
   2a968:	4604      	mov	r4, r0
   2a96a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2a96c:	2100      	movs	r1, #0
   2a96e:	f7fe f97d 	bl	28c6c <memset>
   2a972:	f44f 7380 	mov.w	r3, #256	; 0x100
   2a976:	6065      	str	r5, [r4, #4]
   2a978:	60e3      	str	r3, [r4, #12]
}
   2a97a:	bd38      	pop	{r3, r4, r5, pc}

0002a97c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2a97c:	b538      	push	{r3, r4, r5, lr}
   2a97e:	4604      	mov	r4, r0
	__asm__ volatile(
   2a980:	f04f 0320 	mov.w	r3, #32
   2a984:	f3ef 8511 	mrs	r5, BASEPRI
   2a988:	f383 8811 	msr	BASEPRI, r3
   2a98c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   2a990:	f7ff ff5d 	bl	2a84e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a994:	4620      	mov	r0, r4
   2a996:	f7ff ff6f 	bl	2a878 <cancel_async_locked>
	__asm__ volatile(
   2a99a:	f385 8811 	msr	BASEPRI, r5
   2a99e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2a9a2:	bd38      	pop	{r3, r4, r5, pc}

0002a9a4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   2a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a9a6:	4604      	mov	r4, r0
   2a9a8:	460d      	mov	r5, r1
	__asm__ volatile(
   2a9aa:	f04f 0320 	mov.w	r3, #32
   2a9ae:	f3ef 8711 	mrs	r7, BASEPRI
   2a9b2:	f383 8811 	msr	BASEPRI, r3
   2a9b6:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2a9ba:	f3bf 8f5b 	dmb	ish
   2a9be:	68c3      	ldr	r3, [r0, #12]
   2a9c0:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   2a9c4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2a9c8:	2b00      	cmp	r3, #0
   2a9ca:	bf14      	ite	ne
   2a9cc:	2601      	movne	r6, #1
   2a9ce:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   2a9d0:	d009      	beq.n	2a9e6 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   2a9d2:	f7ff ff3c 	bl	2a84e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2a9d6:	4620      	mov	r0, r4
   2a9d8:	f7ff ff4e 	bl	2a878 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   2a9dc:	4629      	mov	r1, r5
   2a9de:	4620      	mov	r0, r4
   2a9e0:	f7fc f9b6 	bl	26d50 <cancel_sync_locked>
   2a9e4:	4603      	mov	r3, r0
	__asm__ volatile(
   2a9e6:	f387 8811 	msr	BASEPRI, r7
   2a9ea:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2a9ee:	b13b      	cbz	r3, 2aa00 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   2a9f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2a9f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a9f8:	f105 0008 	add.w	r0, r5, #8
   2a9fc:	f7fc f8d0 	bl	26ba0 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2aa00:	4630      	mov	r0, r6
   2aa02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002aa04 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   2aa04:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2aa08:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2aa0a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2aa0c:	2300      	movs	r3, #0
	node->prev = NULL;
   2aa0e:	e9c0 3300 	strd	r3, r3, [r0]
}
   2aa12:	4770      	bx	lr

0002aa14 <unpend_thread_no_timeout>:
{
   2aa14:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   2aa16:	f7ff fff5 	bl	2aa04 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2aa1a:	7b43      	ldrb	r3, [r0, #13]
   2aa1c:	f023 0302 	bic.w	r3, r3, #2
   2aa20:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   2aa22:	2300      	movs	r3, #0
   2aa24:	6083      	str	r3, [r0, #8]
}
   2aa26:	bd08      	pop	{r3, pc}

0002aa28 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2aa28:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2aa2c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2aa30:	4283      	cmp	r3, r0
		return b2 - b1;
   2aa32:	bf14      	ite	ne
   2aa34:	1ac0      	subne	r0, r0, r3
	return 0;
   2aa36:	2000      	moveq	r0, #0
}
   2aa38:	4770      	bx	lr

0002aa3a <z_unpend_thread_no_timeout>:
{
   2aa3a:	b508      	push	{r3, lr}
	__asm__ volatile(
   2aa3c:	f04f 0320 	mov.w	r3, #32
   2aa40:	f3ef 8111 	mrs	r1, BASEPRI
   2aa44:	f383 8811 	msr	BASEPRI, r3
   2aa48:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2aa4c:	f7ff ffe2 	bl	2aa14 <unpend_thread_no_timeout>
	__asm__ volatile(
   2aa50:	f381 8811 	msr	BASEPRI, r1
   2aa54:	f3bf 8f6f 	isb	sy
}
   2aa58:	bd08      	pop	{r3, pc}

0002aa5a <z_unpend_thread>:
{
   2aa5a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2aa5c:	f04f 0320 	mov.w	r3, #32
   2aa60:	f3ef 8411 	mrs	r4, BASEPRI
   2aa64:	f383 8811 	msr	BASEPRI, r3
   2aa68:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2aa6c:	f7ff ffd2 	bl	2aa14 <unpend_thread_no_timeout>
	__asm__ volatile(
   2aa70:	f384 8811 	msr	BASEPRI, r4
   2aa74:	f3bf 8f6f 	isb	sy
}
   2aa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2aa7c:	3018      	adds	r0, #24
   2aa7e:	f000 b8d2 	b.w	2ac26 <z_abort_timeout>

0002aa82 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2aa82:	4603      	mov	r3, r0
   2aa84:	b920      	cbnz	r0, 2aa90 <z_reschedule_irqlock+0xe>
   2aa86:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2aa8a:	b90a      	cbnz	r2, 2aa90 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2aa8c:	f7e8 b8dc 	b.w	12c48 <arch_swap>
   2aa90:	f383 8811 	msr	BASEPRI, r3
   2aa94:	f3bf 8f6f 	isb	sy
}
   2aa98:	4770      	bx	lr

0002aa9a <z_reschedule_unlocked>:
	__asm__ volatile(
   2aa9a:	f04f 0320 	mov.w	r3, #32
   2aa9e:	f3ef 8011 	mrs	r0, BASEPRI
   2aaa2:	f383 8811 	msr	BASEPRI, r3
   2aaa6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2aaaa:	f7ff bfea 	b.w	2aa82 <z_reschedule_irqlock>

0002aaae <z_priq_dumb_best>:
{
   2aaae:	4603      	mov	r3, r0
	return list->head == list;
   2aab0:	6800      	ldr	r0, [r0, #0]
}
   2aab2:	4283      	cmp	r3, r0
   2aab4:	bf08      	it	eq
   2aab6:	2000      	moveq	r0, #0
   2aab8:	4770      	bx	lr

0002aaba <add_to_waitq_locked>:
{
   2aaba:	b538      	push	{r3, r4, r5, lr}
   2aabc:	4604      	mov	r4, r0
   2aabe:	460d      	mov	r5, r1
	unready_thread(thread);
   2aac0:	f7fc fae2 	bl	27088 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   2aac4:	7b63      	ldrb	r3, [r4, #13]
   2aac6:	f043 0302 	orr.w	r3, r3, #2
   2aaca:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   2aacc:	b195      	cbz	r5, 2aaf4 <add_to_waitq_locked+0x3a>
   2aace:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2aad0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2aad2:	429d      	cmp	r5, r3
   2aad4:	d015      	beq.n	2ab02 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2aad6:	b1a3      	cbz	r3, 2ab02 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   2aad8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   2aadc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   2aae0:	4291      	cmp	r1, r2
   2aae2:	d008      	beq.n	2aaf6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   2aae4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2aae6:	2a00      	cmp	r2, #0
   2aae8:	dd05      	ble.n	2aaf6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   2aaea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2aaec:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   2aaf0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2aaf2:	605c      	str	r4, [r3, #4]
}
   2aaf4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2aaf6:	686a      	ldr	r2, [r5, #4]
   2aaf8:	4293      	cmp	r3, r2
   2aafa:	d002      	beq.n	2ab02 <add_to_waitq_locked+0x48>
   2aafc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2aafe:	2b00      	cmp	r3, #0
   2ab00:	d1ec      	bne.n	2aadc <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   2ab02:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2ab04:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2ab08:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2ab0a:	606c      	str	r4, [r5, #4]
}
   2ab0c:	e7f2      	b.n	2aaf4 <add_to_waitq_locked+0x3a>

0002ab0e <z_ready_thread>:
{
   2ab0e:	b510      	push	{r4, lr}
   2ab10:	f04f 0320 	mov.w	r3, #32
   2ab14:	f3ef 8411 	mrs	r4, BASEPRI
   2ab18:	f383 8811 	msr	BASEPRI, r3
   2ab1c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   2ab20:	f7fc fbcc 	bl	272bc <ready_thread>
	__asm__ volatile(
   2ab24:	f384 8811 	msr	BASEPRI, r4
   2ab28:	f3bf 8f6f 	isb	sy
}
   2ab2c:	bd10      	pop	{r4, pc}

0002ab2e <z_thread_timeout>:
{
   2ab2e:	b510      	push	{r4, lr}
   2ab30:	4601      	mov	r1, r0
	__asm__ volatile(
   2ab32:	f04f 0320 	mov.w	r3, #32
   2ab36:	f3ef 8411 	mrs	r4, BASEPRI
   2ab3a:	f383 8811 	msr	BASEPRI, r3
   2ab3e:	f3bf 8f6f 	isb	sy
		if (!killed) {
   2ab42:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   2ab46:	f013 0f28 	tst.w	r3, #40	; 0x28
   2ab4a:	d10d      	bne.n	2ab68 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2ab4c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2ab50:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   2ab52:	b10b      	cbz	r3, 2ab58 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   2ab54:	f7ff ff5e 	bl	2aa14 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2ab58:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2ab5c:	f023 0314 	bic.w	r3, r3, #20
   2ab60:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   2ab64:	f7fc fbaa 	bl	272bc <ready_thread>
	__asm__ volatile(
   2ab68:	f384 8811 	msr	BASEPRI, r4
   2ab6c:	f3bf 8f6f 	isb	sy
}
   2ab70:	bd10      	pop	{r4, pc}

0002ab72 <z_unpend1_no_timeout>:
{
   2ab72:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ab74:	f04f 0320 	mov.w	r3, #32
   2ab78:	f3ef 8411 	mrs	r4, BASEPRI
   2ab7c:	f383 8811 	msr	BASEPRI, r3
   2ab80:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2ab84:	f7ff ff93 	bl	2aaae <z_priq_dumb_best>
		if (thread != NULL) {
   2ab88:	4601      	mov	r1, r0
   2ab8a:	b108      	cbz	r0, 2ab90 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2ab8c:	f7ff ff42 	bl	2aa14 <unpend_thread_no_timeout>
	__asm__ volatile(
   2ab90:	f384 8811 	msr	BASEPRI, r4
   2ab94:	f3bf 8f6f 	isb	sy
}
   2ab98:	4608      	mov	r0, r1
   2ab9a:	bd10      	pop	{r4, pc}

0002ab9c <z_unpend_first_thread>:
{
   2ab9c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2ab9e:	f04f 0320 	mov.w	r3, #32
   2aba2:	f3ef 8511 	mrs	r5, BASEPRI
   2aba6:	f383 8811 	msr	BASEPRI, r3
   2abaa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2abae:	f7ff ff7e 	bl	2aaae <z_priq_dumb_best>
		if (thread != NULL) {
   2abb2:	4604      	mov	r4, r0
   2abb4:	b120      	cbz	r0, 2abc0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   2abb6:	f7ff ff2d 	bl	2aa14 <unpend_thread_no_timeout>
   2abba:	3018      	adds	r0, #24
   2abbc:	f000 f833 	bl	2ac26 <z_abort_timeout>
	__asm__ volatile(
   2abc0:	f385 8811 	msr	BASEPRI, r5
   2abc4:	f3bf 8f6f 	isb	sy
}
   2abc8:	4620      	mov	r0, r4
   2abca:	bd38      	pop	{r3, r4, r5, pc}

0002abcc <z_unpend_all>:
{
   2abcc:	b538      	push	{r3, r4, r5, lr}
   2abce:	4605      	mov	r5, r0
	int need_sched = 0;
   2abd0:	2000      	movs	r0, #0
	return list->head == list;
   2abd2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2abd4:	42a5      	cmp	r5, r4
   2abd6:	d000      	beq.n	2abda <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2abd8:	b904      	cbnz	r4, 2abdc <z_unpend_all+0x10>
}
   2abda:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2abdc:	4620      	mov	r0, r4
   2abde:	f7ff ff3c 	bl	2aa5a <z_unpend_thread>
		z_ready_thread(thread);
   2abe2:	4620      	mov	r0, r4
   2abe4:	f7ff ff93 	bl	2ab0e <z_ready_thread>
		need_sched = 1;
   2abe8:	2001      	movs	r0, #1
   2abea:	e7f2      	b.n	2abd2 <z_unpend_all+0x6>

0002abec <z_sched_wake>:
{
   2abec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2abee:	f04f 0320 	mov.w	r3, #32
   2abf2:	f3ef 8511 	mrs	r5, BASEPRI
   2abf6:	f383 8811 	msr	BASEPRI, r3
   2abfa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   2abfe:	f7ff ff56 	bl	2aaae <z_priq_dumb_best>
		if (thread != NULL) {
   2ac02:	4604      	mov	r4, r0
   2ac04:	b150      	cbz	r0, 2ac1c <z_sched_wake+0x30>
   2ac06:	67c1      	str	r1, [r0, #124]	; 0x7c
   2ac08:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2ac0a:	f7ff ff03 	bl	2aa14 <unpend_thread_no_timeout>
   2ac0e:	3018      	adds	r0, #24
   2ac10:	f000 f809 	bl	2ac26 <z_abort_timeout>
			ready_thread(thread);
   2ac14:	4620      	mov	r0, r4
   2ac16:	f7fc fb51 	bl	272bc <ready_thread>
			ret = true;
   2ac1a:	2001      	movs	r0, #1
	__asm__ volatile(
   2ac1c:	f385 8811 	msr	BASEPRI, r5
   2ac20:	f3bf 8f6f 	isb	sy
}
   2ac24:	bd38      	pop	{r3, r4, r5, pc}

0002ac26 <z_abort_timeout>:
{
   2ac26:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ac28:	f04f 0220 	mov.w	r2, #32
   2ac2c:	f3ef 8411 	mrs	r4, BASEPRI
   2ac30:	f382 8811 	msr	BASEPRI, r2
   2ac34:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2ac38:	6803      	ldr	r3, [r0, #0]
   2ac3a:	b13b      	cbz	r3, 2ac4c <z_abort_timeout+0x26>
			remove_timeout(to);
   2ac3c:	f7fc fcfa 	bl	27634 <remove_timeout>
			ret = 0;
   2ac40:	2000      	movs	r0, #0
	__asm__ volatile(
   2ac42:	f384 8811 	msr	BASEPRI, r4
   2ac46:	f3bf 8f6f 	isb	sy
}
   2ac4a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2ac4c:	f06f 0015 	mvn.w	r0, #21
   2ac50:	e7f7      	b.n	2ac42 <z_abort_timeout+0x1c>

0002ac52 <z_get_next_timeout_expiry>:
{
   2ac52:	b510      	push	{r4, lr}
	__asm__ volatile(
   2ac54:	f04f 0320 	mov.w	r3, #32
   2ac58:	f3ef 8411 	mrs	r4, BASEPRI
   2ac5c:	f383 8811 	msr	BASEPRI, r3
   2ac60:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2ac64:	f7fc fcbe 	bl	275e4 <next_timeout>
	__asm__ volatile(
   2ac68:	f384 8811 	msr	BASEPRI, r4
   2ac6c:	f3bf 8f6f 	isb	sy
}
   2ac70:	bd10      	pop	{r4, pc}

0002ac72 <z_set_timeout_expiry>:
{
   2ac72:	b570      	push	{r4, r5, r6, lr}
   2ac74:	4604      	mov	r4, r0
   2ac76:	460d      	mov	r5, r1
	__asm__ volatile(
   2ac78:	f04f 0320 	mov.w	r3, #32
   2ac7c:	f3ef 8611 	mrs	r6, BASEPRI
   2ac80:	f383 8811 	msr	BASEPRI, r3
   2ac84:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   2ac88:	f7fc fcac 	bl	275e4 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2ac8c:	2801      	cmp	r0, #1
   2ac8e:	dd05      	ble.n	2ac9c <z_set_timeout_expiry+0x2a>
   2ac90:	42a0      	cmp	r0, r4
   2ac92:	db03      	blt.n	2ac9c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2ac94:	4629      	mov	r1, r5
   2ac96:	4620      	mov	r0, r4
   2ac98:	f7e7 ff1e 	bl	12ad8 <sys_clock_set_timeout>
	__asm__ volatile(
   2ac9c:	f386 8811 	msr	BASEPRI, r6
   2aca0:	f3bf 8f6f 	isb	sy
}
   2aca4:	bd70      	pop	{r4, r5, r6, pc}

0002aca6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2aca6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2aca8:	f7fc fdb4 	bl	27814 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2acac:	bd08      	pop	{r3, pc}

0002acae <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2acae:	f7fc bdb1 	b.w	27814 <sys_clock_tick_get>

0002acb2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2acb2:	b108      	cbz	r0, 2acb8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2acb4:	f7e8 bcbc 	b.w	13630 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2acb8:	4770      	bx	lr

0002acba <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2acba:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2acbe:	bf08      	it	eq
   2acc0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   2acc4:	b538      	push	{r3, r4, r5, lr}
   2acc6:	4605      	mov	r5, r0
   2acc8:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2acca:	d01d      	beq.n	2ad08 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2accc:	ea51 0300 	orrs.w	r3, r1, r0
   2acd0:	d103      	bne.n	2acda <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2acd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2acd6:	f7fc bd9d 	b.w	27814 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2acda:	f06f 0301 	mvn.w	r3, #1
   2acde:	1a18      	subs	r0, r3, r0
   2ace0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2ace4:	eb63 0101 	sbc.w	r1, r3, r1
   2ace8:	2900      	cmp	r1, #0
   2acea:	da0c      	bge.n	2ad06 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   2acec:	f7fc fd92 	bl	27814 <sys_clock_tick_get>
   2acf0:	2d01      	cmp	r5, #1
   2acf2:	4622      	mov	r2, r4
   2acf4:	f174 0400 	sbcs.w	r4, r4, #0
   2acf8:	462b      	mov	r3, r5
   2acfa:	bfbc      	itt	lt
   2acfc:	2301      	movlt	r3, #1
   2acfe:	2200      	movlt	r2, #0
   2ad00:	1818      	adds	r0, r3, r0
   2ad02:	eb41 0102 	adc.w	r1, r1, r2
}
   2ad06:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   2ad08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ad0c:	4601      	mov	r1, r0
   2ad0e:	e7fa      	b.n	2ad06 <sys_clock_timeout_end_calc+0x4c>

0002ad10 <k_timer_init>:
	timer->status = 0U;
   2ad10:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2ad12:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2ad16:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2ad1a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2ad1e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2ad22:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2ad24:	6343      	str	r3, [r0, #52]	; 0x34
}
   2ad26:	4770      	bx	lr

0002ad28 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2ad28:	b510      	push	{r4, lr}
   2ad2a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2ad2c:	f7ff ff7b 	bl	2ac26 <z_abort_timeout>

	if (inactive) {
   2ad30:	b9b0      	cbnz	r0, 2ad60 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2ad32:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2ad34:	b10b      	cbz	r3, 2ad3a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2ad36:	4620      	mov	r0, r4
   2ad38:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2ad3a:	f104 0018 	add.w	r0, r4, #24
   2ad3e:	f7ff ff18 	bl	2ab72 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2ad42:	b168      	cbz	r0, 2ad60 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2ad44:	f7ff fee3 	bl	2ab0e <z_ready_thread>
	__asm__ volatile(
   2ad48:	f04f 0320 	mov.w	r3, #32
   2ad4c:	f3ef 8011 	mrs	r0, BASEPRI
   2ad50:	f383 8811 	msr	BASEPRI, r3
   2ad54:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2ad58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ad5c:	f7ff be91 	b.w	2aa82 <z_reschedule_irqlock>
   2ad60:	bd10      	pop	{r4, pc}

0002ad62 <add_event>:
{
   2ad62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ad64:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2ad66:	e9d0 2300 	ldrd	r2, r3, [r0]
   2ad6a:	4290      	cmp	r0, r2
   2ad6c:	4604      	mov	r4, r0
   2ad6e:	460d      	mov	r5, r1
   2ad70:	d105      	bne.n	2ad7e <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2ad72:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2ad74:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2ad78:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2ad7a:	6065      	str	r5, [r4, #4]
}
   2ad7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2ad7e:	2b00      	cmp	r3, #0
   2ad80:	d0f7      	beq.n	2ad72 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ad82:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ad84:	b100      	cbz	r0, 2ad88 <add_event+0x26>
   2ad86:	3860      	subs	r0, #96	; 0x60
   2ad88:	b107      	cbz	r7, 2ad8c <add_event+0x2a>
   2ad8a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2ad8c:	4639      	mov	r1, r7
   2ad8e:	f7ff fe4b 	bl	2aa28 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2ad92:	2800      	cmp	r0, #0
   2ad94:	dced      	bgt.n	2ad72 <add_event+0x10>
	return list->head == list;
   2ad96:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ad98:	42b4      	cmp	r4, r6
   2ad9a:	d0ea      	beq.n	2ad72 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2ad9c:	2e00      	cmp	r6, #0
   2ad9e:	d0e8      	beq.n	2ad72 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2ada0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2ada2:	b101      	cbz	r1, 2ada6 <add_event+0x44>
   2ada4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   2ada6:	4638      	mov	r0, r7
   2ada8:	f7ff fe3e 	bl	2aa28 <z_sched_prio_cmp>
   2adac:	2800      	cmp	r0, #0
   2adae:	dd05      	ble.n	2adbc <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   2adb0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2adb2:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2adb6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2adb8:	6075      	str	r5, [r6, #4]
			return;
   2adba:	e7df      	b.n	2ad7c <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2adbc:	6863      	ldr	r3, [r4, #4]
   2adbe:	429e      	cmp	r6, r3
   2adc0:	d0d7      	beq.n	2ad72 <add_event+0x10>
   2adc2:	6836      	ldr	r6, [r6, #0]
   2adc4:	e7ea      	b.n	2ad9c <add_event+0x3a>

0002adc6 <register_events>:
{
   2adc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2adca:	2500      	movs	r5, #0
{
   2adcc:	468b      	mov	fp, r1
   2adce:	4614      	mov	r4, r2
   2add0:	461f      	mov	r7, r3
   2add2:	4682      	mov	sl, r0
	int events_registered = 0;
   2add4:	462e      	mov	r6, r5
	event->poller = NULL;
   2add6:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   2add8:	455d      	cmp	r5, fp
   2adda:	db02      	blt.n	2ade2 <register_events+0x1c>
}
   2addc:	4630      	mov	r0, r6
   2adde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ade2:	f04f 0320 	mov.w	r3, #32
   2ade6:	f3ef 8911 	mrs	r9, BASEPRI
   2adea:	f383 8811 	msr	BASEPRI, r3
   2adee:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2adf2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2adf6:	f003 031f 	and.w	r3, r3, #31
   2adfa:	3b01      	subs	r3, #1
   2adfc:	2b07      	cmp	r3, #7
   2adfe:	d80f      	bhi.n	2ae20 <register_events+0x5a>
   2ae00:	e8df f003 	tbb	[pc, r3]
   2ae04:	0a0e041e 	.word	0x0a0e041e
   2ae08:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2ae0c:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ae10:	689b      	ldr	r3, [r3, #8]
   2ae12:	b12b      	cbz	r3, 2ae20 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   2ae14:	2302      	movs	r3, #2
   2ae16:	e020      	b.n	2ae5a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   2ae18:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ae1c:	681b      	ldr	r3, [r3, #0]
   2ae1e:	bb8b      	cbnz	r3, 2ae84 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   2ae20:	bb47      	cbnz	r7, 2ae74 <register_events+0xae>
   2ae22:	7823      	ldrb	r3, [r4, #0]
   2ae24:	b333      	cbz	r3, 2ae74 <register_events+0xae>
	switch (event->type) {
   2ae26:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2ae2a:	f003 031f 	and.w	r3, r3, #31
   2ae2e:	3b01      	subs	r3, #1
   2ae30:	2b07      	cmp	r3, #7
   2ae32:	d830      	bhi.n	2ae96 <register_events+0xd0>
   2ae34:	e8df f003 	tbb	[pc, r3]
   2ae38:	282f2833 	.word	0x282f2833
   2ae3c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   2ae40:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ae44:	689b      	ldr	r3, [r3, #8]
   2ae46:	2b00      	cmp	r3, #0
   2ae48:	d0ea      	beq.n	2ae20 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2ae4a:	2301      	movs	r3, #1
   2ae4c:	e005      	b.n	2ae5a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2ae4e:	f8da 3010 	ldr.w	r3, [sl, #16]
   2ae52:	6a1b      	ldr	r3, [r3, #32]
   2ae54:	2b00      	cmp	r3, #0
   2ae56:	d0e3      	beq.n	2ae20 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   2ae58:	2310      	movs	r3, #16
	event->state |= state;
   2ae5a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2ae5e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   2ae62:	f3c2 3145 	ubfx	r1, r2, #13, #6
   2ae66:	430b      	orrs	r3, r1
   2ae68:	f363 3252 	bfi	r2, r3, #13, #6
   2ae6c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   2ae70:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2ae74:	f389 8811 	msr	BASEPRI, r9
   2ae78:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2ae7c:	3501      	adds	r5, #1
   2ae7e:	f10a 0a14 	add.w	sl, sl, #20
   2ae82:	e7a9      	b.n	2add8 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2ae84:	2304      	movs	r3, #4
   2ae86:	e7e8      	b.n	2ae5a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   2ae88:	f8da 0010 	ldr.w	r0, [sl, #16]
   2ae8c:	4622      	mov	r2, r4
   2ae8e:	4651      	mov	r1, sl
   2ae90:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   2ae92:	f7ff ff66 	bl	2ad62 <add_event>
	event->poller = poller;
   2ae96:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2ae9a:	3601      	adds	r6, #1
   2ae9c:	e7ea      	b.n	2ae74 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2ae9e:	f8da 0010 	ldr.w	r0, [sl, #16]
   2aea2:	4622      	mov	r2, r4
   2aea4:	4651      	mov	r1, sl
   2aea6:	e7f4      	b.n	2ae92 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   2aea8:	f8da 0010 	ldr.w	r0, [sl, #16]
   2aeac:	4622      	mov	r2, r4
   2aeae:	4651      	mov	r1, sl
   2aeb0:	3024      	adds	r0, #36	; 0x24
   2aeb2:	e7ee      	b.n	2ae92 <register_events+0xcc>

0002aeb4 <signal_poll_event>:
{
   2aeb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   2aeb8:	6884      	ldr	r4, [r0, #8]
{
   2aeba:	4605      	mov	r5, r0
   2aebc:	460e      	mov	r6, r1
	if (poller != NULL) {
   2aebe:	b144      	cbz	r4, 2aed2 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   2aec0:	7863      	ldrb	r3, [r4, #1]
   2aec2:	2b01      	cmp	r3, #1
   2aec4:	d136      	bne.n	2af34 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   2aec6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2aeca:	f013 0302 	ands.w	r3, r3, #2
   2aece:	d10a      	bne.n	2aee6 <signal_poll_event+0x32>
		poller->is_polling = false;
   2aed0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2aed2:	68eb      	ldr	r3, [r5, #12]
   2aed4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   2aed8:	430e      	orrs	r6, r1
	event->poller = NULL;
   2aeda:	2000      	movs	r0, #0
	event->state |= state;
   2aedc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   2aee0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2aee2:	60eb      	str	r3, [r5, #12]
	return retcode;
   2aee4:	e00b      	b.n	2aefe <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   2aee6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   2aeea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2aeee:	bf08      	it	eq
   2aef0:	f112 0f02 	cmneq.w	r2, #2
   2aef4:	d105      	bne.n	2af02 <signal_poll_event+0x4e>
		poller->is_polling = false;
   2aef6:	2300      	movs	r3, #0
   2aef8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2aefa:	f06f 000a 	mvn.w	r0, #10
}
   2aefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2af02:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   2af06:	4640      	mov	r0, r8
   2af08:	f7ff fda7 	bl	2aa5a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   2af0c:	2e08      	cmp	r6, #8
   2af0e:	bf0c      	ite	eq
   2af10:	f06f 0303 	mvneq.w	r3, #3
   2af14:	2300      	movne	r3, #0
   2af16:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2af18:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   2af1c:	06db      	lsls	r3, r3, #27
   2af1e:	d102      	bne.n	2af26 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2af20:	f854 7c48 	ldr.w	r7, [r4, #-72]
   2af24:	b10f      	cbz	r7, 2af2a <signal_poll_event+0x76>
		poller->is_polling = false;
   2af26:	2300      	movs	r3, #0
   2af28:	e7d2      	b.n	2aed0 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   2af2a:	4640      	mov	r0, r8
   2af2c:	f7ff fdef 	bl	2ab0e <z_ready_thread>
		poller->is_polling = false;
   2af30:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2af32:	e7ce      	b.n	2aed2 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   2af34:	2b02      	cmp	r3, #2
   2af36:	d1f6      	bne.n	2af26 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   2af38:	7823      	ldrb	r3, [r4, #0]
   2af3a:	2b00      	cmp	r3, #0
   2af3c:	d0c9      	beq.n	2aed2 <signal_poll_event+0x1e>
   2af3e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2af42:	2f00      	cmp	r7, #0
   2af44:	d0f4      	beq.n	2af30 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   2af46:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   2af4a:	f1a4 0914 	sub.w	r9, r4, #20
   2af4e:	f104 0014 	add.w	r0, r4, #20
   2af52:	f7ff fe68 	bl	2ac26 <z_abort_timeout>
		twork->poll_result = 0;
   2af56:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   2af5a:	4649      	mov	r1, r9
   2af5c:	4638      	mov	r0, r7
   2af5e:	f7ff fce4 	bl	2a92a <k_work_submit_to_queue>
		poller->is_polling = false;
   2af62:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   2af66:	e7b4      	b.n	2aed2 <signal_poll_event+0x1e>

0002af68 <clear_event_registrations>:
	while (num_events--) {
   2af68:	2314      	movs	r3, #20
{
   2af6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2af6c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   2af70:	2400      	movs	r4, #0
   2af72:	2601      	movs	r6, #1
	while (num_events--) {
   2af74:	b901      	cbnz	r1, 2af78 <clear_event_registrations+0x10>
}
   2af76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   2af78:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   2af7c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   2af80:	f003 031f 	and.w	r3, r3, #31
   2af84:	2b08      	cmp	r3, #8
   2af86:	f1a0 0714 	sub.w	r7, r0, #20
   2af8a:	d80d      	bhi.n	2afa8 <clear_event_registrations+0x40>
   2af8c:	fa06 f303 	lsl.w	r3, r6, r3
   2af90:	f413 7f8b 	tst.w	r3, #278	; 0x116
   2af94:	d008      	beq.n	2afa8 <clear_event_registrations+0x40>
	return node->next != NULL;
   2af96:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2af9a:	b12b      	cbz	r3, 2afa8 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   2af9c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   2afa0:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   2afa2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   2afa4:	e940 4405 	strd	r4, r4, [r0, #-20]
   2afa8:	f382 8811 	msr	BASEPRI, r2
   2afac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2afb0:	f04f 0320 	mov.w	r3, #32
   2afb4:	f3ef 8211 	mrs	r2, BASEPRI
   2afb8:	f383 8811 	msr	BASEPRI, r3
   2afbc:	f3bf 8f6f 	isb	sy
   2afc0:	3901      	subs	r1, #1
   2afc2:	4638      	mov	r0, r7
   2afc4:	e7d6      	b.n	2af74 <clear_event_registrations+0xc>

0002afc6 <k_poll_event_init>:
{
   2afc6:	b510      	push	{r4, lr}
	event->type = type;
   2afc8:	04d2      	lsls	r2, r2, #19
   2afca:	0209      	lsls	r1, r1, #8
   2afcc:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   2afd0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   2afd4:	430a      	orrs	r2, r1
   2afd6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2afd8:	2400      	movs	r4, #0
	event->type = type;
   2afda:	430a      	orrs	r2, r1
	event->obj = obj;
   2afdc:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2afe0:	6084      	str	r4, [r0, #8]
}
   2afe2:	bd10      	pop	{r4, pc}

0002afe4 <z_handle_obj_poll_events>:
{
   2afe4:	4603      	mov	r3, r0
	return list->head == list;
   2afe6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2afe8:	4283      	cmp	r3, r0
   2afea:	d008      	beq.n	2affe <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2afec:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2aff0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2aff2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2aff4:	2300      	movs	r3, #0
	node->prev = NULL;
   2aff6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2affa:	f7ff bf5b 	b.w	2aeb4 <signal_poll_event>
}
   2affe:	4770      	bx	lr

0002b000 <k_free>:
	if (ptr != NULL) {
   2b000:	b120      	cbz	r0, 2b00c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2b002:	1f01      	subs	r1, r0, #4
   2b004:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2b008:	f7ff bac4 	b.w	2a594 <k_heap_free>
}
   2b00c:	4770      	bx	lr

0002b00e <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2b00e:	4770      	bx	lr

0002b010 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2b010:	4770      	bx	lr
