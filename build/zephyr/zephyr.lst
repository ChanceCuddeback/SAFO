
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 43 00 20 d9 41 00 00 6d d9 01 00 ad 41 00 00     .C. .A..m....A..
  10:	ad 41 00 00 ad 41 00 00 ad 41 00 00 00 00 00 00     .A...A...A......
	...
  2c:	29 3c 00 00 ad 41 00 00 00 00 00 00 d5 3b 00 00     )<...A.......;..
  3c:	35 c7 01 00                                         5...

00000040 <_irq_vector_table>:
  40:	d9 3c 00 00 d5 61 01 00 d9 3c 00 00 d9 3c 00 00     .<...a...<...<..
  50:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  60:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  70:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  80:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  90:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  a0:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  b0:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  c0:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  d0:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  e0:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..
  f0:	d9 3c 00 00 d9 3c 00 00 d9 3c 00 00 d9 3c 00 00     .<...<...<...<..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     110:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     114:	f000 b974 	b.w	400 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	4688      	mov	r8, r1
     13c:	2b00      	cmp	r3, #0
     13e:	d14d      	bne.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     140:	428a      	cmp	r2, r1
     142:	4694      	mov	ip, r2
     144:	d968      	bls.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     146:	fab2 f282 	clz	r2, r2
     14a:	b152      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14c:	fa01 f302 	lsl.w	r3, r1, r2
     150:	f1c2 0120 	rsb	r1, r2, #32
     154:	fa20 f101 	lsr.w	r1, r0, r1
     158:	fa0c fc02 	lsl.w	ip, ip, r2
     15c:	ea41 0803 	orr.w	r8, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 451c 	mov.w	r5, ip, lsr #16
     166:	0c21      	lsrs	r1, r4, #16
     168:	fbb8 fef5 	udiv	lr, r8, r5
     16c:	fa1f f78c 	uxth.w	r7, ip
     170:	fb05 831e 	mls	r3, r5, lr, r8
     174:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     178:	fb0e f107 	mul.w	r1, lr, r7
     17c:	4299      	cmp	r1, r3
     17e:	d90b      	bls.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     180:	eb1c 0303 	adds.w	r3, ip, r3
     184:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
     188:	f080 811e 	bcs.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x87>
     18c:	4299      	cmp	r1, r3
     18e:	f240 811b 	bls.w	3c8 <CONFIG_BT_DEVICE_APPEARANCE+0x87>
     192:	f1ae 0e02 	sub.w	lr, lr, #2
     196:	4463      	add	r3, ip
     198:	1a5b      	subs	r3, r3, r1
     19a:	b2a4      	uxth	r4, r4
     19c:	fbb3 f0f5 	udiv	r0, r3, r5
     1a0:	fb05 3310 	mls	r3, r5, r0, r3
     1a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a8:	fb00 f707 	mul.w	r7, r0, r7
     1ac:	42a7      	cmp	r7, r4
     1ae:	d90a      	bls.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     1b0:	eb1c 0404 	adds.w	r4, ip, r4
     1b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     1b8:	f080 8108 	bcs.w	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     1bc:	42a7      	cmp	r7, r4
     1be:	f240 8105 	bls.w	3cc <CONFIG_BT_DEVICE_APPEARANCE+0x8b>
     1c2:	4464      	add	r4, ip
     1c4:	3802      	subs	r0, #2
     1c6:	1be4      	subs	r4, r4, r7
     1c8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     1cc:	2100      	movs	r1, #0
     1ce:	b11e      	cbz	r6, 1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     1d0:	40d4      	lsrs	r4, r2
     1d2:	2300      	movs	r3, #0
     1d4:	e9c6 4300 	strd	r4, r3, [r6]
     1d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1dc:	428b      	cmp	r3, r1
     1de:	d908      	bls.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e0:	2e00      	cmp	r6, #0
     1e2:	f000 80ee 	beq.w	3c2 <CONFIG_BT_DEVICE_APPEARANCE+0x81>
     1e6:	2100      	movs	r1, #0
     1e8:	e9c6 0500 	strd	r0, r5, [r6]
     1ec:	4608      	mov	r0, r1
     1ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1f2:	fab3 f183 	clz	r1, r3
     1f6:	2900      	cmp	r1, #0
     1f8:	d14a      	bne.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     1fa:	42ab      	cmp	r3, r5
     1fc:	d302      	bcc.n	204 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x44>
     1fe:	4282      	cmp	r2, r0
     200:	f200 80f9 	bhi.w	3f6 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xe>
     204:	1a84      	subs	r4, r0, r2
     206:	eb65 0303 	sbc.w	r3, r5, r3
     20a:	2001      	movs	r0, #1
     20c:	4698      	mov	r8, r3
     20e:	2e00      	cmp	r6, #0
     210:	d0e2      	beq.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     212:	e9c6 4800 	strd	r4, r8, [r6]
     216:	e7df      	b.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     218:	b902      	cbnz	r2, 21c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x5c>
     21a:	deff      	udf	#255	; 0xff
     21c:	fab2 f282 	clz	r2, r2
     220:	2a00      	cmp	r2, #0
     222:	f040 8091 	bne.w	348 <CONFIG_BT_DEVICE_APPEARANCE+0x7>
     226:	eba1 050c 	sub.w	r5, r1, ip
     22a:	ea4f 471c 	mov.w	r7, ip, lsr #16
     22e:	fa1f fe8c 	uxth.w	lr, ip
     232:	2101      	movs	r1, #1
     234:	fbb5 f3f7 	udiv	r3, r5, r7
     238:	fb07 5013 	mls	r0, r7, r3, r5
     23c:	0c25      	lsrs	r5, r4, #16
     23e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     242:	fb0e f003 	mul.w	r0, lr, r3
     246:	42a8      	cmp	r0, r5
     248:	d908      	bls.n	25c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9c>
     24a:	eb1c 0505 	adds.w	r5, ip, r5
     24e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
     252:	d202      	bcs.n	25a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9a>
     254:	42a8      	cmp	r0, r5
     256:	f200 80cb 	bhi.w	3f0 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x8>
     25a:	4643      	mov	r3, r8
     25c:	1a2d      	subs	r5, r5, r0
     25e:	b2a4      	uxth	r4, r4
     260:	fbb5 f0f7 	udiv	r0, r5, r7
     264:	fb07 5510 	mls	r5, r7, r0, r5
     268:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     26c:	fb0e fe00 	mul.w	lr, lr, r0
     270:	45a6      	cmp	lr, r4
     272:	d908      	bls.n	286 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>
     274:	eb1c 0404 	adds.w	r4, ip, r4
     278:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     27c:	d202      	bcs.n	284 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>
     27e:	45a6      	cmp	lr, r4
     280:	f200 80bb 	bhi.w	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     284:	4628      	mov	r0, r5
     286:	eba4 040e 	sub.w	r4, r4, lr
     28a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
     28e:	e79e      	b.n	1ce <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xe>
     290:	f1c1 0720 	rsb	r7, r1, #32
     294:	408b      	lsls	r3, r1
     296:	fa22 fc07 	lsr.w	ip, r2, r7
     29a:	ea4c 0c03 	orr.w	ip, ip, r3
     29e:	fa20 f407 	lsr.w	r4, r0, r7
     2a2:	fa05 f301 	lsl.w	r3, r5, r1
     2a6:	431c      	orrs	r4, r3
     2a8:	40fd      	lsrs	r5, r7
     2aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
     2ae:	fa00 f301 	lsl.w	r3, r0, r1
     2b2:	fbb5 f8f9 	udiv	r8, r5, r9
     2b6:	0c20      	lsrs	r0, r4, #16
     2b8:	fa1f fe8c 	uxth.w	lr, ip
     2bc:	fb09 5518 	mls	r5, r9, r8, r5
     2c0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     2c4:	fb08 f00e 	mul.w	r0, r8, lr
     2c8:	42a8      	cmp	r0, r5
     2ca:	fa02 f201 	lsl.w	r2, r2, r1
     2ce:	d90b      	bls.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     2d0:	eb1c 0505 	adds.w	r5, ip, r5
     2d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
     2d8:	f080 8088 	bcs.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2dc:	42a8      	cmp	r0, r5
     2de:	f240 8085 	bls.w	3ec <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x4>
     2e2:	f1a8 0802 	sub.w	r8, r8, #2
     2e6:	4465      	add	r5, ip
     2e8:	1a2d      	subs	r5, r5, r0
     2ea:	b2a4      	uxth	r4, r4
     2ec:	fbb5 f0f9 	udiv	r0, r5, r9
     2f0:	fb09 5510 	mls	r5, r9, r0, r5
     2f4:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     2f8:	fb00 fe0e 	mul.w	lr, r0, lr
     2fc:	45ae      	cmp	lr, r5
     2fe:	d908      	bls.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     300:	eb1c 0505 	adds.w	r5, ip, r5
     304:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
     308:	d26c      	bcs.n	3e4 <CONFIG_BT_DEVICE_APPEARANCE+0xa3>
     30a:	45ae      	cmp	lr, r5
     30c:	d96a      	bls.n	3e4 <CONFIG_BT_DEVICE_APPEARANCE+0xa3>
     30e:	3802      	subs	r0, #2
     310:	4465      	add	r5, ip
     312:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     316:	fba0 9402 	umull	r9, r4, r0, r2
     31a:	eba5 050e 	sub.w	r5, r5, lr
     31e:	42a5      	cmp	r5, r4
     320:	46c8      	mov	r8, r9
     322:	46a6      	mov	lr, r4
     324:	d356      	bcc.n	3d4 <CONFIG_BT_DEVICE_APPEARANCE+0x93>
     326:	d053      	beq.n	3d0 <CONFIG_BT_DEVICE_APPEARANCE+0x8f>
     328:	b15e      	cbz	r6, 342 <CONFIG_BT_DEVICE_APPEARANCE+0x1>
     32a:	ebb3 0208 	subs.w	r2, r3, r8
     32e:	eb65 050e 	sbc.w	r5, r5, lr
     332:	fa05 f707 	lsl.w	r7, r5, r7
     336:	fa22 f301 	lsr.w	r3, r2, r1
     33a:	40cd      	lsrs	r5, r1
     33c:	431f      	orrs	r7, r3
     33e:	e9c6 7500 	strd	r7, r5, [r6]
     342:	2100      	movs	r1, #0
     344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     348:	f1c2 0320 	rsb	r3, r2, #32
     34c:	fa20 f103 	lsr.w	r1, r0, r3
     350:	fa0c fc02 	lsl.w	ip, ip, r2
     354:	fa25 f303 	lsr.w	r3, r5, r3
     358:	4095      	lsls	r5, r2
     35a:	430d      	orrs	r5, r1
     35c:	ea4f 471c 	mov.w	r7, ip, lsr #16
     360:	fa1f fe8c 	uxth.w	lr, ip
     364:	fbb3 f1f7 	udiv	r1, r3, r7
     368:	fb07 3011 	mls	r0, r7, r1, r3
     36c:	0c2b      	lsrs	r3, r5, #16
     36e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     372:	fb01 f00e 	mul.w	r0, r1, lr
     376:	4298      	cmp	r0, r3
     378:	fa04 f402 	lsl.w	r4, r4, r2
     37c:	d908      	bls.n	390 <CONFIG_BT_DEVICE_APPEARANCE+0x4f>
     37e:	eb1c 0303 	adds.w	r3, ip, r3
     382:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
     386:	d22f      	bcs.n	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     388:	4298      	cmp	r0, r3
     38a:	d92d      	bls.n	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     38c:	3902      	subs	r1, #2
     38e:	4463      	add	r3, ip
     390:	1a1b      	subs	r3, r3, r0
     392:	b2ad      	uxth	r5, r5
     394:	fbb3 f0f7 	udiv	r0, r3, r7
     398:	fb07 3310 	mls	r3, r7, r0, r3
     39c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     3a0:	fb00 f30e 	mul.w	r3, r0, lr
     3a4:	42ab      	cmp	r3, r5
     3a6:	d908      	bls.n	3ba <CONFIG_BT_DEVICE_APPEARANCE+0x79>
     3a8:	eb1c 0505 	adds.w	r5, ip, r5
     3ac:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     3b0:	d216      	bcs.n	3e0 <CONFIG_BT_DEVICE_APPEARANCE+0x9f>
     3b2:	42ab      	cmp	r3, r5
     3b4:	d914      	bls.n	3e0 <CONFIG_BT_DEVICE_APPEARANCE+0x9f>
     3b6:	3802      	subs	r0, #2
     3b8:	4465      	add	r5, ip
     3ba:	1aed      	subs	r5, r5, r3
     3bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     3c0:	e738      	b.n	234 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x74>
     3c2:	4631      	mov	r1, r6
     3c4:	4630      	mov	r0, r6
     3c6:	e707      	b.n	1d8 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x18>
     3c8:	4686      	mov	lr, r0
     3ca:	e6e5      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     3cc:	4618      	mov	r0, r3
     3ce:	e6fa      	b.n	1c6 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x6>
     3d0:	454b      	cmp	r3, r9
     3d2:	d2a9      	bcs.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     3d4:	ebb9 0802 	subs.w	r8, r9, r2
     3d8:	eb64 0e0c 	sbc.w	lr, r4, ip
     3dc:	3801      	subs	r0, #1
     3de:	e7a3      	b.n	328 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x28>
     3e0:	4640      	mov	r0, r8
     3e2:	e7ea      	b.n	3ba <CONFIG_BT_DEVICE_APPEARANCE+0x79>
     3e4:	4620      	mov	r0, r4
     3e6:	e794      	b.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     3e8:	4641      	mov	r1, r8
     3ea:	e7d1      	b.n	390 <CONFIG_BT_DEVICE_APPEARANCE+0x4f>
     3ec:	46d0      	mov	r8, sl
     3ee:	e77b      	b.n	2e8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x68>
     3f0:	3b02      	subs	r3, #2
     3f2:	4465      	add	r5, ip
     3f4:	e732      	b.n	25c <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x9c>
     3f6:	4608      	mov	r0, r1
     3f8:	e709      	b.n	20e <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x4e>
     3fa:	4464      	add	r4, ip
     3fc:	3802      	subs	r0, #2
     3fe:	e742      	b.n	286 <CONFIG_BT_HCI_TX_STACK_SIZE+0x6>

00000400 <__aeabi_idiv0>:
     400:	4770      	bx	lr
     402:	bf00      	nop
     404:	0000      	movs	r0, r0
	...

00000408 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     408:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     40a:	4d43      	ldr	r5, [pc, #268]	; (518 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa4>)
     40c:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     410:	6899      	ldr	r1, [r3, #8]
     412:	f011 0101 	ands.w	r1, r1, #1
{
     416:	b086      	sub	sp, #24
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     418:	d121      	bne.n	45e <bt_init+0x56>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     41a:	aa01      	add	r2, sp, #4
     41c:	f640 4003 	movw	r0, #3075	; 0xc03
     420:	f005 f85e 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
     424:	4604      	mov	r4, r0
     426:	2800      	cmp	r0, #0
     428:	d173      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	uint8_t status = buf->data[0];
     42a:	9b01      	ldr	r3, [sp, #4]
     42c:	689b      	ldr	r3, [r3, #8]
	if (status) {
     42e:	781b      	ldrb	r3, [r3, #0]
     430:	b993      	cbnz	r3, 458 <bt_init+0x50>
 *
 * @return Value of @a target.
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     432:	f3bf 8f5b 	dmb	ish
     436:	462b      	mov	r3, r5
     438:	f853 2f98 	ldr.w	r2, [r3, #152]!
     43c:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     440:	f002 0205 	and.w	r2, r2, #5
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     444:	f3bf 8f5b 	dmb	ish
     448:	e853 1f00 	ldrex	r1, [r3]
     44c:	e843 2000 	strex	r0, r2, [r3]
     450:	2800      	cmp	r0, #0
     452:	d1f9      	bne.n	448 <bt_init+0x40>
     454:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     458:	9801      	ldr	r0, [sp, #4]
     45a:	f018 fd4d 	bl	18ef8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     45e:	aa01      	add	r2, sp, #4
     460:	2100      	movs	r1, #0
     462:	f241 0003 	movw	r0, #4099	; 0x1003
     466:	f005 f83b 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     46a:	4604      	mov	r4, r0
     46c:	2800      	cmp	r0, #0
     46e:	d150      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     470:	9b01      	ldr	r3, [sp, #4]
     472:	482a      	ldr	r0, [pc, #168]	; (51c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xa8>)
     474:	6899      	ldr	r1, [r3, #8]
     476:	2208      	movs	r2, #8
     478:	3101      	adds	r1, #1
     47a:	f01d fac7 	bl	1da0c <memcpy>
	net_buf_unref(rsp);
     47e:	9801      	ldr	r0, [sp, #4]
     480:	f018 fd3a 	bl	18ef8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     484:	4621      	mov	r1, r4
     486:	aa01      	add	r2, sp, #4
     488:	f241 0001 	movw	r0, #4097	; 0x1001
     48c:	f005 f828 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     490:	4604      	mov	r4, r0
     492:	2800      	cmp	r0, #0
     494:	d13d      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	read_local_ver_complete(rsp);
     496:	9801      	ldr	r0, [sp, #4]
     498:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     49a:	785a      	ldrb	r2, [r3, #1]
     49c:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     4a0:	78d9      	ldrb	r1, [r3, #3]
     4a2:	789a      	ldrb	r2, [r3, #2]
     4a4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4a8:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
     4aa:	791a      	ldrb	r2, [r3, #4]
     4ac:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     4b0:	7a19      	ldrb	r1, [r3, #8]
     4b2:	79da      	ldrb	r2, [r3, #7]
     4b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     4b8:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     4ba:	795a      	ldrb	r2, [r3, #5]
     4bc:	799b      	ldrb	r3, [r3, #6]
     4be:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     4c2:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
     4c4:	f018 fd18 	bl	18ef8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     4c8:	4621      	mov	r1, r4
     4ca:	aa01      	add	r2, sp, #4
     4cc:	f241 0002 	movw	r0, #4098	; 0x1002
     4d0:	f005 f806 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     4d4:	4604      	mov	r4, r0
     4d6:	b9e0      	cbnz	r0, 512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	memcpy(bt_dev.supported_commands, rp->commands,
     4d8:	9b01      	ldr	r3, [sp, #4]
     4da:	4811      	ldr	r0, [pc, #68]	; (520 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     4dc:	6899      	ldr	r1, [r3, #8]
     4de:	2240      	movs	r2, #64	; 0x40
     4e0:	3101      	adds	r1, #1
     4e2:	f01d fa93 	bl	1da0c <memcpy>
		bt_hci_ecc_supported_commands(bt_dev.supported_commands);
     4e6:	480e      	ldr	r0, [pc, #56]	; (520 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xac>)
     4e8:	f01d fb3a 	bl	1db60 <bt_hci_ecc_supported_commands>
	net_buf_unref(rsp);
     4ec:	9801      	ldr	r0, [sp, #4]
     4ee:	f018 fd03 	bl	18ef8 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     4f2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     4f6:	065b      	lsls	r3, r3, #25
     4f8:	d41a      	bmi.n	530 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xbc>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
     4fa:	4b0a      	ldr	r3, [pc, #40]	; (524 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb0>)
     4fc:	490a      	ldr	r1, [pc, #40]	; (528 <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb4>)
		BT_ERR("Non-LE capable controller detected!");
     4fe:	480b      	ldr	r0, [pc, #44]	; (52c <CONFIG_BT_HCI_ECC_STACK_SIZE+0xb8>)
     500:	1ac9      	subs	r1, r1, r3
     502:	08c9      	lsrs	r1, r1, #3
     504:	0189      	lsls	r1, r1, #6
     506:	f041 0101 	orr.w	r1, r1, #1
     50a:	f01b fd72 	bl	1bff2 <log_0>
		return -ENODEV;
     50e:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     512:	4620      	mov	r0, r4
     514:	b006      	add	sp, #24
     516:	bd70      	pop	{r4, r5, r6, pc}
     518:	20000000 	.word	0x20000000
     51c:	2000003c 	.word	0x2000003c
     520:	20000044 	.word	0x20000044
     524:	00020e00 	.word	0x00020e00
     528:	00020ee0 	.word	0x00020ee0
     52c:	00023742 	.word	0x00023742
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     530:	4621      	mov	r1, r4
     532:	aa01      	add	r2, sp, #4
     534:	f242 0003 	movw	r0, #8195	; 0x2003
     538:	f004 ffd2 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     53c:	4604      	mov	r4, r0
     53e:	2800      	cmp	r0, #0
     540:	d1e7      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     542:	9b01      	ldr	r3, [sp, #4]
     544:	48be      	ldr	r0, [pc, #760]	; (840 <CONFIG_ISR_STACK_SIZE+0x40>)
     546:	6899      	ldr	r1, [r3, #8]
     548:	2208      	movs	r2, #8
     54a:	3101      	adds	r1, #1
     54c:	f01d fa5e 	bl	1da0c <memcpy>
	net_buf_unref(rsp);
     550:	9801      	ldr	r0, [sp, #4]
     552:	f018 fcd1 	bl	18ef8 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     556:	4621      	mov	r1, r4
     558:	aa01      	add	r2, sp, #4
     55a:	f242 0002 	movw	r0, #8194	; 0x2002
     55e:	f004 ffbf 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
     562:	4604      	mov	r4, r0
     564:	2800      	cmp	r0, #0
     566:	d1d4      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
		le_read_buffer_size_complete(rsp);
     568:	9b01      	ldr	r3, [sp, #4]
     56a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     56c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     570:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     574:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     576:	b121      	cbz	r1, 582 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x10e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     578:	78da      	ldrb	r2, [r3, #3]
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     57a:	48b2      	ldr	r0, [pc, #712]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     57c:	4611      	mov	r1, r2
     57e:	f01f fecb 	bl	20318 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     582:	9801      	ldr	r0, [sp, #4]
     584:	f018 fcb8 	bl	18ef8 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     588:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
     58c:	f016 0620 	ands.w	r6, r6, #32
     590:	f000 80ce 	beq.w	730 <CONFIG_BT_COMPANY_ID+0x13f>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     594:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
     598:	071e      	lsls	r6, r3, #28
     59a:	d512      	bpl.n	5c2 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x14e>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     59c:	aa01      	add	r2, sp, #4
     59e:	2100      	movs	r1, #0
     5a0:	f242 001c 	movw	r0, #8220	; 0x201c
     5a4:	f004 ff9c 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
     5a8:	4604      	mov	r4, r0
     5aa:	2800      	cmp	r0, #0
     5ac:	d1b1      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
		le_read_supp_states_complete(rsp);
     5ae:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     5b0:	6883      	ldr	r3, [r0, #8]
     5b2:	f8d3 2001 	ldr.w	r2, [r3, #1]
     5b6:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     5ba:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     5be:	f018 fc9b 	bl	18ef8 <net_buf_unref>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     5c2:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     5c6:	065c      	lsls	r4, r3, #25
     5c8:	d50f      	bpl.n	5ea <CONFIG_BT_CTLR_XTAL_THRESHOLD+0xe>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     5ca:	aa01      	add	r2, sp, #4
     5cc:	2100      	movs	r1, #0
     5ce:	f242 002a 	movw	r0, #8234	; 0x202a
     5d2:	f004 ff85 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
     5d6:	4604      	mov	r4, r0
     5d8:	2800      	cmp	r0, #0
     5da:	d19a      	bne.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
		le_read_resolving_list_size_complete(rsp);
     5dc:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     5de:	6883      	ldr	r3, [r0, #8]
     5e0:	785b      	ldrb	r3, [r3, #1]
     5e2:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
     5e6:	f018 fc87 	bl	18ef8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     5ea:	2108      	movs	r1, #8
     5ec:	f242 0001 	movw	r0, #8193	; 0x2001
     5f0:	f004 fdb4 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
     5f4:	4604      	mov	r4, r0
     5f6:	2800      	cmp	r0, #0
     5f8:	f000 80a1 	beq.w	73e <CONFIG_BT_COMPANY_ID+0x14d>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
     5fc:	2108      	movs	r1, #8
     5fe:	4408      	add	r0, r1
     600:	f01f fb63 	bl	1fcca <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     604:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     608:	f011 0f40 	tst.w	r1, #64	; 0x40
     60c:	4602      	mov	r2, r0
     60e:	f240 2302 	movw	r3, #514	; 0x202
     612:	bf08      	it	eq
     614:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     616:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     618:	bf4c      	ite	mi
     61a:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     61e:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     622:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     624:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     628:	bf48      	it	mi
     62a:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     62e:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     632:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     636:	bf18      	it	ne
     638:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     63c:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     640:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     642:	bf48      	it	mi
     644:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     648:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     64a:	bf08      	it	eq
     64c:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     650:	2100      	movs	r1, #0
     652:	f01d fb1a 	bl	1dc8a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     656:	4621      	mov	r1, r4
     658:	2200      	movs	r2, #0
     65a:	f242 0001 	movw	r0, #8193	; 0x2001
     65e:	f004 ff3f 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     662:	4604      	mov	r4, r0
     664:	2800      	cmp	r0, #0
     666:	f47f af54 	bne.w	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     66a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
     66e:	0698      	lsls	r0, r3, #26
     670:	d41e      	bmi.n	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
	if (bt_dev.le.acl_mtu) {
     672:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
     676:	b9d9      	cbnz	r1, 6b0 <CONFIG_BT_COMPANY_ID+0xbf>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     678:	aa01      	add	r2, sp, #4
     67a:	f241 0005 	movw	r0, #4101	; 0x1005
     67e:	f004 ff2f 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     682:	4604      	mov	r4, r0
     684:	2800      	cmp	r0, #0
     686:	f47f af44 	bne.w	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	if (bt_dev.le.acl_mtu) {
     68a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
     68e:	b963      	cbnz	r3, 6aa <CONFIG_BT_COMPANY_ID+0xb9>
     690:	9b01      	ldr	r3, [sp, #4]
     692:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     694:	785a      	ldrb	r2, [r3, #1]
     696:	7899      	ldrb	r1, [r3, #2]
     698:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     69c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     6a0:	889a      	ldrh	r2, [r3, #4]
     6a2:	4868      	ldr	r0, [pc, #416]	; (844 <CONFIG_ISR_STACK_SIZE+0x44>)
     6a4:	4611      	mov	r1, r2
     6a6:	f01f fe37 	bl	20318 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     6aa:	9801      	ldr	r0, [sp, #4]
     6ac:	f018 fc24 	bl	18ef8 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     6b0:	2108      	movs	r1, #8
     6b2:	f640 4001 	movw	r0, #3073	; 0xc01
     6b6:	f004 fd51 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
     6ba:	4604      	mov	r4, r0
     6bc:	2800      	cmp	r0, #0
     6be:	d03e      	beq.n	73e <CONFIG_BT_COMPANY_ID+0x14d>
     6c0:	2108      	movs	r1, #8
     6c2:	4408      	add	r0, r1
     6c4:	f01f fb01 	bl	1fcca <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     6c8:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     6cc:	07d9      	lsls	r1, r3, #31
     6ce:	4602      	mov	r2, r0
     6d0:	d54a      	bpl.n	768 <CONFIG_BT_COMPANY_ID+0x177>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     6d2:	a159      	add	r1, pc, #356	; (adr r1, 838 <CONFIG_ISR_STACK_SIZE+0x38>)
     6d4:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     6d8:	f01d fad7 	bl	1dc8a <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     6dc:	4621      	mov	r1, r4
     6de:	2200      	movs	r2, #0
     6e0:	f640 4001 	movw	r0, #3073	; 0xc01
     6e4:	f004 fefc 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     6e8:	4604      	mov	r4, r0
     6ea:	2800      	cmp	r0, #0
     6ec:	f47f af11 	bne.w	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     6f0:	4601      	mov	r1, r0
     6f2:	466a      	mov	r2, sp
     6f4:	f64f 4001 	movw	r0, #64513	; 0xfc01
     6f8:	f004 fef2 	bl	54e0 <bt_hci_cmd_send_sync>
     6fc:	4c52      	ldr	r4, [pc, #328]	; (848 <CONFIG_ISR_STACK_SIZE+0x48>)
     6fe:	4b53      	ldr	r3, [pc, #332]	; (84c <CONFIG_ISR_STACK_SIZE+0x4c>)
     700:	1ae4      	subs	r4, r4, r3
     702:	08e4      	lsrs	r4, r4, #3
     704:	01a4      	lsls	r4, r4, #6
	if (err) {
     706:	b398      	cbz	r0, 770 <CONFIG_BT_COMPANY_ID+0x17f>
		BT_WARN("Vendor HCI extensions not available");
     708:	4851      	ldr	r0, [pc, #324]	; (850 <CONFIG_ISR_STACK_SIZE+0x50>)
     70a:	f044 0102 	orr.w	r1, r4, #2
			BT_WARN("Failed to read supported vendor features");
     70e:	f01b fc70 	bl	1bff2 <log_0>
	err = bt_id_init();
     712:	f005 ff43 	bl	659c <bt_id_init>
	if (err) {
     716:	4604      	mov	r4, r0
     718:	2800      	cmp	r0, #0
     71a:	f47f aefa 	bne.w	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
		err = bt_conn_init();
     71e:	f007 f8d3 	bl	78c8 <bt_conn_init>
		if (err) {
     722:	4604      	mov	r4, r0
     724:	2800      	cmp	r0, #0
     726:	f47f aef4 	bne.w	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
	bt_finalize_init();
     72a:	f005 fa81 	bl	5c30 <bt_finalize_init>
	return 0;
     72e:	e6f0      	b.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
     730:	2102      	movs	r1, #2
     732:	f640 406d 	movw	r0, #3181	; 0xc6d
     736:	f004 fd11 	bl	515c <bt_hci_cmd_create>
		if (!buf) {
     73a:	4604      	mov	r4, r0
     73c:	b910      	cbnz	r0, 744 <CONFIG_BT_COMPANY_ID+0x153>
		return -ENOBUFS;
     73e:	f06f 0468 	mvn.w	r4, #104	; 0x68
     742:	e6e6      	b.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
     744:	2102      	movs	r1, #2
     746:	3008      	adds	r0, #8
     748:	f01f fabf 	bl	1fcca <net_buf_simple_add>
		cp_le->le = 0x01;
     74c:	2301      	movs	r3, #1
     74e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
     750:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
     752:	4621      	mov	r1, r4
     754:	4632      	mov	r2, r6
     756:	f640 406d 	movw	r0, #3181	; 0xc6d
     75a:	f004 fec1 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
     75e:	4604      	mov	r4, r0
     760:	2800      	cmp	r0, #0
     762:	f43f af17 	beq.w	594 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x120>
     766:	e6d4      	b.n	512 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x9e>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
     768:	483a      	ldr	r0, [pc, #232]	; (854 <CONFIG_ISR_STACK_SIZE+0x54>)
     76a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     76e:	e7b3      	b.n	6d8 <CONFIG_BT_COMPANY_ID+0xe7>
	rp.info = (void *)rsp->data;
     770:	9b00      	ldr	r3, [sp, #0]
	BT_INFO("HW Platform: %s (0x%04x)",
     772:	4839      	ldr	r0, [pc, #228]	; (858 <CONFIG_ISR_STACK_SIZE+0x58>)
	rp.info = (void *)rsp->data;
     774:	689e      	ldr	r6, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
     776:	f8b6 2001 	ldrh.w	r2, [r6, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
     77a:	2a03      	cmp	r2, #3
		return plat_str[platform];
     77c:	bf96      	itet	ls
     77e:	4937      	ldrls	r1, [pc, #220]	; (85c <CONFIG_ISR_STACK_SIZE+0x5c>)
	return "unknown";
     780:	4937      	ldrhi	r1, [pc, #220]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
		return plat_str[platform];
     782:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
     786:	f044 0303 	orr.w	r3, r4, #3
     78a:	f01b fc53 	bl	1c034 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     78e:	f8b6 1001 	ldrh.w	r1, [r6, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
     792:	f8b6 2003 	ldrh.w	r2, [r6, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     796:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
     798:	f044 0303 	orr.w	r3, r4, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
     79c:	d12e      	bne.n	7fc <CONFIG_BT_COMPANY_ID+0x20b>
	if (variant < ARRAY_SIZE(nordic_str)) {
     79e:	2a03      	cmp	r2, #3
     7a0:	d82c      	bhi.n	7fc <CONFIG_BT_COMPANY_ID+0x20b>
		return nordic_str[variant];
     7a2:	4930      	ldr	r1, [pc, #192]	; (864 <CONFIG_ISR_STACK_SIZE+0x64>)
     7a4:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
     7a8:	482f      	ldr	r0, [pc, #188]	; (868 <CONFIG_ISR_STACK_SIZE+0x68>)
     7aa:	f01b fc43 	bl	1c034 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     7ae:	7972      	ldrb	r2, [r6, #5]
     7b0:	482e      	ldr	r0, [pc, #184]	; (86c <CONFIG_ISR_STACK_SIZE+0x6c>)
	if (variant < ARRAY_SIZE(var_str)) {
     7b2:	2a03      	cmp	r2, #3
		return var_str[variant];
     7b4:	bf96      	itet	ls
     7b6:	492e      	ldrls	r1, [pc, #184]	; (870 <CONFIG_ISR_STACK_SIZE+0x70>)
	return "unknown";
     7b8:	4929      	ldrhi	r1, [pc, #164]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
		return var_str[variant];
     7ba:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
     7be:	e9cd 1201 	strd	r1, r2, [sp, #4]
     7c2:	79b2      	ldrb	r2, [r6, #6]
     7c4:	9203      	str	r2, [sp, #12]
     7c6:	f8b6 2007 	ldrh.w	r2, [r6, #7]
     7ca:	9204      	str	r2, [sp, #16]
     7cc:	f8d6 2009 	ldr.w	r2, [r6, #9]
     7d0:	9205      	str	r2, [sp, #20]
     7d2:	f044 0303 	orr.w	r3, r4, #3
     7d6:	2205      	movs	r2, #5
     7d8:	a901      	add	r1, sp, #4
     7da:	f01b fc60 	bl	1c09e <log_n>
	net_buf_unref(rsp);
     7de:	9800      	ldr	r0, [sp, #0]
     7e0:	f018 fb8a 	bl	18ef8 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     7e4:	466a      	mov	r2, sp
     7e6:	2100      	movs	r1, #0
     7e8:	f64f 4002 	movw	r0, #64514	; 0xfc02
     7ec:	f004 fe78 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
     7f0:	4606      	mov	r6, r0
     7f2:	b128      	cbz	r0, 800 <CONFIG_ISR_STACK_SIZE>
		BT_WARN("Failed to read supported vendor commands");
     7f4:	481f      	ldr	r0, [pc, #124]	; (874 <CONFIG_ISR_STACK_SIZE+0x74>)
     7f6:	f044 0102 	orr.w	r1, r4, #2
     7fa:	e788      	b.n	70e <CONFIG_BT_COMPANY_ID+0x11d>
		return "unknown";
     7fc:	4918      	ldr	r1, [pc, #96]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     7fe:	e7d3      	b.n	7a8 <CONFIG_BT_COMPANY_ID+0x1b7>
	rp.cmds = (void *)rsp->data;
     800:	9b00      	ldr	r3, [sp, #0]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     802:	481d      	ldr	r0, [pc, #116]	; (878 <CONFIG_ISR_STACK_SIZE+0x78>)
     804:	6899      	ldr	r1, [r3, #8]
     806:	2202      	movs	r2, #2
     808:	3101      	adds	r1, #1
     80a:	f01d f8ff 	bl	1da0c <memcpy>
	net_buf_unref(rsp);
     80e:	9800      	ldr	r0, [sp, #0]
     810:	f018 fb72 	bl	18ef8 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     814:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
     818:	075b      	lsls	r3, r3, #29
     81a:	f57f af7a 	bpl.w	712 <CONFIG_BT_COMPANY_ID+0x121>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     81e:	466a      	mov	r2, sp
     820:	4631      	mov	r1, r6
     822:	f64f 4003 	movw	r0, #64515	; 0xfc03
     826:	f004 fe5b 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
     82a:	b348      	cbz	r0, 880 <CONFIG_ISR_STACK_SIZE+0x80>
			BT_WARN("Failed to read supported vendor features");
     82c:	4813      	ldr	r0, [pc, #76]	; (87c <CONFIG_ISR_STACK_SIZE+0x7c>)
     82e:	f044 0102 	orr.w	r1, r4, #2
     832:	e76c      	b.n	70e <CONFIG_BT_COMPANY_ID+0x11d>
     834:	f3af 8000 	nop.w
     838:	02008890 	.word	0x02008890
     83c:	20008000 	.word	0x20008000
     840:	200000a0 	.word	0x200000a0
     844:	200000d0 	.word	0x200000d0
     848:	00020ee0 	.word	0x00020ee0
     84c:	00020e00 	.word	0x00020e00
     850:	00023766 	.word	0x00023766
     854:	02008810 	.word	0x02008810
     858:	0002378a 	.word	0x0002378a
     85c:	000214c8 	.word	0x000214c8
     860:	000232a1 	.word	0x000232a1
     864:	00021488 	.word	0x00021488
     868:	000237a3 	.word	0x000237a3
     86c:	000237bb 	.word	0x000237bb
     870:	00021500 	.word	0x00021500
     874:	000237e8 	.word	0x000237e8
     878:	20000085 	.word	0x20000085
     87c:	00023811 	.word	0x00023811
		rp.feat = (void *)rsp->data;
     880:	9b00      	ldr	r3, [sp, #0]
		memcpy(bt_dev.vs_features, rp.feat->features,
     882:	4805      	ldr	r0, [pc, #20]	; (898 <CONFIG_ISR_STACK_SIZE+0x98>)
     884:	6899      	ldr	r1, [r3, #8]
     886:	2201      	movs	r2, #1
     888:	4411      	add	r1, r2
     88a:	f01d f8bf 	bl	1da0c <memcpy>
		net_buf_unref(rsp);
     88e:	9800      	ldr	r0, [sp, #0]
     890:	f018 fb32 	bl	18ef8 <net_buf_unref>
     894:	e73d      	b.n	712 <CONFIG_BT_COMPANY_ID+0x121>
     896:	bf00      	nop
     898:	20000084 	.word	0x20000084
     89c:	00000000 	.word	0x00000000

000008a0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
     8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
     8a4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
     8a8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
     8aa:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
     8ac:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
     8ae:	42a6      	cmp	r6, r4
{
     8b0:	4688      	mov	r8, r1
     8b2:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
     8b4:	d818      	bhi.n	8e8 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     8b6:	4d1c      	ldr	r5, [pc, #112]	; (928 <ull_drift_ticks_get+0x88>)
     8b8:	fba3 0105 	umull	r0, r1, r3, r5
     8bc:	a318      	add	r3, pc, #96	; (adr r3, 920 <ull_drift_ticks_get+0x80>)
     8be:	e9d3 2300 	ldrd	r2, r3, [r3]
     8c2:	f7ff fc1d 	bl	100 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     8c6:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
     8c8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     8cc:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
     8d0:	a313      	add	r3, pc, #76	; (adr r3, 920 <ull_drift_ticks_get+0x80>)
     8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
     8d6:	fba4 0105 	umull	r0, r1, r4, r5
     8da:	f7ff fc11 	bl	100 <__aeabi_uldivmod>
     8de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     8e2:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
     8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     8e8:	4c0f      	ldr	r4, [pc, #60]	; (928 <ull_drift_ticks_get+0x88>)
     8ea:	a30d      	add	r3, pc, #52	; (adr r3, 920 <ull_drift_ticks_get+0x80>)
     8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
     8f0:	fba6 0104 	umull	r0, r1, r6, r4
     8f4:	f7ff fc04 	bl	100 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     8f8:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
     8fc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
     900:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
     904:	a306      	add	r3, pc, #24	; (adr r3, 920 <ull_drift_ticks_get+0x80>)
     906:	e9d3 2300 	ldrd	r2, r3, [r3]
     90a:	fba1 0104 	umull	r0, r1, r1, r4
     90e:	f7ff fbf7 	bl	100 <__aeabi_uldivmod>
     912:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
     916:	6038      	str	r0, [r7, #0]
}
     918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     91c:	f3af 8000 	nop.w
     920:	1afd498d 	.word	0x1afd498d
     924:	00000007 	.word	0x00000007
     928:	3b9aca00 	.word	0x3b9aca00
     92c:	00000000 	.word	0x00000000

00000930 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
     930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     934:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
     936:	2800      	cmp	r0, #0
     938:	f000 8142 	beq.w	bc0 <ll_adv_enable+0x290>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
     93c:	4cad      	ldr	r4, [pc, #692]	; (bf4 <ll_adv_enable+0x2c4>)
     93e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
     942:	f016 0601 	ands.w	r6, r6, #1
     946:	d136      	bne.n	9b6 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     948:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     94c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
	ull_filter_adv_update(lll->filter_policy);
     950:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
	lll->rl_idx = FILTER_IDX_NONE;
     954:	21ff      	movs	r1, #255	; 0xff
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     956:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     95a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     95e:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
	ull_filter_adv_update(lll->filter_policy);
     962:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
     966:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
     96a:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
     96e:	f015 f84d 	bl	15a0c <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
     972:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
     976:	0741      	lsls	r1, r0, #29
     978:	f100 810e 	bmi.w	b98 <ll_adv_enable+0x268>
	if (pdu_adv_to_update) {
     97c:	f1b8 0f00 	cmp.w	r8, #0
     980:	d011      	beq.n	9a6 <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
     982:	489c      	ldr	r0, [pc, #624]	; (bf4 <ll_adv_enable+0x2c4>)
     984:	4641      	mov	r1, r8
     986:	f00f fbc9 	bl	1011c <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
     98a:	f898 3000 	ldrb.w	r3, [r8]
     98e:	065a      	lsls	r2, r3, #25
     990:	d505      	bpl.n	99e <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
     992:	2106      	movs	r1, #6
     994:	f00a ff0e 	bl	b7b4 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
     998:	2800      	cmp	r0, #0
     99a:	f000 81cf 	beq.w	d3c <ll_adv_enable+0x40c>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
     99e:	4895      	ldr	r0, [pc, #596]	; (bf4 <ll_adv_enable+0x2c4>)
     9a0:	4649      	mov	r1, r9
     9a2:	f00f fbbb 	bl	1011c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
     9a6:	f898 3000 	ldrb.w	r3, [r8]
     9aa:	f013 0f0e 	tst.w	r3, #14
     9ae:	f040 80df 	bne.w	b70 <ll_adv_enable+0x240>
		if (lll->conn) {
     9b2:	6a23      	ldr	r3, [r4, #32]
     9b4:	b123      	cbz	r3, 9c0 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
     9b6:	260c      	movs	r6, #12
}
     9b8:	4630      	mov	r0, r6
     9ba:	b00f      	add	sp, #60	; 0x3c
     9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
     9c0:	f00e fc64 	bl	f28c <ll_rx_link_alloc>
		if (!link) {
     9c4:	4682      	mov	sl, r0
     9c6:	2800      	cmp	r0, #0
     9c8:	f000 81c2 	beq.w	d50 <ll_adv_enable+0x420>
		node_rx = ll_rx_alloc();
     9cc:	f00e fc6a 	bl	f2a4 <ll_rx_alloc>
		if (!node_rx) {
     9d0:	4683      	mov	fp, r0
     9d2:	2800      	cmp	r0, #0
     9d4:	f000 81c1 	beq.w	d5a <ll_adv_enable+0x42a>
		conn = ll_conn_acquire();
     9d8:	f010 fa92 	bl	10f00 <ll_conn_acquire>
		if (!conn) {
     9dc:	4605      	mov	r5, r0
     9de:	2800      	cmp	r0, #0
     9e0:	f000 81b8 	beq.w	d54 <ll_adv_enable+0x424>
		if (!conn_lll->link_tx_free) {
     9e4:	6f40      	ldr	r0, [r0, #116]	; 0x74
		conn_lll->handle = 0xFFFF;
     9e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
     9ea:	852b      	strh	r3, [r5, #40]	; 0x28
		conn_lll = &conn->lll;
     9ec:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
     9f0:	2800      	cmp	r0, #0
     9f2:	f000 81a9 	beq.w	d48 <ll_adv_enable+0x418>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
     9f6:	f105 0268 	add.w	r2, r5, #104	; 0x68
     9fa:	f105 0164 	add.w	r1, r5, #100	; 0x64
     9fe:	930b      	str	r3, [sp, #44]	; 0x2c
     a00:	f00a fee4 	bl	b7cc <memq_init>
			conn_lll->phy_tx = PHY_1M;
     a04:	f8b5 2060 	ldrh.w	r2, [r5, #96]	; 0x60
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     a08:	4b7b      	ldr	r3, [pc, #492]	; (bf8 <ll_adv_enable+0x2c8>)
			conn_lll->phy_tx = PHY_1M;
     a0a:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
     a0e:	f022 0207 	bic.w	r2, r2, #7
     a12:	f442 7288 	orr.w	r2, r2, #272	; 0x110
     a16:	f042 0201 	orr.w	r2, r2, #1
     a1a:	f8a5 2060 	strh.w	r2, [r5, #96]	; 0x60
		conn_lll->data_chan_sel = 0;
     a1e:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
     a22:	f002 023f 	and.w	r2, r2, #63	; 0x3f
     a26:	f062 027f 	orn	r2, r2, #127	; 0x7f
     a2a:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
		conn_lll->sn = 0;
     a2e:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
     a32:	f022 0207 	bic.w	r2, r2, #7
     a36:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn_lll->slave.initiated = 0;
     a3a:	f895 203c 	ldrb.w	r2, [r5, #60]	; 0x3c
     a3e:	f022 0207 	bic.w	r2, r2, #7
     a42:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
		conn->common.fex_valid = 0;
     a46:	f895 20d8 	ldrb.w	r2, [r5, #216]	; 0xd8
     a4a:	f022 0207 	bic.w	r2, r2, #7
     a4e:	f885 20d8 	strb.w	r2, [r5, #216]	; 0xd8
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     a52:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->link_tx_free = NULL;
     a56:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
     a58:	e9c5 2316 	strd	r2, r3, [r5, #88]	; 0x58
		conn->connect_expire = 6;
     a5c:	2206      	movs	r2, #6
     a5e:	f8a5 20c0 	strh.w	r2, [r5, #192]	; 0xc0
		conn_lll->slave.window_widening_event_us = 0;
     a62:	e9c5 7712 	strd	r7, r7, [r5, #72]	; 0x48
		conn_lll->link_tx_free = NULL;
     a66:	676f      	str	r7, [r5, #116]	; 0x74
		conn_lll->packet_tx_head_len = 0;
     a68:	f8a5 7078 	strh.w	r7, [r5, #120]	; 0x78
		conn_lll->latency_prepare = 0;
     a6c:	85ef      	strh	r7, [r5, #46]	; 0x2e
		conn_lll->latency_event = 0;
     a6e:	632f      	str	r7, [r5, #48]	; 0x30
		conn_lll->data_chan_use = 0;
     a70:	f885 703b 	strb.w	r7, [r5, #59]	; 0x3b
		conn_lll->slave.window_size_prepare_us = 0;
     a74:	652f      	str	r7, [r5, #80]	; 0x50
		conn->supervision_expire = 0;
     a76:	f8a5 70c4 	strh.w	r7, [r5, #196]	; 0xc4
		conn->procedure_expire = 0;
     a7a:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->apto_expire = 0U;
     a7e:	f8a5 70d0 	strh.w	r7, [r5, #208]	; 0xd0
		conn->appto_expire = 0U;
     a82:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
     a86:	f8a5 70e4 	strh.w	r7, [r5, #228]	; 0xe4
     a8a:	f885 70e6 	strb.w	r7, [r5, #230]	; 0xe6
		conn->llcp_rx = NULL;
     a8e:	f8c5 7108 	str.w	r7, [r5, #264]	; 0x108
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
     a92:	f8a5 710c 	strh.w	r7, [r5, #268]	; 0x10c
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
     a96:	f8a5 7120 	strh.w	r7, [r5, #288]	; 0x120
		conn->llcp_feature.features_conn = ll_feat_get();
     a9a:	f00d fd33 	bl	e504 <ll_feat_get>
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     a9e:	f895 213a 	ldrb.w	r2, [r5, #314]	; 0x13a
		conn->llcp_version.req = conn->llcp_version.ack = 0;
     aa2:	f8a5 7138 	strh.w	r7, [r5, #312]	; 0x138
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
     aa6:	f022 0203 	bic.w	r2, r2, #3
     aaa:	f885 213a 	strb.w	r2, [r5, #314]	; 0x13a
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     aae:	f895 207a 	ldrb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_terminate.req = conn->llcp_terminate.ack = 0;
     ab2:	f8a5 7140 	strh.w	r7, [r5, #320]	; 0x140
		conn_lll->enc_rx = conn_lll->enc_tx = 0U;
     ab6:	f022 0218 	bic.w	r2, r2, #24
     aba:	f885 207a 	strb.w	r2, [r5, #122]	; 0x7a
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     abe:	f895 2166 	ldrb.w	r2, [r5, #358]	; 0x166
		conn->llcp_terminate.reason_final = 0;
     ac2:	f885 7143 	strb.w	r7, [r5, #323]	; 0x143
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
     ac6:	f022 0207 	bic.w	r2, r2, #7
     aca:	f885 2166 	strb.w	r2, [r5, #358]	; 0x166
		conn->llcp_conn_param.disabled = 0;
     ace:	f895 2186 	ldrb.w	r2, [r5, #390]	; 0x186
		conn->llcp_terminate.node_rx.hdr.link = link;
     ad2:	f8c5 a144 	str.w	sl, [r5, #324]	; 0x144
		conn->llcp_conn_param.disabled = 0;
     ad6:	f367 1204 	bfi	r2, r7, #4, #1
     ada:	f885 2186 	strb.w	r2, [r5, #390]	; 0x186
		conn->llcp_length.disabled = 0U;
     ade:	f895 21ae 	ldrb.w	r2, [r5, #430]	; 0x1ae
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
     ae2:	f8a5 7164 	strh.w	r7, [r5, #356]	; 0x164
		conn->llcp_length.disabled = 0U;
     ae6:	f367 02c3 	bfi	r2, r7, #3, #1
		conn->llcp_feature.features_conn = ll_feat_get();
     aea:	e9c5 014a 	strd	r0, r1, [r5, #296]	; 0x128
		conn->llcp_feature.features_peer = 0;
     aee:	2100      	movs	r1, #0
     af0:	2000      	movs	r0, #0
     af2:	e9c5 014c 	strd	r0, r1, [r5, #304]	; 0x130
		conn->llcp_length.disabled = 0U;
     af6:	f885 21ae 	strb.w	r2, [r5, #430]	; 0x1ae
		conn->slave.llcp_type = 0U;
     afa:	f885 70d9 	strb.w	r7, [r5, #217]	; 0xd9
		conn->llcp_conn_param.req = 0;
     afe:	f8a5 7184 	strh.w	r7, [r5, #388]	; 0x184
		conn->slave.ticks_to_offset = 0;
     b02:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
     b06:	f8a5 71ac 	strh.w	r7, [r5, #428]	; 0x1ac
		conn->llcp_length.cache.tx_octets = 0U;
     b0a:	f8a5 71b8 	strh.w	r7, [r5, #440]	; 0x1b8
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
     b0e:	f010 fd39 	bl	11584 <ull_conn_default_tx_octets_get>
     b12:	f8a5 00d2 	strh.w	r0, [r5, #210]	; 0xd2
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b16:	f010 fd3b 	bl	11590 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b1a:	f8d5 11bc 	ldr.w	r1, [r5, #444]	; 0x1bc
     b1e:	4a37      	ldr	r2, [pc, #220]	; (bfc <ll_adv_enable+0x2cc>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
     b20:	f8a5 00d4 	strh.w	r0, [r5, #212]	; 0xd4
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
     b24:	400a      	ands	r2, r1
     b26:	f8c5 21bc 	str.w	r2, [r5, #444]	; 0x1bc
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
     b2a:	f010 fd37 	bl	1159c <ull_conn_default_phy_tx_get>
     b2e:	f895 21c0 	ldrb.w	r2, [r5, #448]	; 0x1c0
     b32:	f360 0202 	bfi	r2, r0, #0, #3
     b36:	f885 21c0 	strb.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b3a:	f010 fd35 	bl	115a8 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
     b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
     b40:	6223      	str	r3, [r4, #32]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b42:	f895 31c0 	ldrb.w	r3, [r5, #448]	; 0x1c0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     b46:	f8c5 71c4 	str.w	r7, [r5, #452]	; 0x1c4
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b4a:	f360 03c5 	bfi	r3, r0, #3, #3
		adv->node_rx_cc_free = node_rx;
     b4e:	e9c4 ab18 	strd	sl, fp, [r4, #96]	; 0x60
		conn->tx_data = conn->tx_data_last = 0;
     b52:	e9c5 7774 	strd	r7, r7, [r5, #464]	; 0x1d0
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
     b56:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->ref = 0U;
	hdr->disabled_cb = hdr->disabled_param = NULL;
     b5a:	e9c5 7705 	strd	r7, r7, [r5, #20]
	hdr->ref = 0U;
     b5e:	702f      	strb	r7, [r5, #0]

static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
     b60:	61ed      	str	r5, [r5, #28]
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
     b62:	f885 31c0 	strb.w	r3, [r5, #448]	; 0x1c0
		err = lll_clock_wait();
     b66:	f015 ff8d 	bl	16a84 <lll_clock_wait>
		if (err) {
     b6a:	2800      	cmp	r0, #0
     b6c:	f040 80e8 	bne.w	d40 <ll_adv_enable+0x410>
	uint8_t ch_map = lll->chan_map;
     b70:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     b74:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
     b76:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     b7a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
     b7e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
     b82:	f00a ff9d 	bl	bac0 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
     b86:	2800      	cmp	r0, #0
     b88:	d13a      	bne.n	c00 <ll_adv_enable+0x2d0>
	if (adv->lll.conn) {
     b8a:	6a23      	ldr	r3, [r4, #32]
     b8c:	2b00      	cmp	r3, #0
     b8e:	f43f af12 	beq.w	9b6 <ll_adv_enable+0x86>
		conn_release(adv);
     b92:	f00f f82b 	bl	fbec <conn_release.constprop.0>
     b96:	e70e      	b.n	9b6 <ll_adv_enable+0x86>
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     b98:	f3c0 00c0 	ubfx	r0, r0, #3, #1
     b9c:	4632      	mov	r2, r6
     b9e:	f104 016b 	add.w	r1, r4, #107	; 0x6b
     ba2:	f015 f89d 	bl	15ce0 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
     ba6:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->peer_addr_type,
     ba8:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
		if (lll->rl_idx != FILTER_IDX_NONE) {
     bac:	f43f aee6 	beq.w	97c <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
     bb0:	4630      	mov	r0, r6
     bb2:	f014 ff45 	bl	15a40 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
     bb6:	f1b8 0f00 	cmp.w	r8, #0
     bba:	f47f aee2 	bne.w	982 <ll_adv_enable+0x52>
     bbe:	e6f2      	b.n	9a6 <ll_adv_enable+0x76>
	if (!adv || !adv->is_enabled) {
     bc0:	4b0c      	ldr	r3, [pc, #48]	; (bf4 <ll_adv_enable+0x2c4>)
     bc2:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
     bc6:	07d4      	lsls	r4, r2, #31
     bc8:	f57f aef5 	bpl.w	9b6 <ll_adv_enable+0x86>
	if (!adv) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
     bcc:	6a1a      	ldr	r2, [r3, #32]
     bce:	b15a      	cbz	r2, be8 <ll_adv_enable+0x2b8>
		/* Indicate to LLL that a cancellation is requested */
		adv->lll.conn->slave.cancelled = 1U;
     bd0:	f892 1020 	ldrb.w	r1, [r2, #32]
     bd4:	f041 0102 	orr.w	r1, r1, #2
     bd8:	f882 1020 	strb.w	r1, [r2, #32]
		cpu_dmb();

		/* Check if a connection was initiated (connection
		 * establishment race between LLL and ULL).
		 */
		if (unlikely(adv->lll.conn->slave.initiated)) {
     bdc:	6a1b      	ldr	r3, [r3, #32]
     bde:	f893 3020 	ldrb.w	r3, [r3, #32]
     be2:	07d8      	lsls	r0, r3, #31
     be4:	f53f aee7 	bmi.w	9b6 <ll_adv_enable+0x86>
}
     be8:	b00f      	add	sp, #60	; 0x3c
     bea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     bee:	f00f b83f 	b.w	fc70 <disable.part.0>
     bf2:	bf00      	nop
     bf4:	20001ebc 	.word	0x20001ebc
     bf8:	01480148 	.word	0x01480148
     bfc:	f6ff0000 	.word	0xf6ff0000
	uint16_t time_us = adv_time_get(pdu_adv, pdu_scan, adv_chn_cnt, phy);
     c00:	f899 1001 	ldrb.w	r1, [r9, #1]
     c04:	4602      	mov	r2, r0
     c06:	4640      	mov	r0, r8
     c08:	f00f f8d6 	bl	fdb8 <adv_time_get.constprop.0.isra.0>
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     c0c:	4958      	ldr	r1, [pc, #352]	; (d70 <ll_adv_enable+0x440>)
     c0e:	61e4      	str	r4, [r4, #28]
     c10:	2500      	movs	r5, #0
	adv->ull.ticks_prepare_to_start =
     c12:	2331      	movs	r3, #49	; 0x31
     c14:	60a3      	str	r3, [r4, #8]
	hdr->disabled_cb = hdr->disabled_param = NULL;
     c16:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     c1a:	a353      	add	r3, pc, #332	; (adr r3, d68 <ll_adv_enable+0x438>)
     c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c20:	fba0 0101 	umull	r0, r1, r0, r1
	hdr->ref = 0U;
     c24:	7025      	strb	r5, [r4, #0]
	adv->ull.ticks_active_to_start = 0;
     c26:	6065      	str	r5, [r4, #4]
	adv->ull.ticks_preempt_to_start =
     c28:	60e5      	str	r5, [r4, #12]
	adv->ull.ticks_slot = HAL_TICKER_US_TO_TICKS(time_us);
     c2a:	f7ff fa69 	bl	100 <__aeabi_uldivmod>
     c2e:	6120      	str	r0, [r4, #16]
	uint16_t interval = adv->interval;
     c30:	f8b4 9068 	ldrh.w	r9, [r4, #104]	; 0x68
	ticks_anchor = ticker_ticks_now_get();
     c34:	f00c f852 	bl	ccdc <ticker_ticks_now_get>
     c38:	4607      	mov	r7, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     c3a:	f1b9 0f00 	cmp.w	r9, #0
     c3e:	d108      	bne.n	c52 <ll_adv_enable+0x322>
     c40:	f898 5000 	ldrb.w	r5, [r8]
     c44:	f005 050f 	and.w	r5, r5, #15
     c48:	f1a5 0501 	sub.w	r5, r5, #1
     c4c:	fab5 f585 	clz	r5, r5
     c50:	096d      	lsrs	r5, r5, #5
     c52:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
     c56:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
     c5a:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
     c5e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
	if (lll->is_hdcd) {
     c62:	d033      	beq.n	ccc <ll_adv_enable+0x39c>
				   (adv->ull.ticks_slot + ticks_slot_overhead),
     c64:	6923      	ldr	r3, [r4, #16]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     c66:	4a43      	ldr	r2, [pc, #268]	; (d74 <ll_adv_enable+0x444>)
     c68:	f8df 910c 	ldr.w	r9, [pc, #268]	; d78 <ll_adv_enable+0x448>
     c6c:	9304      	str	r3, [sp, #16]
     c6e:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
     c70:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     c72:	f10d 0834 	add.w	r8, sp, #52	; 0x34
     c76:	9301      	str	r3, [sp, #4]
     c78:	9205      	str	r2, [sp, #20]
     c7a:	2103      	movs	r1, #3
     c7c:	e9cd 0002 	strd	r0, r0, [sp, #8]
     c80:	9406      	str	r4, [sp, #24]
     c82:	463b      	mov	r3, r7
     c84:	9000      	str	r0, [sp, #0]
     c86:	f8cd 8020 	str.w	r8, [sp, #32]
     c8a:	f8cd 901c 	str.w	r9, [sp, #28]
     c8e:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
     c90:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     c92:	f00b ff57 	bl	cb44 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
     c96:	4641      	mov	r1, r8
     c98:	f00e fb88 	bl	f3ac <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
     c9c:	2800      	cmp	r0, #0
     c9e:	f47f af74 	bne.w	b8a <ll_adv_enable+0x25a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     ca2:	4a36      	ldr	r2, [pc, #216]	; (d7c <ll_adv_enable+0x44c>)
     ca4:	9205      	str	r2, [sp, #20]
     ca6:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
     caa:	9200      	str	r2, [sp, #0]
     cac:	e9cd 0003 	strd	r0, r0, [sp, #12]
     cb0:	e9cd 0001 	strd	r0, r0, [sp, #4]
     cb4:	f8cd 901c 	str.w	r9, [sp, #28]
     cb8:	f8cd 8020 	str.w	r8, [sp, #32]
     cbc:	9406      	str	r4, [sp, #24]
     cbe:	463b      	mov	r3, r7
     cc0:	2201      	movs	r2, #1
     cc2:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
     cc4:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
     cc6:	f00b ff3d 	bl	cb44 <ticker_start>
     cca:	e02a      	b.n	d22 <ll_adv_enable+0x3f2>
		ret = ticker_start_ext(
     ccc:	9406      	str	r4, [sp, #24]
     cce:	9502      	str	r5, [sp, #8]
		const uint32_t ticks_slot = adv->ull.ticks_slot +
     cd0:	6923      	ldr	r3, [r4, #16]
		ll_adv_ticker_ext[handle].ticks_slot_window =
     cd2:	4a2b      	ldr	r2, [pc, #172]	; (d80 <ll_adv_enable+0x450>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     cd4:	482b      	ldr	r0, [pc, #172]	; (d84 <ll_adv_enable+0x454>)
		ret = ticker_start_ext(
     cd6:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
     cd8:	f203 1347 	addw	r3, r3, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
     cdc:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     cde:	fba9 0100 	umull	r0, r1, r9, r0
     ce2:	2391      	movs	r3, #145	; 0x91
     ce4:	fb03 1109 	mla	r1, r3, r9, r1
		ret = ticker_start_ext(
     ce8:	4b23      	ldr	r3, [pc, #140]	; (d78 <ll_adv_enable+0x448>)
     cea:	9307      	str	r3, [sp, #28]
     cec:	4b21      	ldr	r3, [pc, #132]	; (d74 <ll_adv_enable+0x444>)
     cee:	9305      	str	r3, [sp, #20]
     cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
     cf4:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
     cf6:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
     cfa:	9303      	str	r3, [sp, #12]
     cfc:	f10d 0834 	add.w	r8, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     d00:	a319      	add	r3, pc, #100	; (adr r3, d68 <ll_adv_enable+0x438>)
     d02:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
     d06:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
		ret = ticker_start_ext(
     d0a:	f8cd 8020 	str.w	r8, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
     d0e:	f7ff f9f7 	bl	100 <__aeabi_uldivmod>
		ret = ticker_start_ext(
     d12:	463b      	mov	r3, r7
     d14:	e9cd 5000 	strd	r5, r0, [sp]
     d18:	464a      	mov	r2, r9
     d1a:	4628      	mov	r0, r5
     d1c:	2103      	movs	r1, #3
     d1e:	f00b febb 	bl	ca98 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
     d22:	4641      	mov	r1, r8
     d24:	f00e fb42 	bl	f3ac <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     d28:	2800      	cmp	r0, #0
     d2a:	f47f af2e 	bne.w	b8a <ll_adv_enable+0x25a>
	adv->is_enabled = 1;
     d2e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
     d32:	f043 0301 	orr.w	r3, r3, #1
     d36:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	return 0;
     d3a:	e63d      	b.n	9b8 <ll_adv_enable+0x88>
			return BT_HCI_ERR_INVALID_PARAM;
     d3c:	2612      	movs	r6, #18
     d3e:	e63b      	b.n	9b8 <ll_adv_enable+0x88>
			conn_release(adv);
     d40:	f00e ff54 	bl	fbec <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
     d44:	2603      	movs	r6, #3
     d46:	e637      	b.n	9b8 <ll_adv_enable+0x88>
			conn_lll->link_tx_free = &conn_lll->link_tx;
     d48:	f105 006c 	add.w	r0, r5, #108	; 0x6c
     d4c:	6768      	str	r0, [r5, #116]	; 0x74
     d4e:	e652      	b.n	9f6 <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     d50:	2607      	movs	r6, #7
     d52:	e631      	b.n	9b8 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
     d54:	4658      	mov	r0, fp
     d56:	f00e faab 	bl	f2b0 <ll_rx_release>
			ll_rx_link_release(link);
     d5a:	4650      	mov	r0, sl
     d5c:	f00e fa9c 	bl	f298 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
     d60:	2607      	movs	r6, #7
     d62:	e629      	b.n	9b8 <ll_adv_enable+0x88>
     d64:	f3af 8000 	nop.w
     d68:	1afd498d 	.word	0x1afd498d
     d6c:	00000007 	.word	0x00000007
     d70:	3b9aca00 	.word	0x3b9aca00
     d74:	0000f975 	.word	0x0000f975
     d78:	0000e5a5 	.word	0x0000e5a5
     d7c:	0000f859 	.word	0x0000f859
     d80:	20001f30 	.word	0x20001f30
     d84:	84e72a00 	.word	0x84e72a00

00000d88 <ull_adv_time_update>:
{
     d88:	b570      	push	{r4, r5, r6, lr}
	chan_map = lll->chan_map;
     d8a:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
     d8e:	b08a      	sub	sp, #40	; 0x28
	chan_map = lll->chan_map;
     d90:	f3c3 0342 	ubfx	r3, r3, #1, #3
{
     d94:	460d      	mov	r5, r1
     d96:	4604      	mov	r4, r0
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     d98:	2101      	movs	r1, #1
     d9a:	f10d 0023 	add.w	r0, sp, #35	; 0x23
{
     d9e:	4616      	mov	r6, r2
	chan_map = lll->chan_map;
     da0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     da4:	f00a fe8c 	bl	bac0 <util_ones_count_get>
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, PHY_1M);
     da8:	7871      	ldrb	r1, [r6, #1]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
     daa:	4602      	mov	r2, r0
	time_us = adv_time_get(pdu, pdu_scan, chan_cnt, PHY_1M);
     dac:	4628      	mov	r0, r5
     dae:	f00f f803 	bl	fdb8 <adv_time_get.constprop.0.isra.0>
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     db2:	491d      	ldr	r1, [pc, #116]	; (e28 <ull_adv_time_update+0xa0>)
     db4:	a31a      	add	r3, pc, #104	; (adr r3, e20 <ull_adv_time_update+0x98>)
     db6:	e9d3 2300 	ldrd	r2, r3, [r3]
     dba:	fba0 0101 	umull	r0, r1, r0, r1
     dbe:	f7ff f99f 	bl	100 <__aeabi_uldivmod>
	if (adv->ull.ticks_slot > time_ticks) {
     dc2:	6923      	ldr	r3, [r4, #16]
     dc4:	4298      	cmp	r0, r3
	time_ticks = HAL_TICKER_US_TO_TICKS(time_us);
     dc6:	4605      	mov	r5, r0
	if (adv->ull.ticks_slot > time_ticks) {
     dc8:	d220      	bcs.n	e0c <ull_adv_time_update+0x84>
		ticks_minus = adv->ull.ticks_slot - time_ticks;
     dca:	1a1b      	subs	r3, r3, r0
		ticks_plus = 0U;
     dcc:	2200      	movs	r2, #0
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     dce:	9201      	str	r2, [sp, #4]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     dd0:	4a16      	ldr	r2, [pc, #88]	; (e2c <ull_adv_time_update+0xa4>)
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     dd2:	9302      	str	r3, [sp, #8]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     dd4:	4b16      	ldr	r3, [pc, #88]	; (e30 <ull_adv_time_update+0xa8>)
     dd6:	1aa2      	subs	r2, r4, r2
     dd8:	fba3 3202 	umull	r3, r2, r3, r2
	ret_cb = TICKER_STATUS_BUSY;
     ddc:	2102      	movs	r1, #2
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
     dde:	0992      	lsrs	r2, r2, #6
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     de0:	2300      	movs	r3, #0
			    (TICKER_ID_ADV_BASE +
     de2:	440a      	add	r2, r1
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     de4:	ae09      	add	r6, sp, #36	; 0x24
	ret_cb = TICKER_STATUS_BUSY;
     de6:	9109      	str	r1, [sp, #36]	; 0x24
	ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
     de8:	4912      	ldr	r1, [pc, #72]	; (e34 <ull_adv_time_update+0xac>)
     dea:	9105      	str	r1, [sp, #20]
     dec:	e9cd 3303 	strd	r3, r3, [sp, #12]
     df0:	2103      	movs	r1, #3
     df2:	b2d2      	uxtb	r2, r2
     df4:	9606      	str	r6, [sp, #24]
     df6:	9300      	str	r3, [sp, #0]
     df8:	4618      	mov	r0, r3
     dfa:	f00b ff15 	bl	cc28 <ticker_update>
	ret = ull_ticker_status_take(ret, &ret_cb);
     dfe:	4631      	mov	r1, r6
     e00:	f00e fad4 	bl	f3ac <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
     e04:	b948      	cbnz	r0, e1a <ull_adv_time_update+0x92>
	adv->ull.ticks_slot = time_ticks;
     e06:	6125      	str	r5, [r4, #16]
}
     e08:	b00a      	add	sp, #40	; 0x28
     e0a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (adv->ull.ticks_slot < time_ticks) {
     e0c:	d902      	bls.n	e14 <ull_adv_time_update+0x8c>
		ticks_plus = time_ticks - adv->ull.ticks_slot;
     e0e:	1ac2      	subs	r2, r0, r3
		ticks_minus = 0U;
     e10:	2300      	movs	r3, #0
     e12:	e7dc      	b.n	dce <ull_adv_time_update+0x46>
		return BT_HCI_ERR_SUCCESS;
     e14:	2000      	movs	r0, #0
}
     e16:	b00a      	add	sp, #40	; 0x28
     e18:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
     e1a:	200c      	movs	r0, #12
}
     e1c:	b00a      	add	sp, #40	; 0x28
     e1e:	bd70      	pop	{r4, r5, r6, pc}
     e20:	1afd498d 	.word	0x1afd498d
     e24:	00000007 	.word	0x00000007
     e28:	3b9aca00 	.word	0x3b9aca00
     e2c:	20001ebc 	.word	0x20001ebc
     e30:	8d3dcb09 	.word	0x8d3dcb09
     e34:	0000e5a5 	.word	0x0000e5a5

00000e38 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
     e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	uint16_t instant_latency;
	uint16_t event_counter;

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e3c:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
     e3e:	8e46      	ldrh	r6, [r0, #50]	; 0x32
     e40:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e42:	f890 310e 	ldrb.w	r3, [r0, #270]	; 0x10e
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e46:	440e      	add	r6, r1
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e48:	f013 0307 	ands.w	r3, r3, #7
{
     e4c:	b08b      	sub	sp, #44	; 0x2c
     e4e:	4604      	mov	r4, r0
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
     e50:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
     e52:	f040 8191 	bne.w	1178 <event_conn_upd_prep+0x340>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
     e56:	f8b0 90e8 	ldrh.w	r9, [r0, #232]	; 0xe8
     e5a:	4690      	mov	r8, r2
     e5c:	eba6 0209 	sub.w	r2, r6, r9
     e60:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
     e64:	0412      	lsls	r2, r2, #16
     e66:	f100 81fa 	bmi.w	125e <event_conn_upd_prep+0x426>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
     e6a:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
     e6e:	2a00      	cmp	r2, #0
     e70:	460f      	mov	r7, r1
     e72:	f2c0 812c 	blt.w	10ce <event_conn_upd_prep+0x296>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
     e76:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
     e7a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     e7e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
     e82:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
		conn->llcp_cu.ack = conn->llcp_cu.req;
     e86:	f894 110c 	ldrb.w	r1, [r4, #268]	; 0x10c
     e8a:	f884 110d 	strb.w	r1, [r4, #269]	; 0x10d
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     e8e:	4293      	cmp	r3, r2
     e90:	d006      	beq.n	ea0 <event_conn_upd_prep+0x68>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
     e92:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
     e96:	f003 0307 	and.w	r3, r3, #7
     e9a:	2b05      	cmp	r3, #5
     e9c:	f000 8247 	beq.w	132e <event_conn_upd_prep+0x4f6>
	if (conn == conn_upd_curr) {
     ea0:	4ba7      	ldr	r3, [pc, #668]	; (1140 <event_conn_upd_prep+0x308>)
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
     ea2:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
	if (conn == conn_upd_curr) {
     ea6:	681a      	ldr	r2, [r3, #0]
     ea8:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
     eaa:	bf04      	itt	eq
     eac:	2200      	moveq	r2, #0
     eae:	601a      	streq	r2, [r3, #0]
		LL_ASSERT(rx && rx->hdr.link);
     eb0:	2d00      	cmp	r5, #0
     eb2:	f000 8130 	beq.w	1116 <event_conn_upd_prep+0x2de>
     eb6:	6828      	ldr	r0, [r5, #0]
     eb8:	2800      	cmp	r0, #0
     eba:	f000 812c 	beq.w	1116 <event_conn_upd_prep+0x2de>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
     ebe:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
     ec0:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
		conn->llcp_rx = rx->hdr.link->mem;
     ec4:	6841      	ldr	r1, [r0, #4]
     ec6:	f8c4 1108 	str.w	r1, [r4, #264]	; 0x108
		if ((conn->llcp_cu.interval != lll->interval) ||
     eca:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
     ecc:	f8b4 2112 	ldrh.w	r2, [r4, #274]	; 0x112
		if ((conn->llcp_cu.interval != lll->interval) ||
     ed0:	f000 8105 	beq.w	10de <event_conn_upd_prep+0x2a6>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
     ed4:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
     ed8:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
     edc:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
     ede:	2316      	movs	r3, #22
     ee0:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
     ee2:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
     ee4:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
     ee8:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
     eea:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
     eec:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
     eee:	4629      	mov	r1, r5
     ef0:	f00e f9e4 	bl	f2bc <ll_rx_put>
		ll_rx_sched();
     ef4:	f00e f9ec 	bl	f2d0 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->ull.ticks_prepare_to_start & XON_BITMASK) {
     ef8:	68a3      	ldr	r3, [r4, #8]
     efa:	2b00      	cmp	r3, #0
     efc:	da0a      	bge.n	f14 <event_conn_upd_prep+0xdc>
			uint32_t ticks_prepare_to_start =
     efe:	68e1      	ldr	r1, [r4, #12]
     f00:	6862      	ldr	r2, [r4, #4]
				MAX(conn->ull.ticks_active_to_start,
				    conn->ull.ticks_preempt_to_start);

			conn->ull.ticks_prepare_to_start &= ~XON_BITMASK;
     f02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
     f06:	4291      	cmp	r1, r2
     f08:	bf2c      	ite	cs
     f0a:	4488      	addcs	r8, r1
     f0c:	4490      	addcc	r8, r2
     f0e:	60a3      	str	r3, [r4, #8]
			ticks_at_expire -= (conn->ull.ticks_prepare_to_start -
     f10:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
     f14:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
		latency = conn_interval_old / conn->llcp_cu.interval;
     f16:	f8b4 5110 	ldrh.w	r5, [r4, #272]	; 0x110
		conn_interval_old = instant_latency * lll->interval;
     f1a:	fb10 f00b 	smulbb	r0, r0, fp
     f1e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
     f20:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
     f24:	fb15 f301 	smulbb	r3, r5, r1
     f28:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
     f2a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
     f2c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
     f30:	f080 819a 	bcs.w	1268 <event_conn_upd_prep+0x430>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
     f34:	1a1b      	subs	r3, r3, r0
     f36:	4983      	ldr	r1, [pc, #524]	; (1144 <event_conn_upd_prep+0x30c>)
     f38:	f240 40e2 	movw	r0, #1250	; 0x4e2
     f3c:	fb03 f000 	mul.w	r0, r3, r0
     f40:	fba0 0101 	umull	r0, r1, r0, r1
     f44:	a37c      	add	r3, pc, #496	; (adr r3, 1138 <event_conn_upd_prep+0x300>)
     f46:	e9d3 2300 	ldrd	r2, r3, [r3]
     f4a:	f7ff f8d9 	bl	100 <__aeabi_uldivmod>
     f4e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     f52:	4480      	add	r8, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
     f54:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
     f56:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
		lll->latency_prepare -= (instant_latency - latency);
     f5a:	eba9 0906 	sub.w	r9, r9, r6
     f5e:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
     f60:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
     f62:	444f      	add	r7, r9
     f64:	85e7      	strh	r7, [r4, #46]	; 0x2e
		} else if (lll->role) {
     f66:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
     f68:	f240 47e2 	movw	r7, #1250	; 0x4e2
     f6c:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
     f70:	f2c0 818c 	blt.w	128c <event_conn_upd_prep+0x454>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
     f74:	4a74      	ldr	r2, [pc, #464]	; (1148 <event_conn_upd_prep+0x310>)
     f76:	4975      	ldr	r1, [pc, #468]	; (114c <event_conn_upd_prep+0x314>)
     f78:	4875      	ldr	r0, [pc, #468]	; (1150 <event_conn_upd_prep+0x318>)
     f7a:	f640 330e 	movw	r3, #2830	; 0xb0e
     f7e:	f01a fbf9 	bl	1b774 <printk>
     f82:	4040      	eors	r0, r0
     f84:	f380 8811 	msr	BASEPRI, r0
     f88:	f04f 0003 	mov.w	r0, #3
     f8c:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
     f8e:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
     f90:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     f92:	4a70      	ldr	r2, [pc, #448]	; (1154 <event_conn_upd_prep+0x31c>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     f94:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     f98:	486f      	ldr	r0, [pc, #444]	; (1158 <event_conn_upd_prep+0x320>)
		lll->latency = conn->llcp_cu.latency;
     f9a:	f8b4 1112 	ldrh.w	r1, [r4, #274]	; 0x112
     f9e:	85a1      	strh	r1, [r4, #44]	; 0x2c
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
     fa0:	4432      	add	r2, r6
     fa2:	fbb2 f2f6 	udiv	r2, r2, r6
     fa6:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     faa:	f242 7210 	movw	r2, #10000	; 0x2710
     fae:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     fb2:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     fb4:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     fb6:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     fba:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
     fbe:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
     fc2:	8563      	strh	r3, [r4, #42]	; 0x2a
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     fc4:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     fc6:	1d88      	adds	r0, r1, #6
     fc8:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
     fca:	f8a4 60c2 	strh.w	r6, [r4, #194]	; 0xc2
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
     fce:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     fd2:	dd02      	ble.n	fda <event_conn_upd_prep+0x1a2>
				     (conn->apto_reload - (lll->latency + 6)) :
     fd4:	1a5b      	subs	r3, r3, r1
     fd6:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
     fd8:	b29b      	uxth	r3, r3
     fda:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
     fde:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
     fe2:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
     fe4:	bf44      	itt	mi
     fe6:	2300      	movmi	r3, #0
     fe8:	f8a4 30c4 	strhmi.w	r3, [r4, #196]	; 0xc4
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     fec:	2102      	movs	r1, #2
     fee:	2001      	movs	r0, #1
     ff0:	f017 fccc 	bl	1898c <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     ff4:	2200      	movs	r2, #0
     ff6:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
     ff8:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
     ffa:	2001      	movs	r0, #1
     ffc:	f00a fc36 	bl	b86c <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    1000:	4956      	ldr	r1, [pc, #344]	; (115c <event_conn_upd_prep+0x324>)
    1002:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    1006:	4620      	mov	r0, r4
    1008:	f00a fbc0 	bl	b78c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    100c:	f100 0a03 	add.w	sl, r0, #3
    1010:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1014:	4b52      	ldr	r3, [pc, #328]	; (1160 <event_conn_upd_prep+0x328>)
    1016:	9400      	str	r4, [sp, #0]
    1018:	4652      	mov	r2, sl
    101a:	2101      	movs	r1, #1
    101c:	2000      	movs	r0, #0
    101e:	f00b fe1b 	bl	cc58 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1022:	f030 0302 	bics.w	r3, r0, #2
    1026:	d00c      	beq.n	1042 <event_conn_upd_prep+0x20a>
    1028:	4a47      	ldr	r2, [pc, #284]	; (1148 <event_conn_upd_prep+0x310>)
    102a:	494e      	ldr	r1, [pc, #312]	; (1164 <event_conn_upd_prep+0x32c>)
    102c:	4848      	ldr	r0, [pc, #288]	; (1150 <event_conn_upd_prep+0x318>)
    102e:	f640 333d 	movw	r3, #2877	; 0xb3d
    1032:	f01a fb9f 	bl	1b774 <printk>
    1036:	4040      	eors	r0, r0
    1038:	f380 8811 	msr	BASEPRI, r0
    103c:	f04f 0003 	mov.w	r0, #3
    1040:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1042:	4e40      	ldr	r6, [pc, #256]	; (1144 <event_conn_upd_prep+0x30c>)
    1044:	fbab 6b06 	umull	r6, fp, fp, r6
    1048:	a33b      	add	r3, pc, #236	; (adr r3, 1138 <event_conn_upd_prep+0x300>)
    104a:	e9d3 2300 	ldrd	r2, r3, [r3]
    104e:	4630      	mov	r0, r6
    1050:	4659      	mov	r1, fp
    1052:	f7ff f855 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1056:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    1058:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    105c:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    105e:	4842      	ldr	r0, [pc, #264]	; (1168 <event_conn_upd_prep+0x330>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1060:	6923      	ldr	r3, [r4, #16]
    1062:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1064:	fba5 0100 	umull	r0, r1, r5, r0
    1068:	2307      	movs	r3, #7
    106a:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    106e:	4b3f      	ldr	r3, [pc, #252]	; (116c <event_conn_upd_prep+0x334>)
    1070:	9307      	str	r3, [sp, #28]
    1072:	4b3f      	ldr	r3, [pc, #252]	; (1170 <event_conn_upd_prep+0x338>)
    1074:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    1076:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1078:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    107c:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1080:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1086:	2300      	movs	r3, #0
    1088:	f7ff f83a 	bl	100 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    108c:	4643      	mov	r3, r8
    108e:	e9cd 5001 	strd	r5, r0, [sp, #4]
    1092:	9700      	str	r7, [sp, #0]
    1094:	4652      	mov	r2, sl
    1096:	2101      	movs	r1, #1
    1098:	2000      	movs	r0, #0
    109a:	f00b fd53 	bl	cb44 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    109e:	f030 0302 	bics.w	r3, r0, #2
    10a2:	d00c      	beq.n	10be <event_conn_upd_prep+0x286>
    10a4:	4a28      	ldr	r2, [pc, #160]	; (1148 <event_conn_upd_prep+0x310>)
    10a6:	492f      	ldr	r1, [pc, #188]	; (1164 <event_conn_upd_prep+0x32c>)
    10a8:	4829      	ldr	r0, [pc, #164]	; (1150 <event_conn_upd_prep+0x318>)
    10aa:	f640 3357 	movw	r3, #2903	; 0xb57
    10ae:	f01a fb61 	bl	1b774 <printk>
    10b2:	4040      	eors	r0, r0
    10b4:	f380 8811 	msr	BASEPRI, r0
    10b8:	f04f 0003 	mov.w	r0, #3
    10bc:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    10be:	f1b9 0f00 	cmp.w	r9, #0
    10c2:	f040 812e 	bne.w	1322 <event_conn_upd_prep+0x4ea>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    10c6:	2000      	movs	r0, #0
	}

	return -EINPROGRESS;
}
    10c8:	b00b      	add	sp, #44	; 0x2c
    10ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    10ce:	f890 20d9 	ldrb.w	r2, [r0, #217]	; 0xd9
    10d2:	2a00      	cmp	r2, #0
    10d4:	f43f aecf 	beq.w	e76 <event_conn_upd_prep+0x3e>
			conn->slave.llcp_type = LLCP_NONE;
    10d8:	f880 30d9 	strb.w	r3, [r0, #217]	; 0xd9
    10dc:	e6cf      	b.n	e7e <event_conn_upd_prep+0x46>
		if ((conn->llcp_cu.interval != lll->interval) ||
    10de:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    10e0:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    10e2:	f8b4 1114 	ldrh.w	r1, [r4, #276]	; 0x114
		if ((conn->llcp_cu.interval != lll->interval) ||
    10e6:	f47f aef7 	bne.w	ed8 <event_conn_upd_prep+0xa0>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    10ea:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    10ee:	fb0c fe03 	mul.w	lr, ip, r3
    10f2:	f242 7c10 	movw	ip, #10000	; 0x2710
    10f6:	fb0c ec01 	mla	ip, ip, r1, lr
    10fa:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    10fe:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    1102:	f8b4 e0c2 	ldrh.w	lr, [r4, #194]	; 0xc2
    1106:	fa1f fc8c 	uxth.w	ip, ip
    110a:	45e6      	cmp	lr, ip
    110c:	f47f aee4 	bne.w	ed8 <event_conn_upd_prep+0xa0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    1110:	2301      	movs	r3, #1
    1112:	712b      	strb	r3, [r5, #4]
    1114:	e6eb      	b.n	eee <event_conn_upd_prep+0xb6>
		LL_ASSERT(rx && rx->hdr.link);
    1116:	4a0c      	ldr	r2, [pc, #48]	; (1148 <event_conn_upd_prep+0x310>)
    1118:	4916      	ldr	r1, [pc, #88]	; (1174 <event_conn_upd_prep+0x33c>)
    111a:	480d      	ldr	r0, [pc, #52]	; (1150 <event_conn_upd_prep+0x318>)
    111c:	f640 2392 	movw	r3, #2706	; 0xa92
    1120:	f01a fb28 	bl	1b774 <printk>
    1124:	4040      	eors	r0, r0
    1126:	f380 8811 	msr	BASEPRI, r0
    112a:	f04f 0003 	mov.w	r0, #3
    112e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    1130:	6828      	ldr	r0, [r5, #0]
    1132:	e6c4      	b.n	ebe <event_conn_upd_prep+0x86>
    1134:	f3af 8000 	nop.w
    1138:	1afd498d 	.word	0x1afd498d
    113c:	00000007 	.word	0x00000007
    1140:	20001f50 	.word	0x20001f50
    1144:	3b9aca00 	.word	0x3b9aca00
    1148:	00021da4 	.word	0x00021da4
    114c:	000218a4 	.word	0x000218a4
    1150:	0002180c 	.word	0x0002180c
    1154:	026259ff 	.word	0x026259ff
    1158:	01c9c37f 	.word	0x01c9c37f
    115c:	20001020 	.word	0x20001020
    1160:	00010769 	.word	0x00010769
    1164:	00021e84 	.word	0x00021e84
    1168:	1afd498d 	.word	0x1afd498d
    116c:	00010711 	.word	0x00010711
    1170:	00014eed 	.word	0x00014eed
    1174:	00021e70 	.word	0x00021e70
		rx = ll_pdu_rx_alloc_peek(1);
    1178:	2001      	movs	r0, #1
    117a:	f00e f8af 	bl	f2dc <ll_pdu_rx_alloc_peek>
		if (!rx) {
    117e:	4607      	mov	r7, r0
    1180:	2800      	cmp	r0, #0
    1182:	f000 80e2 	beq.w	134a <event_conn_upd_prep+0x512>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1186:	487e      	ldr	r0, [pc, #504]	; (1380 <event_conn_upd_prep+0x548>)
    1188:	f00a faca 	bl	b720 <mem_acquire>
		if (!tx) {
    118c:	4605      	mov	r5, r0
    118e:	2800      	cmp	r0, #0
    1190:	f000 80db 	beq.w	134a <event_conn_upd_prep+0x512>
	if (!conn_upd_curr) {
    1194:	4b7b      	ldr	r3, [pc, #492]	; (1384 <event_conn_upd_prep+0x54c>)
    1196:	681a      	ldr	r2, [r3, #0]
    1198:	2a00      	cmp	r2, #0
    119a:	f000 80ce 	beq.w	133a <event_conn_upd_prep+0x502>
		(void)ll_pdu_rx_alloc();
    119e:	f00e f8bb 	bl	f318 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11a2:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    11a4:	683a      	ldr	r2, [r7, #0]
    11a6:	f8d4 1108 	ldr.w	r1, [r4, #264]	; 0x108
    11aa:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11ac:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    11b0:	f8c4 7108 	str.w	r7, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    11b4:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    11b6:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    11b8:	230c      	movs	r3, #12
    11ba:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    11bc:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    11be:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
    11c2:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
    11c4:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    11c6:	f8d4 2118 	ldr.w	r2, [r4, #280]	; 0x118
		conn->llcp.conn_upd.instant = event_counter +
    11ca:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    11cc:	4b6e      	ldr	r3, [pc, #440]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
    11ce:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    11d2:	f8b4 3110 	ldrh.w	r3, [r4, #272]	; 0x110
    11d6:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    11da:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    11dc:	f8b4 3112 	ldrh.w	r3, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    11e0:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    11e4:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    11e8:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    11ec:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    11f0:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    11f4:	3606      	adds	r6, #6
	    conn->tx_head &&
    11f6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
					      conn->lll.latency + 6;
    11fa:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    11fc:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    1200:	f8a4 60e8 	strh.w	r6, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    1204:	f884 210e 	strb.w	r2, [r4, #270]	; 0x10e
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    1208:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    120c:	b1c3      	cbz	r3, 1240 <event_conn_upd_prep+0x408>
	    !conn->llcp_enc.pause_tx &&
    120e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
    1212:	0790      	lsls	r0, r2, #30
    1214:	d414      	bmi.n	1240 <event_conn_upd_prep+0x408>
	    !conn->llcp_phy.pause_tx &&
    1216:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
    121a:	07d1      	lsls	r1, r2, #31
    121c:	d410      	bmi.n	1240 <event_conn_upd_prep+0x408>
		if (conn->tx_head == conn->tx_data) {
    121e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
    1222:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
    1224:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
    1228:	f000 8092 	beq.w	1350 <event_conn_upd_prep+0x518>
		} else if (!conn->tx_ctrl) {
    122c:	b962      	cbnz	r2, 1248 <event_conn_upd_prep+0x410>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    122e:	791a      	ldrb	r2, [r3, #4]
    1230:	f002 0203 	and.w	r2, r2, #3
    1234:	2a03      	cmp	r2, #3
    1236:	f000 8098 	beq.w	136a <event_conn_upd_prep+0x532>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
    123a:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
    123e:	e005      	b.n	124c <event_conn_upd_prep+0x414>
		if (!conn->tx_ctrl) {
    1240:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    1244:	2a00      	cmp	r2, #0
    1246:	d07a      	beq.n	133e <event_conn_upd_prep+0x506>
	tx->next = conn->tx_ctrl_last->next;
    1248:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
    124c:	681a      	ldr	r2, [r3, #0]
    124e:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1250:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1252:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    1254:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
    1258:	b90b      	cbnz	r3, 125e <event_conn_upd_prep+0x426>
		conn->tx_data_last = tx;
    125a:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
	return -EINPROGRESS;
    125e:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    1262:	b00b      	add	sp, #44	; 0x2c
    1264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    1268:	fb05 0111 	mls	r1, r5, r1, r0
    126c:	f240 43e2 	movw	r3, #1250	; 0x4e2
    1270:	4846      	ldr	r0, [pc, #280]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
    1272:	b289      	uxth	r1, r1
    1274:	fb03 f101 	mul.w	r1, r3, r1
    1278:	fba1 0100 	umull	r0, r1, r1, r0
    127c:	a33e      	add	r3, pc, #248	; (adr r3, 1378 <event_conn_upd_prep+0x540>)
    127e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1282:	f7fe ff3d 	bl	100 <__aeabi_uldivmod>
    1286:	eba8 0800 	sub.w	r8, r8, r0
    128a:	e663      	b.n	f54 <event_conn_upd_prep+0x11c>
				lll->slave.window_widening_periodic_us *
    128c:	6c22      	ldr	r2, [r4, #64]	; 0x40
			lll->slave.window_widening_prepare_us -=
    128e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    1290:	fb02 331b 	mls	r3, r2, fp, r3
    1294:	64a3      	str	r3, [r4, #72]	; 0x48
				(((lll_clock_ppm_local_get() +
    1296:	f015 fc47 	bl	16b28 <lll_clock_ppm_local_get>
    129a:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    129c:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
    12a0:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    12a4:	f015 fc42 	bl	16b2c <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    12a8:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    12aa:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    12ae:	4b38      	ldr	r3, [pc, #224]	; (1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    12b0:	f894 211c 	ldrb.w	r2, [r4, #284]	; 0x11c
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    12b4:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    12b8:	f205 253f 	addw	r5, r5, #575	; 0x23f
    12bc:	fba3 3505 	umull	r3, r5, r3, r5
    12c0:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    12c2:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
    12c6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			lll->slave.window_size_prepare_us =
    12c8:	6522      	str	r2, [r4, #80]	; 0x50
				lll->slave.window_widening_periodic_us *
    12ca:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    12ce:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    12d0:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    12d2:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    12d4:	4293      	cmp	r3, r2
    12d6:	bf28      	it	cs
    12d8:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
    12da:	6425      	str	r5, [r4, #64]	; 0x40
			periodic_us -= lll->slave.window_widening_periodic_us;
    12dc:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    12e0:	4d2a      	ldr	r5, [pc, #168]	; (138c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4>)
			lll->slave.window_widening_prepare_us +=
    12e2:	e9c4 2311 	strd	r2, r3, [r4, #68]	; 0x44
			conn->slave.ticks_to_offset = 0U;
    12e6:	2300      	movs	r3, #0
    12e8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    12ec:	fba0 0105 	umull	r0, r1, r0, r5
    12f0:	a321      	add	r3, pc, #132	; (adr r3, 1378 <event_conn_upd_prep+0x540>)
    12f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    12f6:	f7fe ff03 	bl	100 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    12fa:	4923      	ldr	r1, [pc, #140]	; (1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    12fc:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    1300:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
    1304:	fba1 3000 	umull	r3, r0, r1, r0
    1308:	0a80      	lsrs	r0, r0, #10
    130a:	fb07 f000 	mul.w	r0, r7, r0
    130e:	a31a      	add	r3, pc, #104	; (adr r3, 1378 <event_conn_upd_prep+0x540>)
    1310:	e9d3 2300 	ldrd	r2, r3, [r3]
    1314:	fba0 0105 	umull	r0, r1, r0, r5
    1318:	f7fe fef2 	bl	100 <__aeabi_uldivmod>
    131c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    1320:	e637      	b.n	f92 <event_conn_upd_prep+0x15a>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    1322:	2201      	movs	r2, #1
    1324:	2102      	movs	r1, #2
    1326:	4610      	mov	r0, r2
    1328:	f00a faa0 	bl	b86c <mayfly_enable>
    132c:	e6cb      	b.n	10c6 <event_conn_upd_prep+0x28e>
			conn->procedure_expire = 0U;
    132e:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1330:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
			conn->procedure_expire = 0U;
    1334:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
    1338:	e5b2      	b.n	ea0 <event_conn_upd_prep+0x68>
		conn_upd_curr = conn;
    133a:	601c      	str	r4, [r3, #0]
    133c:	e72f      	b.n	119e <event_conn_upd_prep+0x366>
			tx->next = conn->tx_head;
    133e:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    1340:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
    1344:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
    1348:	e786      	b.n	1258 <event_conn_upd_prep+0x420>
			return -ENOBUFS;
    134a:	f06f 0068 	mvn.w	r0, #104	; 0x68
    134e:	e6bb      	b.n	10c8 <event_conn_upd_prep+0x290>
			conn->tx_data = conn->tx_data->next;
    1350:	6819      	ldr	r1, [r3, #0]
    1352:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
    1356:	2a00      	cmp	r2, #0
    1358:	f47f af76 	bne.w	1248 <event_conn_upd_prep+0x410>
			tx->next = conn->tx_head->next;
    135c:	681a      	ldr	r2, [r3, #0]
    135e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    1360:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    1362:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    1364:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
    1368:	e776      	b.n	1258 <event_conn_upd_prep+0x420>
	    ((pdu_data_tx->llctrl.opcode !=
    136a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    136c:	2a03      	cmp	r2, #3
    136e:	d0f5      	beq.n	135c <event_conn_upd_prep+0x524>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    1370:	2a0a      	cmp	r2, #10
    1372:	f47f af62 	bne.w	123a <event_conn_upd_prep+0x402>
    1376:	e7f1      	b.n	135c <event_conn_upd_prep+0x524>
    1378:	1afd498d 	.word	0x1afd498d
    137c:	00000007 	.word	0x00000007
    1380:	20001fdc 	.word	0x20001fdc
    1384:	20001f50 	.word	0x20001f50
    1388:	d1b71759 	.word	0xd1b71759
    138c:	3b9aca00 	.word	0x3b9aca00
    1390:	431bde83 	.word	0x431bde83
    1394:	00000000 	.word	0x00000000

00001398 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param);

void ull_slave_setup(struct node_rx_hdr *rx, struct node_rx_ftr *ftr,
		     struct lll_conn *lll)
{
    1398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t win_offset;
	memq_link_t *link;
	uint16_t timeout;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    139c:	680b      	ldr	r3, [r1, #0]
	conn = lll->hdr.parent;
    139e:	f8d2 a000 	ldr.w	sl, [r2]
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    13a2:	681b      	ldr	r3, [r3, #0]
{
    13a4:	b097      	sub	sp, #92	; 0x5c
    13a6:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    13a8:	930b      	str	r3, [sp, #44]	; 0x2c

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;

	peer_addr_type = pdu_adv->tx_addr;
    13aa:	7f03      	ldrb	r3, [r0, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    13ac:	f100 011e 	add.w	r1, r0, #30
	peer_addr_type = pdu_adv->tx_addr;
    13b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
{
    13b4:	4605      	mov	r5, r0
    13b6:	4617      	mov	r7, r2
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    13b8:	a814      	add	r0, sp, #80	; 0x50
    13ba:	2206      	movs	r2, #6
	peer_addr_type = pdu_adv->tx_addr;
    13bc:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    13c0:	f01c fb24 	bl	1da0c <memcpy>

#if defined(CONFIG_BT_CTLR_PRIVACY)
	uint8_t rl_idx = ftr->rl_idx;
    13c4:	f894 9012 	ldrb.w	r9, [r4, #18]

	if (rl_idx != FILTER_IDX_NONE) {
    13c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
		/* Get identity address */
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    13cc:	ae12      	add	r6, sp, #72	; 0x48
	if (rl_idx != FILTER_IDX_NONE) {
    13ce:	d059      	beq.n	1484 <ull_slave_setup+0xec>
		ll_rl_id_addr_get(rl_idx, &peer_addr_type, peer_id_addr);
    13d0:	4632      	mov	r2, r6
    13d2:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    13d6:	4648      	mov	r0, r9
    13d8:	f014 f8ac 	bl	15534 <ll_rl_id_addr_get>
		/* Mark it as identity address from RPA (0x02, 0x03) */
		peer_addr_type += 2;
    13dc:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    13e0:	3302      	adds	r3, #2
    13e2:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	}

	/* Use the link stored in the node rx to enqueue connection
	 * complete node rx towards LL context.
	 */
	link = rx->link;
    13e6:	4629      	mov	r1, r5
	memcpy(conn->peer_addr, peer_id_addr, sizeof(conn->peer_addr));
	conn->own_addr_type = own_addr_type;
	memcpy(conn->own_addr, own_addr, sizeof(conn->own_addr));
#endif /* CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN */

	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    13e8:	2203      	movs	r2, #3
	link = rx->link;
    13ea:	f851 3b2e 	ldr.w	r3, [r1], #46
    13ee:	930a      	str	r3, [sp, #40]	; 0x28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    13f0:	f107 0008 	add.w	r0, r7, #8
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    13f4:	f107 0b04 	add.w	fp, r7, #4
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    13f8:	f01c fb08 	bl	1da0c <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    13fc:	f107 0818 	add.w	r8, r7, #24
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    1400:	2204      	movs	r2, #4
    1402:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    1406:	4658      	mov	r0, fp
    1408:	f01c fb00 	bl	1da0c <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    140c:	2205      	movs	r2, #5
    140e:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    1412:	4640      	mov	r0, r8
    1414:	f01c fafa 	bl	1da0c <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1418:	4640      	mov	r0, r8
    141a:	2105      	movs	r1, #5
    141c:	f00a fb50 	bl	bac0 <util_ones_count_get>
    1420:	7f7b      	ldrb	r3, [r7, #29]
			       sizeof(lll->data_chan_map));
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1422:	f895 103f 	ldrb.w	r1, [r5, #63]	; 0x3f
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    1426:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    142a:	f360 0305 	bfi	r3, r0, #0, #6
    142e:	777b      	strb	r3, [r7, #29]
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1430:	f3c1 0304 	ubfx	r3, r1, #0, #5
    1434:	77bb      	strb	r3, [r7, #30]
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1436:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
    143a:	f8a7 800e 	strh.w	r8, [r7, #14]
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    143e:	2801      	cmp	r0, #1
	lll->interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    1440:	fa1f f288 	uxth.w	r2, r8
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    1444:	f001 031f 	and.w	r3, r1, #31
	if ((lll->data_chan_count < 2) || (lll->data_chan_hop < 5) ||
    1448:	d905      	bls.n	1456 <ull_slave_setup+0xbe>
    144a:	331b      	adds	r3, #27
    144c:	f003 031f 	and.w	r3, r3, #31
    1450:	2b0b      	cmp	r3, #11
    1452:	d800      	bhi.n	1456 <ull_slave_setup+0xbe>
	    (lll->data_chan_hop > 16) || !lll->interval) {
    1454:	b9e2      	cbnz	r2, 1490 <ull_slave_setup+0xf8>
		lll->slave.initiated = 0U;
    1456:	f897 3020 	ldrb.w	r3, [r7, #32]
			 * connection rx node.
			 */
			rx_csa = (void *)ftr->extra;

			/* Enqueue the connection event to be release */
			ll_rx_put(link, rx);
    145a:	980a      	ldr	r0, [sp, #40]	; 0x28
		lll->slave.initiated = 0U;
    145c:	f36f 0300 	bfc	r3, #0, #1
		rx->type = NODE_RX_TYPE_RELEASE;
    1460:	2601      	movs	r6, #1
		lll->slave.initiated = 0U;
    1462:	f887 3020 	strb.w	r3, [r7, #32]
		rx->type = NODE_RX_TYPE_RELEASE;
    1466:	712e      	strb	r6, [r5, #4]
			rx_csa = (void *)ftr->extra;
    1468:	6864      	ldr	r4, [r4, #4]
			ll_rx_put(link, rx);
    146a:	4629      	mov	r1, r5
    146c:	f00d ff26 	bl	f2bc <ll_rx_put>
			/* Mark for buffer for release */
			rx->type = NODE_RX_TYPE_RELEASE;
		}

		/* Enqueue connection or CSA event to be release */
		ll_rx_put(link, rx);
    1470:	6820      	ldr	r0, [r4, #0]
			rx->type = NODE_RX_TYPE_RELEASE;
    1472:	7126      	strb	r6, [r4, #4]
		ll_rx_put(link, rx);
    1474:	4621      	mov	r1, r4
    1476:	f00d ff21 	bl	f2bc <ll_rx_put>
		ll_rx_sched();
    147a:	f00d ff29 	bl	f2d0 <ll_rx_sched>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    147e:	b017      	add	sp, #92	; 0x5c
    1480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(peer_id_addr, peer_addr, BDADDR_SIZE);
    1484:	2206      	movs	r2, #6
    1486:	a914      	add	r1, sp, #80	; 0x50
    1488:	4630      	mov	r0, r6
    148a:	f01c fabf 	bl	1da0c <memcpy>
    148e:	e7aa      	b.n	13e6 <ull_slave_setup+0x4e>
	((struct lll_adv *)ftr->param)->conn = NULL;
    1490:	6823      	ldr	r3, [r4, #0]
    1492:	2000      	movs	r0, #0
    1494:	6058      	str	r0, [r3, #4]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    1496:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
    149a:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
    149e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    14a2:	823b      	strh	r3, [r7, #16]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    14a4:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
    14a8:	0949      	lsrs	r1, r1, #5
    14aa:	f361 03c5 	bfi	r3, r1, #3, #3
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    14ae:	8e69      	ldrh	r1, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    14b0:	f88a 30d8 	strb.w	r3, [sl, #216]	; 0xd8
	conn_interval_us = lll->interval * CONN_INT_UNIT_US;
    14b4:	f240 43e2 	movw	r3, #1250	; 0x4e2
    14b8:	fb03 f802 	mul.w	r8, r3, r2
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    14bc:	910d      	str	r1, [sp, #52]	; 0x34
		(((lll_clock_ppm_local_get() +
    14be:	f015 fb33 	bl	16b28 <lll_clock_ppm_local_get>
    14c2:	900c      	str	r0, [sp, #48]	; 0x30
		   lll_clock_ppm_get(conn->slave.sca)) *
    14c4:	f89a 00d8 	ldrb.w	r0, [sl, #216]	; 0xd8
    14c8:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    14cc:	f015 fb2e 	bl	16b2c <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    14d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    14d2:	49bb      	ldr	r1, [pc, #748]	; (17c0 <ull_slave_setup+0x428>)
		(((lll_clock_ppm_local_get() +
    14d4:	4402      	add	r2, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    14d6:	fb08 f202 	mul.w	r2, r8, r2
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    14da:	f502 2274 	add.w	r2, r2, #999424	; 0xf4000
    14de:	f202 223f 	addw	r2, r2, #575	; 0x23f
    14e2:	fba1 3202 	umull	r3, r2, r1, r2
    14e6:	0c92      	lsrs	r2, r2, #18
	lll->slave.window_widening_periodic_us =
    14e8:	627a      	str	r2, [r7, #36]	; 0x24
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    14ea:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    14ee:	8a39      	ldrh	r1, [r7, #16]
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    14f0:	f240 43e2 	movw	r3, #1250	; 0x4e2
    14f4:	fb02 f303 	mul.w	r3, r2, r3
    14f8:	63bb      	str	r3, [r7, #56]	; 0x38
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    14fa:	ea4f 0358 	mov.w	r3, r8, lsr #1
    14fe:	3b96      	subs	r3, #150	; 0x96
    1500:	62bb      	str	r3, [r7, #40]	; 0x28
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1502:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1504:	4aaf      	ldr	r2, [pc, #700]	; (17c4 <ull_slave_setup+0x42c>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1506:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
    150a:	4618      	mov	r0, r3
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    150c:	4442      	add	r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    150e:	4bae      	ldr	r3, [pc, #696]	; (17c8 <ull_slave_setup+0x430>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1510:	fbb2 f2f8 	udiv	r2, r2, r8
    1514:	f8aa 20c6 	strh.w	r2, [sl, #198]	; 0xc6
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    1518:	b282      	uxth	r2, r0
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    151a:	f242 7010 	movw	r0, #10000	; 0x2710
    151e:	fb00 8202 	mla	r2, r0, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1522:	4443      	add	r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1524:	3a01      	subs	r2, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1526:	1d88      	adds	r0, r1, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1528:	fbb2 f2f8 	udiv	r2, r2, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    152c:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    1530:	f8aa 20c2 	strh.w	r2, [sl, #194]	; 0xc2
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1534:	b29a      	uxth	r2, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1536:	4282      	cmp	r2, r0
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1538:	f8aa 20ce 	strh.w	r2, [sl, #206]	; 0xce
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    153c:	dd02      	ble.n	1544 <ull_slave_setup+0x1ac>
			     (conn->apto_reload - (lll->latency + 6)) :
    153e:	1a52      	subs	r2, r2, r1
    1540:	3a06      	subs	r2, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1542:	b292      	uxth	r2, r2
    1544:	f8aa 20ca 	strh.w	r2, [sl, #202]	; 0xca
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    1548:	4659      	mov	r1, fp
    154a:	2204      	movs	r2, #4
    154c:	f10a 00dc 	add.w	r0, sl, #220	; 0xdc
    1550:	f01c fa5c 	bl	1da0c <memcpy>
	cc->status = 0U;
    1554:	f44f 7280 	mov.w	r2, #256	; 0x100
		chan_sel = pdu_adv->chan_sel;
    1558:	7f2b      	ldrb	r3, [r5, #28]
	cc->status = 0U;
    155a:	83aa      	strh	r2, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    155c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    155e:	f892 0026 	ldrb.w	r0, [r2, #38]	; 0x26
		chan_sel = pdu_adv->chan_sel;
    1562:	f3c3 1240 	ubfx	r2, r3, #5, #1
    1566:	920f      	str	r2, [sp, #60]	; 0x3c
    1568:	920c      	str	r2, [sp, #48]	; 0x30
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    156a:	f014 fd4b 	bl	16004 <ull_filter_lll_lrpa_used>
    156e:	2800      	cmp	r0, #0
    1570:	f000 80eb 	beq.w	174a <ull_slave_setup+0x3b2>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    1574:	2206      	movs	r2, #6
    1576:	f105 0124 	add.w	r1, r5, #36	; 0x24
    157a:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    157e:	f01c fa45 	bl	1da0c <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    1582:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    1586:	f000 80e7 	beq.w	1758 <ull_slave_setup+0x3c0>
		memcpy(cc->peer_rpa, peer_addr, BDADDR_SIZE);
    158a:	a914      	add	r1, sp, #80	; 0x50
    158c:	2206      	movs	r2, #6
    158e:	f105 0025 	add.w	r0, r5, #37	; 0x25
    1592:	f01c fa3b 	bl	1da0c <memcpy>
	cc->peer_addr_type = peer_addr_type;
    1596:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
    159a:	77ab      	strb	r3, [r5, #30]
	memcpy(cc->peer_addr, peer_id_addr, BDADDR_SIZE);
    159c:	4631      	mov	r1, r6
    159e:	2206      	movs	r2, #6
    15a0:	f105 001f 	add.w	r0, r5, #31
    15a4:	f01c fa32 	bl	1da0c <memcpy>
	cc->sca = conn->slave.sca;
    15a8:	f89a 30d8 	ldrb.w	r3, [sl, #216]	; 0xd8
	cc->interval = lll->interval;
    15ac:	89fa      	ldrh	r2, [r7, #14]
    15ae:	866a      	strh	r2, [r5, #50]	; 0x32
	cc->latency = lll->latency;
    15b0:	8a3a      	ldrh	r2, [r7, #16]
    15b2:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    15b4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	cc->timeout = timeout;
    15b8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
	cc->sca = conn->slave.sca;
    15bc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    15c0:	86ea      	strh	r2, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    15c2:	4650      	mov	r0, sl
    15c4:	f00f fca8 	bl	10f18 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    15c8:	4629      	mov	r1, r5
	lll->handle = ll_conn_handle_get(conn);
    15ca:	81b8      	strh	r0, [r7, #12]
	rx->handle = lll->handle;
    15cc:	80e8      	strh	r0, [r5, #6]
		rx_csa = (void *)ftr->extra;
    15ce:	6865      	ldr	r5, [r4, #4]
		ll_rx_put(link, rx);
    15d0:	980a      	ldr	r0, [sp, #40]	; 0x28
    15d2:	f00d fe73 	bl	f2bc <ll_rx_put>
		rx->handle = lll->handle;
    15d6:	89bb      	ldrh	r3, [r7, #12]
    15d8:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    15da:	2319      	movs	r3, #25
    15dc:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    15de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
		link = rx->link;
    15e0:	682e      	ldr	r6, [r5, #0]
		if (chan_sel) {
    15e2:	2b00      	cmp	r3, #0
    15e4:	f040 80c7 	bne.w	1776 <ull_slave_setup+0x3de>
			cs->csa = 0x00;
    15e8:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    15ec:	772b      	strb	r3, [r5, #28]
	ll_rx_put(link, rx);
    15ee:	4629      	mov	r1, r5
    15f0:	4630      	mov	r0, r6
    15f2:	f00d fe63 	bl	f2bc <ll_rx_put>
	ll_rx_sched();
    15f6:	f00d fe6b 	bl	f2d0 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    15fa:	f897 0045 	ldrb.w	r0, [r7, #69]	; 0x45
	max_tx_time = lll->max_tx_time;
    15fe:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
	max_rx_time = lll->max_rx_time;
    1602:	f8b7 6042 	ldrh.w	r6, [r7, #66]	; 0x42
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1606:	2101      	movs	r1, #1
    1608:	f000 0007 	and.w	r0, r0, #7
    160c:	f015 f89e 	bl	1674c <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1610:	442e      	add	r6, r5
    1612:	f506 76e1 	add.w	r6, r6, #450	; 0x1c2
    1616:	1831      	adds	r1, r6, r0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    1618:	4681      	mov	r9, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    161a:	486c      	ldr	r0, [pc, #432]	; (17cc <ull_slave_setup+0x434>)
	conn->ull.ticks_active_to_start = 0U;
    161c:	2600      	movs	r6, #0
	conn->ull.ticks_prepare_to_start =
    161e:	2331      	movs	r3, #49	; 0x31
    1620:	f8ca 3008 	str.w	r3, [sl, #8]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1624:	fba1 0100 	umull	r0, r1, r1, r0
    1628:	a363      	add	r3, pc, #396	; (adr r3, 17b8 <ull_slave_setup+0x420>)
    162a:	e9d3 2300 	ldrd	r2, r3, [r3]
	conn->ull.ticks_active_to_start = 0U;
    162e:	f8ca 6004 	str.w	r6, [sl, #4]
	conn->ull.ticks_preempt_to_start =
    1632:	f8ca 600c 	str.w	r6, [sl, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1636:	f7fe fd63 	bl	100 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    163c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	conn_offset_us = ftr->radio_end_us;
    163e:	68e5      	ldr	r5, [r4, #12]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    1640:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    1644:	eba8 0803 	sub.w	r8, r8, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    1648:	f240 43e2 	movw	r3, #1250	; 0x4e2
    164c:	fb03 5502 	mla	r5, r3, r2, r5
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1650:	2102      	movs	r1, #2
    1652:	4632      	mov	r2, r6
	conn->ull.ticks_slot =
    1654:	f8ca 0010 	str.w	r0, [sl, #16]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    1658:	2001      	movs	r0, #1
    165a:	f00a f907 	bl	b86c <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    165e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    1660:	4638      	mov	r0, r7
    1662:	f00e fd17 	bl	10094 <ull_adv_handle_get>
    1666:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    1668:	4b59      	ldr	r3, [pc, #356]	; (17d0 <ull_slave_setup+0x438>)
    166a:	9700      	str	r7, [sp, #0]
    166c:	b2d2      	uxtb	r2, r2
    166e:	4630      	mov	r0, r6
    1670:	2101      	movs	r1, #1
    1672:	f00b faf1 	bl	cc58 <ticker_stop>
	conn_offset_us -= EVENT_JITTER_US;
    1676:	f205 45b2 	addw	r5, r5, #1202	; 0x4b2
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    167a:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    167c:	eba5 0509 	sub.w	r5, r5, r9
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    1680:	f000 8084 	beq.w	178c <ull_slave_setup+0x3f4>
	if (adv->lll.is_hdcd) {
    1684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1686:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    168a:	07db      	lsls	r3, r3, #31
    168c:	d46b      	bmi.n	1766 <ull_slave_setup+0x3ce>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    168e:	4650      	mov	r0, sl
    1690:	f00f fc42 	bl	10f18 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    1694:	f8df 9134 	ldr.w	r9, [pc, #308]	; 17cc <ull_slave_setup+0x434>
    1698:	fba8 8609 	umull	r8, r6, r8, r9
    169c:	a346      	add	r3, pc, #280	; (adr r3, 17b8 <ull_slave_setup+0x420>)
    169e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    16a2:	4683      	mov	fp, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    16a4:	4631      	mov	r1, r6
    16a6:	4640      	mov	r0, r8
    16a8:	f7fe fd2a 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16ac:	68a3      	ldr	r3, [r4, #8]
    16ae:	f8cd a018 	str.w	sl, [sp, #24]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    16b2:	f10b 0403 	add.w	r4, fp, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16b6:	f1a3 0b3a 	sub.w	fp, r3, #58	; 0x3a
    16ba:	4b46      	ldr	r3, [pc, #280]	; (17d4 <ull_slave_setup+0x43c>)
    16bc:	9307      	str	r3, [sp, #28]
    16be:	4b46      	ldr	r3, [pc, #280]	; (17d8 <ull_slave_setup+0x440>)
    16c0:	9305      	str	r3, [sp, #20]
    16c2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
    16c6:	9308      	str	r3, [sp, #32]
    16c8:	f8da 3010 	ldr.w	r3, [sl, #16]
    16cc:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16ce:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    16d2:	4842      	ldr	r0, [pc, #264]	; (17dc <ull_slave_setup+0x444>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16d4:	2300      	movs	r3, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16d6:	fba7 0100 	umull	r0, r1, r7, r0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16da:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    16dc:	2307      	movs	r3, #7
    16de:	ebb8 0000 	subs.w	r0, r8, r0
    16e2:	fb03 1107 	mla	r1, r3, r7, r1
    16e6:	eb66 0101 	sbc.w	r1, r6, r1
    16ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    16ee:	2300      	movs	r3, #0
    16f0:	f7fe fd06 	bl	100 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    16f4:	a330      	add	r3, pc, #192	; (adr r3, 17b8 <ull_slave_setup+0x420>)
    16f6:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    16fa:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    16fe:	fba5 0109 	umull	r0, r1, r5, r9
    1702:	f7fe fcfd 	bl	100 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1706:	b2e4      	uxtb	r4, r4
    1708:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    170c:	9000      	str	r0, [sp, #0]
    170e:	465b      	mov	r3, fp
    1710:	4622      	mov	r2, r4
    1712:	2101      	movs	r1, #1
    1714:	2000      	movs	r0, #0
    1716:	f00b fa15 	bl	cb44 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    171a:	f030 0302 	bics.w	r3, r0, #2
    171e:	d00c      	beq.n	173a <ull_slave_setup+0x3a2>
    1720:	4a2f      	ldr	r2, [pc, #188]	; (17e0 <ull_slave_setup+0x448>)
    1722:	4930      	ldr	r1, [pc, #192]	; (17e4 <ull_slave_setup+0x44c>)
    1724:	4830      	ldr	r0, [pc, #192]	; (17e8 <ull_slave_setup+0x450>)
    1726:	f240 13c3 	movw	r3, #451	; 0x1c3
    172a:	f01a f823 	bl	1b774 <printk>
    172e:	4040      	eors	r0, r0
    1730:	f380 8811 	msr	BASEPRI, r0
    1734:	f04f 0003 	mov.w	r0, #3
    1738:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    173a:	2201      	movs	r2, #1
    173c:	2102      	movs	r1, #2
    173e:	4610      	mov	r0, r2
    1740:	f00a f894 	bl	b86c <mayfly_enable>
}
    1744:	b017      	add	sp, #92	; 0x5c
    1746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    174a:	4601      	mov	r1, r0
    174c:	2206      	movs	r2, #6
    174e:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    1752:	f01c f966 	bl	1da22 <memset>
    1756:	e714      	b.n	1582 <ull_slave_setup+0x1ea>
		memset(cc->peer_rpa, 0x0, BDADDR_SIZE);
    1758:	2206      	movs	r2, #6
    175a:	2100      	movs	r1, #0
    175c:	f105 0025 	add.w	r0, r5, #37	; 0x25
    1760:	f01c f95f 	bl	1da22 <memset>
    1764:	e717      	b.n	1596 <ull_slave_setup+0x1fe>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    1766:	2300      	movs	r3, #0
    1768:	2201      	movs	r2, #1
    176a:	9300      	str	r3, [sp, #0]
    176c:	4618      	mov	r0, r3
    176e:	4611      	mov	r1, r2
    1770:	f00b fa72 	bl	cc58 <ticker_stop>
    1774:	e78b      	b.n	168e <ull_slave_setup+0x2f6>
			lll->data_chan_sel = 1;
    1776:	7f7b      	ldrb	r3, [r7, #29]
    1778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    177c:	777b      	strb	r3, [r7, #29]
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    177e:	4658      	mov	r0, fp
    1780:	f013 fcd0 	bl	15124 <lll_chan_id>
			cs->csa = 0x01;
    1784:	2301      	movs	r3, #1
			lll->data_chan_id = lll_chan_id(lll->access_addr);
    1786:	83f8      	strh	r0, [r7, #30]
			cs->csa = 0x01;
    1788:	772b      	strb	r3, [r5, #28]
    178a:	e730      	b.n	15ee <ull_slave_setup+0x256>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    178c:	f00d fe4c 	bl	f428 <ull_disable_mark_get>
    1790:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1792:	4283      	cmp	r3, r0
    1794:	f43f af76 	beq.w	1684 <ull_slave_setup+0x2ec>
    1798:	4a11      	ldr	r2, [pc, #68]	; (17e0 <ull_slave_setup+0x448>)
    179a:	4914      	ldr	r1, [pc, #80]	; (17ec <ull_slave_setup+0x454>)
    179c:	4812      	ldr	r0, [pc, #72]	; (17e8 <ull_slave_setup+0x450>)
    179e:	f240 235f 	movw	r3, #607	; 0x25f
    17a2:	f019 ffe7 	bl	1b774 <printk>
    17a6:	4040      	eors	r0, r0
    17a8:	f380 8811 	msr	BASEPRI, r0
    17ac:	f04f 0003 	mov.w	r0, #3
    17b0:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    17b2:	e767      	b.n	1684 <ull_slave_setup+0x2ec>
    17b4:	f3af 8000 	nop.w
    17b8:	1afd498d 	.word	0x1afd498d
    17bc:	00000007 	.word	0x00000007
    17c0:	431bde83 	.word	0x431bde83
    17c4:	026259ff 	.word	0x026259ff
    17c8:	01c9c37f 	.word	0x01c9c37f
    17cc:	3b9aca00 	.word	0x3b9aca00
    17d0:	00014eb1 	.word	0x00014eb1
    17d4:	00014e81 	.word	0x00014e81
    17d8:	00014eed 	.word	0x00014eed
    17dc:	1afd498d 	.word	0x1afd498d
    17e0:	00021fac 	.word	0x00021fac
    17e4:	00021e84 	.word	0x00021e84
    17e8:	0002180c 	.word	0x0002180c
    17ec:	00022004 	.word	0x00022004

000017f0 <config_leds>:
const struct device *b_led;
const struct device *g_led;
const struct device *r_led;

int config_leds(void) 
{
    17f0:	b570      	push	{r4, r5, r6, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    17f2:	4814      	ldr	r0, [pc, #80]	; (1844 <config_leds+0x54>)
    int ret;
    b_led = device_get_binding(LED_B);
    17f4:	4e14      	ldr	r6, [pc, #80]	; (1848 <config_leds+0x58>)
    17f6:	f018 fbf5 	bl	19fe4 <z_impl_device_get_binding>
    17fa:	6030      	str	r0, [r6, #0]
    17fc:	4811      	ldr	r0, [pc, #68]	; (1844 <config_leds+0x54>)
    g_led = device_get_binding(LED_G);
    17fe:	4c13      	ldr	r4, [pc, #76]	; (184c <config_leds+0x5c>)
    1800:	f018 fbf0 	bl	19fe4 <z_impl_device_get_binding>
    1804:	6020      	str	r0, [r4, #0]
    1806:	480f      	ldr	r0, [pc, #60]	; (1844 <config_leds+0x54>)
    r_led = device_get_binding(LED_R);
    1808:	4d11      	ldr	r5, [pc, #68]	; (1850 <config_leds+0x60>)
    180a:	f018 fbeb 	bl	19fe4 <z_impl_device_get_binding>
    180e:	4603      	mov	r3, r0
    1810:	6028      	str	r0, [r5, #0]
    if (b_led == NULL || g_led == NULL || r_led == NULL) {
    1812:	6830      	ldr	r0, [r6, #0]
    1814:	b198      	cbz	r0, 183e <config_leds+0x4e>
    1816:	6822      	ldr	r2, [r4, #0]
    1818:	b18a      	cbz	r2, 183e <config_leds+0x4e>
    181a:	b183      	cbz	r3, 183e <config_leds+0x4e>
        return -1;
    }

    ret = gpio_pin_configure(b_led, PIN_B, GPIO_OUTPUT_ACTIVE | FLAGS_B);
    181c:	210d      	movs	r1, #13
    181e:	f019 ff49 	bl	1b6b4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(g_led, PIN_G, GPIO_OUTPUT_ACTIVE | FLAGS_G);
    1822:	210e      	movs	r1, #14
    1824:	6820      	ldr	r0, [r4, #0]
    1826:	f019 ff45 	bl	1b6b4 <gpio_pin_configure.constprop.0>
    ret = gpio_pin_configure(r_led, PIN_R, GPIO_OUTPUT_ACTIVE | FLAGS_R);
    182a:	6828      	ldr	r0, [r5, #0]
    182c:	210f      	movs	r1, #15
    182e:	f019 ff41 	bl	1b6b4 <gpio_pin_configure.constprop.0>
    if (ret < 0) {
        return -2;
    1832:	2800      	cmp	r0, #0
    1834:	bfac      	ite	ge
    1836:	2000      	movge	r0, #0
    1838:	f06f 0001 	mvnlt.w	r0, #1
    }

    return 0;
}
    183c:	bd70      	pop	{r4, r5, r6, pc}
        return -1;
    183e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1842:	e7fb      	b.n	183c <config_leds+0x4c>
    1844:	00022774 	.word	0x00022774
    1848:	200013e0 	.word	0x200013e0
    184c:	200013e4 	.word	0x200013e4
    1850:	200013e8 	.word	0x200013e8

00001854 <set_led>:

void set_led(bool to, RGB_t color) 
{

    switch (color) {
    1854:	2901      	cmp	r1, #1
{
    1856:	4602      	mov	r2, r0
    switch (color) {
    1858:	d007      	beq.n	186a <set_led+0x16>
    185a:	2902      	cmp	r1, #2
    185c:	d008      	beq.n	1870 <set_led+0x1c>
    185e:	b951      	cbnz	r1, 1876 <set_led+0x22>
        case (BLUE):
            gpio_pin_set(b_led, PIN_B, (int)to);
    1860:	4b05      	ldr	r3, [pc, #20]	; (1878 <set_led+0x24>)
    1862:	210d      	movs	r1, #13
            break;
        case (GREEN):
            gpio_pin_set(g_led, PIN_G, (int)to);
            break;
        case (RED):
            gpio_pin_set(r_led, PIN_R, (int)to);
    1864:	6818      	ldr	r0, [r3, #0]
    1866:	f019 bf33 	b.w	1b6d0 <gpio_pin_set.isra.0>
            gpio_pin_set(g_led, PIN_G, (int)to);
    186a:	4b04      	ldr	r3, [pc, #16]	; (187c <set_led+0x28>)
    186c:	210e      	movs	r1, #14
    186e:	e7f9      	b.n	1864 <set_led+0x10>
            gpio_pin_set(r_led, PIN_R, (int)to);
    1870:	4b03      	ldr	r3, [pc, #12]	; (1880 <set_led+0x2c>)
    1872:	210f      	movs	r1, #15
    1874:	e7f6      	b.n	1864 <set_led+0x10>
            break;
    }

    1876:	4770      	bx	lr
    1878:	200013e0 	.word	0x200013e0
    187c:	200013e4 	.word	0x200013e4
    1880:	200013e8 	.word	0x200013e8

00001884 <custom_ccc_cfg_changed>:

	return len;
}

static void custom_ccc_cfg_changed(const struct bt_gatt_attr *attr, uint16_t value)
{
    1884:	b510      	push	{r4, lr}
	printk("CCC Changed to %i\n", value);
    1886:	4805      	ldr	r0, [pc, #20]	; (189c <custom_ccc_cfg_changed+0x18>)
{
    1888:	460c      	mov	r4, r1
	printk("CCC Changed to %i\n", value);
    188a:	f019 ff73 	bl	1b774 <printk>

	custom_chrc_notify = (value == BT_GATT_CCC_NOTIFY) ? 1 : 0;
    188e:	1e63      	subs	r3, r4, #1
    1890:	425c      	negs	r4, r3
    1892:	415c      	adcs	r4, r3
    1894:	4b02      	ldr	r3, [pc, #8]	; (18a0 <custom_ccc_cfg_changed+0x1c>)
    1896:	701c      	strb	r4, [r3, #0]
}
    1898:	bd10      	pop	{r4, pc}
    189a:	bf00      	nop
    189c:	0002277b 	.word	0x0002277b
    18a0:	2000290c 	.word	0x2000290c

000018a4 <mtu_updated>:
	BT_DATA_BYTES(BT_DATA_UUID128_ALL, BT_UUID_CUSTOM_SERVICE_VAL),
};

void mtu_updated(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
	printk("Updated MTU: TX: %d RX: %d bytes\n", tx, rx);
    18a4:	4801      	ldr	r0, [pc, #4]	; (18ac <mtu_updated+0x8>)
    18a6:	f019 bf65 	b.w	1b774 <printk>
    18aa:	bf00      	nop
    18ac:	0002278e 	.word	0x0002278e

000018b0 <data_len_updated>:
	printk("TX Phy Updated: %i\n", param->tx_phy);
	printk("RX Phy Updated: %i\n", param->rx_phy);
}

static void data_len_updated(struct bt_conn *conn, struct bt_conn_le_data_len_info *info)
{
    18b0:	b510      	push	{r4, lr}
    18b2:	460c      	mov	r4, r1
	uint16_t tx_max_len;
	uint16_t tx_max_time;
	uint16_t rx_max_len;
	uint16_t rx_max_time;
	*/
	printk("Updated tx max len: %i\n", info->tx_max_len);
    18b4:	4808      	ldr	r0, [pc, #32]	; (18d8 <data_len_updated+0x28>)
    18b6:	8809      	ldrh	r1, [r1, #0]
    18b8:	f019 ff5c 	bl	1b774 <printk>
	printk("Updated tx max time: %i\n", info->tx_max_time);
    18bc:	8861      	ldrh	r1, [r4, #2]
    18be:	4807      	ldr	r0, [pc, #28]	; (18dc <data_len_updated+0x2c>)
    18c0:	f019 ff58 	bl	1b774 <printk>
	printk("Updated rx max len: %i\n", info->rx_max_len);
    18c4:	88a1      	ldrh	r1, [r4, #4]
    18c6:	4806      	ldr	r0, [pc, #24]	; (18e0 <data_len_updated+0x30>)
    18c8:	f019 ff54 	bl	1b774 <printk>
	printk("Updated rx max time: %i\n", info->rx_max_time);
    18cc:	88e1      	ldrh	r1, [r4, #6]
    18ce:	4805      	ldr	r0, [pc, #20]	; (18e4 <data_len_updated+0x34>)
}
    18d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("Updated rx max time: %i\n", info->rx_max_time);
    18d4:	f019 bf4e 	b.w	1b774 <printk>
    18d8:	000227b0 	.word	0x000227b0
    18dc:	000227c8 	.word	0x000227c8
    18e0:	000227e1 	.word	0x000227e1
    18e4:	000227f9 	.word	0x000227f9

000018e8 <phy_updated>:
{
    18e8:	b510      	push	{r4, lr}
    18ea:	460c      	mov	r4, r1
	printk("TX Phy Updated: %i\n", param->tx_phy);
    18ec:	4804      	ldr	r0, [pc, #16]	; (1900 <phy_updated+0x18>)
    18ee:	7809      	ldrb	r1, [r1, #0]
    18f0:	f019 ff40 	bl	1b774 <printk>
	printk("RX Phy Updated: %i\n", param->rx_phy);
    18f4:	7861      	ldrb	r1, [r4, #1]
    18f6:	4803      	ldr	r0, [pc, #12]	; (1904 <phy_updated+0x1c>)
}
    18f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printk("RX Phy Updated: %i\n", param->rx_phy);
    18fc:	f019 bf3a 	b.w	1b774 <printk>
    1900:	00022812 	.word	0x00022812
    1904:	00022826 	.word	0x00022826

00001908 <param_update>:
{
    1908:	b538      	push	{r3, r4, r5, lr}
	printk("Updated min interval: %i\n", interval);
    190a:	4807      	ldr	r0, [pc, #28]	; (1928 <param_update+0x20>)
{
    190c:	4615      	mov	r5, r2
    190e:	461c      	mov	r4, r3
	printk("Updated min interval: %i\n", interval);
    1910:	f019 ff30 	bl	1b774 <printk>
	printk("Updated latency: %i\n", latency);
    1914:	4629      	mov	r1, r5
    1916:	4805      	ldr	r0, [pc, #20]	; (192c <param_update+0x24>)
    1918:	f019 ff2c 	bl	1b774 <printk>
	printk("Updated timout: %i\n", timeout);
    191c:	4621      	mov	r1, r4
    191e:	4804      	ldr	r0, [pc, #16]	; (1930 <param_update+0x28>)
}
    1920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printk("Updated timout: %i\n", timeout);
    1924:	f019 bf26 	b.w	1b774 <printk>
    1928:	0002283a 	.word	0x0002283a
    192c:	00022854 	.word	0x00022854
    1930:	00022869 	.word	0x00022869

00001934 <param_req>:
{
    1934:	b510      	push	{r4, lr}
    1936:	460c      	mov	r4, r1
	printk("Requesting min interval: %i\n", param->interval_min);
    1938:	4808      	ldr	r0, [pc, #32]	; (195c <param_req+0x28>)
    193a:	8809      	ldrh	r1, [r1, #0]
    193c:	f019 ff1a 	bl	1b774 <printk>
	printk("Requesting max interval: %i\n", param->interval_max);
    1940:	8861      	ldrh	r1, [r4, #2]
    1942:	4807      	ldr	r0, [pc, #28]	; (1960 <param_req+0x2c>)
    1944:	f019 ff16 	bl	1b774 <printk>
	printk("Requesting latency: %i\n", param->latency);
    1948:	88a1      	ldrh	r1, [r4, #4]
    194a:	4806      	ldr	r0, [pc, #24]	; (1964 <param_req+0x30>)
    194c:	f019 ff12 	bl	1b774 <printk>
	printk("Requesting timout: %i\n", param->timeout);
    1950:	88e1      	ldrh	r1, [r4, #6]
    1952:	4805      	ldr	r0, [pc, #20]	; (1968 <param_req+0x34>)
    1954:	f019 ff0e 	bl	1b774 <printk>
}
    1958:	2001      	movs	r0, #1
    195a:	bd10      	pop	{r4, pc}
    195c:	0002287d 	.word	0x0002287d
    1960:	0002289a 	.word	0x0002289a
    1964:	000228b7 	.word	0x000228b7
    1968:	000228cf 	.word	0x000228cf

0000196c <write_custom>:
{
    196c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1970:	460e      	mov	r6, r1
    1972:	f8bd 8018 	ldrh.w	r8, [sp, #24]
	printk("Write custom\n");
    1976:	480c      	ldr	r0, [pc, #48]	; (19a8 <write_custom+0x3c>)
{
    1978:	461c      	mov	r4, r3
    197a:	4615      	mov	r5, r2
	printk("Write custom\n");
    197c:	f019 fefa 	bl	1b774 <printk>
	uint8_t *value = attr->user_data;
    1980:	68f7      	ldr	r7, [r6, #12]
	if (offset + len > CUSTOM_MAX_LEN) {
    1982:	eb08 0604 	add.w	r6, r8, r4
    1986:	2e14      	cmp	r6, #20
    1988:	dc0a      	bgt.n	19a0 <write_custom+0x34>
	memcpy(value + offset, buf, len);
    198a:	4622      	mov	r2, r4
    198c:	4629      	mov	r1, r5
    198e:	eb07 0008 	add.w	r0, r7, r8
    1992:	f01c f83b 	bl	1da0c <memcpy>
	value[offset + len] = 0;
    1996:	2300      	movs	r3, #0
    1998:	55bb      	strb	r3, [r7, r6]
}
    199a:	4620      	mov	r0, r4
    199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    19a0:	f06f 0406 	mvn.w	r4, #6
    19a4:	e7f9      	b.n	199a <write_custom+0x2e>
    19a6:	bf00      	nop
    19a8:	000228e6 	.word	0x000228e6

000019ac <read_custom>:
{
    19ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
    19b0:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
    19b4:	4605      	mov	r5, r0
	printk("Read custom\n");
    19b6:	480a      	ldr	r0, [pc, #40]	; (19e0 <read_custom+0x34>)
{
    19b8:	461f      	mov	r7, r3
    19ba:	460c      	mov	r4, r1
    19bc:	4616      	mov	r6, r2
	printk("Read custom\n");
    19be:	f019 fed9 	bl	1b774 <printk>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
    19c2:	2314      	movs	r3, #20
    19c4:	e9cd 8301 	strd	r8, r3, [sp, #4]
    19c8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    19cc:	9300      	str	r3, [sp, #0]
    19ce:	4632      	mov	r2, r6
    19d0:	463b      	mov	r3, r7
    19d2:	4621      	mov	r1, r4
    19d4:	4628      	mov	r0, r5
    19d6:	f01d fc55 	bl	1f284 <bt_gatt_attr_read>
}
    19da:	b004      	add	sp, #16
    19dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19e0:	000228f4 	.word	0x000228f4

000019e4 <disconnected>:
{
    19e4:	b508      	push	{r3, lr}
	printk("Disconnected (reason 0x%02x)\n", reason);
    19e6:	4804      	ldr	r0, [pc, #16]	; (19f8 <disconnected+0x14>)
    19e8:	f019 fec4 	bl	1b774 <printk>
	set_led(false, BLUE);
    19ec:	2100      	movs	r1, #0
}
    19ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	set_led(false, BLUE);
    19f2:	4608      	mov	r0, r1
    19f4:	f7ff bf2e 	b.w	1854 <set_led>
    19f8:	00022901 	.word	0x00022901

000019fc <connected>:
{
    19fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    19fe:	4604      	mov	r4, r0
	if (err) {
    1a00:	b129      	cbz	r1, 1a0e <connected+0x12>
		printk("Connection failed (err 0x%02x)\n", err);
    1a02:	4813      	ldr	r0, [pc, #76]	; (1a50 <connected+0x54>)
}
    1a04:	b003      	add	sp, #12
    1a06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		printk("Connection failed (err 0x%02x)\n", err);
    1a0a:	f019 beb3 	b.w	1b774 <printk>
		int err = bt_conn_le_phy_update(conn, BT_CONN_LE_PHY_PARAM_2M);
    1a0e:	4d11      	ldr	r5, [pc, #68]	; (1a54 <connected+0x58>)
		printk("Connected\n");
    1a10:	4811      	ldr	r0, [pc, #68]	; (1a58 <connected+0x5c>)
    1a12:	f019 feaf 	bl	1b774 <printk>
		int err = bt_conn_le_phy_update(conn, BT_CONN_LE_PHY_PARAM_2M);
    1a16:	6828      	ldr	r0, [r5, #0]
    1a18:	9000      	str	r0, [sp, #0]
    1a1a:	4669      	mov	r1, sp
    1a1c:	4620      	mov	r0, r4
    1a1e:	f01c fd0c 	bl	1e43a <bt_conn_le_phy_update>
		if (err < 0) {
    1a22:	1e01      	subs	r1, r0, #0
    1a24:	da02      	bge.n	1a2c <connected+0x30>
			printk("Phy Update Error: %i", err);
    1a26:	480d      	ldr	r0, [pc, #52]	; (1a5c <connected+0x60>)
    1a28:	f019 fea4 	bl	1b774 <printk>
		err = bt_conn_le_data_len_update(conn, BT_LE_DATA_LEN_PARAM_MAX);
    1a2c:	6868      	ldr	r0, [r5, #4]
    1a2e:	9001      	str	r0, [sp, #4]
    1a30:	a901      	add	r1, sp, #4
    1a32:	4620      	mov	r0, r4
    1a34:	f01c fcf1 	bl	1e41a <bt_conn_le_data_len_update>
		if (err < 0) {
    1a38:	1e01      	subs	r1, r0, #0
    1a3a:	da02      	bge.n	1a42 <connected+0x46>
			printk("DL Update Error: %i", err);
    1a3c:	4808      	ldr	r0, [pc, #32]	; (1a60 <connected+0x64>)
    1a3e:	f019 fe99 	bl	1b774 <printk>
		set_led(true, BLUE);
    1a42:	2100      	movs	r1, #0
    1a44:	2001      	movs	r0, #1
    1a46:	f7ff ff05 	bl	1854 <set_led>
}
    1a4a:	b003      	add	sp, #12
    1a4c:	bd30      	pop	{r4, r5, pc}
    1a4e:	bf00      	nop
    1a50:	0002291f 	.word	0x0002291f
    1a54:	00020fc0 	.word	0x00020fc0
    1a58:	0002293f 	.word	0x0002293f
    1a5c:	0002294a 	.word	0x0002294a
    1a60:	0002295f 	.word	0x0002295f

00001a64 <main>:

	bt_custom_notify(val);
}

void main(void)
{
    1a64:	b570      	push	{r4, r5, r6, lr}
    1a66:	b08a      	sub	sp, #40	; 0x28
	int err;

	config_leds();
    1a68:	f7ff fec2 	bl	17f0 <config_leds>

	err = bt_enable(NULL);
    1a6c:	2000      	movs	r0, #0
    1a6e:	f004 f97f 	bl	5d70 <bt_enable>
	if (err) {
    1a72:	4606      	mov	r6, r0
    1a74:	b130      	cbz	r0, 1a84 <main+0x20>
		printk("Bluetooth init failed (err %d)\n", err);
    1a76:	4601      	mov	r1, r0
    1a78:	482d      	ldr	r0, [pc, #180]	; (1b30 <main+0xcc>)
		if (custom_chrc_notify) {
			/* Vendor Notify */
			custom_notify();
		}
	}
    1a7a:	b00a      	add	sp, #40	; 0x28
    1a7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1a80:	f019 be78 	b.w	1b774 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1a84:	4d2b      	ldr	r5, [pc, #172]	; (1b34 <main+0xd0>)
	printk("Bluetooth initialized\n");
    1a86:	482c      	ldr	r0, [pc, #176]	; (1b38 <main+0xd4>)
    1a88:	f019 fe74 	bl	1b774 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1a8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1a8e:	ac04      	add	r4, sp, #16
    1a90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    1a92:	682b      	ldr	r3, [r5, #0]
    1a94:	6023      	str	r3, [r4, #0]
    1a96:	4929      	ldr	r1, [pc, #164]	; (1b3c <main+0xd8>)
    1a98:	9600      	str	r6, [sp, #0]
    1a9a:	4633      	mov	r3, r6
    1a9c:	2202      	movs	r2, #2
    1a9e:	a804      	add	r0, sp, #16
    1aa0:	f004 ffe6 	bl	6a70 <bt_le_adv_start>
	if (err) {
    1aa4:	4604      	mov	r4, r0
    1aa6:	2800      	cmp	r0, #0
    1aa8:	d036      	beq.n	1b18 <main+0xb4>
		printk("Advertising failed to start (err %d)\n", err);
    1aaa:	4601      	mov	r1, r0
    1aac:	4824      	ldr	r0, [pc, #144]	; (1b40 <main+0xdc>)
    1aae:	f019 fe61 	bl	1b774 <printk>
	bt_gatt_cb_register(&gatt_callbacks);
    1ab2:	4824      	ldr	r0, [pc, #144]	; (1b44 <main+0xe0>)
		if (custom_chrc_notify) {
    1ab4:	4d24      	ldr	r5, [pc, #144]	; (1b48 <main+0xe4>)
	val++;
    1ab6:	4c25      	ldr	r4, [pc, #148]	; (1b4c <main+0xe8>)
	bt_gatt_cb_register(&gatt_callbacks);
    1ab8:	f007 fb40 	bl	913c <bt_gatt_cb_register>
	bt_conn_cb_register(&conn_callbacks);
    1abc:	4824      	ldr	r0, [pc, #144]	; (1b50 <main+0xec>)
    1abe:	f005 fd35 	bl	752c <bt_conn_cb_register>
	return z_impl_k_sleep(timeout);
    1ac2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    1ac6:	2100      	movs	r1, #0
    1ac8:	f019 fae2 	bl	1b090 <z_impl_k_sleep>
		if (custom_chrc_notify) {
    1acc:	782b      	ldrb	r3, [r5, #0]
    1ace:	2b00      	cmp	r3, #0
    1ad0:	d0f7      	beq.n	1ac2 <main+0x5e>
	val++;
    1ad2:	7823      	ldrb	r3, [r4, #0]
	printk("Sending %i\n", val);
    1ad4:	481f      	ldr	r0, [pc, #124]	; (1b54 <main+0xf0>)
	val++;
    1ad6:	3301      	adds	r3, #1
    1ad8:	b2db      	uxtb	r3, r3
	if (val == 99) {
    1ada:	2b63      	cmp	r3, #99	; 0x63
		val = 0;
    1adc:	bf08      	it	eq
    1ade:	2300      	moveq	r3, #0
    1ae0:	7023      	strb	r3, [r4, #0]
	bt_custom_notify(val);
    1ae2:	7821      	ldrb	r1, [r4, #0]
    1ae4:	f88d 100f 	strb.w	r1, [sp, #15]
	printk("Sending %i\n", val);
    1ae8:	f019 fe44 	bl	1b774 <printk>
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    1aec:	2218      	movs	r2, #24
    1aee:	2100      	movs	r1, #0
    1af0:	a804      	add	r0, sp, #16
    1af2:	f01b ff96 	bl	1da22 <memset>

	params.attr = attr;
    1af6:	4b18      	ldr	r3, [pc, #96]	; (1b58 <main+0xf4>)
    1af8:	9305      	str	r3, [sp, #20]
	params.data = data;
    1afa:	f10d 030f 	add.w	r3, sp, #15
    1afe:	9306      	str	r3, [sp, #24]
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    1b00:	a904      	add	r1, sp, #16
	params.len = len;
    1b02:	2301      	movs	r3, #1
	return bt_gatt_notify_cb(conn, &params);
    1b04:	2000      	movs	r0, #0
	params.len = len;
    1b06:	f8ad 301c 	strh.w	r3, [sp, #28]
	return bt_gatt_notify_cb(conn, &params);
    1b0a:	f007 fd6f 	bl	95ec <bt_gatt_notify_cb>
    1b0e:	4601      	mov	r1, r0
	printk("Return code: %i\n", rc);
    1b10:	4812      	ldr	r0, [pc, #72]	; (1b5c <main+0xf8>)
    1b12:	f019 fe2f 	bl	1b774 <printk>
	while (1) {
    1b16:	e7d4      	b.n	1ac2 <main+0x5e>
	printk("Advertising successfully started\n");
    1b18:	4811      	ldr	r0, [pc, #68]	; (1b60 <main+0xfc>)
    1b1a:	f019 fe2b 	bl	1b774 <printk>
	set_led(true, GREEN);
    1b1e:	2101      	movs	r1, #1
    1b20:	4608      	mov	r0, r1
    1b22:	f7ff fe97 	bl	1854 <set_led>
	set_led(false, BLUE);
    1b26:	4621      	mov	r1, r4
    1b28:	4620      	mov	r0, r4
    1b2a:	f7ff fe93 	bl	1854 <set_led>
    1b2e:	e7c0      	b.n	1ab2 <main+0x4e>
    1b30:	00022973 	.word	0x00022973
    1b34:	00020fc8 	.word	0x00020fc8
    1b38:	00022993 	.word	0x00022993
    1b3c:	000210c8 	.word	0x000210c8
    1b40:	000229aa 	.word	0x000229aa
    1b44:	200001d0 	.word	0x200001d0
    1b48:	2000290c 	.word	0x2000290c
    1b4c:	20002922 	.word	0x20002922
    1b50:	200001ac 	.word	0x200001ac
    1b54:	000229f2 	.word	0x000229f2
    1b58:	000210ec 	.word	0x000210ec
    1b5c:	000229fe 	.word	0x000229fe
    1b60:	000229d0 	.word	0x000229d0

00001b64 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1b64:	680b      	ldr	r3, [r1, #0]
    1b66:	3301      	adds	r3, #1
    1b68:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1b6a:	4b01      	ldr	r3, [pc, #4]	; (1b70 <char_out+0xc>)
    1b6c:	681b      	ldr	r3, [r3, #0]
    1b6e:	4718      	bx	r3
    1b70:	200001d8 	.word	0x200001d8

00001b74 <__printk_hook_install>:
	_char_out = fn;
    1b74:	4b01      	ldr	r3, [pc, #4]	; (1b7c <__printk_hook_install+0x8>)
    1b76:	6018      	str	r0, [r3, #0]
}
    1b78:	4770      	bx	lr
    1b7a:	bf00      	nop
    1b7c:	200001d8 	.word	0x200001d8

00001b80 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1b80:	b507      	push	{r0, r1, r2, lr}
    1b82:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1b84:	2100      	movs	r1, #0
{
    1b86:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    1b88:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1b8a:	4803      	ldr	r0, [pc, #12]	; (1b98 <vprintk+0x18>)
    1b8c:	a901      	add	r1, sp, #4
    1b8e:	f000 f8f9 	bl	1d84 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1b92:	b003      	add	sp, #12
    1b94:	f85d fb04 	ldr.w	pc, [sp], #4
    1b98:	00001b65 	.word	0x00001b65

00001b9c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1b9c:	b530      	push	{r4, r5, lr}
    1b9e:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    1ba0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    1ba4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1ba6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    1ba8:	a901      	add	r1, sp, #4
    1baa:	4805      	ldr	r0, [pc, #20]	; (1bc0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    1bac:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    1bae:	f000 f8e9 	bl	1d84 <cbvprintf>

	if (ctx.count < ctx.max) {
    1bb2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    1bb6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    1bb8:	bfb8      	it	lt
    1bba:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1bbc:	b005      	add	sp, #20
    1bbe:	bd30      	pop	{r4, r5, pc}
    1bc0:	0001b74f 	.word	0x0001b74f

00001bc4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1bc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1bc8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1bcc:	f019 0808 	ands.w	r8, r9, #8
{
    1bd0:	4604      	mov	r4, r0
    1bd2:	4693      	mov	fp, r2
	if (processing) {
    1bd4:	d00d      	beq.n	1bf2 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    1bd6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1bd8:	bf0c      	ite	eq
    1bda:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1bde:	f049 0920 	orrne.w	r9, r9, #32
    1be2:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1be6:	f38b 8811 	msr	BASEPRI, fp
    1bea:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1bee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1bf2:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1bf6:	2902      	cmp	r1, #2
    1bf8:	d107      	bne.n	1c0a <process_event+0x46>
			evt = process_recheck(mgr);
    1bfa:	4620      	mov	r0, r4
    1bfc:	f019 fdd4 	bl	1b7a8 <process_recheck>
		if (evt == EVT_NOP) {
    1c00:	2800      	cmp	r0, #0
    1c02:	d0f0      	beq.n	1be6 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1c04:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c06:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    1c08:	d14e      	bne.n	1ca8 <process_event+0xe4>
			res = mgr->last_res;
    1c0a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c0c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1c0e:	2f00      	cmp	r7, #0
    1c10:	da15      	bge.n	1c3e <process_event+0x7a>
		*clients = mgr->clients;
    1c12:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c14:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    1c18:	e9c4 8800 	strd	r8, r8, [r4]
    1c1c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c20:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    1c22:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c24:	8b21      	ldrh	r1, [r4, #24]
    1c26:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c2a:	45ca      	cmp	sl, r9
    1c2c:	d002      	beq.n	1c34 <process_event+0x70>
		if (do_monitors
    1c2e:	68a3      	ldr	r3, [r4, #8]
    1c30:	2b00      	cmp	r3, #0
    1c32:	d15a      	bne.n	1cea <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    1c34:	b90d      	cbnz	r5, 1c3a <process_event+0x76>
		    || (transit != NULL)) {
    1c36:	2e00      	cmp	r6, #0
    1c38:	d071      	beq.n	1d1e <process_event+0x15a>
    1c3a:	2300      	movs	r3, #0
    1c3c:	e056      	b.n	1cec <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1c3e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1c42:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1c44:	2a01      	cmp	r2, #1
    1c46:	d81e      	bhi.n	1c86 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c48:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1c4c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1c4e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c50:	b289      	uxth	r1, r1
    1c52:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1c56:	d10a      	bne.n	1c6e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c58:	b13d      	cbz	r5, 1c6a <process_event+0xa6>
    1c5a:	8b63      	ldrh	r3, [r4, #26]
    1c5c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    1c5e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    1c60:	3301      	adds	r3, #1
    1c62:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1c64:	2a00      	cmp	r2, #0
    1c66:	d1fa      	bne.n	1c5e <process_event+0x9a>
    1c68:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c6a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c6e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1c70:	4620      	mov	r0, r4
    1c72:	f019 fd99 	bl	1b7a8 <process_recheck>
    1c76:	4606      	mov	r6, r0
    1c78:	2800      	cmp	r0, #0
    1c7a:	d0d3      	beq.n	1c24 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c7c:	8b23      	ldrh	r3, [r4, #24]
    1c7e:	f043 0320 	orr.w	r3, r3, #32
    1c82:	8323      	strh	r3, [r4, #24]
    1c84:	e7cd      	b.n	1c22 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1c86:	2b04      	cmp	r3, #4
    1c88:	d10c      	bne.n	1ca4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1c8a:	f021 0107 	bic.w	r1, r1, #7
    1c8e:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1c90:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1c92:	4620      	mov	r0, r4
    1c94:	f019 fd88 	bl	1b7a8 <process_recheck>
    1c98:	4605      	mov	r5, r0
    1c9a:	2800      	cmp	r0, #0
    1c9c:	d0c1      	beq.n	1c22 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1c9e:	f041 0120 	orr.w	r1, r1, #32
    1ca2:	8321      	strh	r1, [r4, #24]
    1ca4:	2500      	movs	r5, #0
    1ca6:	e7bc      	b.n	1c22 <process_event+0x5e>
		} else if (evt == EVT_START) {
    1ca8:	2803      	cmp	r0, #3
    1caa:	d109      	bne.n	1cc0 <process_event+0xfc>
			transit = mgr->transitions->start;
    1cac:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cae:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    1cb2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cb4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    1cb8:	8323      	strh	r3, [r4, #24]
}
    1cba:	2500      	movs	r5, #0
		res = 0;
    1cbc:	462f      	mov	r7, r5
    1cbe:	e7b1      	b.n	1c24 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    1cc0:	2804      	cmp	r0, #4
    1cc2:	d106      	bne.n	1cd2 <process_event+0x10e>
			transit = mgr->transitions->stop;
    1cc4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cc6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    1cca:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1ccc:	f043 0304 	orr.w	r3, r3, #4
    1cd0:	e7f2      	b.n	1cb8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    1cd2:	2805      	cmp	r0, #5
    1cd4:	d106      	bne.n	1ce4 <process_event+0x120>
			transit = mgr->transitions->reset;
    1cd6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cd8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1cdc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1cde:	f043 0305 	orr.w	r3, r3, #5
    1ce2:	e7e9      	b.n	1cb8 <process_event+0xf4>
    1ce4:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    1ce6:	462e      	mov	r6, r5
    1ce8:	e7e8      	b.n	1cbc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    1cea:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1cec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1cf0:	8321      	strh	r1, [r4, #24]
    1cf2:	f38b 8811 	msr	BASEPRI, fp
    1cf6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1cfa:	b9fb      	cbnz	r3, 1d3c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    1cfc:	bb85      	cbnz	r5, 1d60 <process_event+0x19c>
			if (transit != NULL) {
    1cfe:	b116      	cbz	r6, 1d06 <process_event+0x142>
				transit(mgr, transition_complete);
    1d00:	491f      	ldr	r1, [pc, #124]	; (1d80 <process_event+0x1bc>)
    1d02:	4620      	mov	r0, r4
    1d04:	47b0      	blx	r6
	__asm__ volatile(
    1d06:	f04f 0320 	mov.w	r3, #32
    1d0a:	f3ef 8b11 	mrs	fp, BASEPRI
    1d0e:	f383 8812 	msr	BASEPRI_MAX, r3
    1d12:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1d16:	8b23      	ldrh	r3, [r4, #24]
    1d18:	f023 0308 	bic.w	r3, r3, #8
    1d1c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1d1e:	8b23      	ldrh	r3, [r4, #24]
    1d20:	06da      	lsls	r2, r3, #27
    1d22:	d525      	bpl.n	1d70 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1d24:	f023 0310 	bic.w	r3, r3, #16
    1d28:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1d2a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1d2c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1d30:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1d34:	2900      	cmp	r1, #0
    1d36:	f47f af5e 	bne.w	1bf6 <process_event+0x32>
out:
    1d3a:	e754      	b.n	1be6 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1d3c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d3e:	2900      	cmp	r1, #0
    1d40:	d0dc      	beq.n	1cfc <process_event+0x138>
	return node->next;
    1d42:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    1d46:	f8d1 b004 	ldr.w	fp, [r1, #4]
    1d4a:	463b      	mov	r3, r7
    1d4c:	4652      	mov	r2, sl
    1d4e:	4620      	mov	r0, r4
    1d50:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1d52:	f1b9 0f00 	cmp.w	r9, #0
    1d56:	d0d1      	beq.n	1cfc <process_event+0x138>
    1d58:	4649      	mov	r1, r9
    1d5a:	f8d9 9000 	ldr.w	r9, [r9]
    1d5e:	e7f2      	b.n	1d46 <process_event+0x182>
    1d60:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1d62:	463b      	mov	r3, r7
    1d64:	4652      	mov	r2, sl
    1d66:	4620      	mov	r0, r4
    1d68:	682d      	ldr	r5, [r5, #0]
    1d6a:	f019 fd39 	bl	1b7e0 <notify_one>
    1d6e:	e7c5      	b.n	1cfc <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1d70:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1d74:	bf1e      	ittt	ne
    1d76:	f023 0320 	bicne.w	r3, r3, #32
    1d7a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    1d7c:	2102      	movne	r1, #2
    1d7e:	e7d5      	b.n	1d2c <process_event+0x168>
    1d80:	0001b80d 	.word	0x0001b80d

00001d84 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d88:	b091      	sub	sp, #68	; 0x44
    1d8a:	468b      	mov	fp, r1
    1d8c:	9002      	str	r0, [sp, #8]
    1d8e:	4692      	mov	sl, r2
    1d90:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1d92:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1d94:	f89a 0000 	ldrb.w	r0, [sl]
    1d98:	b908      	cbnz	r0, 1d9e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1d9a:	4628      	mov	r0, r5
    1d9c:	e35f      	b.n	245e <cbvprintf+0x6da>
		if (*fp != '%') {
    1d9e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1da0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1da4:	d007      	beq.n	1db6 <cbvprintf+0x32>
			OUTC('%');
    1da6:	9b02      	ldr	r3, [sp, #8]
    1da8:	4659      	mov	r1, fp
    1daa:	4798      	blx	r3
    1dac:	2800      	cmp	r0, #0
    1dae:	f2c0 8356 	blt.w	245e <cbvprintf+0x6da>
    1db2:	3501      	adds	r5, #1
			break;
    1db4:	e212      	b.n	21dc <cbvprintf+0x458>
		} state = {
    1db6:	2218      	movs	r2, #24
    1db8:	2100      	movs	r1, #0
    1dba:	a80a      	add	r0, sp, #40	; 0x28
    1dbc:	f01b fe31 	bl	1da22 <memset>
	if (*sp == '%') {
    1dc0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1dc4:	2b25      	cmp	r3, #37	; 0x25
    1dc6:	d078      	beq.n	1eba <cbvprintf+0x136>
    1dc8:	2200      	movs	r2, #0
    1dca:	4610      	mov	r0, r2
    1dcc:	4696      	mov	lr, r2
    1dce:	4694      	mov	ip, r2
    1dd0:	4616      	mov	r6, r2
    1dd2:	4639      	mov	r1, r7
		switch (*sp) {
    1dd4:	f817 3b01 	ldrb.w	r3, [r7], #1
    1dd8:	2b2b      	cmp	r3, #43	; 0x2b
    1dda:	f000 809d 	beq.w	1f18 <cbvprintf+0x194>
    1dde:	f200 8094 	bhi.w	1f0a <cbvprintf+0x186>
    1de2:	2b20      	cmp	r3, #32
    1de4:	f000 809b 	beq.w	1f1e <cbvprintf+0x19a>
    1de8:	2b23      	cmp	r3, #35	; 0x23
    1dea:	f000 809b 	beq.w	1f24 <cbvprintf+0x1a0>
    1dee:	b12e      	cbz	r6, 1dfc <cbvprintf+0x78>
    1df0:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1df4:	f046 0604 	orr.w	r6, r6, #4
    1df8:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1dfc:	f1bc 0f00 	cmp.w	ip, #0
    1e00:	d005      	beq.n	1e0e <cbvprintf+0x8a>
    1e02:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e06:	f046 0608 	orr.w	r6, r6, #8
    1e0a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e0e:	f1be 0f00 	cmp.w	lr, #0
    1e12:	d005      	beq.n	1e20 <cbvprintf+0x9c>
    1e14:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1e18:	f046 0610 	orr.w	r6, r6, #16
    1e1c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1e20:	b128      	cbz	r0, 1e2e <cbvprintf+0xaa>
    1e22:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1e26:	f040 0020 	orr.w	r0, r0, #32
    1e2a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1e2e:	b12a      	cbz	r2, 1e3c <cbvprintf+0xb8>
    1e30:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1e38:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1e3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1e40:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1e44:	2844      	cmp	r0, #68	; 0x44
    1e46:	d103      	bne.n	1e50 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1e48:	f36f 1286 	bfc	r2, #6, #1
    1e4c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1e50:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1e54:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1e56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1e5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1e5e:	d17b      	bne.n	1f58 <cbvprintf+0x1d4>
		conv->width_star = true;
    1e60:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e64:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1e68:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1e6a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1e6e:	781a      	ldrb	r2, [r3, #0]
    1e70:	2a2e      	cmp	r2, #46	; 0x2e
    1e72:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e76:	bf0c      	ite	eq
    1e78:	2101      	moveq	r1, #1
    1e7a:	2100      	movne	r1, #0
    1e7c:	f361 0241 	bfi	r2, r1, #1, #1
    1e80:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1e84:	d174      	bne.n	1f70 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1e86:	785a      	ldrb	r2, [r3, #1]
    1e88:	2a2a      	cmp	r2, #42	; 0x2a
    1e8a:	d06a      	beq.n	1f62 <cbvprintf+0x1de>
	++sp;
    1e8c:	3301      	adds	r3, #1
	size_t val = 0;
    1e8e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1e90:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1e92:	4618      	mov	r0, r3
    1e94:	f810 2b01 	ldrb.w	r2, [r0], #1
    1e98:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1e9c:	2f09      	cmp	r7, #9
    1e9e:	f240 808e 	bls.w	1fbe <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1ea2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1ea6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1ea8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1eac:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1eb0:	f361 0241 	bfi	r2, r1, #1, #1
    1eb4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1eb8:	e05a      	b.n	1f70 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1eba:	f10a 0702 	add.w	r7, sl, #2
    1ebe:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1ec2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1ec6:	07d9      	lsls	r1, r3, #31
    1ec8:	f140 8149 	bpl.w	215e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1ecc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1ed0:	f1b9 0f00 	cmp.w	r9, #0
    1ed4:	da07      	bge.n	1ee6 <cbvprintf+0x162>
				conv->flag_dash = true;
    1ed6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1eda:	f042 0204 	orr.w	r2, r2, #4
    1ede:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1ee2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1ee6:	075a      	lsls	r2, r3, #29
    1ee8:	f140 8142 	bpl.w	2170 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1eec:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1ef0:	f1b8 0f00 	cmp.w	r8, #0
    1ef4:	f280 8141 	bge.w	217a <cbvprintf+0x3f6>
				conv->prec_present = false;
    1ef8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1efc:	f36f 0341 	bfc	r3, #1, #1
    1f00:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1f04:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1f08:	e137      	b.n	217a <cbvprintf+0x3f6>
		switch (*sp) {
    1f0a:	2b2d      	cmp	r3, #45	; 0x2d
    1f0c:	d00c      	beq.n	1f28 <cbvprintf+0x1a4>
    1f0e:	2b30      	cmp	r3, #48	; 0x30
    1f10:	f47f af6d 	bne.w	1dee <cbvprintf+0x6a>
			conv->flag_zero = true;
    1f14:	2201      	movs	r2, #1
	} while (loop);
    1f16:	e75c      	b.n	1dd2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1f18:	f04f 0c01 	mov.w	ip, #1
    1f1c:	e759      	b.n	1dd2 <cbvprintf+0x4e>
			conv->flag_space = true;
    1f1e:	f04f 0e01 	mov.w	lr, #1
    1f22:	e756      	b.n	1dd2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1f24:	2001      	movs	r0, #1
    1f26:	e754      	b.n	1dd2 <cbvprintf+0x4e>
		switch (*sp) {
    1f28:	2601      	movs	r6, #1
    1f2a:	e752      	b.n	1dd2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1f2c:	fb0c 0202 	mla	r2, ip, r2, r0
    1f30:	3a30      	subs	r2, #48	; 0x30
    1f32:	4633      	mov	r3, r6
    1f34:	461e      	mov	r6, r3
    1f36:	f816 0b01 	ldrb.w	r0, [r6], #1
    1f3a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1f3e:	2f09      	cmp	r7, #9
    1f40:	d9f4      	bls.n	1f2c <cbvprintf+0x1a8>
	if (sp != wp) {
    1f42:	4299      	cmp	r1, r3
    1f44:	d093      	beq.n	1e6e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1f46:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1f4a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1f4c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1f4e:	f362 0141 	bfi	r1, r2, #1, #1
    1f52:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1f56:	e78a      	b.n	1e6e <cbvprintf+0xea>
    1f58:	460b      	mov	r3, r1
	size_t val = 0;
    1f5a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1f5c:	f04f 0c0a 	mov.w	ip, #10
    1f60:	e7e8      	b.n	1f34 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1f62:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1f66:	f042 0204 	orr.w	r2, r2, #4
    1f6a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1f6e:	3302      	adds	r3, #2
	switch (*sp) {
    1f70:	461f      	mov	r7, r3
    1f72:	f817 2b01 	ldrb.w	r2, [r7], #1
    1f76:	2a6c      	cmp	r2, #108	; 0x6c
    1f78:	d041      	beq.n	1ffe <cbvprintf+0x27a>
    1f7a:	d825      	bhi.n	1fc8 <cbvprintf+0x244>
    1f7c:	2a68      	cmp	r2, #104	; 0x68
    1f7e:	d02b      	beq.n	1fd8 <cbvprintf+0x254>
    1f80:	2a6a      	cmp	r2, #106	; 0x6a
    1f82:	d046      	beq.n	2012 <cbvprintf+0x28e>
    1f84:	2a4c      	cmp	r2, #76	; 0x4c
    1f86:	d04c      	beq.n	2022 <cbvprintf+0x29e>
    1f88:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1f8a:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f8e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1f92:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1f96:	2a78      	cmp	r2, #120	; 0x78
    1f98:	f200 80d9 	bhi.w	214e <cbvprintf+0x3ca>
    1f9c:	2a57      	cmp	r2, #87	; 0x57
    1f9e:	d84d      	bhi.n	203c <cbvprintf+0x2b8>
    1fa0:	2a41      	cmp	r2, #65	; 0x41
    1fa2:	d003      	beq.n	1fac <cbvprintf+0x228>
    1fa4:	3a45      	subs	r2, #69	; 0x45
    1fa6:	2a02      	cmp	r2, #2
    1fa8:	f200 80d1 	bhi.w	214e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1fac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1fb0:	2204      	movs	r2, #4
    1fb2:	f362 0302 	bfi	r3, r2, #0, #3
    1fb6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1fba:	2301      	movs	r3, #1
			break;
    1fbc:	e09e      	b.n	20fc <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1fbe:	fb06 2101 	mla	r1, r6, r1, r2
    1fc2:	3930      	subs	r1, #48	; 0x30
    1fc4:	4603      	mov	r3, r0
    1fc6:	e764      	b.n	1e92 <cbvprintf+0x10e>
	switch (*sp) {
    1fc8:	2a74      	cmp	r2, #116	; 0x74
    1fca:	d026      	beq.n	201a <cbvprintf+0x296>
    1fcc:	2a7a      	cmp	r2, #122	; 0x7a
    1fce:	d1db      	bne.n	1f88 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1fd0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1fd4:	2206      	movs	r2, #6
    1fd6:	e00d      	b.n	1ff4 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1fd8:	785a      	ldrb	r2, [r3, #1]
    1fda:	2a68      	cmp	r2, #104	; 0x68
    1fdc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1fe0:	d106      	bne.n	1ff0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1fe2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1fe4:	f361 02c6 	bfi	r2, r1, #3, #4
    1fe8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1fec:	1c9f      	adds	r7, r3, #2
    1fee:	e7cc      	b.n	1f8a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1ff0:	4613      	mov	r3, r2
    1ff2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1ff4:	f362 03c6 	bfi	r3, r2, #3, #4
    1ff8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1ffc:	e7c5      	b.n	1f8a <cbvprintf+0x206>
		if (*++sp == 'l') {
    1ffe:	785a      	ldrb	r2, [r3, #1]
    2000:	2a6c      	cmp	r2, #108	; 0x6c
    2002:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    2006:	d101      	bne.n	200c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    2008:	2104      	movs	r1, #4
    200a:	e7eb      	b.n	1fe4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    200c:	4613      	mov	r3, r2
    200e:	2203      	movs	r2, #3
    2010:	e7f0      	b.n	1ff4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    2012:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    2016:	2205      	movs	r2, #5
    2018:	e7ec      	b.n	1ff4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    201a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    201e:	2207      	movs	r2, #7
    2020:	e7e8      	b.n	1ff4 <cbvprintf+0x270>
		conv->unsupported = true;
    2022:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    2026:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    202a:	f023 0302 	bic.w	r3, r3, #2
    202e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2032:	f043 0302 	orr.w	r3, r3, #2
    2036:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    203a:	e7a6      	b.n	1f8a <cbvprintf+0x206>
    203c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    2040:	2920      	cmp	r1, #32
    2042:	f200 8084 	bhi.w	214e <cbvprintf+0x3ca>
    2046:	a001      	add	r0, pc, #4	; (adr r0, 204c <cbvprintf+0x2c8>)
    2048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    204c:	00002111 	.word	0x00002111
    2050:	0000214f 	.word	0x0000214f
    2054:	0000214f 	.word	0x0000214f
    2058:	0000214f 	.word	0x0000214f
    205c:	0000214f 	.word	0x0000214f
    2060:	0000214f 	.word	0x0000214f
    2064:	0000214f 	.word	0x0000214f
    2068:	0000214f 	.word	0x0000214f
    206c:	0000214f 	.word	0x0000214f
    2070:	00001fad 	.word	0x00001fad
    2074:	0000214f 	.word	0x0000214f
    2078:	00002111 	.word	0x00002111
    207c:	000020d1 	.word	0x000020d1
    2080:	00001fad 	.word	0x00001fad
    2084:	00001fad 	.word	0x00001fad
    2088:	00001fad 	.word	0x00001fad
    208c:	0000214f 	.word	0x0000214f
    2090:	000020d1 	.word	0x000020d1
    2094:	0000214f 	.word	0x0000214f
    2098:	0000214f 	.word	0x0000214f
    209c:	0000214f 	.word	0x0000214f
    20a0:	0000214f 	.word	0x0000214f
    20a4:	00002119 	.word	0x00002119
    20a8:	00002111 	.word	0x00002111
    20ac:	00002135 	.word	0x00002135
    20b0:	0000214f 	.word	0x0000214f
    20b4:	0000214f 	.word	0x0000214f
    20b8:	00002135 	.word	0x00002135
    20bc:	0000214f 	.word	0x0000214f
    20c0:	00002111 	.word	0x00002111
    20c4:	0000214f 	.word	0x0000214f
    20c8:	0000214f 	.word	0x0000214f
    20cc:	00002111 	.word	0x00002111
		conv->specifier_cat = SPECIFIER_SINT;
    20d0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    20d4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    20d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    20da:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    20de:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    20e0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    20e4:	bf02      	ittt	eq
    20e6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    20ea:	f041 0101 	orreq.w	r1, r1, #1
    20ee:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    20f2:	2a63      	cmp	r2, #99	; 0x63
    20f4:	d131      	bne.n	215a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    20f6:	3b00      	subs	r3, #0
    20f8:	bf18      	it	ne
    20fa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    20fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    2100:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2104:	430b      	orrs	r3, r1
    2106:	f363 0241 	bfi	r2, r3, #1, #1
    210a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    210e:	e6d8      	b.n	1ec2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    2110:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    2114:	2002      	movs	r0, #2
    2116:	e7de      	b.n	20d6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    2118:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    211c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2120:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    2124:	2103      	movs	r1, #3
    2126:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    212a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    212c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    2130:	4143      	adcs	r3, r0
    2132:	e7e3      	b.n	20fc <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    2134:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2138:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    213a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    213e:	f361 0202 	bfi	r2, r1, #0, #3
    2142:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    2146:	bf14      	ite	ne
    2148:	2301      	movne	r3, #1
    214a:	2300      	moveq	r3, #0
    214c:	e7d6      	b.n	20fc <cbvprintf+0x378>
		conv->invalid = true;
    214e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    2152:	f043 0301 	orr.w	r3, r3, #1
    2156:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    215a:	2300      	movs	r3, #0
    215c:	e7ce      	b.n	20fc <cbvprintf+0x378>
		} else if (conv->width_present) {
    215e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    2162:	2a00      	cmp	r2, #0
			width = conv->width_value;
    2164:	bfb4      	ite	lt
    2166:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    216a:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    216e:	e6ba      	b.n	1ee6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    2170:	079b      	lsls	r3, r3, #30
    2172:	f57f aec7 	bpl.w	1f04 <cbvprintf+0x180>
			precision = conv->prec_value;
    2176:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    217a:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    217e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    2180:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    2184:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    2188:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    218c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    218e:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    2192:	d138      	bne.n	2206 <cbvprintf+0x482>
			switch (length_mod) {
    2194:	1ecb      	subs	r3, r1, #3
    2196:	2b04      	cmp	r3, #4
    2198:	d822      	bhi.n	21e0 <cbvprintf+0x45c>
    219a:	e8df f003 	tbb	[pc, r3]
    219e:	0903      	.short	0x0903
    21a0:	2109      	.short	0x2109
    21a2:	21          	.byte	0x21
    21a3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    21a4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    21a8:	17da      	asrs	r2, r3, #31
    21aa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    21ae:	e006      	b.n	21be <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    21b0:	3407      	adds	r4, #7
    21b2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    21b6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    21ba:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    21be:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    21c2:	f013 0603 	ands.w	r6, r3, #3
    21c6:	d056      	beq.n	2276 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    21c8:	9802      	ldr	r0, [sp, #8]
    21ca:	463b      	mov	r3, r7
    21cc:	4652      	mov	r2, sl
    21ce:	4659      	mov	r1, fp
    21d0:	f019 feb5 	bl	1bf3e <outs>
    21d4:	2800      	cmp	r0, #0
    21d6:	f2c0 8142 	blt.w	245e <cbvprintf+0x6da>
    21da:	4405      	add	r5, r0
			continue;
    21dc:	46ba      	mov	sl, r7
    21de:	e5d9      	b.n	1d94 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    21e0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    21e4:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    21e6:	ea4f 72e3 	mov.w	r2, r3, asr #31
    21ea:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    21ee:	d105      	bne.n	21fc <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    21f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    21f4:	930a      	str	r3, [sp, #40]	; 0x28
    21f6:	2300      	movs	r3, #0
    21f8:	930b      	str	r3, [sp, #44]	; 0x2c
    21fa:	e7e0      	b.n	21be <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    21fc:	2902      	cmp	r1, #2
    21fe:	d1de      	bne.n	21be <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    2200:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    2204:	e7d0      	b.n	21a8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2206:	2b02      	cmp	r3, #2
    2208:	d123      	bne.n	2252 <cbvprintf+0x4ce>
			switch (length_mod) {
    220a:	1ecb      	subs	r3, r1, #3
    220c:	2b04      	cmp	r3, #4
    220e:	d813      	bhi.n	2238 <cbvprintf+0x4b4>
    2210:	e8df f003 	tbb	[pc, r3]
    2214:	120a0a03 	.word	0x120a0a03
    2218:	12          	.byte	0x12
    2219:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    221a:	6822      	ldr	r2, [r4, #0]
    221c:	920a      	str	r2, [sp, #40]	; 0x28
    221e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    2220:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    2222:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    2224:	4604      	mov	r4, r0
    2226:	e7ca      	b.n	21be <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    2228:	1de0      	adds	r0, r4, #7
    222a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    222e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    2232:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    2236:	e7f5      	b.n	2224 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    2238:	f854 3b04 	ldr.w	r3, [r4], #4
    223c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    223e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    2240:	f04f 0300 	mov.w	r3, #0
    2244:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    2246:	d0d3      	beq.n	21f0 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    2248:	2902      	cmp	r1, #2
    224a:	d1b8      	bne.n	21be <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    224c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    2250:	e7d0      	b.n	21f4 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    2252:	2b04      	cmp	r3, #4
    2254:	d109      	bne.n	226a <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    2256:	1de3      	adds	r3, r4, #7
    2258:	f023 0307 	bic.w	r3, r3, #7
    225c:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    2260:	e9d3 2300 	ldrd	r2, r3, [r3]
    2264:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    2268:	e7a9      	b.n	21be <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    226a:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    226c:	bf04      	itt	eq
    226e:	f854 3b04 	ldreq.w	r3, [r4], #4
    2272:	930a      	streq	r3, [sp, #40]	; 0x28
    2274:	e7a3      	b.n	21be <cbvprintf+0x43a>
		switch (conv->specifier) {
    2276:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    227a:	2878      	cmp	r0, #120	; 0x78
    227c:	d8ae      	bhi.n	21dc <cbvprintf+0x458>
    227e:	2862      	cmp	r0, #98	; 0x62
    2280:	d822      	bhi.n	22c8 <cbvprintf+0x544>
    2282:	2825      	cmp	r0, #37	; 0x25
    2284:	f43f ad8f 	beq.w	1da6 <cbvprintf+0x22>
    2288:	2858      	cmp	r0, #88	; 0x58
    228a:	d1a7      	bne.n	21dc <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    228c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2290:	9300      	str	r3, [sp, #0]
    2292:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    2296:	ab04      	add	r3, sp, #16
    2298:	aa0c      	add	r2, sp, #48	; 0x30
    229a:	f019 fe0a 	bl	1beb2 <encode_uint>
    229e:	4682      	mov	sl, r0
			if (precision >= 0) {
    22a0:	f1b8 0f00 	cmp.w	r8, #0
    22a4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    22a8:	db0c      	blt.n	22c4 <cbvprintf+0x540>
				conv->flag_zero = false;
    22aa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    22ae:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    22b2:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    22b6:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    22b8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    22bc:	d902      	bls.n	22c4 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    22be:	eba8 0303 	sub.w	r3, r8, r3
    22c2:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    22c4:	4680      	mov	r8, r0
    22c6:	e03d      	b.n	2344 <cbvprintf+0x5c0>
    22c8:	3863      	subs	r0, #99	; 0x63
    22ca:	2815      	cmp	r0, #21
    22cc:	d886      	bhi.n	21dc <cbvprintf+0x458>
    22ce:	a201      	add	r2, pc, #4	; (adr r2, 22d4 <cbvprintf+0x550>)
    22d0:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    22d4:	00002355 	.word	0x00002355
    22d8:	000023b9 	.word	0x000023b9
    22dc:	000021dd 	.word	0x000021dd
    22e0:	000021dd 	.word	0x000021dd
    22e4:	000021dd 	.word	0x000021dd
    22e8:	000021dd 	.word	0x000021dd
    22ec:	000023b9 	.word	0x000023b9
    22f0:	000021dd 	.word	0x000021dd
    22f4:	000021dd 	.word	0x000021dd
    22f8:	000021dd 	.word	0x000021dd
    22fc:	000021dd 	.word	0x000021dd
    2300:	00002413 	.word	0x00002413
    2304:	000023e1 	.word	0x000023e1
    2308:	000023e5 	.word	0x000023e5
    230c:	000021dd 	.word	0x000021dd
    2310:	000021dd 	.word	0x000021dd
    2314:	0000232d 	.word	0x0000232d
    2318:	000021dd 	.word	0x000021dd
    231c:	000023e1 	.word	0x000023e1
    2320:	000021dd 	.word	0x000021dd
    2324:	000021dd 	.word	0x000021dd
    2328:	000023e1 	.word	0x000023e1
			if (precision >= 0) {
    232c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    2330:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    2334:	db0a      	blt.n	234c <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    2336:	4641      	mov	r1, r8
    2338:	4650      	mov	r0, sl
    233a:	f01b fb41 	bl	1d9c0 <strnlen>
			bpe = bps + len;
    233e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    2342:	2600      	movs	r6, #0
		if (bps == NULL) {
    2344:	f1ba 0f00 	cmp.w	sl, #0
    2348:	d10c      	bne.n	2364 <cbvprintf+0x5e0>
    234a:	e747      	b.n	21dc <cbvprintf+0x458>
				len = strlen(bps);
    234c:	4650      	mov	r0, sl
    234e:	f01b fb30 	bl	1d9b2 <strlen>
    2352:	e7f4      	b.n	233e <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2356:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    235a:	2600      	movs	r6, #0
			bps = buf;
    235c:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    2360:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    2364:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    2368:	b106      	cbz	r6, 236c <cbvprintf+0x5e8>
			nj_len += 1U;
    236a:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    236c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    2370:	06d0      	lsls	r0, r2, #27
    2372:	d568      	bpl.n	2446 <cbvprintf+0x6c2>
			nj_len += 2U;
    2374:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    2376:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    2378:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    237a:	bf48      	it	mi
    237c:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    237e:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    2380:	bf48      	it	mi
    2382:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    2384:	f1b9 0f00 	cmp.w	r9, #0
    2388:	dd76      	ble.n	2478 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    238a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    238e:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    2392:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2396:	9303      	str	r3, [sp, #12]
    2398:	0753      	lsls	r3, r2, #29
    239a:	d46d      	bmi.n	2478 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    239c:	0650      	lsls	r0, r2, #25
    239e:	d561      	bpl.n	2464 <cbvprintf+0x6e0>
					if (sign != 0) {
    23a0:	b146      	cbz	r6, 23b4 <cbvprintf+0x630>
						OUTC(sign);
    23a2:	9b02      	ldr	r3, [sp, #8]
    23a4:	4659      	mov	r1, fp
    23a6:	4630      	mov	r0, r6
    23a8:	4798      	blx	r3
    23aa:	2800      	cmp	r0, #0
    23ac:	db57      	blt.n	245e <cbvprintf+0x6da>
						sign = 0;
    23ae:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    23b0:	3501      	adds	r5, #1
						sign = 0;
    23b2:	461e      	mov	r6, r3
					pad = '0';
    23b4:	2330      	movs	r3, #48	; 0x30
    23b6:	e056      	b.n	2466 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    23b8:	071e      	lsls	r6, r3, #28
    23ba:	d40f      	bmi.n	23dc <cbvprintf+0x658>
				sign = ' ';
    23bc:	f013 0610 	ands.w	r6, r3, #16
    23c0:	bf18      	it	ne
    23c2:	2620      	movne	r6, #32
			sint = value->sint;
    23c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    23c8:	2b00      	cmp	r3, #0
    23ca:	f6bf af5f 	bge.w	228c <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    23ce:	4252      	negs	r2, r2
    23d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    23d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    23d8:	262d      	movs	r6, #45	; 0x2d
    23da:	e757      	b.n	228c <cbvprintf+0x508>
				sign = '+';
    23dc:	262b      	movs	r6, #43	; 0x2b
    23de:	e7f1      	b.n	23c4 <cbvprintf+0x640>
		switch (conv->specifier) {
    23e0:	2600      	movs	r6, #0
    23e2:	e753      	b.n	228c <cbvprintf+0x508>
			if (value->ptr != NULL) {
    23e4:	980a      	ldr	r0, [sp, #40]	; 0x28
    23e6:	b340      	cbz	r0, 243a <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    23e8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    23ec:	9300      	str	r3, [sp, #0]
    23ee:	aa0c      	add	r2, sp, #48	; 0x30
    23f0:	ab04      	add	r3, sp, #16
    23f2:	2100      	movs	r1, #0
    23f4:	f019 fd5d 	bl	1beb2 <encode_uint>
				conv->altform_0c = true;
    23f8:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    23fc:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2400:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2404:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2408:	4682      	mov	sl, r0
				conv->altform_0c = true;
    240a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    240e:	2600      	movs	r6, #0
				goto prec_int_pad0;
    2410:	e746      	b.n	22a0 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    2412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    2414:	2907      	cmp	r1, #7
    2416:	f63f aee1 	bhi.w	21dc <cbvprintf+0x458>
    241a:	e8df f001 	tbb	[pc, r1]
    241e:	040c      	.short	0x040c
    2420:	08080c06 	.word	0x08080c06
    2424:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    2426:	701d      	strb	r5, [r3, #0]
		break;
    2428:	e6d8      	b.n	21dc <cbvprintf+0x458>
		*(short *)dp = (short)count;
    242a:	801d      	strh	r5, [r3, #0]
		break;
    242c:	e6d6      	b.n	21dc <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    242e:	17ea      	asrs	r2, r5, #31
    2430:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2434:	e6d2      	b.n	21dc <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2436:	601d      	str	r5, [r3, #0]
		break;
    2438:	e6d0      	b.n	21dc <cbvprintf+0x458>
			bps = "(nil)";
    243a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2504 <cbvprintf+0x780>
    243e:	4606      	mov	r6, r0
			bpe = bps + 5;
    2440:	f10a 0805 	add.w	r8, sl, #5
    2444:	e78e      	b.n	2364 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    2446:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    2448:	bf48      	it	mi
    244a:	3301      	addmi	r3, #1
    244c:	e793      	b.n	2376 <cbvprintf+0x5f2>
					OUTC(pad);
    244e:	4618      	mov	r0, r3
    2450:	9303      	str	r3, [sp, #12]
    2452:	4659      	mov	r1, fp
    2454:	9b02      	ldr	r3, [sp, #8]
    2456:	4798      	blx	r3
    2458:	2800      	cmp	r0, #0
    245a:	9b03      	ldr	r3, [sp, #12]
    245c:	da04      	bge.n	2468 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    245e:	b011      	add	sp, #68	; 0x44
    2460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2464:	2320      	movs	r3, #32
    2466:	444d      	add	r5, r9
    2468:	464a      	mov	r2, r9
				while (width-- > 0) {
    246a:	2a00      	cmp	r2, #0
    246c:	eba5 0109 	sub.w	r1, r5, r9
    2470:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    2474:	dceb      	bgt.n	244e <cbvprintf+0x6ca>
    2476:	460d      	mov	r5, r1
		if (sign != 0) {
    2478:	b136      	cbz	r6, 2488 <cbvprintf+0x704>
			OUTC(sign);
    247a:	9b02      	ldr	r3, [sp, #8]
    247c:	4659      	mov	r1, fp
    247e:	4630      	mov	r0, r6
    2480:	4798      	blx	r3
    2482:	2800      	cmp	r0, #0
    2484:	dbeb      	blt.n	245e <cbvprintf+0x6da>
    2486:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2488:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    248c:	06d9      	lsls	r1, r3, #27
    248e:	d401      	bmi.n	2494 <cbvprintf+0x710>
    2490:	071a      	lsls	r2, r3, #28
    2492:	d506      	bpl.n	24a2 <cbvprintf+0x71e>
				OUTC('0');
    2494:	9b02      	ldr	r3, [sp, #8]
    2496:	4659      	mov	r1, fp
    2498:	2030      	movs	r0, #48	; 0x30
    249a:	4798      	blx	r3
    249c:	2800      	cmp	r0, #0
    249e:	dbde      	blt.n	245e <cbvprintf+0x6da>
    24a0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    24a2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    24a6:	06db      	lsls	r3, r3, #27
    24a8:	d507      	bpl.n	24ba <cbvprintf+0x736>
				OUTC(conv->specifier);
    24aa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    24ae:	9b02      	ldr	r3, [sp, #8]
    24b0:	4659      	mov	r1, fp
    24b2:	4798      	blx	r3
    24b4:	2800      	cmp	r0, #0
    24b6:	dbd2      	blt.n	245e <cbvprintf+0x6da>
    24b8:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    24ba:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    24bc:	442e      	add	r6, r5
    24be:	1b73      	subs	r3, r6, r5
    24c0:	2b00      	cmp	r3, #0
    24c2:	dc16      	bgt.n	24f2 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    24c4:	9802      	ldr	r0, [sp, #8]
    24c6:	4643      	mov	r3, r8
    24c8:	4652      	mov	r2, sl
    24ca:	4659      	mov	r1, fp
    24cc:	f019 fd37 	bl	1bf3e <outs>
    24d0:	2800      	cmp	r0, #0
    24d2:	dbc4      	blt.n	245e <cbvprintf+0x6da>
    24d4:	4405      	add	r5, r0
		while (width > 0) {
    24d6:	44a9      	add	r9, r5
    24d8:	eba9 0305 	sub.w	r3, r9, r5
    24dc:	2b00      	cmp	r3, #0
    24de:	f77f ae7d 	ble.w	21dc <cbvprintf+0x458>
			OUTC(' ');
    24e2:	9b02      	ldr	r3, [sp, #8]
    24e4:	4659      	mov	r1, fp
    24e6:	2020      	movs	r0, #32
    24e8:	4798      	blx	r3
    24ea:	2800      	cmp	r0, #0
    24ec:	dbb7      	blt.n	245e <cbvprintf+0x6da>
    24ee:	3501      	adds	r5, #1
			--width;
    24f0:	e7f2      	b.n	24d8 <cbvprintf+0x754>
				OUTC('0');
    24f2:	9b02      	ldr	r3, [sp, #8]
    24f4:	4659      	mov	r1, fp
    24f6:	2030      	movs	r0, #48	; 0x30
    24f8:	4798      	blx	r3
    24fa:	2800      	cmp	r0, #0
    24fc:	dbaf      	blt.n	245e <cbvprintf+0x6da>
    24fe:	3501      	adds	r5, #1
    2500:	e7dd      	b.n	24be <cbvprintf+0x73a>
    2502:	bf00      	nop
    2504:	00022a0f 	.word	0x00022a0f

00002508 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2508:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    250a:	4910      	ldr	r1, [pc, #64]	; (254c <enable_logger+0x44>)
    250c:	4810      	ldr	r0, [pc, #64]	; (2550 <enable_logger+0x48>)
{
    250e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2510:	2200      	movs	r2, #0
    2512:	f01e f97d 	bl	20810 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2516:	4d0f      	ldr	r5, [pc, #60]	; (2554 <enable_logger+0x4c>)
    2518:	490f      	ldr	r1, [pc, #60]	; (2558 <enable_logger+0x50>)
    251a:	2200      	movs	r2, #0
    251c:	2300      	movs	r3, #0
    251e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2522:	2400      	movs	r4, #0
    2524:	230e      	movs	r3, #14
    2526:	e9cd 3403 	strd	r3, r4, [sp, #12]
    252a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    252e:	4b0b      	ldr	r3, [pc, #44]	; (255c <enable_logger+0x54>)
    2530:	9400      	str	r4, [sp, #0]
    2532:	f44f 7240 	mov.w	r2, #768	; 0x300
    2536:	4628      	mov	r0, r5
    2538:	f017 ff3a 	bl	1a3b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    253c:	4908      	ldr	r1, [pc, #32]	; (2560 <enable_logger+0x58>)
    253e:	4628      	mov	r0, r5
    2540:	f01d fe07 	bl	20152 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2544:	4620      	mov	r0, r4
    2546:	b009      	add	sp, #36	; 0x24
    2548:	bd30      	pop	{r4, r5, pc}
    254a:	bf00      	nop
    254c:	00002565 	.word	0x00002565
    2550:	200008e8 	.word	0x200008e8
    2554:	20000920 	.word	0x20000920
    2558:	20002ea0 	.word	0x20002ea0
    255c:	000028e9 	.word	0x000028e9
    2560:	00022a15 	.word	0x00022a15

00002564 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2564:	4801      	ldr	r0, [pc, #4]	; (256c <log_process_thread_timer_expiry_fn+0x8>)
    2566:	f018 b8af 	b.w	1a6c8 <z_impl_k_sem_give>
    256a:	bf00      	nop
    256c:	20000754 	.word	0x20000754

00002570 <log_core_init>:
{
    2570:	b510      	push	{r4, lr}
	panic_mode = false;
    2572:	4b0b      	ldr	r3, [pc, #44]	; (25a0 <log_core_init+0x30>)
    2574:	2200      	movs	r2, #0
    2576:	701a      	strb	r2, [r3, #0]
		timestamp_func = default_get_timestamp;
    2578:	4b0a      	ldr	r3, [pc, #40]	; (25a4 <log_core_init+0x34>)
    257a:	4a0b      	ldr	r2, [pc, #44]	; (25a8 <log_core_init+0x38>)
    257c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    257e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2582:	f000 fcc1 	bl	2f08 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    2586:	f000 fa73 	bl	2a70 <log_msg_pool_init>
		log_list_init(&list);
    258a:	4808      	ldr	r0, [pc, #32]	; (25ac <log_core_init+0x3c>)
    258c:	f019 fcee 	bl	1bf6c <log_list_init>
}
    2590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2594:	4906      	ldr	r1, [pc, #24]	; (25b0 <log_core_init+0x40>)
    2596:	4807      	ldr	r0, [pc, #28]	; (25b4 <log_core_init+0x44>)
    2598:	2308      	movs	r3, #8
    259a:	2248      	movs	r2, #72	; 0x48
    259c:	f01d bd8f 	b.w	200be <k_mem_slab_init>
    25a0:	20002924 	.word	0x20002924
    25a4:	200001dc 	.word	0x200001dc
    25a8:	0001bfab 	.word	0x0001bfab
    25ac:	200013f8 	.word	0x200013f8
    25b0:	20005608 	.word	0x20005608
    25b4:	20001400 	.word	0x20001400

000025b8 <get_msg>:
{
    25b8:	b510      	push	{r4, lr}
    25ba:	f04f 0320 	mov.w	r3, #32
    25be:	f3ef 8411 	mrs	r4, BASEPRI
    25c2:	f383 8812 	msr	BASEPRI_MAX, r3
    25c6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    25ca:	4804      	ldr	r0, [pc, #16]	; (25dc <get_msg+0x24>)
    25cc:	f019 fcde 	bl	1bf8c <log_list_head_get>
	__asm__ volatile(
    25d0:	f384 8811 	msr	BASEPRI, r4
    25d4:	f3bf 8f6f 	isb	sy
}
    25d8:	bd10      	pop	{r4, pc}
    25da:	bf00      	nop
    25dc:	200013f8 	.word	0x200013f8

000025e0 <z_log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    25e0:	4b06      	ldr	r3, [pc, #24]	; (25fc <z_log_dropped+0x1c>)
    25e2:	f3bf 8f5b 	dmb	ish
    25e6:	e853 2f00 	ldrex	r2, [r3]
    25ea:	3201      	adds	r2, #1
    25ec:	e843 2100 	strex	r1, r2, [r3]
    25f0:	2900      	cmp	r1, #0
    25f2:	d1f8      	bne.n	25e6 <z_log_dropped+0x6>
    25f4:	f3bf 8f5b 	dmb	ish
}
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop
    25fc:	200013f0 	.word	0x200013f0

00002600 <z_log_dropped_read_and_clear>:
}
    2600:	2000      	movs	r0, #0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2602:	4b06      	ldr	r3, [pc, #24]	; (261c <z_log_dropped_read_and_clear+0x1c>)
    2604:	f3bf 8f5b 	dmb	ish
    2608:	4602      	mov	r2, r0
    260a:	e853 0f00 	ldrex	r0, [r3]
    260e:	e843 2100 	strex	r1, r2, [r3]
    2612:	2900      	cmp	r1, #0
    2614:	d1f9      	bne.n	260a <z_log_dropped_read_and_clear+0xa>
    2616:	f3bf 8f5b 	dmb	ish
    261a:	4770      	bx	lr
    261c:	200013f0 	.word	0x200013f0

00002620 <dropped_notify>:
{
    2620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2622:	f7ff ffed 	bl	2600 <z_log_dropped_read_and_clear>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2626:	4c0a      	ldr	r4, [pc, #40]	; (2650 <dropped_notify+0x30>)
    2628:	4d0a      	ldr	r5, [pc, #40]	; (2654 <dropped_notify+0x34>)
    262a:	1b2d      	subs	r5, r5, r4
    262c:	4607      	mov	r7, r0
    262e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2630:	2600      	movs	r6, #0
    2632:	42ae      	cmp	r6, r5
    2634:	db00      	blt.n	2638 <dropped_notify+0x18>
}
    2636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2638:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    263a:	795b      	ldrb	r3, [r3, #5]
    263c:	b12b      	cbz	r3, 264a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    263e:	6823      	ldr	r3, [r4, #0]
    2640:	691b      	ldr	r3, [r3, #16]
    2642:	b113      	cbz	r3, 264a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    2644:	4639      	mov	r1, r7
    2646:	4620      	mov	r0, r4
    2648:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    264a:	3601      	adds	r6, #1
    264c:	3410      	adds	r4, #16
    264e:	e7f0      	b.n	2632 <dropped_notify+0x12>
    2650:	00020f58 	.word	0x00020f58
    2654:	00020f78 	.word	0x00020f78

00002658 <log_source_name_get>:
    2658:	4a04      	ldr	r2, [pc, #16]	; (266c <log_source_name_get+0x14>)
    265a:	4b05      	ldr	r3, [pc, #20]	; (2670 <log_source_name_get+0x18>)
    265c:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    265e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2662:	bf34      	ite	cc
    2664:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    2668:	2000      	movcs	r0, #0
}
    266a:	4770      	bx	lr
    266c:	00020e00 	.word	0x00020e00
    2670:	00020f58 	.word	0x00020f58

00002674 <log_backend_enable>:
	id += backend - log_backend_get(0);
    2674:	4a09      	ldr	r2, [pc, #36]	; (269c <log_backend_enable+0x28>)
	backend->cb->id = id;
    2676:	6843      	ldr	r3, [r0, #4]
    2678:	1a80      	subs	r0, r0, r2
{
    267a:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    267c:	1100      	asrs	r0, r0, #4
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    267e:	4c08      	ldr	r4, [pc, #32]	; (26a0 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    2680:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    2682:	3001      	adds	r0, #1
	backend->cb->active = true;
    2684:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    2686:	7118      	strb	r0, [r3, #4]
    2688:	715a      	strb	r2, [r3, #5]
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    268a:	7823      	ldrb	r3, [r4, #0]
    268c:	b913      	cbnz	r3, 2694 <log_backend_enable+0x20>
    268e:	4805      	ldr	r0, [pc, #20]	; (26a4 <log_backend_enable+0x30>)
    2690:	f018 f81a 	bl	1a6c8 <z_impl_k_sem_give>
	backend_attached = true;
    2694:	2301      	movs	r3, #1
    2696:	7023      	strb	r3, [r4, #0]
}
    2698:	bd10      	pop	{r4, pc}
    269a:	bf00      	nop
    269c:	00020f58 	.word	0x00020f58
    26a0:	20002923 	.word	0x20002923
    26a4:	20000754 	.word	0x20000754

000026a8 <log_init>:
{
    26a8:	b570      	push	{r4, r5, r6, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    26aa:	4b12      	ldr	r3, [pc, #72]	; (26f4 <log_init+0x4c>)
    26ac:	f3bf 8f5b 	dmb	ish
    26b0:	e853 5f00 	ldrex	r5, [r3]
    26b4:	1c6a      	adds	r2, r5, #1
    26b6:	e843 2100 	strex	r1, r2, [r3]
    26ba:	2900      	cmp	r1, #0
    26bc:	d1f8      	bne.n	26b0 <log_init+0x8>
    26be:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    26c2:	b92d      	cbnz	r5, 26d0 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    26c4:	4c0c      	ldr	r4, [pc, #48]	; (26f8 <log_init+0x50>)
    26c6:	4e0d      	ldr	r6, [pc, #52]	; (26fc <log_init+0x54>)
    26c8:	1b36      	subs	r6, r6, r4
    26ca:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    26cc:	42b5      	cmp	r5, r6
    26ce:	db00      	blt.n	26d2 <log_init+0x2a>
}
    26d0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    26d2:	7b23      	ldrb	r3, [r4, #12]
    26d4:	b153      	cbz	r3, 26ec <log_init+0x44>
			if (backend->api->init != NULL) {
    26d6:	6823      	ldr	r3, [r4, #0]
    26d8:	699b      	ldr	r3, [r3, #24]
    26da:	b10b      	cbz	r3, 26e0 <log_init+0x38>
				backend->api->init(backend);
    26dc:	4620      	mov	r0, r4
    26de:	4798      	blx	r3
			log_backend_enable(backend,
    26e0:	6863      	ldr	r3, [r4, #4]
    26e2:	2204      	movs	r2, #4
    26e4:	6819      	ldr	r1, [r3, #0]
    26e6:	4620      	mov	r0, r4
    26e8:	f7ff ffc4 	bl	2674 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    26ec:	3501      	adds	r5, #1
    26ee:	3410      	adds	r4, #16
    26f0:	e7ec      	b.n	26cc <log_init+0x24>
    26f2:	bf00      	nop
    26f4:	200013f4 	.word	0x200013f4
    26f8:	00020f58 	.word	0x00020f58
    26fc:	00020f78 	.word	0x00020f78

00002700 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    2700:	4b16      	ldr	r3, [pc, #88]	; (275c <z_log_strdup+0x5c>)
    2702:	4298      	cmp	r0, r3
{
    2704:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2706:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    2708:	d302      	bcc.n	2710 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    270a:	4b15      	ldr	r3, [pc, #84]	; (2760 <z_log_strdup+0x60>)
    270c:	4298      	cmp	r0, r3
    270e:	d320      	bcc.n	2752 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2710:	4814      	ldr	r0, [pc, #80]	; (2764 <z_log_strdup+0x64>)
    2712:	2200      	movs	r2, #0
    2714:	2300      	movs	r3, #0
    2716:	a901      	add	r1, sp, #4
    2718:	f017 fdea 	bl	1a2f0 <k_mem_slab_alloc>
	if (err != 0) {
    271c:	4605      	mov	r5, r0
    271e:	b9d8      	cbnz	r0, 2758 <z_log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2720:	2201      	movs	r2, #1
    2722:	9b01      	ldr	r3, [sp, #4]
    2724:	f3bf 8f5b 	dmb	ish
    2728:	e853 1f00 	ldrex	r1, [r3]
    272c:	e843 2000 	strex	r0, r2, [r3]
    2730:	2800      	cmp	r0, #0
    2732:	d1f9      	bne.n	2728 <z_log_strdup+0x28>
    2734:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2738:	9801      	ldr	r0, [sp, #4]
    273a:	4621      	mov	r1, r4
    273c:	2241      	movs	r2, #65	; 0x41
    273e:	3004      	adds	r0, #4
    2740:	f01b f925 	bl	1d98e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2744:	9c01      	ldr	r4, [sp, #4]
    2746:	237e      	movs	r3, #126	; 0x7e
    2748:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    274c:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
	return dup->buf;
    2750:	3404      	adds	r4, #4
}
    2752:	4620      	mov	r0, r4
    2754:	b003      	add	sp, #12
    2756:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    2758:	4c03      	ldr	r4, [pc, #12]	; (2768 <z_log_strdup+0x68>)
    275a:	e7fa      	b.n	2752 <z_log_strdup+0x52>
    275c:	00020b1c 	.word	0x00020b1c
    2760:	00024858 	.word	0x00024858
    2764:	20001400 	.word	0x20001400
    2768:	00022a1d 	.word	0x00022a1d

0000276c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    276c:	b150      	cbz	r0, 2784 <log_is_strdup+0x18>
    276e:	4b06      	ldr	r3, [pc, #24]	; (2788 <log_is_strdup+0x1c>)
    2770:	4298      	cmp	r0, r3
    2772:	d306      	bcc.n	2782 <log_is_strdup+0x16>
    2774:	f503 7310 	add.w	r3, r3, #576	; 0x240
    2778:	4298      	cmp	r0, r3
    277a:	bf2c      	ite	cs
    277c:	2000      	movcs	r0, #0
    277e:	2001      	movcc	r0, #1
    2780:	4770      	bx	lr
    2782:	2000      	movs	r0, #0
}
    2784:	4770      	bx	lr
    2786:	bf00      	nop
    2788:	20005608 	.word	0x20005608

0000278c <z_impl_log_process>:
{
    278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    2790:	4b47      	ldr	r3, [pc, #284]	; (28b0 <z_impl_log_process+0x124>)
    2792:	781b      	ldrb	r3, [r3, #0]
{
    2794:	b085      	sub	sp, #20
    2796:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2798:	b903      	cbnz	r3, 279c <z_impl_log_process+0x10>
    279a:	b300      	cbz	r0, 27de <z_impl_log_process+0x52>
	msg = get_msg();
    279c:	f7ff ff0c 	bl	25b8 <get_msg>
	if (msg.msg) {
    27a0:	4605      	mov	r5, r0
    27a2:	b178      	cbz	r0, 27c4 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    27a4:	f3bf 8f5b 	dmb	ish
    27a8:	4b42      	ldr	r3, [pc, #264]	; (28b4 <z_impl_log_process+0x128>)
    27aa:	e853 2f00 	ldrex	r2, [r3]
    27ae:	3a01      	subs	r2, #1
    27b0:	e843 2100 	strex	r1, r2, [r3]
    27b4:	2900      	cmp	r1, #0
    27b6:	d1f8      	bne.n	27aa <z_impl_log_process+0x1e>
    27b8:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    27bc:	b19c      	cbz	r4, 27e6 <z_impl_log_process+0x5a>
			log_msg_put(msg.msg);
    27be:	4628      	mov	r0, r5
    27c0:	f019 fcfd 	bl	1c1be <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
    27c4:	b92c      	cbnz	r4, 27d2 <z_impl_log_process+0x46>
	return dropped_cnt > 0;
    27c6:	4b3c      	ldr	r3, [pc, #240]	; (28b8 <z_impl_log_process+0x12c>)
	if (!bypass && z_log_dropped_pending()) {
    27c8:	681b      	ldr	r3, [r3, #0]
    27ca:	2b00      	cmp	r3, #0
    27cc:	dd01      	ble.n	27d2 <z_impl_log_process+0x46>
		dropped_notify();
    27ce:	f7ff ff27 	bl	2620 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    27d2:	483a      	ldr	r0, [pc, #232]	; (28bc <z_impl_log_process+0x130>)
    27d4:	f019 fbd8 	bl	1bf88 <log_list_head_peek>
    27d8:	1e04      	subs	r4, r0, #0
    27da:	bf18      	it	ne
    27dc:	2401      	movne	r4, #1
}
    27de:	4620      	mov	r0, r4
    27e0:	b005      	add	sp, #20
    27e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    27e6:	4b36      	ldr	r3, [pc, #216]	; (28c0 <z_impl_log_process+0x134>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
    27e8:	781b      	ldrb	r3, [r3, #0]
    27ea:	b9e3      	cbnz	r3, 2826 <z_impl_log_process+0x9a>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    27ec:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    27ee:	07db      	lsls	r3, r3, #31
    27f0:	d419      	bmi.n	2826 <z_impl_log_process+0x9a>
	msg_str = log_msg_str_get(msg);
    27f2:	f019 fcf7 	bl	1c1e4 <log_msg_str_get>
    27f6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    27f8:	4628      	mov	r0, r5
    27fa:	f019 fcbe 	bl	1c17a <log_msg_nargs_get>
    27fe:	4601      	mov	r1, r0
    2800:	4638      	mov	r0, r7
    2802:	f019 fbd6 	bl	1bfb2 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    2806:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 28c4 <z_impl_log_process+0x138>
    280a:	4b2f      	ldr	r3, [pc, #188]	; (28c8 <z_impl_log_process+0x13c>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    280c:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 28cc <z_impl_log_process+0x140>
    2810:	eba3 0308 	sub.w	r3, r3, r8
    2814:	08db      	lsrs	r3, r3, #3
    2816:	9303      	str	r3, [sp, #12]
    2818:	4b2d      	ldr	r3, [pc, #180]	; (28d0 <z_impl_log_process+0x144>)
    281a:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    281e:	4606      	mov	r6, r0
    2820:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    2824:	b936      	cbnz	r6, 2834 <z_impl_log_process+0xa8>
    2826:	4e2b      	ldr	r6, [pc, #172]	; (28d4 <z_impl_log_process+0x148>)
    2828:	4f2b      	ldr	r7, [pc, #172]	; (28d8 <z_impl_log_process+0x14c>)
    282a:	1bbf      	subs	r7, r7, r6
    282c:	113f      	asrs	r7, r7, #4
    282e:	f04f 0800 	mov.w	r8, #0
    2832:	e03a      	b.n	28aa <z_impl_log_process+0x11e>
		idx = 31 - __builtin_clz(mask);
    2834:	fab6 f186 	clz	r1, r6
    2838:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    283c:	4649      	mov	r1, r9
    283e:	4628      	mov	r0, r5
    2840:	f019 fc9e 	bl	1c180 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    2844:	4b25      	ldr	r3, [pc, #148]	; (28dc <z_impl_log_process+0x150>)
    2846:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    2848:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    284a:	d302      	bcc.n	2852 <z_impl_log_process+0xc6>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    284c:	4a24      	ldr	r2, [pc, #144]	; (28e0 <z_impl_log_process+0x154>)
    284e:	4290      	cmp	r0, r2
    2850:	d31a      	bcc.n	2888 <z_impl_log_process+0xfc>
    2852:	4608      	mov	r0, r1
    2854:	f7ff ff8a 	bl	276c <log_is_strdup>
    2858:	4602      	mov	r2, r0
    285a:	b9a8      	cbnz	r0, 2888 <z_impl_log_process+0xfc>
    285c:	4b21      	ldr	r3, [pc, #132]	; (28e4 <z_impl_log_process+0x158>)
    285e:	4299      	cmp	r1, r3
    2860:	d012      	beq.n	2888 <z_impl_log_process+0xfc>
	return msg->hdr.ids.source_id;
    2862:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2864:	9903      	ldr	r1, [sp, #12]
    2866:	f3c3 1389 	ubfx	r3, r3, #6, #10
    286a:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    286c:	bf38      	it	cc
    286e:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    2872:	ea4f 138a 	mov.w	r3, sl, lsl #6
    2876:	f043 0301 	orr.w	r3, r3, #1
    287a:	f8ad 3000 	strh.w	r3, [sp]
    287e:	4649      	mov	r1, r9
    2880:	463b      	mov	r3, r7
    2882:	4658      	mov	r0, fp
    2884:	f019 fbef 	bl	1c066 <log_3>
		mask &= ~BIT(idx);
    2888:	2301      	movs	r3, #1
    288a:	fa03 f109 	lsl.w	r1, r3, r9
    288e:	ea26 0601 	bic.w	r6, r6, r1
    2892:	e7c7      	b.n	2824 <z_impl_log_process+0x98>
	return backend->cb->active;
    2894:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    2896:	795b      	ldrb	r3, [r3, #5]
    2898:	b123      	cbz	r3, 28a4 <z_impl_log_process+0x118>
	backend->api->put(backend, msg);
    289a:	6833      	ldr	r3, [r6, #0]
    289c:	4629      	mov	r1, r5
    289e:	685b      	ldr	r3, [r3, #4]
    28a0:	4630      	mov	r0, r6
    28a2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    28a4:	f108 0801 	add.w	r8, r8, #1
    28a8:	3610      	adds	r6, #16
    28aa:	45b8      	cmp	r8, r7
    28ac:	dbf2      	blt.n	2894 <z_impl_log_process+0x108>
    28ae:	e786      	b.n	27be <z_impl_log_process+0x32>
    28b0:	20002923 	.word	0x20002923
    28b4:	200013ec 	.word	0x200013ec
    28b8:	200013f0 	.word	0x200013f0
    28bc:	200013f8 	.word	0x200013f8
    28c0:	20002924 	.word	0x20002924
    28c4:	00020e00 	.word	0x00020e00
    28c8:	00020f58 	.word	0x00020f58
    28cc:	00022a37 	.word	0x00022a37
    28d0:	00020f20 	.word	0x00020f20
    28d4:	00020f58 	.word	0x00020f58
    28d8:	00020f78 	.word	0x00020f78
    28dc:	00020b1c 	.word	0x00020b1c
    28e0:	00024858 	.word	0x00024858
    28e4:	00022a1d 	.word	0x00022a1d

000028e8 <log_process_thread_func>:
{
    28e8:	b510      	push	{r4, lr}
	log_init();
    28ea:	f7ff fedd 	bl	26a8 <log_init>
	return z_impl_k_current_get();
    28ee:	f018 fbe9 	bl	1b0c4 <z_impl_k_current_get>
	proc_tid = process_tid;
    28f2:	4b0c      	ldr	r3, [pc, #48]	; (2924 <log_process_thread_func+0x3c>)
    28f4:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    28f6:	b130      	cbz	r0, 2906 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    28f8:	4b0b      	ldr	r3, [pc, #44]	; (2928 <log_process_thread_func+0x40>)
	    process_tid &&
    28fa:	681b      	ldr	r3, [r3, #0]
    28fc:	2b09      	cmp	r3, #9
    28fe:	dd02      	ble.n	2906 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    2900:	480a      	ldr	r0, [pc, #40]	; (292c <log_process_thread_func+0x44>)
    2902:	f017 fee1 	bl	1a6c8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    2906:	4c09      	ldr	r4, [pc, #36]	; (292c <log_process_thread_func+0x44>)
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2908:	2000      	movs	r0, #0
    290a:	f7ff ff3f 	bl	278c <z_impl_log_process>
		if (log_process(false) == false) {
    290e:	2800      	cmp	r0, #0
    2910:	d1fa      	bne.n	2908 <log_process_thread_func+0x20>
    2912:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    291a:	4620      	mov	r0, r4
    291c:	f017 fefa 	bl	1a714 <z_impl_k_sem_take>
    2920:	e7f2      	b.n	2908 <log_process_thread_func+0x20>
    2922:	bf00      	nop
    2924:	2000141c 	.word	0x2000141c
    2928:	200013ec 	.word	0x200013ec
    292c:	20000754 	.word	0x20000754

00002930 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    2930:	4b29      	ldr	r3, [pc, #164]	; (29d8 <msg_finalize+0xa8>)
{
    2932:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
    2934:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    2936:	8141      	strh	r1, [r0, #10]
{
    2938:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    293a:	4798      	blx	r3
    293c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    293e:	f04f 0320 	mov.w	r3, #32
    2942:	f3ef 8511 	mrs	r5, BASEPRI
    2946:	f383 8812 	msr	BASEPRI_MAX, r3
    294a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    294e:	4823      	ldr	r0, [pc, #140]	; (29dc <msg_finalize+0xac>)
    2950:	4621      	mov	r1, r4
    2952:	f019 fb0f 	bl	1bf74 <log_list_add_tail>
	__asm__ volatile(
    2956:	f385 8811 	msr	BASEPRI, r5
    295a:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    295e:	f3bf 8f5b 	dmb	ish
    2962:	4b1f      	ldr	r3, [pc, #124]	; (29e0 <msg_finalize+0xb0>)
    2964:	e853 2f00 	ldrex	r2, [r3]
    2968:	3201      	adds	r2, #1
    296a:	e843 2100 	strex	r1, r2, [r3]
    296e:	2900      	cmp	r1, #0
    2970:	d1f8      	bne.n	2964 <msg_finalize+0x34>
    2972:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    2976:	4a1b      	ldr	r2, [pc, #108]	; (29e4 <msg_finalize+0xb4>)
    2978:	7812      	ldrb	r2, [r2, #0]
    297a:	b182      	cbz	r2, 299e <msg_finalize+0x6e>
	__asm__ volatile(
    297c:	f04f 0320 	mov.w	r3, #32
    2980:	f3ef 8411 	mrs	r4, BASEPRI
    2984:	f383 8812 	msr	BASEPRI_MAX, r3
    2988:	f3bf 8f6f 	isb	sy
    298c:	2000      	movs	r0, #0
    298e:	f7ff fefd 	bl	278c <z_impl_log_process>
	__asm__ volatile(
    2992:	f384 8811 	msr	BASEPRI, r4
    2996:	f3bf 8f6f 	isb	sy
}
    299a:	b003      	add	sp, #12
    299c:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    299e:	4a12      	ldr	r2, [pc, #72]	; (29e8 <msg_finalize+0xb8>)
    29a0:	681b      	ldr	r3, [r3, #0]
    29a2:	6812      	ldr	r2, [r2, #0]
    29a4:	2a00      	cmp	r2, #0
    29a6:	d0f8      	beq.n	299a <msg_finalize+0x6a>
    29a8:	2b01      	cmp	r3, #1
    29aa:	d10a      	bne.n	29c2 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    29ac:	2200      	movs	r2, #0
    29ae:	2300      	movs	r3, #0
    29b0:	e9cd 2300 	strd	r2, r3, [sp]
    29b4:	480d      	ldr	r0, [pc, #52]	; (29ec <msg_finalize+0xbc>)
    29b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    29ba:	2300      	movs	r3, #0
    29bc:	f018 fd7a 	bl	1b4b4 <z_impl_k_timer_start>
    29c0:	e7eb      	b.n	299a <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    29c2:	2b0a      	cmp	r3, #10
    29c4:	d1e9      	bne.n	299a <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    29c6:	4809      	ldr	r0, [pc, #36]	; (29ec <msg_finalize+0xbc>)
    29c8:	f01d ff2e 	bl	20828 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    29cc:	4808      	ldr	r0, [pc, #32]	; (29f0 <msg_finalize+0xc0>)
}
    29ce:	b003      	add	sp, #12
    29d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    29d4:	f017 be78 	b.w	1a6c8 <z_impl_k_sem_give>
    29d8:	200001dc 	.word	0x200001dc
    29dc:	200013f8 	.word	0x200013f8
    29e0:	200013ec 	.word	0x200013ec
    29e4:	20002924 	.word	0x20002924
    29e8:	2000141c 	.word	0x2000141c
    29ec:	200008e8 	.word	0x200008e8
    29f0:	20000754 	.word	0x20000754

000029f4 <z_impl_log_panic>:
{
    29f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    29f6:	4f0e      	ldr	r7, [pc, #56]	; (2a30 <z_impl_log_panic+0x3c>)
    29f8:	783d      	ldrb	r5, [r7, #0]
    29fa:	b975      	cbnz	r5, 2a1a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    29fc:	4c0d      	ldr	r4, [pc, #52]	; (2a34 <z_impl_log_panic+0x40>)
    29fe:	4e0e      	ldr	r6, [pc, #56]	; (2a38 <z_impl_log_panic+0x44>)
	log_init();
    2a00:	f7ff fe52 	bl	26a8 <log_init>
    2a04:	1b36      	subs	r6, r6, r4
    2a06:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    2a08:	42b5      	cmp	r5, r6
    2a0a:	db07      	blt.n	2a1c <z_impl_log_panic+0x28>
    2a0c:	2000      	movs	r0, #0
    2a0e:	f7ff febd 	bl	278c <z_impl_log_process>
		while (log_process(false) == true) {
    2a12:	2800      	cmp	r0, #0
    2a14:	d1fa      	bne.n	2a0c <z_impl_log_panic+0x18>
	panic_mode = true;
    2a16:	2301      	movs	r3, #1
    2a18:	703b      	strb	r3, [r7, #0]
}
    2a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    2a1c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2a1e:	795b      	ldrb	r3, [r3, #5]
    2a20:	b11b      	cbz	r3, 2a2a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    2a22:	6823      	ldr	r3, [r4, #0]
    2a24:	4620      	mov	r0, r4
    2a26:	695b      	ldr	r3, [r3, #20]
    2a28:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    2a2a:	3501      	adds	r5, #1
    2a2c:	3410      	adds	r4, #16
    2a2e:	e7eb      	b.n	2a08 <z_impl_log_panic+0x14>
    2a30:	20002924 	.word	0x20002924
    2a34:	00020f58 	.word	0x00020f58
    2a38:	00020f78 	.word	0x00020f78

00002a3c <log_free>:
{
    2a3c:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2a3e:	3804      	subs	r0, #4
    2a40:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2a42:	f3bf 8f5b 	dmb	ish
    2a46:	e850 3f00 	ldrex	r3, [r0]
    2a4a:	1e5a      	subs	r2, r3, #1
    2a4c:	e840 2100 	strex	r1, r2, [r0]
    2a50:	2900      	cmp	r1, #0
    2a52:	d1f8      	bne.n	2a46 <log_free+0xa>
    2a54:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2a58:	2b01      	cmp	r3, #1
    2a5a:	d103      	bne.n	2a64 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2a5c:	4803      	ldr	r0, [pc, #12]	; (2a6c <log_free+0x30>)
    2a5e:	a901      	add	r1, sp, #4
    2a60:	f01d fb48 	bl	200f4 <k_mem_slab_free>
}
    2a64:	b003      	add	sp, #12
    2a66:	f85d fb04 	ldr.w	pc, [sp], #4
    2a6a:	bf00      	nop
    2a6c:	20001400 	.word	0x20001400

00002a70 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2a70:	2320      	movs	r3, #32
    2a72:	4902      	ldr	r1, [pc, #8]	; (2a7c <log_msg_pool_init+0xc>)
    2a74:	4802      	ldr	r0, [pc, #8]	; (2a80 <log_msg_pool_init+0x10>)
    2a76:	461a      	mov	r2, r3
    2a78:	f01d bb21 	b.w	200be <k_mem_slab_init>
    2a7c:	20005848 	.word	0x20005848
    2a80:	20001420 	.word	0x20001420

00002a84 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    2a86:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    2a88:	4d09      	ldr	r5, [pc, #36]	; (2ab0 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    2a8a:	9301      	str	r3, [sp, #4]
    2a8c:	2001      	movs	r0, #1
    2a8e:	f7ff fe7d 	bl	278c <z_impl_log_process>
    2a92:	4604      	mov	r4, r0
			z_log_dropped();
    2a94:	f7ff fda4 	bl	25e0 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2a98:	2200      	movs	r2, #0
    2a9a:	2300      	movs	r3, #0
    2a9c:	a901      	add	r1, sp, #4
    2a9e:	4628      	mov	r0, r5
    2aa0:	f017 fc26 	bl	1a2f0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2aa4:	b108      	cbz	r0, 2aaa <log_msg_no_space_handle+0x26>
    2aa6:	2c00      	cmp	r4, #0
    2aa8:	d1f0      	bne.n	2a8c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    2aaa:	9801      	ldr	r0, [sp, #4]
    2aac:	b003      	add	sp, #12
    2aae:	bd30      	pop	{r4, r5, pc}
    2ab0:	20001420 	.word	0x20001420

00002ab4 <log_msg_chunk_alloc>:
{
    2ab4:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    2ab6:	2300      	movs	r3, #0
    2ab8:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2aba:	4807      	ldr	r0, [pc, #28]	; (2ad8 <log_msg_chunk_alloc+0x24>)
    2abc:	2200      	movs	r2, #0
    2abe:	2300      	movs	r3, #0
    2ac0:	a901      	add	r1, sp, #4
    2ac2:	f017 fc15 	bl	1a2f0 <k_mem_slab_alloc>
	if (err != 0) {
    2ac6:	b110      	cbz	r0, 2ace <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    2ac8:	f7ff ffdc 	bl	2a84 <log_msg_no_space_handle>
    2acc:	9001      	str	r0, [sp, #4]
}
    2ace:	9801      	ldr	r0, [sp, #4]
    2ad0:	b003      	add	sp, #12
    2ad2:	f85d fb04 	ldr.w	pc, [sp], #4
    2ad6:	bf00      	nop
    2ad8:	20001420 	.word	0x20001420

00002adc <msg_free>:
{
    2adc:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2ade:	7a03      	ldrb	r3, [r0, #8]
    2ae0:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    2ae2:	07dc      	lsls	r4, r3, #31
{
    2ae4:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    2ae6:	d41e      	bmi.n	2b26 <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    2ae8:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    2aea:	092d      	lsrs	r5, r5, #4
    2aec:	d01b      	beq.n	2b26 <msg_free+0x4a>
		uint32_t smask = 0U;
    2aee:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
    2af0:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    2af2:	9801      	ldr	r0, [sp, #4]
    2af4:	4631      	mov	r1, r6
    2af6:	f019 fb43 	bl	1c180 <log_msg_arg_get>
    2afa:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    2afc:	f7ff fe36 	bl	276c <log_is_strdup>
    2b00:	b170      	cbz	r0, 2b20 <msg_free+0x44>
				if (smask == 0U) {
    2b02:	b934      	cbnz	r4, 2b12 <msg_free+0x36>
					smask = z_log_get_s_mask(
    2b04:	9b01      	ldr	r3, [sp, #4]
    2b06:	4629      	mov	r1, r5
    2b08:	6918      	ldr	r0, [r3, #16]
    2b0a:	f019 fa52 	bl	1bfb2 <z_log_get_s_mask>
					if (smask == 0U) {
    2b0e:	4604      	mov	r4, r0
    2b10:	b148      	cbz	r0, 2b26 <msg_free+0x4a>
				if (smask & BIT(i)) {
    2b12:	fa24 f306 	lsr.w	r3, r4, r6
    2b16:	07d9      	lsls	r1, r3, #31
    2b18:	d502      	bpl.n	2b20 <msg_free+0x44>
					log_free(buf);
    2b1a:	4638      	mov	r0, r7
    2b1c:	f7ff ff8e 	bl	2a3c <log_free>
		for (i = 0U; i < nargs; i++) {
    2b20:	3601      	adds	r6, #1
    2b22:	42ae      	cmp	r6, r5
    2b24:	d3e5      	bcc.n	2af2 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    2b26:	9b01      	ldr	r3, [sp, #4]
    2b28:	7a1a      	ldrb	r2, [r3, #8]
    2b2a:	0792      	lsls	r2, r2, #30
    2b2c:	d504      	bpl.n	2b38 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    2b2e:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2b30:	4c08      	ldr	r4, [pc, #32]	; (2b54 <msg_free+0x78>)
    2b32:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    2b34:	9b03      	ldr	r3, [sp, #12]
    2b36:	b92b      	cbnz	r3, 2b44 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2b38:	4806      	ldr	r0, [pc, #24]	; (2b54 <msg_free+0x78>)
    2b3a:	a901      	add	r1, sp, #4
    2b3c:	f01d fada 	bl	200f4 <k_mem_slab_free>
}
    2b40:	b005      	add	sp, #20
    2b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    2b44:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2b46:	a903      	add	r1, sp, #12
    2b48:	4620      	mov	r0, r4
    2b4a:	f01d fad3 	bl	200f4 <k_mem_slab_free>
		cont = next;
    2b4e:	9503      	str	r5, [sp, #12]
    2b50:	e7f0      	b.n	2b34 <msg_free+0x58>
    2b52:	bf00      	nop
    2b54:	20001420 	.word	0x20001420

00002b58 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2b58:	b40e      	push	{r1, r2, r3}
    2b5a:	b503      	push	{r0, r1, lr}
    2b5c:	ab03      	add	r3, sp, #12
    2b5e:	4601      	mov	r1, r0
    2b60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2b64:	4804      	ldr	r0, [pc, #16]	; (2b78 <print_formatted+0x20>)
	va_start(args, fmt);
    2b66:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2b68:	f7ff f90c 	bl	1d84 <cbvprintf>
	va_end(args);

	return length;
}
    2b6c:	b002      	add	sp, #8
    2b6e:	f85d eb04 	ldr.w	lr, [sp], #4
    2b72:	b003      	add	sp, #12
    2b74:	4770      	bx	lr
    2b76:	bf00      	nop
    2b78:	0001c59d 	.word	0x0001c59d

00002b7c <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    2b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b80:	461d      	mov	r5, r3
    2b82:	9b08      	ldr	r3, [sp, #32]
    2b84:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2b86:	06da      	lsls	r2, r3, #27
{
    2b88:	4604      	mov	r4, r0
    2b8a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2b8c:	d405      	bmi.n	2b9a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2b8e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    2b90:	bf4c      	ite	mi
    2b92:	492a      	ldrmi	r1, [pc, #168]	; (2c3c <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2b94:	492a      	ldrpl	r1, [pc, #168]	; (2c40 <hexdump_line_print+0xc4>)
    2b96:	f7ff ffdf 	bl	2b58 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    2b9a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 2c44 <hexdump_line_print+0xc8>
{
    2b9e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    2ba2:	45a8      	cmp	r8, r5
    2ba4:	db2a      	blt.n	2bfc <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    2ba6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 2c48 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    2baa:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 2c4c <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    2bae:	f8df a094 	ldr.w	sl, [pc, #148]	; 2c44 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bb2:	2500      	movs	r5, #0
		if (i < length) {
    2bb4:	42bd      	cmp	r5, r7
    2bb6:	d22f      	bcs.n	2c18 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    2bb8:	5d72      	ldrb	r2, [r6, r5]
    2bba:	4649      	mov	r1, r9
    2bbc:	4620      	mov	r0, r4
    2bbe:	f7ff ffcb 	bl	2b58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bc2:	3501      	adds	r5, #1
    2bc4:	2d10      	cmp	r5, #16
    2bc6:	d120      	bne.n	2c0a <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    2bc8:	4921      	ldr	r1, [pc, #132]	; (2c50 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    2bca:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2c44 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    2bce:	f8df 9084 	ldr.w	r9, [pc, #132]	; 2c54 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    2bd2:	4620      	mov	r0, r4
    2bd4:	f7ff ffc0 	bl	2b58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bd8:	2500      	movs	r5, #0
		if (i < length) {
    2bda:	42af      	cmp	r7, r5
    2bdc:	d928      	bls.n	2c30 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    2bde:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    2be0:	f1a2 0320 	sub.w	r3, r2, #32
    2be4:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    2be6:	bf28      	it	cs
    2be8:	222e      	movcs	r2, #46	; 0x2e
    2bea:	4649      	mov	r1, r9
    2bec:	4620      	mov	r0, r4
    2bee:	f7ff ffb3 	bl	2b58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bf2:	3501      	adds	r5, #1
    2bf4:	2d10      	cmp	r5, #16
    2bf6:	d114      	bne.n	2c22 <hexdump_line_print+0xa6>
		}
	}
}
    2bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2bfc:	4649      	mov	r1, r9
    2bfe:	4620      	mov	r0, r4
    2c00:	f7ff ffaa 	bl	2b58 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2c04:	f108 0801 	add.w	r8, r8, #1
    2c08:	e7cb      	b.n	2ba2 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2c0a:	076a      	lsls	r2, r5, #29
    2c0c:	d1d2      	bne.n	2bb4 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    2c0e:	4651      	mov	r1, sl
    2c10:	4620      	mov	r0, r4
    2c12:	f7ff ffa1 	bl	2b58 <print_formatted>
    2c16:	e7cd      	b.n	2bb4 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    2c18:	4641      	mov	r1, r8
    2c1a:	4620      	mov	r0, r4
    2c1c:	f7ff ff9c 	bl	2b58 <print_formatted>
    2c20:	e7cf      	b.n	2bc2 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    2c22:	076b      	lsls	r3, r5, #29
    2c24:	d1d9      	bne.n	2bda <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2c26:	4641      	mov	r1, r8
    2c28:	4620      	mov	r0, r4
    2c2a:	f7ff ff95 	bl	2b58 <print_formatted>
    2c2e:	e7d4      	b.n	2bda <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    2c30:	4641      	mov	r1, r8
    2c32:	4620      	mov	r0, r4
    2c34:	f7ff ff90 	bl	2b58 <print_formatted>
    2c38:	e7db      	b.n	2bf2 <hexdump_line_print+0x76>
    2c3a:	bf00      	nop
    2c3c:	00022a7b 	.word	0x00022a7b
    2c40:	00022a7a 	.word	0x00022a7a
    2c44:	00022a85 	.word	0x00022a85
    2c48:	00022a83 	.word	0x00022a83
    2c4c:	00022a7d 	.word	0x00022a7d
    2c50:	00022a87 	.word	0x00022a87
    2c54:	00022a89 	.word	0x00022a89

00002c58 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    2c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c5c:	b087      	sub	sp, #28
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    2c5e:	f011 0602 	ands.w	r6, r1, #2
{
    2c62:	9205      	str	r2, [sp, #20]
    2c64:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    2c68:	f9bd 9048 	ldrsh.w	r9, [sp, #72]	; 0x48
    2c6c:	4607      	mov	r7, r0
    2c6e:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    2c70:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2c74:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    2c78:	d006      	beq.n	2c88 <prefix_print+0x30>
	if (!format) {
    2c7a:	f011 0f44 	tst.w	r1, #68	; 0x44
    2c7e:	d138      	bne.n	2cf2 <prefix_print+0x9a>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2c80:	4933      	ldr	r1, [pc, #204]	; (2d50 <prefix_print+0xf8>)
    2c82:	f7ff ff69 	bl	2b58 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2c86:	4606      	mov	r6, r0
	if (color) {
    2c88:	f1ba 0f00 	cmp.w	sl, #0
    2c8c:	d00a      	beq.n	2ca4 <prefix_print+0x4c>
		const char *log_color = start && (colors[level] != NULL) ?
    2c8e:	4b31      	ldr	r3, [pc, #196]	; (2d54 <prefix_print+0xfc>)
		print_formatted(output, "%s", log_color);
    2c90:	4931      	ldr	r1, [pc, #196]	; (2d58 <prefix_print+0x100>)
		const char *log_color = start && (colors[level] != NULL) ?
    2c92:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
		print_formatted(output, "%s", log_color);
    2c96:	4b31      	ldr	r3, [pc, #196]	; (2d5c <prefix_print+0x104>)
    2c98:	4638      	mov	r0, r7
    2c9a:	2a00      	cmp	r2, #0
    2c9c:	bf08      	it	eq
    2c9e:	461a      	moveq	r2, r3
    2ca0:	f7ff ff5a 	bl	2b58 <print_formatted>
	if (level_on) {
    2ca4:	b13d      	cbz	r5, 2cb6 <prefix_print+0x5e>
		total += print_formatted(output, "<%s> ", severity[level]);
    2ca6:	4b2e      	ldr	r3, [pc, #184]	; (2d60 <prefix_print+0x108>)
    2ca8:	492e      	ldr	r1, [pc, #184]	; (2d64 <prefix_print+0x10c>)
    2caa:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
    2cae:	4638      	mov	r0, r7
    2cb0:	f7ff ff52 	bl	2b58 <print_formatted>
    2cb4:	4605      	mov	r5, r0
	if (source_id >= 0) {
    2cb6:	f1b9 0f00 	cmp.w	r9, #0
    2cba:	db16      	blt.n	2cea <prefix_print+0x92>
		total += print_formatted(output,
    2cbc:	9b05      	ldr	r3, [sp, #20]
    2cbe:	2b00      	cmp	r3, #0
    2cc0:	d043      	beq.n	2d4a <prefix_print+0xf2>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2cc2:	2301      	movs	r3, #1
    2cc4:	fa03 f808 	lsl.w	r8, r3, r8
		total += print_formatted(output,
    2cc8:	4b27      	ldr	r3, [pc, #156]	; (2d68 <prefix_print+0x110>)
    2cca:	4c28      	ldr	r4, [pc, #160]	; (2d6c <prefix_print+0x114>)
    2ccc:	f018 0f10 	tst.w	r8, #16
    2cd0:	bf18      	it	ne
    2cd2:	461c      	movne	r4, r3
    2cd4:	4649      	mov	r1, r9
    2cd6:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2cda:	f7ff fcbd 	bl	2658 <log_source_name_get>
    2cde:	4621      	mov	r1, r4
    2ce0:	4602      	mov	r2, r0
    2ce2:	4638      	mov	r0, r7
    2ce4:	f7ff ff38 	bl	2b58 <print_formatted>
    2ce8:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2cea:	19a8      	adds	r0, r5, r6
    2cec:	b007      	add	sp, #28
    2cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    2cf2:	4b1f      	ldr	r3, [pc, #124]	; (2d70 <prefix_print+0x118>)
    2cf4:	6819      	ldr	r1, [r3, #0]
    2cf6:	b331      	cbz	r1, 2d46 <prefix_print+0xee>
		timestamp /= timestamp_div;
    2cf8:	4b1e      	ldr	r3, [pc, #120]	; (2d74 <prefix_print+0x11c>)
    2cfa:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    2cfe:	681b      	ldr	r3, [r3, #0]
    2d00:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    2d04:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    2d08:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    2d0c:	fbb4 f2f6 	udiv	r2, r4, r6
    2d10:	fb06 4612 	mls	r6, r6, r2, r4
		remainder = timestamp % freq;
    2d14:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    2d18:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    2d1c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d20:	fbb4 fef1 	udiv	lr, r4, r1
		mins = seconds / 60U;
    2d24:	fbb6 f3fc 	udiv	r3, r6, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d28:	fb01 441e 	mls	r4, r1, lr, r4
			length = print_formatted(output,
    2d2c:	fb0c 6613 	mls	r6, ip, r3, r6
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d30:	fb0b f404 	mul.w	r4, fp, r4
			length = print_formatted(output,
    2d34:	9600      	str	r6, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2d36:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(output,
    2d3a:	e9cd e101 	strd	lr, r1, [sp, #4]
    2d3e:	490e      	ldr	r1, [pc, #56]	; (2d78 <prefix_print+0x120>)
    2d40:	f7ff ff0a 	bl	2b58 <print_formatted>
    2d44:	e79f      	b.n	2c86 <prefix_print+0x2e>
		length = 0;
    2d46:	4608      	mov	r0, r1
    2d48:	e79d      	b.n	2c86 <prefix_print+0x2e>
		total += print_formatted(output,
    2d4a:	4c08      	ldr	r4, [pc, #32]	; (2d6c <prefix_print+0x114>)
    2d4c:	e7c2      	b.n	2cd4 <prefix_print+0x7c>
    2d4e:	bf00      	nop
    2d50:	00022a9a 	.word	0x00022a9a
    2d54:	00021128 	.word	0x00021128
    2d58:	000236da 	.word	0x000236da
    2d5c:	00022a8c 	.word	0x00022a8c
    2d60:	0002113c 	.word	0x0002113c
    2d64:	00022abf 	.word	0x00022abf
    2d68:	00022a96 	.word	0x00022a96
    2d6c:	00022a91 	.word	0x00022a91
    2d70:	2000143c 	.word	0x2000143c
    2d74:	20001440 	.word	0x20001440
    2d78:	00022aa3 	.word	0x00022aa3

00002d7c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    2d7c:	b538      	push	{r3, r4, r5, lr}
    2d7e:	460c      	mov	r4, r1
	if (color) {
    2d80:	07e1      	lsls	r1, r4, #31
{
    2d82:	4605      	mov	r5, r0
	if (color) {
    2d84:	d503      	bpl.n	2d8e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    2d86:	4a08      	ldr	r2, [pc, #32]	; (2da8 <postfix_print+0x2c>)
    2d88:	4908      	ldr	r1, [pc, #32]	; (2dac <postfix_print+0x30>)
    2d8a:	f7ff fee5 	bl	2b58 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2d8e:	06e2      	lsls	r2, r4, #27
    2d90:	d408      	bmi.n	2da4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    2d92:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    2d94:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    2d96:	bf4c      	ite	mi
    2d98:	4905      	ldrmi	r1, [pc, #20]	; (2db0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2d9a:	4906      	ldrpl	r1, [pc, #24]	; (2db4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    2d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2da0:	f7ff beda 	b.w	2b58 <print_formatted>
}
    2da4:	bd38      	pop	{r3, r4, r5, pc}
    2da6:	bf00      	nop
    2da8:	00022a8c 	.word	0x00022a8c
    2dac:	000236da 	.word	0x000236da
    2db0:	00022a7b 	.word	0x00022a7b
    2db4:	00022a7a 	.word	0x00022a7a

00002db8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    2db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    2dbc:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
    2dbe:	f013 0807 	ands.w	r8, r3, #7
{
    2dc2:	b08a      	sub	sp, #40	; 0x28
    2dc4:	4605      	mov	r5, r0
    2dc6:	460e      	mov	r6, r1
    2dc8:	4617      	mov	r7, r2
			0 : prefix_print(output, flags, std_msg, timestamp,
    2dca:	d022      	beq.n	2e12 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2dcc:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    2dce:	8949      	ldrh	r1, [r1, #10]
    2dd0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    2dd4:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2dd8:	43d2      	mvns	r2, r2
    2dda:	e9cd 8300 	strd	r8, r3, [sp]
    2dde:	9102      	str	r1, [sp, #8]
    2de0:	68f3      	ldr	r3, [r6, #12]
    2de2:	f002 0201 	and.w	r2, r2, #1
    2de6:	4639      	mov	r1, r7
    2de8:	f7ff ff36 	bl	2c58 <prefix_print>
    2dec:	4681      	mov	r9, r0
    2dee:	7a34      	ldrb	r4, [r6, #8]
    2df0:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    2df2:	f014 0401 	ands.w	r4, r4, #1
    2df6:	d00e      	beq.n	2e16 <log_output_msg_process+0x5e>
		std_print(msg, output);
    2df8:	4629      	mov	r1, r5
    2dfa:	4630      	mov	r0, r6
    2dfc:	f019 fa64 	bl	1c2c8 <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
    2e00:	f1b8 0f00 	cmp.w	r8, #0
    2e04:	d02b      	beq.n	2e5e <log_output_msg_process+0xa6>
		postfix_print(output, flags, level);
    2e06:	4642      	mov	r2, r8
    2e08:	4639      	mov	r1, r7
    2e0a:	4628      	mov	r0, r5
    2e0c:	f7ff ffb6 	bl	2d7c <postfix_print>
    2e10:	e025      	b.n	2e5e <log_output_msg_process+0xa6>
			0 : prefix_print(output, flags, std_msg, timestamp,
    2e12:	46c1      	mov	r9, r8
    2e14:	e7eb      	b.n	2dee <log_output_msg_process+0x36>
	} else if (raw_string) {
    2e16:	f1b8 0f00 	cmp.w	r8, #0
    2e1a:	d126      	bne.n	2e6a <log_output_msg_process+0xb2>
	size_t offset = 0;
    2e1c:	4627      	mov	r7, r4
		length = output->size;
    2e1e:	68eb      	ldr	r3, [r5, #12]
    2e20:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    2e22:	aa06      	add	r2, sp, #24
    2e24:	463b      	mov	r3, r7
    2e26:	68a9      	ldr	r1, [r5, #8]
    2e28:	4630      	mov	r0, r6
    2e2a:	f019 fa39 	bl	1c2a0 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    2e2e:	9a06      	ldr	r2, [sp, #24]
    2e30:	686b      	ldr	r3, [r5, #4]
    2e32:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    2e34:	b13a      	cbz	r2, 2e46 <log_output_msg_process+0x8e>
			eol = (output->buf[length - 1] == '\n');
    2e36:	68ab      	ldr	r3, [r5, #8]
    2e38:	4413      	add	r3, r2
    2e3a:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    2e3e:	f1a4 030a 	sub.w	r3, r4, #10
    2e42:	425c      	negs	r4, r3
    2e44:	415c      	adcs	r4, r3
		log_output_flush(output);
    2e46:	4628      	mov	r0, r5
    2e48:	f019 fb9b 	bl	1c582 <log_output_flush>
		offset += length;
    2e4c:	9b06      	ldr	r3, [sp, #24]
    2e4e:	441f      	add	r7, r3
	} while (length > 0);
    2e50:	2b00      	cmp	r3, #0
    2e52:	d1e4      	bne.n	2e1e <log_output_msg_process+0x66>
	if (eol) {
    2e54:	b11c      	cbz	r4, 2e5e <log_output_msg_process+0xa6>
		print_formatted(output, "\r");
    2e56:	4914      	ldr	r1, [pc, #80]	; (2ea8 <log_output_msg_process+0xf0>)
    2e58:	4628      	mov	r0, r5
    2e5a:	f7ff fe7d 	bl	2b58 <print_formatted>
	}

	log_output_flush(output);
    2e5e:	4628      	mov	r0, r5
}
    2e60:	b00a      	add	sp, #40	; 0x28
    2e62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    2e66:	f019 bb8c 	b.w	1c582 <log_output_flush>
	print_formatted(output, "%s", log_msg_str_get(msg));
    2e6a:	4630      	mov	r0, r6
    2e6c:	f019 f9ba 	bl	1c1e4 <log_msg_str_get>
    2e70:	490e      	ldr	r1, [pc, #56]	; (2eac <log_output_msg_process+0xf4>)
    2e72:	4602      	mov	r2, r0
    2e74:	4628      	mov	r0, r5
    2e76:	f7ff fe6f 	bl	2b58 <print_formatted>
		length = sizeof(buf);
    2e7a:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2e7e:	aa05      	add	r2, sp, #20
    2e80:	4623      	mov	r3, r4
    2e82:	a906      	add	r1, sp, #24
    2e84:	4630      	mov	r0, r6
		length = sizeof(buf);
    2e86:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    2e8a:	f019 fa09 	bl	1c2a0 <log_msg_hexdump_data_get>
		if (length) {
    2e8e:	9a05      	ldr	r2, [sp, #20]
    2e90:	2a00      	cmp	r2, #0
    2e92:	d0b8      	beq.n	2e06 <log_output_msg_process+0x4e>
			hexdump_line_print(output, buf, length,
    2e94:	464b      	mov	r3, r9
    2e96:	9700      	str	r7, [sp, #0]
    2e98:	a906      	add	r1, sp, #24
    2e9a:	4628      	mov	r0, r5
    2e9c:	f7ff fe6e 	bl	2b7c <hexdump_line_print>
			offset += length;
    2ea0:	9b05      	ldr	r3, [sp, #20]
    2ea2:	441c      	add	r4, r3
		length = sizeof(buf);
    2ea4:	e7eb      	b.n	2e7e <log_output_msg_process+0xc6>
    2ea6:	bf00      	nop
    2ea8:	00022ac5 	.word	0x00022ac5
    2eac:	000236da 	.word	0x000236da

00002eb0 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2eb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2eb2:	f242 730f 	movw	r3, #9999	; 0x270f
    2eb6:	428b      	cmp	r3, r1
    2eb8:	bf28      	it	cs
    2eba:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2ebc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ebe:	4a0f      	ldr	r2, [pc, #60]	; (2efc <log_output_dropped_process+0x4c>)
{
    2ec0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ec2:	2105      	movs	r1, #5
    2ec4:	4668      	mov	r0, sp
    2ec6:	f018 fc62 	bl	1b78e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2eca:	6863      	ldr	r3, [r4, #4]
    2ecc:	490c      	ldr	r1, [pc, #48]	; (2f00 <log_output_dropped_process+0x50>)
    2ece:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ed0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2ed2:	220b      	movs	r2, #11
    2ed4:	4628      	mov	r0, r5
    2ed6:	f019 f9ea 	bl	1c2ae <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2eda:	6863      	ldr	r3, [r4, #4]
    2edc:	4632      	mov	r2, r6
    2ede:	4669      	mov	r1, sp
    2ee0:	4628      	mov	r0, r5
    2ee2:	685b      	ldr	r3, [r3, #4]
    2ee4:	f019 f9e3 	bl	1c2ae <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2ee8:	6863      	ldr	r3, [r4, #4]
    2eea:	4906      	ldr	r1, [pc, #24]	; (2f04 <log_output_dropped_process+0x54>)
    2eec:	685b      	ldr	r3, [r3, #4]
    2eee:	221b      	movs	r2, #27
    2ef0:	4628      	mov	r0, r5
    2ef2:	f019 f9dc 	bl	1c2ae <buffer_write>
		     output->control_block->ctx);
}
    2ef6:	b002      	add	sp, #8
    2ef8:	bd70      	pop	{r4, r5, r6, pc}
    2efa:	bf00      	nop
    2efc:	00023316 	.word	0x00023316
    2f00:	00022b03 	.word	0x00022b03
    2f04:	00022ae7 	.word	0x00022ae7

00002f08 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2f08:	4a08      	ldr	r2, [pc, #32]	; (2f2c <log_output_timestamp_freq_set+0x24>)
{
    2f0a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2f0c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2f0e:	4c08      	ldr	r4, [pc, #32]	; (2f30 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2f10:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    2f12:	2100      	movs	r1, #0
    2f14:	42a0      	cmp	r0, r4
    2f16:	d804      	bhi.n	2f22 <log_output_timestamp_freq_set+0x1a>
    2f18:	b101      	cbz	r1, 2f1c <log_output_timestamp_freq_set+0x14>
    2f1a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2f1c:	4b05      	ldr	r3, [pc, #20]	; (2f34 <log_output_timestamp_freq_set+0x2c>)
    2f1e:	6018      	str	r0, [r3, #0]
}
    2f20:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    2f22:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2f24:	005b      	lsls	r3, r3, #1
    2f26:	2101      	movs	r1, #1
    2f28:	e7f4      	b.n	2f14 <log_output_timestamp_freq_set+0xc>
    2f2a:	bf00      	nop
    2f2c:	20001440 	.word	0x20001440
    2f30:	000f4240 	.word	0x000f4240
    2f34:	2000143c 	.word	0x2000143c

00002f38 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    2f3a:	4f07      	ldr	r7, [pc, #28]	; (2f58 <char_out+0x20>)
{
    2f3c:	460d      	mov	r5, r1
    2f3e:	4604      	mov	r4, r0
    2f40:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    2f42:	42b4      	cmp	r4, r6
    2f44:	d101      	bne.n	2f4a <char_out+0x12>
#endif
	}

	return length;
}
    2f46:	4628      	mov	r0, r5
    2f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    2f4a:	6838      	ldr	r0, [r7, #0]
    2f4c:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2f50:	6883      	ldr	r3, [r0, #8]
    2f52:	685b      	ldr	r3, [r3, #4]
    2f54:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    2f56:	e7f4      	b.n	2f42 <char_out+0xa>
    2f58:	20001458 	.word	0x20001458

00002f5c <panic>:
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2f5c:	4801      	ldr	r0, [pc, #4]	; (2f64 <panic+0x8>)
    2f5e:	f019 bb10 	b.w	1c582 <log_output_flush>
    2f62:	bf00      	nop
    2f64:	0002116c 	.word	0x0002116c

00002f68 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2f68:	4801      	ldr	r0, [pc, #4]	; (2f70 <dropped+0x8>)
    2f6a:	f7ff bfa1 	b.w	2eb0 <log_output_dropped_process>
    2f6e:	bf00      	nop
    2f70:	0002116c 	.word	0x0002116c

00002f74 <log_backend_uart_init>:
		log_output_msg2_process(&log_output_uart, &msg->log, flags);
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
    2f74:	b508      	push	{r3, lr}
    2f76:	4803      	ldr	r0, [pc, #12]	; (2f84 <log_backend_uart_init+0x10>)
    2f78:	f017 f834 	bl	19fe4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    2f7c:	4b02      	ldr	r3, [pc, #8]	; (2f88 <log_backend_uart_init+0x14>)
    2f7e:	6018      	str	r0, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    2f80:	bd08      	pop	{r3, pc}
    2f82:	bf00      	nop
    2f84:	00022b0f 	.word	0x00022b0f
    2f88:	20001458 	.word	0x20001458

00002f8c <put>:
{
    2f8c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2f8e:	4608      	mov	r0, r1
    2f90:	460c      	mov	r4, r1
    2f92:	f019 f8e5 	bl	1c160 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2f96:	4805      	ldr	r0, [pc, #20]	; (2fac <put+0x20>)
    2f98:	4621      	mov	r1, r4
    2f9a:	220f      	movs	r2, #15
    2f9c:	f7ff ff0c 	bl	2db8 <log_output_msg_process>
	log_msg_put(msg);
    2fa0:	4620      	mov	r0, r4
}
    2fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2fa6:	f019 b90a 	b.w	1c1be <log_msg_put>
    2faa:	bf00      	nop
    2fac:	0002116c 	.word	0x0002116c

00002fb0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2fb0:	4b01      	ldr	r3, [pc, #4]	; (2fb8 <log_backend_rtt_init+0x8>)
    2fb2:	2201      	movs	r2, #1
    2fb4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2fb6:	4770      	bx	lr
    2fb8:	20002936 	.word	0x20002936

00002fbc <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    2fbc:	4b02      	ldr	r3, [pc, #8]	; (2fc8 <panic+0xc>)
	log_output_flush(output);
    2fbe:	4803      	ldr	r0, [pc, #12]	; (2fcc <panic+0x10>)
    2fc0:	2201      	movs	r2, #1
    2fc2:	701a      	strb	r2, [r3, #0]
    2fc4:	f019 badd 	b.w	1c582 <log_output_flush>
    2fc8:	20002937 	.word	0x20002937
    2fcc:	00021198 	.word	0x00021198

00002fd0 <dropped>:
	log_output_dropped_process(output, cnt);
    2fd0:	4801      	ldr	r0, [pc, #4]	; (2fd8 <dropped+0x8>)
    2fd2:	f7ff bf6d 	b.w	2eb0 <log_output_dropped_process>
    2fd6:	bf00      	nop
    2fd8:	00021198 	.word	0x00021198

00002fdc <put>:
{
    2fdc:	b510      	push	{r4, lr}
	log_msg_get(msg);
    2fde:	4608      	mov	r0, r1
    2fe0:	460c      	mov	r4, r1
    2fe2:	f019 f8bd 	bl	1c160 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    2fe6:	4805      	ldr	r0, [pc, #20]	; (2ffc <put+0x20>)
    2fe8:	4621      	mov	r1, r4
    2fea:	220f      	movs	r2, #15
    2fec:	f7ff fee4 	bl	2db8 <log_output_msg_process>
	log_msg_put(msg);
    2ff0:	4620      	mov	r0, r4
}
    2ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2ff6:	f019 b8e2 	b.w	1c1be <log_msg_put>
    2ffa:	bf00      	nop
    2ffc:	00021198 	.word	0x00021198

00003000 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3000:	4b05      	ldr	r3, [pc, #20]	; (3018 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    3002:	781b      	ldrb	r3, [r3, #0]
    3004:	b11b      	cbz	r3, 300e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    3006:	f241 3088 	movw	r0, #5000	; 0x1388
    300a:	f01d bbd2 	b.w	207b2 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    300e:	20a4      	movs	r0, #164	; 0xa4
    3010:	2100      	movs	r1, #0
    3012:	f018 b83d 	b.w	1b090 <z_impl_k_sleep>
    3016:	bf00      	nop
    3018:	20002937 	.word	0x20002937

0000301c <data_out_block_mode>:
{
    301c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3020:	f8df 908c 	ldr.w	r9, [pc, #140]	; 30b0 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    3024:	f8df a08c 	ldr.w	sl, [pc, #140]	; 30b4 <data_out_block_mode+0x98>
{
    3028:	4680      	mov	r8, r0
    302a:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    302c:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    302e:	f899 5000 	ldrb.w	r5, [r9]
    3032:	b9cd      	cbnz	r5, 3068 <data_out_block_mode+0x4c>
    3034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    303c:	4650      	mov	r0, sl
    303e:	f017 fa55 	bl	1a4ec <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3042:	463a      	mov	r2, r7
    3044:	4641      	mov	r1, r8
    3046:	4628      	mov	r0, r5
    3048:	f016 ff56 	bl	19ef8 <SEGGER_RTT_WriteSkipNoLock>
    304c:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    304e:	4650      	mov	r0, sl
    3050:	f017 fac4 	bl	1a5dc <z_impl_k_mutex_unlock>
		if (ret) {
    3054:	4d18      	ldr	r5, [pc, #96]	; (30b8 <data_out_block_mode+0x9c>)
    3056:	b1fe      	cbz	r6, 3098 <data_out_block_mode+0x7c>
	host_present = true;
    3058:	2301      	movs	r3, #1
    305a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    305c:	f899 3000 	ldrb.w	r3, [r9]
    3060:	b96b      	cbnz	r3, 307e <data_out_block_mode+0x62>
}
    3062:	4638      	mov	r0, r7
    3064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3068:	463a      	mov	r2, r7
    306a:	4641      	mov	r1, r8
    306c:	2000      	movs	r0, #0
    306e:	f016 ff43 	bl	19ef8 <SEGGER_RTT_WriteSkipNoLock>
    3072:	4606      	mov	r6, r0
    3074:	e7ee      	b.n	3054 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    3076:	b95c      	cbnz	r4, 3090 <data_out_block_mode+0x74>
		host_present = false;
    3078:	702c      	strb	r4, [r5, #0]
    307a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    307e:	2000      	movs	r0, #0
    3080:	f016 ff86 	bl	19f90 <SEGGER_RTT_HasDataUp>
    3084:	2800      	cmp	r0, #0
    3086:	d0ec      	beq.n	3062 <data_out_block_mode+0x46>
    3088:	782b      	ldrb	r3, [r5, #0]
    308a:	2b00      	cmp	r3, #0
    308c:	d1f3      	bne.n	3076 <data_out_block_mode+0x5a>
    308e:	e7e8      	b.n	3062 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    3090:	3c01      	subs	r4, #1
    3092:	f7ff ffb5 	bl	3000 <on_failed_write.part.0>
    3096:	e7f2      	b.n	307e <data_out_block_mode+0x62>
		} else if (host_present) {
    3098:	782b      	ldrb	r3, [r5, #0]
    309a:	b113      	cbz	r3, 30a2 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    309c:	3c01      	subs	r4, #1
    309e:	d104      	bne.n	30aa <data_out_block_mode+0x8e>
		host_present = false;
    30a0:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    30a2:	782b      	ldrb	r3, [r5, #0]
    30a4:	2b00      	cmp	r3, #0
    30a6:	d1c2      	bne.n	302e <data_out_block_mode+0x12>
    30a8:	e7db      	b.n	3062 <data_out_block_mode+0x46>
    30aa:	f7ff ffa9 	bl	3000 <on_failed_write.part.0>
    30ae:	e7f8      	b.n	30a2 <data_out_block_mode+0x86>
    30b0:	20002937 	.word	0x20002937
    30b4:	20000728 	.word	0x20000728
    30b8:	20002936 	.word	0x20002936

000030bc <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    30bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    30be:	2407      	movs	r4, #7
    30c0:	9402      	str	r4, [sp, #8]
    30c2:	4c04      	ldr	r4, [pc, #16]	; (30d4 <read_pnp_id+0x18>)
    30c4:	9401      	str	r4, [sp, #4]
    30c6:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    30ca:	9400      	str	r4, [sp, #0]
    30cc:	f01c f8da 	bl	1f284 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    30d0:	b004      	add	sp, #16
    30d2:	bd10      	pop	{r4, pc}
    30d4:	200006cb 	.word	0x200006cb

000030d8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    30d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30da:	4605      	mov	r5, r0
	__asm__ volatile(
    30dc:	f04f 0320 	mov.w	r3, #32
    30e0:	f3ef 8611 	mrs	r6, BASEPRI
    30e4:	f383 8812 	msr	BASEPRI_MAX, r3
    30e8:	f3bf 8f6f 	isb	sy
	return list->head;
    30ec:	4b09      	ldr	r3, [pc, #36]	; (3114 <pm_state_notify+0x3c>)
    30ee:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    30f0:	b15c      	cbz	r4, 310a <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    30f2:	4f09      	ldr	r7, [pc, #36]	; (3118 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    30f4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    30f8:	2d00      	cmp	r5, #0
    30fa:	bf08      	it	eq
    30fc:	4613      	moveq	r3, r2
		if (callback) {
    30fe:	b10b      	cbz	r3, 3104 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    3100:	7838      	ldrb	r0, [r7, #0]
    3102:	4798      	blx	r3
	return node->next;
    3104:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3106:	2c00      	cmp	r4, #0
    3108:	d1f4      	bne.n	30f4 <pm_state_notify+0x1c>
	__asm__ volatile(
    310a:	f386 8811 	msr	BASEPRI, r6
    310e:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    3112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3114:	20001470 	.word	0x20001470
    3118:	20001478 	.word	0x20001478

0000311c <pm_system_resume>:

void pm_system_resume(void)
{
    311c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    311e:	4b0f      	ldr	r3, [pc, #60]	; (315c <pm_system_resume+0x40>)
    3120:	681a      	ldr	r2, [r3, #0]
    3122:	b9ba      	cbnz	r2, 3154 <pm_system_resume+0x38>
		post_ops_done = 1;
    3124:	2201      	movs	r2, #1
    3126:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3128:	4a0d      	ldr	r2, [pc, #52]	; (3160 <pm_system_resume+0x44>)
    312a:	ca07      	ldmia	r2, {r0, r1, r2}
    312c:	ab01      	add	r3, sp, #4
    312e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3132:	4a0c      	ldr	r2, [pc, #48]	; (3164 <pm_system_resume+0x48>)
    3134:	b14a      	cbz	r2, 314a <pm_system_resume+0x2e>
		pm_power_state_exit_post_ops(info);
    3136:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    313a:	f01a fc91 	bl	1da60 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    313e:	2000      	movs	r0, #0
	}
}
    3140:	b005      	add	sp, #20
    3142:	f85d eb04 	ldr.w	lr, [sp], #4
		pm_state_notify(false);
    3146:	f7ff bfc7 	b.w	30d8 <pm_state_notify>
    314a:	f382 8811 	msr	BASEPRI, r2
    314e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    3152:	e7f4      	b.n	313e <pm_system_resume+0x22>
}
    3154:	b005      	add	sp, #20
    3156:	f85d fb04 	ldr.w	pc, [sp], #4
    315a:	bf00      	nop
    315c:	200001f8 	.word	0x200001f8
    3160:	20001478 	.word	0x20001478
    3164:	0001da61 	.word	0x0001da61

00003168 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3168:	b5f0      	push	{r4, r5, r6, r7, lr}
    316a:	b089      	sub	sp, #36	; 0x24
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    316c:	466e      	mov	r6, sp
    316e:	4601      	mov	r1, r0
{
    3170:	4605      	mov	r5, r0
	z_power_state = pm_policy_next_state(ticks);
    3172:	4630      	mov	r0, r6
    3174:	f019 fa47 	bl	1c606 <pm_policy_next_state>
    3178:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    317c:	4c17      	ldr	r4, [pc, #92]	; (31dc <pm_system_suspend+0x74>)
    317e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3182:	7820      	ldrb	r0, [r4, #0]
    3184:	4627      	mov	r7, r4
    3186:	b338      	cbz	r0, 31d8 <pm_system_suspend+0x70>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3188:	4b15      	ldr	r3, [pc, #84]	; (31e0 <pm_system_suspend+0x78>)
    318a:	2100      	movs	r1, #0
    318c:	6019      	str	r1, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    318e:	1c6b      	adds	r3, r5, #1
    3190:	d00d      	beq.n	31ae <pm_system_suspend+0x46>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3192:	4814      	ldr	r0, [pc, #80]	; (31e4 <pm_system_suspend+0x7c>)
    3194:	4616      	mov	r6, r2
    3196:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    319a:	4a13      	ldr	r2, [pc, #76]	; (31e8 <pm_system_suspend+0x80>)
    319c:	2300      	movs	r3, #0
    319e:	fbe6 010c 	umlal	r0, r1, r6, ip
    31a2:	f7fc ffad 	bl	100 <__aeabi_uldivmod>

		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    31a6:	2101      	movs	r1, #1
    31a8:	1a28      	subs	r0, r5, r0
    31aa:	f01d fae2 	bl	20772 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    31ae:	f017 fcf1 	bl	1ab94 <k_sched_lock>
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
    31b2:	2001      	movs	r0, #1
    31b4:	f7ff ff90 	bl	30d8 <pm_state_notify>
	pm_state_set(z_power_state);
    31b8:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    31bc:	ab05      	add	r3, sp, #20
    31be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    31c2:	4a0a      	ldr	r2, [pc, #40]	; (31ec <pm_system_suspend+0x84>)
    31c4:	b11a      	cbz	r2, 31ce <pm_system_suspend+0x66>
		pm_power_state_set(info);
    31c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    31ca:	f01a fc36 	bl	1da3a <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    31ce:	f7ff ffa5 	bl	311c <pm_system_resume>
	k_sched_unlock();
    31d2:	f017 fd97 	bl	1ad04 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    31d6:	7820      	ldrb	r0, [r4, #0]
}
    31d8:	b009      	add	sp, #36	; 0x24
    31da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31dc:	20001478 	.word	0x20001478
    31e0:	200001f8 	.word	0x200001f8
    31e4:	000f423f 	.word	0x000f423f
    31e8:	000f4240 	.word	0x000f4240
    31ec:	0001da3b 	.word	0x0001da3b

000031f0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    31f0:	b510      	push	{r4, lr}
    31f2:	4807      	ldr	r0, [pc, #28]	; (3210 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    31f4:	4c07      	ldr	r4, [pc, #28]	; (3214 <uart_console_init+0x24>)
    31f6:	f016 fef5 	bl	19fe4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    31fa:	4b07      	ldr	r3, [pc, #28]	; (3218 <uart_console_init+0x28>)
    31fc:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    31fe:	4620      	mov	r0, r4
    3200:	f001 f8f8 	bl	43f4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    3204:	4620      	mov	r0, r4
    3206:	f7fe fcb5 	bl	1b74 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    320a:	2000      	movs	r0, #0
    320c:	bd10      	pop	{r4, pc}
    320e:	bf00      	nop
    3210:	00022b0f 	.word	0x00022b0f
    3214:	0000321d 	.word	0x0000321d
    3218:	20001484 	.word	0x20001484

0000321c <console_out>:
	if ('\n' == c) {
    321c:	280a      	cmp	r0, #10
{
    321e:	b538      	push	{r3, r4, r5, lr}
    3220:	4d07      	ldr	r5, [pc, #28]	; (3240 <console_out+0x24>)
    3222:	4604      	mov	r4, r0
	if ('\n' == c) {
    3224:	d104      	bne.n	3230 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    3226:	6828      	ldr	r0, [r5, #0]
    3228:	6883      	ldr	r3, [r0, #8]
    322a:	210d      	movs	r1, #13
    322c:	685b      	ldr	r3, [r3, #4]
    322e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3230:	6828      	ldr	r0, [r5, #0]
    3232:	6883      	ldr	r3, [r0, #8]
    3234:	b2e1      	uxtb	r1, r4
    3236:	685b      	ldr	r3, [r3, #4]
    3238:	4798      	blx	r3
}
    323a:	4620      	mov	r0, r4
    323c:	bd38      	pop	{r3, r4, r5, pc}
    323e:	bf00      	nop
    3240:	20001484 	.word	0x20001484

00003244 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3244:	4b08      	ldr	r3, [pc, #32]	; (3268 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3246:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3248:	1ac3      	subs	r3, r0, r3
{
    324a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    324c:	4907      	ldr	r1, [pc, #28]	; (326c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    324e:	109b      	asrs	r3, r3, #2
{
    3250:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3252:	4359      	muls	r1, r3
    3254:	4806      	ldr	r0, [pc, #24]	; (3270 <onoff_stop+0x2c>)
    3256:	2240      	movs	r2, #64	; 0x40
    3258:	f019 f9f6 	bl	1c648 <stop>
	notify(mgr, res);
    325c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    325e:	4601      	mov	r1, r0
	notify(mgr, res);
    3260:	4620      	mov	r0, r4
}
    3262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3266:	4718      	bx	r3
    3268:	2000149c 	.word	0x2000149c
    326c:	b6db6db7 	.word	0xb6db6db7
    3270:	00020b94 	.word	0x00020b94

00003274 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3274:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3276:	4c0c      	ldr	r4, [pc, #48]	; (32a8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3278:	4a0c      	ldr	r2, [pc, #48]	; (32ac <onoff_start+0x38>)
    327a:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    327c:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    327e:	9300      	str	r3, [sp, #0]
{
    3280:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3282:	460b      	mov	r3, r1
    3284:	490a      	ldr	r1, [pc, #40]	; (32b0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    3286:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3288:	4361      	muls	r1, r4
{
    328a:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    328c:	4809      	ldr	r0, [pc, #36]	; (32b4 <onoff_start+0x40>)
    328e:	f019 fa08 	bl	1c6a2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    3292:	1e01      	subs	r1, r0, #0
    3294:	da05      	bge.n	32a2 <onoff_start+0x2e>
		notify(mgr, err);
    3296:	4630      	mov	r0, r6
    3298:	462b      	mov	r3, r5
	}
}
    329a:	b002      	add	sp, #8
    329c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    32a0:	4718      	bx	r3
}
    32a2:	b002      	add	sp, #8
    32a4:	bd70      	pop	{r4, r5, r6, pc}
    32a6:	bf00      	nop
    32a8:	2000149c 	.word	0x2000149c
    32ac:	0001c711 	.word	0x0001c711
    32b0:	b6db6db7 	.word	0xb6db6db7
    32b4:	00020b94 	.word	0x00020b94

000032b8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32b8:	2200      	movs	r2, #0
{
    32ba:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32bc:	2101      	movs	r1, #1
{
    32be:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    32c0:	4610      	mov	r0, r2
    32c2:	f000 fc21 	bl	3b08 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    32c6:	2000      	movs	r0, #0
    32c8:	f000 fbec 	bl	3aa4 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    32cc:	480f      	ldr	r0, [pc, #60]	; (330c <clk_init+0x54>)
    32ce:	f016 fcd1 	bl	19c74 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    32d2:	4b0f      	ldr	r3, [pc, #60]	; (3310 <clk_init+0x58>)
    32d4:	4298      	cmp	r0, r3
    32d6:	d115      	bne.n	3304 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    32d8:	f01c fe3a 	bl	1ff50 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    32dc:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    32de:	490d      	ldr	r1, [pc, #52]	; (3314 <clk_init+0x5c>)
    32e0:	4630      	mov	r0, r6
    32e2:	f018 fab0 	bl	1b846 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    32e6:	2800      	cmp	r0, #0
    32e8:	db0b      	blt.n	3302 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    32ea:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32ec:	4909      	ldr	r1, [pc, #36]	; (3314 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32ee:	2501      	movs	r5, #1
    32f0:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    32f2:	f104 001c 	add.w	r0, r4, #28
    32f6:	f018 faa6 	bl	1b846 <onoff_manager_init>
		if (err < 0) {
    32fa:	2800      	cmp	r0, #0
    32fc:	db01      	blt.n	3302 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    32fe:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3300:	2000      	movs	r0, #0
}
    3302:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3304:	f06f 0004 	mvn.w	r0, #4
    3308:	e7fb      	b.n	3302 <clk_init+0x4a>
    330a:	bf00      	nop
    330c:	0000334d 	.word	0x0000334d
    3310:	0bad0000 	.word	0x0bad0000
    3314:	00021260 	.word	0x00021260

00003318 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3318:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    331a:	230c      	movs	r3, #12
    331c:	4809      	ldr	r0, [pc, #36]	; (3344 <clkstarted_handle.constprop.0+0x2c>)
    331e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3320:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    3322:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3324:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    3328:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    332a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    332c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    332e:	4418      	add	r0, r3
    3330:	f019 f977 	bl	1c622 <set_on_state>
	if (callback) {
    3334:	b12d      	cbz	r5, 3342 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3336:	4632      	mov	r2, r6
    3338:	462b      	mov	r3, r5
    333a:	4803      	ldr	r0, [pc, #12]	; (3348 <clkstarted_handle.constprop.0+0x30>)
}
    333c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3340:	4718      	bx	r3
}
    3342:	bd70      	pop	{r4, r5, r6, pc}
    3344:	2000149c 	.word	0x2000149c
    3348:	00020b94 	.word	0x00020b94

0000334c <clock_event_handler>:
	switch (event) {
    334c:	b110      	cbz	r0, 3354 <clock_event_handler+0x8>
    334e:	2801      	cmp	r0, #1
    3350:	d004      	beq.n	335c <clock_event_handler+0x10>
    3352:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3354:	4b03      	ldr	r3, [pc, #12]	; (3364 <clock_event_handler+0x18>)
    3356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    3358:	075b      	lsls	r3, r3, #29
    335a:	d101      	bne.n	3360 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    335c:	f7ff bfdc 	b.w	3318 <clkstarted_handle.constprop.0>
}
    3360:	4770      	bx	lr
    3362:	bf00      	nop
    3364:	2000149c 	.word	0x2000149c

00003368 <generic_hfclk_start>:
{
    3368:	b508      	push	{r3, lr}
	__asm__ volatile(
    336a:	f04f 0320 	mov.w	r3, #32
    336e:	f3ef 8111 	mrs	r1, BASEPRI
    3372:	f383 8812 	msr	BASEPRI_MAX, r3
    3376:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    337a:	4a12      	ldr	r2, [pc, #72]	; (33c4 <generic_hfclk_start+0x5c>)
    337c:	6813      	ldr	r3, [r2, #0]
    337e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3382:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3386:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3388:	d00c      	beq.n	33a4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    338a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    338e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3392:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3396:	f013 0301 	ands.w	r3, r3, #1
    339a:	d003      	beq.n	33a4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    339c:	480a      	ldr	r0, [pc, #40]	; (33c8 <generic_hfclk_start+0x60>)
    339e:	f019 f940 	bl	1c622 <set_on_state>
			already_started = true;
    33a2:	2301      	movs	r3, #1
	__asm__ volatile(
    33a4:	f381 8811 	msr	BASEPRI, r1
    33a8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    33ac:	b123      	cbz	r3, 33b8 <generic_hfclk_start+0x50>
}
    33ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    33b2:	2000      	movs	r0, #0
    33b4:	f7ff bfb0 	b.w	3318 <clkstarted_handle.constprop.0>
}
    33b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    33bc:	2001      	movs	r0, #1
    33be:	f01c bdd1 	b.w	1ff64 <nrfx_clock_start>
    33c2:	bf00      	nop
    33c4:	200014ec 	.word	0x200014ec
    33c8:	200014dc 	.word	0x200014dc

000033cc <api_blocking_start>:
{
    33cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33ce:	2200      	movs	r2, #0
    33d0:	2301      	movs	r3, #1
    33d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    33d6:	ab04      	add	r3, sp, #16
    33d8:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33dc:	4a09      	ldr	r2, [pc, #36]	; (3404 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33de:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33e2:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    33e4:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    33e8:	f019 f98b 	bl	1c702 <api_start>
	if (err < 0) {
    33ec:	2800      	cmp	r0, #0
    33ee:	db05      	blt.n	33fc <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    33f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    33f4:	2300      	movs	r3, #0
    33f6:	4668      	mov	r0, sp
    33f8:	f017 f98c 	bl	1a714 <z_impl_k_sem_take>
}
    33fc:	b007      	add	sp, #28
    33fe:	f85d fb04 	ldr.w	pc, [sp], #4
    3402:	bf00      	nop
    3404:	0001c72f 	.word	0x0001c72f

00003408 <generic_hfclk_stop>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3408:	4b09      	ldr	r3, [pc, #36]	; (3430 <generic_hfclk_stop+0x28>)
    340a:	f3bf 8f5b 	dmb	ish
    340e:	e853 2f00 	ldrex	r2, [r3]
    3412:	f022 0102 	bic.w	r1, r2, #2
    3416:	e843 1000 	strex	r0, r1, [r3]
    341a:	2800      	cmp	r0, #0
    341c:	d1f7      	bne.n	340e <generic_hfclk_stop+0x6>
    341e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3422:	07d3      	lsls	r3, r2, #31
    3424:	d402      	bmi.n	342c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3426:	2001      	movs	r0, #1
    3428:	f016 bc34 	b.w	19c94 <nrfx_clock_stop>
}
    342c:	4770      	bx	lr
    342e:	bf00      	nop
    3430:	200014ec 	.word	0x200014ec

00003434 <z_nrf_clock_control_get_onoff>:
}
    3434:	4a02      	ldr	r2, [pc, #8]	; (3440 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3436:	b2c3      	uxtb	r3, r0
}
    3438:	201c      	movs	r0, #28
    343a:	fb03 2000 	mla	r0, r3, r0, r2
    343e:	4770      	bx	lr
    3440:	2000149c 	.word	0x2000149c

00003444 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3444:	4b09      	ldr	r3, [pc, #36]	; (346c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    3446:	f3bf 8f5b 	dmb	ish
    344a:	e853 2f00 	ldrex	r2, [r3]
    344e:	f042 0101 	orr.w	r1, r2, #1
    3452:	e843 1000 	strex	r0, r1, [r3]
    3456:	2800      	cmp	r0, #0
    3458:	d1f7      	bne.n	344a <z_nrf_clock_bt_ctlr_hf_request+0x6>
    345a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    345e:	0793      	lsls	r3, r2, #30
    3460:	d402      	bmi.n	3468 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3462:	2001      	movs	r0, #1
    3464:	f01c bd7e 	b.w	1ff64 <nrfx_clock_start>
}
    3468:	4770      	bx	lr
    346a:	bf00      	nop
    346c:	200014ec 	.word	0x200014ec

00003470 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3470:	4b09      	ldr	r3, [pc, #36]	; (3498 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    3472:	f3bf 8f5b 	dmb	ish
    3476:	e853 2f00 	ldrex	r2, [r3]
    347a:	f022 0101 	bic.w	r1, r2, #1
    347e:	e843 1000 	strex	r0, r1, [r3]
    3482:	2800      	cmp	r0, #0
    3484:	d1f7      	bne.n	3476 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    3486:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    348a:	0793      	lsls	r3, r2, #30
    348c:	d402      	bmi.n	3494 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    348e:	2001      	movs	r0, #1
    3490:	f016 bc00 	b.w	19c94 <nrfx_clock_stop>
}
    3494:	4770      	bx	lr
    3496:	bf00      	nop
    3498:	200014ec 	.word	0x200014ec

0000349c <z_nrf_clock_control_lf_on>:
{
    349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    34a0:	4939      	ldr	r1, [pc, #228]	; (3588 <z_nrf_clock_control_lf_on+0xec>)
    34a2:	f3bf 8f5b 	dmb	ish
    34a6:	4607      	mov	r7, r0
    34a8:	2201      	movs	r2, #1
    34aa:	e851 3f00 	ldrex	r3, [r1]
    34ae:	e841 2000 	strex	r0, r2, [r1]
    34b2:	2800      	cmp	r0, #0
    34b4:	d1f9      	bne.n	34aa <z_nrf_clock_control_lf_on+0xe>
    34b6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    34ba:	b933      	cbnz	r3, 34ca <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    34bc:	4933      	ldr	r1, [pc, #204]	; (358c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    34be:	4834      	ldr	r0, [pc, #208]	; (3590 <z_nrf_clock_control_lf_on+0xf4>)
    34c0:	604b      	str	r3, [r1, #4]
    34c2:	60cb      	str	r3, [r1, #12]
    34c4:	608a      	str	r2, [r1, #8]
    34c6:	f018 f9d1 	bl	1b86c <onoff_request>
	switch (start_mode) {
    34ca:	1e7b      	subs	r3, r7, #1
    34cc:	2b01      	cmp	r3, #1
    34ce:	d82f      	bhi.n	3530 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    34d0:	2f01      	cmp	r7, #1
    34d2:	d107      	bne.n	34e4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    34d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    34d8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    34dc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    34e0:	2b01      	cmp	r3, #1
    34e2:	d025      	beq.n	3530 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    34e4:	f01c fe2f 	bl	20146 <k_is_in_isr>
    34e8:	4604      	mov	r4, r0
    34ea:	b918      	cbnz	r0, 34f4 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    34ec:	4b29      	ldr	r3, [pc, #164]	; (3594 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    34ee:	781b      	ldrb	r3, [r3, #0]
    34f0:	2b00      	cmp	r3, #0
    34f2:	d141      	bne.n	3578 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    34f4:	f04f 0320 	mov.w	r3, #32
    34f8:	f3ef 8611 	mrs	r6, BASEPRI
    34fc:	f383 8812 	msr	BASEPRI_MAX, r3
    3500:	f3bf 8f6f 	isb	sy
    3504:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3506:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3598 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    350a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    350e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3512:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    3516:	03d2      	lsls	r2, r2, #15
    3518:	d50c      	bpl.n	3534 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    351a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    351e:	2b01      	cmp	r3, #1
    3520:	d001      	beq.n	3526 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3522:	2f01      	cmp	r7, #1
    3524:	d106      	bne.n	3534 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    3526:	b30c      	cbz	r4, 356c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    3528:	f386 8811 	msr	BASEPRI, r6
    352c:	f3bf 8f6f 	isb	sy
}
    3530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3534:	b1ac      	cbz	r4, 3562 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3536:	4630      	mov	r0, r6
    3538:	f000 fa72 	bl	3a20 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    353c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3540:	2b00      	cmp	r3, #0
    3542:	d1e4      	bne.n	350e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3544:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    3548:	2a00      	cmp	r2, #0
    354a:	d0e0      	beq.n	350e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    354c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3550:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    3554:	2301      	movs	r3, #1
    3556:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    355a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    355e:	60ab      	str	r3, [r5, #8]
}
    3560:	e7d5      	b.n	350e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    3562:	2100      	movs	r1, #0
    3564:	2021      	movs	r0, #33	; 0x21
    3566:	f017 fd93 	bl	1b090 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    356a:	e7e7      	b.n	353c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    356c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3570:	2202      	movs	r2, #2
    3572:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3576:	e7db      	b.n	3530 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    3578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    357c:	2202      	movs	r2, #2
    357e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3582:	4606      	mov	r6, r0
}
    3584:	e7bf      	b.n	3506 <z_nrf_clock_control_lf_on+0x6a>
    3586:	bf00      	nop
    3588:	200014f0 	.word	0x200014f0
    358c:	2000148c 	.word	0x2000148c
    3590:	200014b8 	.word	0x200014b8
    3594:	20002e97 	.word	0x20002e97
    3598:	e000e100 	.word	0xe000e100

0000359c <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(int32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    359c:	4a04      	ldr	r2, [pc, #16]	; (35b0 <sys_clock_timeout_handler+0x14>)
    359e:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    35a0:	1ac8      	subs	r0, r1, r3
    35a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    35a6:	4403      	add	r3, r0
    35a8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    35aa:	f017 bee5 	b.w	1b378 <sys_clock_announce>
    35ae:	bf00      	nop
    35b0:	20001504 	.word	0x20001504

000035b4 <set_absolute_alarm>:
{
    35b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    35b8:	0086      	lsls	r6, r0, #2
    35ba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    35be:	f100 0450 	add.w	r4, r0, #80	; 0x50
    35c2:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    35c6:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35c8:	b2a4      	uxth	r4, r4
    35ca:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35ce:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    35d2:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    35d6:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3644 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    35da:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    35de:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    35e2:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    35e4:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    35e8:	eba3 0309 	sub.w	r3, r3, r9
    35ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    35f0:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    35f4:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    35f6:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    35fa:	d102      	bne.n	3602 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    35fc:	2013      	movs	r0, #19
    35fe:	f01d f8d8 	bl	207b2 <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3602:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    3606:	1aab      	subs	r3, r5, r2
    3608:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    360c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    3610:	bf88      	it	hi
    3612:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3614:	2300      	movs	r3, #0
    3616:	6023      	str	r3, [r4, #0]
    3618:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    361a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    361e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3622:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    3626:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    362a:	4599      	cmp	r9, r3
    362c:	d006      	beq.n	363c <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    362e:	1aeb      	subs	r3, r5, r3
    3630:	3b02      	subs	r3, #2
    3632:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    3636:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    363a:	d801      	bhi.n	3640 <set_absolute_alarm+0x8c>
}
    363c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    3640:	462b      	mov	r3, r5
    3642:	e7cf      	b.n	35e4 <set_absolute_alarm+0x30>
    3644:	40011000 	.word	0x40011000

00003648 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    3648:	b570      	push	{r4, r5, r6, lr}
    364a:	4d15      	ldr	r5, [pc, #84]	; (36a0 <rtc_nrf_isr+0x58>)
    return p_reg->INTENSET & mask;
    364c:	4c15      	ldr	r4, [pc, #84]	; (36a4 <rtc_nrf_isr+0x5c>)
	ARG_UNUSED(arg);

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    364e:	2600      	movs	r6, #0
    3650:	682b      	ldr	r3, [r5, #0]
    3652:	2000      	movs	r0, #0
    3654:	b106      	cbz	r6, 3658 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    3656:	bd70      	pop	{r4, r5, r6, pc}
    3658:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    365c:	03d2      	lsls	r2, r2, #15
    365e:	d5fa      	bpl.n	3656 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3660:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    3664:	2a00      	cmp	r2, #0
    3666:	d0f6      	beq.n	3656 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3668:	f8c4 6140 	str.w	r6, [r4, #320]	; 0x140
    366c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3670:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3674:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    3678:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    367c:	f8d4 6504 	ldr.w	r6, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3680:	1a72      	subs	r2, r6, r1
    3682:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
				cc_val = now;
    3686:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
    368a:	bf88      	it	hi
    368c:	4631      	movhi	r1, r6
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    368e:	2601      	movs	r6, #1
			if (handler) {
    3690:	b11b      	cbz	r3, 369a <rtc_nrf_isr+0x52>
				handler(chan, cc_val,
    3692:	686a      	ldr	r2, [r5, #4]
    3694:	6028      	str	r0, [r5, #0]
    3696:	4798      	blx	r3
    3698:	e7da      	b.n	3650 <rtc_nrf_isr+0x8>
    369a:	602b      	str	r3, [r5, #0]
}
    369c:	e7db      	b.n	3656 <rtc_nrf_isr+0xe>
    369e:	bf00      	nop
    36a0:	200014f8 	.word	0x200014f8
    36a4:	40011000 	.word	0x40011000

000036a8 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    36a8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    36aa:	4c0f      	ldr	r4, [pc, #60]	; (36e8 <sys_clock_driver_init+0x40>)
    36ac:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    36ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    36b2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    36b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    36ba:	4b0c      	ldr	r3, [pc, #48]	; (36ec <sys_clock_driver_init+0x44>)
    36bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    36c0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    36c4:	2101      	movs	r1, #1
    36c6:	462a      	mov	r2, r5
    36c8:	2011      	movs	r0, #17
    36ca:	f000 fa1d 	bl	3b08 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    36ce:	2011      	movs	r0, #17
    36d0:	f000 f9e8 	bl	3aa4 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    36d4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    36d6:	4a06      	ldr	r2, [pc, #24]	; (36f0 <sys_clock_driver_init+0x48>)
    36d8:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    36da:	2002      	movs	r0, #2
    36dc:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    36de:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    36e0:	f7ff fedc 	bl	349c <z_nrf_clock_control_lf_on>

	return 0;
}
    36e4:	4628      	mov	r0, r5
    36e6:	bd38      	pop	{r3, r4, r5, pc}
    36e8:	40011000 	.word	0x40011000
    36ec:	e000e100 	.word	0xe000e100
    36f0:	20001500 	.word	0x20001500

000036f4 <sys_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    36f4:	4a13      	ldr	r2, [pc, #76]	; (3744 <sys_clock_set_timeout+0x50>)
    36f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    36fa:	bf14      	ite	ne
    36fc:	4603      	movne	r3, r0
    36fe:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3700:	3b01      	subs	r3, #1
    3702:	2b00      	cmp	r3, #0
    3704:	dd1c      	ble.n	3740 <sys_clock_set_timeout+0x4c>
    3706:	4293      	cmp	r3, r2
    3708:	bfa8      	it	ge
    370a:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    370c:	4a0e      	ldr	r2, [pc, #56]	; (3748 <sys_clock_set_timeout+0x54>)
    370e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    3712:	4a0e      	ldr	r2, [pc, #56]	; (374c <sys_clock_set_timeout+0x58>)
    3714:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    3716:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    3718:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    371c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    3720:	bf18      	it	ne
    3722:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3724:	3201      	adds	r2, #1
    3726:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    3728:	4a09      	ldr	r2, [pc, #36]	; (3750 <sys_clock_set_timeout+0x5c>)
    372a:	480a      	ldr	r0, [pc, #40]	; (3754 <sys_clock_set_timeout+0x60>)
    372c:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    372e:	2000      	movs	r0, #0
    3730:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    3732:	4a04      	ldr	r2, [pc, #16]	; (3744 <sys_clock_set_timeout+0x50>)
    3734:	4293      	cmp	r3, r2
    3736:	bf94      	ite	ls
    3738:	18c9      	addls	r1, r1, r3
    373a:	1889      	addhi	r1, r1, r2
    373c:	f7ff bf3a 	b.w	35b4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3740:	2300      	movs	r3, #0
    3742:	e7e3      	b.n	370c <sys_clock_set_timeout+0x18>
    3744:	007fffff 	.word	0x007fffff
    3748:	40011000 	.word	0x40011000
    374c:	20001504 	.word	0x20001504
    3750:	200014f8 	.word	0x200014f8
    3754:	0000359d 	.word	0x0000359d

00003758 <sys_clock_elapsed>:
    3758:	4b04      	ldr	r3, [pc, #16]	; (376c <sys_clock_elapsed+0x14>)
    375a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
{
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return counter_sub(counter(), last_count) / CYC_PER_TICK;
    375e:	4b04      	ldr	r3, [pc, #16]	; (3770 <sys_clock_elapsed+0x18>)
	return (a - b) & COUNTER_MAX;
    3760:	681b      	ldr	r3, [r3, #0]
    3762:	1ac0      	subs	r0, r0, r3
}
    3764:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3768:	4770      	bx	lr
    376a:	bf00      	nop
    376c:	40011000 	.word	0x40011000
    3770:	20001504 	.word	0x20001504

00003774 <sys_clock_cycle_get_32>:
	__asm__ volatile(
    3774:	f04f 0320 	mov.w	r3, #32
    3778:	f3ef 8211 	mrs	r2, BASEPRI
    377c:	f383 8812 	msr	BASEPRI_MAX, r3
    3780:	f3bf 8f6f 	isb	sy

uint32_t sys_clock_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    3784:	4906      	ldr	r1, [pc, #24]	; (37a0 <sys_clock_cycle_get_32+0x2c>)
    3786:	4b07      	ldr	r3, [pc, #28]	; (37a4 <sys_clock_cycle_get_32+0x30>)
    3788:	6808      	ldr	r0, [r1, #0]
    378a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    378e:	f382 8811 	msr	BASEPRI, r2
    3792:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    3796:	1a1b      	subs	r3, r3, r0
    3798:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    379c:	4418      	add	r0, r3
    379e:	4770      	bx	lr
    37a0:	20001504 	.word	0x20001504
    37a4:	40011000 	.word	0x40011000

000037a8 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    37a8:	4b01      	ldr	r3, [pc, #4]	; (37b0 <uECC_get_rng+0x8>)
    37aa:	6818      	ldr	r0, [r3, #0]
    37ac:	4770      	bx	lr
    37ae:	bf00      	nop
    37b0:	200001fc 	.word	0x200001fc

000037b4 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    37b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    37b6:	2208      	movs	r2, #8
{
    37b8:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    37ba:	f019 f974 	bl	1caa6 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    37be:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    37c0:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    37c2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    37c4:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    37c6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    37c8:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    37ca:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    37cc:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    37ce:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    37d0:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    37d2:	4613      	mov	r3, r2
    37d4:	466a      	mov	r2, sp
{
    37d6:	460c      	mov	r4, r1
    37d8:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    37da:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    37dc:	4611      	mov	r1, r2
    37de:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    37e0:	e9cd 7701 	strd	r7, r7, [sp, #4]
    37e4:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    37e6:	f019 f86b 	bl	1c8c0 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    37ea:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    37ec:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    37ee:	4630      	mov	r0, r6
    37f0:	f019 f866 	bl	1c8c0 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    37f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    37f6:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    37f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    37fa:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    37fc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    37fe:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    3800:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3802:	4405      	add	r5, r0
	tmp[7] = 0;
    3804:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3808:	4610      	mov	r0, r2
    380a:	4611      	mov	r1, r2
    380c:	f019 f858 	bl	1c8c0 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3810:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    3812:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3814:	4630      	mov	r0, r6
    3816:	f019 f853 	bl	1c8c0 <uECC_vli_add>
    381a:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    381c:	6a20      	ldr	r0, [r4, #32]
    381e:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    3820:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3822:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    3824:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    3826:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    3828:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    382a:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    382c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    382e:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3830:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    3832:	e9cd 7704 	strd	r7, r7, [sp, #16]
    3836:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3838:	f019 f842 	bl	1c8c0 <uECC_vli_add>
    383c:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    383e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    3840:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    3842:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    3844:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    3848:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    384a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    384c:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    384e:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    3852:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    3854:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    3858:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    385a:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    385e:	6a20      	ldr	r0, [r4, #32]
    3860:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    3862:	4630      	mov	r0, r6
    3864:	f019 f82c 	bl	1c8c0 <uECC_vli_add>
    3868:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    386a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    386c:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    386e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    3870:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    3872:	6b60      	ldr	r0, [r4, #52]	; 0x34
    3874:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    3876:	6a20      	ldr	r0, [r4, #32]
    3878:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    387a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    387c:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    387e:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    3880:	e9cd 7704 	strd	r7, r7, [sp, #16]
    3884:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    3886:	f019 f944 	bl	1cb12 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    388a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    388c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    388e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    3890:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    3892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    3894:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    3896:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3898:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    389a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    389c:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    389e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    38a0:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38a2:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38a4:	2308      	movs	r3, #8
    38a6:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    38a8:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38ac:	f019 f931 	bl	1cb12 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    38b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    38b2:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    38b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    38b6:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    38b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    38ba:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    38bc:	6a23      	ldr	r3, [r4, #32]
    38be:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    38c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    38c2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    38c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    38c6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    38ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    38cc:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38ce:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38d0:	2308      	movs	r3, #8
    38d2:	4630      	mov	r0, r6
    38d4:	f019 f91d 	bl	1cb12 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    38d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    38da:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    38dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    38de:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    38e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    38e4:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    38e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    38e8:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    38ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    38ec:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    38f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    38f2:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38f4:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    38f6:	2308      	movs	r3, #8
    38f8:	4630      	mov	r0, r6
    38fa:	f019 f90a 	bl	1cb12 <uECC_vli_sub>

	if (carry < 0) {
    38fe:	1a2d      	subs	r5, r5, r0
    3900:	d410      	bmi.n	3924 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    3902:	4c0d      	ldr	r4, [pc, #52]	; (3938 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    3904:	b935      	cbnz	r5, 3914 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    3906:	2208      	movs	r2, #8
    3908:	4631      	mov	r1, r6
    390a:	4620      	mov	r0, r4
    390c:	f019 f8d7 	bl	1cabe <uECC_vli_cmp_unsafe>
		while (carry || 
    3910:	2801      	cmp	r0, #1
    3912:	d00f      	beq.n	3934 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    3914:	2308      	movs	r3, #8
    3916:	4622      	mov	r2, r4
    3918:	4631      	mov	r1, r6
    391a:	4630      	mov	r0, r6
    391c:	f019 f8f9 	bl	1cb12 <uECC_vli_sub>
    3920:	1a2d      	subs	r5, r5, r0
    3922:	e7ef      	b.n	3904 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    3924:	4a04      	ldr	r2, [pc, #16]	; (3938 <vli_mmod_fast_secp256r1+0x184>)
    3926:	2308      	movs	r3, #8
    3928:	4631      	mov	r1, r6
    392a:	4630      	mov	r0, r6
    392c:	f018 ffc8 	bl	1c8c0 <uECC_vli_add>
		while (carry < 0);
    3930:	182d      	adds	r5, r5, r0
    3932:	d4f8      	bmi.n	3926 <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    3934:	b009      	add	sp, #36	; 0x24
    3936:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3938:	00021270 	.word	0x00021270

0000393c <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    393c:	4904      	ldr	r1, [pc, #16]	; (3950 <sub_bytes+0x14>)
    393e:	1e43      	subs	r3, r0, #1
    3940:	300f      	adds	r0, #15
    3942:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3946:	5c8a      	ldrb	r2, [r1, r2]
    3948:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    394a:	4283      	cmp	r3, r0
    394c:	d1f9      	bne.n	3942 <sub_bytes+0x6>
	}
}
    394e:	4770      	bx	lr
    3950:	00022b88 	.word	0x00022b88

00003954 <tc_aes128_set_encrypt_key>:
{
    3954:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    3956:	4e26      	ldr	r6, [pc, #152]	; (39f0 <tc_aes128_set_encrypt_key+0x9c>)
{
    3958:	4607      	mov	r7, r0
    395a:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    395c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    395e:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    3960:	ad01      	add	r5, sp, #4
    3962:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3964:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3966:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3968:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    396c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    3970:	4638      	mov	r0, r7
    3972:	2f00      	cmp	r7, #0
    3974:	d038      	beq.n	39e8 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    3976:	2c00      	cmp	r4, #0
    3978:	d038      	beq.n	39ec <tc_aes128_set_encrypt_key+0x98>
    397a:	1f38      	subs	r0, r7, #4
    397c:	4621      	mov	r1, r4
    397e:	4602      	mov	r2, r0
    3980:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    3982:	784b      	ldrb	r3, [r1, #1]
    3984:	780d      	ldrb	r5, [r1, #0]
    3986:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3988:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    398c:	78cd      	ldrb	r5, [r1, #3]
    398e:	432b      	orrs	r3, r5
    3990:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    3992:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    3994:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    3998:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    399a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    399e:	d1f0      	bne.n	3982 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    39a0:	4c14      	ldr	r4, [pc, #80]	; (39f4 <tc_aes128_set_encrypt_key+0xa0>)
    39a2:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    39a4:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    39a6:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    39a8:	d116      	bne.n	39d8 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    39aa:	f3c3 4207 	ubfx	r2, r3, #16, #8
    39ae:	5ca5      	ldrb	r5, [r4, r2]
    39b0:	0e1a      	lsrs	r2, r3, #24
    39b2:	5ca2      	ldrb	r2, [r4, r2]
    39b4:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    39b8:	f3c3 2507 	ubfx	r5, r3, #8, #8
    39bc:	b2db      	uxtb	r3, r3
    39be:	5d65      	ldrb	r5, [r4, r5]
    39c0:	5ce3      	ldrb	r3, [r4, r3]
    39c2:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    39c6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    39ca:	ad0c      	add	r5, sp, #48	; 0x30
    39cc:	f021 0303 	bic.w	r3, r1, #3
    39d0:	442b      	add	r3, r5
    39d2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    39d6:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    39d8:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    39dc:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    39de:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    39e0:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    39e2:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    39e4:	d1de      	bne.n	39a4 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    39e6:	2001      	movs	r0, #1
}
    39e8:	b00d      	add	sp, #52	; 0x34
    39ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    39ec:	4620      	mov	r0, r4
    39ee:	e7fb      	b.n	39e8 <tc_aes128_set_encrypt_key+0x94>
    39f0:	00020fdc 	.word	0x00020fdc
    39f4:	00022b88 	.word	0x00022b88

000039f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    39f8:	4901      	ldr	r1, [pc, #4]	; (3a00 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    39fa:	2210      	movs	r2, #16
	str	r2, [r1]
    39fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    39fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3a00:	e000ed10 	.word	0xe000ed10

00003a04 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3a04:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3a06:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3a08:	f380 8811 	msr	BASEPRI, r0
	isb
    3a0c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3a10:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3a14:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3a16:	b662      	cpsie	i
	isb
    3a18:	f3bf 8f6f 	isb	sy

	bx	lr
    3a1c:	4770      	bx	lr
    3a1e:	bf00      	nop

00003a20 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3a20:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3a22:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3a24:	f381 8811 	msr	BASEPRI, r1

	wfe
    3a28:	bf20      	wfe

	msr	BASEPRI, r0
    3a2a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3a2e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3a30:	4770      	bx	lr
    3a32:	bf00      	nop

00003a34 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3a34:	b573      	push	{r0, r1, r4, r5, r6, lr}
    3a36:	4606      	mov	r6, r0

	if (esf != NULL) {
    3a38:	460c      	mov	r4, r1
    3a3a:	b301      	cbz	r1, 3a7e <z_arm_fatal_error+0x4a>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3a3c:	4b13      	ldr	r3, [pc, #76]	; (3a8c <z_arm_fatal_error+0x58>)
    3a3e:	4d14      	ldr	r5, [pc, #80]	; (3a90 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3a40:	4814      	ldr	r0, [pc, #80]	; (3a94 <z_arm_fatal_error+0x60>)
    3a42:	1aed      	subs	r5, r5, r3
    3a44:	08ed      	lsrs	r5, r5, #3
    3a46:	01ad      	lsls	r5, r5, #6
    3a48:	f045 0501 	orr.w	r5, r5, #1
    3a4c:	f8ad 5000 	strh.w	r5, [sp]
    3a50:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    3a54:	6809      	ldr	r1, [r1, #0]
    3a56:	f018 fb06 	bl	1c066 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3a5a:	f8ad 5000 	strh.w	r5, [sp]
    3a5e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3a62:	68e1      	ldr	r1, [r4, #12]
    3a64:	480c      	ldr	r0, [pc, #48]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a66:	f018 fafe 	bl	1c066 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3a6a:	69e1      	ldr	r1, [r4, #28]
    3a6c:	480b      	ldr	r0, [pc, #44]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a6e:	462a      	mov	r2, r5
    3a70:	f018 facc 	bl	1c00c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3a74:	69a1      	ldr	r1, [r4, #24]
    3a76:	480a      	ldr	r0, [pc, #40]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a78:	462a      	mov	r2, r5
    3a7a:	f018 fac7 	bl	1c00c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3a7e:	4621      	mov	r1, r4
    3a80:	4630      	mov	r0, r6
}
    3a82:	b002      	add	sp, #8
    3a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    3a88:	f016 baee 	b.w	1a068 <z_fatal_error>
    3a8c:	00020e00 	.word	0x00020e00
    3a90:	00020f38 	.word	0x00020f38
    3a94:	00022c88 	.word	0x00022c88
    3a98:	00022cb7 	.word	0x00022cb7
    3a9c:	00022ce6 	.word	0x00022ce6
    3aa0:	00022cf5 	.word	0x00022cf5

00003aa4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3aa4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3aa6:	2b00      	cmp	r3, #0
    3aa8:	db08      	blt.n	3abc <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aaa:	2201      	movs	r2, #1
    3aac:	f000 001f 	and.w	r0, r0, #31
    3ab0:	fa02 f000 	lsl.w	r0, r2, r0
    3ab4:	095b      	lsrs	r3, r3, #5
    3ab6:	4a02      	ldr	r2, [pc, #8]	; (3ac0 <arch_irq_enable+0x1c>)
    3ab8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3abc:	4770      	bx	lr
    3abe:	bf00      	nop
    3ac0:	e000e100 	.word	0xe000e100

00003ac4 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3ac4:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    3ac6:	2b00      	cmp	r3, #0
    3ac8:	db0d      	blt.n	3ae6 <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3aca:	2201      	movs	r2, #1
    3acc:	095b      	lsrs	r3, r3, #5
    3ace:	f000 001f 	and.w	r0, r0, #31
    3ad2:	fa02 f000 	lsl.w	r0, r2, r0
    3ad6:	3320      	adds	r3, #32
    3ad8:	4a03      	ldr	r2, [pc, #12]	; (3ae8 <arch_irq_disable+0x24>)
    3ada:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3ade:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ae2:	f3bf 8f6f 	isb	sy
}
    3ae6:	4770      	bx	lr
    3ae8:	e000e100 	.word	0xe000e100

00003aec <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3aec:	4b05      	ldr	r3, [pc, #20]	; (3b04 <arch_irq_is_enabled+0x18>)
    3aee:	0942      	lsrs	r2, r0, #5
    3af0:	f000 001f 	and.w	r0, r0, #31
    3af4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3af8:	2301      	movs	r3, #1
    3afa:	fa03 f000 	lsl.w	r0, r3, r0
}
    3afe:	4010      	ands	r0, r2
    3b00:	4770      	bx	lr
    3b02:	bf00      	nop
    3b04:	e000e100 	.word	0xe000e100

00003b08 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3b08:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3b0a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b0c:	bfa8      	it	ge
    3b0e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    3b12:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b16:	bfb8      	it	lt
    3b18:	4b06      	ldrlt	r3, [pc, #24]	; (3b34 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b1a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    3b1e:	bfac      	ite	ge
    3b20:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b24:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b28:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b2a:	bfb4      	ite	lt
    3b2c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3b2e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    3b32:	4770      	bx	lr
    3b34:	e000ed14 	.word	0xe000ed14

00003b38 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3b38:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3b3a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3b3c:	4b04      	ldr	r3, [pc, #16]	; (3b50 <_arch_isr_direct_pm+0x18>)
    3b3e:	6a18      	ldr	r0, [r3, #32]
    3b40:	b118      	cbz	r0, 3b4a <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    3b42:	2200      	movs	r2, #0
    3b44:	621a      	str	r2, [r3, #32]
		z_pm_save_idle_exit(idle_val);
    3b46:	f01c fb0b 	bl	20160 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3b4a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3b4c:	bd08      	pop	{r3, pc}
    3b4e:	bf00      	nop
    3b50:	200028a0 	.word	0x200028a0

00003b54 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3b54:	bf30      	wfi
    b z_SysNmiOnReset
    3b56:	f7ff bffd 	b.w	3b54 <z_SysNmiOnReset>
    3b5a:	bf00      	nop

00003b5c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3b5c:	4a0e      	ldr	r2, [pc, #56]	; (3b98 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3b5e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3b60:	4b0e      	ldr	r3, [pc, #56]	; (3b9c <z_arm_prep_c+0x40>)
    3b62:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3b66:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3b68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3b6c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3b70:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3b74:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3b78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    3b7c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    3b80:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    3b84:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3b88:	f016 facc 	bl	1a124 <z_bss_zero>
	z_data_copy();
    3b8c:	f017 fb14 	bl	1b1b8 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3b90:	f000 fb16 	bl	41c0 <z_arm_interrupt_init>
	z_cstart();
    3b94:	f016 faea 	bl	1a16c <z_cstart>
    3b98:	00000000 	.word	0x00000000
    3b9c:	e000ed00 	.word	0xe000ed00

00003ba0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3ba0:	4a09      	ldr	r2, [pc, #36]	; (3bc8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3ba2:	490a      	ldr	r1, [pc, #40]	; (3bcc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3ba4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3ba6:	6809      	ldr	r1, [r1, #0]
    3ba8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3baa:	4909      	ldr	r1, [pc, #36]	; (3bd0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3bac:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3bae:	684b      	ldr	r3, [r1, #4]
    3bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3bb4:	604b      	str	r3, [r1, #4]
    3bb6:	2300      	movs	r3, #0
    3bb8:	f383 8811 	msr	BASEPRI, r3
    3bbc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3bc0:	6893      	ldr	r3, [r2, #8]
}
    3bc2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    3bc4:	4770      	bx	lr
    3bc6:	bf00      	nop
    3bc8:	200028a0 	.word	0x200028a0
    3bcc:	0002275c 	.word	0x0002275c
    3bd0:	e000ed00 	.word	0xe000ed00

00003bd4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3bd4:	4912      	ldr	r1, [pc, #72]	; (3c20 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3bd6:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3bd8:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3bdc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3bde:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3be2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3be6:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3be8:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3bec:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3bf0:	4f0c      	ldr	r7, [pc, #48]	; (3c24 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3bf2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3bf6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    3bf8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3bfa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3bfc:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    3bfe:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3c00:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3c02:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3c06:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3c08:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3c0a:	f000 fb1b 	bl	4244 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3c0e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3c12:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3c16:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3c1a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3c1e:	4770      	bx	lr
    ldr r1, =_kernel
    3c20:	200028a0 	.word	0x200028a0
    ldr v4, =_SCS_ICSR
    3c24:	e000ed04 	.word	0xe000ed04

00003c28 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3c28:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3c2c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3c2e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3c32:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3c36:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3c38:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3c3c:	2902      	cmp	r1, #2
    beq _oops
    3c3e:	d0ff      	beq.n	3c40 <_oops>

00003c40 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3c40:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3c42:	f019 fe8b 	bl	1d95c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3c46:	bd01      	pop	{r0, pc}

00003c48 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3c48:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3c4c:	9b00      	ldr	r3, [sp, #0]
    3c4e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3c52:	490a      	ldr	r1, [pc, #40]	; (3c7c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3c54:	9b01      	ldr	r3, [sp, #4]
    3c56:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3c5a:	9b02      	ldr	r3, [sp, #8]
    3c5c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3c60:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3c64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3c68:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3c6c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3c70:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3c72:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3c74:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3c76:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3c78:	4770      	bx	lr
    3c7a:	bf00      	nop
    3c7c:	0001b949 	.word	0x0001b949

00003c80 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3c80:	4a09      	ldr	r2, [pc, #36]	; (3ca8 <z_check_thread_stack_fail+0x28>)
{
    3c82:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3c84:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3c86:	b170      	cbz	r0, 3ca6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3c88:	f113 0f16 	cmn.w	r3, #22
    3c8c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    3c8e:	d005      	beq.n	3c9c <z_check_thread_stack_fail+0x1c>
    3c90:	f1a0 0220 	sub.w	r2, r0, #32
    3c94:	429a      	cmp	r2, r3
    3c96:	d805      	bhi.n	3ca4 <z_check_thread_stack_fail+0x24>
    3c98:	4283      	cmp	r3, r0
    3c9a:	d203      	bcs.n	3ca4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3c9c:	4281      	cmp	r1, r0
    3c9e:	bf28      	it	cs
    3ca0:	2000      	movcs	r0, #0
    3ca2:	4770      	bx	lr
    3ca4:	2000      	movs	r0, #0
}
    3ca6:	4770      	bx	lr
    3ca8:	200028a0 	.word	0x200028a0

00003cac <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3cac:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3cae:	4b09      	ldr	r3, [pc, #36]	; (3cd4 <arch_switch_to_main_thread+0x28>)
    3cb0:	6098      	str	r0, [r3, #8]
{
    3cb2:	460d      	mov	r5, r1
    3cb4:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3cb6:	f000 fac5 	bl	4244 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3cba:	4620      	mov	r0, r4
    3cbc:	f385 8809 	msr	PSP, r5
    3cc0:	2100      	movs	r1, #0
    3cc2:	b663      	cpsie	if
    3cc4:	f381 8811 	msr	BASEPRI, r1
    3cc8:	f3bf 8f6f 	isb	sy
    3ccc:	2200      	movs	r2, #0
    3cce:	2300      	movs	r3, #0
    3cd0:	f017 fe3a 	bl	1b948 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3cd4:	200028a0 	.word	0x200028a0

00003cd8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3cd8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3cda:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3cdc:	4a0b      	ldr	r2, [pc, #44]	; (3d0c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3cde:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    3ce0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3ce2:	bf1e      	ittt	ne
	movne	r1, #0
    3ce4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3ce6:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    3ce8:	f01c fa3a 	blne	20160 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3cec:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3cee:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3cf2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3cf6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3cfa:	4905      	ldr	r1, [pc, #20]	; (3d10 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3cfc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3cfe:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3d00:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3d02:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3d06:	4903      	ldr	r1, [pc, #12]	; (3d14 <_isr_wrapper+0x3c>)
	bx r1
    3d08:	4708      	bx	r1
    3d0a:	0000      	.short	0x0000
	ldr r2, =_kernel
    3d0c:	200028a0 	.word	0x200028a0
	ldr r1, =_sw_isr_table
    3d10:	00020c3c 	.word	0x00020c3c
	ldr r1, =z_arm_int_exit
    3d14:	00003d19 	.word	0x00003d19

00003d18 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3d18:	4b04      	ldr	r3, [pc, #16]	; (3d2c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3d1a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3d1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    3d1e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3d20:	d003      	beq.n	3d2a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3d22:	4903      	ldr	r1, [pc, #12]	; (3d30 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3d24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3d28:	600a      	str	r2, [r1, #0]

00003d2a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3d2a:	4770      	bx	lr
	ldr r3, =_kernel
    3d2c:	200028a0 	.word	0x200028a0
	ldr r1, =_SCS_ICSR
    3d30:	e000ed04 	.word	0xe000ed04

00003d34 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3d38:	4b35      	ldr	r3, [pc, #212]	; (3e10 <mem_manage_fault+0xdc>)
    3d3a:	4c36      	ldr	r4, [pc, #216]	; (3e14 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3d3c:	4d36      	ldr	r5, [pc, #216]	; (3e18 <mem_manage_fault+0xe4>)
    3d3e:	1ae4      	subs	r4, r4, r3
    3d40:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    3d42:	01a4      	lsls	r4, r4, #6
    3d44:	f044 0901 	orr.w	r9, r4, #1
{
    3d48:	4607      	mov	r7, r0
    3d4a:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3d4c:	4833      	ldr	r0, [pc, #204]	; (3e1c <mem_manage_fault+0xe8>)
    3d4e:	4649      	mov	r1, r9
{
    3d50:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3d52:	f018 f94e 	bl	1bff2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3d56:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d58:	06db      	lsls	r3, r3, #27
    3d5a:	d503      	bpl.n	3d64 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3d5c:	4830      	ldr	r0, [pc, #192]	; (3e20 <mem_manage_fault+0xec>)
    3d5e:	4649      	mov	r1, r9
    3d60:	f018 f947 	bl	1bff2 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3d64:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d66:	0718      	lsls	r0, r3, #28
    3d68:	d504      	bpl.n	3d74 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    3d6a:	482e      	ldr	r0, [pc, #184]	; (3e24 <mem_manage_fault+0xf0>)
    3d6c:	f044 0101 	orr.w	r1, r4, #1
    3d70:	f018 f93f 	bl	1bff2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3d74:	4d28      	ldr	r5, [pc, #160]	; (3e18 <mem_manage_fault+0xe4>)
    3d76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d78:	0799      	lsls	r1, r3, #30
    3d7a:	d423      	bmi.n	3dc4 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    3d7c:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3d80:	4d25      	ldr	r5, [pc, #148]	; (3e18 <mem_manage_fault+0xe4>)
    3d82:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d84:	07db      	lsls	r3, r3, #31
    3d86:	d504      	bpl.n	3d92 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    3d88:	4827      	ldr	r0, [pc, #156]	; (3e28 <mem_manage_fault+0xf4>)
    3d8a:	f044 0101 	orr.w	r1, r4, #1
    3d8e:	f018 f930 	bl	1bff2 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3d92:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3d94:	0698      	lsls	r0, r3, #26
    3d96:	d504      	bpl.n	3da2 <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    3d98:	4824      	ldr	r0, [pc, #144]	; (3e2c <mem_manage_fault+0xf8>)
    3d9a:	f044 0101 	orr.w	r1, r4, #1
    3d9e:	f018 f928 	bl	1bff2 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3da2:	4b1d      	ldr	r3, [pc, #116]	; (3e18 <mem_manage_fault+0xe4>)
    3da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3da6:	06d1      	lsls	r1, r2, #27
    3da8:	d424      	bmi.n	3df4 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3dac:	0792      	lsls	r2, r2, #30
    3dae:	d421      	bmi.n	3df4 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3db0:	2000      	movs	r0, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3db2:	4a19      	ldr	r2, [pc, #100]	; (3e18 <mem_manage_fault+0xe4>)
    3db4:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3db6:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3dba:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3dbc:	2300      	movs	r3, #0
    3dbe:	7033      	strb	r3, [r6, #0]

	return reason;
}
    3dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3dc4:	f044 0a01 	orr.w	sl, r4, #1
    3dc8:	4819      	ldr	r0, [pc, #100]	; (3e30 <mem_manage_fault+0xfc>)
    3dca:	4651      	mov	r1, sl
    3dcc:	f018 f911 	bl	1bff2 <log_0>
		uint32_t temp = SCB->MMFAR;
    3dd0:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3dd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3dd6:	061a      	lsls	r2, r3, #24
    3dd8:	d5d0      	bpl.n	3d7c <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3dda:	4816      	ldr	r0, [pc, #88]	; (3e34 <mem_manage_fault+0x100>)
    3ddc:	4652      	mov	r2, sl
    3dde:	4649      	mov	r1, r9
    3de0:	f018 f914 	bl	1c00c <log_1>
			if (from_hard_fault != 0) {
    3de4:	f1b8 0f00 	cmp.w	r8, #0
    3de8:	d0ca      	beq.n	3d80 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3dea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3df0:	62ab      	str	r3, [r5, #40]	; 0x28
    3df2:	e7c5      	b.n	3d80 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3df4:	685b      	ldr	r3, [r3, #4]
    3df6:	051b      	lsls	r3, r3, #20
    3df8:	d5da      	bpl.n	3db0 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3dfa:	4639      	mov	r1, r7
    3dfc:	4648      	mov	r0, r9
    3dfe:	f7ff ff3f 	bl	3c80 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3e02:	2800      	cmp	r0, #0
    3e04:	d0d4      	beq.n	3db0 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3e06:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3e0a:	2002      	movs	r0, #2
    3e0c:	e7d1      	b.n	3db2 <mem_manage_fault+0x7e>
    3e0e:	bf00      	nop
    3e10:	00020e00 	.word	0x00020e00
    3e14:	00020f38 	.word	0x00020f38
    3e18:	e000ed00 	.word	0xe000ed00
    3e1c:	00022d23 	.word	0x00022d23
    3e20:	00022d39 	.word	0x00022d39
    3e24:	00022d6c 	.word	0x00022d6c
    3e28:	00022dad 	.word	0x00022dad
    3e2c:	00022dcc 	.word	0x00022dcc
    3e30:	00022d7f 	.word	0x00022d7f
    3e34:	00022d97 	.word	0x00022d97

00003e38 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3e38:	b570      	push	{r4, r5, r6, lr}
    3e3a:	4b23      	ldr	r3, [pc, #140]	; (3ec8 <usage_fault.constprop.0+0x90>)
    3e3c:	4c23      	ldr	r4, [pc, #140]	; (3ecc <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3e3e:	4d24      	ldr	r5, [pc, #144]	; (3ed0 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    3e40:	4824      	ldr	r0, [pc, #144]	; (3ed4 <usage_fault.constprop.0+0x9c>)
    3e42:	1ae4      	subs	r4, r4, r3
    3e44:	08e4      	lsrs	r4, r4, #3
    3e46:	01a4      	lsls	r4, r4, #6
    3e48:	f044 0601 	orr.w	r6, r4, #1
    3e4c:	4631      	mov	r1, r6
    3e4e:	f018 f8d0 	bl	1bff2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3e52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e54:	019b      	lsls	r3, r3, #6
    3e56:	d503      	bpl.n	3e60 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    3e58:	481f      	ldr	r0, [pc, #124]	; (3ed8 <usage_fault.constprop.0+0xa0>)
    3e5a:	4631      	mov	r1, r6
    3e5c:	f018 f8c9 	bl	1bff2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3e60:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e62:	01dd      	lsls	r5, r3, #7
    3e64:	d504      	bpl.n	3e70 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    3e66:	481d      	ldr	r0, [pc, #116]	; (3edc <usage_fault.constprop.0+0xa4>)
    3e68:	f044 0101 	orr.w	r1, r4, #1
    3e6c:	f018 f8c1 	bl	1bff2 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3e70:	4d17      	ldr	r5, [pc, #92]	; (3ed0 <usage_fault.constprop.0+0x98>)
    3e72:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e74:	0318      	lsls	r0, r3, #12
    3e76:	d504      	bpl.n	3e82 <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    3e78:	4819      	ldr	r0, [pc, #100]	; (3ee0 <usage_fault.constprop.0+0xa8>)
    3e7a:	f044 0101 	orr.w	r1, r4, #1
    3e7e:	f018 f8b8 	bl	1bff2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3e82:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e84:	0359      	lsls	r1, r3, #13
    3e86:	d504      	bpl.n	3e92 <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3e88:	4816      	ldr	r0, [pc, #88]	; (3ee4 <usage_fault.constprop.0+0xac>)
    3e8a:	f044 0101 	orr.w	r1, r4, #1
    3e8e:	f018 f8b0 	bl	1bff2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3e92:	4d0f      	ldr	r5, [pc, #60]	; (3ed0 <usage_fault.constprop.0+0x98>)
    3e94:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3e96:	039a      	lsls	r2, r3, #14
    3e98:	d504      	bpl.n	3ea4 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3e9a:	4813      	ldr	r0, [pc, #76]	; (3ee8 <usage_fault.constprop.0+0xb0>)
    3e9c:	f044 0101 	orr.w	r1, r4, #1
    3ea0:	f018 f8a7 	bl	1bff2 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3ea4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3ea6:	03db      	lsls	r3, r3, #15
    3ea8:	d504      	bpl.n	3eb4 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3eaa:	4810      	ldr	r0, [pc, #64]	; (3eec <usage_fault.constprop.0+0xb4>)
    3eac:	f044 0101 	orr.w	r1, r4, #1
    3eb0:	f018 f89f 	bl	1bff2 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3eb4:	4a06      	ldr	r2, [pc, #24]	; (3ed0 <usage_fault.constprop.0+0x98>)
    3eb6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3eb8:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3ebc:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3ec0:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3ec2:	2000      	movs	r0, #0
    3ec4:	bd70      	pop	{r4, r5, r6, pc}
    3ec6:	bf00      	nop
    3ec8:	00020e00 	.word	0x00020e00
    3ecc:	00020f38 	.word	0x00020f38
    3ed0:	e000ed00 	.word	0xe000ed00
    3ed4:	00022dfb 	.word	0x00022dfb
    3ed8:	00022e13 	.word	0x00022e13
    3edc:	00022e26 	.word	0x00022e26
    3ee0:	00022e40 	.word	0x00022e40
    3ee4:	00022e5e 	.word	0x00022e5e
    3ee8:	00022e83 	.word	0x00022e83
    3eec:	00022e9d 	.word	0x00022e9d

00003ef0 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ef4:	4b2a      	ldr	r3, [pc, #168]	; (3fa0 <bus_fault.constprop.0+0xb0>)
    3ef6:	4c2b      	ldr	r4, [pc, #172]	; (3fa4 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3ef8:	4d2b      	ldr	r5, [pc, #172]	; (3fa8 <bus_fault.constprop.0+0xb8>)
    3efa:	1ae4      	subs	r4, r4, r3
    3efc:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    3efe:	01a4      	lsls	r4, r4, #6
    3f00:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3f04:	4607      	mov	r7, r0
    3f06:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3f08:	4828      	ldr	r0, [pc, #160]	; (3fac <bus_fault.constprop.0+0xbc>)
    3f0a:	4641      	mov	r1, r8
    3f0c:	f018 f871 	bl	1bff2 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3f10:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f12:	04d9      	lsls	r1, r3, #19
    3f14:	d503      	bpl.n	3f1e <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    3f16:	4826      	ldr	r0, [pc, #152]	; (3fb0 <bus_fault.constprop.0+0xc0>)
    3f18:	4641      	mov	r1, r8
    3f1a:	f018 f86a 	bl	1bff2 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3f1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f20:	051a      	lsls	r2, r3, #20
    3f22:	d504      	bpl.n	3f2e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    3f24:	4823      	ldr	r0, [pc, #140]	; (3fb4 <bus_fault.constprop.0+0xc4>)
    3f26:	f044 0101 	orr.w	r1, r4, #1
    3f2a:	f018 f862 	bl	1bff2 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3f2e:	4d1e      	ldr	r5, [pc, #120]	; (3fa8 <bus_fault.constprop.0+0xb8>)
    3f30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f32:	059b      	lsls	r3, r3, #22
    3f34:	d512      	bpl.n	3f5c <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    3f36:	f044 0801 	orr.w	r8, r4, #1
    3f3a:	481f      	ldr	r0, [pc, #124]	; (3fb8 <bus_fault.constprop.0+0xc8>)
    3f3c:	4641      	mov	r1, r8
    3f3e:	f018 f858 	bl	1bff2 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    3f42:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3f44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f46:	0418      	lsls	r0, r3, #16
    3f48:	d508      	bpl.n	3f5c <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3f4a:	481c      	ldr	r0, [pc, #112]	; (3fbc <bus_fault.constprop.0+0xcc>)
    3f4c:	4642      	mov	r2, r8
    3f4e:	f018 f85d 	bl	1c00c <log_1>
			if (from_hard_fault != 0) {
    3f52:	b11f      	cbz	r7, 3f5c <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3f54:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3f5a:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3f5c:	4d12      	ldr	r5, [pc, #72]	; (3fa8 <bus_fault.constprop.0+0xb8>)
    3f5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f60:	0559      	lsls	r1, r3, #21
    3f62:	d504      	bpl.n	3f6e <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    3f64:	4816      	ldr	r0, [pc, #88]	; (3fc0 <bus_fault.constprop.0+0xd0>)
    3f66:	f044 0101 	orr.w	r1, r4, #1
    3f6a:	f018 f842 	bl	1bff2 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f70:	05da      	lsls	r2, r3, #23
    3f72:	d50d      	bpl.n	3f90 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    3f74:	4813      	ldr	r0, [pc, #76]	; (3fc4 <bus_fault.constprop.0+0xd4>)
    3f76:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3f7a:	f018 f83a 	bl	1bff2 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f7e:	4a0a      	ldr	r2, [pc, #40]	; (3fa8 <bus_fault.constprop.0+0xb8>)
    3f80:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f82:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f84:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3f88:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3f8a:	7030      	strb	r0, [r6, #0]
}
    3f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    3f90:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3f92:	049b      	lsls	r3, r3, #18
    3f94:	d5f3      	bpl.n	3f7e <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3f96:	480c      	ldr	r0, [pc, #48]	; (3fc8 <bus_fault.constprop.0+0xd8>)
    3f98:	f044 0101 	orr.w	r1, r4, #1
    3f9c:	e7ed      	b.n	3f7a <bus_fault.constprop.0+0x8a>
    3f9e:	bf00      	nop
    3fa0:	00020e00 	.word	0x00020e00
    3fa4:	00020f38 	.word	0x00020f38
    3fa8:	e000ed00 	.word	0xe000ed00
    3fac:	00022ec8 	.word	0x00022ec8
    3fb0:	00022ede 	.word	0x00022ede
    3fb4:	00022d6c 	.word	0x00022d6c
    3fb8:	00022eef 	.word	0x00022eef
    3fbc:	00022f08 	.word	0x00022f08
    3fc0:	00022f1d 	.word	0x00022f1d
    3fc4:	00022f38 	.word	0x00022f38
    3fc8:	00022dcc 	.word	0x00022dcc

00003fcc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3fcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3fd0:	4b65      	ldr	r3, [pc, #404]	; (4168 <z_arm_fault+0x19c>)
    3fd2:	685e      	ldr	r6, [r3, #4]
{
    3fd4:	b08b      	sub	sp, #44	; 0x2c
    3fd6:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3fd8:	f3c6 0408 	ubfx	r4, r6, #0, #9
    3fdc:	2700      	movs	r7, #0
    3fde:	f387 8811 	msr	BASEPRI, r7
    3fe2:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3fe6:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3fea:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3fee:	d10d      	bne.n	400c <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    3ff0:	f002 030c 	and.w	r3, r2, #12
    3ff4:	2b08      	cmp	r3, #8
    3ff6:	d10b      	bne.n	4010 <z_arm_fault+0x44>
    3ff8:	495c      	ldr	r1, [pc, #368]	; (416c <z_arm_fault+0x1a0>)
    3ffa:	4b5d      	ldr	r3, [pc, #372]	; (4170 <z_arm_fault+0x1a4>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3ffc:	485d      	ldr	r0, [pc, #372]	; (4174 <z_arm_fault+0x1a8>)
    3ffe:	1ac9      	subs	r1, r1, r3
    4000:	08c9      	lsrs	r1, r1, #3
    4002:	0189      	lsls	r1, r1, #6
    4004:	f041 0101 	orr.w	r1, r1, #1
    4008:	f017 fff3 	bl	1bff2 <log_0>
		return NULL;
    400c:	463d      	mov	r5, r7
    400e:	e003      	b.n	4018 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4010:	0712      	lsls	r2, r2, #28
    4012:	d401      	bmi.n	4018 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    4014:	4605      	mov	r5, r0
			*nested_exc = true;
    4016:	2701      	movs	r7, #1
	*recoverable = false;
    4018:	2300      	movs	r3, #0
    401a:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    401e:	1ee3      	subs	r3, r4, #3
    4020:	2b09      	cmp	r3, #9
    4022:	f200 8088 	bhi.w	4136 <z_arm_fault+0x16a>
    4026:	e8df f003 	tbb	[pc, r3]
    402a:	7505      	.short	0x7505
    402c:	86867279 	.word	0x86867279
    4030:	7d868686 	.word	0x7d868686
    4034:	4a4e      	ldr	r2, [pc, #312]	; (4170 <z_arm_fault+0x1a4>)
    4036:	4e4d      	ldr	r6, [pc, #308]	; (416c <z_arm_fault+0x1a0>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4038:	f8df 812c 	ldr.w	r8, [pc, #300]	; 4168 <z_arm_fault+0x19c>
	PR_FAULT_INFO("***** HARD FAULT *****");
    403c:	484e      	ldr	r0, [pc, #312]	; (4178 <z_arm_fault+0x1ac>)
    403e:	1ab6      	subs	r6, r6, r2
    4040:	08f6      	lsrs	r6, r6, #3
    4042:	01b6      	lsls	r6, r6, #6
    4044:	f046 0601 	orr.w	r6, r6, #1
    4048:	4631      	mov	r1, r6
    404a:	f017 ffd2 	bl	1bff2 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    404e:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    4052:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4056:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    405a:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    405e:	d005      	beq.n	406c <z_arm_fault+0xa0>
		PR_EXC("  Bus fault on vector table read");
    4060:	4846      	ldr	r0, [pc, #280]	; (417c <z_arm_fault+0x1b0>)
    4062:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    4064:	f017 ffc5 	bl	1bff2 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4068:	2400      	movs	r4, #0
}
    406a:	e007      	b.n	407c <z_arm_fault+0xb0>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    406c:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    4070:	2b00      	cmp	r3, #0
    4072:	da1d      	bge.n	40b0 <z_arm_fault+0xe4>
		PR_EXC("  Debug event");
    4074:	4842      	ldr	r0, [pc, #264]	; (4180 <z_arm_fault+0x1b4>)
    4076:	4631      	mov	r1, r6
    4078:	f017 ffbb 	bl	1bff2 <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    407c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4080:	b99b      	cbnz	r3, 40aa <z_arm_fault+0xde>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4082:	2220      	movs	r2, #32
    4084:	4629      	mov	r1, r5
    4086:	a802      	add	r0, sp, #8
    4088:	f019 fcc0 	bl	1da0c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    408c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    408e:	2f00      	cmp	r7, #0
    4090:	d065      	beq.n	415e <z_arm_fault+0x192>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4092:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4096:	b922      	cbnz	r2, 40a2 <z_arm_fault+0xd6>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4098:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    409c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    40a0:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    40a2:	a902      	add	r1, sp, #8
    40a4:	4620      	mov	r0, r4
    40a6:	f7ff fcc5 	bl	3a34 <z_arm_fatal_error>
}
    40aa:	b00b      	add	sp, #44	; 0x2c
    40ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    40b0:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    40b4:	005b      	lsls	r3, r3, #1
    40b6:	d5e1      	bpl.n	407c <z_arm_fault+0xb0>
		PR_EXC("  Fault escalation (see below)");
    40b8:	4832      	ldr	r0, [pc, #200]	; (4184 <z_arm_fault+0x1b8>)
    40ba:	4631      	mov	r1, r6
    40bc:	f017 ff99 	bl	1bff2 <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
    40c0:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    40c2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    40c6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    40ca:	429a      	cmp	r2, r3
    40cc:	d00a      	beq.n	40e4 <z_arm_fault+0x118>
		} else if (SCB_MMFSR != 0) {
    40ce:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    40d2:	b173      	cbz	r3, 40f2 <z_arm_fault+0x126>
			reason = mem_manage_fault(esf, 1, recoverable);
    40d4:	f10d 0207 	add.w	r2, sp, #7
    40d8:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    40da:	4628      	mov	r0, r5
    40dc:	f7ff fe2a 	bl	3d34 <mem_manage_fault>
    40e0:	4604      	mov	r4, r0
		break;
    40e2:	e7cb      	b.n	407c <z_arm_fault+0xb0>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    40e4:	6829      	ldr	r1, [r5, #0]
    40e6:	4828      	ldr	r0, [pc, #160]	; (4188 <z_arm_fault+0x1bc>)
    40e8:	4632      	mov	r2, r6
    40ea:	f017 ff8f 	bl	1c00c <log_1>
			reason = esf->basic.r0;
    40ee:	682c      	ldr	r4, [r5, #0]
    40f0:	e7c4      	b.n	407c <z_arm_fault+0xb0>
		} else if (SCB_BFSR != 0) {
    40f2:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    40f6:	b12b      	cbz	r3, 4104 <z_arm_fault+0x138>
			reason = bus_fault(esf, 1, recoverable);
    40f8:	f10d 0107 	add.w	r1, sp, #7
    40fc:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    40fe:	f7ff fef7 	bl	3ef0 <bus_fault.constprop.0>
    4102:	e7ed      	b.n	40e0 <z_arm_fault+0x114>
		} else if (SCB_UFSR != 0) {
    4104:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    4108:	b29b      	uxth	r3, r3
    410a:	2b00      	cmp	r3, #0
    410c:	d0b6      	beq.n	407c <z_arm_fault+0xb0>
		reason = usage_fault(esf);
    410e:	f7ff fe93 	bl	3e38 <usage_fault.constprop.0>
    4112:	e7e5      	b.n	40e0 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    4114:	f10d 0207 	add.w	r2, sp, #7
    4118:	2100      	movs	r1, #0
    411a:	e7de      	b.n	40da <z_arm_fault+0x10e>
		reason = bus_fault(esf, 0, recoverable);
    411c:	f10d 0107 	add.w	r1, sp, #7
    4120:	2000      	movs	r0, #0
    4122:	e7ec      	b.n	40fe <z_arm_fault+0x132>
    4124:	4911      	ldr	r1, [pc, #68]	; (416c <z_arm_fault+0x1a0>)
    4126:	4b12      	ldr	r3, [pc, #72]	; (4170 <z_arm_fault+0x1a4>)
	PR_FAULT_INFO(
    4128:	4818      	ldr	r0, [pc, #96]	; (418c <z_arm_fault+0x1c0>)
    412a:	1ac9      	subs	r1, r1, r3
    412c:	08c9      	lsrs	r1, r1, #3
    412e:	0189      	lsls	r1, r1, #6
    4130:	f041 0101 	orr.w	r1, r1, #1
    4134:	e796      	b.n	4064 <z_arm_fault+0x98>
    4136:	4a0e      	ldr	r2, [pc, #56]	; (4170 <z_arm_fault+0x1a4>)
    4138:	4b0c      	ldr	r3, [pc, #48]	; (416c <z_arm_fault+0x1a0>)
	PR_FAULT_INFO("***** %s %d) *****",
    413a:	4815      	ldr	r0, [pc, #84]	; (4190 <z_arm_fault+0x1c4>)
    413c:	4915      	ldr	r1, [pc, #84]	; (4194 <z_arm_fault+0x1c8>)
    413e:	1a9b      	subs	r3, r3, r2
    4140:	08db      	lsrs	r3, r3, #3
    4142:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    4146:	ea4f 1383 	mov.w	r3, r3, lsl #6
    414a:	bf18      	it	ne
    414c:	4601      	movne	r1, r0
    414e:	f043 0301 	orr.w	r3, r3, #1
    4152:	4811      	ldr	r0, [pc, #68]	; (4198 <z_arm_fault+0x1cc>)
    4154:	f1a4 0210 	sub.w	r2, r4, #16
    4158:	f017 ff6c 	bl	1c034 <log_2>
    415c:	e784      	b.n	4068 <z_arm_fault+0x9c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    415e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4162:	f023 0301 	bic.w	r3, r3, #1
    4166:	e79b      	b.n	40a0 <z_arm_fault+0xd4>
    4168:	e000ed00 	.word	0xe000ed00
    416c:	00020f38 	.word	0x00020f38
    4170:	00020e00 	.word	0x00020e00
    4174:	00022f50 	.word	0x00022f50
    4178:	00022f7b 	.word	0x00022f7b
    417c:	00022f92 	.word	0x00022f92
    4180:	00022fb3 	.word	0x00022fb3
    4184:	00022fc1 	.word	0x00022fc1
    4188:	00022fe0 	.word	0x00022fe0
    418c:	00022ffc 	.word	0x00022ffc
    4190:	00023035 	.word	0x00023035
    4194:	00023020 	.word	0x00023020
    4198:	0002304e 	.word	0x0002304e

0000419c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    419c:	4a02      	ldr	r2, [pc, #8]	; (41a8 <z_arm_fault_init+0xc>)
    419e:	6953      	ldr	r3, [r2, #20]
    41a0:	f043 0310 	orr.w	r3, r3, #16
    41a4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    41a6:	4770      	bx	lr
    41a8:	e000ed00 	.word	0xe000ed00

000041ac <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    41ac:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    41b0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    41b4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    41b6:	4672      	mov	r2, lr
	bl z_arm_fault
    41b8:	f7ff ff08 	bl	3fcc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    41bc:	bd01      	pop	{r0, pc}
    41be:	bf00      	nop

000041c0 <z_arm_interrupt_init>:
    41c0:	4804      	ldr	r0, [pc, #16]	; (41d4 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    41c2:	2300      	movs	r3, #0
    41c4:	2120      	movs	r1, #32
    41c6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    41c8:	3301      	adds	r3, #1
    41ca:	2b30      	cmp	r3, #48	; 0x30
    41cc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    41d0:	d1f9      	bne.n	41c6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    41d2:	4770      	bx	lr
    41d4:	e000e100 	.word	0xe000e100

000041d8 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    41d8:	f01c fc9a 	bl	20b10 <z_arm_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    41dc:	2020      	movs	r0, #32
    msr BASEPRI, r0
    41de:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    41e2:	4808      	ldr	r0, [pc, #32]	; (4204 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    41e4:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    41e8:	1840      	adds	r0, r0, r1
    msr PSP, r0
    41ea:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    41ee:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    41f2:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    41f4:	4308      	orrs	r0, r1
    msr CONTROL, r0
    41f6:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    41fa:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    41fe:	f7ff fcad 	bl	3b5c <z_arm_prep_c>
    4202:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4204:	20004480 	.word	0x20004480

00004208 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4208:	4b06      	ldr	r3, [pc, #24]	; (4224 <z_impl_k_thread_abort+0x1c>)
    420a:	689b      	ldr	r3, [r3, #8]
    420c:	4283      	cmp	r3, r0
    420e:	d107      	bne.n	4220 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4210:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4214:	b123      	cbz	r3, 4220 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4216:	4a04      	ldr	r2, [pc, #16]	; (4228 <z_impl_k_thread_abort+0x20>)
    4218:	6853      	ldr	r3, [r2, #4]
    421a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    421e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    4220:	f016 bf66 	b.w	1b0f0 <z_thread_abort>
    4224:	200028a0 	.word	0x200028a0
    4228:	e000ed00 	.word	0xe000ed00

0000422c <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    422c:	4b02      	ldr	r3, [pc, #8]	; (4238 <z_arm_configure_static_mpu_regions+0xc>)
    422e:	4a03      	ldr	r2, [pc, #12]	; (423c <z_arm_configure_static_mpu_regions+0x10>)
    4230:	4803      	ldr	r0, [pc, #12]	; (4240 <z_arm_configure_static_mpu_regions+0x14>)
    4232:	2101      	movs	r1, #1
    4234:	f000 b88c 	b.w	4350 <arm_core_mpu_configure_static_mpu_regions>
    4238:	20040000 	.word	0x20040000
    423c:	20000000 	.word	0x20000000
    4240:	0002131c 	.word	0x0002131c

00004244 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4244:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4246:	4b05      	ldr	r3, [pc, #20]	; (425c <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    4248:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    424a:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    424c:	4a04      	ldr	r2, [pc, #16]	; (4260 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    424e:	2120      	movs	r1, #32
    4250:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4254:	4618      	mov	r0, r3
    4256:	2101      	movs	r1, #1
    4258:	f000 b884 	b.w	4364 <arm_core_mpu_configure_dynamic_mpu_regions>
    425c:	20001508 	.word	0x20001508
    4260:	150b0000 	.word	0x150b0000

00004264 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    4266:	4f2a      	ldr	r7, [pc, #168]	; (4310 <mpu_configure_regions+0xac>)
    4268:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    426a:	2100      	movs	r1, #0
    426c:	42b1      	cmp	r1, r6
    426e:	da14      	bge.n	429a <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    4270:	6844      	ldr	r4, [r0, #4]
    4272:	2c00      	cmp	r4, #0
    4274:	d048      	beq.n	4308 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4276:	b1c3      	cbz	r3, 42aa <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4278:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    427c:	ea14 0f0c 	tst.w	r4, ip
    4280:	d00d      	beq.n	429e <mpu_configure_regions+0x3a>
    4282:	4a24      	ldr	r2, [pc, #144]	; (4314 <mpu_configure_regions+0xb0>)
    4284:	4b24      	ldr	r3, [pc, #144]	; (4318 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4286:	4825      	ldr	r0, [pc, #148]	; (431c <mpu_configure_regions+0xb8>)
    4288:	1ad2      	subs	r2, r2, r3
    428a:	08d2      	lsrs	r2, r2, #3
    428c:	0192      	lsls	r2, r2, #6
    428e:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4292:	f017 febb 	bl	1c00c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4296:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    429a:	4610      	mov	r0, r2
    429c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    429e:	2c1f      	cmp	r4, #31
    42a0:	d9ef      	bls.n	4282 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    42a2:	6805      	ldr	r5, [r0, #0]
		&&
    42a4:	ea1c 0f05 	tst.w	ip, r5
    42a8:	d1eb      	bne.n	4282 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    42aa:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    42ac:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    42ae:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    42b2:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    42b4:	d916      	bls.n	42e4 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    42b6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    42ba:	d815      	bhi.n	42e8 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    42bc:	3c01      	subs	r4, #1
    42be:	fab4 f484 	clz	r4, r4
    42c2:	f1c4 041f 	rsb	r4, r4, #31
    42c6:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    42c8:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    42ca:	ea4c 0404 	orr.w	r4, ip, r4
    42ce:	d90d      	bls.n	42ec <mpu_configure_regions+0x88>
    42d0:	4a10      	ldr	r2, [pc, #64]	; (4314 <mpu_configure_regions+0xb0>)
    42d2:	4b11      	ldr	r3, [pc, #68]	; (4318 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    42d4:	4812      	ldr	r0, [pc, #72]	; (4320 <mpu_configure_regions+0xbc>)
    42d6:	1ad2      	subs	r2, r2, r3
    42d8:	08d2      	lsrs	r2, r2, #3
    42da:	0192      	lsls	r2, r2, #6
    42dc:	f042 0201 	orr.w	r2, r2, #1
    42e0:	4629      	mov	r1, r5
    42e2:	e7d6      	b.n	4292 <mpu_configure_regions+0x2e>
		return REGION_32B;
    42e4:	2408      	movs	r4, #8
    42e6:	e7ef      	b.n	42c8 <mpu_configure_regions+0x64>
		return REGION_4G;
    42e8:	243e      	movs	r4, #62	; 0x3e
    42ea:	e7ed      	b.n	42c8 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42ec:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    42f0:	432a      	orrs	r2, r5
    42f2:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    42f6:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    42fa:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    42fe:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4302:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    4306:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    4308:	3101      	adds	r1, #1
    430a:	300c      	adds	r0, #12
    430c:	e7ae      	b.n	426c <mpu_configure_regions+0x8>
    430e:	bf00      	nop
    4310:	e000ed00 	.word	0xe000ed00
    4314:	00020f28 	.word	0x00020f28
    4318:	00020e00 	.word	0x00020e00
    431c:	00023065 	.word	0x00023065
    4320:	00023088 	.word	0x00023088

00004324 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4324:	4b04      	ldr	r3, [pc, #16]	; (4338 <arm_core_mpu_enable+0x14>)
    4326:	2205      	movs	r2, #5
    4328:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    432c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4330:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4334:	4770      	bx	lr
    4336:	bf00      	nop
    4338:	e000ed00 	.word	0xe000ed00

0000433c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    433c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4340:	4b02      	ldr	r3, [pc, #8]	; (434c <arm_core_mpu_disable+0x10>)
    4342:	2200      	movs	r2, #0
    4344:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4348:	4770      	bx	lr
    434a:	bf00      	nop
    434c:	e000ed00 	.word	0xe000ed00

00004350 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4350:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4352:	4c03      	ldr	r4, [pc, #12]	; (4360 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4354:	2301      	movs	r3, #1
    4356:	7822      	ldrb	r2, [r4, #0]
    4358:	f7ff ff84 	bl	4264 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    435c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    435e:	bd10      	pop	{r4, pc}
    4360:	20002938 	.word	0x20002938

00004364 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4364:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4366:	4a09      	ldr	r2, [pc, #36]	; (438c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4368:	2300      	movs	r3, #0
    436a:	7812      	ldrb	r2, [r2, #0]
    436c:	f7ff ff7a 	bl	4264 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4370:	f110 0f16 	cmn.w	r0, #22
    4374:	d003      	beq.n	437e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4376:	4b06      	ldr	r3, [pc, #24]	; (4390 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    4378:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    437a:	2807      	cmp	r0, #7
    437c:	dd00      	ble.n	4380 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    437e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4380:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4384:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4388:	3001      	adds	r0, #1
    438a:	e7f6      	b.n	437a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    438c:	20002938 	.word	0x20002938
    4390:	e000ed00 	.word	0xe000ed00

00004394 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4394:	4914      	ldr	r1, [pc, #80]	; (43e8 <z_arm_mpu_init+0x54>)
    4396:	6808      	ldr	r0, [r1, #0]
    4398:	2808      	cmp	r0, #8
{
    439a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    439c:	d821      	bhi.n	43e2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    439e:	f7ff ffcd 	bl	433c <arm_core_mpu_disable>
	MPU->RNR = index;
    43a2:	4c12      	ldr	r4, [pc, #72]	; (43ec <z_arm_mpu_init+0x58>)
    43a4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    43a6:	2200      	movs	r2, #0
    43a8:	4290      	cmp	r0, r2
    43aa:	f101 010c 	add.w	r1, r1, #12
    43ae:	d105      	bne.n	43bc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    43b0:	4b0f      	ldr	r3, [pc, #60]	; (43f0 <z_arm_mpu_init+0x5c>)
    43b2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    43b4:	f7ff ffb6 	bl	4324 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    43b8:	2000      	movs	r0, #0
}
    43ba:	bd10      	pop	{r4, pc}
    43bc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    43c0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    43c4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    43c8:	4313      	orrs	r3, r2
    43ca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    43ce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    43d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    43d6:	f043 0301 	orr.w	r3, r3, #1
    43da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    43de:	3201      	adds	r2, #1
    43e0:	e7e2      	b.n	43a8 <z_arm_mpu_init+0x14>
		return -1;
    43e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    43e6:	e7e8      	b.n	43ba <z_arm_mpu_init+0x26>
    43e8:	00021328 	.word	0x00021328
    43ec:	e000ed00 	.word	0xe000ed00
    43f0:	20002938 	.word	0x20002938

000043f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    43f4:	4b01      	ldr	r3, [pc, #4]	; (43fc <__stdout_hook_install+0x8>)
    43f6:	6018      	str	r0, [r3, #0]
}
    43f8:	4770      	bx	lr
    43fa:	bf00      	nop
    43fc:	20000200 	.word	0x20000200

00004400 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4400:	f04f 0320 	mov.w	r3, #32
    4404:	f3ef 8211 	mrs	r2, BASEPRI
    4408:	f383 8812 	msr	BASEPRI_MAX, r3
    440c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4410:	4906      	ldr	r1, [pc, #24]	; (442c <nordicsemi_nrf52_init+0x2c>)
    4412:	2301      	movs	r3, #1
    4414:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4418:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    441c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4420:	f382 8811 	msr	BASEPRI, r2
    4424:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4428:	2000      	movs	r0, #0
    442a:	4770      	bx	lr
    442c:	4001e000 	.word	0x4001e000

00004430 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4430:	b120      	cbz	r0, 443c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    4432:	4b03      	ldr	r3, [pc, #12]	; (4440 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4434:	0180      	lsls	r0, r0, #6
    4436:	f043 0301 	orr.w	r3, r3, #1
    443a:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    443c:	4770      	bx	lr
    443e:	bf00      	nop
    4440:	000210c0 	.word	0x000210c0

00004444 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    4444:	4b0e      	ldr	r3, [pc, #56]	; (4480 <bt_hex_real+0x3c>)
    4446:	2940      	cmp	r1, #64	; 0x40
{
    4448:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    444a:	bf28      	it	cs
    444c:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    444e:	4c0d      	ldr	r4, [pc, #52]	; (4484 <bt_hex_real+0x40>)
    4450:	1846      	adds	r6, r0, r1
    4452:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    4454:	42b0      	cmp	r0, r6
    4456:	f103 0302 	add.w	r3, r3, #2
    445a:	d104      	bne.n	4466 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    445c:	2300      	movs	r3, #0
    445e:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    4462:	4807      	ldr	r0, [pc, #28]	; (4480 <bt_hex_real+0x3c>)
    4464:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    4466:	7802      	ldrb	r2, [r0, #0]
    4468:	0912      	lsrs	r2, r2, #4
    446a:	5ca2      	ldrb	r2, [r4, r2]
    446c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    4470:	f810 2b01 	ldrb.w	r2, [r0], #1
    4474:	f002 020f 	and.w	r2, r2, #15
    4478:	5ca2      	ldrb	r2, [r4, r2]
    447a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    447e:	e7e9      	b.n	4454 <bt_hex_real+0x10>
    4480:	20002957 	.word	0x20002957
    4484:	00023106 	.word	0x00023106

00004488 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    4488:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    448a:	7803      	ldrb	r3, [r0, #0]
    448c:	b08b      	sub	sp, #44	; 0x2c
    448e:	4604      	mov	r4, r0
    4490:	ad07      	add	r5, sp, #28
    4492:	2b03      	cmp	r3, #3
    4494:	d821      	bhi.n	44da <bt_addr_le_str_real+0x52>
    4496:	e8df f003 	tbb	[pc, r3]
    449a:	1a02      	.short	0x1a02
    449c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    449e:	4912      	ldr	r1, [pc, #72]	; (44e8 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    44a0:	4628      	mov	r0, r5
    44a2:	f019 fa6a 	bl	1d97a <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    44a6:	7863      	ldrb	r3, [r4, #1]
    44a8:	9304      	str	r3, [sp, #16]
    44aa:	78a3      	ldrb	r3, [r4, #2]
    44ac:	9303      	str	r3, [sp, #12]
    44ae:	78e3      	ldrb	r3, [r4, #3]
    44b0:	9302      	str	r3, [sp, #8]
    44b2:	7923      	ldrb	r3, [r4, #4]
    44b4:	9301      	str	r3, [sp, #4]
    44b6:	7963      	ldrb	r3, [r4, #5]
    44b8:	9300      	str	r3, [sp, #0]
    44ba:	4a0c      	ldr	r2, [pc, #48]	; (44ec <bt_addr_le_str_real+0x64>)
    44bc:	79a3      	ldrb	r3, [r4, #6]
    44be:	9505      	str	r5, [sp, #20]
    44c0:	211e      	movs	r1, #30
    44c2:	480b      	ldr	r0, [pc, #44]	; (44f0 <bt_addr_le_str_real+0x68>)
    44c4:	f017 f963 	bl	1b78e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    44c8:	4809      	ldr	r0, [pc, #36]	; (44f0 <bt_addr_le_str_real+0x68>)
    44ca:	b00b      	add	sp, #44	; 0x2c
    44cc:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    44ce:	4909      	ldr	r1, [pc, #36]	; (44f4 <bt_addr_le_str_real+0x6c>)
    44d0:	e7e6      	b.n	44a0 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    44d2:	4909      	ldr	r1, [pc, #36]	; (44f8 <bt_addr_le_str_real+0x70>)
    44d4:	e7e4      	b.n	44a0 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    44d6:	4909      	ldr	r1, [pc, #36]	; (44fc <bt_addr_le_str_real+0x74>)
    44d8:	e7e2      	b.n	44a0 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    44da:	4a09      	ldr	r2, [pc, #36]	; (4500 <bt_addr_le_str_real+0x78>)
    44dc:	210a      	movs	r1, #10
    44de:	4628      	mov	r0, r5
    44e0:	f017 f955 	bl	1b78e <snprintk>
		break;
    44e4:	e7df      	b.n	44a6 <bt_addr_le_str_real+0x1e>
    44e6:	bf00      	nop
    44e8:	000230c1 	.word	0x000230c1
    44ec:	000230e3 	.word	0x000230e3
    44f0:	20002939 	.word	0x20002939
    44f4:	000230c8 	.word	0x000230c8
    44f8:	000230cf 	.word	0x000230cf
    44fc:	000230d9 	.word	0x000230d9
    4500:	00024552 	.word	0x00024552

00004504 <le_gen_dhkey>:
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
}

static uint8_t le_gen_dhkey(uint8_t *key, uint8_t key_type)
{
    4504:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4506:	4c21      	ldr	r4, [pc, #132]	; (458c <le_gen_dhkey+0x88>)
    4508:	f3bf 8f5b 	dmb	ish
    450c:	6823      	ldr	r3, [r4, #0]
    450e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    4512:	07da      	lsls	r2, r3, #31
{
    4514:	4606      	mov	r6, r0
    4516:	460d      	mov	r5, r1
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    4518:	d501      	bpl.n	451e <le_gen_dhkey+0x1a>
		return BT_HCI_ERR_CMD_DISALLOWED;
    451a:	200c      	movs	r0, #12
			  key_type == BT_HCI_LE_KEY_TYPE_DEBUG);

	k_sem_give(&cmd_sem);

	return BT_HCI_ERR_SUCCESS;
}
    451c:	bd70      	pop	{r4, r5, r6, pc}
	if (key_type > BT_HCI_LE_KEY_TYPE_DEBUG) {
    451e:	2901      	cmp	r1, #1
    4520:	d831      	bhi.n	4586 <le_gen_dhkey+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4522:	f3bf 8f5b 	dmb	ish
    4526:	e854 3f00 	ldrex	r3, [r4]
    452a:	f043 0202 	orr.w	r2, r3, #2
    452e:	e844 2100 	strex	r1, r2, [r4]
    4532:	2900      	cmp	r1, #0
    4534:	d1f7      	bne.n	4526 <le_gen_dhkey+0x22>
    4536:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    453a:	079b      	lsls	r3, r3, #30
    453c:	d4ed      	bmi.n	451a <le_gen_dhkey+0x16>
	sys_memcpy_swap(ecc.public_key_be, key, 32);
    453e:	4814      	ldr	r0, [pc, #80]	; (4590 <le_gen_dhkey+0x8c>)
    4540:	4631      	mov	r1, r6
    4542:	f019 fb03 	bl	1db4c <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &key[32], 32);
    4546:	4813      	ldr	r0, [pc, #76]	; (4594 <le_gen_dhkey+0x90>)
    4548:	f106 0120 	add.w	r1, r6, #32
    454c:	f019 fafe 	bl	1db4c <sys_memcpy_swap.constprop.0>
    4550:	f3bf 8f5b 	dmb	ish
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
    4554:	b175      	cbz	r5, 4574 <le_gen_dhkey+0x70>
    4556:	e854 3f00 	ldrex	r3, [r4]
    455a:	f043 0304 	orr.w	r3, r3, #4
    455e:	e844 3200 	strex	r2, r3, [r4]
    4562:	2a00      	cmp	r2, #0
    4564:	d1f7      	bne.n	4556 <le_gen_dhkey+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4566:	f3bf 8f5b 	dmb	ish
	z_impl_k_sem_give(sem);
    456a:	480b      	ldr	r0, [pc, #44]	; (4598 <le_gen_dhkey+0x94>)
    456c:	f016 f8ac 	bl	1a6c8 <z_impl_k_sem_give>
    4570:	2000      	movs	r0, #0
    4572:	e7d3      	b.n	451c <le_gen_dhkey+0x18>
    4574:	e854 3f00 	ldrex	r3, [r4]
    4578:	f023 0304 	bic.w	r3, r3, #4
    457c:	e844 3200 	strex	r2, r3, [r4]
    4580:	2a00      	cmp	r2, #0
    4582:	d0f0      	beq.n	4566 <le_gen_dhkey+0x62>
    4584:	e7f6      	b.n	4574 <le_gen_dhkey+0x70>
		return BT_HCI_ERR_INVALID_PARAM;
    4586:	2012      	movs	r0, #18
    4588:	e7c8      	b.n	451c <le_gen_dhkey+0x18>
    458a:	bf00      	nop
    458c:	20001514 	.word	0x20001514
    4590:	200029f8 	.word	0x200029f8
    4594:	20002a18 	.word	0x20002a18
    4598:	2000073c 	.word	0x2000073c

0000459c <ecc_thread>:
{
    459c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    45a0:	4b6a      	ldr	r3, [pc, #424]	; (474c <ecc_thread+0x1b0>)
    45a2:	4d6b      	ldr	r5, [pc, #428]	; (4750 <ecc_thread+0x1b4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    45a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 4754 <ecc_thread+0x1b8>
	return z_impl_k_sem_take(sem, timeout);
    45a8:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 4758 <ecc_thread+0x1bc>
    45ac:	1aed      	subs	r5, r5, r3
    45ae:	08ed      	lsrs	r5, r5, #3
    45b0:	4647      	mov	r7, r8
    45b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45ba:	4648      	mov	r0, r9
    45bc:	f016 f8aa 	bl	1a714 <z_impl_k_sem_take>
    45c0:	f3bf 8f5b 	dmb	ish
    45c4:	f8d8 4000 	ldr.w	r4, [r8]
    45c8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    45cc:	f014 0401 	ands.w	r4, r4, #1
    45d0:	d05a      	beq.n	4688 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    45d2:	f8df a188 	ldr.w	sl, [pc, #392]	; 475c <ecc_thread+0x1c0>
    45d6:	4c62      	ldr	r4, [pc, #392]	; (4760 <ecc_thread+0x1c4>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    45d8:	4e62      	ldr	r6, [pc, #392]	; (4764 <ecc_thread+0x1c8>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    45da:	4863      	ldr	r0, [pc, #396]	; (4768 <ecc_thread+0x1cc>)
    45dc:	4652      	mov	r2, sl
    45de:	4621      	mov	r1, r4
    45e0:	f018 f8c2 	bl	1c768 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    45e4:	bbe8      	cbnz	r0, 4662 <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    45e6:	01a9      	lsls	r1, r5, #6
    45e8:	4860      	ldr	r0, [pc, #384]	; (476c <ecc_thread+0x1d0>)
    45ea:	f041 0101 	orr.w	r1, r1, #1
    45ee:	f017 fd00 	bl	1bff2 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    45f2:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    45f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    45fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    45fe:	2001      	movs	r0, #1
    4600:	f000 f980 	bl	4904 <bt_buf_get_rx>
    4604:	f100 0608 	add.w	r6, r0, #8
    4608:	2102      	movs	r1, #2
    460a:	4604      	mov	r4, r0
    460c:	4630      	mov	r0, r6
    460e:	f01b fb5c 	bl	1fcca <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    4612:	233e      	movs	r3, #62	; 0x3e
    4614:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    4616:	2342      	movs	r3, #66	; 0x42
    4618:	7043      	strb	r3, [r0, #1]
    461a:	2101      	movs	r1, #1
    461c:	4630      	mov	r0, r6
    461e:	f01b fb54 	bl	1fcca <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    4622:	2308      	movs	r3, #8
    4624:	7003      	strb	r3, [r0, #0]
    4626:	2141      	movs	r1, #65	; 0x41
    4628:	4630      	mov	r0, r6
    462a:	f01b fb4e 	bl	1fcca <net_buf_simple_add>
    462e:	4606      	mov	r6, r0
	evt->status = status;
    4630:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    4634:	f1ba 0f00 	cmp.w	sl, #0
    4638:	d01d      	beq.n	4676 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    463a:	2240      	movs	r2, #64	; 0x40
    463c:	2100      	movs	r1, #0
    463e:	f019 f9f0 	bl	1da22 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4642:	f3bf 8f5b 	dmb	ish
    4646:	e857 3f00 	ldrex	r3, [r7]
    464a:	f023 0301 	bic.w	r3, r3, #1
    464e:	e847 3200 	strex	r2, r3, [r7]
    4652:	2a00      	cmp	r2, #0
    4654:	d1f7      	bne.n	4646 <ecc_thread+0xaa>
    4656:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    465a:	4620      	mov	r0, r4
	bt_recv(buf);
    465c:	f001 fa12 	bl	5a84 <bt_recv>
	while (true) {
    4660:	e7a7      	b.n	45b2 <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    4662:	2220      	movs	r2, #32
    4664:	4631      	mov	r1, r6
    4666:	4620      	mov	r0, r4
    4668:	f019 f9bf 	bl	1d9ea <memcmp>
    466c:	2800      	cmp	r0, #0
    466e:	d0b4      	beq.n	45da <ecc_thread+0x3e>
	return 0;
    4670:	f04f 0a00 	mov.w	sl, #0
    4674:	e7bf      	b.n	45f6 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    4676:	493c      	ldr	r1, [pc, #240]	; (4768 <ecc_thread+0x1cc>)
    4678:	f019 fa68 	bl	1db4c <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    467c:	3120      	adds	r1, #32
    467e:	f106 0021 	add.w	r0, r6, #33	; 0x21
    4682:	f019 fa63 	bl	1db4c <sys_memcpy_swap.constprop.0>
    4686:	e7dc      	b.n	4642 <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4688:	f3bf 8f5b 	dmb	ish
    468c:	f8d8 3000 	ldr.w	r3, [r8]
    4690:	f3bf 8f5b 	dmb	ish
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    4694:	079b      	lsls	r3, r3, #30
    4696:	d58c      	bpl.n	45b2 <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    4698:	4930      	ldr	r1, [pc, #192]	; (475c <ecc_thread+0x1c0>)
    469a:	4833      	ldr	r0, [pc, #204]	; (4768 <ecc_thread+0x1cc>)
    469c:	f018 ff29 	bl	1d4f2 <uECC_valid_public_key>
	if (ret < 0) {
    46a0:	1e01      	subs	r1, r0, #0
    46a2:	da38      	bge.n	4716 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    46a4:	01aa      	lsls	r2, r5, #6
    46a6:	4832      	ldr	r0, [pc, #200]	; (4770 <ecc_thread+0x1d4>)
    46a8:	f042 0201 	orr.w	r2, r2, #1
    46ac:	f017 fcae 	bl	1c00c <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    46b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    46b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    46b8:	2001      	movs	r0, #1
    46ba:	f000 f923 	bl	4904 <bt_buf_get_rx>
    46be:	f100 0a08 	add.w	sl, r0, #8
    46c2:	2102      	movs	r1, #2
    46c4:	4606      	mov	r6, r0
    46c6:	4650      	mov	r0, sl
    46c8:	f01b faff 	bl	1fcca <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    46cc:	233e      	movs	r3, #62	; 0x3e
    46ce:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    46d0:	2322      	movs	r3, #34	; 0x22
    46d2:	7043      	strb	r3, [r0, #1]
    46d4:	2101      	movs	r1, #1
    46d6:	4650      	mov	r0, sl
    46d8:	f01b faf7 	bl	1fcca <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    46dc:	2309      	movs	r3, #9
    46de:	7003      	strb	r3, [r0, #0]
    46e0:	2121      	movs	r1, #33	; 0x21
    46e2:	4650      	mov	r0, sl
    46e4:	f01b faf1 	bl	1fcca <net_buf_simple_add>
    46e8:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    46ea:	3001      	adds	r0, #1
    46ec:	bb3c      	cbnz	r4, 473e <ecc_thread+0x1a2>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    46ee:	221f      	movs	r2, #31
    46f0:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    46f2:	21ff      	movs	r1, #255	; 0xff
    46f4:	2220      	movs	r2, #32
    46f6:	f019 f994 	bl	1da22 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    46fa:	f3bf 8f5b 	dmb	ish
    46fe:	e857 3f00 	ldrex	r3, [r7]
    4702:	f023 0302 	bic.w	r3, r3, #2
    4706:	e847 3200 	strex	r2, r3, [r7]
    470a:	2a00      	cmp	r2, #0
    470c:	d1f7      	bne.n	46fe <ecc_thread+0x162>
    470e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    4712:	4630      	mov	r0, r6
    4714:	e7a2      	b.n	465c <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be,
    4716:	4912      	ldr	r1, [pc, #72]	; (4760 <ecc_thread+0x1c4>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4718:	f3bf 8f5b 	dmb	ish
    471c:	f8d8 3000 	ldr.w	r3, [r8]
    4720:	4810      	ldr	r0, [pc, #64]	; (4764 <ecc_thread+0x1c8>)
    4722:	f3bf 8f5b 	dmb	ish
    4726:	f013 0f04 	tst.w	r3, #4
    472a:	f101 0220 	add.w	r2, r1, #32
    472e:	4b0b      	ldr	r3, [pc, #44]	; (475c <ecc_thread+0x1c0>)
    4730:	bf18      	it	ne
    4732:	4601      	movne	r1, r0
    4734:	4610      	mov	r0, r2
    4736:	f018 f866 	bl	1c806 <uECC_shared_secret>
    473a:	4604      	mov	r4, r0
    473c:	e7b8      	b.n	46b0 <ecc_thread+0x114>
		evt->status = 0U;
    473e:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    4740:	4909      	ldr	r1, [pc, #36]	; (4768 <ecc_thread+0x1cc>)
		evt->status = 0U;
    4742:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    4744:	f019 fa02 	bl	1db4c <sys_memcpy_swap.constprop.0>
    4748:	e7d7      	b.n	46fa <ecc_thread+0x15e>
    474a:	bf00      	nop
    474c:	00020e00 	.word	0x00020e00
    4750:	00020ee8 	.word	0x00020ee8
    4754:	20001514 	.word	0x20001514
    4758:	2000073c 	.word	0x2000073c
    475c:	00021348 	.word	0x00021348
    4760:	200029d8 	.word	0x200029d8
    4764:	0002317a 	.word	0x0002317a
    4768:	200029f8 	.word	0x200029f8
    476c:	0002311e 	.word	0x0002311e
    4770:	00023147 	.word	0x00023147

00004774 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    4774:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    4776:	7d06      	ldrb	r6, [r0, #20]
    4778:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    477a:	b976      	cbnz	r6, 479a <bt_hci_ecc_send+0x26>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    477c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    477e:	881d      	ldrh	r5, [r3, #0]
    4780:	f242 0226 	movw	r2, #8230	; 0x2026
    4784:	4295      	cmp	r5, r2
    4786:	d045      	beq.n	4814 <bt_hci_ecc_send+0xa0>
    4788:	d80f      	bhi.n	47aa <bt_hci_ecc_send+0x36>
    478a:	f242 0201 	movw	r2, #8193	; 0x2001
    478e:	4295      	cmp	r5, r2
    4790:	d04f      	beq.n	4832 <bt_hci_ecc_send+0xbe>
    4792:	f242 0325 	movw	r3, #8229	; 0x2025
    4796:	429d      	cmp	r5, r3
    4798:	d013      	beq.n	47c2 <bt_hci_ecc_send+0x4e>
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    479a:	4b2a      	ldr	r3, [pc, #168]	; (4844 <bt_hci_ecc_send+0xd0>)
    479c:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    47a0:	4620      	mov	r0, r4
    47a2:	691b      	ldr	r3, [r3, #16]
}
    47a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    47a8:	4718      	bx	r3
		switch (sys_le16_to_cpu(chdr->opcode)) {
    47aa:	f242 035e 	movw	r3, #8286	; 0x205e
    47ae:	429d      	cmp	r5, r3
    47b0:	d1f3      	bne.n	479a <bt_hci_ecc_send+0x26>
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    47b2:	2103      	movs	r1, #3
    47b4:	3008      	adds	r0, #8
    47b6:	f01b faa7 	bl	1fd08 <net_buf_simple_pull>
	cmd = (void *)buf->data;
    47ba:	68a0      	ldr	r0, [r4, #8]
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    47bc:	f890 1040 	ldrb.w	r1, [r0, #64]	; 0x40
    47c0:	e02e      	b.n	4820 <bt_hci_ecc_send+0xac>
    47c2:	2103      	movs	r1, #3
    47c4:	3008      	adds	r0, #8
    47c6:	f01b fa9f 	bl	1fd08 <net_buf_simple_pull>
	net_buf_unref(buf);
    47ca:	4620      	mov	r0, r4
    47cc:	f014 fb94 	bl	18ef8 <net_buf_unref>
    47d0:	f3bf 8f5b 	dmb	ish
    47d4:	4b1c      	ldr	r3, [pc, #112]	; (4848 <bt_hci_ecc_send+0xd4>)
    47d6:	681a      	ldr	r2, [r3, #0]
    47d8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    47dc:	0792      	lsls	r2, r2, #30
    47de:	d507      	bpl.n	47f0 <bt_hci_ecc_send+0x7c>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    47e0:	260c      	movs	r6, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    47e2:	4631      	mov	r1, r6
    47e4:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    47e8:	f019 f98c 	bl	1db04 <send_cmd_status>
}
    47ec:	2000      	movs	r0, #0
    47ee:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    47f0:	f3bf 8f5b 	dmb	ish
    47f4:	e853 2f00 	ldrex	r2, [r3]
    47f8:	f042 0101 	orr.w	r1, r2, #1
    47fc:	e843 1000 	strex	r0, r1, [r3]
    4800:	2800      	cmp	r0, #0
    4802:	d1f7      	bne.n	47f4 <bt_hci_ecc_send+0x80>
    4804:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    4808:	07d3      	lsls	r3, r2, #31
    480a:	d4e9      	bmi.n	47e0 <bt_hci_ecc_send+0x6c>
	z_impl_k_sem_give(sem);
    480c:	480f      	ldr	r0, [pc, #60]	; (484c <bt_hci_ecc_send+0xd8>)
    480e:	f015 ff5b 	bl	1a6c8 <z_impl_k_sem_give>
}
    4812:	e7e6      	b.n	47e2 <bt_hci_ecc_send+0x6e>
    4814:	2103      	movs	r1, #3
    4816:	3008      	adds	r0, #8
    4818:	f01b fa76 	bl	1fd08 <net_buf_simple_pull>
	status = le_gen_dhkey(cmd->key, BT_HCI_LE_KEY_TYPE_GENERATED);
    481c:	68a0      	ldr	r0, [r4, #8]
    481e:	4631      	mov	r1, r6
	status = le_gen_dhkey(cmd->key, cmd->key_type);
    4820:	f7ff fe70 	bl	4504 <le_gen_dhkey>
    4824:	4606      	mov	r6, r0
	net_buf_unref(buf);
    4826:	4620      	mov	r0, r4
    4828:	f014 fb66 	bl	18ef8 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY_V2, status);
    482c:	4631      	mov	r1, r6
    482e:	4628      	mov	r0, r5
    4830:	e7da      	b.n	47e8 <bt_hci_ecc_send+0x74>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    4832:	78da      	ldrb	r2, [r3, #3]
    4834:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    4838:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    483a:	791a      	ldrb	r2, [r3, #4]
    483c:	f022 0201 	bic.w	r2, r2, #1
    4840:	711a      	strb	r2, [r3, #4]
}
    4842:	e7aa      	b.n	479a <bt_hci_ecc_send+0x26>
    4844:	20000000 	.word	0x20000000
    4848:	20001514 	.word	0x20001514
    484c:	2000073c 	.word	0x2000073c

00004850 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    4850:	b510      	push	{r4, lr}
    4852:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    4854:	4c0c      	ldr	r4, [pc, #48]	; (4888 <bt_hci_ecc_init+0x38>)
    4856:	490d      	ldr	r1, [pc, #52]	; (488c <bt_hci_ecc_init+0x3c>)
    4858:	2200      	movs	r2, #0
    485a:	2300      	movs	r3, #0
    485c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    4860:	2300      	movs	r3, #0
    4862:	220a      	movs	r2, #10
    4864:	e9cd 2303 	strd	r2, r3, [sp, #12]
    4868:	e9cd 3301 	strd	r3, r3, [sp, #4]
    486c:	9300      	str	r3, [sp, #0]
    486e:	f44f 628f 	mov.w	r2, #1144	; 0x478
    4872:	4b07      	ldr	r3, [pc, #28]	; (4890 <bt_hci_ecc_init+0x40>)
    4874:	4620      	mov	r0, r4
    4876:	f015 fd9b 	bl	1a3b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    487a:	4906      	ldr	r1, [pc, #24]	; (4894 <bt_hci_ecc_init+0x44>)
    487c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    487e:	b008      	add	sp, #32
    4880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4884:	f01b bc65 	b.w	20152 <z_impl_k_thread_name_set>
    4888:	200009a0 	.word	0x200009a0
    488c:	200031c0 	.word	0x200031c0
    4890:	0000459d 	.word	0x0000459d
    4894:	00023168 	.word	0x00023168

00004898 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4898:	b430      	push	{r4, r5}
    489a:	4603      	mov	r3, r0
    489c:	4608      	mov	r0, r1
	switch (src->type) {
    489e:	781a      	ldrb	r2, [r3, #0]
    48a0:	2a01      	cmp	r2, #1
    48a2:	d013      	beq.n	48cc <uuid_to_uuid128+0x34>
    48a4:	2a02      	cmp	r2, #2
    48a6:	d026      	beq.n	48f6 <uuid_to_uuid128+0x5e>
    48a8:	b972      	cbnz	r2, 48c8 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    48aa:	4a15      	ldr	r2, [pc, #84]	; (4900 <uuid_to_uuid128+0x68>)
    48ac:	f102 0410 	add.w	r4, r2, #16
    48b0:	f852 5b04 	ldr.w	r5, [r2], #4
    48b4:	f841 5b04 	str.w	r5, [r1], #4
    48b8:	42a2      	cmp	r2, r4
    48ba:	d1f9      	bne.n	48b0 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    48bc:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    48be:	7812      	ldrb	r2, [r2, #0]
    48c0:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    48c2:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    48c4:	0a1b      	lsrs	r3, r3, #8
    48c6:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    48c8:	bc30      	pop	{r4, r5}
    48ca:	4770      	bx	lr
		*dst = uuid128_base;
    48cc:	4a0c      	ldr	r2, [pc, #48]	; (4900 <uuid_to_uuid128+0x68>)
    48ce:	f102 0410 	add.w	r4, r2, #16
    48d2:	f852 5b04 	ldr.w	r5, [r2], #4
    48d6:	f841 5b04 	str.w	r5, [r1], #4
    48da:	42a2      	cmp	r2, r4
    48dc:	d1f9      	bne.n	48d2 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    48de:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    48e0:	7812      	ldrb	r2, [r2, #0]
    48e2:	700a      	strb	r2, [r1, #0]
    48e4:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    48e8:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    48ea:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    48ec:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    48ee:	0a1b      	lsrs	r3, r3, #8
    48f0:	7382      	strb	r2, [r0, #14]
    48f2:	7403      	strb	r3, [r0, #16]
}
    48f4:	e7e8      	b.n	48c8 <uuid_to_uuid128+0x30>
}
    48f6:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    48f8:	2211      	movs	r2, #17
    48fa:	4619      	mov	r1, r3
    48fc:	f019 b886 	b.w	1da0c <memcpy>
    4900:	0002319a 	.word	0x0002319a

00004904 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    4904:	b538      	push	{r3, r4, r5, lr}
    4906:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    4908:	4805      	ldr	r0, [pc, #20]	; (4920 <bt_buf_get_rx+0x1c>)
    490a:	f01b f97c 	bl	1fc06 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    490e:	4604      	mov	r4, r0
    4910:	b120      	cbz	r0, 491c <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    4912:	2100      	movs	r1, #0
    4914:	3008      	adds	r0, #8
    4916:	f01b f995 	bl	1fc44 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    491a:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    491c:	4620      	mov	r0, r4
    491e:	bd38      	pop	{r3, r4, r5, pc}
    4920:	2000086c 	.word	0x2000086c

00004924 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    4924:	b570      	push	{r4, r5, r6, lr}
    4926:	4602      	mov	r2, r0
    4928:	460b      	mov	r3, r1
	__asm__ volatile(
    492a:	f04f 0120 	mov.w	r1, #32
    492e:	f3ef 8511 	mrs	r5, BASEPRI
    4932:	f381 8812 	msr	BASEPRI_MAX, r1
    4936:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    493a:	480c      	ldr	r0, [pc, #48]	; (496c <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    493c:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    493e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    4942:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    4946:	f385 8811 	msr	BASEPRI, r5
    494a:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    494e:	b924      	cbnz	r4, 495a <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    4950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    4954:	2001      	movs	r0, #1
    4956:	f7ff bfd5 	b.w	4904 <bt_buf_get_rx>
    495a:	2301      	movs	r3, #1
    495c:	f104 0008 	add.w	r0, r4, #8
    4960:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    4962:	81a1      	strh	r1, [r4, #12]
    4964:	f01b f96e 	bl	1fc44 <net_buf_simple_reserve>
}
    4968:	4620      	mov	r0, r4
    496a:	bd70      	pop	{r4, r5, r6, pc}
    496c:	20000000 	.word	0x20000000

00004970 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    4970:	b570      	push	{r4, r5, r6, lr}
    4972:	4604      	mov	r4, r0
	switch (evt) {
    4974:	2c0f      	cmp	r4, #15
{
    4976:	460d      	mov	r5, r1
    4978:	4610      	mov	r0, r2
    497a:	4619      	mov	r1, r3
	switch (evt) {
    497c:	d805      	bhi.n	498a <bt_buf_get_evt+0x1a>
    497e:	2c0d      	cmp	r4, #13
    4980:	d912      	bls.n	49a8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    4982:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    4986:	f7ff bfcd 	b.w	4924 <bt_buf_get_cmd_complete>
	switch (evt) {
    498a:	2c13      	cmp	r4, #19
    498c:	d10c      	bne.n	49a8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    498e:	480b      	ldr	r0, [pc, #44]	; (49bc <bt_buf_get_evt+0x4c>)
    4990:	f01b f939 	bl	1fc06 <net_buf_alloc_fixed>
			if (buf) {
    4994:	4604      	mov	r4, r0
    4996:	b128      	cbz	r0, 49a4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    4998:	2100      	movs	r1, #0
    499a:	3008      	adds	r0, #8
    499c:	f01b f952 	bl	1fc44 <net_buf_simple_reserve>
    49a0:	2301      	movs	r3, #1
    49a2:	7523      	strb	r3, [r4, #20]
}
    49a4:	4620      	mov	r0, r4
    49a6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    49a8:	4602      	mov	r2, r0
    49aa:	460b      	mov	r3, r1
		if (discardable) {
    49ac:	b10d      	cbz	r5, 49b2 <bt_buf_get_evt+0x42>
    49ae:	4804      	ldr	r0, [pc, #16]	; (49c0 <bt_buf_get_evt+0x50>)
    49b0:	e7ee      	b.n	4990 <bt_buf_get_evt+0x20>
}
    49b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    49b6:	2001      	movs	r0, #1
    49b8:	f7ff bfa4 	b.w	4904 <bt_buf_get_rx>
    49bc:	20000894 	.word	0x20000894
    49c0:	200007f4 	.word	0x200007f4

000049c4 <ver_str>:
{
    49c4:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    49c6:	4d0b      	ldr	r5, [pc, #44]	; (49f4 <ver_str+0x30>)
{
    49c8:	4606      	mov	r6, r0
	const char * const str[] = {
    49ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    49cc:	b08e      	sub	sp, #56	; 0x38
	const char * const str[] = {
    49ce:	ac01      	add	r4, sp, #4
    49d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    49d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    49d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    49d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    49d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    49da:	2e0c      	cmp	r6, #12
	const char * const str[] = {
    49dc:	682b      	ldr	r3, [r5, #0]
    49de:	6023      	str	r3, [r4, #0]
		return str[ver];
    49e0:	bf9b      	ittet	ls
    49e2:	ab0e      	addls	r3, sp, #56	; 0x38
    49e4:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    49e8:	4803      	ldrhi	r0, [pc, #12]	; (49f8 <ver_str+0x34>)
		return str[ver];
    49ea:	f856 0c34 	ldrls.w	r0, [r6, #-52]
}
    49ee:	b00e      	add	sp, #56	; 0x38
    49f0:	bd70      	pop	{r4, r5, r6, pc}
    49f2:	bf00      	nop
    49f4:	00021008 	.word	0x00021008
    49f8:	000232a1 	.word	0x000232a1

000049fc <hci_data_buf_overflow>:
    49fc:	4905      	ldr	r1, [pc, #20]	; (4a14 <hci_data_buf_overflow+0x18>)
    49fe:	4a06      	ldr	r2, [pc, #24]	; (4a18 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    4a00:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    4a02:	4806      	ldr	r0, [pc, #24]	; (4a1c <hci_data_buf_overflow+0x20>)
    4a04:	1a52      	subs	r2, r2, r1
    4a06:	08d2      	lsrs	r2, r2, #3
    4a08:	0192      	lsls	r2, r2, #6
    4a0a:	7819      	ldrb	r1, [r3, #0]
    4a0c:	f042 0202 	orr.w	r2, r2, #2
    4a10:	f017 bafc 	b.w	1c00c <log_1>
    4a14:	00020e00 	.word	0x00020e00
    4a18:	00020ee0 	.word	0x00020ee0
    4a1c:	000232a9 	.word	0x000232a9

00004a20 <hci_disconn_complete_prio>:
{
    4a20:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4a22:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    4a24:	781a      	ldrb	r2, [r3, #0]
    4a26:	b972      	cbnz	r2, 4a46 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4a28:	f8b3 4001 	ldrh.w	r4, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    4a2c:	4620      	mov	r0, r4
    4a2e:	f002 fbdb 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    4a32:	4605      	mov	r5, r0
    4a34:	b940      	cbnz	r0, 4a48 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
    4a36:	4b08      	ldr	r3, [pc, #32]	; (4a58 <hci_disconn_complete_prio+0x38>)
    4a38:	881a      	ldrh	r2, [r3, #0]
    4a3a:	b922      	cbnz	r2, 4a46 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
    4a3c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
    4a40:	ea6f 5010 	mvn.w	r0, r0, lsr #20
    4a44:	8018      	strh	r0, [r3, #0]
}
    4a46:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    4a48:	2101      	movs	r1, #1
    4a4a:	f002 fbd5 	bl	71f8 <bt_conn_set_state>
	bt_conn_unref(conn);
    4a4e:	4628      	mov	r0, r5
}
    4a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    4a54:	f019 bc26 	b.w	1e2a4 <bt_conn_unref>
    4a58:	200028e8 	.word	0x200028e8

00004a5c <hci_disconn_complete>:
{
    4a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    4a5e:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    4a60:	7835      	ldrb	r5, [r6, #0]
    4a62:	b9f5      	cbnz	r5, 4aa2 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4a64:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    4a68:	4638      	mov	r0, r7
    4a6a:	f002 fbbd 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    4a6e:	4604      	mov	r4, r0
    4a70:	b960      	cbnz	r0, 4a8c <hci_disconn_complete+0x30>
    4a72:	4b0c      	ldr	r3, [pc, #48]	; (4aa4 <hci_disconn_complete+0x48>)
    4a74:	4a0c      	ldr	r2, [pc, #48]	; (4aa8 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    4a76:	480d      	ldr	r0, [pc, #52]	; (4aac <hci_disconn_complete+0x50>)
    4a78:	1ad2      	subs	r2, r2, r3
    4a7a:	08d2      	lsrs	r2, r2, #3
    4a7c:	0192      	lsls	r2, r2, #6
    4a7e:	4639      	mov	r1, r7
    4a80:	f042 0201 	orr.w	r2, r2, #1
}
    4a84:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    4a88:	f017 bac0 	b.w	1c00c <log_1>
	conn->err = evt->reason;
    4a8c:	78f3      	ldrb	r3, [r6, #3]
    4a8e:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    4a90:	4629      	mov	r1, r5
    4a92:	f002 fbb1 	bl	71f8 <bt_conn_set_state>
	conn->handle = 0U;
    4a96:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    4a98:	4620      	mov	r0, r4
}
    4a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    4a9e:	f019 bc01 	b.w	1e2a4 <bt_conn_unref>
}
    4aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4aa4:	00020e00 	.word	0x00020e00
    4aa8:	00020ee0 	.word	0x00020ee0
    4aac:	000232d1 	.word	0x000232d1

00004ab0 <hci_hardware_error>:
{
    4ab0:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    4ab2:	2101      	movs	r1, #1
    4ab4:	3008      	adds	r0, #8
    4ab6:	f01b f92f 	bl	1fd18 <net_buf_simple_pull_mem>
    4aba:	4b06      	ldr	r3, [pc, #24]	; (4ad4 <hci_hardware_error+0x24>)
    4abc:	4a06      	ldr	r2, [pc, #24]	; (4ad8 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    4abe:	7801      	ldrb	r1, [r0, #0]
    4ac0:	4806      	ldr	r0, [pc, #24]	; (4adc <hci_hardware_error+0x2c>)
    4ac2:	1ad2      	subs	r2, r2, r3
    4ac4:	08d2      	lsrs	r2, r2, #3
    4ac6:	0192      	lsls	r2, r2, #6
}
    4ac8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    4acc:	f042 0201 	orr.w	r2, r2, #1
    4ad0:	f017 ba9c 	b.w	1c00c <log_1>
    4ad4:	00020e00 	.word	0x00020e00
    4ad8:	00020ee0 	.word	0x00020ee0
    4adc:	000232f7 	.word	0x000232f7

00004ae0 <hci_vendor_event>:
{
    4ae0:	b510      	push	{r4, lr}
    4ae2:	4a0a      	ldr	r2, [pc, #40]	; (4b0c <hci_vendor_event+0x2c>)
    4ae4:	4c0a      	ldr	r4, [pc, #40]	; (4b10 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    4ae6:	8981      	ldrh	r1, [r0, #12]
    4ae8:	6880      	ldr	r0, [r0, #8]
    4aea:	1aa4      	subs	r4, r4, r2
    4aec:	f7ff fcaa 	bl	4444 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    4af0:	f7fd fe06 	bl	2700 <z_log_strdup>
    4af4:	08e4      	lsrs	r4, r4, #3
    4af6:	01a4      	lsls	r4, r4, #6
    4af8:	f044 0402 	orr.w	r4, r4, #2
    4afc:	4601      	mov	r1, r0
    4afe:	4622      	mov	r2, r4
    4b00:	4804      	ldr	r0, [pc, #16]	; (4b14 <hci_vendor_event+0x34>)
}
    4b02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    4b06:	f017 ba81 	b.w	1c00c <log_1>
    4b0a:	bf00      	nop
    4b0c:	00020e00 	.word	0x00020e00
    4b10:	00020ee0 	.word	0x00020ee0
    4b14:	00023319 	.word	0x00023319

00004b18 <le_data_len_change>:
{
    4b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    4b1c:	6883      	ldr	r3, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    4b1e:	881d      	ldrh	r5, [r3, #0]
	uint16_t max_tx_octets = sys_le16_to_cpu(evt->max_tx_octets);
    4b20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	uint16_t max_rx_octets = sys_le16_to_cpu(evt->max_rx_octets);
    4b24:	88df      	ldrh	r7, [r3, #6]
	uint16_t max_tx_time = sys_le16_to_cpu(evt->max_tx_time);
    4b26:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	uint16_t max_rx_time = sys_le16_to_cpu(evt->max_rx_time);
    4b2a:	891e      	ldrh	r6, [r3, #8]
	conn = bt_conn_lookup_handle(handle);
    4b2c:	4628      	mov	r0, r5
    4b2e:	f002 fb5b 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    4b32:	4604      	mov	r4, r0
    4b34:	b960      	cbnz	r0, 4b50 <le_data_len_change+0x38>
    4b36:	4b0e      	ldr	r3, [pc, #56]	; (4b70 <le_data_len_change+0x58>)
    4b38:	4a0e      	ldr	r2, [pc, #56]	; (4b74 <le_data_len_change+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4b3a:	480f      	ldr	r0, [pc, #60]	; (4b78 <le_data_len_change+0x60>)
    4b3c:	1ad2      	subs	r2, r2, r3
    4b3e:	08d2      	lsrs	r2, r2, #3
    4b40:	0192      	lsls	r2, r2, #6
    4b42:	4629      	mov	r1, r5
    4b44:	f042 0201 	orr.w	r2, r2, #1
}
    4b48:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    4b4c:	f017 ba5e 	b.w	1c00c <log_1>
	conn->le.data_len.tx_max_len = max_tx_octets;
    4b50:	f8a0 90ba 	strh.w	r9, [r0, #186]	; 0xba
	conn->le.data_len.tx_max_time = max_tx_time;
    4b54:	f8a0 80bc 	strh.w	r8, [r0, #188]	; 0xbc
	conn->le.data_len.rx_max_len = max_rx_octets;
    4b58:	f8a0 70be 	strh.w	r7, [r0, #190]	; 0xbe
	conn->le.data_len.rx_max_time = max_rx_time;
    4b5c:	f8a0 60c0 	strh.w	r6, [r0, #192]	; 0xc0
	notify_le_data_len_updated(conn);
    4b60:	f002 fc70 	bl	7444 <notify_le_data_len_updated>
	bt_conn_unref(conn);
    4b64:	4620      	mov	r0, r4
}
    4b66:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bt_conn_unref(conn);
    4b6a:	f019 bb9b 	b.w	1e2a4 <bt_conn_unref>
    4b6e:	bf00      	nop
    4b70:	00020e00 	.word	0x00020e00
    4b74:	00020ee0 	.word	0x00020ee0
    4b78:	0002333d 	.word	0x0002333d

00004b7c <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4b7c:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    4b7e:	4c0d      	ldr	r4, [pc, #52]	; (4bb4 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    4b80:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    4b82:	2205      	movs	r2, #5
    4b84:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    4b88:	f002 fd38 	bl	75fc <bt_conn_lookup_state_le>
		if (!conn) {
    4b8c:	b978      	cbnz	r0, 4bae <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    4b8e:	4b0a      	ldr	r3, [pc, #40]	; (4bb8 <find_pending_connect.part.0+0x3c>)
    4b90:	6b58      	ldr	r0, [r3, #52]	; 0x34
    4b92:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    4b94:	9000      	str	r0, [sp, #0]
    4b96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    4b9a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4b9e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    4ba2:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    4ba6:	2204      	movs	r2, #4
    4ba8:	4669      	mov	r1, sp
    4baa:	f002 fd27 	bl	75fc <bt_conn_lookup_state_le>
}
    4bae:	b002      	add	sp, #8
    4bb0:	bd10      	pop	{r4, pc}
    4bb2:	bf00      	nop
    4bb4:	20000000 	.word	0x20000000
    4bb8:	00021008 	.word	0x00021008

00004bbc <handle_event>:
{
    4bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    4bbe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4bc2:	4605      	mov	r5, r0
    4bc4:	4608      	mov	r0, r1
		if (handler->event != event) {
    4bc6:	7811      	ldrb	r1, [r2, #0]
    4bc8:	42a9      	cmp	r1, r5
    4bca:	d01a      	beq.n	4c02 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    4bcc:	3208      	adds	r2, #8
    4bce:	429a      	cmp	r2, r3
    4bd0:	d1f9      	bne.n	4bc6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    4bd2:	8986      	ldrh	r6, [r0, #12]
    4bd4:	4b16      	ldr	r3, [pc, #88]	; (4c30 <handle_event+0x74>)
    4bd6:	4c17      	ldr	r4, [pc, #92]	; (4c34 <handle_event+0x78>)
    4bd8:	6880      	ldr	r0, [r0, #8]
    4bda:	4631      	mov	r1, r6
    4bdc:	1ae4      	subs	r4, r4, r3
    4bde:	f7ff fc31 	bl	4444 <bt_hex_real>
    4be2:	f7fd fd8d 	bl	2700 <z_log_strdup>
    4be6:	08e4      	lsrs	r4, r4, #3
    4be8:	01a4      	lsls	r4, r4, #6
    4bea:	f044 0402 	orr.w	r4, r4, #2
    4bee:	4603      	mov	r3, r0
    4bf0:	f8ad 4000 	strh.w	r4, [sp]
    4bf4:	4810      	ldr	r0, [pc, #64]	; (4c38 <handle_event+0x7c>)
    4bf6:	4632      	mov	r2, r6
    4bf8:	4629      	mov	r1, r5
    4bfa:	f017 fa34 	bl	1c066 <log_3>
}
    4bfe:	b002      	add	sp, #8
    4c00:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    4c02:	8981      	ldrh	r1, [r0, #12]
    4c04:	7853      	ldrb	r3, [r2, #1]
    4c06:	428b      	cmp	r3, r1
    4c08:	d90d      	bls.n	4c26 <handle_event+0x6a>
    4c0a:	4a09      	ldr	r2, [pc, #36]	; (4c30 <handle_event+0x74>)
    4c0c:	4b09      	ldr	r3, [pc, #36]	; (4c34 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4c0e:	480b      	ldr	r0, [pc, #44]	; (4c3c <handle_event+0x80>)
    4c10:	1a9b      	subs	r3, r3, r2
    4c12:	08db      	lsrs	r3, r3, #3
    4c14:	019b      	lsls	r3, r3, #6
    4c16:	f043 0301 	orr.w	r3, r3, #1
    4c1a:	462a      	mov	r2, r5
}
    4c1c:	b002      	add	sp, #8
    4c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    4c22:	f017 ba07 	b.w	1c034 <log_2>
		handler->handler(buf);
    4c26:	6853      	ldr	r3, [r2, #4]
}
    4c28:	b002      	add	sp, #8
    4c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    4c2e:	4718      	bx	r3
    4c30:	00020e00 	.word	0x00020e00
    4c34:	00020ee0 	.word	0x00020ee0
    4c38:	00023383 	.word	0x00023383
    4c3c:	00023361 	.word	0x00023361

00004c40 <hci_le_meta_event>:
{
    4c40:	b510      	push	{r4, lr}
    4c42:	2101      	movs	r1, #1
    4c44:	4604      	mov	r4, r0
    4c46:	3008      	adds	r0, #8
    4c48:	f01b f866 	bl	1fd18 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4c4c:	4621      	mov	r1, r4
    4c4e:	4a03      	ldr	r2, [pc, #12]	; (4c5c <hci_le_meta_event+0x1c>)
    4c50:	7800      	ldrb	r0, [r0, #0]
}
    4c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    4c56:	230a      	movs	r3, #10
    4c58:	f7ff bfb0 	b.w	4bbc <handle_event>
    4c5c:	00021428 	.word	0x00021428

00004c60 <hci_cmd_done>:
{
    4c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4c64:	4607      	mov	r7, r0
    4c66:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4c68:	7990      	ldrb	r0, [r2, #6]
    4c6a:	4e44      	ldr	r6, [pc, #272]	; (4d7c <hci_cmd_done+0x11c>)
{
    4c6c:	4688      	mov	r8, r1
    4c6e:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4c70:	f014 f884 	bl	18d7c <net_buf_pool_get>
    4c74:	4286      	cmp	r6, r0
    4c76:	d016      	beq.n	4ca6 <hci_cmd_done+0x46>
    4c78:	4b41      	ldr	r3, [pc, #260]	; (4d80 <hci_cmd_done+0x120>)
    4c7a:	4d42      	ldr	r5, [pc, #264]	; (4d84 <hci_cmd_done+0x124>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    4c7c:	79a0      	ldrb	r0, [r4, #6]
    4c7e:	9700      	str	r7, [sp, #0]
    4c80:	1aed      	subs	r5, r5, r3
    4c82:	08ed      	lsrs	r5, r5, #3
    4c84:	9001      	str	r0, [sp, #4]
    4c86:	f014 f879 	bl	18d7c <net_buf_pool_get>
    4c8a:	01ad      	lsls	r5, r5, #6
    4c8c:	f045 0502 	orr.w	r5, r5, #2
    4c90:	e9cd 0602 	strd	r0, r6, [sp, #8]
    4c94:	462b      	mov	r3, r5
    4c96:	483c      	ldr	r0, [pc, #240]	; (4d88 <hci_cmd_done+0x128>)
    4c98:	2204      	movs	r2, #4
    4c9a:	4669      	mov	r1, sp
    4c9c:	f017 f9ff 	bl	1c09e <log_n>
}
    4ca0:	b005      	add	sp, #20
    4ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    4ca6:	4620      	mov	r0, r4
    4ca8:	f014 f870 	bl	18d8c <net_buf_id>
    4cac:	4d37      	ldr	r5, [pc, #220]	; (4d8c <hci_cmd_done+0x12c>)
    4cae:	f04f 090c 	mov.w	r9, #12
    4cb2:	fb09 5000 	mla	r0, r9, r0, r5
    4cb6:	8843      	ldrh	r3, [r0, #2]
    4cb8:	42bb      	cmp	r3, r7
    4cba:	d011      	beq.n	4ce0 <hci_cmd_done+0x80>
    4cbc:	4b30      	ldr	r3, [pc, #192]	; (4d80 <hci_cmd_done+0x120>)
    4cbe:	4e31      	ldr	r6, [pc, #196]	; (4d84 <hci_cmd_done+0x124>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    4cc0:	4620      	mov	r0, r4
    4cc2:	1af6      	subs	r6, r6, r3
    4cc4:	f014 f862 	bl	18d8c <net_buf_id>
    4cc8:	08f6      	lsrs	r6, r6, #3
    4cca:	fb09 5000 	mla	r0, r9, r0, r5
    4cce:	01b6      	lsls	r6, r6, #6
    4cd0:	f046 0602 	orr.w	r6, r6, #2
    4cd4:	8842      	ldrh	r2, [r0, #2]
    4cd6:	482e      	ldr	r0, [pc, #184]	; (4d90 <hci_cmd_done+0x130>)
    4cd8:	4633      	mov	r3, r6
    4cda:	4639      	mov	r1, r7
    4cdc:	f017 f9aa 	bl	1c034 <log_2>
	if (cmd(buf)->state && !status) {
    4ce0:	4620      	mov	r0, r4
    4ce2:	f014 f853 	bl	18d8c <net_buf_id>
    4ce6:	260c      	movs	r6, #12
    4ce8:	fb06 5000 	mla	r0, r6, r0, r5
    4cec:	6843      	ldr	r3, [r0, #4]
    4cee:	b1f3      	cbz	r3, 4d2e <hci_cmd_done+0xce>
    4cf0:	f1b8 0f00 	cmp.w	r8, #0
    4cf4:	d11b      	bne.n	4d2e <hci_cmd_done+0xce>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    4cf6:	4620      	mov	r0, r4
    4cf8:	f014 f848 	bl	18d8c <net_buf_id>
    4cfc:	fb06 5000 	mla	r0, r6, r0, r5
	atomic_val_t mask = ATOMIC_MASK(bit);
    4d00:	2201      	movs	r2, #1
    4d02:	6840      	ldr	r0, [r0, #4]
    4d04:	e9d0 3100 	ldrd	r3, r1, [r0]
	if (val) {
    4d08:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
    4d0a:	f001 061f 	and.w	r6, r1, #31
    4d0e:	40b2      	lsls	r2, r6
	if (val) {
    4d10:	0949      	lsrs	r1, r1, #5
    4d12:	b330      	cbz	r0, 4d62 <hci_cmd_done+0x102>
    4d14:	f3bf 8f5b 	dmb	ish
    4d18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4d1c:	e853 1f00 	ldrex	r1, [r3]
    4d20:	4311      	orrs	r1, r2
    4d22:	e843 1000 	strex	r0, r1, [r3]
    4d26:	2800      	cmp	r0, #0
    4d28:	d1f8      	bne.n	4d1c <hci_cmd_done+0xbc>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4d2a:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
    4d2e:	4620      	mov	r0, r4
    4d30:	f014 f82c 	bl	18d8c <net_buf_id>
    4d34:	260c      	movs	r6, #12
    4d36:	fb06 5000 	mla	r0, r6, r0, r5
    4d3a:	6883      	ldr	r3, [r0, #8]
    4d3c:	2b00      	cmp	r3, #0
    4d3e:	d0af      	beq.n	4ca0 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    4d40:	4620      	mov	r0, r4
    4d42:	f014 f823 	bl	18d8c <net_buf_id>
    4d46:	4370      	muls	r0, r6
    4d48:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    4d4c:	4620      	mov	r0, r4
    4d4e:	f014 f81d 	bl	18d8c <net_buf_id>
    4d52:	fb06 5500 	mla	r5, r6, r0, r5
    4d56:	68a8      	ldr	r0, [r5, #8]
}
    4d58:	b005      	add	sp, #20
    4d5a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    4d5e:	f015 bcb3 	b.w	1a6c8 <z_impl_k_sem_give>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    4d62:	43d2      	mvns	r2, r2
    4d64:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    4d68:	f3bf 8f5b 	dmb	ish
    4d6c:	e853 1f00 	ldrex	r1, [r3]
    4d70:	4011      	ands	r1, r2
    4d72:	e843 1000 	strex	r0, r1, [r3]
    4d76:	2800      	cmp	r0, #0
    4d78:	d0d7      	beq.n	4d2a <hci_cmd_done+0xca>
    4d7a:	e7f7      	b.n	4d6c <hci_cmd_done+0x10c>
    4d7c:	20000844 	.word	0x20000844
    4d80:	00020e00 	.word	0x00020e00
    4d84:	00020ee0 	.word	0x00020ee0
    4d88:	000233a5 	.word	0x000233a5
    4d8c:	20001518 	.word	0x20001518
    4d90:	000233da 	.word	0x000233da

00004d94 <hci_cmd_status>:
{
    4d94:	b538      	push	{r3, r4, r5, lr}
    4d96:	2104      	movs	r1, #4
    4d98:	4604      	mov	r4, r0
    4d9a:	3008      	adds	r0, #8
    4d9c:	f01a ffbc 	bl	1fd18 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    4da0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    4da2:	7801      	ldrb	r1, [r0, #0]
    4da4:	8840      	ldrh	r0, [r0, #2]
    4da6:	4622      	mov	r2, r4
    4da8:	f7ff ff5a 	bl	4c60 <hci_cmd_done>
	if (ncmd) {
    4dac:	b125      	cbz	r5, 4db8 <hci_cmd_status+0x24>
    4dae:	4803      	ldr	r0, [pc, #12]	; (4dbc <hci_cmd_status+0x28>)
}
    4db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4db4:	f015 bc88 	b.w	1a6c8 <z_impl_k_sem_give>
    4db8:	bd38      	pop	{r3, r4, r5, pc}
    4dba:	bf00      	nop
    4dbc:	200000f0 	.word	0x200000f0

00004dc0 <hci_cmd_complete>:
{
    4dc0:	b538      	push	{r3, r4, r5, lr}
    4dc2:	2103      	movs	r1, #3
    4dc4:	4604      	mov	r4, r0
    4dc6:	3008      	adds	r0, #8
    4dc8:	f01a ffa6 	bl	1fd18 <net_buf_simple_pull_mem>
	status = buf->data[0];
    4dcc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    4dce:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    4dd0:	7819      	ldrb	r1, [r3, #0]
    4dd2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    4dd6:	4622      	mov	r2, r4
    4dd8:	f7ff ff42 	bl	4c60 <hci_cmd_done>
	if (ncmd) {
    4ddc:	b125      	cbz	r5, 4de8 <hci_cmd_complete+0x28>
    4dde:	4803      	ldr	r0, [pc, #12]	; (4dec <hci_cmd_complete+0x2c>)
}
    4de0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4de4:	f015 bc70 	b.w	1a6c8 <z_impl_k_sem_give>
    4de8:	bd38      	pop	{r3, r4, r5, pc}
    4dea:	bf00      	nop
    4dec:	200000f0 	.word	0x200000f0

00004df0 <hci_tx_thread>:
{
    4df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4df4:	4d51      	ldr	r5, [pc, #324]	; (4f3c <hci_tx_thread+0x14c>)
    4df6:	4b52      	ldr	r3, [pc, #328]	; (4f40 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4df8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 4f44 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    4dfc:	f8df a148 	ldr.w	sl, [pc, #328]	; 4f48 <hci_tx_thread+0x158>
    4e00:	1aed      	subs	r5, r5, r3
    4e02:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    4e04:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4e08:	4850      	ldr	r0, [pc, #320]	; (4f4c <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    4e0a:	f36f 3352 	bfc	r3, #13, #6
    4e0e:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    4e12:	f002 f9b3 	bl	717c <bt_conn_prepare_events>
    4e16:	1c47      	adds	r7, r0, #1
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    4e18:	484a      	ldr	r0, [pc, #296]	; (4f44 <hci_tx_thread+0x154>)
    4e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e22:	4639      	mov	r1, r7
    4e24:	f016 fb96 	bl	1b554 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    4e28:	b160      	cbz	r0, 4e44 <hci_tx_thread+0x54>
    4e2a:	4949      	ldr	r1, [pc, #292]	; (4f50 <hci_tx_thread+0x160>)
    4e2c:	4849      	ldr	r0, [pc, #292]	; (4f54 <hci_tx_thread+0x164>)
    4e2e:	f640 1379 	movw	r3, #2425	; 0x979
    4e32:	4652      	mov	r2, sl
    4e34:	f016 fc9e 	bl	1b774 <printk>
    4e38:	4040      	eors	r0, r0
    4e3a:	f380 8811 	msr	BASEPRI, r0
    4e3e:	f04f 0003 	mov.w	r0, #3
    4e42:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    4e44:	4e44      	ldr	r6, [pc, #272]	; (4f58 <hci_tx_thread+0x168>)
{
    4e46:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 4f44 <hci_tx_thread+0x154>
    4e4a:	f106 0bf0 	add.w	fp, r6, #240	; 0xf0
	for (; count; ev++, count--) {
    4e4e:	b917      	cbnz	r7, 4e56 <hci_tx_thread+0x66>
	z_impl_k_yield();
    4e50:	f016 f896 	bl	1af80 <z_impl_k_yield>
	while (1) {
    4e54:	e7d6      	b.n	4e04 <hci_tx_thread+0x14>
		switch (ev->state) {
    4e56:	f8d8 100c 	ldr.w	r1, [r8, #12]
    4e5a:	f3c1 3145 	ubfx	r1, r1, #13, #6
    4e5e:	2901      	cmp	r1, #1
    4e60:	d959      	bls.n	4f16 <hci_tx_thread+0x126>
    4e62:	2904      	cmp	r1, #4
    4e64:	d163      	bne.n	4f2e <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    4e66:	f898 300c 	ldrb.w	r3, [r8, #12]
    4e6a:	2b00      	cmp	r3, #0
    4e6c:	d157      	bne.n	4f1e <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    4e6e:	483b      	ldr	r0, [pc, #236]	; (4f5c <hci_tx_thread+0x16c>)
    4e70:	2200      	movs	r2, #0
    4e72:	2300      	movs	r3, #0
    4e74:	f01a fecc 	bl	1fc10 <net_buf_get>
	BT_ASSERT(buf);
    4e78:	4604      	mov	r4, r0
    4e7a:	b960      	cbnz	r0, 4e96 <hci_tx_thread+0xa6>
    4e7c:	4938      	ldr	r1, [pc, #224]	; (4f60 <hci_tx_thread+0x170>)
    4e7e:	4835      	ldr	r0, [pc, #212]	; (4f54 <hci_tx_thread+0x164>)
    4e80:	f640 1316 	movw	r3, #2326	; 0x916
    4e84:	4652      	mov	r2, sl
    4e86:	f016 fc75 	bl	1b774 <printk>
    4e8a:	4040      	eors	r0, r0
    4e8c:	f380 8811 	msr	BASEPRI, r0
    4e90:	f04f 0003 	mov.w	r0, #3
    4e94:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    4e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4e9e:	4658      	mov	r0, fp
    4ea0:	f015 fc38 	bl	1a714 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    4ea4:	f8d6 3108 	ldr.w	r3, [r6, #264]	; 0x108
    4ea8:	b163      	cbz	r3, 4ec4 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    4eaa:	01a9      	lsls	r1, r5, #6
    4eac:	482d      	ldr	r0, [pc, #180]	; (4f64 <hci_tx_thread+0x174>)
    4eae:	f041 0101 	orr.w	r1, r1, #1
    4eb2:	f017 f89e 	bl	1bff2 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    4eb6:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    4eba:	f014 f81d 	bl	18ef8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4ebe:	2300      	movs	r3, #0
    4ec0:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    4ec4:	4620      	mov	r0, r4
    4ec6:	f01a fece 	bl	1fc66 <net_buf_ref>
    4eca:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
		return bt_hci_ecc_send(buf);
    4ece:	4620      	mov	r0, r4
    4ed0:	f7ff fc50 	bl	4774 <bt_hci_ecc_send>
	if (err) {
    4ed4:	4601      	mov	r1, r0
    4ed6:	b1f0      	cbz	r0, 4f16 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    4ed8:	01aa      	lsls	r2, r5, #6
    4eda:	4823      	ldr	r0, [pc, #140]	; (4f68 <hci_tx_thread+0x178>)
    4edc:	f042 0201 	orr.w	r2, r2, #1
    4ee0:	f017 f894 	bl	1c00c <log_1>
	z_impl_k_sem_give(sem);
    4ee4:	4821      	ldr	r0, [pc, #132]	; (4f6c <hci_tx_thread+0x17c>)
    4ee6:	f015 fbef 	bl	1a6c8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    4eea:	4620      	mov	r0, r4
    4eec:	f013 ff4e 	bl	18d8c <net_buf_id>
    4ef0:	4b1f      	ldr	r3, [pc, #124]	; (4f70 <hci_tx_thread+0x180>)
    4ef2:	220c      	movs	r2, #12
    4ef4:	fb02 3000 	mla	r0, r2, r0, r3
    4ef8:	211f      	movs	r1, #31
    4efa:	8840      	ldrh	r0, [r0, #2]
    4efc:	4622      	mov	r2, r4
    4efe:	f7ff feaf 	bl	4c60 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    4f02:	f8d6 0108 	ldr.w	r0, [r6, #264]	; 0x108
    4f06:	f013 fff7 	bl	18ef8 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    4f0a:	2300      	movs	r3, #0
		net_buf_unref(buf);
    4f0c:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    4f0e:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		net_buf_unref(buf);
    4f12:	f013 fff1 	bl	18ef8 <net_buf_unref>
	for (; count; ev++, count--) {
    4f16:	f108 0814 	add.w	r8, r8, #20
    4f1a:	3f01      	subs	r7, #1
    4f1c:	e797      	b.n	4e4e <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    4f1e:	2b01      	cmp	r3, #1
    4f20:	d1f9      	bne.n	4f16 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    4f22:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    4f26:	3838      	subs	r0, #56	; 0x38
    4f28:	f002 fc6e 	bl	7808 <bt_conn_process_tx>
    4f2c:	e7f3      	b.n	4f16 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    4f2e:	01aa      	lsls	r2, r5, #6
    4f30:	4810      	ldr	r0, [pc, #64]	; (4f74 <hci_tx_thread+0x184>)
    4f32:	f042 0202 	orr.w	r2, r2, #2
    4f36:	f017 f869 	bl	1c00c <log_1>
    4f3a:	e7ec      	b.n	4f16 <hci_tx_thread+0x126>
    4f3c:	00020ee0 	.word	0x00020ee0
    4f40:	00020e00 	.word	0x00020e00
    4f44:	20000204 	.word	0x20000204
    4f48:	0002340d 	.word	0x0002340d
    4f4c:	20000218 	.word	0x20000218
    4f50:	00023441 	.word	0x00023441
    4f54:	0002344a 	.word	0x0002344a
    4f58:	20000000 	.word	0x20000000
    4f5c:	2000010c 	.word	0x2000010c
    4f60:	000231ae 	.word	0x000231ae
    4f64:	00023467 	.word	0x00023467
    4f68:	00023482 	.word	0x00023482
    4f6c:	200000f0 	.word	0x200000f0
    4f70:	20001518 	.word	0x20001518
    4f74:	000234a4 	.word	0x000234a4

00004f78 <hci_num_completed_packets>:
{
    4f78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f7c:	4d39      	ldr	r5, [pc, #228]	; (5064 <hci_num_completed_packets+0xec>)
    4f7e:	4b3a      	ldr	r3, [pc, #232]	; (5068 <hci_num_completed_packets+0xf0>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4f80:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
    4f84:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 506c <hci_num_completed_packets+0xf4>
    4f88:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    4f8a:	2600      	movs	r6, #0
    4f8c:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    4f8e:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    4f90:	f898 3000 	ldrb.w	r3, [r8]
    4f94:	429e      	cmp	r6, r3
    4f96:	db01      	blt.n	4f9c <hci_num_completed_packets+0x24>
}
    4f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4f9c:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    4fa0:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4fa4:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    4fa8:	4658      	mov	r0, fp
    4faa:	f002 f91d 	bl	71e8 <bt_conn_lookup_handle>
		if (!conn) {
    4fae:	4604      	mov	r4, r0
    4fb0:	b1d8      	cbz	r0, 4fea <hci_num_completed_packets+0x72>
			k_work_submit(&conn->tx_complete_work);
    4fb2:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    4fb6:	2f00      	cmp	r7, #0
    4fb8:	d033      	beq.n	5022 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    4fba:	f04f 0320 	mov.w	r3, #32
    4fbe:	f3ef 8211 	mrs	r2, BASEPRI
    4fc2:	f383 8812 	msr	BASEPRI_MAX, r3
    4fc6:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    4fca:	69e3      	ldr	r3, [r4, #28]
    4fcc:	b1b3      	cbz	r3, 4ffc <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    4fce:	3b01      	subs	r3, #1
    4fd0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    4fd2:	f382 8811 	msr	BASEPRI, r2
    4fd6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    4fda:	4620      	mov	r0, r4
    4fdc:	f001 ffac 	bl	6f38 <bt_conn_get_pkts>
    4fe0:	3f01      	subs	r7, #1
    4fe2:	f015 fb71 	bl	1a6c8 <z_impl_k_sem_give>
    4fe6:	b2bf      	uxth	r7, r7
    4fe8:	e7e5      	b.n	4fb6 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    4fea:	01aa      	lsls	r2, r5, #6
    4fec:	4820      	ldr	r0, [pc, #128]	; (5070 <hci_num_completed_packets+0xf8>)
    4fee:	f042 0201 	orr.w	r2, r2, #1
    4ff2:	4659      	mov	r1, fp
    4ff4:	f017 f80a 	bl	1c00c <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    4ff8:	3601      	adds	r6, #1
    4ffa:	e7c9      	b.n	4f90 <hci_num_completed_packets+0x18>
	return list->head;
    4ffc:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4ffe:	b12b      	cbz	r3, 500c <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5000:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    5002:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    5004:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5006:	428b      	cmp	r3, r1
	list->tail = node;
    5008:	bf08      	it	eq
    500a:	61a0      	streq	r0, [r4, #24]
    500c:	f382 8811 	msr	BASEPRI, r2
    5010:	f3bf 8f6f 	isb	sy
			if (!node) {
    5014:	b94b      	cbnz	r3, 502a <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    5016:	01a9      	lsls	r1, r5, #6
    5018:	f041 0101 	orr.w	r1, r1, #1
    501c:	4650      	mov	r0, sl
    501e:	f016 ffe8 	bl	1bff2 <log_0>
		bt_conn_unref(conn);
    5022:	4620      	mov	r0, r4
    5024:	f019 f93e 	bl	1e2a4 <bt_conn_unref>
    5028:	e7e6      	b.n	4ff8 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    502a:	f04f 0220 	mov.w	r2, #32
    502e:	f3ef 8111 	mrs	r1, BASEPRI
    5032:	f382 8812 	msr	BASEPRI_MAX, r2
    5036:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    503a:	68da      	ldr	r2, [r3, #12]
    503c:	61e2      	str	r2, [r4, #28]
	return list->tail;
    503e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    5040:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    5044:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    5048:	b94a      	cbnz	r2, 505e <hci_num_completed_packets+0xe6>
	list->head = node;
    504a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    504e:	f381 8811 	msr	BASEPRI, r1
    5052:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
    5056:	4658      	mov	r0, fp
    5058:	f015 fca2 	bl	1a9a0 <k_work_submit>
    505c:	e7bd      	b.n	4fda <hci_num_completed_packets+0x62>
	parent->next = child;
    505e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5060:	6263      	str	r3, [r4, #36]	; 0x24
}
    5062:	e7f4      	b.n	504e <hci_num_completed_packets+0xd6>
    5064:	00020ee0 	.word	0x00020ee0
    5068:	00020e00 	.word	0x00020e00
    506c:	000234e1 	.word	0x000234e1
    5070:	000234c5 	.word	0x000234c5

00005074 <le_conn_update_complete>:
{
    5074:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    5076:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5078:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    507c:	4630      	mov	r0, r6
    507e:	f002 f8b3 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    5082:	4604      	mov	r4, r0
    5084:	b968      	cbnz	r0, 50a2 <le_conn_update_complete+0x2e>
    5086:	4b29      	ldr	r3, [pc, #164]	; (512c <le_conn_update_complete+0xb8>)
    5088:	4a29      	ldr	r2, [pc, #164]	; (5130 <le_conn_update_complete+0xbc>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    508a:	482a      	ldr	r0, [pc, #168]	; (5134 <le_conn_update_complete+0xc0>)
    508c:	1ad2      	subs	r2, r2, r3
    508e:	08d2      	lsrs	r2, r2, #3
    5090:	0192      	lsls	r2, r2, #6
    5092:	f042 0201 	orr.w	r2, r2, #1
    5096:	4631      	mov	r1, r6
}
    5098:	b002      	add	sp, #8
    509a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    509e:	f016 bfb5 	b.w	1c00c <log_1>
	if (!evt->status) {
    50a2:	782b      	ldrb	r3, [r5, #0]
    50a4:	b9cb      	cbnz	r3, 50da <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    50a6:	792a      	ldrb	r2, [r5, #4]
    50a8:	78eb      	ldrb	r3, [r5, #3]
    50aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    50ae:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    50b2:	79aa      	ldrb	r2, [r5, #6]
    50b4:	796b      	ldrb	r3, [r5, #5]
    50b6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    50ba:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    50be:	79eb      	ldrb	r3, [r5, #7]
    50c0:	7a2a      	ldrb	r2, [r5, #8]
    50c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    50c6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    50ca:	f002 f98b 	bl	73e4 <notify_le_param_updated>
	bt_conn_unref(conn);
    50ce:	4620      	mov	r0, r4
}
    50d0:	b002      	add	sp, #8
    50d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    50d6:	f019 b8e5 	b.w	1e2a4 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    50da:	2b1a      	cmp	r3, #26
    50dc:	d1f7      	bne.n	50ce <le_conn_update_complete+0x5a>
    50de:	78c3      	ldrb	r3, [r0, #3]
    50e0:	2b01      	cmp	r3, #1
    50e2:	d1f4      	bne.n	50ce <le_conn_update_complete+0x5a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    50e4:	f3bf 8f5b 	dmb	ish
    50e8:	1d03      	adds	r3, r0, #4
    50ea:	e853 2f00 	ldrex	r2, [r3]
    50ee:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    50f2:	e843 1500 	strex	r5, r1, [r3]
    50f6:	2d00      	cmp	r5, #0
    50f8:	d1f7      	bne.n	50ea <le_conn_update_complete+0x76>
    50fa:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_SLAVE &&
    50fe:	0553      	lsls	r3, r2, #21
    5100:	d4e5      	bmi.n	50ce <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    5102:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    5106:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    510a:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    510e:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    5112:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    5116:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    511a:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    511c:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    5120:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    5124:	f002 fd64 	bl	7bf0 <bt_l2cap_update_conn_param>
    5128:	e7d1      	b.n	50ce <le_conn_update_complete+0x5a>
    512a:	bf00      	nop
    512c:	00020e00 	.word	0x00020e00
    5130:	00020ee0 	.word	0x00020ee0
    5134:	0002333d 	.word	0x0002333d

00005138 <bt_hci_cmd_state_set_init>:
{
    5138:	b510      	push	{r4, lr}
	state->bit = bit;
    513a:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
    513e:	f89d 3008 	ldrb.w	r3, [sp, #8]
    5142:	720b      	strb	r3, [r1, #8]
{
    5144:	460c      	mov	r4, r1
	cmd(buf)->state = state;
    5146:	f013 fe21 	bl	18d8c <net_buf_id>
    514a:	4b03      	ldr	r3, [pc, #12]	; (5158 <bt_hci_cmd_state_set_init+0x20>)
    514c:	220c      	movs	r2, #12
    514e:	fb02 3300 	mla	r3, r2, r0, r3
    5152:	605c      	str	r4, [r3, #4]
}
    5154:	bd10      	pop	{r4, pc}
    5156:	bf00      	nop
    5158:	20001518 	.word	0x20001518

0000515c <bt_hci_cmd_create>:
{
    515c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    5160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5168:	4606      	mov	r6, r0
    516a:	4817      	ldr	r0, [pc, #92]	; (51c8 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    516c:	4d17      	ldr	r5, [pc, #92]	; (51cc <bt_hci_cmd_create+0x70>)
{
    516e:	460f      	mov	r7, r1
    5170:	f01a fd49 	bl	1fc06 <net_buf_alloc_fixed>
    5174:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    5176:	f100 0a08 	add.w	sl, r0, #8
    517a:	2100      	movs	r1, #0
    517c:	f04f 0800 	mov.w	r8, #0
    5180:	4650      	mov	r0, sl
    5182:	f01a fd5f 	bl	1fc44 <net_buf_simple_reserve>
    5186:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    518a:	4620      	mov	r0, r4
    518c:	f013 fdfe 	bl	18d8c <net_buf_id>
    5190:	f04f 090c 	mov.w	r9, #12
    5194:	fb09 5000 	mla	r0, r9, r0, r5
    5198:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    519a:	4620      	mov	r0, r4
    519c:	f013 fdf6 	bl	18d8c <net_buf_id>
    51a0:	fb09 5000 	mla	r0, r9, r0, r5
    51a4:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    51a8:	4620      	mov	r0, r4
    51aa:	f013 fdef 	bl	18d8c <net_buf_id>
    51ae:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    51b2:	2103      	movs	r1, #3
    51b4:	f8c5 8004 	str.w	r8, [r5, #4]
    51b8:	4650      	mov	r0, sl
    51ba:	f01a fd86 	bl	1fcca <net_buf_simple_add>
	hdr->param_len = param_len;
    51be:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    51c0:	8006      	strh	r6, [r0, #0]
}
    51c2:	4620      	mov	r0, r4
    51c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    51c8:	20000844 	.word	0x20000844
    51cc:	20001518 	.word	0x20001518

000051d0 <bt_hci_cmd_send>:
{
    51d0:	b538      	push	{r3, r4, r5, lr}
    51d2:	4605      	mov	r5, r0
	if (!buf) {
    51d4:	460c      	mov	r4, r1
    51d6:	b919      	cbnz	r1, 51e0 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    51d8:	f7ff ffc0 	bl	515c <bt_hci_cmd_create>
		if (!buf) {
    51dc:	4604      	mov	r4, r0
    51de:	b1f0      	cbz	r0, 521e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    51e0:	f640 4335 	movw	r3, #3125	; 0xc35
    51e4:	429d      	cmp	r5, r3
    51e6:	d114      	bne.n	5212 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    51e8:	4620      	mov	r0, r4
    51ea:	f7ff fac3 	bl	4774 <bt_hci_ecc_send>
		if (err) {
    51ee:	4605      	mov	r5, r0
    51f0:	b168      	cbz	r0, 520e <bt_hci_cmd_send+0x3e>
    51f2:	4b0c      	ldr	r3, [pc, #48]	; (5224 <bt_hci_cmd_send+0x54>)
    51f4:	4a0c      	ldr	r2, [pc, #48]	; (5228 <bt_hci_cmd_send+0x58>)
    51f6:	1ad2      	subs	r2, r2, r3
    51f8:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    51fa:	0192      	lsls	r2, r2, #6
    51fc:	4601      	mov	r1, r0
    51fe:	f042 0201 	orr.w	r2, r2, #1
    5202:	480a      	ldr	r0, [pc, #40]	; (522c <bt_hci_cmd_send+0x5c>)
    5204:	f016 ff02 	bl	1c00c <log_1>
			net_buf_unref(buf);
    5208:	4620      	mov	r0, r4
    520a:	f013 fe75 	bl	18ef8 <net_buf_unref>
}
    520e:	4628      	mov	r0, r5
    5210:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5212:	4807      	ldr	r0, [pc, #28]	; (5230 <bt_hci_cmd_send+0x60>)
    5214:	4621      	mov	r1, r4
    5216:	f01a fd19 	bl	1fc4c <net_buf_put>
	return 0;
    521a:	2500      	movs	r5, #0
    521c:	e7f7      	b.n	520e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    521e:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5222:	e7f4      	b.n	520e <bt_hci_cmd_send+0x3e>
    5224:	00020e00 	.word	0x00020e00
    5228:	00020ee0 	.word	0x00020ee0
    522c:	00023482 	.word	0x00023482
    5230:	2000010c 	.word	0x2000010c

00005234 <le_ltk_request>:
{
    5234:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    5236:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5238:	882e      	ldrh	r6, [r5, #0]
    523a:	b2b7      	uxth	r7, r6
{
    523c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    523e:	4638      	mov	r0, r7
    5240:	f001 ffd2 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    5244:	4604      	mov	r4, r0
    5246:	b968      	cbnz	r0, 5264 <le_ltk_request+0x30>
    5248:	4b27      	ldr	r3, [pc, #156]	; (52e8 <le_ltk_request+0xb4>)
    524a:	4a28      	ldr	r2, [pc, #160]	; (52ec <le_ltk_request+0xb8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    524c:	4828      	ldr	r0, [pc, #160]	; (52f0 <le_ltk_request+0xbc>)
    524e:	1ad2      	subs	r2, r2, r3
    5250:	08d2      	lsrs	r2, r2, #3
    5252:	0192      	lsls	r2, r2, #6
    5254:	f042 0201 	orr.w	r2, r2, #1
    5258:	4639      	mov	r1, r7
}
    525a:	b007      	add	sp, #28
    525c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5260:	f016 bed4 	b.w	1c00c <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    5264:	af02      	add	r7, sp, #8
    5266:	f8d5 2002 	ldr.w	r2, [r5, #2]
    526a:	f8d5 3006 	ldr.w	r3, [r5, #6]
    526e:	9701      	str	r7, [sp, #4]
    5270:	8969      	ldrh	r1, [r5, #10]
    5272:	9100      	str	r1, [sp, #0]
    5274:	f01a fb39 	bl	1f8ea <bt_smp_request_ltk>
    5278:	b328      	cbz	r0, 52c6 <le_ltk_request+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    527a:	2112      	movs	r1, #18
    527c:	f242 001a 	movw	r0, #8218	; 0x201a
    5280:	f7ff ff6c 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    5284:	4605      	mov	r5, r0
    5286:	b970      	cbnz	r0, 52a6 <le_ltk_request+0x72>
    5288:	4918      	ldr	r1, [pc, #96]	; (52ec <le_ltk_request+0xb8>)
    528a:	4b17      	ldr	r3, [pc, #92]	; (52e8 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    528c:	4819      	ldr	r0, [pc, #100]	; (52f4 <le_ltk_request+0xc0>)
    528e:	1ac9      	subs	r1, r1, r3
    5290:	08c9      	lsrs	r1, r1, #3
    5292:	0189      	lsls	r1, r1, #6
    5294:	f041 0101 	orr.w	r1, r1, #1
    5298:	f016 feab 	bl	1bff2 <log_0>
	bt_conn_unref(conn);
    529c:	4620      	mov	r0, r4
    529e:	f019 f801 	bl	1e2a4 <bt_conn_unref>
}
    52a2:	b007      	add	sp, #28
    52a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52a6:	2112      	movs	r1, #18
    52a8:	3008      	adds	r0, #8
    52aa:	f01a fd0e 	bl	1fcca <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    52ae:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    52b0:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    52b4:	2210      	movs	r2, #16
    52b6:	f018 fba9 	bl	1da0c <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    52ba:	4629      	mov	r1, r5
    52bc:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    52c0:	f7ff ff86 	bl	51d0 <bt_hci_cmd_send>
    52c4:	e7ea      	b.n	529c <le_ltk_request+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    52c6:	2102      	movs	r1, #2
    52c8:	f242 001b 	movw	r0, #8219	; 0x201b
    52cc:	f7ff ff46 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    52d0:	4605      	mov	r5, r0
    52d2:	2800      	cmp	r0, #0
    52d4:	d0d8      	beq.n	5288 <le_ltk_request+0x54>
    52d6:	2102      	movs	r1, #2
    52d8:	3008      	adds	r0, #8
    52da:	f01a fcf6 	bl	1fcca <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    52de:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    52e0:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    52e2:	f242 001b 	movw	r0, #8219	; 0x201b
    52e6:	e7eb      	b.n	52c0 <le_ltk_request+0x8c>
    52e8:	00020e00 	.word	0x00020e00
    52ec:	00020ee0 	.word	0x00020ee0
    52f0:	0002333d 	.word	0x0002333d
    52f4:	000234f8 	.word	0x000234f8

000052f8 <le_conn_param_neg_reply>:
{
    52f8:	b570      	push	{r4, r5, r6, lr}
    52fa:	4606      	mov	r6, r0
    52fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    52fe:	f242 0021 	movw	r0, #8225	; 0x2021
    5302:	2103      	movs	r1, #3
    5304:	f7ff ff2a 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    5308:	4604      	mov	r4, r0
    530a:	b958      	cbnz	r0, 5324 <le_conn_param_neg_reply+0x2c>
    530c:	490c      	ldr	r1, [pc, #48]	; (5340 <le_conn_param_neg_reply+0x48>)
    530e:	4b0d      	ldr	r3, [pc, #52]	; (5344 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    5310:	480d      	ldr	r0, [pc, #52]	; (5348 <le_conn_param_neg_reply+0x50>)
    5312:	1ac9      	subs	r1, r1, r3
    5314:	08c9      	lsrs	r1, r1, #3
    5316:	0189      	lsls	r1, r1, #6
}
    5318:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    531c:	f041 0101 	orr.w	r1, r1, #1
    5320:	f016 be67 	b.w	1bff2 <log_0>
    5324:	2103      	movs	r1, #3
    5326:	3008      	adds	r0, #8
    5328:	f01a fccf 	bl	1fcca <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    532c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    532e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    5330:	4621      	mov	r1, r4
    5332:	f242 0021 	movw	r0, #8225	; 0x2021
}
    5336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    533a:	f7ff bf49 	b.w	51d0 <bt_hci_cmd_send>
    533e:	bf00      	nop
    5340:	00020ee0 	.word	0x00020ee0
    5344:	00020e00 	.word	0x00020e00
    5348:	0002350f 	.word	0x0002350f

0000534c <le_conn_param_req>:
{
    534c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    534e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5350:	78d9      	ldrb	r1, [r3, #3]
    5352:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    5354:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    5356:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    535a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    535e:	7959      	ldrb	r1, [r3, #5]
    5360:	791a      	ldrb	r2, [r3, #4]
    5362:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5366:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    536a:	799a      	ldrb	r2, [r3, #6]
    536c:	79d9      	ldrb	r1, [r3, #7]
    536e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5372:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5376:	7a1a      	ldrb	r2, [r3, #8]
    5378:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    537a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    537c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    5380:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    5382:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5386:	f001 ff2f 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    538a:	4606      	mov	r6, r0
    538c:	b980      	cbnz	r0, 53b0 <le_conn_param_req+0x64>
    538e:	4b20      	ldr	r3, [pc, #128]	; (5410 <le_conn_param_req+0xc4>)
    5390:	4a20      	ldr	r2, [pc, #128]	; (5414 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5392:	4821      	ldr	r0, [pc, #132]	; (5418 <le_conn_param_req+0xcc>)
    5394:	1ad2      	subs	r2, r2, r3
    5396:	08d2      	lsrs	r2, r2, #3
    5398:	0192      	lsls	r2, r2, #6
    539a:	4621      	mov	r1, r4
    539c:	f042 0201 	orr.w	r2, r2, #1
    53a0:	f016 fe34 	bl	1c00c <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    53a4:	2102      	movs	r1, #2
    53a6:	4620      	mov	r0, r4
    53a8:	f7ff ffa6 	bl	52f8 <le_conn_param_neg_reply>
}
    53ac:	b003      	add	sp, #12
    53ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    53b0:	4669      	mov	r1, sp
    53b2:	f002 f86b 	bl	748c <le_param_req>
    53b6:	b938      	cbnz	r0, 53c8 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    53b8:	211e      	movs	r1, #30
    53ba:	4620      	mov	r0, r4
    53bc:	f7ff ff9c 	bl	52f8 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    53c0:	4630      	mov	r0, r6
    53c2:	f018 ff6f 	bl	1e2a4 <bt_conn_unref>
    53c6:	e7f1      	b.n	53ac <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    53c8:	210e      	movs	r1, #14
    53ca:	f242 0020 	movw	r0, #8224	; 0x2020
    53ce:	f7ff fec5 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    53d2:	4605      	mov	r5, r0
    53d4:	2800      	cmp	r0, #0
    53d6:	d0f3      	beq.n	53c0 <le_conn_param_req+0x74>
    53d8:	210e      	movs	r1, #14
    53da:	3008      	adds	r0, #8
    53dc:	f01a fc75 	bl	1fcca <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    53e0:	220e      	movs	r2, #14
    53e2:	4604      	mov	r4, r0
    53e4:	2100      	movs	r1, #0
    53e6:	f018 fb1c 	bl	1da22 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    53ea:	f8bd 3000 	ldrh.w	r3, [sp]
    53ee:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    53f0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    53f4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    53f6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    53fa:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    53fc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    5400:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5402:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5404:	4629      	mov	r1, r5
    5406:	f242 0020 	movw	r0, #8224	; 0x2020
    540a:	f7ff fee1 	bl	51d0 <bt_hci_cmd_send>
    540e:	e7d7      	b.n	53c0 <le_conn_param_req+0x74>
    5410:	00020e00 	.word	0x00020e00
    5414:	00020ee0 	.word	0x00020ee0
    5418:	0002333d 	.word	0x0002333d

0000541c <conn_auto_initiate>:
{
    541c:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    541e:	7b43      	ldrb	r3, [r0, #13]
    5420:	2b07      	cmp	r3, #7
{
    5422:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    5424:	d121      	bne.n	546a <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5426:	f3bf 8f5b 	dmb	ish
    542a:	6843      	ldr	r3, [r0, #4]
    542c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    5430:	049a      	lsls	r2, r3, #18
    5432:	d41a      	bmi.n	546a <conn_auto_initiate+0x4e>
    5434:	78c3      	ldrb	r3, [r0, #3]
    5436:	b123      	cbz	r3, 5442 <conn_auto_initiate+0x26>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    5438:	4b0c      	ldr	r3, [pc, #48]	; (546c <conn_auto_initiate+0x50>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    543a:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    543e:	071b      	lsls	r3, r3, #28
    5440:	d513      	bpl.n	546a <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5442:	2102      	movs	r1, #2
    5444:	f242 0016 	movw	r0, #8214	; 0x2016
    5448:	f7ff fe88 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    544c:	4605      	mov	r5, r0
    544e:	b160      	cbz	r0, 546a <conn_auto_initiate+0x4e>
    5450:	2102      	movs	r1, #2
    5452:	3008      	adds	r0, #8
    5454:	f01a fc39 	bl	1fcca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5458:	8823      	ldrh	r3, [r4, #0]
    545a:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    545c:	4629      	mov	r1, r5
    545e:	f242 0016 	movw	r0, #8214	; 0x2016
}
    5462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5466:	f7ff beb3 	b.w	51d0 <bt_hci_cmd_send>
}
    546a:	bd38      	pop	{r3, r4, r5, pc}
    546c:	20000000 	.word	0x20000000

00005470 <le_remote_feat_complete>:
{
    5470:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5472:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5474:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    5478:	4630      	mov	r0, r6
    547a:	f001 feb5 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    547e:	4604      	mov	r4, r0
    5480:	b960      	cbnz	r0, 549c <le_remote_feat_complete+0x2c>
    5482:	4a14      	ldr	r2, [pc, #80]	; (54d4 <le_remote_feat_complete+0x64>)
    5484:	4b14      	ldr	r3, [pc, #80]	; (54d8 <le_remote_feat_complete+0x68>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5486:	4815      	ldr	r0, [pc, #84]	; (54dc <le_remote_feat_complete+0x6c>)
    5488:	1ad2      	subs	r2, r2, r3
    548a:	08d2      	lsrs	r2, r2, #3
    548c:	0192      	lsls	r2, r2, #6
    548e:	4631      	mov	r1, r6
    5490:	f042 0201 	orr.w	r2, r2, #1
}
    5494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5498:	f016 bdb8 	b.w	1c00c <log_1>
	if (!evt->status) {
    549c:	782b      	ldrb	r3, [r5, #0]
    549e:	b923      	cbnz	r3, 54aa <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    54a0:	2208      	movs	r2, #8
    54a2:	1ce9      	adds	r1, r5, #3
    54a4:	30ac      	adds	r0, #172	; 0xac
    54a6:	f018 fab1 	bl	1da0c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54aa:	f3bf 8f5b 	dmb	ish
    54ae:	1d23      	adds	r3, r4, #4
    54b0:	e853 2f00 	ldrex	r2, [r3]
    54b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    54b8:	e843 2100 	strex	r1, r2, [r3]
    54bc:	2900      	cmp	r1, #0
    54be:	d1f7      	bne.n	54b0 <le_remote_feat_complete+0x40>
    54c0:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
    54c4:	4620      	mov	r0, r4
    54c6:	f7ff ffa9 	bl	541c <conn_auto_initiate>
	bt_conn_unref(conn);
    54ca:	4620      	mov	r0, r4
}
    54cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    54d0:	f018 bee8 	b.w	1e2a4 <bt_conn_unref>
    54d4:	00020ee0 	.word	0x00020ee0
    54d8:	00020e00 	.word	0x00020e00
    54dc:	0002333d 	.word	0x0002333d

000054e0 <bt_hci_cmd_send_sync>:
{
    54e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    54e4:	4607      	mov	r7, r0
    54e6:	b086      	sub	sp, #24
    54e8:	4615      	mov	r5, r2
	if (!buf) {
    54ea:	460c      	mov	r4, r1
    54ec:	b921      	cbnz	r1, 54f8 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    54ee:	f7ff fe35 	bl	515c <bt_hci_cmd_create>
		if (!buf) {
    54f2:	4604      	mov	r4, r0
    54f4:	2800      	cmp	r0, #0
    54f6:	d057      	beq.n	55a8 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    54f8:	2201      	movs	r2, #1
    54fa:	2100      	movs	r1, #0
    54fc:	4668      	mov	r0, sp
    54fe:	f01a ff0b 	bl	20318 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    5502:	4620      	mov	r0, r4
    5504:	f013 fc42 	bl	18d8c <net_buf_id>
    5508:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 55b0 <bt_hci_cmd_send_sync+0xd0>
    550c:	230c      	movs	r3, #12
    550e:	fb03 8000 	mla	r0, r3, r0, r8
    5512:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
    5516:	4620      	mov	r0, r4
    5518:	f01a fba5 	bl	1fc66 <net_buf_ref>
    551c:	4601      	mov	r1, r0
    551e:	4825      	ldr	r0, [pc, #148]	; (55b4 <bt_hci_cmd_send_sync+0xd4>)
    5520:	f01a fb94 	bl	1fc4c <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    5524:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    5528:	2300      	movs	r3, #0
    552a:	4668      	mov	r0, sp
    552c:	f015 f8f2 	bl	1a714 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    5530:	4606      	mov	r6, r0
    5532:	b180      	cbz	r0, 5556 <bt_hci_cmd_send_sync+0x76>
    5534:	4a20      	ldr	r2, [pc, #128]	; (55b8 <bt_hci_cmd_send_sync+0xd8>)
    5536:	4921      	ldr	r1, [pc, #132]	; (55bc <bt_hci_cmd_send_sync+0xdc>)
    5538:	4821      	ldr	r0, [pc, #132]	; (55c0 <bt_hci_cmd_send_sync+0xe0>)
    553a:	f240 1331 	movw	r3, #305	; 0x131
    553e:	f016 f919 	bl	1b774 <printk>
    5542:	4820      	ldr	r0, [pc, #128]	; (55c4 <bt_hci_cmd_send_sync+0xe4>)
    5544:	4631      	mov	r1, r6
    5546:	f016 f915 	bl	1b774 <printk>
    554a:	4040      	eors	r0, r0
    554c:	f380 8811 	msr	BASEPRI, r0
    5550:	f04f 0003 	mov.w	r0, #3
    5554:	df02      	svc	2
	status = cmd(buf)->status;
    5556:	4620      	mov	r0, r4
    5558:	f013 fc18 	bl	18d8c <net_buf_id>
    555c:	230c      	movs	r3, #12
    555e:	4358      	muls	r0, r3
    5560:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    5564:	b1be      	cbz	r6, 5596 <bt_hci_cmd_send_sync+0xb6>
    5566:	4a18      	ldr	r2, [pc, #96]	; (55c8 <bt_hci_cmd_send_sync+0xe8>)
    5568:	4b18      	ldr	r3, [pc, #96]	; (55cc <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    556a:	4819      	ldr	r0, [pc, #100]	; (55d0 <bt_hci_cmd_send_sync+0xf0>)
    556c:	1a9b      	subs	r3, r3, r2
    556e:	08db      	lsrs	r3, r3, #3
    5570:	019b      	lsls	r3, r3, #6
    5572:	f043 0302 	orr.w	r3, r3, #2
    5576:	4632      	mov	r2, r6
    5578:	4639      	mov	r1, r7
    557a:	f016 fd5b 	bl	1c034 <log_2>
		net_buf_unref(buf);
    557e:	4620      	mov	r0, r4
    5580:	f013 fcba 	bl	18ef8 <net_buf_unref>
			return -EIO;
    5584:	2e09      	cmp	r6, #9
    5586:	bf0c      	ite	eq
    5588:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
    558c:	f06f 0004 	mvnne.w	r0, #4
}
    5590:	b006      	add	sp, #24
    5592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    5596:	b115      	cbz	r5, 559e <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    5598:	602c      	str	r4, [r5, #0]
	return 0;
    559a:	4630      	mov	r0, r6
    559c:	e7f8      	b.n	5590 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    559e:	4620      	mov	r0, r4
    55a0:	f013 fcaa 	bl	18ef8 <net_buf_unref>
	return 0;
    55a4:	4628      	mov	r0, r5
    55a6:	e7f3      	b.n	5590 <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    55a8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    55ac:	e7f0      	b.n	5590 <bt_hci_cmd_send_sync+0xb0>
    55ae:	bf00      	nop
    55b0:	20001518 	.word	0x20001518
    55b4:	2000010c 	.word	0x2000010c
    55b8:	0002340d 	.word	0x0002340d
    55bc:	00023441 	.word	0x00023441
    55c0:	0002344a 	.word	0x0002344a
    55c4:	00023529 	.word	0x00023529
    55c8:	00020e00 	.word	0x00020e00
    55cc:	00020ee0 	.word	0x00020ee0
    55d0:	00023549 	.word	0x00023549

000055d4 <bt_get_phy>:
	switch (hci_phy) {
    55d4:	3801      	subs	r0, #1
    55d6:	b2c0      	uxtb	r0, r0
    55d8:	2802      	cmp	r0, #2
    55da:	bf9a      	itte	ls
    55dc:	4b01      	ldrls	r3, [pc, #4]	; (55e4 <bt_get_phy+0x10>)
    55de:	5c18      	ldrbls	r0, [r3, r0]
{
    55e0:	2000      	movhi	r0, #0
}
    55e2:	4770      	bx	lr
    55e4:	00023888 	.word	0x00023888

000055e8 <le_phy_update_complete>:
{
    55e8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    55ea:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    55ec:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    55f0:	4630      	mov	r0, r6
    55f2:	f001 fdf9 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    55f6:	4604      	mov	r4, r0
    55f8:	b960      	cbnz	r0, 5614 <le_phy_update_complete+0x2c>
    55fa:	4a0f      	ldr	r2, [pc, #60]	; (5638 <le_phy_update_complete+0x50>)
    55fc:	4b0f      	ldr	r3, [pc, #60]	; (563c <le_phy_update_complete+0x54>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    55fe:	4810      	ldr	r0, [pc, #64]	; (5640 <le_phy_update_complete+0x58>)
    5600:	1ad2      	subs	r2, r2, r3
    5602:	08d2      	lsrs	r2, r2, #3
    5604:	0192      	lsls	r2, r2, #6
    5606:	4631      	mov	r1, r6
    5608:	f042 0201 	orr.w	r2, r2, #1
}
    560c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    5610:	f016 bcfc 	b.w	1c00c <log_1>
	conn->le.phy.tx_phy = bt_get_phy(evt->tx_phy);
    5614:	78e8      	ldrb	r0, [r5, #3]
    5616:	f7ff ffdd 	bl	55d4 <bt_get_phy>
    561a:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
	conn->le.phy.rx_phy = bt_get_phy(evt->rx_phy);
    561e:	7928      	ldrb	r0, [r5, #4]
    5620:	f7ff ffd8 	bl	55d4 <bt_get_phy>
    5624:	f884 00b9 	strb.w	r0, [r4, #185]	; 0xb9
	notify_le_phy_updated(conn);
    5628:	4620      	mov	r0, r4
    562a:	f001 ff1d 	bl	7468 <notify_le_phy_updated>
	bt_conn_unref(conn);
    562e:	4620      	mov	r0, r4
}
    5630:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    5634:	f018 be36 	b.w	1e2a4 <bt_conn_unref>
    5638:	00020ee0 	.word	0x00020ee0
    563c:	00020e00 	.word	0x00020e00
    5640:	0002333d 	.word	0x0002333d

00005644 <bt_hci_le_enh_conn_complete>:
{
    5644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5648:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
    564c:	4a85      	ldr	r2, [pc, #532]	; (5864 <bt_hci_le_enh_conn_complete+0x220>)
	handle |= ~BT_ACL_HANDLE_MASK;
    564e:	ea6f 5309 	mvn.w	r3, r9, lsl #20
		if (disconnected_handles[i] == handle) {
    5652:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
    5654:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
    5658:	b29b      	uxth	r3, r3
    565a:	4299      	cmp	r1, r3
{
    565c:	4605      	mov	r5, r0
    565e:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
    5662:	bf08      	it	eq
    5664:	f8a2 8000 	strheq.w	r8, [r2]
{
    5668:	b085      	sub	sp, #20
			return true;
    566a:	bf08      	it	eq
    566c:	f04f 0801 	moveq.w	r8, #1
	bt_id_pending_keys_update();
    5670:	f000 fc70 	bl	5f54 <bt_id_pending_keys_update>
	if (evt->status) {
    5674:	782c      	ldrb	r4, [r5, #0]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    5676:	fa1f f789 	uxth.w	r7, r9
	if (evt->status) {
    567a:	2c00      	cmp	r4, #0
    567c:	d03a      	beq.n	56f4 <bt_hci_le_enh_conn_complete+0xb0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    567e:	2c3c      	cmp	r4, #60	; 0x3c
    5680:	d12a      	bne.n	56d8 <bt_hci_le_enh_conn_complete+0x94>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    5682:	f001 f8bf 	bl	6804 <bt_le_adv_lookup_legacy>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5686:	f3bf 8f5b 	dmb	ish
    568a:	3010      	adds	r0, #16
    568c:	e850 3f00 	ldrex	r3, [r0]
    5690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    5694:	e840 3200 	strex	r2, r3, [r0]
    5698:	2a00      	cmp	r2, #0
    569a:	d1f7      	bne.n	568c <bt_hci_le_enh_conn_complete+0x48>
    569c:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    56a0:	2000      	movs	r0, #0
    56a2:	f7ff fa6b 	bl	4b7c <find_pending_connect.part.0>
		if (!conn) {
    56a6:	4605      	mov	r5, r0
    56a8:	b960      	cbnz	r0, 56c4 <bt_hci_le_enh_conn_complete+0x80>
    56aa:	4b6f      	ldr	r3, [pc, #444]	; (5868 <bt_hci_le_enh_conn_complete+0x224>)
    56ac:	496f      	ldr	r1, [pc, #444]	; (586c <bt_hci_le_enh_conn_complete+0x228>)
			BT_ERR("No pending slave connection");
    56ae:	4870      	ldr	r0, [pc, #448]	; (5870 <bt_hci_le_enh_conn_complete+0x22c>)
    56b0:	1ac9      	subs	r1, r1, r3
    56b2:	08c9      	lsrs	r1, r1, #3
    56b4:	0189      	lsls	r1, r1, #6
    56b6:	f041 0101 	orr.w	r1, r1, #1
}
    56ba:	b005      	add	sp, #20
    56bc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("No pending slave connection");
    56c0:	f016 bc97 	b.w	1bff2 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    56c4:	7304      	strb	r4, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    56c6:	2100      	movs	r1, #0
    56c8:	f001 fd96 	bl	71f8 <bt_conn_set_state>
		bt_conn_unref(conn);
    56cc:	4628      	mov	r0, r5
}
    56ce:	b005      	add	sp, #20
    56d0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		bt_conn_unref(conn);
    56d4:	f018 bde6 	b.w	1e2a4 <bt_conn_unref>
    56d8:	4b63      	ldr	r3, [pc, #396]	; (5868 <bt_hci_le_enh_conn_complete+0x224>)
    56da:	4a64      	ldr	r2, [pc, #400]	; (586c <bt_hci_le_enh_conn_complete+0x228>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    56dc:	4865      	ldr	r0, [pc, #404]	; (5874 <bt_hci_le_enh_conn_complete+0x230>)
    56de:	1ad2      	subs	r2, r2, r3
    56e0:	08d2      	lsrs	r2, r2, #3
    56e2:	0192      	lsls	r2, r2, #6
    56e4:	f042 0202 	orr.w	r2, r2, #2
    56e8:	4621      	mov	r1, r4
}
    56ea:	b005      	add	sp, #20
    56ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    56f0:	f016 bc8c 	b.w	1c00c <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    56f4:	792b      	ldrb	r3, [r5, #4]
    56f6:	3b02      	subs	r3, #2
    56f8:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    56fa:	f105 0604 	add.w	r6, r5, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    56fe:	d845      	bhi.n	578c <bt_hci_le_enh_conn_complete+0x148>
	memcpy(dst, src, sizeof(*dst));
    5700:	2207      	movs	r2, #7
    5702:	4631      	mov	r1, r6
    5704:	a802      	add	r0, sp, #8
    5706:	f018 f981 	bl	1da0c <memcpy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    570a:	f89d 3008 	ldrb.w	r3, [sp, #8]
	memcpy(dst, src, sizeof(*dst));
    570e:	2206      	movs	r2, #6
    5710:	3b02      	subs	r3, #2
    5712:	f105 0111 	add.w	r1, r5, #17
    5716:	f10d 0001 	add.w	r0, sp, #1
    571a:	f88d 3008 	strb.w	r3, [sp, #8]
    571e:	f018 f975 	bl	1da0c <memcpy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    5722:	2301      	movs	r3, #1
    5724:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    5728:	78eb      	ldrb	r3, [r5, #3]
    572a:	2b01      	cmp	r3, #1
    572c:	d116      	bne.n	575c <bt_hci_le_enh_conn_complete+0x118>
    572e:	a802      	add	r0, sp, #8
    5730:	f7ff fa24 	bl	4b7c <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5734:	78eb      	ldrb	r3, [r5, #3]
    5736:	2b01      	cmp	r3, #1
    5738:	4604      	mov	r4, r0
    573a:	d10e      	bne.n	575a <bt_hci_le_enh_conn_complete+0x116>
		struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    573c:	f001 f862 	bl	6804 <bt_le_adv_lookup_legacy>
    5740:	f3bf 8f5b 	dmb	ish
    5744:	3010      	adds	r0, #16
    5746:	e850 3f00 	ldrex	r3, [r0]
    574a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    574e:	e840 3200 	strex	r2, r3, [r0]
    5752:	2a00      	cmp	r2, #0
    5754:	d1f7      	bne.n	5746 <bt_hci_le_enh_conn_complete+0x102>
    5756:	f3bf 8f5b 	dmb	ish
	if (!conn) {
    575a:	bb64      	cbnz	r4, 57b6 <bt_hci_le_enh_conn_complete+0x172>
    575c:	4a42      	ldr	r2, [pc, #264]	; (5868 <bt_hci_le_enh_conn_complete+0x224>)
    575e:	4c43      	ldr	r4, [pc, #268]	; (586c <bt_hci_le_enh_conn_complete+0x228>)
		BT_ERR("No pending conn for peer %s",
    5760:	4630      	mov	r0, r6
    5762:	1aa4      	subs	r4, r4, r2
    5764:	f7fe fe90 	bl	4488 <bt_addr_le_str_real>
    5768:	f7fc ffca 	bl	2700 <z_log_strdup>
    576c:	08e4      	lsrs	r4, r4, #3
    576e:	01a4      	lsls	r4, r4, #6
    5770:	f044 0401 	orr.w	r4, r4, #1
    5774:	4601      	mov	r1, r0
    5776:	4622      	mov	r2, r4
    5778:	483f      	ldr	r0, [pc, #252]	; (5878 <bt_hci_le_enh_conn_complete+0x234>)
    577a:	f016 fc47 	bl	1c00c <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    577e:	211f      	movs	r1, #31
    5780:	4638      	mov	r0, r7
    5782:	f018 fa92 	bl	1dcaa <bt_hci_disconnect>
}
    5786:	b005      	add	sp, #20
    5788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    578c:	78eb      	ldrb	r3, [r5, #3]
    578e:	2b01      	cmp	r3, #1
    5790:	bf04      	itt	eq
    5792:	4b3a      	ldreq	r3, [pc, #232]	; (587c <bt_hci_le_enh_conn_complete+0x238>)
    5794:	f893 4033 	ldrbeq.w	r4, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    5798:	4631      	mov	r1, r6
    579a:	4620      	mov	r0, r4
    579c:	f018 fbfc 	bl	1df98 <bt_lookup_id_addr>
	memcpy(dst, src, sizeof(*dst));
    57a0:	2207      	movs	r2, #7
    57a2:	4601      	mov	r1, r0
    57a4:	a802      	add	r0, sp, #8
    57a6:	f018 f931 	bl	1da0c <memcpy>
    57aa:	2207      	movs	r2, #7
    57ac:	4631      	mov	r1, r6
    57ae:	4668      	mov	r0, sp
    57b0:	f018 f92c 	bl	1da0c <memcpy>
}
    57b4:	e7b8      	b.n	5728 <bt_hci_le_enh_conn_complete+0xe4>
	conn->handle = handle;
    57b6:	4620      	mov	r0, r4
	memcpy(dst, src, sizeof(*dst));
    57b8:	2207      	movs	r2, #7
    57ba:	f820 9b88 	strh.w	r9, [r0], #136
    57be:	a902      	add	r1, sp, #8
    57c0:	f018 f924 	bl	1da0c <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    57c4:	7e2a      	ldrb	r2, [r5, #24]
    57c6:	7deb      	ldrb	r3, [r5, #23]
    57c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    57cc:	f8a4 309e 	strh.w	r3, [r4, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    57d0:	7eaa      	ldrb	r2, [r5, #26]
    57d2:	7e6b      	ldrb	r3, [r5, #25]
    57d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    57d8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    57dc:	7f2a      	ldrb	r2, [r5, #28]
    57de:	7eeb      	ldrb	r3, [r5, #27]
    57e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    57e4:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->err = 0U;
    57e8:	2200      	movs	r2, #0
	conn->role = evt->role;
    57ea:	78eb      	ldrb	r3, [r5, #3]
	conn->err = 0U;
    57ec:	7322      	strb	r2, [r4, #12]
	conn->le.phy.tx_phy = BT_GAP_LE_PHY_1M;
    57ee:	4a24      	ldr	r2, [pc, #144]	; (5880 <bt_hci_le_enh_conn_complete+0x23c>)
    57f0:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
	conn->le.data_len.tx_max_time = BT_GAP_DATA_TIME_DEFAULT;
    57f4:	3247      	adds	r2, #71	; 0x47
    57f6:	f8c4 20bc 	str.w	r2, [r4, #188]	; 0xbc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    57fa:	2b01      	cmp	r3, #1
	conn->le.data_len.rx_max_time = BT_GAP_DATA_TIME_DEFAULT;
    57fc:	f44f 72a4 	mov.w	r2, #328	; 0x148
	conn->role = evt->role;
    5800:	70e3      	strb	r3, [r4, #3]
	conn->le.data_len.rx_max_time = BT_GAP_DATA_TIME_DEFAULT;
    5802:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    5806:	d117      	bne.n	5838 <bt_hci_le_enh_conn_complete+0x1f4>
    5808:	2207      	movs	r2, #7
    580a:	4669      	mov	r1, sp
    580c:	f104 008f 	add.w	r0, r4, #143	; 0x8f
    5810:	f018 f8fc 	bl	1da0c <memcpy>
			struct bt_le_ext_adv *adv = bt_le_adv_lookup_legacy();
    5814:	f000 fff6 	bl	6804 <bt_le_adv_lookup_legacy>
						&bt_dev.id_addr[conn->id]);
    5818:	7a21      	ldrb	r1, [r4, #8]
    581a:	4d18      	ldr	r5, [pc, #96]	; (587c <bt_hci_le_enh_conn_complete+0x238>)
    581c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    5820:	2207      	movs	r2, #7
    5822:	4429      	add	r1, r5
    5824:	f104 0096 	add.w	r0, r4, #150	; 0x96
    5828:	f018 f8f0 	bl	1da0c <memcpy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    582c:	f8d5 30ac 	ldr.w	r3, [r5, #172]	; 0xac
    5830:	065b      	lsls	r3, r3, #25
    5832:	d501      	bpl.n	5838 <bt_hci_le_enh_conn_complete+0x1f4>
			bt_le_adv_resume();
    5834:	f001 f92a 	bl	6a8c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5838:	2107      	movs	r1, #7
    583a:	4620      	mov	r0, r4
    583c:	f001 fcdc 	bl	71f8 <bt_conn_set_state>
	if (is_disconnected) {
    5840:	f1b8 0f00 	cmp.w	r8, #0
    5844:	d003      	beq.n	584e <bt_hci_le_enh_conn_complete+0x20a>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    5846:	2101      	movs	r1, #1
    5848:	4620      	mov	r0, r4
    584a:	f001 fcd5 	bl	71f8 <bt_conn_set_state>
	bt_conn_connected(conn);
    584e:	4620      	mov	r0, r4
    5850:	f018 fd64 	bl	1e31c <bt_conn_connected>
	conn_auto_initiate(conn);
    5854:	4620      	mov	r0, r4
    5856:	f7ff fde1 	bl	541c <conn_auto_initiate>
	bt_conn_unref(conn);
    585a:	4620      	mov	r0, r4
    585c:	f018 fd22 	bl	1e2a4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    5860:	e791      	b.n	5786 <bt_hci_le_enh_conn_complete+0x142>
    5862:	bf00      	nop
    5864:	200028e8 	.word	0x200028e8
    5868:	00020e00 	.word	0x00020e00
    586c:	00020ee0 	.word	0x00020ee0
    5870:	00023565 	.word	0x00023565
    5874:	00023581 	.word	0x00023581
    5878:	0002359a 	.word	0x0002359a
    587c:	20000000 	.word	0x20000000
    5880:	001b0101 	.word	0x001b0101

00005884 <bt_security_err_get>:
	switch (hci_err) {
    5884:	2829      	cmp	r0, #41	; 0x29
    5886:	bf9a      	itte	ls
    5888:	4b01      	ldrls	r3, [pc, #4]	; (5890 <bt_security_err_get+0xc>)
    588a:	5c18      	ldrbls	r0, [r3, r0]
{
    588c:	2008      	movhi	r0, #8
}
    588e:	4770      	bx	lr
    5890:	0002388b 	.word	0x0002388b

00005894 <hci_encrypt_key_refresh_complete>:
{
    5894:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    5896:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    5898:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    589c:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    589e:	4630      	mov	r0, r6
    58a0:	f001 fca2 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    58a4:	4604      	mov	r4, r0
    58a6:	b960      	cbnz	r0, 58c2 <hci_encrypt_key_refresh_complete+0x2e>
    58a8:	4a1f      	ldr	r2, [pc, #124]	; (5928 <hci_encrypt_key_refresh_complete+0x94>)
    58aa:	4b20      	ldr	r3, [pc, #128]	; (592c <hci_encrypt_key_refresh_complete+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    58ac:	4820      	ldr	r0, [pc, #128]	; (5930 <hci_encrypt_key_refresh_complete+0x9c>)
    58ae:	1ad2      	subs	r2, r2, r3
    58b0:	08d2      	lsrs	r2, r2, #3
    58b2:	0192      	lsls	r2, r2, #6
    58b4:	4631      	mov	r1, r6
    58b6:	f042 0201 	orr.w	r2, r2, #1
}
    58ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    58be:	f016 bba5 	b.w	1c00c <log_1>
	if (status) {
    58c2:	b165      	cbz	r5, 58de <hci_encrypt_key_refresh_complete+0x4a>
		bt_conn_security_changed(conn, status,
    58c4:	4628      	mov	r0, r5
    58c6:	f7ff ffdd 	bl	5884 <bt_security_err_get>
    58ca:	4629      	mov	r1, r5
    58cc:	4602      	mov	r2, r0
    58ce:	4620      	mov	r0, r4
    58d0:	f001 fe16 	bl	7500 <bt_conn_security_changed>
	bt_conn_unref(conn);
    58d4:	4620      	mov	r0, r4
}
    58d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    58da:	f018 bce3 	b.w	1e2a4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    58de:	7883      	ldrb	r3, [r0, #2]
    58e0:	2b01      	cmp	r3, #1
    58e2:	d107      	bne.n	58f4 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    58e4:	f005 fdb6 	bl	b454 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    58e8:	4620      	mov	r0, r4
    58ea:	f018 f9b6 	bl	1dc5a <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    58ee:	2800      	cmp	r0, #0
    58f0:	bf08      	it	eq
    58f2:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    58f4:	4628      	mov	r0, r5
    58f6:	f7ff ffc5 	bl	5884 <bt_security_err_get>
    58fa:	4629      	mov	r1, r5
    58fc:	4602      	mov	r2, r0
    58fe:	4620      	mov	r0, r4
    5900:	f001 fdfe 	bl	7500 <bt_conn_security_changed>
	if (status) {
    5904:	2d00      	cmp	r5, #0
    5906:	d0e5      	beq.n	58d4 <hci_encrypt_key_refresh_complete+0x40>
    5908:	4b08      	ldr	r3, [pc, #32]	; (592c <hci_encrypt_key_refresh_complete+0x98>)
    590a:	4907      	ldr	r1, [pc, #28]	; (5928 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Failed to set required security level");
    590c:	4809      	ldr	r0, [pc, #36]	; (5934 <hci_encrypt_key_refresh_complete+0xa0>)
    590e:	1ac9      	subs	r1, r1, r3
    5910:	08c9      	lsrs	r1, r1, #3
    5912:	0189      	lsls	r1, r1, #6
    5914:	f041 0101 	orr.w	r1, r1, #1
    5918:	f016 fb6b 	bl	1bff2 <log_0>
		bt_conn_disconnect(conn, status);
    591c:	4629      	mov	r1, r5
    591e:	4620      	mov	r0, r4
    5920:	f018 fd05 	bl	1e32e <bt_conn_disconnect>
    5924:	e7d6      	b.n	58d4 <hci_encrypt_key_refresh_complete+0x40>
    5926:	bf00      	nop
    5928:	00020ee0 	.word	0x00020ee0
    592c:	00020e00 	.word	0x00020e00
    5930:	000232d1 	.word	0x000232d1
    5934:	000235b6 	.word	0x000235b6

00005938 <hci_encrypt_change>:
{
    5938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    593a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    593c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    5940:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    5942:	4638      	mov	r0, r7
    5944:	f001 fc50 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    5948:	4604      	mov	r4, r0
    594a:	b960      	cbnz	r0, 5966 <hci_encrypt_change+0x2e>
    594c:	4b20      	ldr	r3, [pc, #128]	; (59d0 <hci_encrypt_change+0x98>)
    594e:	4a21      	ldr	r2, [pc, #132]	; (59d4 <hci_encrypt_change+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    5950:	4821      	ldr	r0, [pc, #132]	; (59d8 <hci_encrypt_change+0xa0>)
    5952:	1ad2      	subs	r2, r2, r3
    5954:	08d2      	lsrs	r2, r2, #3
    5956:	0192      	lsls	r2, r2, #6
    5958:	4639      	mov	r1, r7
    595a:	f042 0201 	orr.w	r2, r2, #1
}
    595e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    5962:	f016 bb53 	b.w	1c00c <log_1>
	if (status) {
    5966:	b165      	cbz	r5, 5982 <hci_encrypt_change+0x4a>
		bt_conn_security_changed(conn, status,
    5968:	4628      	mov	r0, r5
    596a:	f7ff ff8b 	bl	5884 <bt_security_err_get>
    596e:	4629      	mov	r1, r5
    5970:	4602      	mov	r2, r0
    5972:	4620      	mov	r0, r4
    5974:	f001 fdc4 	bl	7500 <bt_conn_security_changed>
	bt_conn_unref(conn);
    5978:	4620      	mov	r0, r4
}
    597a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    597e:	f018 bc91 	b.w	1e2a4 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    5982:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    5984:	78f3      	ldrb	r3, [r6, #3]
    5986:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    5988:	2a01      	cmp	r2, #1
    598a:	d108      	bne.n	599e <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    598c:	b10b      	cbz	r3, 5992 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    598e:	f005 fd61 	bl	b454 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    5992:	4620      	mov	r0, r4
    5994:	f018 f961 	bl	1dc5a <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    5998:	2800      	cmp	r0, #0
    599a:	bf08      	it	eq
    599c:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    599e:	4628      	mov	r0, r5
    59a0:	f7ff ff70 	bl	5884 <bt_security_err_get>
    59a4:	4629      	mov	r1, r5
    59a6:	4602      	mov	r2, r0
    59a8:	4620      	mov	r0, r4
    59aa:	f001 fda9 	bl	7500 <bt_conn_security_changed>
	if (status) {
    59ae:	2d00      	cmp	r5, #0
    59b0:	d0e2      	beq.n	5978 <hci_encrypt_change+0x40>
    59b2:	4b07      	ldr	r3, [pc, #28]	; (59d0 <hci_encrypt_change+0x98>)
    59b4:	4907      	ldr	r1, [pc, #28]	; (59d4 <hci_encrypt_change+0x9c>)
		BT_ERR("Failed to set required security level");
    59b6:	4809      	ldr	r0, [pc, #36]	; (59dc <hci_encrypt_change+0xa4>)
    59b8:	1ac9      	subs	r1, r1, r3
    59ba:	08c9      	lsrs	r1, r1, #3
    59bc:	0189      	lsls	r1, r1, #6
    59be:	f041 0101 	orr.w	r1, r1, #1
    59c2:	f016 fb16 	bl	1bff2 <log_0>
		bt_conn_disconnect(conn, status);
    59c6:	4629      	mov	r1, r5
    59c8:	4620      	mov	r0, r4
    59ca:	f018 fcb0 	bl	1e32e <bt_conn_disconnect>
    59ce:	e7d3      	b.n	5978 <hci_encrypt_change+0x40>
    59d0:	00020e00 	.word	0x00020e00
    59d4:	00020ee0 	.word	0x00020ee0
    59d8:	000232d1 	.word	0x000232d1
    59dc:	000235b6 	.word	0x000235b6

000059e0 <hci_event_prio>:
{
    59e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    59e4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    59e6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    59ea:	4630      	mov	r0, r6
    59ec:	f01a f9a4 	bl	1fd38 <net_buf_simple_headroom>
	state->len = buf->len;
    59f0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    59f4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    59f8:	4605      	mov	r5, r0
    59fa:	d80c      	bhi.n	5a16 <hci_event_prio+0x36>
    59fc:	4a1c      	ldr	r2, [pc, #112]	; (5a70 <hci_event_prio+0x90>)
    59fe:	491d      	ldr	r1, [pc, #116]	; (5a74 <hci_event_prio+0x94>)
    5a00:	481d      	ldr	r0, [pc, #116]	; (5a78 <hci_event_prio+0x98>)
    5a02:	f640 5306 	movw	r3, #3334	; 0xd06
    5a06:	f015 feb5 	bl	1b774 <printk>
    5a0a:	4040      	eors	r0, r0
    5a0c:	f380 8811 	msr	BASEPRI, r0
    5a10:	f04f 0003 	mov.w	r0, #3
    5a14:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    5a16:	4630      	mov	r0, r6
    5a18:	2102      	movs	r1, #2
    5a1a:	f01a f97d 	bl	1fd18 <net_buf_simple_pull_mem>
    5a1e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5a20:	7800      	ldrb	r0, [r0, #0]
    5a22:	f018 f908 	bl	1dc36 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5a26:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    5a28:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    5a2a:	d40c      	bmi.n	5a46 <hci_event_prio+0x66>
    5a2c:	4a10      	ldr	r2, [pc, #64]	; (5a70 <hci_event_prio+0x90>)
    5a2e:	4913      	ldr	r1, [pc, #76]	; (5a7c <hci_event_prio+0x9c>)
    5a30:	4811      	ldr	r0, [pc, #68]	; (5a78 <hci_event_prio+0x98>)
    5a32:	f640 530a 	movw	r3, #3338	; 0xd0a
    5a36:	f015 fe9d 	bl	1b774 <printk>
    5a3a:	4040      	eors	r0, r0
    5a3c:	f380 8811 	msr	BASEPRI, r0
    5a40:	f04f 0003 	mov.w	r0, #3
    5a44:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    5a46:	2305      	movs	r3, #5
    5a48:	4a0d      	ldr	r2, [pc, #52]	; (5a80 <hci_event_prio+0xa0>)
    5a4a:	7838      	ldrb	r0, [r7, #0]
    5a4c:	4621      	mov	r1, r4
    5a4e:	f7ff f8b5 	bl	4bbc <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    5a52:	07b3      	lsls	r3, r6, #30
    5a54:	d507      	bpl.n	5a66 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    5a56:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    5a58:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    5a5c:	fa10 f585 	uxtah	r5, r0, r5
    5a60:	60a5      	str	r5, [r4, #8]
}
    5a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    5a66:	4620      	mov	r0, r4
}
    5a68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    5a6c:	f013 ba44 	b.w	18ef8 <net_buf_unref>
    5a70:	0002340d 	.word	0x0002340d
    5a74:	000235dc 	.word	0x000235dc
    5a78:	0002344a 	.word	0x0002344a
    5a7c:	000235f5 	.word	0x000235f5
    5a80:	000214d8 	.word	0x000214d8

00005a84 <bt_recv>:
{
    5a84:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    5a86:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    5a88:	2901      	cmp	r1, #1
{
    5a8a:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    5a8c:	d04b      	beq.n	5b26 <bt_recv+0xa2>
    5a8e:	2903      	cmp	r1, #3
    5a90:	d178      	bne.n	5b84 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5a92:	8983      	ldrh	r3, [r0, #12]
    5a94:	2b03      	cmp	r3, #3
    5a96:	d80c      	bhi.n	5ab2 <bt_recv+0x2e>
    5a98:	4a42      	ldr	r2, [pc, #264]	; (5ba4 <bt_recv+0x120>)
    5a9a:	4943      	ldr	r1, [pc, #268]	; (5ba8 <bt_recv+0x124>)
    5a9c:	4843      	ldr	r0, [pc, #268]	; (5bac <bt_recv+0x128>)
    5a9e:	f240 1377 	movw	r3, #375	; 0x177
    5aa2:	f015 fe67 	bl	1b774 <printk>
    5aa6:	4040      	eors	r0, r0
    5aa8:	f380 8811 	msr	BASEPRI, r0
    5aac:	f04f 0003 	mov.w	r0, #3
    5ab0:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    5ab2:	2104      	movs	r1, #4
    5ab4:	f104 0008 	add.w	r0, r4, #8
    5ab8:	f01a f92e 	bl	1fd18 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    5abc:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    5abe:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    5ac0:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5ac2:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    5ac4:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    5ac8:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    5aca:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    5acc:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    5ace:	d00d      	beq.n	5aec <bt_recv+0x68>
    5ad0:	4837      	ldr	r0, [pc, #220]	; (5bb0 <bt_recv+0x12c>)
    5ad2:	4b38      	ldr	r3, [pc, #224]	; (5bb4 <bt_recv+0x130>)
    5ad4:	1a1b      	subs	r3, r3, r0
    5ad6:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    5ad8:	019b      	lsls	r3, r3, #6
    5ada:	4837      	ldr	r0, [pc, #220]	; (5bb8 <bt_recv+0x134>)
    5adc:	f043 0301 	orr.w	r3, r3, #1
    5ae0:	f016 faa8 	bl	1c034 <log_2>
	net_buf_unref(buf);
    5ae4:	4620      	mov	r0, r4
    5ae6:	f013 fa07 	bl	18ef8 <net_buf_unref>
    5aea:	e01a      	b.n	5b22 <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    5aec:	f001 fb7c 	bl	71e8 <bt_conn_lookup_handle>
	if (!conn) {
    5af0:	4605      	mov	r5, r0
    5af2:	b958      	cbnz	r0, 5b0c <bt_recv+0x88>
    5af4:	4b2e      	ldr	r3, [pc, #184]	; (5bb0 <bt_recv+0x12c>)
    5af6:	4a2f      	ldr	r2, [pc, #188]	; (5bb4 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    5af8:	8ae1      	ldrh	r1, [r4, #22]
    5afa:	4830      	ldr	r0, [pc, #192]	; (5bbc <bt_recv+0x138>)
    5afc:	1ad2      	subs	r2, r2, r3
    5afe:	08d2      	lsrs	r2, r2, #3
    5b00:	0192      	lsls	r2, r2, #6
    5b02:	f042 0201 	orr.w	r2, r2, #1
    5b06:	f016 fa81 	bl	1c00c <log_1>
		net_buf_unref(buf);
    5b0a:	e7eb      	b.n	5ae4 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    5b0c:	f001 fc5e 	bl	73cc <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    5b10:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    5b12:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    5b14:	4621      	mov	r1, r4
    5b16:	4628      	mov	r0, r5
    5b18:	f001 fa46 	bl	6fa8 <bt_conn_recv>
	bt_conn_unref(conn);
    5b1c:	4628      	mov	r0, r5
    5b1e:	f018 fbc1 	bl	1e2a4 <bt_conn_unref>
		return 0;
    5b22:	2000      	movs	r0, #0
}
    5b24:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5b26:	8983      	ldrh	r3, [r0, #12]
    5b28:	2b01      	cmp	r3, #1
    5b2a:	d80c      	bhi.n	5b46 <bt_recv+0xc2>
    5b2c:	4a1d      	ldr	r2, [pc, #116]	; (5ba4 <bt_recv+0x120>)
    5b2e:	491e      	ldr	r1, [pc, #120]	; (5ba8 <bt_recv+0x124>)
    5b30:	481e      	ldr	r0, [pc, #120]	; (5bac <bt_recv+0x128>)
    5b32:	f640 1303 	movw	r3, #2307	; 0x903
    5b36:	f015 fe1d 	bl	1b774 <printk>
    5b3a:	4040      	eors	r0, r0
    5b3c:	f380 8811 	msr	BASEPRI, r0
    5b40:	f04f 0003 	mov.w	r0, #3
    5b44:	df02      	svc	2
    5b46:	2102      	movs	r1, #2
    5b48:	f104 0008 	add.w	r0, r4, #8
    5b4c:	f01a f8e4 	bl	1fd18 <net_buf_simple_pull_mem>
    5b50:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    5b52:	7800      	ldrb	r0, [r0, #0]
    5b54:	f018 f86f 	bl	1dc36 <bt_hci_evt_get_flags>
    5b58:	0783      	lsls	r3, r0, #30
    5b5a:	d40c      	bmi.n	5b76 <bt_recv+0xf2>
    5b5c:	4a11      	ldr	r2, [pc, #68]	; (5ba4 <bt_recv+0x120>)
    5b5e:	4918      	ldr	r1, [pc, #96]	; (5bc0 <bt_recv+0x13c>)
    5b60:	4812      	ldr	r0, [pc, #72]	; (5bac <bt_recv+0x128>)
    5b62:	f640 1307 	movw	r3, #2311	; 0x907
    5b66:	f015 fe05 	bl	1b774 <printk>
    5b6a:	4040      	eors	r0, r0
    5b6c:	f380 8811 	msr	BASEPRI, r0
    5b70:	f04f 0003 	mov.w	r0, #3
    5b74:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    5b76:	4a13      	ldr	r2, [pc, #76]	; (5bc4 <bt_recv+0x140>)
    5b78:	7828      	ldrb	r0, [r5, #0]
    5b7a:	2306      	movs	r3, #6
    5b7c:	4621      	mov	r1, r4
    5b7e:	f7ff f81d 	bl	4bbc <handle_event>
    5b82:	e7af      	b.n	5ae4 <bt_recv+0x60>
    5b84:	4b0a      	ldr	r3, [pc, #40]	; (5bb0 <bt_recv+0x12c>)
    5b86:	4a0b      	ldr	r2, [pc, #44]	; (5bb4 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    5b88:	480f      	ldr	r0, [pc, #60]	; (5bc8 <bt_recv+0x144>)
    5b8a:	1ad2      	subs	r2, r2, r3
    5b8c:	08d2      	lsrs	r2, r2, #3
    5b8e:	0192      	lsls	r2, r2, #6
    5b90:	f042 0201 	orr.w	r2, r2, #1
    5b94:	f016 fa3a 	bl	1c00c <log_1>
		net_buf_unref(buf);
    5b98:	4620      	mov	r0, r4
    5b9a:	f013 f9ad 	bl	18ef8 <net_buf_unref>
		return -EINVAL;
    5b9e:	f06f 0015 	mvn.w	r0, #21
    5ba2:	e7bf      	b.n	5b24 <bt_recv+0xa0>
    5ba4:	0002340d 	.word	0x0002340d
    5ba8:	000235dc 	.word	0x000235dc
    5bac:	0002344a 	.word	0x0002344a
    5bb0:	00020e00 	.word	0x00020e00
    5bb4:	00020ee0 	.word	0x00020ee0
    5bb8:	0002360e 	.word	0x0002360e
    5bbc:	00023632 	.word	0x00023632
    5bc0:	00023654 	.word	0x00023654
    5bc4:	00021498 	.word	0x00021498
    5bc8:	00023682 	.word	0x00023682

00005bcc <bt_recv_prio>:
{
    5bcc:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5bce:	7d03      	ldrb	r3, [r0, #20]
    5bd0:	2b01      	cmp	r3, #1
{
    5bd2:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5bd4:	d00c      	beq.n	5bf0 <bt_recv_prio+0x24>
    5bd6:	4a09      	ldr	r2, [pc, #36]	; (5bfc <bt_recv_prio+0x30>)
    5bd8:	4909      	ldr	r1, [pc, #36]	; (5c00 <bt_recv_prio+0x34>)
    5bda:	480a      	ldr	r0, [pc, #40]	; (5c04 <bt_recv_prio+0x38>)
    5bdc:	f640 534d 	movw	r3, #3405	; 0xd4d
    5be0:	f015 fdc8 	bl	1b774 <printk>
    5be4:	4040      	eors	r0, r0
    5be6:	f380 8811 	msr	BASEPRI, r0
    5bea:	f04f 0003 	mov.w	r0, #3
    5bee:	df02      	svc	2
	hci_event_prio(buf);
    5bf0:	4620      	mov	r0, r4
    5bf2:	f7ff fef5 	bl	59e0 <hci_event_prio>
}
    5bf6:	2000      	movs	r0, #0
    5bf8:	bd10      	pop	{r4, pc}
    5bfa:	bf00      	nop
    5bfc:	0002340d 	.word	0x0002340d
    5c00:	00023696 	.word	0x00023696
    5c04:	0002344a 	.word	0x0002344a

00005c08 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5c08:	4a08      	ldr	r2, [pc, #32]	; (5c2c <bt_hci_driver_register+0x24>)
{
    5c0a:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    5c0c:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    5c10:	b930      	cbnz	r0, 5c20 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    5c12:	68d9      	ldr	r1, [r3, #12]
    5c14:	b139      	cbz	r1, 5c26 <bt_hci_driver_register+0x1e>
    5c16:	6919      	ldr	r1, [r3, #16]
    5c18:	b129      	cbz	r1, 5c26 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    5c1a:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    5c1e:	4770      	bx	lr
		return -EALREADY;
    5c20:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5c24:	4770      	bx	lr
		return -EINVAL;
    5c26:	f06f 0015 	mvn.w	r0, #21
}
    5c2a:	4770      	bx	lr
    5c2c:	20000000 	.word	0x20000000

00005c30 <bt_finalize_init>:
{
    5c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c34:	4d30      	ldr	r5, [pc, #192]	; (5cf8 <bt_finalize_init+0xc8>)
    5c36:	f3bf 8f5b 	dmb	ish
    5c3a:	b087      	sub	sp, #28
    5c3c:	f105 0398 	add.w	r3, r5, #152	; 0x98
    5c40:	e853 2f00 	ldrex	r2, [r3]
    5c44:	f042 0202 	orr.w	r2, r2, #2
    5c48:	e843 2100 	strex	r1, r2, [r3]
    5c4c:	2900      	cmp	r1, #0
    5c4e:	d1f7      	bne.n	5c40 <bt_finalize_init+0x10>
    5c50:	f3bf 8f5b 	dmb	ish
    5c54:	4b29      	ldr	r3, [pc, #164]	; (5cfc <bt_finalize_init+0xcc>)
    5c56:	4c2a      	ldr	r4, [pc, #168]	; (5d00 <bt_finalize_init+0xd0>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    5c58:	492a      	ldr	r1, [pc, #168]	; (5d04 <bt_finalize_init+0xd4>)
    5c5a:	4e2b      	ldr	r6, [pc, #172]	; (5d08 <bt_finalize_init+0xd8>)
		BT_INFO("Identity[%d]: %s",
    5c5c:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 5d0c <bt_finalize_init+0xdc>
    5c60:	1ae4      	subs	r4, r4, r3
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    5c62:	79eb      	ldrb	r3, [r5, #7]
    5c64:	4628      	mov	r0, r5
    5c66:	2b01      	cmp	r3, #1
    5c68:	bf88      	it	hi
    5c6a:	460e      	movhi	r6, r1
    5c6c:	f7fe fc0c 	bl	4488 <bt_addr_le_str_real>
    5c70:	f7fc fd46 	bl	2700 <z_log_strdup>
    5c74:	08e4      	lsrs	r4, r4, #3
    5c76:	01a4      	lsls	r4, r4, #6
    5c78:	f044 0803 	orr.w	r8, r4, #3
    5c7c:	4602      	mov	r2, r0
    5c7e:	4631      	mov	r1, r6
    5c80:	4823      	ldr	r0, [pc, #140]	; (5d10 <bt_finalize_init+0xe0>)
    5c82:	4643      	mov	r3, r8
    5c84:	f016 f9d6 	bl	1c034 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    5c88:	462f      	mov	r7, r5
    5c8a:	2601      	movs	r6, #1
    5c8c:	79eb      	ldrb	r3, [r5, #7]
    5c8e:	429e      	cmp	r6, r3
    5c90:	f107 0707 	add.w	r7, r7, #7
    5c94:	db22      	blt.n	5cdc <bt_finalize_init+0xac>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    5c96:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    5c9a:	4630      	mov	r0, r6
    5c9c:	f7fe fe92 	bl	49c4 <ver_str>
    5ca0:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    5ca2:	9304      	str	r3, [sp, #16]
    5ca4:	f044 0403 	orr.w	r4, r4, #3
    5ca8:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    5caa:	9305      	str	r3, [sp, #20]
    5cac:	e9cd 0602 	strd	r0, r6, [sp, #8]
    5cb0:	4623      	mov	r3, r4
    5cb2:	a902      	add	r1, sp, #8
    5cb4:	2204      	movs	r2, #4
    5cb6:	4817      	ldr	r0, [pc, #92]	; (5d14 <bt_finalize_init+0xe4>)
    5cb8:	f016 f9f1 	bl	1c09e <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    5cbc:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
    5cc0:	4630      	mov	r0, r6
    5cc2:	f7fe fe7f 	bl	49c4 <ver_str>
    5cc6:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    5cc8:	f8ad 4000 	strh.w	r4, [sp]
    5ccc:	4601      	mov	r1, r0
    5cce:	4632      	mov	r2, r6
    5cd0:	4811      	ldr	r0, [pc, #68]	; (5d18 <bt_finalize_init+0xe8>)
    5cd2:	f016 f9c8 	bl	1c066 <log_3>
}
    5cd6:	b007      	add	sp, #28
    5cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    5cdc:	4638      	mov	r0, r7
    5cde:	f7fe fbd3 	bl	4488 <bt_addr_le_str_real>
    5ce2:	f7fc fd0d 	bl	2700 <z_log_strdup>
    5ce6:	4631      	mov	r1, r6
    5ce8:	4602      	mov	r2, r0
    5cea:	4643      	mov	r3, r8
    5cec:	4648      	mov	r0, r9
    5cee:	f016 f9a1 	bl	1c034 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    5cf2:	3601      	adds	r6, #1
    5cf4:	e7ca      	b.n	5c8c <bt_finalize_init+0x5c>
    5cf6:	bf00      	nop
    5cf8:	20000000 	.word	0x20000000
    5cfc:	00020e00 	.word	0x00020e00
    5d00:	00020ee0 	.word	0x00020ee0
    5d04:	000236b9 	.word	0x000236b9
    5d08:	00022a7c 	.word	0x00022a7c
    5d0c:	000236cc 	.word	0x000236cc
    5d10:	000236bd 	.word	0x000236bd
    5d14:	000236dd 	.word	0x000236dd
    5d18:	0002371b 	.word	0x0002371b

00005d1c <init_work>:

static void init_work(struct k_work *work)
{
    5d1c:	b510      	push	{r4, lr}
	int err;

	err = bt_init();
    5d1e:	f7fa fb73 	bl	408 <bt_init>
	if (ready_cb) {
    5d22:	4b03      	ldr	r3, [pc, #12]	; (5d30 <init_work+0x14>)
    5d24:	681b      	ldr	r3, [r3, #0]
    5d26:	b113      	cbz	r3, 5d2e <init_work+0x12>
		ready_cb(err);
	}
}
    5d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    5d2c:	4718      	bx	r3
}
    5d2e:	bd10      	pop	{r4, pc}
    5d30:	20001530 	.word	0x20001530

00005d34 <bt_set_name>:
	k_work_submit(&bt_dev.init);
	return 0;
}

int bt_set_name(const char *name)
{
    5d34:	b570      	push	{r4, r5, r6, lr}
    5d36:	4606      	mov	r6, r0
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	size_t len = strlen(name);
    5d38:	f017 fe3b 	bl	1d9b2 <strlen>
	int err;

	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    5d3c:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    5d3e:	4605      	mov	r5, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    5d40:	d811      	bhi.n	5d66 <bt_set_name+0x32>
		return -ENOMEM;
	}

	if (!strcmp(bt_dev.name, name)) {
    5d42:	4c0a      	ldr	r4, [pc, #40]	; (5d6c <bt_set_name+0x38>)
    5d44:	4631      	mov	r1, r6
    5d46:	f504 7094 	add.w	r0, r4, #296	; 0x128
    5d4a:	f017 fe42 	bl	1d9d2 <strcmp>
    5d4e:	b148      	cbz	r0, 5d64 <bt_set_name+0x30>
		return 0;
	}

	strncpy(bt_dev.name, name, len);
    5d50:	f504 7094 	add.w	r0, r4, #296	; 0x128
    5d54:	462a      	mov	r2, r5
    5d56:	4631      	mov	r1, r6
	bt_dev.name[len] = '\0';
    5d58:	442c      	add	r4, r5
	strncpy(bt_dev.name, name, len);
    5d5a:	f017 fe18 	bl	1d98e <strncpy>
	bt_dev.name[len] = '\0';
    5d5e:	2000      	movs	r0, #0
    5d60:	f884 0128 	strb.w	r0, [r4, #296]	; 0x128

	return 0;
#else
	return -ENOMEM;
#endif
}
    5d64:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    5d66:	f06f 000b 	mvn.w	r0, #11
    5d6a:	e7fb      	b.n	5d64 <bt_set_name+0x30>
    5d6c:	20000000 	.word	0x20000000

00005d70 <bt_enable>:
{
    5d70:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    5d72:	4d31      	ldr	r5, [pc, #196]	; (5e38 <bt_enable+0xc8>)
    5d74:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    5d78:	b088      	sub	sp, #32
    5d7a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    5d7c:	b973      	cbnz	r3, 5d9c <bt_enable+0x2c>
    5d7e:	4b2f      	ldr	r3, [pc, #188]	; (5e3c <bt_enable+0xcc>)
    5d80:	492f      	ldr	r1, [pc, #188]	; (5e40 <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
    5d82:	4830      	ldr	r0, [pc, #192]	; (5e44 <bt_enable+0xd4>)
    5d84:	1ac9      	subs	r1, r1, r3
    5d86:	08c9      	lsrs	r1, r1, #3
    5d88:	0189      	lsls	r1, r1, #6
    5d8a:	f041 0101 	orr.w	r1, r1, #1
    5d8e:	f016 f930 	bl	1bff2 <log_0>
		return -ENODEV;
    5d92:	f06f 0412 	mvn.w	r4, #18
}
    5d96:	4620      	mov	r0, r4
    5d98:	b008      	add	sp, #32
    5d9a:	bd70      	pop	{r4, r5, r6, pc}
    5d9c:	f105 0398 	add.w	r3, r5, #152	; 0x98
    5da0:	f3bf 8f5b 	dmb	ish
    5da4:	e853 4f00 	ldrex	r4, [r3]
    5da8:	f044 0201 	orr.w	r2, r4, #1
    5dac:	e843 2100 	strex	r1, r2, [r3]
    5db0:	2900      	cmp	r1, #0
    5db2:	d1f7      	bne.n	5da4 <bt_enable+0x34>
    5db4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5db8:	f014 0401 	ands.w	r4, r4, #1
    5dbc:	d139      	bne.n	5e32 <bt_enable+0xc2>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    5dbe:	4822      	ldr	r0, [pc, #136]	; (5e48 <bt_enable+0xd8>)
    5dc0:	f7ff ffb8 	bl	5d34 <bt_set_name>
	ready_cb = cb;
    5dc4:	4b21      	ldr	r3, [pc, #132]	; (5e4c <bt_enable+0xdc>)
    5dc6:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5dc8:	2200      	movs	r2, #0
    5dca:	2300      	movs	r3, #0
    5dcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5dd0:	f06f 0308 	mvn.w	r3, #8
    5dd4:	e9cd 4302 	strd	r4, r3, [sp, #8]
    5dd8:	e9cd 4400 	strd	r4, r4, [sp]
    5ddc:	4b1c      	ldr	r3, [pc, #112]	; (5e50 <bt_enable+0xe0>)
    5dde:	491d      	ldr	r1, [pc, #116]	; (5e54 <bt_enable+0xe4>)
    5de0:	9404      	str	r4, [sp, #16]
    5de2:	f44f 7220 	mov.w	r2, #640	; 0x280
    5de6:	481c      	ldr	r0, [pc, #112]	; (5e58 <bt_enable+0xe8>)
    5de8:	f014 fae2 	bl	1a3b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    5dec:	491b      	ldr	r1, [pc, #108]	; (5e5c <bt_enable+0xec>)
    5dee:	481a      	ldr	r0, [pc, #104]	; (5e58 <bt_enable+0xe8>)
    5df0:	f01a f9af 	bl	20152 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    5df4:	f7fe fd2c 	bl	4850 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    5df8:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    5dfc:	68db      	ldr	r3, [r3, #12]
    5dfe:	4798      	blx	r3
	if (err) {
    5e00:	4604      	mov	r4, r0
    5e02:	b158      	cbz	r0, 5e1c <bt_enable+0xac>
    5e04:	4b0d      	ldr	r3, [pc, #52]	; (5e3c <bt_enable+0xcc>)
    5e06:	4a0e      	ldr	r2, [pc, #56]	; (5e40 <bt_enable+0xd0>)
    5e08:	1ad2      	subs	r2, r2, r3
    5e0a:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    5e0c:	0192      	lsls	r2, r2, #6
    5e0e:	4601      	mov	r1, r0
    5e10:	f042 0201 	orr.w	r2, r2, #1
    5e14:	4812      	ldr	r0, [pc, #72]	; (5e60 <bt_enable+0xf0>)
    5e16:	f016 f8f9 	bl	1c00c <log_1>
		return err;
    5e1a:	e7bc      	b.n	5d96 <bt_enable+0x26>
	if (!cb) {
    5e1c:	b926      	cbnz	r6, 5e28 <bt_enable+0xb8>
}
    5e1e:	b008      	add	sp, #32
    5e20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    5e24:	f7fa baf0 	b.w	408 <bt_init>
	k_work_submit(&bt_dev.init);
    5e28:	f105 0088 	add.w	r0, r5, #136	; 0x88
    5e2c:	f014 fdb8 	bl	1a9a0 <k_work_submit>
	return 0;
    5e30:	e7b1      	b.n	5d96 <bt_enable+0x26>
		return -EALREADY;
    5e32:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5e36:	e7ae      	b.n	5d96 <bt_enable+0x26>
    5e38:	20000000 	.word	0x20000000
    5e3c:	00020e00 	.word	0x00020e00
    5e40:	00020ee0 	.word	0x00020ee0
    5e44:	0002383a 	.word	0x0002383a
    5e48:	00023853 	.word	0x00023853
    5e4c:	20001530 	.word	0x20001530
    5e50:	00004df1 	.word	0x00004df1
    5e54:	20003660 	.word	0x20003660
    5e58:	20000a20 	.word	0x20000a20
    5e5c:	00023866 	.word	0x00023866
    5e60:	0002386c 	.word	0x0002386c

00005e64 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
    5e64:	4800      	ldr	r0, [pc, #0]	; (5e68 <bt_get_name+0x4>)
    5e66:	4770      	bx	lr
    5e68:	20000128 	.word	0x20000128

00005e6c <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
    5e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5e6e:	4f0b      	ldr	r7, [pc, #44]	; (5e9c <id_find+0x30>)
{
    5e70:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5e72:	2500      	movs	r5, #0
    5e74:	79fb      	ldrb	r3, [r7, #7]
    5e76:	b2ec      	uxtb	r4, r5
    5e78:	42a3      	cmp	r3, r4
    5e7a:	d802      	bhi.n	5e82 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5e7c:	f06f 0401 	mvn.w	r4, #1
    5e80:	e009      	b.n	5e96 <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    5e82:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
    5e86:	2207      	movs	r2, #7
    5e88:	4439      	add	r1, r7
    5e8a:	4630      	mov	r0, r6
    5e8c:	f017 fdad 	bl	1d9ea <memcmp>
    5e90:	3501      	adds	r5, #1
    5e92:	2800      	cmp	r0, #0
    5e94:	d1ee      	bne.n	5e74 <id_find+0x8>
}
    5e96:	4620      	mov	r0, r4
    5e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e9a:	bf00      	nop
    5e9c:	20000000 	.word	0x20000000

00005ea0 <set_random_address>:
{
    5ea0:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
    5ea2:	4914      	ldr	r1, [pc, #80]	; (5ef4 <set_random_address+0x54>)
    5ea4:	2206      	movs	r2, #6
    5ea6:	4605      	mov	r5, r0
    5ea8:	f017 fd9f 	bl	1d9ea <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5eac:	4604      	mov	r4, r0
    5eae:	b1e0      	cbz	r0, 5eea <set_random_address+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5eb0:	2106      	movs	r1, #6
    5eb2:	f242 0005 	movw	r0, #8197	; 0x2005
    5eb6:	f7ff f951 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    5eba:	4604      	mov	r4, r0
    5ebc:	b1b8      	cbz	r0, 5eee <set_random_address+0x4e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    5ebe:	2206      	movs	r2, #6
    5ec0:	4629      	mov	r1, r5
    5ec2:	3008      	adds	r0, #8
    5ec4:	f019 ff07 	bl	1fcd6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5ec8:	4621      	mov	r1, r4
    5eca:	2200      	movs	r2, #0
    5ecc:	f242 0005 	movw	r0, #8197	; 0x2005
    5ed0:	f7ff fb06 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    5ed4:	4604      	mov	r4, r0
    5ed6:	b940      	cbnz	r0, 5eea <set_random_address+0x4a>
	memcpy(dst, src, sizeof(*dst));
    5ed8:	2206      	movs	r2, #6
    5eda:	4806      	ldr	r0, [pc, #24]	; (5ef4 <set_random_address+0x54>)
    5edc:	4629      	mov	r1, r5
    5ede:	f017 fd95 	bl	1da0c <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    5ee2:	4b05      	ldr	r3, [pc, #20]	; (5ef8 <set_random_address+0x58>)
    5ee4:	2201      	movs	r2, #1
    5ee6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
    5eea:	4620      	mov	r0, r4
    5eec:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5eee:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5ef2:	e7fa      	b.n	5eea <set_random_address+0x4a>
    5ef4:	2000002d 	.word	0x2000002d
    5ef8:	20000000 	.word	0x20000000

00005efc <id_create.constprop.0>:

static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    5efc:	b530      	push	{r4, r5, lr}
		do {
			bt_addr_le_create_static(&new_addr);
			/* Make sure we didn't generate a duplicate */
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5efe:	4c14      	ldr	r4, [pc, #80]	; (5f50 <id_create.constprop.0+0x54>)
    5f00:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
static void id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
    5f04:	b085      	sub	sp, #20
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5f06:	4404      	add	r4, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    5f08:	460d      	mov	r5, r1
    5f0a:	b179      	cbz	r1, 5f2c <id_create.constprop.0+0x30>
    5f0c:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    5f0e:	2207      	movs	r2, #7
    5f10:	4669      	mov	r1, sp
    5f12:	4628      	mov	r0, r5
    5f14:	9300      	str	r3, [sp, #0]
    5f16:	f8cd 3003 	str.w	r3, [sp, #3]
    5f1a:	f017 fd66 	bl	1d9ea <memcmp>
    5f1e:	b128      	cbz	r0, 5f2c <id_create.constprop.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    5f20:	4629      	mov	r1, r5
    5f22:	4620      	mov	r0, r4

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5f24:	f017 ffbe 	bl	1dea4 <bt_addr_le_copy>
	 */
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}
}
    5f28:	b005      	add	sp, #20
    5f2a:	bd30      	pop	{r4, r5, pc}
			bt_addr_le_create_static(&new_addr);
    5f2c:	a802      	add	r0, sp, #8
    5f2e:	f017 fe74 	bl	1dc1a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    5f32:	a802      	add	r0, sp, #8
    5f34:	f7ff ff9a 	bl	5e6c <id_find>
    5f38:	2800      	cmp	r0, #0
    5f3a:	daf7      	bge.n	5f2c <id_create.constprop.0+0x30>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    5f3c:	a902      	add	r1, sp, #8
    5f3e:	4620      	mov	r0, r4
    5f40:	f017 ffb0 	bl	1dea4 <bt_addr_le_copy>
		if (addr) {
    5f44:	2d00      	cmp	r5, #0
    5f46:	d0ef      	beq.n	5f28 <id_create.constprop.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    5f48:	4621      	mov	r1, r4
    5f4a:	4628      	mov	r0, r5
    5f4c:	e7ea      	b.n	5f24 <id_create.constprop.0+0x28>
    5f4e:	bf00      	nop
    5f50:	20000000 	.word	0x20000000

00005f54 <bt_id_pending_keys_update>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5f54:	4b0a      	ldr	r3, [pc, #40]	; (5f80 <bt_id_pending_keys_update+0x2c>)
    5f56:	f3bf 8f5b 	dmb	ish
    5f5a:	e853 2f00 	ldrex	r2, [r3]
    5f5e:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
    5f62:	e843 1000 	strex	r0, r1, [r3]
    5f66:	2800      	cmp	r0, #0
    5f68:	d1f7      	bne.n	5f5a <bt_id_pending_keys_update+0x6>
    5f6a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    5f6e:	0493      	lsls	r3, r2, #18
    5f70:	d504      	bpl.n	5f7c <bt_id_pending_keys_update+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    5f72:	4904      	ldr	r1, [pc, #16]	; (5f84 <bt_id_pending_keys_update+0x30>)
    5f74:	2200      	movs	r2, #0
    5f76:	2002      	movs	r0, #2
    5f78:	f005 bb36 	b.w	b5e8 <bt_keys_foreach>
}
    5f7c:	4770      	bx	lr
    5f7e:	bf00      	nop
    5f80:	20000098 	.word	0x20000098
    5f84:	0001dfd1 	.word	0x0001dfd1

00005f88 <bt_id_add>:
{
    5f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5f8a:	4c5f      	ldr	r4, [pc, #380]	; (6108 <bt_id_add+0x180>)
    5f8c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    5f90:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
    5f94:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    5f96:	b10a      	cbz	r2, 5f9c <bt_id_add+0x14>
    5f98:	429a      	cmp	r2, r3
    5f9a:	d208      	bcs.n	5fae <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    5f9c:	3301      	adds	r3, #1
    5f9e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    5fa2:	7a2b      	ldrb	r3, [r5, #8]
    5fa4:	f043 0304 	orr.w	r3, r3, #4
    5fa8:	722b      	strb	r3, [r5, #8]
}
    5faa:	b003      	add	sp, #12
    5fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    5fae:	2100      	movs	r1, #0
    5fb0:	2206      	movs	r2, #6
    5fb2:	4608      	mov	r0, r1
    5fb4:	f001 fb22 	bl	75fc <bt_conn_lookup_state_le>
	if (conn) {
    5fb8:	4606      	mov	r6, r0
    5fba:	b1a8      	cbz	r0, 5fe8 <bt_id_add+0x60>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5fbc:	f3bf 8f5b 	dmb	ish
    5fc0:	3498      	adds	r4, #152	; 0x98
    5fc2:	e854 3f00 	ldrex	r3, [r4]
    5fc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    5fca:	e844 3200 	strex	r2, r3, [r4]
    5fce:	2a00      	cmp	r2, #0
    5fd0:	d1f7      	bne.n	5fc2 <bt_id_add+0x3a>
    5fd2:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    5fd6:	7a2b      	ldrb	r3, [r5, #8]
    5fd8:	f043 0301 	orr.w	r3, r3, #1
    5fdc:	722b      	strb	r3, [r5, #8]
}
    5fde:	b003      	add	sp, #12
    5fe0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    5fe4:	f018 b95e 	b.w	1e2a4 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    5fe8:	4601      	mov	r1, r0
    5fea:	4848      	ldr	r0, [pc, #288]	; (610c <bt_id_add+0x184>)
    5fec:	f000 fc04 	bl	67f8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries) {
    5ff0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    5ff4:	b173      	cbz	r3, 6014 <bt_id_add+0x8c>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    5ff6:	4630      	mov	r0, r6
    5ff8:	f017 ff9d 	bl	1df36 <addr_res_enable>
		if (err) {
    5ffc:	b150      	cbz	r0, 6014 <bt_id_add+0x8c>
    5ffe:	4944      	ldr	r1, [pc, #272]	; (6110 <bt_id_add+0x188>)
    6000:	4b44      	ldr	r3, [pc, #272]	; (6114 <bt_id_add+0x18c>)
			BT_WARN("Failed to disable address resolution");
    6002:	4845      	ldr	r0, [pc, #276]	; (6118 <bt_id_add+0x190>)
    6004:	1ac9      	subs	r1, r1, r3
    6006:	08c9      	lsrs	r1, r1, #3
    6008:	0189      	lsls	r1, r1, #6
    600a:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    600e:	f015 fff0 	bl	1bff2 <log_0>
	if (err) {
    6012:	e023      	b.n	605c <bt_id_add+0xd4>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    6014:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
    6018:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    601c:	429a      	cmp	r2, r3
    601e:	d127      	bne.n	6070 <bt_id_add+0xe8>
    6020:	4b3c      	ldr	r3, [pc, #240]	; (6114 <bt_id_add+0x18c>)
    6022:	4e3b      	ldr	r6, [pc, #236]	; (6110 <bt_id_add+0x188>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    6024:	483d      	ldr	r0, [pc, #244]	; (611c <bt_id_add+0x194>)
    6026:	1af6      	subs	r6, r6, r3
    6028:	08f6      	lsrs	r6, r6, #3
    602a:	01b6      	lsls	r6, r6, #6
    602c:	f046 0102 	orr.w	r1, r6, #2
    6030:	f015 ffdf 	bl	1bff2 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    6034:	2200      	movs	r2, #0
    6036:	4611      	mov	r1, r2
    6038:	f242 0029 	movw	r0, #8233	; 0x2029
    603c:	f7ff fa50 	bl	54e0 <bt_hci_cmd_send_sync>
		if (err) {
    6040:	b118      	cbz	r0, 604a <bt_id_add+0xc2>
			BT_ERR("Failed to clear resolution list");
    6042:	4837      	ldr	r0, [pc, #220]	; (6120 <bt_id_add+0x198>)
    6044:	f046 0101 	orr.w	r1, r6, #1
    6048:	e7e1      	b.n	600e <bt_id_add+0x86>
		bt_dev.le.rl_entries++;
    604a:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    604e:	3301      	adds	r3, #1
    6050:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    6054:	7a2b      	ldrb	r3, [r5, #8]
    6056:	f043 0304 	orr.w	r3, r3, #4
    605a:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    605c:	2001      	movs	r0, #1
    605e:	f017 ff6a 	bl	1df36 <addr_res_enable>
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    6062:	4830      	ldr	r0, [pc, #192]	; (6124 <bt_id_add+0x19c>)
    6064:	2100      	movs	r1, #0
}
    6066:	b003      	add	sp, #12
    6068:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    606c:	f000 bbc4 	b.w	67f8 <bt_le_ext_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    6070:	1c6f      	adds	r7, r5, #1
    6072:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    6076:	4638      	mov	r0, r7
    6078:	f017 ff17 	bl	1deaa <hci_id_add.constprop.0>
	if (err) {
    607c:	4606      	mov	r6, r0
    607e:	b140      	cbz	r0, 6092 <bt_id_add+0x10a>
    6080:	4923      	ldr	r1, [pc, #140]	; (6110 <bt_id_add+0x188>)
    6082:	4b24      	ldr	r3, [pc, #144]	; (6114 <bt_id_add+0x18c>)
		BT_ERR("Failed to add IRK to controller");
    6084:	4828      	ldr	r0, [pc, #160]	; (6128 <bt_id_add+0x1a0>)
    6086:	1ac9      	subs	r1, r1, r3
    6088:	08c9      	lsrs	r1, r1, #3
    608a:	0189      	lsls	r1, r1, #6
    608c:	f041 0101 	orr.w	r1, r1, #1
    6090:	e7bd      	b.n	600e <bt_id_add+0x86>
	bt_dev.le.rl_entries++;
    6092:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    6096:	3301      	adds	r3, #1
    6098:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    609c:	7a2b      	ldrb	r3, [r5, #8]
    609e:	f043 0304 	orr.w	r3, r3, #4
    60a2:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    60a4:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    60a8:	075b      	lsls	r3, r3, #29
    60aa:	d408      	bmi.n	60be <bt_id_add+0x136>
    60ac:	4918      	ldr	r1, [pc, #96]	; (6110 <bt_id_add+0x188>)
    60ae:	4b19      	ldr	r3, [pc, #100]	; (6114 <bt_id_add+0x18c>)
		BT_WARN("Set privacy mode command is not supported");
    60b0:	481e      	ldr	r0, [pc, #120]	; (612c <bt_id_add+0x1a4>)
    60b2:	1ac9      	subs	r1, r1, r3
    60b4:	08c9      	lsrs	r1, r1, #3
    60b6:	0189      	lsls	r1, r1, #6
    60b8:	f041 0102 	orr.w	r1, r1, #2
    60bc:	e7a7      	b.n	600e <bt_id_add+0x86>
	bt_addr_le_copy(&cp.id_addr, addr);
    60be:	4639      	mov	r1, r7
    60c0:	4668      	mov	r0, sp
    60c2:	f017 feef 	bl	1dea4 <bt_addr_le_copy>
	cp.mode = mode;
    60c6:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    60c8:	2108      	movs	r1, #8
    60ca:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    60ce:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    60d2:	f7ff f843 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    60d6:	4604      	mov	r4, r0
    60d8:	b940      	cbnz	r0, 60ec <bt_id_add+0x164>
    60da:	490d      	ldr	r1, [pc, #52]	; (6110 <bt_id_add+0x188>)
    60dc:	4b0d      	ldr	r3, [pc, #52]	; (6114 <bt_id_add+0x18c>)
		BT_ERR("Failed to set privacy mode");
    60de:	4814      	ldr	r0, [pc, #80]	; (6130 <bt_id_add+0x1a8>)
    60e0:	1ac9      	subs	r1, r1, r3
    60e2:	08c9      	lsrs	r1, r1, #3
    60e4:	0189      	lsls	r1, r1, #6
    60e6:	f041 0101 	orr.w	r1, r1, #1
    60ea:	e790      	b.n	600e <bt_id_add+0x86>
    60ec:	2208      	movs	r2, #8
    60ee:	4669      	mov	r1, sp
    60f0:	4410      	add	r0, r2
    60f2:	f019 fdf0 	bl	1fcd6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    60f6:	4632      	mov	r2, r6
    60f8:	4621      	mov	r1, r4
    60fa:	f242 004e 	movw	r0, #8270	; 0x204e
    60fe:	f7ff f9ef 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    6102:	2800      	cmp	r0, #0
    6104:	d0aa      	beq.n	605c <bt_id_add+0xd4>
    6106:	e7e8      	b.n	60da <bt_id_add+0x152>
    6108:	20000000 	.word	0x20000000
    610c:	0001df67 	.word	0x0001df67
    6110:	00020ef0 	.word	0x00020ef0
    6114:	00020e00 	.word	0x00020e00
    6118:	000238b5 	.word	0x000238b5
    611c:	000238da 	.word	0x000238da
    6120:	0002390b 	.word	0x0002390b
    6124:	0001df0d 	.word	0x0001df0d
    6128:	0002392b 	.word	0x0002392b
    612c:	0002394b 	.word	0x0002394b
    6130:	00023975 	.word	0x00023975

00006134 <bt_id_del>:
{
    6134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    6138:	4c47      	ldr	r4, [pc, #284]	; (6258 <bt_id_del+0x124>)
    613a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    613e:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
{
    6142:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size ||
    6144:	b112      	cbz	r2, 614c <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    6146:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    6148:	4293      	cmp	r3, r2
    614a:	dd08      	ble.n	615e <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    614c:	3b01      	subs	r3, #1
    614e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    6152:	7a2b      	ldrb	r3, [r5, #8]
    6154:	f023 0304 	bic.w	r3, r3, #4
    6158:	722b      	strb	r3, [r5, #8]
}
    615a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    615e:	2100      	movs	r1, #0
    6160:	2206      	movs	r2, #6
    6162:	4608      	mov	r0, r1
    6164:	f001 fa4a 	bl	75fc <bt_conn_lookup_state_le>
	if (conn) {
    6168:	4606      	mov	r6, r0
    616a:	b1a0      	cbz	r0, 6196 <bt_id_del+0x62>
    616c:	f3bf 8f5b 	dmb	ish
    6170:	3498      	adds	r4, #152	; 0x98
    6172:	e854 3f00 	ldrex	r3, [r4]
    6176:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    617a:	e844 3200 	strex	r2, r3, [r4]
    617e:	2a00      	cmp	r2, #0
    6180:	d1f7      	bne.n	6172 <bt_id_del+0x3e>
    6182:	f3bf 8f5b 	dmb	ish
	keys->state |= flag;
    6186:	7a2b      	ldrb	r3, [r5, #8]
    6188:	f043 0302 	orr.w	r3, r3, #2
    618c:	722b      	strb	r3, [r5, #8]
}
    618e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    6192:	f018 b887 	b.w	1e2a4 <bt_conn_unref>
		bt_le_ext_adv_foreach(adv_pause_enabled, NULL);
    6196:	4601      	mov	r1, r0
    6198:	4830      	ldr	r0, [pc, #192]	; (625c <bt_id_del+0x128>)
    619a:	f000 fb2d 	bl	67f8 <bt_le_ext_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    619e:	4630      	mov	r0, r6
    61a0:	f017 fec9 	bl	1df36 <addr_res_enable>
	if (err) {
    61a4:	4606      	mov	r6, r0
    61a6:	b1b0      	cbz	r0, 61d6 <bt_id_del+0xa2>
    61a8:	4a2d      	ldr	r2, [pc, #180]	; (6260 <bt_id_del+0x12c>)
    61aa:	4b2e      	ldr	r3, [pc, #184]	; (6264 <bt_id_del+0x130>)
    61ac:	1ad2      	subs	r2, r2, r3
    61ae:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    61b0:	0192      	lsls	r2, r2, #6
    61b2:	4601      	mov	r1, r0
    61b4:	f042 0201 	orr.w	r2, r2, #1
    61b8:	482b      	ldr	r0, [pc, #172]	; (6268 <bt_id_del+0x134>)
    61ba:	f015 ff27 	bl	1c00c <log_1>
	if (bt_dev.le.rl_entries) {
    61be:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    61c2:	b113      	cbz	r3, 61ca <bt_id_del+0x96>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    61c4:	2001      	movs	r0, #1
    61c6:	f017 feb6 	bl	1df36 <addr_res_enable>
}
    61ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_le_ext_adv_foreach(adv_unpause_enabled, NULL);
    61ce:	4827      	ldr	r0, [pc, #156]	; (626c <bt_id_del+0x138>)
    61d0:	2100      	movs	r1, #0
    61d2:	f000 bb11 	b.w	67f8 <bt_le_ext_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    61d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    61da:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
    61de:	429a      	cmp	r2, r3
    61e0:	d20c      	bcs.n	61fc <bt_id_del+0xc8>
		bt_dev.le.rl_entries--;
    61e2:	3b01      	subs	r3, #1
    61e4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    61e8:	7a2b      	ldrb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    61ea:	4921      	ldr	r1, [pc, #132]	; (6270 <bt_id_del+0x13c>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    61ec:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    61f0:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    61f2:	722b      	strb	r3, [r5, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    61f4:	2002      	movs	r0, #2
    61f6:	f005 f9f7 	bl	b5e8 <bt_keys_foreach>
		goto done;
    61fa:	e7e0      	b.n	61be <bt_id_del+0x8a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    61fc:	2107      	movs	r1, #7
    61fe:	f242 0028 	movw	r0, #8232	; 0x2028
    6202:	f7fe ffab 	bl	515c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    6206:	f105 0801 	add.w	r8, r5, #1
	if (!buf) {
    620a:	4607      	mov	r7, r0
    620c:	b950      	cbnz	r0, 6224 <bt_id_del+0xf0>
    620e:	4b15      	ldr	r3, [pc, #84]	; (6264 <bt_id_del+0x130>)
    6210:	4913      	ldr	r1, [pc, #76]	; (6260 <bt_id_del+0x12c>)
		BT_ERR("Failed to remove IRK from controller");
    6212:	4818      	ldr	r0, [pc, #96]	; (6274 <bt_id_del+0x140>)
    6214:	1ac9      	subs	r1, r1, r3
    6216:	08c9      	lsrs	r1, r1, #3
    6218:	0189      	lsls	r1, r1, #6
    621a:	f041 0101 	orr.w	r1, r1, #1
    621e:	f015 fee8 	bl	1bff2 <log_0>
		goto done;
    6222:	e7cc      	b.n	61be <bt_id_del+0x8a>
	return net_buf_simple_add(&buf->b, len);
    6224:	2107      	movs	r1, #7
    6226:	3008      	adds	r0, #8
    6228:	f019 fd4f 	bl	1fcca <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    622c:	4641      	mov	r1, r8
    622e:	f017 fe39 	bl	1dea4 <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    6232:	4632      	mov	r2, r6
    6234:	4639      	mov	r1, r7
    6236:	f242 0028 	movw	r0, #8232	; 0x2028
    623a:	f7ff f951 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    623e:	2800      	cmp	r0, #0
    6240:	d1e5      	bne.n	620e <bt_id_del+0xda>
	bt_dev.le.rl_entries--;
    6242:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    6246:	3b01      	subs	r3, #1
    6248:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    624c:	7a2b      	ldrb	r3, [r5, #8]
    624e:	f023 0304 	bic.w	r3, r3, #4
    6252:	722b      	strb	r3, [r5, #8]
    6254:	e7b3      	b.n	61be <bt_id_del+0x8a>
    6256:	bf00      	nop
    6258:	20000000 	.word	0x20000000
    625c:	0001df67 	.word	0x0001df67
    6260:	00020ef0 	.word	0x00020ef0
    6264:	00020e00 	.word	0x00020e00
    6268:	00023990 	.word	0x00023990
    626c:	0001df0d 	.word	0x0001df0d
    6270:	0001defb 	.word	0x0001defb
    6274:	000239bd 	.word	0x000239bd

00006278 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
    6278:	b573      	push	{r0, r1, r4, r5, r6, lr}
    627a:	460c      	mov	r4, r1
	int new_id;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    627c:	4605      	mov	r5, r0
    627e:	b918      	cbnz	r0, 6288 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
    6280:	b34c      	cbz	r4, 62d6 <bt_id_create+0x5e>
		return -EINVAL;
    6282:	f06f 0415 	mvn.w	r4, #21
    6286:	e023      	b.n	62d0 <bt_id_create+0x58>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6288:	2300      	movs	r3, #0
    628a:	2207      	movs	r2, #7
    628c:	4669      	mov	r1, sp
    628e:	9300      	str	r3, [sp, #0]
    6290:	f8cd 3003 	str.w	r3, [sp, #3]
    6294:	f017 fba9 	bl	1d9ea <memcmp>
    6298:	2800      	cmp	r0, #0
    629a:	d0f1      	beq.n	6280 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    629c:	782b      	ldrb	r3, [r5, #0]
    629e:	2b01      	cmp	r3, #1
    62a0:	d104      	bne.n	62ac <bt_id_create+0x34>
    62a2:	79ab      	ldrb	r3, [r5, #6]
    62a4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    62a8:	2bc0      	cmp	r3, #192	; 0xc0
    62aa:	d00a      	beq.n	62c2 <bt_id_create+0x4a>
    62ac:	4b1b      	ldr	r3, [pc, #108]	; (631c <bt_id_create+0xa4>)
    62ae:	491c      	ldr	r1, [pc, #112]	; (6320 <bt_id_create+0xa8>)
			BT_ERR("Only static random identity address supported");
    62b0:	481c      	ldr	r0, [pc, #112]	; (6324 <bt_id_create+0xac>)
    62b2:	1ac9      	subs	r1, r1, r3
    62b4:	08c9      	lsrs	r1, r1, #3
    62b6:	0189      	lsls	r1, r1, #6
    62b8:	f041 0101 	orr.w	r1, r1, #1
    62bc:	f015 fe99 	bl	1bff2 <log_0>
			return -EINVAL;
    62c0:	e7df      	b.n	6282 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
    62c2:	4628      	mov	r0, r5
    62c4:	f7ff fdd2 	bl	5e6c <id_find>
    62c8:	2800      	cmp	r0, #0
    62ca:	dbd9      	blt.n	6280 <bt_id_create+0x8>
			return -EALREADY;
    62cc:	f06f 0477 	mvn.w	r4, #119	; 0x77

	new_id = bt_dev.id_count++;
	id_create(new_id, addr, irk);

	return new_id;
}
    62d0:	4620      	mov	r0, r4
    62d2:	b002      	add	sp, #8
    62d4:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    62d6:	4e14      	ldr	r6, [pc, #80]	; (6328 <bt_id_create+0xb0>)
    62d8:	79f3      	ldrb	r3, [r6, #7]
    62da:	2b01      	cmp	r3, #1
    62dc:	d01b      	beq.n	6316 <bt_id_create+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    62de:	f3bf 8f5b 	dmb	ish
    62e2:	f8d6 3098 	ldr.w	r3, [r6, #152]	; 0x98
    62e6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    62ea:	07db      	lsls	r3, r3, #31
    62ec:	d40b      	bmi.n	6306 <bt_id_create+0x8e>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    62ee:	2d00      	cmp	r5, #0
    62f0:	d0c7      	beq.n	6282 <bt_id_create+0xa>
    62f2:	2207      	movs	r2, #7
    62f4:	4669      	mov	r1, sp
    62f6:	4628      	mov	r0, r5
    62f8:	9400      	str	r4, [sp, #0]
    62fa:	f8cd 4003 	str.w	r4, [sp, #3]
    62fe:	f017 fb74 	bl	1d9ea <memcmp>
    6302:	2800      	cmp	r0, #0
    6304:	d0bd      	beq.n	6282 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
    6306:	79f4      	ldrb	r4, [r6, #7]
	id_create(new_id, addr, irk);
    6308:	4629      	mov	r1, r5
	new_id = bt_dev.id_count++;
    630a:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    630c:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    630e:	71f3      	strb	r3, [r6, #7]
	id_create(new_id, addr, irk);
    6310:	f7ff fdf4 	bl	5efc <id_create.constprop.0>
	return new_id;
    6314:	e7dc      	b.n	62d0 <bt_id_create+0x58>
		return -ENOMEM;
    6316:	f06f 040b 	mvn.w	r4, #11
    631a:	e7d9      	b.n	62d0 <bt_id_create+0x58>
    631c:	00020e00 	.word	0x00020e00
    6320:	00020ef0 	.word	0x00020ef0
    6324:	000239e2 	.word	0x000239e2
    6328:	20000000 	.word	0x20000000

0000632c <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
    632c:	b570      	push	{r4, r5, r6, lr}
    632e:	b086      	sub	sp, #24
    6330:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    6332:	aa01      	add	r2, sp, #4
    6334:	2100      	movs	r1, #0
    6336:	f241 0009 	movw	r0, #4105	; 0x1009
    633a:	f7ff f8d1 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    633e:	4604      	mov	r4, r0
    6340:	b160      	cbz	r0, 635c <bt_id_read_public_addr+0x30>
    6342:	491e      	ldr	r1, [pc, #120]	; (63bc <bt_id_read_public_addr+0x90>)
    6344:	4b1e      	ldr	r3, [pc, #120]	; (63c0 <bt_id_read_public_addr+0x94>)
		BT_WARN("Failed to read public address");
    6346:	481f      	ldr	r0, [pc, #124]	; (63c4 <bt_id_read_public_addr+0x98>)
    6348:	1ac9      	subs	r1, r1, r3
    634a:	08c9      	lsrs	r1, r1, #3
    634c:	0189      	lsls	r1, r1, #6
    634e:	f041 0102 	orr.w	r1, r1, #2
    6352:	f015 fe4e 	bl	1bff2 <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
    6356:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
    6358:	b006      	add	sp, #24
    635a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    635c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    635e:	9002      	str	r0, [sp, #8]
    6360:	689d      	ldr	r5, [r3, #8]
    6362:	f8ad 000c 	strh.w	r0, [sp, #12]
    6366:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
    6368:	2206      	movs	r2, #6
    636a:	a902      	add	r1, sp, #8
    636c:	4628      	mov	r0, r5
    636e:	f017 fb3c 	bl	1d9ea <memcmp>
    6372:	b918      	cbnz	r0, 637c <bt_id_read_public_addr+0x50>
		net_buf_unref(rsp);
    6374:	9801      	ldr	r0, [sp, #4]
    6376:	f012 fdbf 	bl	18ef8 <net_buf_unref>
    637a:	e7ec      	b.n	6356 <bt_id_read_public_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    637c:	23ff      	movs	r3, #255	; 0xff
    637e:	2206      	movs	r2, #6
    6380:	a904      	add	r1, sp, #16
    6382:	4628      	mov	r0, r5
    6384:	f88d 3010 	strb.w	r3, [sp, #16]
    6388:	f88d 3011 	strb.w	r3, [sp, #17]
    638c:	f88d 3012 	strb.w	r3, [sp, #18]
    6390:	f88d 3013 	strb.w	r3, [sp, #19]
    6394:	f88d 3014 	strb.w	r3, [sp, #20]
    6398:	f88d 3015 	strb.w	r3, [sp, #21]
    639c:	f017 fb25 	bl	1d9ea <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    63a0:	2800      	cmp	r0, #0
    63a2:	d0e7      	beq.n	6374 <bt_id_read_public_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
    63a4:	2206      	movs	r2, #6
    63a6:	4629      	mov	r1, r5
    63a8:	1c70      	adds	r0, r6, #1
    63aa:	f017 fb2f 	bl	1da0c <memcpy>
	net_buf_unref(rsp);
    63ae:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    63b0:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
    63b2:	f012 fda1 	bl	18ef8 <net_buf_unref>
	return 1U;
    63b6:	2001      	movs	r0, #1
    63b8:	e7ce      	b.n	6358 <bt_id_read_public_addr+0x2c>
    63ba:	bf00      	nop
    63bc:	00020ef0 	.word	0x00020ef0
    63c0:	00020e00 	.word	0x00020e00
    63c4:	00023a10 	.word	0x00023a10

000063c8 <bt_setup_public_id_addr>:

void bt_setup_public_id_addr(void)
{
    63c8:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
    63ca:	4668      	mov	r0, sp
    63cc:	f7ff ffae 	bl	632c <bt_id_read_public_addr>
    63d0:	4b04      	ldr	r3, [pc, #16]	; (63e4 <bt_setup_public_id_addr+0x1c>)
    63d2:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
    63d4:	b118      	cbz	r0, 63de <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	id_create(BT_ID_DEFAULT, &addr, irk);
    63d6:	4669      	mov	r1, sp
    63d8:	2000      	movs	r0, #0
    63da:	f7ff fd8f 	bl	5efc <id_create.constprop.0>
}
    63de:	b003      	add	sp, #12
    63e0:	f85d fb04 	ldr.w	pc, [sp], #4
    63e4:	20000000 	.word	0x20000000

000063e8 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
    63e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    63ec:	4b25      	ldr	r3, [pc, #148]	; (6484 <bt_read_static_addr+0x9c>)
    63ee:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    63f2:	f014 0401 	ands.w	r4, r4, #1
{
    63f6:	4607      	mov	r7, r0
    63f8:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    63fa:	d10a      	bne.n	6412 <bt_read_static_addr+0x2a>
    63fc:	4922      	ldr	r1, [pc, #136]	; (6488 <bt_read_static_addr+0xa0>)
    63fe:	4b23      	ldr	r3, [pc, #140]	; (648c <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    6400:	4823      	ldr	r0, [pc, #140]	; (6490 <bt_read_static_addr+0xa8>)
    6402:	1ac9      	subs	r1, r1, r3
    6404:	08c9      	lsrs	r1, r1, #3
    6406:	0189      	lsls	r1, r1, #6
    6408:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
    640c:	f015 fdf1 	bl	1bff2 <log_0>
    6410:	e012      	b.n	6438 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    6412:	aa01      	add	r2, sp, #4
    6414:	2100      	movs	r1, #0
    6416:	f64f 4009 	movw	r0, #64521	; 0xfc09
    641a:	f7ff f861 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    641e:	4605      	mov	r5, r0
    6420:	b170      	cbz	r0, 6440 <bt_read_static_addr+0x58>
    6422:	4b1a      	ldr	r3, [pc, #104]	; (648c <bt_read_static_addr+0xa4>)
    6424:	4918      	ldr	r1, [pc, #96]	; (6488 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    6426:	481b      	ldr	r0, [pc, #108]	; (6494 <bt_read_static_addr+0xac>)
    6428:	1ac9      	subs	r1, r1, r3
    642a:	08c9      	lsrs	r1, r1, #3
    642c:	0189      	lsls	r1, r1, #6
    642e:	f041 0102 	orr.w	r1, r1, #2
    6432:	f015 fdde 	bl	1bff2 <log_0>
		return 0;
    6436:	2400      	movs	r4, #0
	}

	return cnt;
}
    6438:	4620      	mov	r0, r4
    643a:	b002      	add	sp, #8
    643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    6440:	9b01      	ldr	r3, [sp, #4]
    6442:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    6444:	785c      	ldrb	r4, [r3, #1]
    6446:	42b4      	cmp	r4, r6
    6448:	bf28      	it	cs
    644a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    644c:	f04f 0816 	mov.w	r8, #22
    6450:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    6452:	42a5      	cmp	r5, r4
    6454:	db0d      	blt.n	6472 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    6456:	9801      	ldr	r0, [sp, #4]
    6458:	f012 fd4e 	bl	18ef8 <net_buf_unref>
	if (!cnt) {
    645c:	2c00      	cmp	r4, #0
    645e:	d1eb      	bne.n	6438 <bt_read_static_addr+0x50>
    6460:	4909      	ldr	r1, [pc, #36]	; (6488 <bt_read_static_addr+0xa0>)
    6462:	4b0a      	ldr	r3, [pc, #40]	; (648c <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    6464:	480c      	ldr	r0, [pc, #48]	; (6498 <bt_read_static_addr+0xb0>)
    6466:	1ac9      	subs	r1, r1, r3
    6468:	08c9      	lsrs	r1, r1, #3
    646a:	0189      	lsls	r1, r1, #6
    646c:	f041 0102 	orr.w	r1, r1, #2
    6470:	e7cc      	b.n	640c <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    6472:	fb08 7005 	mla	r0, r8, r5, r7
    6476:	2216      	movs	r2, #22
    6478:	4631      	mov	r1, r6
    647a:	f017 fac7 	bl	1da0c <memcpy>
	for (i = 0; i < cnt; i++) {
    647e:	3501      	adds	r5, #1
    6480:	e7e7      	b.n	6452 <bt_read_static_addr+0x6a>
    6482:	bf00      	nop
    6484:	20000000 	.word	0x20000000
    6488:	00020ef0 	.word	0x00020ef0
    648c:	00020e00 	.word	0x00020e00
    6490:	00023a2e 	.word	0x00023a2e
    6494:	00023a5a 	.word	0x00023a5a
    6498:	00023a7a 	.word	0x00023a7a

0000649c <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
    649c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
    649e:	4d15      	ldr	r5, [pc, #84]	; (64f4 <bt_setup_random_id_addr+0x58>)
    64a0:	79ec      	ldrb	r4, [r5, #7]
{
    64a2:	b089      	sub	sp, #36	; 0x24
	if (!bt_dev.id_count) {
    64a4:	b9f4      	cbnz	r4, 64e4 <bt_setup_random_id_addr+0x48>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    64a6:	2101      	movs	r1, #1
    64a8:	a802      	add	r0, sp, #8
    64aa:	f7ff ff9d 	bl	63e8 <bt_read_static_addr>
    64ae:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
    64b0:	b1c0      	cbz	r0, 64e4 <bt_setup_random_id_addr+0x48>
					atomic_set_bit(bt_dev.flags,
						       BT_DEV_STORE_ID);
				}
#endif /* CONFIG_BT_PRIVACY */

				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    64b2:	2716      	movs	r7, #22
    64b4:	b2e6      	uxtb	r6, r4
    64b6:	ab02      	add	r3, sp, #8
    64b8:	2206      	movs	r2, #6
    64ba:	fb07 3106 	mla	r1, r7, r6, r3
    64be:	f10d 0001 	add.w	r0, sp, #1
    64c2:	f017 faa3 	bl	1da0c <memcpy>
				addr.type = BT_ADDR_LE_RANDOM;
    64c6:	2301      	movs	r3, #1

				id_create(i, &addr, irk);
    64c8:	4669      	mov	r1, sp
    64ca:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    64cc:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    64d0:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    64d2:	f7ff fd13 	bl	5efc <id_create.constprop.0>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    64d6:	79ea      	ldrb	r2, [r5, #7]
    64d8:	b2e3      	uxtb	r3, r4
    64da:	429a      	cmp	r2, r3
    64dc:	d8ea      	bhi.n	64b4 <bt_setup_random_id_addr+0x18>
	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
}
    64de:	2000      	movs	r0, #0
    64e0:	b009      	add	sp, #36	; 0x24
    64e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return bt_id_create(NULL, NULL);
    64e4:	2100      	movs	r1, #0
    64e6:	4608      	mov	r0, r1
}
    64e8:	b009      	add	sp, #36	; 0x24
    64ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return bt_id_create(NULL, NULL);
    64ee:	f7ff bec3 	b.w	6278 <bt_id_create>
    64f2:	bf00      	nop
    64f4:	20000000 	.word	0x20000000

000064f8 <bt_id_set_adv_own_addr>:
}
#endif /* defined(CONFIG_BT_OBSERVER) */

int bt_id_set_adv_own_addr(struct bt_le_ext_adv *adv, uint32_t options,
			   bool dir_adv, uint8_t *own_addr_type)
{
    64f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int err = 0;

	/* Set which local identity address we're advertising with */
	id_addr = &bt_dev.id_addr[adv->id];

	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    64fc:	f011 0401 	ands.w	r4, r1, #1
	id_addr = &bt_dev.id_addr[adv->id];
    6500:	7805      	ldrb	r5, [r0, #0]
{
    6502:	460e      	mov	r6, r1
    6504:	4690      	mov	r8, r2
    6506:	461f      	mov	r7, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    6508:	d026      	beq.n	6558 <bt_id_set_adv_own_addr+0x60>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    650a:	4c23      	ldr	r4, [pc, #140]	; (6598 <bt_id_set_adv_own_addr+0xa0>)
    650c:	b12a      	cbz	r2, 651a <bt_id_set_adv_own_addr+0x22>
    650e:	0688      	lsls	r0, r1, #26
    6510:	d503      	bpl.n	651a <bt_id_set_adv_own_addr+0x22>
    6512:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
    6516:	0659      	lsls	r1, r3, #25
    6518:	d53a      	bpl.n	6590 <bt_id_set_adv_own_addr+0x98>
			 * If Static Random address is used as Identity
			 * address we need to restore it before advertising
			 * is enabled. Otherwise NRPA used for active scan
			 * could be used for advertising.
			 */
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    651a:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    651e:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    6522:	5ce3      	ldrb	r3, [r4, r3]
    6524:	2b01      	cmp	r3, #1
    6526:	d008      	beq.n	653a <bt_id_set_adv_own_addr+0x42>
				if (err) {
					return err;
				}
			}

			*own_addr_type = id_addr->type;
    6528:	eba9 0505 	sub.w	r5, r9, r5
    652c:	5d63      	ldrb	r3, [r4, r5]

			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    652e:	f1b8 0f00 	cmp.w	r8, #0
    6532:	d10c      	bne.n	654e <bt_id_set_adv_own_addr+0x56>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    6534:	703b      	strb	r3, [r7, #0]
		if (err) {
			return err;
		}
	}

	return 0;
    6536:	2000      	movs	r0, #0
    6538:	e007      	b.n	654a <bt_id_set_adv_own_addr+0x52>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    653a:	2007      	movs	r0, #7
    653c:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    6540:	4420      	add	r0, r4
    6542:	f7ff fcad 	bl	5ea0 <set_random_address>
				if (err) {
    6546:	2800      	cmp	r0, #0
    6548:	d0ee      	beq.n	6528 <bt_id_set_adv_own_addr+0x30>
}
    654a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    654e:	06b2      	lsls	r2, r6, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    6550:	bf48      	it	mi
    6552:	f043 0302 	orrmi.w	r3, r3, #2
    6556:	e7ed      	b.n	6534 <bt_id_set_adv_own_addr+0x3c>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    6558:	074b      	lsls	r3, r1, #29
    655a:	d515      	bpl.n	6588 <bt_id_set_adv_own_addr+0x90>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    655c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 6598 <bt_id_set_adv_own_addr+0xa0>
    6560:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    6564:	00ee      	lsls	r6, r5, #3
    6566:	f818 3003 	ldrb.w	r3, [r8, r3]
    656a:	2b01      	cmp	r3, #1
    656c:	d10a      	bne.n	6584 <bt_id_set_adv_own_addr+0x8c>
				err = bt_id_set_adv_random_addr(adv, &id_addr->a);
    656e:	2007      	movs	r0, #7
    6570:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    6574:	4440      	add	r0, r8
    6576:	f7ff fc93 	bl	5ea0 <set_random_address>
			*own_addr_type = id_addr->type;
    657a:	1b75      	subs	r5, r6, r5
    657c:	f818 3005 	ldrb.w	r3, [r8, r5]
			*own_addr_type = BT_ADDR_LE_RANDOM;
    6580:	703b      	strb	r3, [r7, #0]
		if (err) {
    6582:	e7e2      	b.n	654a <bt_id_set_adv_own_addr+0x52>
	int err = 0;
    6584:	4620      	mov	r0, r4
    6586:	e7f8      	b.n	657a <bt_id_set_adv_own_addr+0x82>
			err = bt_id_set_adv_private_addr(adv);
    6588:	f017 fd0e 	bl	1dfa8 <bt_id_set_adv_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    658c:	2301      	movs	r3, #1
    658e:	e7f7      	b.n	6580 <bt_id_set_adv_own_addr+0x88>
			return -ENOTSUP;
    6590:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6594:	e7d9      	b.n	654a <bt_id_set_adv_own_addr+0x52>
    6596:	bf00      	nop
    6598:	20000000 	.word	0x20000000

0000659c <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
    659c:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    659e:	4d14      	ldr	r5, [pc, #80]	; (65f0 <bt_id_init+0x54>)
    65a0:	79eb      	ldrb	r3, [r5, #7]
    65a2:	b113      	cbz	r3, 65aa <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
    65a4:	2400      	movs	r4, #0
}
    65a6:	4620      	mov	r0, r4
    65a8:	bd38      	pop	{r3, r4, r5, pc}
		bt_setup_public_id_addr();
    65aa:	f7ff ff0d 	bl	63c8 <bt_setup_public_id_addr>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
    65ae:	79eb      	ldrb	r3, [r5, #7]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d1f7      	bne.n	65a4 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
    65b4:	f7ff ff72 	bl	649c <bt_setup_random_id_addr>
		if (err) {
    65b8:	4604      	mov	r4, r0
    65ba:	b150      	cbz	r0, 65d2 <bt_id_init+0x36>
    65bc:	490d      	ldr	r1, [pc, #52]	; (65f4 <bt_id_init+0x58>)
    65be:	4b0e      	ldr	r3, [pc, #56]	; (65f8 <bt_id_init+0x5c>)
			BT_ERR("Unable to set identity address");
    65c0:	480e      	ldr	r0, [pc, #56]	; (65fc <bt_id_init+0x60>)
    65c2:	1ac9      	subs	r1, r1, r3
    65c4:	08c9      	lsrs	r1, r1, #3
    65c6:	0189      	lsls	r1, r1, #6
    65c8:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
    65cc:	f015 fd11 	bl	1bff2 <log_0>
			return err;
    65d0:	e7e9      	b.n	65a6 <bt_id_init+0xa>
		err = set_random_address(&bt_dev.id_addr[0].a);
    65d2:	1c68      	adds	r0, r5, #1
    65d4:	f7ff fc64 	bl	5ea0 <set_random_address>
		if (err) {
    65d8:	4604      	mov	r4, r0
    65da:	2800      	cmp	r0, #0
    65dc:	d0e3      	beq.n	65a6 <bt_id_init+0xa>
    65de:	4905      	ldr	r1, [pc, #20]	; (65f4 <bt_id_init+0x58>)
    65e0:	4b05      	ldr	r3, [pc, #20]	; (65f8 <bt_id_init+0x5c>)
			BT_ERR("Unable to set random address");
    65e2:	4807      	ldr	r0, [pc, #28]	; (6600 <bt_id_init+0x64>)
    65e4:	1ac9      	subs	r1, r1, r3
    65e6:	08c9      	lsrs	r1, r1, #3
    65e8:	0189      	lsls	r1, r1, #6
    65ea:	f041 0101 	orr.w	r1, r1, #1
    65ee:	e7ed      	b.n	65cc <bt_id_init+0x30>
    65f0:	20000000 	.word	0x20000000
    65f4:	00020ef0 	.word	0x00020ef0
    65f8:	00020e00 	.word	0x00020e00
    65fc:	00023aa3 	.word	0x00023aa3
    6600:	00023ac2 	.word	0x00023ac2

00006604 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    6604:	6843      	ldr	r3, [r0, #4]
{
    6606:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6608:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    660a:	0558      	lsls	r0, r3, #21
    660c:	d502      	bpl.n	6614 <valid_adv_param+0x10>
		return false;
    660e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    6610:	b003      	add	sp, #12
    6612:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6614:	6922      	ldr	r2, [r4, #16]
    6616:	b10a      	cbz	r2, 661c <valid_adv_param+0x18>
    6618:	07d9      	lsls	r1, r3, #31
    661a:	d5f8      	bpl.n	660e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    661c:	4d1a      	ldr	r5, [pc, #104]	; (6688 <valid_adv_param+0x84>)
    661e:	7820      	ldrb	r0, [r4, #0]
    6620:	79eb      	ldrb	r3, [r5, #7]
    6622:	4283      	cmp	r3, r0
    6624:	d9f3      	bls.n	660e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    6626:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    662a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
    662c:	2207      	movs	r2, #7
    662e:	4669      	mov	r1, sp
    6630:	4428      	add	r0, r5
    6632:	9300      	str	r3, [sp, #0]
    6634:	f8cd 3003 	str.w	r3, [sp, #3]
    6638:	f017 f9d7 	bl	1d9ea <memcmp>
	if (param->id >= bt_dev.id_count ||
    663c:	2800      	cmp	r0, #0
    663e:	d0e6      	beq.n	660e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6640:	6860      	ldr	r0, [r4, #4]
    6642:	07c2      	lsls	r2, r0, #31
    6644:	d406      	bmi.n	6654 <valid_adv_param+0x50>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    6646:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    664a:	2b08      	cmp	r3, #8
    664c:	d802      	bhi.n	6654 <valid_adv_param+0x50>
    664e:	68a3      	ldr	r3, [r4, #8]
    6650:	2b9f      	cmp	r3, #159	; 0x9f
    6652:	d9dc      	bls.n	660e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    6654:	f010 0f30 	tst.w	r0, #48	; 0x30
    6658:	d002      	beq.n	6660 <valid_adv_param+0x5c>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    665a:	6923      	ldr	r3, [r4, #16]
    665c:	2b00      	cmp	r3, #0
    665e:	d0d6      	beq.n	660e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    6660:	06c3      	lsls	r3, r0, #27
    6662:	d401      	bmi.n	6668 <valid_adv_param+0x64>
    6664:	6923      	ldr	r3, [r4, #16]
    6666:	b943      	cbnz	r3, 667a <valid_adv_param+0x76>
		if (param->interval_min > param->interval_max ||
    6668:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    666c:	429a      	cmp	r2, r3
    666e:	d8ce      	bhi.n	660e <valid_adv_param+0xa>
    6670:	2a1f      	cmp	r2, #31
    6672:	d9cc      	bls.n	660e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    6674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6678:	d8c9      	bhi.n	660e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    667a:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    667e:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    6682:	bf18      	it	ne
    6684:	2001      	movne	r0, #1
    6686:	e7c3      	b.n	6610 <valid_adv_param+0xc>
    6688:	20000000 	.word	0x20000000

0000668c <hci_set_ad>:
	*data_len = set_data_len;
	return 0;
}

static int hci_set_ad(uint16_t hci_op, const struct bt_ad *ad, size_t ad_len)
{
    668c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6690:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6692:	2120      	movs	r1, #32
{
    6694:	4682      	mov	sl, r0
    6696:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    6698:	f7fe fd60 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    669c:	4606      	mov	r6, r0
    669e:	2800      	cmp	r0, #0
    66a0:	d05c      	beq.n	675c <hci_set_ad+0xd0>
    66a2:	2120      	movs	r1, #32
    66a4:	3008      	adds	r0, #8
    66a6:	f019 fb10 	bl	1fcca <net_buf_simple_add>
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
	(void)memset(set_data, 0, sizeof(*set_data));
    66aa:	2220      	movs	r2, #32
    66ac:	2100      	movs	r1, #0
    66ae:	4681      	mov	r9, r0
    66b0:	f017 f9b7 	bl	1da22 <memset>

	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    66b4:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    66b8:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    66bc:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    66be:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    66c0:	f8d4 8000 	ldr.w	r8, [r4]
    66c4:	2300      	movs	r3, #0
    66c6:	6862      	ldr	r2, [r4, #4]
    66c8:	4293      	cmp	r3, r2
    66ca:	d30d      	bcc.n	66e8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    66cc:	9b00      	ldr	r3, [sp, #0]
    66ce:	3408      	adds	r4, #8
    66d0:	429c      	cmp	r4, r3
    66d2:	d1f5      	bne.n	66c0 <hci_set_ad+0x34>
	if (err) {
		net_buf_unref(buf);
		return err;
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    66d4:	2200      	movs	r2, #0
    66d6:	4631      	mov	r1, r6
    66d8:	4650      	mov	r0, sl
	*data_len = set_data_len;
    66da:	f889 5000 	strb.w	r5, [r9]
}
    66de:	b003      	add	sp, #12
    66e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    66e4:	f7fe befc 	b.w	54e0 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    66e8:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    66ec:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    66f0:	1ca8      	adds	r0, r5, #2
    66f2:	1881      	adds	r1, r0, r2
    66f4:	291f      	cmp	r1, #31
    66f6:	d91a      	bls.n	672e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    66f8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    66fc:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    6700:	d101      	bne.n	6706 <hci_set_ad+0x7a>
    6702:	2a00      	cmp	r2, #0
    6704:	dc11      	bgt.n	672a <hci_set_ad+0x9e>
    6706:	4b17      	ldr	r3, [pc, #92]	; (6764 <hci_set_ad+0xd8>)
    6708:	4917      	ldr	r1, [pc, #92]	; (6768 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    670a:	4818      	ldr	r0, [pc, #96]	; (676c <hci_set_ad+0xe0>)
    670c:	1ac9      	subs	r1, r1, r3
    670e:	08c9      	lsrs	r1, r1, #3
    6710:	0189      	lsls	r1, r1, #6
    6712:	f041 0101 	orr.w	r1, r1, #1
    6716:	f015 fc6c 	bl	1bff2 <log_0>
		net_buf_unref(buf);
    671a:	4630      	mov	r0, r6
    671c:	f012 fbec 	bl	18ef8 <net_buf_unref>
					return -EINVAL;
    6720:	f06f 0015 	mvn.w	r0, #21
}
    6724:	b003      	add	sp, #12
    6726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    672a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    672e:	b2d7      	uxtb	r7, r2
    6730:	1c79      	adds	r1, r7, #1
    6732:	f80b 1005 	strb.w	r1, [fp, r5]
    6736:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    6738:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    673a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    673e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    6742:	f8d8 1004 	ldr.w	r1, [r8, #4]
    6746:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    6748:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    674a:	f017 f95f 	bl	1da0c <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    674e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    6750:	443d      	add	r5, r7
    6752:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    6754:	3301      	adds	r3, #1
    6756:	f108 0808 	add.w	r8, r8, #8
    675a:	e7b4      	b.n	66c6 <hci_set_ad+0x3a>
		return -ENOBUFS;
    675c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    6760:	e7e0      	b.n	6724 <hci_set_ad+0x98>
    6762:	bf00      	nop
    6764:	00020e00 	.word	0x00020e00
    6768:	00020e00 	.word	0x00020e00
    676c:	00023ae5 	.word	0x00023ae5

00006770 <le_adv_start_add_conn>:
	return channel_map;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    6770:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_conn *conn;

	bt_dev.adv_conn_id = adv->id;
    6772:	4606      	mov	r6, r0
    6774:	4b1e      	ldr	r3, [pc, #120]	; (67f0 <le_adv_start_add_conn+0x80>)
    6776:	f816 2b09 	ldrb.w	r2, [r6], #9
    677a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
{
    677e:	b085      	sub	sp, #20

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    6780:	2300      	movs	r3, #0
{
    6782:	4605      	mov	r5, r0
    6784:	2207      	movs	r2, #7
    6786:	460f      	mov	r7, r1
    6788:	4630      	mov	r0, r6
    678a:	4669      	mov	r1, sp
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    678c:	9300      	str	r3, [sp, #0]
    678e:	f8cd 3003 	str.w	r3, [sp, #3]
    6792:	f017 f92a 	bl	1d9ea <memcmp>
    6796:	782a      	ldrb	r2, [r5, #0]
    6798:	4604      	mov	r4, r0
    679a:	b9a8      	cbnz	r0, 67c8 <le_adv_start_add_conn+0x58>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    679c:	4b15      	ldr	r3, [pc, #84]	; (67f4 <le_adv_start_add_conn+0x84>)
    679e:	6818      	ldr	r0, [r3, #0]
    67a0:	8899      	ldrh	r1, [r3, #4]
    67a2:	9002      	str	r0, [sp, #8]
    67a4:	799b      	ldrb	r3, [r3, #6]
    67a6:	f8ad 100c 	strh.w	r1, [sp, #12]
    67aa:	4610      	mov	r0, r2
    67ac:	a902      	add	r1, sp, #8
    67ae:	f88d 300e 	strb.w	r3, [sp, #14]
    67b2:	f000 fec3 	bl	753c <bt_conn_add_le>
		if (!conn) {
    67b6:	4605      	mov	r5, r0
    67b8:	b1b8      	cbz	r0, 67ea <le_adv_start_add_conn+0x7a>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    67ba:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    67bc:	f000 fd1c 	bl	71f8 <bt_conn_set_state>
	*out_conn = conn;
    67c0:	603d      	str	r5, [r7, #0]
	return 0;
}
    67c2:	4620      	mov	r0, r4
    67c4:	b005      	add	sp, #20
    67c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    67c8:	4631      	mov	r1, r6
    67ca:	4610      	mov	r0, r2
    67cc:	f000 fef0 	bl	75b0 <bt_conn_exists_le>
    67d0:	4604      	mov	r4, r0
    67d2:	b938      	cbnz	r0, 67e4 <le_adv_start_add_conn+0x74>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    67d4:	7828      	ldrb	r0, [r5, #0]
    67d6:	4631      	mov	r1, r6
    67d8:	f000 feb0 	bl	753c <bt_conn_add_le>
	if (!conn) {
    67dc:	4605      	mov	r5, r0
    67de:	b120      	cbz	r0, 67ea <le_adv_start_add_conn+0x7a>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    67e0:	2105      	movs	r1, #5
    67e2:	e7eb      	b.n	67bc <le_adv_start_add_conn+0x4c>
		return -EINVAL;
    67e4:	f06f 0415 	mvn.w	r4, #21
    67e8:	e7eb      	b.n	67c2 <le_adv_start_add_conn+0x52>
		return -ENOMEM;
    67ea:	f06f 040b 	mvn.w	r4, #11
    67ee:	e7e8      	b.n	67c2 <le_adv_start_add_conn+0x52>
    67f0:	20000000 	.word	0x20000000
    67f4:	00021074 	.word	0x00021074

000067f8 <bt_le_ext_adv_foreach>:
{
    67f8:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    67fa:	4801      	ldr	r0, [pc, #4]	; (6800 <bt_le_ext_adv_foreach+0x8>)
    67fc:	4718      	bx	r3
    67fe:	bf00      	nop
    6800:	20000018 	.word	0x20000018

00006804 <bt_le_adv_lookup_legacy>:
}
    6804:	4800      	ldr	r0, [pc, #0]	; (6808 <bt_le_adv_lookup_legacy+0x4>)
    6806:	4770      	bx	lr
    6808:	20000018 	.word	0x20000018

0000680c <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    6810:	690e      	ldr	r6, [r1, #16]
{
    6812:	b08f      	sub	sp, #60	; 0x3c
    6814:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    6816:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    6818:	ebb6 0b03 	subs.w	fp, r6, r3
{
    681c:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    681e:	488f      	ldr	r0, [pc, #572]	; (6a5c <bt_le_adv_start_legacy+0x250>)
	struct bt_conn *conn = NULL;
    6820:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    6822:	bf18      	it	ne
    6824:	f04f 0b01 	movne.w	fp, #1
    6828:	f017 fbf1 	bl	1e00e <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    682c:	0787      	lsls	r7, r0, #30
{
    682e:	460c      	mov	r4, r1
    6830:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    6832:	f140 8108 	bpl.w	6a46 <bt_le_adv_start_legacy+0x23a>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    6836:	4608      	mov	r0, r1
    6838:	f7ff fee4 	bl	6604 <valid_adv_param>
    683c:	b928      	cbnz	r0, 684a <bt_le_adv_start_legacy+0x3e>
		return -EINVAL;
    683e:	f06f 0b15 	mvn.w	fp, #21

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    6842:	4658      	mov	r0, fp
    6844:	b00f      	add	sp, #60	; 0x3c
    6846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!bt_id_adv_random_addr_check(param)) {
    684a:	4620      	mov	r0, r4
    684c:	f017 fbbe 	bl	1dfcc <bt_id_adv_random_addr_check>
    6850:	4680      	mov	r8, r0
    6852:	2800      	cmp	r0, #0
    6854:	d0f3      	beq.n	683e <bt_le_adv_start_legacy+0x32>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    6856:	f105 0710 	add.w	r7, r5, #16
    685a:	4638      	mov	r0, r7
    685c:	f017 fbd7 	bl	1e00e <atomic_get>
    6860:	f3c0 1180 	ubfx	r1, r0, #6, #1
    6864:	0640      	lsls	r0, r0, #25
    6866:	f100 80f1 	bmi.w	6a4c <bt_le_adv_start_legacy+0x240>
	(void)memset(&set_param, 0, sizeof(set_param));
    686a:	220f      	movs	r2, #15
    686c:	a80a      	add	r0, sp, #40	; 0x28
    686e:	9105      	str	r1, [sp, #20]
    6870:	f017 f8d7 	bl	1da22 <memset>
	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    6874:	68a3      	ldr	r3, [r4, #8]
    6876:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.channel_map  = get_adv_channel_map(param->options);
    687a:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    687c:	68e3      	ldr	r3, [r4, #12]
    687e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    6882:	f017 fbb5 	bl	1dff0 <get_adv_channel_map>
	if (adv->id != param->id) {
    6886:	782a      	ldrb	r2, [r5, #0]
    6888:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    688a:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    688c:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    6890:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    6892:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    6896:	d004      	beq.n	68a2 <bt_le_adv_start_legacy+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6898:	4870      	ldr	r0, [pc, #448]	; (6a5c <bt_le_adv_start_legacy+0x250>)
    689a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    689e:	f017 fbbc 	bl	1e01a <atomic_and>
	bt_dev.adv_conn_id = adv->id;
    68a2:	4a6f      	ldr	r2, [pc, #444]	; (6a60 <bt_le_adv_start_legacy+0x254>)
	adv->id = param->id;
    68a4:	7823      	ldrb	r3, [r4, #0]
    68a6:	702b      	strb	r3, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    68a8:	f882 3033 	strb.w	r3, [r2, #51]	; 0x33
	err = bt_id_set_adv_own_addr(adv, param->options, dir_adv,
    68ac:	6861      	ldr	r1, [r4, #4]
    68ae:	465a      	mov	r2, fp
    68b0:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    68b4:	4628      	mov	r0, r5
    68b6:	f7ff fe1f 	bl	64f8 <bt_id_set_adv_own_addr>
	if (err) {
    68ba:	4683      	mov	fp, r0
    68bc:	2800      	cmp	r0, #0
    68be:	d1c0      	bne.n	6842 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    68c0:	f105 0009 	add.w	r0, r5, #9
	if (dir_adv) {
    68c4:	2e00      	cmp	r6, #0
    68c6:	d04d      	beq.n	6964 <bt_le_adv_start_legacy+0x158>
	memcpy(dst, src, sizeof(*dst));
    68c8:	6921      	ldr	r1, [r4, #16]
    68ca:	2207      	movs	r2, #7
    68cc:	f017 f89e 	bl	1da0c <memcpy>
	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    68d0:	6860      	ldr	r0, [r4, #4]
    68d2:	07c1      	lsls	r1, r0, #31
    68d4:	d54f      	bpl.n	6976 <bt_le_adv_start_legacy+0x16a>
		if (dir_adv) {
    68d6:	2e00      	cmp	r6, #0
    68d8:	d04a      	beq.n	6970 <bt_le_adv_start_legacy+0x164>
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    68da:	f010 0f10 	tst.w	r0, #16
    68de:	bf14      	ite	ne
    68e0:	2304      	movne	r3, #4
    68e2:	2301      	moveq	r3, #1
    68e4:	6921      	ldr	r1, [r4, #16]
    68e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    68ea:	2207      	movs	r2, #7
    68ec:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    68f0:	f017 f88c 	bl	1da0c <memcpy>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    68f4:	210f      	movs	r1, #15
    68f6:	f242 0006 	movw	r0, #8198	; 0x2006
    68fa:	f7fe fc2f 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    68fe:	4683      	mov	fp, r0
    6900:	2800      	cmp	r0, #0
    6902:	f000 80a6 	beq.w	6a52 <bt_le_adv_start_legacy+0x246>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    6906:	220f      	movs	r2, #15
    6908:	a90a      	add	r1, sp, #40	; 0x28
    690a:	3008      	adds	r0, #8
    690c:	f019 f9e3 	bl	1fcd6 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    6910:	2200      	movs	r2, #0
    6912:	4659      	mov	r1, fp
    6914:	f242 0006 	movw	r0, #8198	; 0x2006
    6918:	f7fe fde2 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    691c:	2800      	cmp	r0, #0
    691e:	f040 809b 	bne.w	6a58 <bt_le_adv_start_legacy+0x24c>
	if (!dir_adv) {
    6922:	2e00      	cmp	r6, #0
    6924:	d033      	beq.n	698e <bt_le_adv_start_legacy+0x182>
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6926:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6928:	07da      	lsls	r2, r3, #31
    692a:	d444      	bmi.n	69b6 <bt_le_adv_start_legacy+0x1aa>
	return bt_le_adv_set_enable_legacy(adv, enable);
    692c:	2101      	movs	r1, #1
    692e:	4628      	mov	r0, r5
    6930:	f017 fc1a 	bl	1e168 <bt_le_adv_set_enable_legacy>
	if (err) {
    6934:	4683      	mov	fp, r0
    6936:	2800      	cmp	r0, #0
    6938:	d07e      	beq.n	6a38 <bt_le_adv_start_legacy+0x22c>
    693a:	4b4a      	ldr	r3, [pc, #296]	; (6a64 <bt_le_adv_start_legacy+0x258>)
    693c:	494a      	ldr	r1, [pc, #296]	; (6a68 <bt_le_adv_start_legacy+0x25c>)
		BT_ERR("Failed to start advertiser");
    693e:	484b      	ldr	r0, [pc, #300]	; (6a6c <bt_le_adv_start_legacy+0x260>)
    6940:	1ac9      	subs	r1, r1, r3
    6942:	08c9      	lsrs	r1, r1, #3
    6944:	0189      	lsls	r1, r1, #6
    6946:	f041 0101 	orr.w	r1, r1, #1
    694a:	f015 fb52 	bl	1bff2 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    694e:	9807      	ldr	r0, [sp, #28]
    6950:	2800      	cmp	r0, #0
    6952:	f43f af76 	beq.w	6842 <bt_le_adv_start_legacy+0x36>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6956:	2100      	movs	r1, #0
    6958:	f000 fc4e 	bl	71f8 <bt_conn_set_state>
			bt_conn_unref(conn);
    695c:	9807      	ldr	r0, [sp, #28]
    695e:	f017 fca1 	bl	1e2a4 <bt_conn_unref>
    6962:	e76e      	b.n	6842 <bt_le_adv_start_legacy+0x36>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    6964:	9608      	str	r6, [sp, #32]
    6966:	2207      	movs	r2, #7
    6968:	f8cd 6023 	str.w	r6, [sp, #35]	; 0x23
    696c:	a908      	add	r1, sp, #32
    696e:	e7ad      	b.n	68cc <bt_le_adv_start_legacy+0xc0>
			set_param.type = BT_HCI_ADV_IND;
    6970:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
    6974:	e7be      	b.n	68f4 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    6976:	9b18      	ldr	r3, [sp, #96]	; 0x60
    6978:	b933      	cbnz	r3, 6988 <bt_le_adv_start_legacy+0x17c>
    697a:	f3c0 08c0 	ubfx	r8, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    697e:	f1c8 0303 	rsb	r3, r8, #3
    6982:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    6986:	e7b5      	b.n	68f4 <bt_le_adv_start_legacy+0xe8>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    6988:	f04f 0801 	mov.w	r8, #1
    698c:	e7f7      	b.n	697e <bt_le_adv_start_legacy+0x172>
				    param->options & BT_LE_ADV_OPT_USE_NAME,
    698e:	6863      	ldr	r3, [r4, #4]
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    6990:	f3c3 4280 	ubfx	r2, r3, #18, #1
    6994:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    6998:	e9cd 8301 	strd	r8, r3, [sp, #4]
    699c:	9b19      	ldr	r3, [sp, #100]	; 0x64
    699e:	9203      	str	r2, [sp, #12]
    69a0:	9300      	str	r3, [sp, #0]
    69a2:	4652      	mov	r2, sl
    69a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
    69a6:	4649      	mov	r1, r9
    69a8:	4628      	mov	r0, r5
    69aa:	f017 fb5c 	bl	1e066 <le_adv_update.constprop.0>
		if (err) {
    69ae:	4683      	mov	fp, r0
    69b0:	2800      	cmp	r0, #0
    69b2:	d0b8      	beq.n	6926 <bt_le_adv_start_legacy+0x11a>
    69b4:	e745      	b.n	6842 <bt_le_adv_start_legacy+0x36>
		err = le_adv_start_add_conn(adv, &conn);
    69b6:	a907      	add	r1, sp, #28
    69b8:	4628      	mov	r0, r5
    69ba:	f7ff fed9 	bl	6770 <le_adv_start_add_conn>
		if (err) {
    69be:	4683      	mov	fp, r0
    69c0:	2800      	cmp	r0, #0
    69c2:	d0b3      	beq.n	692c <bt_le_adv_start_legacy+0x120>
			if (err == -ENOMEM && !dir_adv &&
    69c4:	f110 0f0c 	cmn.w	r0, #12
    69c8:	f47f af3b 	bne.w	6842 <bt_le_adv_start_legacy+0x36>
    69cc:	2e00      	cmp	r6, #0
    69ce:	f47f af38 	bne.w	6842 <bt_le_adv_start_legacy+0x36>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    69d2:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    69d4:	079b      	lsls	r3, r3, #30
    69d6:	f53f af34 	bmi.w	6842 <bt_le_adv_start_legacy+0x36>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    69da:	6860      	ldr	r0, [r4, #4]
    69dc:	f080 0002 	eor.w	r0, r0, #2
    69e0:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    69e4:	f00b 0201 	and.w	r2, fp, #1
    69e8:	210c      	movs	r1, #12
    69ea:	4638      	mov	r0, r7
    69ec:	f017 fb24 	bl	1e038 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    69f0:	6862      	ldr	r2, [r4, #4]
    69f2:	2107      	movs	r1, #7
    69f4:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    69f8:	4638      	mov	r0, r7
    69fa:	f017 fb1d 	bl	1e038 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_FORCE_NAME_IN_AD,
    69fe:	6862      	ldr	r2, [r4, #4]
    6a00:	2112      	movs	r1, #18
    6a02:	f3c2 4280 	ubfx	r2, r2, #18, #1
    6a06:	4638      	mov	r0, r7
    6a08:	f017 fb16 	bl	1e038 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    6a0c:	6862      	ldr	r2, [r4, #4]
    6a0e:	2108      	movs	r1, #8
    6a10:	f002 0201 	and.w	r2, r2, #1
    6a14:	4638      	mov	r0, r7
    6a16:	f017 fb0f 	bl	1e038 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    6a1a:	4642      	mov	r2, r8
    6a1c:	2109      	movs	r1, #9
    6a1e:	4638      	mov	r0, r7
    6a20:	f017 fb0a 	bl	1e038 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    6a24:	6862      	ldr	r2, [r4, #4]
    6a26:	210b      	movs	r1, #11
    6a28:	f3c2 0280 	ubfx	r2, r2, #2, #1
    6a2c:	4638      	mov	r0, r7
    6a2e:	f017 fb03 	bl	1e038 <atomic_set_bit_to>
	return 0;
    6a32:	f04f 0b00 	mov.w	fp, #0
    6a36:	e704      	b.n	6842 <bt_le_adv_start_legacy+0x36>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    6a38:	9807      	ldr	r0, [sp, #28]
    6a3a:	b108      	cbz	r0, 6a40 <bt_le_adv_start_legacy+0x234>
		bt_conn_unref(conn);
    6a3c:	f017 fc32 	bl	1e2a4 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    6a40:	2e00      	cmp	r6, #0
    6a42:	d1cf      	bne.n	69e4 <bt_le_adv_start_legacy+0x1d8>
    6a44:	e7c9      	b.n	69da <bt_le_adv_start_legacy+0x1ce>
		return -EAGAIN;
    6a46:	f06f 0b0a 	mvn.w	fp, #10
    6a4a:	e6fa      	b.n	6842 <bt_le_adv_start_legacy+0x36>
		return -EALREADY;
    6a4c:	f06f 0b77 	mvn.w	fp, #119	; 0x77
    6a50:	e6f7      	b.n	6842 <bt_le_adv_start_legacy+0x36>
		return -ENOBUFS;
    6a52:	f06f 0b68 	mvn.w	fp, #104	; 0x68
    6a56:	e6f4      	b.n	6842 <bt_le_adv_start_legacy+0x36>
    6a58:	4683      	mov	fp, r0
    6a5a:	e6f2      	b.n	6842 <bt_le_adv_start_legacy+0x36>
    6a5c:	20000098 	.word	0x20000098
    6a60:	20000000 	.word	0x20000000
    6a64:	00020e00 	.word	0x00020e00
    6a68:	00020e00 	.word	0x00020e00
    6a6c:	00023afe 	.word	0x00023afe

00006a70 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    6a70:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_DEV_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    6a72:	9c04      	ldr	r4, [sp, #16]
    6a74:	e9cd 3400 	strd	r3, r4, [sp]
    6a78:	4613      	mov	r3, r2
    6a7a:	460a      	mov	r2, r1
    6a7c:	4601      	mov	r1, r0
    6a7e:	4802      	ldr	r0, [pc, #8]	; (6a88 <bt_le_adv_start+0x18>)
    6a80:	f7ff fec4 	bl	680c <bt_le_adv_start_legacy>
	if (err) {
		bt_le_adv_delete_legacy();
	}

	return err;
}
    6a84:	b002      	add	sp, #8
    6a86:	bd10      	pop	{r4, pc}
    6a88:	20000018 	.word	0x20000018

00006a8c <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    6a8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6a8e:	481e      	ldr	r0, [pc, #120]	; (6b08 <bt_le_adv_resume+0x7c>)
    6a90:	4c1d      	ldr	r4, [pc, #116]	; (6b08 <bt_le_adv_resume+0x7c>)
    6a92:	f017 fabc 	bl	1e00e <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    6a96:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    6a9a:	d032      	beq.n	6b02 <bt_le_adv_resume+0x76>
    6a9c:	4620      	mov	r0, r4
    6a9e:	f017 fab6 	bl	1e00e <atomic_get>
    6aa2:	0642      	lsls	r2, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    6aa4:	f3c0 1580 	ubfx	r5, r0, #6, #1
    6aa8:	d42b      	bmi.n	6b02 <bt_le_adv_resume+0x76>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6aaa:	4620      	mov	r0, r4
    6aac:	f017 faaf 	bl	1e00e <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    6ab0:	05c3      	lsls	r3, r0, #23
    6ab2:	d526      	bpl.n	6b02 <bt_le_adv_resume+0x76>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    6ab4:	a901      	add	r1, sp, #4
    6ab6:	f1a4 0010 	sub.w	r0, r4, #16
    6aba:	f7ff fe59 	bl	6770 <le_adv_start_add_conn>
	if (err) {
    6abe:	bb00      	cbnz	r0, 6b02 <bt_le_adv_resume+0x76>
	return bt_le_adv_set_enable_legacy(adv, enable);
    6ac0:	2101      	movs	r1, #1
    6ac2:	f1a4 0010 	sub.w	r0, r4, #16
    6ac6:	f017 fb4f 	bl	1e168 <bt_le_adv_set_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		bt_id_set_adv_private_addr(adv);
	}

	err = bt_le_adv_set_enable(adv, true);
	if (err) {
    6aca:	b150      	cbz	r0, 6ae2 <bt_le_adv_resume+0x56>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6acc:	4629      	mov	r1, r5
    6ace:	9801      	ldr	r0, [sp, #4]
    6ad0:	f000 fb92 	bl	71f8 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    6ad4:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    6ad8:	4620      	mov	r0, r4
    6ada:	f017 fa9e 	bl	1e01a <atomic_and>
	return (old & mask) != 0;
    6ade:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    6ae2:	9801      	ldr	r0, [sp, #4]
    6ae4:	f017 fbde 	bl	1e2a4 <bt_conn_unref>
	if (persist_paused) {
    6ae8:	b15d      	cbz	r5, 6b02 <bt_le_adv_resume+0x76>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6aea:	f3bf 8f5b 	dmb	ish
    6aee:	e854 3f00 	ldrex	r3, [r4]
    6af2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    6af6:	e844 3200 	strex	r2, r3, [r4]
    6afa:	2a00      	cmp	r2, #0
    6afc:	d1f7      	bne.n	6aee <bt_le_adv_resume+0x62>
    6afe:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    6b02:	b003      	add	sp, #12
    6b04:	bd30      	pop	{r4, r5, pc}
    6b06:	bf00      	nop
    6b08:	20000028 	.word	0x20000028

00006b0c <bt_pub_key_is_debug>:
	0x5c, 0x15, 0x52, 0x5a, 0xbf, 0x9a, 0x32, 0x63,
	0x6d, 0xeb, 0x2a, 0x65, 0x49, 0x9c, 0x80, 0xdc
};

bool bt_pub_key_is_debug(uint8_t *pub_key)
{
    6b0c:	b508      	push	{r3, lr}
	return memcmp(pub_key, debug_public_key, 64) == 0;
    6b0e:	4904      	ldr	r1, [pc, #16]	; (6b20 <bt_pub_key_is_debug+0x14>)
    6b10:	2240      	movs	r2, #64	; 0x40
    6b12:	f016 ff6a 	bl	1d9ea <memcmp>
}
    6b16:	fab0 f080 	clz	r0, r0
    6b1a:	0940      	lsrs	r0, r0, #5
    6b1c:	bd08      	pop	{r3, pc}
    6b1e:	bf00      	nop
    6b20:	00023bae 	.word	0x00023bae

00006b24 <bt_pub_key_gen>:

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    6b24:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    6b26:	4b44      	ldr	r3, [pc, #272]	; (6c38 <bt_pub_key_gen+0x114>)
    6b28:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    6b2c:	f003 0306 	and.w	r3, r3, #6
    6b30:	2b06      	cmp	r3, #6
    6b32:	d00d      	beq.n	6b50 <bt_pub_key_gen+0x2c>
    6b34:	4b41      	ldr	r3, [pc, #260]	; (6c3c <bt_pub_key_gen+0x118>)
    6b36:	4942      	ldr	r1, [pc, #264]	; (6c40 <bt_pub_key_gen+0x11c>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    6b38:	4842      	ldr	r0, [pc, #264]	; (6c44 <bt_pub_key_gen+0x120>)
    6b3a:	1ac9      	subs	r1, r1, r3
    6b3c:	08c9      	lsrs	r1, r1, #3
    6b3e:	0189      	lsls	r1, r1, #6
    6b40:	f041 0102 	orr.w	r1, r1, #2
    6b44:	f015 fa55 	bl	1bff2 <log_0>
		return -ENOTSUP;
    6b48:	f06f 0585 	mvn.w	r5, #133	; 0x85
		sys_slist_init(&pub_key_cb_slist);
		return err;
	}

	return 0;
}
    6b4c:	4628      	mov	r0, r5
    6b4e:	bd70      	pop	{r4, r5, r6, pc}
	if (!new_cb) {
    6b50:	2800      	cmp	r0, #0
    6b52:	d06d      	beq.n	6c30 <bt_pub_key_gen+0x10c>
	return list->head;
    6b54:	4e3c      	ldr	r6, [pc, #240]	; (6c48 <bt_pub_key_gen+0x124>)
    6b56:	6832      	ldr	r2, [r6, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6b58:	b10a      	cbz	r2, 6b5e <bt_pub_key_gen+0x3a>
    6b5a:	1f13      	subs	r3, r2, #4
    6b5c:	b9bb      	cbnz	r3, 6b8e <bt_pub_key_gen+0x6a>
	parent->next = child;
    6b5e:	6042      	str	r2, [r0, #4]
Z_GENLIST_PREPEND(slist, snode)
    6b60:	6872      	ldr	r2, [r6, #4]
	sys_slist_prepend(&pub_key_cb_slist, &new_cb->node);
    6b62:	1d03      	adds	r3, r0, #4
	list->head = node;
    6b64:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    6b66:	b902      	cbnz	r2, 6b6a <bt_pub_key_gen+0x46>
	list->tail = node;
    6b68:	6073      	str	r3, [r6, #4]
    6b6a:	4c38      	ldr	r4, [pc, #224]	; (6c4c <bt_pub_key_gen+0x128>)
    6b6c:	f3bf 8f5b 	dmb	ish
    6b70:	e854 2f00 	ldrex	r2, [r4]
    6b74:	f042 0310 	orr.w	r3, r2, #16
    6b78:	e844 3100 	strex	r1, r3, [r4]
    6b7c:	2900      	cmp	r1, #0
    6b7e:	d1f7      	bne.n	6b70 <bt_pub_key_gen+0x4c>
    6b80:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6b84:	f012 0210 	ands.w	r2, r2, #16
    6b88:	d017      	beq.n	6bba <bt_pub_key_gen+0x96>
		return 0;
    6b8a:	2500      	movs	r5, #0
    6b8c:	e7de      	b.n	6b4c <bt_pub_key_gen+0x28>
		if (cb == new_cb) {
    6b8e:	4298      	cmp	r0, r3
    6b90:	d10c      	bne.n	6bac <bt_pub_key_gen+0x88>
    6b92:	4b2a      	ldr	r3, [pc, #168]	; (6c3c <bt_pub_key_gen+0x118>)
    6b94:	492a      	ldr	r1, [pc, #168]	; (6c40 <bt_pub_key_gen+0x11c>)
			BT_WARN("Callback already registered");
    6b96:	482e      	ldr	r0, [pc, #184]	; (6c50 <bt_pub_key_gen+0x12c>)
    6b98:	1ac9      	subs	r1, r1, r3
    6b9a:	08c9      	lsrs	r1, r1, #3
    6b9c:	0189      	lsls	r1, r1, #6
    6b9e:	f041 0102 	orr.w	r1, r1, #2
    6ba2:	f015 fa26 	bl	1bff2 <log_0>
			return -EALREADY;
    6ba6:	f06f 0577 	mvn.w	r5, #119	; 0x77
    6baa:	e7cf      	b.n	6b4c <bt_pub_key_gen+0x28>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6bac:	1d19      	adds	r1, r3, #4
    6bae:	d0d6      	beq.n	6b5e <bt_pub_key_gen+0x3a>
	return node->next;
    6bb0:	685b      	ldr	r3, [r3, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d0d3      	beq.n	6b5e <bt_pub_key_gen+0x3a>
    6bb6:	3b04      	subs	r3, #4
    6bb8:	e7d0      	b.n	6b5c <bt_pub_key_gen+0x38>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6bba:	f3bf 8f5b 	dmb	ish
    6bbe:	e854 3f00 	ldrex	r3, [r4]
    6bc2:	f023 0308 	bic.w	r3, r3, #8
    6bc6:	e844 3100 	strex	r1, r3, [r4]
    6bca:	2900      	cmp	r1, #0
    6bcc:	d1f7      	bne.n	6bbe <bt_pub_key_gen+0x9a>
    6bce:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6bd2:	4611      	mov	r1, r2
    6bd4:	f242 0025 	movw	r0, #8229	; 0x2025
    6bd8:	f7fe fc82 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    6bdc:	4605      	mov	r5, r0
    6bde:	2800      	cmp	r0, #0
    6be0:	d0d3      	beq.n	6b8a <bt_pub_key_gen+0x66>
    6be2:	4b16      	ldr	r3, [pc, #88]	; (6c3c <bt_pub_key_gen+0x118>)
    6be4:	4916      	ldr	r1, [pc, #88]	; (6c40 <bt_pub_key_gen+0x11c>)
		BT_ERR("Sending LE P256 Public Key command failed");
    6be6:	481b      	ldr	r0, [pc, #108]	; (6c54 <bt_pub_key_gen+0x130>)
    6be8:	1ac9      	subs	r1, r1, r3
    6bea:	08c9      	lsrs	r1, r1, #3
    6bec:	0189      	lsls	r1, r1, #6
    6bee:	f041 0101 	orr.w	r1, r1, #1
    6bf2:	f015 f9fe 	bl	1bff2 <log_0>
    6bf6:	f3bf 8f5b 	dmb	ish
    6bfa:	e854 3f00 	ldrex	r3, [r4]
    6bfe:	f023 0310 	bic.w	r3, r3, #16
    6c02:	e844 3200 	strex	r2, r3, [r4]
    6c06:	2a00      	cmp	r2, #0
    6c08:	d1f7      	bne.n	6bfa <bt_pub_key_gen+0xd6>
    6c0a:	f3bf 8f5b 	dmb	ish
	return list->head;
    6c0e:	6834      	ldr	r4, [r6, #0]
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6c10:	b91c      	cbnz	r4, 6c1a <bt_pub_key_gen+0xf6>
	list->head = NULL;
    6c12:	2300      	movs	r3, #0
	list->tail = NULL;
    6c14:	e9c6 3300 	strd	r3, r3, [r6]
		return err;
    6c18:	e798      	b.n	6b4c <bt_pub_key_gen+0x28>
		SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6c1a:	3c04      	subs	r4, #4
    6c1c:	2c00      	cmp	r4, #0
    6c1e:	d0f8      	beq.n	6c12 <bt_pub_key_gen+0xee>
			if (cb->func) {
    6c20:	6823      	ldr	r3, [r4, #0]
    6c22:	b10b      	cbz	r3, 6c28 <bt_pub_key_gen+0x104>
				cb->func(NULL);
    6c24:	2000      	movs	r0, #0
    6c26:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    6c28:	1d23      	adds	r3, r4, #4
    6c2a:	d0f2      	beq.n	6c12 <bt_pub_key_gen+0xee>
	return node->next;
    6c2c:	6864      	ldr	r4, [r4, #4]
    6c2e:	e7ef      	b.n	6c10 <bt_pub_key_gen+0xec>
		return -EINVAL;
    6c30:	f06f 0515 	mvn.w	r5, #21
    6c34:	e78a      	b.n	6b4c <bt_pub_key_gen+0x28>
    6c36:	bf00      	nop
    6c38:	20000000 	.word	0x20000000
    6c3c:	00020e00 	.word	0x00020e00
    6c40:	00020ed0 	.word	0x00020ed0
    6c44:	00023b20 	.word	0x00023b20
    6c48:	20001538 	.word	0x20001538
    6c4c:	20000098 	.word	0x20000098
    6c50:	00023b3f 	.word	0x00023b3f
    6c54:	00023b5b 	.word	0x00023b5b

00006c58 <bt_pub_key_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c58:	4b05      	ldr	r3, [pc, #20]	; (6c70 <bt_pub_key_get+0x18>)
    6c5a:	f3bf 8f5b 	dmb	ish
    6c5e:	681b      	ldr	r3, [r3, #0]
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
	}

	return NULL;
}
    6c60:	4804      	ldr	r0, [pc, #16]	; (6c74 <bt_pub_key_get+0x1c>)
    6c62:	f3bf 8f5b 	dmb	ish
		return pub_key;
    6c66:	f013 0f08 	tst.w	r3, #8
}
    6c6a:	bf08      	it	eq
    6c6c:	2000      	moveq	r0, #0
    6c6e:	4770      	bx	lr
    6c70:	20000098 	.word	0x20000098
    6c74:	20002a38 	.word	0x20002a38

00006c78 <bt_dh_key_gen>:

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY_V2, buf, NULL);
}

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err;

	if (dh_key_cb == cb) {
    6c7a:	4d25      	ldr	r5, [pc, #148]	; (6d10 <bt_dh_key_gen+0x98>)
    6c7c:	682b      	ldr	r3, [r5, #0]
    6c7e:	428b      	cmp	r3, r1
{
    6c80:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    6c82:	d03f      	beq.n	6d04 <bt_dh_key_gen+0x8c>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6c84:	b11b      	cbz	r3, 6c8e <bt_dh_key_gen+0x16>
		return -EBUSY;
    6c86:	f06f 040f 	mvn.w	r4, #15
		BT_WARN("Failed to generate DHKey (err %d)", err);
		return err;
	}

	return 0;
}
    6c8a:	4620      	mov	r0, r4
    6c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6c8e:	4b21      	ldr	r3, [pc, #132]	; (6d14 <bt_dh_key_gen+0x9c>)
    6c90:	f3bf 8f5b 	dmb	ish
    6c94:	681a      	ldr	r2, [r3, #0]
    6c96:	f3bf 8f5b 	dmb	ish
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6c9a:	f3c2 1700 	ubfx	r7, r2, #4, #1
    6c9e:	06d2      	lsls	r2, r2, #27
    6ca0:	d4f1      	bmi.n	6c86 <bt_dh_key_gen+0xe>
    6ca2:	f3bf 8f5b 	dmb	ish
    6ca6:	681b      	ldr	r3, [r3, #0]
    6ca8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6cac:	071b      	lsls	r3, r3, #28
    6cae:	d52c      	bpl.n	6d0a <bt_dh_key_gen+0x92>
	dh_key_cb = cb;
    6cb0:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6cb2:	f242 0026 	movw	r0, #8230	; 0x2026
    6cb6:	2140      	movs	r1, #64	; 0x40
    6cb8:	f7fe fa50 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
    6cbc:	4604      	mov	r4, r0
    6cbe:	b1f0      	cbz	r0, 6cfe <bt_dh_key_gen+0x86>
	return net_buf_simple_add(&buf->b, len);
    6cc0:	2140      	movs	r1, #64	; 0x40
    6cc2:	3008      	adds	r0, #8
    6cc4:	f019 f801 	bl	1fcca <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6cc8:	2240      	movs	r2, #64	; 0x40
    6cca:	4631      	mov	r1, r6
    6ccc:	f016 fe9e 	bl	1da0c <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6cd0:	4621      	mov	r1, r4
    6cd2:	463a      	mov	r2, r7
    6cd4:	f242 0026 	movw	r0, #8230	; 0x2026
    6cd8:	f7fe fc02 	bl	54e0 <bt_hci_cmd_send_sync>
	if (err) {
    6cdc:	4604      	mov	r4, r0
    6cde:	2800      	cmp	r0, #0
    6ce0:	d0d3      	beq.n	6c8a <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    6ce2:	2300      	movs	r3, #0
    6ce4:	602b      	str	r3, [r5, #0]
    6ce6:	4a0c      	ldr	r2, [pc, #48]	; (6d18 <bt_dh_key_gen+0xa0>)
    6ce8:	4b0c      	ldr	r3, [pc, #48]	; (6d1c <bt_dh_key_gen+0xa4>)
		BT_WARN("Failed to generate DHKey (err %d)", err);
    6cea:	480d      	ldr	r0, [pc, #52]	; (6d20 <bt_dh_key_gen+0xa8>)
    6cec:	1ad2      	subs	r2, r2, r3
    6cee:	08d2      	lsrs	r2, r2, #3
    6cf0:	0192      	lsls	r2, r2, #6
    6cf2:	f042 0202 	orr.w	r2, r2, #2
    6cf6:	4621      	mov	r1, r4
    6cf8:	f015 f988 	bl	1c00c <log_1>
		return err;
    6cfc:	e7c5      	b.n	6c8a <bt_dh_key_gen+0x12>
		return -ENOBUFS;
    6cfe:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6d02:	e7ee      	b.n	6ce2 <bt_dh_key_gen+0x6a>
		return -EALREADY;
    6d04:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6d08:	e7bf      	b.n	6c8a <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    6d0a:	f06f 047c 	mvn.w	r4, #124	; 0x7c
    6d0e:	e7bc      	b.n	6c8a <bt_dh_key_gen+0x12>
    6d10:	20001534 	.word	0x20001534
    6d14:	20000098 	.word	0x20000098
    6d18:	00020ed0 	.word	0x00020ed0
    6d1c:	00020e00 	.word	0x00020e00
    6d20:	00023b85 	.word	0x00023b85

00006d24 <bt_hci_evt_le_pkey_complete>:

void bt_hci_evt_le_pkey_complete(struct net_buf *buf)
{
    6d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d26:	4c1d      	ldr	r4, [pc, #116]	; (6d9c <bt_hci_evt_le_pkey_complete+0x78>)
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    6d28:	6886      	ldr	r6, [r0, #8]
    6d2a:	f3bf 8f5b 	dmb	ish
    6d2e:	e854 3f00 	ldrex	r3, [r4]
    6d32:	f023 0310 	bic.w	r3, r3, #16
    6d36:	e844 3200 	strex	r2, r3, [r4]
    6d3a:	2a00      	cmp	r2, #0
    6d3c:	d1f7      	bne.n	6d2e <bt_hci_evt_le_pkey_complete+0xa>
    6d3e:	f3bf 8f5b 	dmb	ish

	BT_DBG("status: 0x%02x", evt->status);

	atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);

	if (!evt->status) {
    6d42:	7833      	ldrb	r3, [r6, #0]
    6d44:	b983      	cbnz	r3, 6d68 <bt_hci_evt_le_pkey_complete+0x44>
		memcpy(pub_key, evt->key, 64);
    6d46:	4816      	ldr	r0, [pc, #88]	; (6da0 <bt_hci_evt_le_pkey_complete+0x7c>)
    6d48:	2240      	movs	r2, #64	; 0x40
    6d4a:	1c71      	adds	r1, r6, #1
    6d4c:	f016 fe5e 	bl	1da0c <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6d50:	f3bf 8f5b 	dmb	ish
    6d54:	e854 3f00 	ldrex	r3, [r4]
    6d58:	f043 0308 	orr.w	r3, r3, #8
    6d5c:	e844 3200 	strex	r2, r3, [r4]
    6d60:	2a00      	cmp	r2, #0
    6d62:	d1f7      	bne.n	6d54 <bt_hci_evt_le_pkey_complete+0x30>
    6d64:	f3bf 8f5b 	dmb	ish
	return list->head;
    6d68:	4d0e      	ldr	r5, [pc, #56]	; (6da4 <bt_hci_evt_le_pkey_complete+0x80>)
    6d6a:	682c      	ldr	r4, [r5, #0]
		atomic_set_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6d6c:	b91c      	cbnz	r4, 6d76 <bt_hci_evt_le_pkey_complete+0x52>
	list->head = NULL;
    6d6e:	2300      	movs	r3, #0
	list->tail = NULL;
    6d70:	e9c5 3300 	strd	r3, r3, [r5]
			cb->func(evt->status ? NULL : pub_key);
		}
	}

	sys_slist_init(&pub_key_cb_slist);
}
    6d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			cb->func(evt->status ? NULL : pub_key);
    6d76:	4f0a      	ldr	r7, [pc, #40]	; (6da0 <bt_hci_evt_le_pkey_complete+0x7c>)
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6d78:	3c04      	subs	r4, #4
    6d7a:	2c00      	cmp	r4, #0
    6d7c:	d0f7      	beq.n	6d6e <bt_hci_evt_le_pkey_complete+0x4a>
		if (cb->func) {
    6d7e:	6823      	ldr	r3, [r4, #0]
    6d80:	b12b      	cbz	r3, 6d8e <bt_hci_evt_le_pkey_complete+0x6a>
			cb->func(evt->status ? NULL : pub_key);
    6d82:	7832      	ldrb	r2, [r6, #0]
    6d84:	2a00      	cmp	r2, #0
    6d86:	bf0c      	ite	eq
    6d88:	4638      	moveq	r0, r7
    6d8a:	2000      	movne	r0, #0
    6d8c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    6d8e:	1d23      	adds	r3, r4, #4
    6d90:	d0ed      	beq.n	6d6e <bt_hci_evt_le_pkey_complete+0x4a>
	return node->next;
    6d92:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&pub_key_cb_slist, cb, node) {
    6d94:	2c00      	cmp	r4, #0
    6d96:	d0ea      	beq.n	6d6e <bt_hci_evt_le_pkey_complete+0x4a>
    6d98:	3c04      	subs	r4, #4
    6d9a:	e7ee      	b.n	6d7a <bt_hci_evt_le_pkey_complete+0x56>
    6d9c:	20000098 	.word	0x20000098
    6da0:	20002a38 	.word	0x20002a38
    6da4:	20001538 	.word	0x20001538

00006da8 <bt_hci_evt_le_dhkey_complete>:
{
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;

	BT_DBG("status: 0x%02x", evt->status);

	if (dh_key_cb) {
    6da8:	4905      	ldr	r1, [pc, #20]	; (6dc0 <bt_hci_evt_le_dhkey_complete+0x18>)
    6daa:	680b      	ldr	r3, [r1, #0]
    6dac:	b133      	cbz	r3, 6dbc <bt_hci_evt_le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    6dae:	6882      	ldr	r2, [r0, #8]
		bt_dh_key_cb_t cb = dh_key_cb;

		dh_key_cb = NULL;
    6db0:	2000      	movs	r0, #0
    6db2:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    6db4:	7811      	ldrb	r1, [r2, #0]
    6db6:	b901      	cbnz	r1, 6dba <bt_hci_evt_le_dhkey_complete+0x12>
    6db8:	1c50      	adds	r0, r2, #1
    6dba:	4718      	bx	r3
	}
}
    6dbc:	4770      	bx	lr
    6dbe:	bf00      	nop
    6dc0:	20001534 	.word	0x20001534

00006dc4 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6dc4:	2300      	movs	r3, #0
	tx->user_data = NULL;
    6dc6:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    6dca:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    6dcc:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    6dce:	4801      	ldr	r0, [pc, #4]	; (6dd4 <tx_free+0x10>)
    6dd0:	f019 ba51 	b.w	20276 <k_queue_append>
    6dd4:	2000079c 	.word	0x2000079c

00006dd8 <notify_connected>:
		return -ENOTCONN;
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6dd8:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6dda:	4b09      	ldr	r3, [pc, #36]	; (6e00 <notify_connected+0x28>)
    6ddc:	681d      	ldr	r5, [r3, #0]
{
    6dde:	4604      	mov	r4, r0
		if (cb->connected) {
			cb->connected(conn, conn->err);
    6de0:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    6de2:	b92d      	cbnz	r5, 6df0 <notify_connected+0x18>
		}
	}

	if (!conn->err) {
    6de4:	b951      	cbnz	r1, 6dfc <notify_connected+0x24>
		bt_gatt_connected(conn);
    6de6:	4620      	mov	r0, r4
	}
}
    6de8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    6dec:	f002 bda4 	b.w	9938 <bt_gatt_connected>
		if (cb->connected) {
    6df0:	682b      	ldr	r3, [r5, #0]
    6df2:	b10b      	cbz	r3, 6df8 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    6df4:	4620      	mov	r0, r4
    6df6:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    6df8:	6a2d      	ldr	r5, [r5, #32]
    6dfa:	e7f1      	b.n	6de0 <notify_connected+0x8>
}
    6dfc:	bd38      	pop	{r3, r4, r5, pc}
    6dfe:	bf00      	nop
    6e00:	20001544 	.word	0x20001544

00006e04 <send_frag>:
{
    6e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    6e08:	694d      	ldr	r5, [r1, #20]
{
    6e0a:	4604      	mov	r4, r0
    6e0c:	460e      	mov	r6, r1
    6e0e:	4691      	mov	r9, r2
    6e10:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    6e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6e16:	4844      	ldr	r0, [pc, #272]	; (6f28 <send_frag+0x124>)
    6e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6e1c:	f013 fc7a 	bl	1a714 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
    6e20:	7b63      	ldrb	r3, [r4, #13]
    6e22:	2b07      	cmp	r3, #7
    6e24:	d151      	bne.n	6eca <send_frag+0xc6>
	__asm__ volatile(
    6e26:	f04f 0320 	mov.w	r3, #32
    6e2a:	f3ef 8211 	mrs	r2, BASEPRI
    6e2e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e32:	f3bf 8f6f 	isb	sy
	if (tx) {
    6e36:	69a3      	ldr	r3, [r4, #24]
    6e38:	2d00      	cmp	r5, #0
    6e3a:	d058      	beq.n	6eee <send_frag+0xea>
	parent->next = child;
    6e3c:	2100      	movs	r1, #0
    6e3e:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    6e40:	2b00      	cmp	r3, #0
    6e42:	d151      	bne.n	6ee8 <send_frag+0xe4>
	list->head = node;
    6e44:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    6e48:	f382 8811 	msr	BASEPRI, r2
    6e4c:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    6e50:	2104      	movs	r1, #4
    6e52:	f106 0008 	add.w	r0, r6, #8
    6e56:	f018 ff4f 	bl	1fcf8 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6e5a:	8823      	ldrh	r3, [r4, #0]
    6e5c:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    6e60:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6e64:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    6e66:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    6e6a:	3b04      	subs	r3, #4
    6e6c:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    6e6e:	2302      	movs	r3, #2
    6e70:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    6e72:	4630      	mov	r0, r6
    6e74:	f016 ffd4 	bl	1de20 <bt_send>
	if (err) {
    6e78:	4601      	mov	r1, r0
    6e7a:	2800      	cmp	r0, #0
    6e7c:	d051      	beq.n	6f22 <send_frag+0x11e>
    6e7e:	4b2b      	ldr	r3, [pc, #172]	; (6f2c <send_frag+0x128>)
    6e80:	4a2b      	ldr	r2, [pc, #172]	; (6f30 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    6e82:	482c      	ldr	r0, [pc, #176]	; (6f34 <send_frag+0x130>)
    6e84:	1ad2      	subs	r2, r2, r3
    6e86:	08d2      	lsrs	r2, r2, #3
    6e88:	0192      	lsls	r2, r2, #6
    6e8a:	f042 0201 	orr.w	r2, r2, #1
    6e8e:	f015 f8bd 	bl	1c00c <log_1>
	__asm__ volatile(
    6e92:	f04f 0320 	mov.w	r3, #32
    6e96:	f3ef 8011 	mrs	r0, BASEPRI
    6e9a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e9e:	f3bf 8f6f 	isb	sy
		if (tx) {
    6ea2:	2d00      	cmp	r5, #0
    6ea4:	d037      	beq.n	6f16 <send_frag+0x112>
	return list->head;
    6ea6:	6963      	ldr	r3, [r4, #20]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6ea8:	2200      	movs	r2, #0
    6eaa:	b153      	cbz	r3, 6ec2 <send_frag+0xbe>
    6eac:	429d      	cmp	r5, r3
    6eae:	d12f      	bne.n	6f10 <send_frag+0x10c>
	return node->next;
    6eb0:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    6eb2:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    6eb4:	bb3a      	cbnz	r2, 6f06 <send_frag+0x102>
    6eb6:	42a9      	cmp	r1, r5
	list->head = node;
    6eb8:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    6eba:	d100      	bne.n	6ebe <send_frag+0xba>
	list->tail = node;
    6ebc:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    6ebe:	2300      	movs	r3, #0
    6ec0:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    6ec2:	f380 8811 	msr	BASEPRI, r0
    6ec6:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6eca:	4817      	ldr	r0, [pc, #92]	; (6f28 <send_frag+0x124>)
    6ecc:	f013 fbfc 	bl	1a6c8 <z_impl_k_sem_give>
	if (tx) {
    6ed0:	b115      	cbz	r5, 6ed8 <send_frag+0xd4>
		tx_free(tx);
    6ed2:	4628      	mov	r0, r5
    6ed4:	f7ff ff76 	bl	6dc4 <tx_free>
	if (always_consume) {
    6ed8:	b11f      	cbz	r7, 6ee2 <send_frag+0xde>
		net_buf_unref(buf);
    6eda:	4630      	mov	r0, r6
    6edc:	f012 f80c 	bl	18ef8 <net_buf_unref>
	return false;
    6ee0:	2700      	movs	r7, #0
}
    6ee2:	4638      	mov	r0, r7
    6ee4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6ee8:	601d      	str	r5, [r3, #0]
	list->tail = node;
    6eea:	61a5      	str	r5, [r4, #24]
}
    6eec:	e7ac      	b.n	6e48 <send_frag+0x44>
		if (tail_tx) {
    6eee:	b133      	cbz	r3, 6efe <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    6ef0:	f103 080c 	add.w	r8, r3, #12
    6ef4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    6ef6:	3301      	adds	r3, #1
    6ef8:	f8c8 3000 	str.w	r3, [r8]
    6efc:	e7a4      	b.n	6e48 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    6efe:	69e3      	ldr	r3, [r4, #28]
    6f00:	f104 081c 	add.w	r8, r4, #28
    6f04:	e7f7      	b.n	6ef6 <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    6f06:	42a9      	cmp	r1, r5
	parent->next = child;
    6f08:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6f0a:	bf08      	it	eq
    6f0c:	61a2      	streq	r2, [r4, #24]
}
    6f0e:	e7d6      	b.n	6ebe <send_frag+0xba>
	return node->next;
    6f10:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f12:	681b      	ldr	r3, [r3, #0]
    6f14:	e7c9      	b.n	6eaa <send_frag+0xa6>
			(*pending_no_cb)--;
    6f16:	f8d8 3000 	ldr.w	r3, [r8]
    6f1a:	3b01      	subs	r3, #1
    6f1c:	f8c8 3000 	str.w	r3, [r8]
    6f20:	e7cf      	b.n	6ec2 <send_frag+0xbe>
	return true;
    6f22:	2701      	movs	r7, #1
    6f24:	e7dd      	b.n	6ee2 <send_frag+0xde>
    6f26:	bf00      	nop
    6f28:	200000d0 	.word	0x200000d0
    6f2c:	00020e00 	.word	0x00020e00
    6f30:	00020e18 	.word	0x00020e18
    6f34:	00023482 	.word	0x00023482

00006f38 <bt_conn_get_pkts>:
}
    6f38:	4800      	ldr	r0, [pc, #0]	; (6f3c <bt_conn_get_pkts+0x4>)
    6f3a:	4770      	bx	lr
    6f3c:	200000d0 	.word	0x200000d0

00006f40 <bt_conn_new>:
{
    6f40:	b538      	push	{r3, r4, r5, lr}
    6f42:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
    6f44:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6f46:	2501      	movs	r5, #1
    6f48:	428b      	cmp	r3, r1
    6f4a:	d102      	bne.n	6f52 <bt_conn_new+0x12>
		return NULL;
    6f4c:	2400      	movs	r4, #0
}
    6f4e:	4620      	mov	r0, r4
    6f50:	bd38      	pop	{r3, r4, r5, pc}
    6f52:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
    6f56:	f3bf 8f5b 	dmb	ish
    6f5a:	e852 0f00 	ldrex	r0, [r2]
    6f5e:	2800      	cmp	r0, #0
    6f60:	d104      	bne.n	6f6c <bt_conn_new+0x2c>
    6f62:	e842 5c00 	strex	ip, r5, [r2]
    6f66:	f1bc 0f00 	cmp.w	ip, #0
    6f6a:	d1f6      	bne.n	6f5a <bt_conn_new+0x1a>
    6f6c:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
    6f70:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
    6f74:	d002      	beq.n	6f7c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
    6f76:	3301      	adds	r3, #1
    6f78:	4604      	mov	r4, r0
    6f7a:	e7e5      	b.n	6f48 <bt_conn_new+0x8>
	if (!conn) {
    6f7c:	2c00      	cmp	r4, #0
    6f7e:	d0e6      	beq.n	6f4e <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
    6f80:	22c4      	movs	r2, #196	; 0xc4
    6f82:	2100      	movs	r1, #0
    6f84:	4620      	mov	r0, r4
    6f86:	f016 fd4c 	bl	1da22 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
    6f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    6f8e:	4904      	ldr	r1, [pc, #16]	; (6fa0 <bt_conn_new+0x60>)
    6f90:	f019 fa68 	bl	20464 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
    6f94:	4903      	ldr	r1, [pc, #12]	; (6fa4 <bt_conn_new+0x64>)
    6f96:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6f9a:	f019 fa3d 	bl	20418 <k_work_init>
	return conn;
    6f9e:	e7d6      	b.n	6f4e <bt_conn_new+0xe>
    6fa0:	000076a1 	.word	0x000076a1
    6fa4:	0001e21b 	.word	0x0001e21b

00006fa8 <bt_conn_recv>:
{
    6fa8:	b570      	push	{r4, r5, r6, lr}
    6faa:	4616      	mov	r6, r2
    6fac:	4604      	mov	r4, r0
    6fae:	460d      	mov	r5, r1
	tx_notify(conn);
    6fb0:	f017 f910 	bl	1e1d4 <tx_notify>
	switch (flags) {
    6fb4:	2e01      	cmp	r6, #1
    6fb6:	d02b      	beq.n	7010 <bt_conn_recv+0x68>
    6fb8:	2e02      	cmp	r6, #2
    6fba:	d158      	bne.n	706e <bt_conn_recv+0xc6>
		if (conn->rx) {
    6fbc:	6923      	ldr	r3, [r4, #16]
    6fbe:	b163      	cbz	r3, 6fda <bt_conn_recv+0x32>
    6fc0:	4b35      	ldr	r3, [pc, #212]	; (7098 <bt_conn_recv+0xf0>)
    6fc2:	4936      	ldr	r1, [pc, #216]	; (709c <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    6fc4:	4836      	ldr	r0, [pc, #216]	; (70a0 <bt_conn_recv+0xf8>)
    6fc6:	1ac9      	subs	r1, r1, r3
    6fc8:	08c9      	lsrs	r1, r1, #3
    6fca:	0189      	lsls	r1, r1, #6
    6fcc:	f041 0101 	orr.w	r1, r1, #1
    6fd0:	f015 f80f 	bl	1bff2 <log_0>
			bt_conn_reset_rx_state(conn);
    6fd4:	4620      	mov	r0, r4
    6fd6:	f017 f923 	bl	1e220 <bt_conn_reset_rx_state>
		conn->rx = buf;
    6fda:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    6fdc:	6923      	ldr	r3, [r4, #16]
    6fde:	8999      	ldrh	r1, [r3, #12]
    6fe0:	2901      	cmp	r1, #1
    6fe2:	d958      	bls.n	7096 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    6fe4:	689a      	ldr	r2, [r3, #8]
    6fe6:	8812      	ldrh	r2, [r2, #0]
    6fe8:	3204      	adds	r2, #4
    6fea:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    6fec:	4291      	cmp	r1, r2
    6fee:	d352      	bcc.n	7096 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    6ff0:	d949      	bls.n	7086 <bt_conn_recv+0xde>
    6ff2:	4829      	ldr	r0, [pc, #164]	; (7098 <bt_conn_recv+0xf0>)
    6ff4:	4b29      	ldr	r3, [pc, #164]	; (709c <bt_conn_recv+0xf4>)
    6ff6:	1a1b      	subs	r3, r3, r0
    6ff8:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    6ffa:	019b      	lsls	r3, r3, #6
    6ffc:	4829      	ldr	r0, [pc, #164]	; (70a4 <bt_conn_recv+0xfc>)
    6ffe:	f043 0301 	orr.w	r3, r3, #1
    7002:	f015 f817 	bl	1c034 <log_2>
		bt_conn_reset_rx_state(conn);
    7006:	4620      	mov	r0, r4
}
    7008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    700c:	f017 b908 	b.w	1e220 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    7010:	6920      	ldr	r0, [r4, #16]
    7012:	b968      	cbnz	r0, 7030 <bt_conn_recv+0x88>
    7014:	4921      	ldr	r1, [pc, #132]	; (709c <bt_conn_recv+0xf4>)
    7016:	4b20      	ldr	r3, [pc, #128]	; (7098 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    7018:	4823      	ldr	r0, [pc, #140]	; (70a8 <bt_conn_recv+0x100>)
    701a:	1ac9      	subs	r1, r1, r3
    701c:	08c9      	lsrs	r1, r1, #3
    701e:	0189      	lsls	r1, r1, #6
    7020:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    7024:	f014 ffe5 	bl	1bff2 <log_0>
			bt_conn_reset_rx_state(conn);
    7028:	4620      	mov	r0, r4
    702a:	f017 f8f9 	bl	1e220 <bt_conn_reset_rx_state>
    702e:	e001      	b.n	7034 <bt_conn_recv+0x8c>
		if (!buf->len) {
    7030:	89ae      	ldrh	r6, [r5, #12]
    7032:	b926      	cbnz	r6, 703e <bt_conn_recv+0x96>
			net_buf_unref(buf);
    7034:	4628      	mov	r0, r5
}
    7036:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    703a:	f011 bf5d 	b.w	18ef8 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    703e:	3008      	adds	r0, #8
    7040:	f018 fe7e 	bl	1fd40 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    7044:	4286      	cmp	r6, r0
    7046:	d908      	bls.n	705a <bt_conn_recv+0xb2>
    7048:	4914      	ldr	r1, [pc, #80]	; (709c <bt_conn_recv+0xf4>)
    704a:	4b13      	ldr	r3, [pc, #76]	; (7098 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    704c:	4817      	ldr	r0, [pc, #92]	; (70ac <bt_conn_recv+0x104>)
    704e:	1ac9      	subs	r1, r1, r3
    7050:	08c9      	lsrs	r1, r1, #3
    7052:	0189      	lsls	r1, r1, #6
    7054:	f041 0101 	orr.w	r1, r1, #1
    7058:	e7e4      	b.n	7024 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    705a:	6920      	ldr	r0, [r4, #16]
    705c:	89aa      	ldrh	r2, [r5, #12]
    705e:	68a9      	ldr	r1, [r5, #8]
    7060:	3008      	adds	r0, #8
    7062:	f018 fe38 	bl	1fcd6 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    7066:	4628      	mov	r0, r5
    7068:	f011 ff46 	bl	18ef8 <net_buf_unref>
		break;
    706c:	e7b6      	b.n	6fdc <bt_conn_recv+0x34>
    706e:	4a0a      	ldr	r2, [pc, #40]	; (7098 <bt_conn_recv+0xf0>)
    7070:	4b0a      	ldr	r3, [pc, #40]	; (709c <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    7072:	480f      	ldr	r0, [pc, #60]	; (70b0 <bt_conn_recv+0x108>)
    7074:	1a9b      	subs	r3, r3, r2
    7076:	08db      	lsrs	r3, r3, #3
    7078:	019b      	lsls	r3, r3, #6
    707a:	f043 0201 	orr.w	r2, r3, #1
    707e:	4631      	mov	r1, r6
    7080:	f014 ffc4 	bl	1c00c <log_1>
		bt_conn_reset_rx_state(conn);
    7084:	e7d0      	b.n	7028 <bt_conn_recv+0x80>
	conn->rx = NULL;
    7086:	2200      	movs	r2, #0
    7088:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    708a:	4620      	mov	r0, r4
    708c:	4619      	mov	r1, r3
}
    708e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    7092:	f000 bd75 	b.w	7b80 <bt_l2cap_recv>
}
    7096:	bd70      	pop	{r4, r5, r6, pc}
    7098:	00020e00 	.word	0x00020e00
    709c:	00020e18 	.word	0x00020e18
    70a0:	00023bee 	.word	0x00023bee
    70a4:	00023c6e 	.word	0x00023c6e
    70a8:	00023c0b 	.word	0x00023c0b
    70ac:	00023c29 	.word	0x00023c29
    70b0:	00023c50 	.word	0x00023c50

000070b4 <bt_conn_send_cb>:
{
    70b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    70b8:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    70ba:	7b43      	ldrb	r3, [r0, #13]
    70bc:	2b07      	cmp	r3, #7
{
    70be:	4605      	mov	r5, r0
    70c0:	460e      	mov	r6, r1
    70c2:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    70c4:	d00c      	beq.n	70e0 <bt_conn_send_cb+0x2c>
    70c6:	4926      	ldr	r1, [pc, #152]	; (7160 <bt_conn_send_cb+0xac>)
    70c8:	4b26      	ldr	r3, [pc, #152]	; (7164 <bt_conn_send_cb+0xb0>)
		BT_ERR("not connected!");
    70ca:	4827      	ldr	r0, [pc, #156]	; (7168 <bt_conn_send_cb+0xb4>)
    70cc:	1ac9      	subs	r1, r1, r3
    70ce:	08c9      	lsrs	r1, r1, #3
    70d0:	0189      	lsls	r1, r1, #6
    70d2:	f041 0101 	orr.w	r1, r1, #1
    70d6:	f014 ff8c 	bl	1bff2 <log_0>
			return -ENOTCONN;
    70da:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    70de:	e01d      	b.n	711c <bt_conn_send_cb+0x68>
	if (cb) {
    70e0:	2a00      	cmp	r2, #0
    70e2:	d03a      	beq.n	715a <bt_conn_send_cb+0xa6>
	return z_impl_k_current_get();
    70e4:	f013 ffee 	bl	1b0c4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    70e8:	4b20      	ldr	r3, [pc, #128]	; (716c <bt_conn_send_cb+0xb8>)
    70ea:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    70ec:	4820      	ldr	r0, [pc, #128]	; (7170 <bt_conn_send_cb+0xbc>)
    70ee:	bf07      	ittee	eq
    70f0:	2200      	moveq	r2, #0
    70f2:	2300      	moveq	r3, #0
    70f4:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    70f8:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    70fc:	f013 fab0 	bl	1a660 <z_impl_k_queue_get>
    7100:	4604      	mov	r4, r0
		if (!tx) {
    7102:	b968      	cbnz	r0, 7120 <bt_conn_send_cb+0x6c>
    7104:	4b17      	ldr	r3, [pc, #92]	; (7164 <bt_conn_send_cb+0xb0>)
    7106:	4916      	ldr	r1, [pc, #88]	; (7160 <bt_conn_send_cb+0xac>)
			BT_ERR("Unable to allocate TX context");
    7108:	481a      	ldr	r0, [pc, #104]	; (7174 <bt_conn_send_cb+0xc0>)
    710a:	1ac9      	subs	r1, r1, r3
    710c:	08c9      	lsrs	r1, r1, #3
    710e:	0189      	lsls	r1, r1, #6
    7110:	f041 0101 	orr.w	r1, r1, #1
    7114:	f014 ff6d 	bl	1bff2 <log_0>
			return -ENOBUFS;
    7118:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    711c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7120:	7b6b      	ldrb	r3, [r5, #13]
    7122:	2b07      	cmp	r3, #7
    7124:	d00d      	beq.n	7142 <bt_conn_send_cb+0x8e>
    7126:	4b0f      	ldr	r3, [pc, #60]	; (7164 <bt_conn_send_cb+0xb0>)
    7128:	490d      	ldr	r1, [pc, #52]	; (7160 <bt_conn_send_cb+0xac>)
			BT_WARN("Disconnected while allocating context");
    712a:	4813      	ldr	r0, [pc, #76]	; (7178 <bt_conn_send_cb+0xc4>)
    712c:	1ac9      	subs	r1, r1, r3
    712e:	08c9      	lsrs	r1, r1, #3
    7130:	0189      	lsls	r1, r1, #6
    7132:	f041 0102 	orr.w	r1, r1, #2
    7136:	f014 ff5c 	bl	1bff2 <log_0>
			tx_free(tx);
    713a:	4620      	mov	r0, r4
    713c:	f7ff fe42 	bl	6dc4 <tx_free>
    7140:	e7cb      	b.n	70da <bt_conn_send_cb+0x26>
		tx->pending_no_cb = 0U;
    7142:	2300      	movs	r3, #0
		tx->user_data = user_data;
    7144:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7148:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    714a:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
    714c:	f105 0038 	add.w	r0, r5, #56	; 0x38
    7150:	4631      	mov	r1, r6
    7152:	f018 fd7b 	bl	1fc4c <net_buf_put>
	return 0;
    7156:	2000      	movs	r0, #0
    7158:	e7e0      	b.n	711c <bt_conn_send_cb+0x68>
		tx_data(buf)->tx = NULL;
    715a:	614a      	str	r2, [r1, #20]
    715c:	e7f6      	b.n	714c <bt_conn_send_cb+0x98>
    715e:	bf00      	nop
    7160:	00020e18 	.word	0x00020e18
    7164:	00020e00 	.word	0x00020e00
    7168:	00023c89 	.word	0x00023c89
    716c:	20001338 	.word	0x20001338
    7170:	2000079c 	.word	0x2000079c
    7174:	00023c98 	.word	0x00023c98
    7178:	00023cb6 	.word	0x00023cb6

0000717c <bt_conn_prepare_events>:
{
    717c:	b570      	push	{r4, r5, r6, lr}
	conn_change.signaled = 0U;
    717e:	4b17      	ldr	r3, [pc, #92]	; (71dc <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7180:	4c17      	ldr	r4, [pc, #92]	; (71e0 <bt_conn_prepare_events+0x64>)
    7182:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7184:	2101      	movs	r1, #1
{
    7186:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    7188:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    718a:	f019 fc9c 	bl	20ac6 <k_poll_event_init>
    718e:	f3bf 8f5b 	dmb	ish
    7192:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    7196:	f3bf 8f5b 	dmb	ish
		if (!conn_prepare_events(conn, &events[ev_count])) {
    719a:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    719e:	b90b      	cbnz	r3, 71a4 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    71a0:	2001      	movs	r0, #1
}
    71a2:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    71a4:	7b63      	ldrb	r3, [r4, #13]
    71a6:	b953      	cbnz	r3, 71be <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    71a8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    71ac:	1d20      	adds	r0, r4, #4
    71ae:	f017 f802 	bl	1e1b6 <atomic_and>
    71b2:	0643      	lsls	r3, r0, #25
    71b4:	d503      	bpl.n	71be <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
    71b6:	4620      	mov	r0, r4
    71b8:	f017 f83b 	bl	1e232 <conn_cleanup>
    71bc:	e7f0      	b.n	71a0 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    71be:	7b63      	ldrb	r3, [r4, #13]
    71c0:	2b07      	cmp	r3, #7
    71c2:	d1ed      	bne.n	71a0 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    71c4:	4b07      	ldr	r3, [pc, #28]	; (71e4 <bt_conn_prepare_events+0x68>)
    71c6:	4630      	mov	r0, r6
    71c8:	2200      	movs	r2, #0
    71ca:	2104      	movs	r1, #4
    71cc:	f019 fc7b 	bl	20ac6 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    71d0:	2301      	movs	r3, #1
    71d2:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    71d6:	2002      	movs	r0, #2
	return ev_count;
    71d8:	e7e3      	b.n	71a2 <bt_conn_prepare_events+0x26>
    71da:	bf00      	nop
    71dc:	20000240 	.word	0x20000240
    71e0:	20000aa0 	.word	0x20000aa0
    71e4:	20000ad8 	.word	0x20000ad8

000071e8 <bt_conn_lookup_handle>:
{
    71e8:	4602      	mov	r2, r0
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    71ea:	2101      	movs	r1, #1
    71ec:	4801      	ldr	r0, [pc, #4]	; (71f4 <bt_conn_lookup_handle+0xc>)
    71ee:	f017 b873 	b.w	1e2d8 <conn_lookup_handle>
    71f2:	bf00      	nop
    71f4:	20000aa0 	.word	0x20000aa0

000071f8 <bt_conn_set_state>:
{
    71f8:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    71fa:	7b46      	ldrb	r6, [r0, #13]
    71fc:	428e      	cmp	r6, r1
{
    71fe:	4604      	mov	r4, r0
    7200:	460d      	mov	r5, r1
	if (conn->state == state) {
    7202:	d112      	bne.n	722a <bt_conn_set_state+0x32>
    7204:	4b68      	ldr	r3, [pc, #416]	; (73a8 <bt_conn_set_state+0x1b0>)
    7206:	4a69      	ldr	r2, [pc, #420]	; (73ac <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    7208:	4869      	ldr	r0, [pc, #420]	; (73b0 <bt_conn_set_state+0x1b8>)
    720a:	2e08      	cmp	r6, #8
    720c:	eba2 0203 	sub.w	r2, r2, r3
    7210:	bf96      	itet	ls
    7212:	4b68      	ldrls	r3, [pc, #416]	; (73b4 <bt_conn_set_state+0x1bc>)
    7214:	4968      	ldrhi	r1, [pc, #416]	; (73b8 <bt_conn_set_state+0x1c0>)
    7216:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    721a:	08d2      	lsrs	r2, r2, #3
    721c:	0192      	lsls	r2, r2, #6
    721e:	f042 0202 	orr.w	r2, r2, #2
}
    7222:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    7226:	f014 bef1 	b.w	1c00c <log_1>
	conn->state = state;
    722a:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    722c:	b926      	cbnz	r6, 7238 <bt_conn_set_state+0x40>
		if (conn->type != BT_CONN_TYPE_ISO) {
    722e:	7883      	ldrb	r3, [r0, #2]
    7230:	2b08      	cmp	r3, #8
    7232:	d001      	beq.n	7238 <bt_conn_set_state+0x40>
			bt_conn_ref(conn);
    7234:	f017 f81b 	bl	1e26e <bt_conn_ref>
	switch (conn->state) {
    7238:	7b63      	ldrb	r3, [r4, #13]
    723a:	2b08      	cmp	r3, #8
    723c:	f200 80a9 	bhi.w	7392 <bt_conn_set_state+0x19a>
    7240:	e8df f003 	tbb	[pc, r3]
    7244:	b1b10538 	.word	0xb1b10538
    7248:	1cb1b1b1 	.word	0x1cb1b1b1
    724c:	b1          	.byte	0xb1
    724d:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    724e:	4d5b      	ldr	r5, [pc, #364]	; (73bc <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    7250:	2600      	movs	r6, #0
	__asm__ volatile(
    7252:	f04f 0320 	mov.w	r3, #32
    7256:	f3ef 8211 	mrs	r2, BASEPRI
    725a:	f383 8812 	msr	BASEPRI_MAX, r3
    725e:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7262:	69e3      	ldr	r3, [r4, #28]
    7264:	2b00      	cmp	r3, #0
    7266:	d075      	beq.n	7354 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    7268:	3b01      	subs	r3, #1
    726a:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    726c:	f382 8811 	msr	BASEPRI, r2
    7270:	f3bf 8f6f 	isb	sy
    7274:	4628      	mov	r0, r5
    7276:	f013 fa27 	bl	1a6c8 <z_impl_k_sem_give>
}
    727a:	e7ea      	b.n	7252 <bt_conn_set_state+0x5a>
		if (conn->type == BT_CONN_TYPE_SCO) {
    727c:	78a3      	ldrb	r3, [r4, #2]
    727e:	2b04      	cmp	r3, #4
    7280:	f000 8091 	beq.w	73a6 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    7284:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7288:	f018 ffe9 	bl	2025e <z_impl_k_queue_init>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    728c:	484c      	ldr	r0, [pc, #304]	; (73c0 <bt_conn_set_state+0x1c8>)
    728e:	2100      	movs	r1, #0
    7290:	f014 f9bc 	bl	1b60c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7294:	2300      	movs	r3, #0
	list->tail = NULL;
    7296:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    729a:	78e3      	ldrb	r3, [r4, #3]
    729c:	2b01      	cmp	r3, #1
    729e:	f040 8082 	bne.w	73a6 <bt_conn_set_state+0x1ae>
			k_work_schedule(&conn->deferred_work,
    72a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    72a6:	f44f 3220 	mov.w	r2, #163840	; 0x28000
}
    72aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&conn->deferred_work,
    72ae:	2300      	movs	r3, #0
    72b0:	f013 bbde 	b.w	1aa70 <k_work_schedule>
		if (conn->type == BT_CONN_TYPE_ISO) {
    72b4:	78a3      	ldrb	r3, [r4, #2]
    72b6:	2b08      	cmp	r3, #8
    72b8:	d075      	beq.n	73a6 <bt_conn_set_state+0x1ae>
		if (conn->type == BT_CONN_TYPE_SCO) {
    72ba:	2b04      	cmp	r3, #4
    72bc:	d104      	bne.n	72c8 <bt_conn_set_state+0xd0>
			bt_conn_unref(conn);
    72be:	4620      	mov	r0, r4
}
    72c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    72c4:	f016 bfee 	b.w	1e2a4 <bt_conn_unref>
		switch (old_state) {
    72c8:	2e08      	cmp	r6, #8
    72ca:	d86c      	bhi.n	73a6 <bt_conn_set_state+0x1ae>
    72cc:	a301      	add	r3, pc, #4	; (adr r3, 72d4 <bt_conn_set_state+0xdc>)
    72ce:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    72d2:	bf00      	nop
    72d4:	00007341 	.word	0x00007341
    72d8:	000072f9 	.word	0x000072f9
    72dc:	00007333 	.word	0x00007333
    72e0:	000072bf 	.word	0x000072bf
    72e4:	000072bf 	.word	0x000072bf
    72e8:	00007333 	.word	0x00007333
    72ec:	00007333 	.word	0x00007333
    72f0:	00007341 	.word	0x00007341
    72f4:	00007341 	.word	0x00007341
			tx_notify(conn);
    72f8:	4620      	mov	r0, r4
    72fa:	f016 ff6b 	bl	1e1d4 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    72fe:	78a3      	ldrb	r3, [r4, #2]
    7300:	2b01      	cmp	r3, #1
    7302:	d103      	bne.n	730c <bt_conn_set_state+0x114>
				k_work_cancel_delayable(&conn->deferred_work);
    7304:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7308:	f019 f8b8 	bl	2047c <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    730c:	f3bf 8f5b 	dmb	ish
    7310:	3404      	adds	r4, #4
    7312:	e854 3f00 	ldrex	r3, [r4]
    7316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    731a:	e844 3200 	strex	r2, r3, [r4]
    731e:	2a00      	cmp	r2, #0
    7320:	d1f7      	bne.n	7312 <bt_conn_set_state+0x11a>
    7322:	f3bf 8f5b 	dmb	ish
    7326:	4826      	ldr	r0, [pc, #152]	; (73c0 <bt_conn_set_state+0x1c8>)
}
    7328:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    732c:	2100      	movs	r1, #0
    732e:	f014 b96d 	b.w	1b60c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    7332:	7b23      	ldrb	r3, [r4, #12]
    7334:	2b00      	cmp	r3, #0
    7336:	d0c2      	beq.n	72be <bt_conn_set_state+0xc6>
				notify_connected(conn);
    7338:	4620      	mov	r0, r4
    733a:	f7ff fd4d 	bl	6dd8 <notify_connected>
    733e:	e7be      	b.n	72be <bt_conn_set_state+0xc6>
    7340:	4a1a      	ldr	r2, [pc, #104]	; (73ac <bt_conn_set_state+0x1b4>)
    7342:	4b19      	ldr	r3, [pc, #100]	; (73a8 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    7344:	481f      	ldr	r0, [pc, #124]	; (73c4 <bt_conn_set_state+0x1cc>)
    7346:	1ad2      	subs	r2, r2, r3
    7348:	08d2      	lsrs	r2, r2, #3
    734a:	0192      	lsls	r2, r2, #6
    734c:	f042 0202 	orr.w	r2, r2, #2
    7350:	4629      	mov	r1, r5
    7352:	e766      	b.n	7222 <bt_conn_set_state+0x2a>
	return list->head;
    7354:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7356:	b128      	cbz	r0, 7364 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7358:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    735a:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    735c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    735e:	4288      	cmp	r0, r1
	list->tail = node;
    7360:	bf08      	it	eq
    7362:	61a3      	streq	r3, [r4, #24]
    7364:	f382 8811 	msr	BASEPRI, r2
    7368:	f3bf 8f6f 	isb	sy
		if (!node) {
    736c:	b1d8      	cbz	r0, 73a6 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    736e:	f04f 0220 	mov.w	r2, #32
    7372:	f3ef 8311 	mrs	r3, BASEPRI
    7376:	f382 8812 	msr	BASEPRI_MAX, r2
    737a:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    737e:	68c2      	ldr	r2, [r0, #12]
    7380:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    7382:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7384:	f383 8811 	msr	BASEPRI, r3
    7388:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    738c:	f7ff fd1a 	bl	6dc4 <tx_free>
    7390:	e770      	b.n	7274 <bt_conn_set_state+0x7c>
    7392:	4a06      	ldr	r2, [pc, #24]	; (73ac <bt_conn_set_state+0x1b4>)
    7394:	4b04      	ldr	r3, [pc, #16]	; (73a8 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    7396:	480c      	ldr	r0, [pc, #48]	; (73c8 <bt_conn_set_state+0x1d0>)
    7398:	1ad2      	subs	r2, r2, r3
    739a:	08d2      	lsrs	r2, r2, #3
    739c:	0192      	lsls	r2, r2, #6
    739e:	f042 0202 	orr.w	r2, r2, #2
    73a2:	4629      	mov	r1, r5
    73a4:	e73d      	b.n	7222 <bt_conn_set_state+0x2a>
}
    73a6:	bd70      	pop	{r4, r5, r6, pc}
    73a8:	00020e00 	.word	0x00020e00
    73ac:	00020e18 	.word	0x00020e18
    73b0:	00023ce6 	.word	0x00023ce6
    73b4:	00021510 	.word	0x00021510
    73b8:	00023cdc 	.word	0x00023cdc
    73bc:	200000d0 	.word	0x200000d0
    73c0:	20000240 	.word	0x20000240
    73c4:	00023cf7 	.word	0x00023cf7
    73c8:	00023d0e 	.word	0x00023d0e

000073cc <bt_conn_index>:
		index = conn - acl_conns;
    73cc:	4b03      	ldr	r3, [pc, #12]	; (73dc <bt_conn_index+0x10>)
    73ce:	1ac0      	subs	r0, r0, r3
    73d0:	4b03      	ldr	r3, [pc, #12]	; (73e0 <bt_conn_index+0x14>)
    73d2:	10c0      	asrs	r0, r0, #3
    73d4:	4358      	muls	r0, r3
}
    73d6:	b2c0      	uxtb	r0, r0
    73d8:	4770      	bx	lr
    73da:	bf00      	nop
    73dc:	20000aa0 	.word	0x20000aa0
    73e0:	c28f5c29 	.word	0xc28f5c29

000073e4 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
    73e4:	b570      	push	{r4, r5, r6, lr}
    73e6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    73e8:	f3bf 8f5b 	dmb	ish
    73ec:	6863      	ldr	r3, [r4, #4]
    73ee:	f3bf 8f5b 	dmb	ish
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send slave conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    73f2:	059b      	lsls	r3, r3, #22
    73f4:	f100 0004 	add.w	r0, r0, #4
    73f8:	d511      	bpl.n	741e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    73fa:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    73fe:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    7402:	429a      	cmp	r2, r3
    7404:	d80b      	bhi.n	741e <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    7406:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    740a:	429a      	cmp	r2, r3
    740c:	d307      	bcc.n	741e <notify_le_param_updated+0x3a>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
    740e:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    7412:	429a      	cmp	r2, r3
    7414:	d103      	bne.n	741e <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7416:	f46f 7100 	mvn.w	r1, #512	; 0x200
    741a:	f016 fecc 	bl	1e1b6 <atomic_and>
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    741e:	4b08      	ldr	r3, [pc, #32]	; (7440 <notify_le_param_updated+0x5c>)
    7420:	681d      	ldr	r5, [r3, #0]
    7422:	b905      	cbnz	r5, 7426 <notify_le_param_updated+0x42>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
    7424:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7426:	68ee      	ldr	r6, [r5, #12]
    7428:	b13e      	cbz	r6, 743a <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    742a:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    742e:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7432:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7436:	4620      	mov	r0, r4
    7438:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    743a:	6a2d      	ldr	r5, [r5, #32]
    743c:	e7f1      	b.n	7422 <notify_le_param_updated+0x3e>
    743e:	bf00      	nop
    7440:	20001544 	.word	0x20001544

00007444 <notify_le_data_len_updated>:
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
void notify_le_data_len_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    7444:	4b07      	ldr	r3, [pc, #28]	; (7464 <notify_le_data_len_updated+0x20>)
{
    7446:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    7448:	681c      	ldr	r4, [r3, #0]
{
    744a:	4605      	mov	r5, r0
		if (cb->le_data_len_updated) {
			cb->le_data_len_updated(conn, &conn->le.data_len);
    744c:	f100 06ba 	add.w	r6, r0, #186	; 0xba
	for (cb = callback_list; cb; cb = cb->_next) {
    7450:	b904      	cbnz	r4, 7454 <notify_le_data_len_updated+0x10>
		}
	}
}
    7452:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_data_len_updated) {
    7454:	69e3      	ldr	r3, [r4, #28]
    7456:	b113      	cbz	r3, 745e <notify_le_data_len_updated+0x1a>
			cb->le_data_len_updated(conn, &conn->le.data_len);
    7458:	4631      	mov	r1, r6
    745a:	4628      	mov	r0, r5
    745c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    745e:	6a24      	ldr	r4, [r4, #32]
    7460:	e7f6      	b.n	7450 <notify_le_data_len_updated+0xc>
    7462:	bf00      	nop
    7464:	20001544 	.word	0x20001544

00007468 <notify_le_phy_updated>:
#if defined(CONFIG_BT_USER_PHY_UPDATE)
void notify_le_phy_updated(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    7468:	4b07      	ldr	r3, [pc, #28]	; (7488 <notify_le_phy_updated+0x20>)
{
    746a:	b570      	push	{r4, r5, r6, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    746c:	681c      	ldr	r4, [r3, #0]
{
    746e:	4605      	mov	r5, r0
		if (cb->le_phy_updated) {
			cb->le_phy_updated(conn, &conn->le.phy);
    7470:	f100 06b8 	add.w	r6, r0, #184	; 0xb8
	for (cb = callback_list; cb; cb = cb->_next) {
    7474:	b904      	cbnz	r4, 7478 <notify_le_phy_updated+0x10>
		}
	}
}
    7476:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_phy_updated) {
    7478:	69a3      	ldr	r3, [r4, #24]
    747a:	b113      	cbz	r3, 7482 <notify_le_phy_updated+0x1a>
			cb->le_phy_updated(conn, &conn->le.phy);
    747c:	4631      	mov	r1, r6
    747e:	4628      	mov	r0, r5
    7480:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7482:	6a24      	ldr	r4, [r4, #32]
    7484:	e7f6      	b.n	7474 <notify_le_phy_updated+0xc>
    7486:	bf00      	nop
    7488:	20001544 	.word	0x20001544

0000748c <le_param_req>:
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
    748c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    748e:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
    7490:	4608      	mov	r0, r1
{
    7492:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7494:	f016 fca3 	bl	1ddde <bt_le_conn_params_valid>
    7498:	4604      	mov	r4, r0
    749a:	b910      	cbnz	r0, 74a2 <le_param_req+0x16>
		return false;
    749c:	2400      	movs	r4, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
    749e:	4620      	mov	r0, r4
    74a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    74a2:	4b09      	ldr	r3, [pc, #36]	; (74c8 <le_param_req+0x3c>)
    74a4:	681e      	ldr	r6, [r3, #0]
    74a6:	2e00      	cmp	r6, #0
    74a8:	d0f9      	beq.n	749e <le_param_req+0x12>
		if (!cb->le_param_req) {
    74aa:	68b3      	ldr	r3, [r6, #8]
    74ac:	b90b      	cbnz	r3, 74b2 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    74ae:	6a36      	ldr	r6, [r6, #32]
    74b0:	e7f9      	b.n	74a6 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    74b2:	4629      	mov	r1, r5
    74b4:	4638      	mov	r0, r7
    74b6:	4798      	blx	r3
    74b8:	2800      	cmp	r0, #0
    74ba:	d0ef      	beq.n	749c <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    74bc:	4628      	mov	r0, r5
    74be:	f016 fc8e 	bl	1ddde <bt_le_conn_params_valid>
    74c2:	2800      	cmp	r0, #0
    74c4:	d1f3      	bne.n	74ae <le_param_req+0x22>
    74c6:	e7e9      	b.n	749c <le_param_req+0x10>
    74c8:	20001544 	.word	0x20001544

000074cc <bt_conn_identity_resolved>:

#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_SMP)
void bt_conn_identity_resolved(struct bt_conn *conn)
{
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const bt_addr_le_t *rpa;
	struct bt_conn_cb *cb;

	if (conn->role == BT_HCI_ROLE_MASTER) {
    74ce:	78c3      	ldrb	r3, [r0, #3]
{
    74d0:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    74d2:	b93b      	cbnz	r3, 74e4 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    74d4:	f100 0696 	add.w	r6, r0, #150	; 0x96
	} else {
		rpa = &conn->le.init_addr;
	}

	for (cb = callback_list; cb; cb = cb->_next) {
    74d8:	4b08      	ldr	r3, [pc, #32]	; (74fc <bt_conn_identity_resolved+0x30>)
    74da:	681d      	ldr	r5, [r3, #0]
		if (cb->identity_resolved) {
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    74dc:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    74e0:	b91d      	cbnz	r5, 74ea <bt_conn_identity_resolved+0x1e>
		}
	}
}
    74e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    74e4:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    74e8:	e7f6      	b.n	74d8 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    74ea:	692b      	ldr	r3, [r5, #16]
    74ec:	b11b      	cbz	r3, 74f6 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    74ee:	463a      	mov	r2, r7
    74f0:	4631      	mov	r1, r6
    74f2:	4620      	mov	r0, r4
    74f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    74f6:	6a2d      	ldr	r5, [r5, #32]
    74f8:	e7f2      	b.n	74e0 <bt_conn_identity_resolved+0x14>
    74fa:	bf00      	nop
    74fc:	20001544 	.word	0x20001544

00007500 <bt_conn_security_changed>:
	conn->required_sec_level = conn->sec_level;
}

void bt_conn_security_changed(struct bt_conn *conn, uint8_t hci_err,
			      enum bt_security_err err)
{
    7500:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    7502:	7a43      	ldrb	r3, [r0, #9]
    7504:	7283      	strb	r3, [r0, #10]
{
    7506:	4604      	mov	r4, r0
    7508:	4616      	mov	r6, r2
	struct bt_conn_cb *cb;

	reset_pairing(conn);
	bt_l2cap_security_changed(conn, hci_err);
    750a:	f017 f82a 	bl	1e562 <bt_l2cap_security_changed>

	for (cb = callback_list; cb; cb = cb->_next) {
    750e:	4b06      	ldr	r3, [pc, #24]	; (7528 <bt_conn_security_changed+0x28>)
    7510:	681d      	ldr	r5, [r3, #0]
    7512:	b905      	cbnz	r5, 7516 <bt_conn_security_changed+0x16>
		}
#endif /* CONFIG_BT_BREDR */

	}
#endif
}
    7514:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    7516:	696b      	ldr	r3, [r5, #20]
    7518:	b11b      	cbz	r3, 7522 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    751a:	7a61      	ldrb	r1, [r4, #9]
    751c:	4632      	mov	r2, r6
    751e:	4620      	mov	r0, r4
    7520:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7522:	6a2d      	ldr	r5, [r5, #32]
    7524:	e7f5      	b.n	7512 <bt_conn_security_changed+0x12>
    7526:	bf00      	nop
    7528:	20001544 	.word	0x20001544

0000752c <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
    752c:	4b02      	ldr	r3, [pc, #8]	; (7538 <bt_conn_cb_register+0xc>)
    752e:	681a      	ldr	r2, [r3, #0]
    7530:	6202      	str	r2, [r0, #32]
	callback_list = cb;
    7532:	6018      	str	r0, [r3, #0]
}
    7534:	4770      	bx	lr
    7536:	bf00      	nop
    7538:	20001544 	.word	0x20001544

0000753c <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    753c:	b570      	push	{r4, r5, r6, lr}
    753e:	4606      	mov	r6, r0
    7540:	460d      	mov	r5, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    7542:	480a      	ldr	r0, [pc, #40]	; (756c <bt_conn_add_le+0x30>)
    7544:	2101      	movs	r1, #1
    7546:	f7ff fcfb 	bl	6f40 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
    754a:	4604      	mov	r4, r0
    754c:	b160      	cbz	r0, 7568 <bt_conn_add_le+0x2c>
		return NULL;
	}

	conn->id = id;
    754e:	7206      	strb	r6, [r0, #8]
    7550:	2207      	movs	r2, #7
    7552:	4629      	mov	r1, r5
    7554:	3088      	adds	r0, #136	; 0x88
    7556:	f016 fa59 	bl	1da0c <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    755a:	2301      	movs	r3, #1
    755c:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    755e:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    7560:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7562:	4b03      	ldr	r3, [pc, #12]	; (7570 <bt_conn_add_le+0x34>)
    7564:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    7568:	4620      	mov	r0, r4
    756a:	bd70      	pop	{r4, r5, r6, pc}
    756c:	20000aa0 	.word	0x20000aa0
    7570:	00280018 	.word	0x00280018

00007574 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    7574:	b570      	push	{r4, r5, r6, lr}
    7576:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7578:	480c      	ldr	r0, [pc, #48]	; (75ac <bt_conn_lookup_addr_le+0x38>)
{
    757a:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    757c:	f016 fe77 	bl	1e26e <bt_conn_ref>

		if (!conn) {
    7580:	4604      	mov	r4, r0
    7582:	b128      	cbz	r0, 7590 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    7584:	7883      	ldrb	r3, [r0, #2]
    7586:	2b01      	cmp	r3, #1
    7588:	d004      	beq.n	7594 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    758a:	f016 fe8b 	bl	1e2a4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    758e:	2400      	movs	r4, #0
}
    7590:	4620      	mov	r0, r4
    7592:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    7594:	4629      	mov	r1, r5
    7596:	4632      	mov	r2, r6
    7598:	f016 ff1f 	bl	1e3da <bt_conn_is_peer_addr_le>
    759c:	4605      	mov	r5, r0
    759e:	2800      	cmp	r0, #0
    75a0:	d1f6      	bne.n	7590 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    75a2:	4620      	mov	r0, r4
    75a4:	f016 fe7e 	bl	1e2a4 <bt_conn_unref>
	return NULL;
    75a8:	462c      	mov	r4, r5
			continue;
    75aa:	e7f1      	b.n	7590 <bt_conn_lookup_addr_le+0x1c>
    75ac:	20000aa0 	.word	0x20000aa0

000075b0 <bt_conn_exists_le>:
{
    75b0:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    75b2:	f7ff ffdf 	bl	7574 <bt_conn_lookup_addr_le>
	if (conn) {
    75b6:	4604      	mov	r4, r0
    75b8:	b1a0      	cbz	r0, 75e4 <bt_conn_exists_le+0x34>
    75ba:	4b0b      	ldr	r3, [pc, #44]	; (75e8 <bt_conn_exists_le+0x38>)
    75bc:	4a0b      	ldr	r2, [pc, #44]	; (75ec <bt_conn_exists_le+0x3c>)
    75be:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    75c0:	7b43      	ldrb	r3, [r0, #13]
    75c2:	480b      	ldr	r0, [pc, #44]	; (75f0 <bt_conn_exists_le+0x40>)
    75c4:	2b08      	cmp	r3, #8
    75c6:	bf96      	itet	ls
    75c8:	490a      	ldrls	r1, [pc, #40]	; (75f4 <bt_conn_exists_le+0x44>)
    75ca:	490b      	ldrhi	r1, [pc, #44]	; (75f8 <bt_conn_exists_le+0x48>)
    75cc:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    75d0:	08d2      	lsrs	r2, r2, #3
    75d2:	0192      	lsls	r2, r2, #6
    75d4:	f042 0202 	orr.w	r2, r2, #2
    75d8:	f014 fd18 	bl	1c00c <log_1>
		bt_conn_unref(conn);
    75dc:	4620      	mov	r0, r4
    75de:	f016 fe61 	bl	1e2a4 <bt_conn_unref>
		return true;
    75e2:	2001      	movs	r0, #1
}
    75e4:	bd10      	pop	{r4, pc}
    75e6:	bf00      	nop
    75e8:	00020e00 	.word	0x00020e00
    75ec:	00020e18 	.word	0x00020e18
    75f0:	00023d2a 	.word	0x00023d2a
    75f4:	00021510 	.word	0x00021510
    75f8:	00023cdc 	.word	0x00023cdc

000075fc <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    75fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7600:	480e      	ldr	r0, [pc, #56]	; (763c <bt_conn_lookup_state_le+0x40>)
{
    7602:	460e      	mov	r6, r1
    7604:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    7606:	f016 fe32 	bl	1e26e <bt_conn_ref>

		if (!conn) {
    760a:	4604      	mov	r4, r0
    760c:	b1a0      	cbz	r0, 7638 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    760e:	7883      	ldrb	r3, [r0, #2]
    7610:	2b01      	cmp	r3, #1
    7612:	d003      	beq.n	761c <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
    7614:	f016 fe46 	bl	1e2a4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    7618:	2400      	movs	r4, #0
			continue;
    761a:	e00d      	b.n	7638 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    761c:	b136      	cbz	r6, 762c <bt_conn_lookup_state_le+0x30>
    761e:	4632      	mov	r2, r6
    7620:	4629      	mov	r1, r5
    7622:	f016 feda 	bl	1e3da <bt_conn_is_peer_addr_le>
    7626:	b908      	cbnz	r0, 762c <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
    7628:	4620      	mov	r0, r4
    762a:	e7f3      	b.n	7614 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
    762c:	7b63      	ldrb	r3, [r4, #13]
    762e:	42bb      	cmp	r3, r7
    7630:	d1fa      	bne.n	7628 <bt_conn_lookup_state_le+0x2c>
    7632:	7a23      	ldrb	r3, [r4, #8]
    7634:	42ab      	cmp	r3, r5
    7636:	d1f7      	bne.n	7628 <bt_conn_lookup_state_le+0x2c>
}
    7638:	4620      	mov	r0, r4
    763a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    763c:	20000aa0 	.word	0x20000aa0

00007640 <send_conn_le_param_update>:
{
    7640:	b538      	push	{r3, r4, r5, lr}
    7642:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    7644:	4608      	mov	r0, r1
{
    7646:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7648:	f016 fbc9 	bl	1ddde <bt_le_conn_params_valid>
    764c:	b318      	cbz	r0, 7696 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    764e:	4b13      	ldr	r3, [pc, #76]	; (769c <send_conn_le_param_update+0x5c>)
    7650:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    7654:	0799      	lsls	r1, r3, #30
    7656:	d407      	bmi.n	7668 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    7658:	78e3      	ldrb	r3, [r4, #3]
    765a:	b183      	cbz	r3, 767e <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    765c:	4629      	mov	r1, r5
    765e:	4620      	mov	r0, r4
}
    7660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    7664:	f000 bac4 	b.w	7bf0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    7668:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    766c:	079a      	lsls	r2, r3, #30
    766e:	d5f3      	bpl.n	7658 <send_conn_le_param_update+0x18>
    7670:	f3bf 8f5b 	dmb	ish
    7674:	6863      	ldr	r3, [r4, #4]
    7676:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    767a:	055b      	lsls	r3, r3, #21
    767c:	d4ec      	bmi.n	7658 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    767e:	4629      	mov	r1, r5
    7680:	4620      	mov	r0, r4
    7682:	f016 fef6 	bl	1e472 <bt_conn_le_conn_update>
		if (rc == 0) {
    7686:	b928      	cbnz	r0, 7694 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    7688:	88ab      	ldrh	r3, [r5, #4]
    768a:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    768e:	88eb      	ldrh	r3, [r5, #6]
    7690:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    7694:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7696:	f06f 0015 	mvn.w	r0, #21
    769a:	e7fb      	b.n	7694 <send_conn_le_param_update+0x54>
    769c:	20000000 	.word	0x20000000

000076a0 <deferred_work>:
{
    76a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    76a2:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    76a6:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    76a8:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    76ac:	b99b      	cbnz	r3, 76d6 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    76ae:	4628      	mov	r0, r5
    76b0:	f016 ff41 	bl	1e536 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    76b4:	4b22      	ldr	r3, [pc, #136]	; (7740 <deferred_work+0xa0>)
    76b6:	681e      	ldr	r6, [r3, #0]
    76b8:	b92e      	cbnz	r6, 76c6 <deferred_work+0x26>
		bt_conn_unref(conn);
    76ba:	4628      	mov	r0, r5
}
    76bc:	b002      	add	sp, #8
    76be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    76c2:	f016 bdef 	b.w	1e2a4 <bt_conn_unref>
		if (cb->disconnected) {
    76c6:	6873      	ldr	r3, [r6, #4]
    76c8:	b11b      	cbz	r3, 76d2 <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    76ca:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    76ce:	4628      	mov	r0, r5
    76d0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    76d2:	6a36      	ldr	r6, [r6, #32]
    76d4:	e7f0      	b.n	76b8 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    76d6:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    76da:	2b01      	cmp	r3, #1
    76dc:	d128      	bne.n	7730 <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
    76de:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    76e2:	f46f 7100 	mvn.w	r1, #512	; 0x200
    76e6:	4630      	mov	r0, r6
    76e8:	f016 fd65 	bl	1e1b6 <atomic_and>
    76ec:	0583      	lsls	r3, r0, #22
    76ee:	d521      	bpl.n	7734 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    76f0:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    76f4:	f8ad 3000 	strh.w	r3, [sp]
    76f8:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    76fc:	f8ad 3002 	strh.w	r3, [sp, #2]
    7700:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    7704:	f8ad 3004 	strh.w	r3, [sp, #4]
    7708:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    770c:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    7710:	4669      	mov	r1, sp
    7712:	4628      	mov	r0, r5
    7714:	f7ff ff94 	bl	7640 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7718:	f3bf 8f5b 	dmb	ish
    771c:	e856 3f00 	ldrex	r3, [r6]
    7720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7724:	e846 3200 	strex	r2, r3, [r6]
    7728:	2a00      	cmp	r2, #0
    772a:	d1f7      	bne.n	771c <deferred_work+0x7c>
    772c:	f3bf 8f5b 	dmb	ish
}
    7730:	b002      	add	sp, #8
    7732:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    7734:	4a03      	ldr	r2, [pc, #12]	; (7744 <deferred_work+0xa4>)
    7736:	6810      	ldr	r0, [r2, #0]
    7738:	6851      	ldr	r1, [r2, #4]
    773a:	466b      	mov	r3, sp
    773c:	c303      	stmia	r3!, {r0, r1}
    773e:	e7e7      	b.n	7710 <deferred_work+0x70>
    7740:	20001544 	.word	0x20001544
    7744:	0002106c 	.word	0x0002106c

00007748 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    7748:	b538      	push	{r3, r4, r5, lr}
    774a:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    774c:	490c      	ldr	r1, [pc, #48]	; (7780 <bt_conn_create_pdu_timeout+0x38>)
    774e:	2800      	cmp	r0, #0
    7750:	bf08      	it	eq
    7752:	4608      	moveq	r0, r1
    7754:	f018 fa57 	bl	1fc06 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    7758:	4604      	mov	r4, r0
    775a:	b958      	cbnz	r0, 7774 <bt_conn_create_pdu_timeout+0x2c>
    775c:	4909      	ldr	r1, [pc, #36]	; (7784 <bt_conn_create_pdu_timeout+0x3c>)
    775e:	4b0a      	ldr	r3, [pc, #40]	; (7788 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    7760:	480a      	ldr	r0, [pc, #40]	; (778c <bt_conn_create_pdu_timeout+0x44>)
    7762:	1ac9      	subs	r1, r1, r3
    7764:	08c9      	lsrs	r1, r1, #3
    7766:	0189      	lsls	r1, r1, #6
    7768:	f041 0102 	orr.w	r1, r1, #2
    776c:	f014 fc41 	bl	1bff2 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    7770:	4620      	mov	r0, r4
    7772:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    7774:	1d29      	adds	r1, r5, #4
    7776:	3008      	adds	r0, #8
    7778:	f018 fa64 	bl	1fc44 <net_buf_simple_reserve>
	return buf;
    777c:	e7f8      	b.n	7770 <bt_conn_create_pdu_timeout+0x28>
    777e:	bf00      	nop
    7780:	200007cc 	.word	0x200007cc
    7784:	00020e18 	.word	0x00020e18
    7788:	00020e00 	.word	0x00020e00
    778c:	00023d4d 	.word	0x00023d4d

00007790 <bt_conn_create_frag_timeout>:
{
    7790:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    7792:	4801      	ldr	r0, [pc, #4]	; (7798 <bt_conn_create_frag_timeout+0x8>)
    7794:	f7ff bfd8 	b.w	7748 <bt_conn_create_pdu_timeout>
    7798:	2000081c 	.word	0x2000081c

0000779c <create_frag>:
{
    779c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77a0:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    77a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    77a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    77aa:	2000      	movs	r0, #0
{
    77ac:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    77ae:	f7ff ffef 	bl	7790 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    77b2:	7b73      	ldrb	r3, [r6, #13]
    77b4:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    77b6:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    77b8:	f04f 0600 	mov.w	r6, #0
    77bc:	d005      	beq.n	77ca <create_frag+0x2e>
		net_buf_unref(frag);
    77be:	f011 fb9b 	bl	18ef8 <net_buf_unref>
		return NULL;
    77c2:	4635      	mov	r5, r6
}
    77c4:	4628      	mov	r0, r5
    77c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    77ca:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    77cc:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    77d0:	4e0c      	ldr	r6, [pc, #48]	; (7804 <create_frag+0x68>)
    77d2:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    77d4:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    77d8:	f018 fab2 	bl	1fd40 <net_buf_simple_tailroom>
    77dc:	4580      	cmp	r8, r0
    77de:	d20c      	bcs.n	77fa <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    77e0:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	return net_buf_simple_add_mem(&buf->b, mem, len);
    77e4:	f854 1f08 	ldr.w	r1, [r4, #8]!
    77e8:	4632      	mov	r2, r6
    77ea:	4638      	mov	r0, r7
    77ec:	f018 fa73 	bl	1fcd6 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    77f0:	4631      	mov	r1, r6
    77f2:	4620      	mov	r0, r4
    77f4:	f018 fa88 	bl	1fd08 <net_buf_simple_pull>
    77f8:	e7e4      	b.n	77c4 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    77fa:	4638      	mov	r0, r7
    77fc:	f018 faa0 	bl	1fd40 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    7800:	b286      	uxth	r6, r0
    7802:	e7ef      	b.n	77e4 <create_frag+0x48>
    7804:	20000000 	.word	0x20000000

00007808 <bt_conn_process_tx>:
{
    7808:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    780a:	7b43      	ldrb	r3, [r0, #13]
{
    780c:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    780e:	b95b      	cbnz	r3, 7828 <bt_conn_process_tx+0x20>
    7810:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7814:	3004      	adds	r0, #4
    7816:	f016 fcce 	bl	1e1b6 <atomic_and>
    781a:	0643      	lsls	r3, r0, #25
    781c:	d504      	bpl.n	7828 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    781e:	4620      	mov	r0, r4
}
    7820:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    7824:	f016 bd05 	b.w	1e232 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7828:	2200      	movs	r2, #0
    782a:	2300      	movs	r3, #0
    782c:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7830:	f018 f9ee 	bl	1fc10 <net_buf_get>
	BT_ASSERT(buf);
    7834:	4605      	mov	r5, r0
    7836:	b960      	cbnz	r0, 7852 <bt_conn_process_tx+0x4a>
    7838:	4a1f      	ldr	r2, [pc, #124]	; (78b8 <bt_conn_process_tx+0xb0>)
    783a:	4920      	ldr	r1, [pc, #128]	; (78bc <bt_conn_process_tx+0xb4>)
    783c:	4820      	ldr	r0, [pc, #128]	; (78c0 <bt_conn_process_tx+0xb8>)
    783e:	f240 23c6 	movw	r3, #710	; 0x2c6
    7842:	f013 ff97 	bl	1b774 <printk>
    7846:	4040      	eors	r0, r0
    7848:	f380 8811 	msr	BASEPRI, r0
    784c:	f04f 0003 	mov.w	r0, #3
    7850:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    7852:	4e1c      	ldr	r6, [pc, #112]	; (78c4 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    7854:	89aa      	ldrh	r2, [r5, #12]
    7856:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    785a:	429a      	cmp	r2, r3
    785c:	d807      	bhi.n	786e <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    785e:	2300      	movs	r3, #0
    7860:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    7862:	4629      	mov	r1, r5
    7864:	4620      	mov	r0, r4
    7866:	f7ff facd 	bl	6e04 <send_frag>
	if (!send_buf(conn, buf)) {
    786a:	b130      	cbz	r0, 787a <bt_conn_process_tx+0x72>
}
    786c:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    786e:	4629      	mov	r1, r5
    7870:	4620      	mov	r0, r4
    7872:	f7ff ff93 	bl	779c <create_frag>
	if (!frag) {
    7876:	4601      	mov	r1, r0
    7878:	b920      	cbnz	r0, 7884 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    787a:	4628      	mov	r0, r5
}
    787c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    7880:	f011 bb3a 	b.w	18ef8 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    7884:	2301      	movs	r3, #1
    7886:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    7888:	4620      	mov	r0, r4
    788a:	f7ff fabb 	bl	6e04 <send_frag>
    788e:	2800      	cmp	r0, #0
    7890:	d0f3      	beq.n	787a <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    7892:	89aa      	ldrh	r2, [r5, #12]
    7894:	f8b6 30cc 	ldrh.w	r3, [r6, #204]	; 0xcc
    7898:	429a      	cmp	r2, r3
    789a:	d802      	bhi.n	78a2 <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    789c:	2300      	movs	r3, #0
    789e:	2203      	movs	r2, #3
    78a0:	e7df      	b.n	7862 <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    78a2:	4629      	mov	r1, r5
    78a4:	4620      	mov	r0, r4
    78a6:	f7ff ff79 	bl	779c <create_frag>
		if (!frag) {
    78aa:	4601      	mov	r1, r0
    78ac:	2800      	cmp	r0, #0
    78ae:	d0e4      	beq.n	787a <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    78b0:	2301      	movs	r3, #1
    78b2:	461a      	mov	r2, r3
    78b4:	e7e8      	b.n	7888 <bt_conn_process_tx+0x80>
    78b6:	bf00      	nop
    78b8:	00023d76 	.word	0x00023d76
    78bc:	000231ae 	.word	0x000231ae
    78c0:	0002344a 	.word	0x0002344a
    78c4:	20000000 	.word	0x20000000

000078c8 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    78c8:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    78ca:	490b      	ldr	r1, [pc, #44]	; (78f8 <bt_conn_init+0x30>)
    78cc:	480b      	ldr	r0, [pc, #44]	; (78fc <bt_conn_init+0x34>)
    78ce:	f018 fcd2 	bl	20276 <k_queue_append>
    78d2:	490b      	ldr	r1, [pc, #44]	; (7900 <bt_conn_init+0x38>)
    78d4:	4809      	ldr	r0, [pc, #36]	; (78fc <bt_conn_init+0x34>)
    78d6:	f018 fcce 	bl	20276 <k_queue_append>
    78da:	490a      	ldr	r1, [pc, #40]	; (7904 <bt_conn_init+0x3c>)
    78dc:	4807      	ldr	r0, [pc, #28]	; (78fc <bt_conn_init+0x34>)
    78de:	f018 fcca 	bl	20276 <k_queue_append>
	}

	bt_att_init();
    78e2:	f017 fa42 	bl	1ed6a <bt_att_init>

	err = bt_smp_init();
    78e6:	f003 fe41 	bl	b56c <bt_smp_init>
	if (err) {
    78ea:	4604      	mov	r4, r0
    78ec:	b908      	cbnz	r0, 78f2 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    78ee:	f016 fe8e 	bl	1e60e <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    78f2:	4620      	mov	r0, r4
    78f4:	bd10      	pop	{r4, pc}
    78f6:	bf00      	nop
    78f8:	20001548 	.word	0x20001548
    78fc:	2000079c 	.word	0x2000079c
    7900:	20001558 	.word	0x20001558
    7904:	20001568 	.word	0x20001568

00007908 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    7908:	4a0b      	ldr	r2, [pc, #44]	; (7938 <l2cap_accept+0x30>)
{
    790a:	b508      	push	{r3, lr}
    790c:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    790e:	6810      	ldr	r0, [r2, #0]
    7910:	b918      	cbnz	r0, 791a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    7912:	4b0a      	ldr	r3, [pc, #40]	; (793c <l2cap_accept+0x34>)
    7914:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    7916:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    7918:	bd08      	pop	{r3, pc}
    791a:	4909      	ldr	r1, [pc, #36]	; (7940 <l2cap_accept+0x38>)
    791c:	4a09      	ldr	r2, [pc, #36]	; (7944 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    791e:	480a      	ldr	r0, [pc, #40]	; (7948 <l2cap_accept+0x40>)
    7920:	1a52      	subs	r2, r2, r1
    7922:	08d2      	lsrs	r2, r2, #3
    7924:	0192      	lsls	r2, r2, #6
    7926:	f042 0201 	orr.w	r2, r2, #1
    792a:	4619      	mov	r1, r3
    792c:	f014 fb6e 	bl	1c00c <log_1>
	return -ENOMEM;
    7930:	f06f 000b 	mvn.w	r0, #11
    7934:	e7f0      	b.n	7918 <l2cap_accept+0x10>
    7936:	bf00      	nop
    7938:	20000b68 	.word	0x20000b68
    793c:	00021554 	.word	0x00021554
    7940:	00020e00 	.word	0x00020e00
    7944:	00020f00 	.word	0x00020f00
    7948:	00023e03 	.word	0x00023e03

0000794c <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    794c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    794e:	4605      	mov	r5, r0
    7950:	460f      	mov	r7, r1
    7952:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    7954:	2300      	movs	r3, #0
    7956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    795a:	2104      	movs	r1, #4
    795c:	2000      	movs	r0, #0
    795e:	f7ff fef3 	bl	7748 <bt_conn_create_pdu_timeout>
	if (!buf) {
    7962:	4604      	mov	r4, r0
    7964:	b960      	cbnz	r0, 7980 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    7966:	4a0a      	ldr	r2, [pc, #40]	; (7990 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    7968:	4b0a      	ldr	r3, [pc, #40]	; (7994 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    796a:	480b      	ldr	r0, [pc, #44]	; (7998 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    796c:	1ad2      	subs	r2, r2, r3
    796e:	08d2      	lsrs	r2, r2, #3
    7970:	0192      	lsls	r2, r2, #6
    7972:	f042 0201 	orr.w	r2, r2, #1
    7976:	4629      	mov	r1, r5
    7978:	f014 fb48 	bl	1c00c <log_1>
}
    797c:	4620      	mov	r0, r4
    797e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    7980:	2104      	movs	r1, #4
    7982:	3008      	adds	r0, #8
    7984:	f018 f9a1 	bl	1fcca <net_buf_simple_add>
	hdr->code = code;
    7988:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    798a:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    798c:	8046      	strh	r6, [r0, #2]
	return buf;
    798e:	e7f5      	b.n	797c <l2cap_create_le_sig_pdu.constprop.0+0x30>
    7990:	00020f00 	.word	0x00020f00
    7994:	00020e00 	.word	0x00020e00
    7998:	00023e2a 	.word	0x00023e2a

0000799c <l2cap_rtx_timeout>:
{
    799c:	b538      	push	{r3, r4, r5, lr}
    799e:	4a0b      	ldr	r2, [pc, #44]	; (79cc <l2cap_rtx_timeout+0x30>)
    79a0:	4b0b      	ldr	r3, [pc, #44]	; (79d0 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    79a2:	4604      	mov	r4, r0
    79a4:	1ad2      	subs	r2, r2, r3
    79a6:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    79aa:	480a      	ldr	r0, [pc, #40]	; (79d4 <l2cap_rtx_timeout+0x38>)
    79ac:	08d2      	lsrs	r2, r2, #3
    79ae:	0192      	lsls	r2, r2, #6
    79b0:	4621      	mov	r1, r4
    79b2:	f042 0201 	orr.w	r2, r2, #1
    79b6:	f014 fb29 	bl	1c00c <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    79ba:	4628      	mov	r0, r5
    79bc:	4621      	mov	r1, r4
    79be:	f016 fd84 	bl	1e4ca <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    79c2:	4620      	mov	r0, r4
}
    79c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    79c8:	f016 bda0 	b.w	1e50c <bt_l2cap_chan_del>
    79cc:	00020f00 	.word	0x00020f00
    79d0:	00020e00 	.word	0x00020e00
    79d4:	00023e52 	.word	0x00023e52

000079d8 <bt_l2cap_connected>:
{
    79d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    79dc:	4e29      	ldr	r6, [pc, #164]	; (7a84 <bt_l2cap_connected+0xac>)
    79de:	4f2a      	ldr	r7, [pc, #168]	; (7a88 <bt_l2cap_connected+0xb0>)
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    79e0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 7a8c <bt_l2cap_connected+0xb4>
{
    79e4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    79e6:	42be      	cmp	r6, r7
    79e8:	d302      	bcc.n	79f0 <bt_l2cap_connected+0x18>
}
    79ea:	b003      	add	sp, #12
    79ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    79f0:	6873      	ldr	r3, [r6, #4]
    79f2:	a901      	add	r1, sp, #4
    79f4:	4620      	mov	r0, r4
    79f6:	4798      	blx	r3
    79f8:	2800      	cmp	r0, #0
    79fa:	db3d      	blt.n	7a78 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    79fc:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    79fe:	8833      	ldrh	r3, [r6, #0]
    7a00:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
    7a04:	f8a5 307c 	strh.w	r3, [r5, #124]	; 0x7c
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    7a08:	4641      	mov	r1, r8
    7a0a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    7a0e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
    7a12:	f018 fd27 	bl	20464 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7a16:	f3bf 8f5b 	dmb	ish
    7a1a:	f105 0368 	add.w	r3, r5, #104	; 0x68
    7a1e:	2200      	movs	r2, #0
    7a20:	e853 1f00 	ldrex	r1, [r3]
    7a24:	e843 2000 	strex	r0, r2, [r3]
    7a28:	2800      	cmp	r0, #0
    7a2a:	d1f9      	bne.n	7a20 <bt_l2cap_connected+0x48>
    7a2c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    7a30:	60aa      	str	r2, [r5, #8]
	return list->tail;
    7a32:	6d62      	ldr	r2, [r4, #84]	; 0x54
	sys_slist_append(&conn->channels, &chan->node);
    7a34:	f105 0308 	add.w	r3, r5, #8
Z_GENLIST_APPEND(slist, snode)
    7a38:	bb02      	cbnz	r2, 7a7c <bt_l2cap_connected+0xa4>
	list->head = node;
    7a3a:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
		if (chan->ops->connected) {
    7a3e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    7a40:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    7a42:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    7a44:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    7a48:	681b      	ldr	r3, [r3, #0]
    7a4a:	b103      	cbz	r3, 7a4e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    7a4c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7a4e:	9b01      	ldr	r3, [sp, #4]
    7a50:	f3bf 8f5b 	dmb	ish
    7a54:	3368      	adds	r3, #104	; 0x68
    7a56:	e853 2f00 	ldrex	r2, [r3]
    7a5a:	f042 0201 	orr.w	r2, r2, #1
    7a5e:	e843 2100 	strex	r1, r2, [r3]
    7a62:	2900      	cmp	r1, #0
    7a64:	d1f7      	bne.n	7a56 <bt_l2cap_connected+0x7e>
    7a66:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    7a6a:	9801      	ldr	r0, [sp, #4]
    7a6c:	6843      	ldr	r3, [r0, #4]
    7a6e:	699b      	ldr	r3, [r3, #24]
    7a70:	b113      	cbz	r3, 7a78 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    7a72:	f100 0168 	add.w	r1, r0, #104	; 0x68
    7a76:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    7a78:	360c      	adds	r6, #12
    7a7a:	e7b4      	b.n	79e6 <bt_l2cap_connected+0xe>
	parent->next = child;
    7a7c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    7a7e:	6563      	str	r3, [r4, #84]	; 0x54
}
    7a80:	e7dd      	b.n	7a3e <bt_l2cap_connected+0x66>
    7a82:	bf00      	nop
    7a84:	00020dbc 	.word	0x00020dbc
    7a88:	00020de0 	.word	0x00020de0
    7a8c:	0000799d 	.word	0x0000799d

00007a90 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    7a90:	898b      	ldrh	r3, [r1, #12]
    7a92:	2b03      	cmp	r3, #3
{
    7a94:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7a96:	4606      	mov	r6, r0
    7a98:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    7a9a:	d80a      	bhi.n	7ab2 <l2cap_recv+0x22>
    7a9c:	4931      	ldr	r1, [pc, #196]	; (7b64 <l2cap_recv+0xd4>)
    7a9e:	4b32      	ldr	r3, [pc, #200]	; (7b68 <l2cap_recv+0xd8>)
		BT_ERR("Too small L2CAP signaling PDU");
    7aa0:	4832      	ldr	r0, [pc, #200]	; (7b6c <l2cap_recv+0xdc>)
    7aa2:	1ac9      	subs	r1, r1, r3
    7aa4:	08c9      	lsrs	r1, r1, #3
    7aa6:	0189      	lsls	r1, r1, #6
    7aa8:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    7aac:	f014 faa1 	bl	1bff2 <log_0>
		return 0;
    7ab0:	e013      	b.n	7ada <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    7ab2:	2104      	movs	r1, #4
    7ab4:	f105 0008 	add.w	r0, r5, #8
    7ab8:	f018 f92e 	bl	1fd18 <net_buf_simple_pull_mem>
	if (buf->len != len) {
    7abc:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    7abe:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    7ac0:	428a      	cmp	r2, r1
    7ac2:	4604      	mov	r4, r0
    7ac4:	d00c      	beq.n	7ae0 <l2cap_recv+0x50>
    7ac6:	4828      	ldr	r0, [pc, #160]	; (7b68 <l2cap_recv+0xd8>)
    7ac8:	4b26      	ldr	r3, [pc, #152]	; (7b64 <l2cap_recv+0xd4>)
    7aca:	1a1b      	subs	r3, r3, r0
    7acc:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    7ace:	019b      	lsls	r3, r3, #6
    7ad0:	4827      	ldr	r0, [pc, #156]	; (7b70 <l2cap_recv+0xe0>)
    7ad2:	f043 0301 	orr.w	r3, r3, #1
    7ad6:	f014 faad 	bl	1c034 <log_2>
}
    7ada:	2000      	movs	r0, #0
    7adc:	b002      	add	sp, #8
    7ade:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    7ae0:	7843      	ldrb	r3, [r0, #1]
    7ae2:	b943      	cbnz	r3, 7af6 <l2cap_recv+0x66>
    7ae4:	491f      	ldr	r1, [pc, #124]	; (7b64 <l2cap_recv+0xd4>)
    7ae6:	4b20      	ldr	r3, [pc, #128]	; (7b68 <l2cap_recv+0xd8>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    7ae8:	4822      	ldr	r0, [pc, #136]	; (7b74 <l2cap_recv+0xe4>)
    7aea:	1ac9      	subs	r1, r1, r3
    7aec:	08c9      	lsrs	r1, r1, #3
    7aee:	0189      	lsls	r1, r1, #6
    7af0:	f041 0101 	orr.w	r1, r1, #1
    7af4:	e7da      	b.n	7aac <l2cap_recv+0x1c>
	switch (hdr->code) {
    7af6:	7801      	ldrb	r1, [r0, #0]
    7af8:	2901      	cmp	r1, #1
    7afa:	d0ee      	beq.n	7ada <l2cap_recv+0x4a>
    7afc:	2913      	cmp	r1, #19
    7afe:	d10a      	bne.n	7b16 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    7b00:	2a01      	cmp	r2, #1
    7b02:	d8ea      	bhi.n	7ada <l2cap_recv+0x4a>
    7b04:	4917      	ldr	r1, [pc, #92]	; (7b64 <l2cap_recv+0xd4>)
    7b06:	4b18      	ldr	r3, [pc, #96]	; (7b68 <l2cap_recv+0xd8>)
		BT_ERR("Too small LE conn param rsp");
    7b08:	481b      	ldr	r0, [pc, #108]	; (7b78 <l2cap_recv+0xe8>)
    7b0a:	1ac9      	subs	r1, r1, r3
    7b0c:	08c9      	lsrs	r1, r1, #3
    7b0e:	0189      	lsls	r1, r1, #6
    7b10:	f041 0101 	orr.w	r1, r1, #1
    7b14:	e7ca      	b.n	7aac <l2cap_recv+0x1c>
    7b16:	4b14      	ldr	r3, [pc, #80]	; (7b68 <l2cap_recv+0xd8>)
    7b18:	4a12      	ldr	r2, [pc, #72]	; (7b64 <l2cap_recv+0xd4>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    7b1a:	4818      	ldr	r0, [pc, #96]	; (7b7c <l2cap_recv+0xec>)
    7b1c:	1ad2      	subs	r2, r2, r3
    7b1e:	08d2      	lsrs	r2, r2, #3
    7b20:	0192      	lsls	r2, r2, #6
    7b22:	f042 0202 	orr.w	r2, r2, #2
    7b26:	f014 fa71 	bl	1c00c <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    7b2a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    7b2c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    7b2e:	2202      	movs	r2, #2
    7b30:	2001      	movs	r0, #1
    7b32:	f7ff ff0b 	bl	794c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    7b36:	4604      	mov	r4, r0
    7b38:	2800      	cmp	r0, #0
    7b3a:	d0ce      	beq.n	7ada <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    7b3c:	2102      	movs	r1, #2
    7b3e:	3008      	adds	r0, #8
    7b40:	f018 f8c3 	bl	1fcca <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    7b44:	2300      	movs	r3, #0
    7b46:	7003      	strb	r3, [r0, #0]
    7b48:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    7b4a:	4622      	mov	r2, r4
    7b4c:	9300      	str	r3, [sp, #0]
    7b4e:	2105      	movs	r1, #5
    7b50:	4628      	mov	r0, r5
    7b52:	f016 fd23 	bl	1e59c <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
    7b56:	2800      	cmp	r0, #0
    7b58:	d0bf      	beq.n	7ada <l2cap_recv+0x4a>
		net_buf_unref(buf);
    7b5a:	4620      	mov	r0, r4
    7b5c:	f011 f9cc 	bl	18ef8 <net_buf_unref>
    7b60:	e7bb      	b.n	7ada <l2cap_recv+0x4a>
    7b62:	bf00      	nop
    7b64:	00020f00 	.word	0x00020f00
    7b68:	00020e00 	.word	0x00020e00
    7b6c:	00023e62 	.word	0x00023e62
    7b70:	00023e80 	.word	0x00023e80
    7b74:	00023ea1 	.word	0x00023ea1
    7b78:	00023ec2 	.word	0x00023ec2
    7b7c:	00023ede 	.word	0x00023ede

00007b80 <bt_l2cap_recv>:
{
    7b80:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    7b82:	898b      	ldrh	r3, [r1, #12]
    7b84:	2b03      	cmp	r3, #3
{
    7b86:	4605      	mov	r5, r0
    7b88:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    7b8a:	d80e      	bhi.n	7baa <bt_l2cap_recv+0x2a>
    7b8c:	4914      	ldr	r1, [pc, #80]	; (7be0 <bt_l2cap_recv+0x60>)
    7b8e:	4b15      	ldr	r3, [pc, #84]	; (7be4 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    7b90:	4815      	ldr	r0, [pc, #84]	; (7be8 <bt_l2cap_recv+0x68>)
    7b92:	1ac9      	subs	r1, r1, r3
    7b94:	08c9      	lsrs	r1, r1, #3
    7b96:	0189      	lsls	r1, r1, #6
    7b98:	f041 0101 	orr.w	r1, r1, #1
    7b9c:	f014 fa29 	bl	1bff2 <log_0>
	net_buf_unref(buf);
    7ba0:	4620      	mov	r0, r4
}
    7ba2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    7ba6:	f011 b9a7 	b.w	18ef8 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    7baa:	2104      	movs	r1, #4
    7bac:	f104 0008 	add.w	r0, r4, #8
    7bb0:	f018 f8b2 	bl	1fd18 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    7bb4:	8841      	ldrh	r1, [r0, #2]
    7bb6:	4628      	mov	r0, r5
    7bb8:	f016 fd19 	bl	1e5ee <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7bbc:	b950      	cbnz	r0, 7bd4 <bt_l2cap_recv+0x54>
    7bbe:	4b09      	ldr	r3, [pc, #36]	; (7be4 <bt_l2cap_recv+0x64>)
    7bc0:	4a07      	ldr	r2, [pc, #28]	; (7be0 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    7bc2:	480a      	ldr	r0, [pc, #40]	; (7bec <bt_l2cap_recv+0x6c>)
    7bc4:	1ad2      	subs	r2, r2, r3
    7bc6:	08d2      	lsrs	r2, r2, #3
    7bc8:	0192      	lsls	r2, r2, #6
    7bca:	f042 0202 	orr.w	r2, r2, #2
    7bce:	f014 fa1d 	bl	1c00c <log_1>
		net_buf_unref(buf);
    7bd2:	e7e5      	b.n	7ba0 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    7bd4:	6843      	ldr	r3, [r0, #4]
    7bd6:	4621      	mov	r1, r4
    7bd8:	691b      	ldr	r3, [r3, #16]
    7bda:	4798      	blx	r3
    7bdc:	e7e0      	b.n	7ba0 <bt_l2cap_recv+0x20>
    7bde:	bf00      	nop
    7be0:	00020f00 	.word	0x00020f00
    7be4:	00020e00 	.word	0x00020e00
    7be8:	00023efc 	.word	0x00023efc
    7bec:	00023f19 	.word	0x00023f19

00007bf0 <bt_l2cap_update_conn_param>:
{
    7bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    7bf2:	460d      	mov	r5, r1
	ident++;
    7bf4:	4916      	ldr	r1, [pc, #88]	; (7c50 <bt_l2cap_update_conn_param+0x60>)
    7bf6:	780b      	ldrb	r3, [r1, #0]
    7bf8:	3301      	adds	r3, #1
	if (!ident) {
    7bfa:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    7bfe:	bf08      	it	eq
    7c00:	2301      	moveq	r3, #1
    7c02:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7c04:	7809      	ldrb	r1, [r1, #0]
{
    7c06:	4606      	mov	r6, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7c08:	2208      	movs	r2, #8
    7c0a:	2012      	movs	r0, #18
    7c0c:	f7ff fe9e 	bl	794c <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    7c10:	4604      	mov	r4, r0
    7c12:	b1d0      	cbz	r0, 7c4a <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
    7c14:	2108      	movs	r1, #8
    7c16:	4408      	add	r0, r1
    7c18:	f018 f857 	bl	1fcca <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7c1c:	882b      	ldrh	r3, [r5, #0]
    7c1e:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7c20:	886b      	ldrh	r3, [r5, #2]
    7c22:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7c24:	88ab      	ldrh	r3, [r5, #4]
    7c26:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    7c28:	88eb      	ldrh	r3, [r5, #6]
    7c2a:	80c3      	strh	r3, [r0, #6]
    7c2c:	2300      	movs	r3, #0
    7c2e:	9300      	str	r3, [sp, #0]
    7c30:	4622      	mov	r2, r4
    7c32:	2105      	movs	r1, #5
    7c34:	4630      	mov	r0, r6
    7c36:	f016 fcb1 	bl	1e59c <bt_l2cap_send_cb>
	if (err) {
    7c3a:	4605      	mov	r5, r0
    7c3c:	b110      	cbz	r0, 7c44 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
    7c3e:	4620      	mov	r0, r4
    7c40:	f011 f95a 	bl	18ef8 <net_buf_unref>
}
    7c44:	4628      	mov	r0, r5
    7c46:	b002      	add	sp, #8
    7c48:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    7c4a:	f06f 050b 	mvn.w	r5, #11
    7c4e:	e7f9      	b.n	7c44 <bt_l2cap_update_conn_param+0x54>
    7c50:	20002a78 	.word	0x20002a78

00007c54 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    7c54:	4b02      	ldr	r3, [pc, #8]	; (7c60 <att_cfm_sent+0xc>)
    7c56:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    7c5a:	f016 bceb 	b.w	1e634 <att_sent>
    7c5e:	bf00      	nop
    7c60:	0001ea1d 	.word	0x0001ea1d

00007c64 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    7c64:	4b02      	ldr	r3, [pc, #8]	; (7c70 <att_rsp_sent+0xc>)
    7c66:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    7c6a:	f016 bce3 	b.w	1e634 <att_sent>
    7c6e:	bf00      	nop
    7c70:	0001ea39 	.word	0x0001ea39

00007c74 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    7c74:	4b02      	ldr	r3, [pc, #8]	; (7c80 <att_req_sent+0xc>)
    7c76:	f8c1 3138 	str.w	r3, [r1, #312]	; 0x138

	att_sent(conn, user_data);
    7c7a:	f016 bcdb 	b.w	1e634 <att_sent>
    7c7e:	bf00      	nop
    7c80:	0001e7ff 	.word	0x0001e7ff

00007c84 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    7c84:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    7c86:	7b43      	ldrb	r3, [r0, #13]
    7c88:	2b07      	cmp	r3, #7
    7c8a:	d00b      	beq.n	7ca4 <att_get+0x20>
    7c8c:	4918      	ldr	r1, [pc, #96]	; (7cf0 <att_get+0x6c>)
    7c8e:	4b19      	ldr	r3, [pc, #100]	; (7cf4 <att_get+0x70>)
		BT_WARN("Not connected");
    7c90:	4819      	ldr	r0, [pc, #100]	; (7cf8 <att_get+0x74>)
    7c92:	1ac9      	subs	r1, r1, r3
    7c94:	08c9      	lsrs	r1, r1, #3
    7c96:	0189      	lsls	r1, r1, #6
    7c98:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    7c9c:	f014 f9a9 	bl	1bff2 <log_0>
		return NULL;
    7ca0:	2400      	movs	r4, #0
    7ca2:	e00e      	b.n	7cc2 <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    7ca4:	2104      	movs	r1, #4
    7ca6:	f016 fca2 	bl	1e5ee <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    7caa:	4604      	mov	r4, r0
    7cac:	b958      	cbnz	r0, 7cc6 <att_get+0x42>
    7cae:	4910      	ldr	r1, [pc, #64]	; (7cf0 <att_get+0x6c>)
    7cb0:	4b10      	ldr	r3, [pc, #64]	; (7cf4 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    7cb2:	4812      	ldr	r0, [pc, #72]	; (7cfc <att_get+0x78>)
    7cb4:	1ac9      	subs	r1, r1, r3
    7cb6:	08c9      	lsrs	r1, r1, #3
    7cb8:	0189      	lsls	r1, r1, #6
    7cba:	f041 0101 	orr.w	r1, r1, #1
    7cbe:	f014 f998 	bl	1bff2 <log_0>
	}

	return att_chan->att;
}
    7cc2:	4620      	mov	r0, r4
    7cc4:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7cc6:	f3bf 8f5b 	dmb	ish
    7cca:	f8d0 30e8 	ldr.w	r3, [r0, #232]	; 0xe8
    7cce:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    7cd2:	075b      	lsls	r3, r3, #29
    7cd4:	d508      	bpl.n	7ce8 <att_get+0x64>
    7cd6:	4906      	ldr	r1, [pc, #24]	; (7cf0 <att_get+0x6c>)
    7cd8:	4b06      	ldr	r3, [pc, #24]	; (7cf4 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    7cda:	4809      	ldr	r0, [pc, #36]	; (7d00 <att_get+0x7c>)
    7cdc:	1ac9      	subs	r1, r1, r3
    7cde:	08c9      	lsrs	r1, r1, #3
    7ce0:	0189      	lsls	r1, r1, #6
    7ce2:	f041 0102 	orr.w	r1, r1, #2
    7ce6:	e7d9      	b.n	7c9c <att_get+0x18>
	return att_chan->att;
    7ce8:	f850 4c08 	ldr.w	r4, [r0, #-8]
    7cec:	e7e9      	b.n	7cc2 <att_get+0x3e>
    7cee:	bf00      	nop
    7cf0:	00020e08 	.word	0x00020e08
    7cf4:	00020e00 	.word	0x00020e00
    7cf8:	00023f55 	.word	0x00023f55
    7cfc:	00023f63 	.word	0x00023f63
    7d00:	00023f7e 	.word	0x00023f7e

00007d04 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    7d04:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    7d06:	3808      	subs	r0, #8
    7d08:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    7d0a:	a901      	add	r1, sp, #4
    7d0c:	4802      	ldr	r0, [pc, #8]	; (7d18 <bt_att_released+0x14>)
    7d0e:	f018 f9f1 	bl	200f4 <k_mem_slab_free>
}
    7d12:	b003      	add	sp, #12
    7d14:	f85d fb04 	ldr.w	pc, [sp], #4
    7d18:	200006f0 	.word	0x200006f0

00007d1c <find_type_cb>:
{
    7d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    7d20:	f8d2 9000 	ldr.w	r9, [r2]
{
    7d24:	b091      	sub	sp, #68	; 0x44
    7d26:	4607      	mov	r7, r0
    7d28:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7d2a:	2500      	movs	r5, #0
    7d2c:	f642 0301 	movw	r3, #10241	; 0x2801
    7d30:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    7d32:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7d36:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    7d3a:	a90b      	add	r1, sp, #44	; 0x2c
{
    7d3c:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7d3e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    7d42:	f015 ff21 	bl	1db88 <bt_uuid_cmp>
    7d46:	2800      	cmp	r0, #0
    7d48:	d066      	beq.n	7e18 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    7d4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7d4e:	6838      	ldr	r0, [r7, #0]
    7d50:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    7d54:	a90b      	add	r1, sp, #44	; 0x2c
    7d56:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    7d5a:	f015 ff15 	bl	1db88 <bt_uuid_cmp>
    7d5e:	b138      	cbz	r0, 7d70 <find_type_cb+0x54>
		if (data->group &&
    7d60:	68a3      	ldr	r3, [r4, #8]
    7d62:	b11b      	cbz	r3, 7d6c <find_type_cb+0x50>
    7d64:	885a      	ldrh	r2, [r3, #2]
    7d66:	42b2      	cmp	r2, r6
    7d68:	d200      	bcs.n	7d6c <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    7d6a:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    7d6c:	2001      	movs	r0, #1
    7d6e:	e009      	b.n	7d84 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    7d70:	6861      	ldr	r1, [r4, #4]
    7d72:	4608      	mov	r0, r1
    7d74:	f016 fc56 	bl	1e624 <net_buf_frags_len>
    7d78:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
    7d7c:	1a1b      	subs	r3, r3, r0
    7d7e:	2b03      	cmp	r3, #3
    7d80:	d803      	bhi.n	7d8a <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    7d82:	2000      	movs	r0, #0
}
    7d84:	b011      	add	sp, #68	; 0x44
    7d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    7d8a:	4608      	mov	r0, r1
    7d8c:	f017 ff6f 	bl	1fc6e <net_buf_frag_last>
    7d90:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    7d92:	6860      	ldr	r0, [r4, #4]
    7d94:	f016 fc46 	bl	1e624 <net_buf_frags_len>
    7d98:	f8b9 a086 	ldrh.w	sl, [r9, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
    7d9c:	f105 0b08 	add.w	fp, r5, #8
    7da0:	ebaa 0a00 	sub.w	sl, sl, r0
    7da4:	4658      	mov	r0, fp
    7da6:	f017 ffcb 	bl	1fd40 <net_buf_simple_tailroom>
    7daa:	4582      	cmp	sl, r0
    7dac:	d237      	bcs.n	7e1e <find_type_cb+0x102>
    7dae:	6860      	ldr	r0, [r4, #4]
    7db0:	f016 fc38 	bl	1e624 <net_buf_frags_len>
    7db4:	f8b9 3086 	ldrh.w	r3, [r9, #134]	; 0x86
    7db8:	1a18      	subs	r0, r3, r0
	if (!len) {
    7dba:	b970      	cbnz	r0, 7dda <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    7dbc:	6863      	ldr	r3, [r4, #4]
    7dbe:	7998      	ldrb	r0, [r3, #6]
    7dc0:	f010 ffdc 	bl	18d7c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    7dc4:	2200      	movs	r2, #0
    7dc6:	2300      	movs	r3, #0
    7dc8:	f017 ff1d 	bl	1fc06 <net_buf_alloc_fixed>
		if (!frag) {
    7dcc:	4605      	mov	r5, r0
    7dce:	2800      	cmp	r0, #0
    7dd0:	d0d7      	beq.n	7d82 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    7dd2:	4601      	mov	r1, r0
    7dd4:	6860      	ldr	r0, [r4, #4]
    7dd6:	f017 ff5b 	bl	1fc90 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    7dda:	2300      	movs	r3, #0
    7ddc:	9300      	str	r3, [sp, #0]
    7dde:	f8d7 9004 	ldr.w	r9, [r7, #4]
    7de2:	4639      	mov	r1, r7
    7de4:	2310      	movs	r3, #16
    7de6:	aa02      	add	r2, sp, #8
    7de8:	4640      	mov	r0, r8
    7dea:	47c8      	blx	r9
	if (read < 0) {
    7dec:	1e07      	subs	r7, r0, #0
    7dee:	db13      	blt.n	7e18 <find_type_cb+0xfc>
	if (read != data->value_len) {
    7df0:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    7df2:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    7df4:	42ba      	cmp	r2, r7
    7df6:	d037      	beq.n	7e68 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    7df8:	4601      	mov	r1, r0
    7dfa:	a80b      	add	r0, sp, #44	; 0x2c
    7dfc:	f015 fef2 	bl	1dbe4 <bt_uuid_create>
    7e00:	b988      	cbnz	r0, 7e26 <find_type_cb+0x10a>
    7e02:	4a1b      	ldr	r2, [pc, #108]	; (7e70 <find_type_cb+0x154>)
    7e04:	4b1b      	ldr	r3, [pc, #108]	; (7e74 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    7e06:	7c21      	ldrb	r1, [r4, #16]
    7e08:	481b      	ldr	r0, [pc, #108]	; (7e78 <find_type_cb+0x15c>)
    7e0a:	1ad2      	subs	r2, r2, r3
    7e0c:	08d2      	lsrs	r2, r2, #3
    7e0e:	0192      	lsls	r2, r2, #6
    7e10:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    7e14:	f014 f8fa 	bl	1c00c <log_1>
	data->group = NULL;
    7e18:	2300      	movs	r3, #0
    7e1a:	60a3      	str	r3, [r4, #8]
    7e1c:	e7a6      	b.n	7d6c <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    7e1e:	4658      	mov	r0, fp
    7e20:	f017 ff8e 	bl	1fd40 <net_buf_simple_tailroom>
    7e24:	e7c9      	b.n	7dba <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    7e26:	b2fa      	uxtb	r2, r7
    7e28:	a902      	add	r1, sp, #8
    7e2a:	a806      	add	r0, sp, #24
    7e2c:	f015 feda 	bl	1dbe4 <bt_uuid_create>
    7e30:	b948      	cbnz	r0, 7e46 <find_type_cb+0x12a>
    7e32:	4a0f      	ldr	r2, [pc, #60]	; (7e70 <find_type_cb+0x154>)
    7e34:	4b0f      	ldr	r3, [pc, #60]	; (7e74 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    7e36:	4811      	ldr	r0, [pc, #68]	; (7e7c <find_type_cb+0x160>)
    7e38:	1ad2      	subs	r2, r2, r3
    7e3a:	08d2      	lsrs	r2, r2, #3
    7e3c:	0192      	lsls	r2, r2, #6
    7e3e:	f042 0202 	orr.w	r2, r2, #2
    7e42:	4639      	mov	r1, r7
    7e44:	e7e6      	b.n	7e14 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    7e46:	a906      	add	r1, sp, #24
    7e48:	a80b      	add	r0, sp, #44	; 0x2c
    7e4a:	f015 fe9d 	bl	1db88 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    7e4e:	2800      	cmp	r0, #0
    7e50:	d1e2      	bne.n	7e18 <find_type_cb+0xfc>
	data->err = 0x00;
    7e52:	2300      	movs	r3, #0
    7e54:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    7e56:	2104      	movs	r1, #4
    7e58:	f105 0008 	add.w	r0, r5, #8
    7e5c:	f017 ff35 	bl	1fcca <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    7e60:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    7e62:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    7e64:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    7e66:	e781      	b.n	7d6c <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    7e68:	a902      	add	r1, sp, #8
    7e6a:	f015 fdbe 	bl	1d9ea <memcmp>
    7e6e:	e7ee      	b.n	7e4e <find_type_cb+0x132>
    7e70:	00020e08 	.word	0x00020e08
    7e74:	00020e00 	.word	0x00020e00
    7e78:	00023fa2 	.word	0x00023fa2
    7e7c:	00023fc1 	.word	0x00023fc1

00007e80 <chan_send>:
{
    7e80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7e84:	688b      	ldr	r3, [r1, #8]
    7e86:	781b      	ldrb	r3, [r3, #0]
    7e88:	2bd2      	cmp	r3, #210	; 0xd2
{
    7e8a:	4606      	mov	r6, r0
    7e8c:	460c      	mov	r4, r1
    7e8e:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    7e90:	d116      	bne.n	7ec0 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    7e92:	6803      	ldr	r3, [r0, #0]
    7e94:	6818      	ldr	r0, [r3, #0]
    7e96:	f002 fdb3 	bl	aa00 <bt_smp_sign>
		if (err) {
    7e9a:	4605      	mov	r5, r0
    7e9c:	b180      	cbz	r0, 7ec0 <chan_send+0x40>
    7e9e:	4b24      	ldr	r3, [pc, #144]	; (7f30 <chan_send+0xb0>)
    7ea0:	4924      	ldr	r1, [pc, #144]	; (7f34 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    7ea2:	4825      	ldr	r0, [pc, #148]	; (7f38 <chan_send+0xb8>)
    7ea4:	1ac9      	subs	r1, r1, r3
    7ea6:	08c9      	lsrs	r1, r1, #3
    7ea8:	0189      	lsls	r1, r1, #6
    7eaa:	f041 0101 	orr.w	r1, r1, #1
    7eae:	f014 f8a0 	bl	1bff2 <log_0>
			net_buf_unref(buf);
    7eb2:	4620      	mov	r0, r4
    7eb4:	f011 f820 	bl	18ef8 <net_buf_unref>
}
    7eb8:	4628      	mov	r0, r5
    7eba:	b003      	add	sp, #12
    7ebc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    7ec0:	f104 0008 	add.w	r0, r4, #8
    7ec4:	f017 ff38 	bl	1fd38 <net_buf_simple_headroom>
	state->len = buf->len;
    7ec8:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    7ecc:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    7ece:	b957      	cbnz	r7, 7ee6 <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    7ed0:	68a3      	ldr	r3, [r4, #8]
    7ed2:	7818      	ldrb	r0, [r3, #0]
    7ed4:	f016 fbc4 	bl	1e660 <att_op_get_type>
    7ed8:	1e43      	subs	r3, r0, #1
    7eda:	b2db      	uxtb	r3, r3
    7edc:	2b04      	cmp	r3, #4
    7ede:	bf9c      	itt	ls
    7ee0:	4a16      	ldrls	r2, [pc, #88]	; (7f3c <chan_send+0xbc>)
    7ee2:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    7ee6:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    7ee8:	f8c6 7140 	str.w	r7, [r6, #320]	; 0x140
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    7eec:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    7eee:	4b14      	ldr	r3, [pc, #80]	; (7f40 <chan_send+0xc0>)
    7ef0:	429f      	cmp	r7, r3
    7ef2:	d018      	beq.n	7f26 <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    7ef4:	4b13      	ldr	r3, [pc, #76]	; (7f44 <chan_send+0xc4>)
    7ef6:	429f      	cmp	r7, r3
    7ef8:	d017      	beq.n	7f2a <chan_send+0xaa>
		return att_sent;
    7efa:	4913      	ldr	r1, [pc, #76]	; (7f48 <chan_send+0xc8>)
    7efc:	4b13      	ldr	r3, [pc, #76]	; (7f4c <chan_send+0xcc>)
    7efe:	4a14      	ldr	r2, [pc, #80]	; (7f50 <chan_send+0xd0>)
    7f00:	428f      	cmp	r7, r1
    7f02:	bf18      	it	ne
    7f04:	4613      	movne	r3, r2
			       &chan->chan.chan);
    7f06:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    7f08:	9600      	str	r6, [sp, #0]
    7f0a:	4622      	mov	r2, r4
    7f0c:	2104      	movs	r1, #4
    7f0e:	f016 fb45 	bl	1e59c <bt_l2cap_send_cb>
	if (err) {
    7f12:	4605      	mov	r5, r0
    7f14:	2800      	cmp	r0, #0
    7f16:	d0cf      	beq.n	7eb8 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    7f18:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    7f1a:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    7f1e:	fa10 f088 	uxtah	r0, r0, r8
    7f22:	60a0      	str	r0, [r4, #8]
}
    7f24:	e7c8      	b.n	7eb8 <chan_send+0x38>
		return att_rsp_sent;
    7f26:	4b0b      	ldr	r3, [pc, #44]	; (7f54 <chan_send+0xd4>)
    7f28:	e7ed      	b.n	7f06 <chan_send+0x86>
		return att_cfm_sent;
    7f2a:	4b0b      	ldr	r3, [pc, #44]	; (7f58 <chan_send+0xd8>)
    7f2c:	e7eb      	b.n	7f06 <chan_send+0x86>
    7f2e:	bf00      	nop
    7f30:	00020e00 	.word	0x00020e00
    7f34:	00020e08 	.word	0x00020e08
    7f38:	00023fe0 	.word	0x00023fe0
    7f3c:	00021574 	.word	0x00021574
    7f40:	0001ea39 	.word	0x0001ea39
    7f44:	0001ea1d 	.word	0x0001ea1d
    7f48:	0001e7ff 	.word	0x0001e7ff
    7f4c:	00007c75 	.word	0x00007c75
    7f50:	0001e635 	.word	0x0001e635
    7f54:	00007c65 	.word	0x00007c65
    7f58:	00007c55 	.word	0x00007c55

00007f5c <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    7f5c:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    7f5e:	4a07      	ldr	r2, [pc, #28]	; (7f7c <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    7f60:	4604      	mov	r4, r0
    7f62:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    7f64:	f7ff ff8c 	bl	7e80 <chan_send>
	if (err) {
    7f68:	b130      	cbz	r0, 7f78 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    7f6a:	4629      	mov	r1, r5
    7f6c:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
}
    7f70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    7f74:	f017 be6a 	b.w	1fc4c <net_buf_put>
}
    7f78:	bd38      	pop	{r3, r4, r5, pc}
    7f7a:	bf00      	nop
    7f7c:	0001ea39 	.word	0x0001ea39

00007f80 <read_group_cb>:
{
    7f80:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7f84:	4605      	mov	r5, r0
    7f86:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7f88:	f04f 0800 	mov.w	r8, #0
    7f8c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    7f90:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    7f92:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7f94:	f88d 8008 	strb.w	r8, [sp, #8]
    7f98:	a902      	add	r1, sp, #8
{
    7f9a:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7f9c:	f8ad 300a 	strh.w	r3, [sp, #10]
    7fa0:	f015 fdf2 	bl	1db88 <bt_uuid_cmp>
    7fa4:	b1a0      	cbz	r0, 7fd0 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    7fa6:	f642 0301 	movw	r3, #10241	; 0x2801
    7faa:	6828      	ldr	r0, [r5, #0]
    7fac:	f88d 800c 	strb.w	r8, [sp, #12]
    7fb0:	a903      	add	r1, sp, #12
    7fb2:	f8ad 300e 	strh.w	r3, [sp, #14]
    7fb6:	f015 fde7 	bl	1db88 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    7fba:	b148      	cbz	r0, 7fd0 <read_group_cb+0x50>
		if (data->group &&
    7fbc:	6923      	ldr	r3, [r4, #16]
    7fbe:	b11b      	cbz	r3, 7fc8 <read_group_cb+0x48>
    7fc0:	885a      	ldrh	r2, [r3, #2]
    7fc2:	42b2      	cmp	r2, r6
    7fc4:	d200      	bcs.n	7fc8 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    7fc6:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    7fc8:	2001      	movs	r0, #1
}
    7fca:	b004      	add	sp, #16
    7fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    7fd0:	6861      	ldr	r1, [r4, #4]
    7fd2:	6828      	ldr	r0, [r5, #0]
    7fd4:	f015 fdd8 	bl	1db88 <bt_uuid_cmp>
    7fd8:	b110      	cbz	r0, 7fe0 <read_group_cb+0x60>
		data->group = NULL;
    7fda:	2300      	movs	r3, #0
    7fdc:	6123      	str	r3, [r4, #16]
    7fde:	e7f3      	b.n	7fc8 <read_group_cb+0x48>
	if (data->rsp->len &&
    7fe0:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7fe2:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    7fe4:	781a      	ldrb	r2, [r3, #0]
    7fe6:	b13a      	cbz	r2, 7ff8 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    7fe8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
    7fec:	8981      	ldrh	r1, [r0, #12]
    7fee:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    7ff0:	4293      	cmp	r3, r2
    7ff2:	da01      	bge.n	7ff8 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    7ff4:	2000      	movs	r0, #0
    7ff6:	e7e8      	b.n	7fca <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    7ff8:	2104      	movs	r1, #4
    7ffa:	3008      	adds	r0, #8
    7ffc:	f017 fe65 	bl	1fcca <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8000:	4b09      	ldr	r3, [pc, #36]	; (8028 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x28>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    8002:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    8004:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    8006:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    8008:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    800a:	4629      	mov	r1, r5
    800c:	9300      	str	r3, [sp, #0]
    800e:	9401      	str	r4, [sp, #4]
    8010:	2300      	movs	r3, #0
    8012:	4638      	mov	r0, r7
    8014:	f016 fc77 	bl	1e906 <att_chan_read>
	if (read < 0) {
    8018:	2800      	cmp	r0, #0
    801a:	dbeb      	blt.n	7ff4 <read_group_cb+0x74>
	if (!data->group) {
    801c:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    801e:	3800      	subs	r0, #0
    8020:	bf18      	it	ne
    8022:	2001      	movne	r0, #1
    8024:	e7d1      	b.n	7fca <read_group_cb+0x4a>
    8026:	bf00      	nop
    8028:	0001e7df 	.word	0x0001e7df

0000802c <read_type_cb>:
{
    802c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    8030:	f8d2 8000 	ldr.w	r8, [r2]
{
    8034:	4606      	mov	r6, r0
    8036:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8038:	6800      	ldr	r0, [r0, #0]
    803a:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    803c:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8040:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8042:	f015 fda1 	bl	1db88 <bt_uuid_cmp>
    8046:	4607      	mov	r7, r0
    8048:	2800      	cmp	r0, #0
    804a:	d13e      	bne.n	80ca <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    804c:	4628      	mov	r0, r5
    804e:	2215      	movs	r2, #21
    8050:	4631      	mov	r1, r6
    8052:	f017 f989 	bl	1f368 <bt_gatt_check_perm>
    8056:	4605      	mov	r5, r0
    8058:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    805a:	b148      	cbz	r0, 8070 <read_type_cb+0x44>
		if (data->rsp->len) {
    805c:	68e3      	ldr	r3, [r4, #12]
    805e:	781b      	ldrb	r3, [r3, #0]
    8060:	b923      	cbnz	r3, 806c <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8062:	2500      	movs	r5, #0
}
    8064:	4628      	mov	r0, r5
    8066:	b003      	add	sp, #12
    8068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    806c:	7527      	strb	r7, [r4, #20]
    806e:	e7f8      	b.n	8062 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8070:	68a0      	ldr	r0, [r4, #8]
    8072:	f017 fdfc 	bl	1fc6e <net_buf_frag_last>
    8076:	2102      	movs	r1, #2
    8078:	3008      	adds	r0, #8
    807a:	f017 fe26 	bl	1fcca <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    807e:	4b14      	ldr	r3, [pc, #80]	; (80d0 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8080:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8082:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8084:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8088:	4631      	mov	r1, r6
    808a:	9300      	str	r3, [sp, #0]
    808c:	9401      	str	r4, [sp, #4]
    808e:	462b      	mov	r3, r5
    8090:	4640      	mov	r0, r8
    8092:	f016 fc38 	bl	1e906 <att_chan_read>
	if (read < 0) {
    8096:	2800      	cmp	r0, #0
    8098:	da07      	bge.n	80aa <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    809a:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    809e:	bf26      	itte	cs
    80a0:	4240      	negcs	r0, r0
    80a2:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    80a4:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    80a6:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    80a8:	e7dc      	b.n	8064 <read_type_cb+0x38>
	if (!data->item) {
    80aa:	6923      	ldr	r3, [r4, #16]
    80ac:	2b00      	cmp	r3, #0
    80ae:	d0d8      	beq.n	8062 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    80b0:	68a0      	ldr	r0, [r4, #8]
    80b2:	f016 fab7 	bl	1e624 <net_buf_frags_len>
    80b6:	f8b8 5086 	ldrh.w	r5, [r8, #134]	; 0x86
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    80ba:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    80bc:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    80be:	7818      	ldrb	r0, [r3, #0]
    80c0:	4285      	cmp	r5, r0
    80c2:	bf94      	ite	ls
    80c4:	2500      	movls	r5, #0
    80c6:	2501      	movhi	r5, #1
    80c8:	e7cc      	b.n	8064 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    80ca:	2501      	movs	r5, #1
    80cc:	e7ca      	b.n	8064 <read_type_cb+0x38>
    80ce:	bf00      	nop
    80d0:	0001e641 	.word	0x0001e641

000080d4 <prep_write_cb>:
{
    80d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    80d8:	4614      	mov	r4, r2
    80da:	4606      	mov	r6, r0
    80dc:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    80de:	222a      	movs	r2, #42	; 0x2a
    80e0:	4601      	mov	r1, r0
    80e2:	6820      	ldr	r0, [r4, #0]
    80e4:	f017 f940 	bl	1f368 <bt_gatt_check_perm>
    80e8:	4605      	mov	r5, r0
    80ea:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    80ec:	2800      	cmp	r0, #0
    80ee:	d12e      	bne.n	814e <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    80f0:	7cb3      	ldrb	r3, [r6, #18]
    80f2:	065b      	lsls	r3, r3, #25
    80f4:	d516      	bpl.n	8124 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    80f6:	2301      	movs	r3, #1
    80f8:	9301      	str	r3, [sp, #4]
    80fa:	89e3      	ldrh	r3, [r4, #14]
    80fc:	9300      	str	r3, [sp, #0]
    80fe:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8102:	89a3      	ldrh	r3, [r4, #12]
    8104:	68a2      	ldr	r2, [r4, #8]
    8106:	6820      	ldr	r0, [r4, #0]
    8108:	4631      	mov	r1, r6
    810a:	47c0      	blx	r8
	if (write != 0) {
    810c:	b150      	cbz	r0, 8124 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    810e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8112:	bf26      	itte	cs
    8114:	4243      	negcs	r3, r0
    8116:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    8118:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    811a:	7423      	strb	r3, [r4, #16]
}
    811c:	4628      	mov	r0, r5
    811e:	b002      	add	sp, #8
    8120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    8124:	480b      	ldr	r0, [pc, #44]	; (8154 <prep_write_cb+0x80>)
    8126:	2200      	movs	r2, #0
    8128:	2300      	movs	r3, #0
    812a:	f017 fd6c 	bl	1fc06 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    812e:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    8130:	b908      	cbnz	r0, 8136 <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8132:	2309      	movs	r3, #9
    8134:	e7f1      	b.n	811a <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    8136:	89e3      	ldrh	r3, [r4, #14]
    8138:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    813a:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    813c:	89a2      	ldrh	r2, [r4, #12]
    813e:	68a1      	ldr	r1, [r4, #8]
    8140:	3008      	adds	r0, #8
    8142:	f017 fdc8 	bl	1fcd6 <net_buf_simple_add_mem>
	data->err = 0U;
    8146:	2300      	movs	r3, #0
    8148:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    814a:	2501      	movs	r5, #1
    814c:	e7e6      	b.n	811c <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    814e:	2500      	movs	r5, #0
    8150:	e7e4      	b.n	811c <prep_write_cb+0x48>
    8152:	bf00      	nop
    8154:	200008bc 	.word	0x200008bc

00008158 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    8158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    815a:	2300      	movs	r3, #0
{
    815c:	4606      	mov	r6, r0
    815e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    8160:	4828      	ldr	r0, [pc, #160]	; (8204 <bt_att_accept+0xac>)
    8162:	2200      	movs	r2, #0
    8164:	4669      	mov	r1, sp
    8166:	f012 f8c3 	bl	1a2f0 <k_mem_slab_alloc>
    816a:	4604      	mov	r4, r0
    816c:	b178      	cbz	r0, 818e <bt_att_accept+0x36>
    816e:	4a26      	ldr	r2, [pc, #152]	; (8208 <bt_att_accept+0xb0>)
    8170:	4b26      	ldr	r3, [pc, #152]	; (820c <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    8172:	4827      	ldr	r0, [pc, #156]	; (8210 <bt_att_accept+0xb8>)
    8174:	1ad2      	subs	r2, r2, r3
    8176:	08d2      	lsrs	r2, r2, #3
    8178:	0192      	lsls	r2, r2, #6
    817a:	f042 0201 	orr.w	r2, r2, #1
    817e:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    8180:	f013 ff44 	bl	1c00c <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    8184:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    8188:	4620      	mov	r0, r4
    818a:	b003      	add	sp, #12
    818c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    818e:	4601      	mov	r1, r0
    8190:	2244      	movs	r2, #68	; 0x44
    8192:	9800      	ldr	r0, [sp, #0]
    8194:	f015 fc45 	bl	1da22 <memset>
	att->conn = conn;
    8198:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    819a:	481e      	ldr	r0, [pc, #120]	; (8214 <bt_att_accept+0xbc>)
	list->tail = NULL;
    819c:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    819e:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    81a2:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    81a6:	2200      	movs	r2, #0
    81a8:	2300      	movs	r3, #0
    81aa:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    81ac:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    81ae:	f012 f89f 	bl	1a2f0 <k_mem_slab_alloc>
    81b2:	4604      	mov	r4, r0
    81b4:	b148      	cbz	r0, 81ca <bt_att_accept+0x72>
    81b6:	4a14      	ldr	r2, [pc, #80]	; (8208 <bt_att_accept+0xb0>)
    81b8:	4b14      	ldr	r3, [pc, #80]	; (820c <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    81ba:	6829      	ldr	r1, [r5, #0]
    81bc:	4816      	ldr	r0, [pc, #88]	; (8218 <bt_att_accept+0xc0>)
    81be:	1ad2      	subs	r2, r2, r3
    81c0:	08d2      	lsrs	r2, r2, #3
    81c2:	0192      	lsls	r2, r2, #6
    81c4:	f042 0201 	orr.w	r2, r2, #1
    81c8:	e7da      	b.n	8180 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    81ca:	4601      	mov	r1, r0
    81cc:	f44f 72a4 	mov.w	r2, #328	; 0x148
    81d0:	9801      	ldr	r0, [sp, #4]
    81d2:	f015 fc26 	bl	1da22 <memset>
	chan->chan.chan.ops = &ops;
    81d6:	9801      	ldr	r0, [sp, #4]
    81d8:	4b10      	ldr	r3, [pc, #64]	; (821c <bt_att_accept+0xc4>)
    81da:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    81dc:	30f8      	adds	r0, #248	; 0xf8
    81de:	f018 f83e 	bl	2025e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    81e2:	9b01      	ldr	r3, [sp, #4]
    81e4:	f3bf 8f5b 	dmb	ish
    81e8:	33f0      	adds	r3, #240	; 0xf0
    81ea:	e853 2f00 	ldrex	r2, [r3]
    81ee:	e843 4100 	strex	r1, r4, [r3]
    81f2:	2900      	cmp	r1, #0
    81f4:	d1f9      	bne.n	81ea <bt_att_accept+0x92>
    81f6:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    81fa:	9b01      	ldr	r3, [sp, #4]
    81fc:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8200:	603b      	str	r3, [r7, #0]
	return 0;
    8202:	e7c1      	b.n	8188 <bt_att_accept+0x30>
    8204:	200006d4 	.word	0x200006d4
    8208:	00020e08 	.word	0x00020e08
    820c:	00020e00 	.word	0x00020e00
    8210:	00023ff3 	.word	0x00023ff3
    8214:	200006f0 	.word	0x200006f0
    8218:	00024018 	.word	0x00024018
    821c:	20000250 	.word	0x20000250

00008220 <bt_att_connected>:
{
    8220:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8222:	4606      	mov	r6, r0
{
    8224:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8226:	2104      	movs	r1, #4
    8228:	f856 0908 	ldr.w	r0, [r6], #-8
    822c:	f016 f9cf 	bl	1e5ce <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8230:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8234:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8236:	b93b      	cbnz	r3, 8248 <bt_att_connected+0x28>
    8238:	f105 000c 	add.w	r0, r5, #12
    823c:	f018 f80f 	bl	2025e <z_impl_k_queue_init>
    8240:	f105 0024 	add.w	r0, r5, #36	; 0x24
    8244:	f018 f80b 	bl	2025e <z_impl_k_queue_init>
	parent->next = child;
    8248:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    824a:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
Z_GENLIST_PREPEND(slist, snode)
    824e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    8250:	f504 739e 	add.w	r3, r4, #316	; 0x13c
	list->head = node;
    8254:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    8256:	b902      	cbnz	r2, 825a <bt_att_connected+0x3a>
	list->tail = node;
    8258:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    825a:	f3bf 8f5b 	dmb	ish
    825e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    8262:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8266:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8268:	bf58      	it	pl
    826a:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
    826c:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    826e:	bf5c      	itt	pl
    8270:	f8a4 307e 	strhpl.w	r3, [r4, #126]	; 0x7e
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8274:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
    8278:	f016 fa76 	bl	1e768 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    827c:	f504 7084 	add.w	r0, r4, #264	; 0x108
    8280:	4902      	ldr	r1, [pc, #8]	; (828c <bt_att_connected+0x6c>)
}
    8282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
    8286:	f018 b8ed 	b.w	20464 <k_work_init_delayable>
    828a:	bf00      	nop
    828c:	00008cd9 	.word	0x00008cd9

00008290 <bt_att_chan_create_pdu>:
{
    8290:	b538      	push	{r3, r4, r5, lr}
    8292:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    8294:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
    8298:	3201      	adds	r2, #1
    829a:	428a      	cmp	r2, r1
    829c:	d90c      	bls.n	82b8 <bt_att_chan_create_pdu+0x28>
    829e:	481a      	ldr	r0, [pc, #104]	; (8308 <bt_att_chan_create_pdu+0x78>)
    82a0:	4b1a      	ldr	r3, [pc, #104]	; (830c <bt_att_chan_create_pdu+0x7c>)
    82a2:	1a1b      	subs	r3, r3, r0
    82a4:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    82a6:	019b      	lsls	r3, r3, #6
    82a8:	4819      	ldr	r0, [pc, #100]	; (8310 <bt_att_chan_create_pdu+0x80>)
    82aa:	f043 0302 	orr.w	r3, r3, #2
    82ae:	f013 fec1 	bl	1c034 <log_2>
		return NULL;
    82b2:	2400      	movs	r4, #0
}
    82b4:	4620      	mov	r0, r4
    82b6:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    82b8:	4628      	mov	r0, r5
    82ba:	f016 f9d1 	bl	1e660 <att_op_get_type>
    82be:	2802      	cmp	r0, #2
    82c0:	d001      	beq.n	82c6 <bt_att_chan_create_pdu+0x36>
    82c2:	2804      	cmp	r0, #4
    82c4:	d114      	bne.n	82f0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    82c6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    82ca:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    82cc:	2100      	movs	r1, #0
    82ce:	4608      	mov	r0, r1
    82d0:	f016 f961 	bl	1e596 <bt_l2cap_create_pdu_timeout>
    82d4:	4604      	mov	r4, r0
	if (!buf) {
    82d6:	b980      	cbnz	r0, 82fa <bt_att_chan_create_pdu+0x6a>
    82d8:	4b0b      	ldr	r3, [pc, #44]	; (8308 <bt_att_chan_create_pdu+0x78>)
    82da:	4a0c      	ldr	r2, [pc, #48]	; (830c <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    82dc:	480d      	ldr	r0, [pc, #52]	; (8314 <bt_att_chan_create_pdu+0x84>)
    82de:	1ad2      	subs	r2, r2, r3
    82e0:	08d2      	lsrs	r2, r2, #3
    82e2:	0192      	lsls	r2, r2, #6
    82e4:	f042 0201 	orr.w	r2, r2, #1
    82e8:	4629      	mov	r1, r5
    82ea:	f013 fe8f 	bl	1c00c <log_1>
		return NULL;
    82ee:	e7e1      	b.n	82b4 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    82f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    82f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    82f8:	e7e8      	b.n	82cc <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    82fa:	2101      	movs	r1, #1
    82fc:	3008      	adds	r0, #8
    82fe:	f017 fce4 	bl	1fcca <net_buf_simple_add>
	hdr->code = op;
    8302:	7005      	strb	r5, [r0, #0]
	return buf;
    8304:	e7d6      	b.n	82b4 <bt_att_chan_create_pdu+0x24>
    8306:	bf00      	nop
    8308:	00020e00 	.word	0x00020e00
    830c:	00020e08 	.word	0x00020e08
    8310:	0002403d 	.word	0x0002403d
    8314:	00023e2a 	.word	0x00023e2a

00008318 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8318:	898b      	ldrh	r3, [r1, #12]
{
    831a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    831e:	4604      	mov	r4, r0
    8320:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    8322:	b963      	cbnz	r3, 833e <bt_att_recv+0x26>
    8324:	494c      	ldr	r1, [pc, #304]	; (8458 <bt_att_recv+0x140>)
    8326:	4b4d      	ldr	r3, [pc, #308]	; (845c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    8328:	484d      	ldr	r0, [pc, #308]	; (8460 <bt_att_recv+0x148>)
    832a:	1ac9      	subs	r1, r1, r3
    832c:	08c9      	lsrs	r1, r1, #3
    832e:	0189      	lsls	r1, r1, #6
    8330:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    8334:	f013 fe5d 	bl	1bff2 <log_0>
}
    8338:	2000      	movs	r0, #0
    833a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    833e:	2101      	movs	r1, #1
    8340:	f108 0008 	add.w	r0, r8, #8
    8344:	f017 fce8 	bl	1fd18 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    8348:	f854 3c08 	ldr.w	r3, [r4, #-8]
    834c:	4605      	mov	r5, r0
    834e:	2b00      	cmp	r3, #0
    8350:	d0f2      	beq.n	8338 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    8352:	7801      	ldrb	r1, [r0, #0]
    8354:	4a43      	ldr	r2, [pc, #268]	; (8464 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8356:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    835a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    835c:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8360:	4288      	cmp	r0, r1
    8362:	d11e      	bne.n	83a2 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    8364:	00d8      	lsls	r0, r3, #3
    8366:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    836a:	789f      	ldrb	r7, [r3, #2]
    836c:	2f01      	cmp	r7, #1
    836e:	d133      	bne.n	83d8 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8370:	f3bf 8f5b 	dmb	ish
    8374:	34e8      	adds	r4, #232	; 0xe8
    8376:	e854 3f00 	ldrex	r3, [r4]
    837a:	f043 0101 	orr.w	r1, r3, #1
    837e:	e844 1c00 	strex	ip, r1, [r4]
    8382:	f1bc 0f00 	cmp.w	ip, #0
    8386:	d1f6      	bne.n	8376 <bt_att_recv+0x5e>
    8388:	f3bf 8f5b 	dmb	ish
    838c:	07d9      	lsls	r1, r3, #31
    838e:	d53e      	bpl.n	840e <bt_att_recv+0xf6>
    8390:	4931      	ldr	r1, [pc, #196]	; (8458 <bt_att_recv+0x140>)
    8392:	4b32      	ldr	r3, [pc, #200]	; (845c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    8394:	4834      	ldr	r0, [pc, #208]	; (8468 <bt_att_recv+0x150>)
    8396:	1ac9      	subs	r1, r1, r3
    8398:	08c9      	lsrs	r1, r1, #3
    839a:	0189      	lsls	r1, r1, #6
    839c:	f041 0102 	orr.w	r1, r1, #2
    83a0:	e7c8      	b.n	8334 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    83a2:	3301      	adds	r3, #1
    83a4:	2b0e      	cmp	r3, #14
    83a6:	d1d9      	bne.n	835c <bt_att_recv+0x44>
    83a8:	4b2c      	ldr	r3, [pc, #176]	; (845c <bt_att_recv+0x144>)
    83aa:	4a2b      	ldr	r2, [pc, #172]	; (8458 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    83ac:	482f      	ldr	r0, [pc, #188]	; (846c <bt_att_recv+0x154>)
    83ae:	1ad2      	subs	r2, r2, r3
    83b0:	08d2      	lsrs	r2, r2, #3
    83b2:	0192      	lsls	r2, r2, #6
    83b4:	f042 0202 	orr.w	r2, r2, #2
    83b8:	f013 fe28 	bl	1c00c <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    83bc:	7829      	ldrb	r1, [r5, #0]
    83be:	4608      	mov	r0, r1
    83c0:	f016 f94e 	bl	1e660 <att_op_get_type>
    83c4:	2800      	cmp	r0, #0
    83c6:	d0b7      	beq.n	8338 <bt_att_recv+0x20>
	if (!req) {
    83c8:	2900      	cmp	r1, #0
    83ca:	d0b5      	beq.n	8338 <bt_att_recv+0x20>
    83cc:	2306      	movs	r3, #6
    83ce:	2200      	movs	r2, #0
    83d0:	4630      	mov	r0, r6
    83d2:	f016 fbf6 	bl	1ebc2 <send_err_rsp.part.0>
    83d6:	e7af      	b.n	8338 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    83d8:	2f05      	cmp	r7, #5
    83da:	d118      	bne.n	840e <bt_att_recv+0xf6>
    83dc:	f3bf 8f5b 	dmb	ish
    83e0:	34e8      	adds	r4, #232	; 0xe8
    83e2:	e854 3f00 	ldrex	r3, [r4]
    83e6:	f043 0102 	orr.w	r1, r3, #2
    83ea:	e844 1c00 	strex	ip, r1, [r4]
    83ee:	f1bc 0f00 	cmp.w	ip, #0
    83f2:	d1f6      	bne.n	83e2 <bt_att_recv+0xca>
    83f4:	f3bf 8f5b 	dmb	ish
    83f8:	079b      	lsls	r3, r3, #30
    83fa:	d508      	bpl.n	840e <bt_att_recv+0xf6>
    83fc:	4916      	ldr	r1, [pc, #88]	; (8458 <bt_att_recv+0x140>)
    83fe:	4b17      	ldr	r3, [pc, #92]	; (845c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    8400:	481b      	ldr	r0, [pc, #108]	; (8470 <bt_att_recv+0x158>)
    8402:	1ac9      	subs	r1, r1, r3
    8404:	08c9      	lsrs	r1, r1, #3
    8406:	0189      	lsls	r1, r1, #6
    8408:	f041 0102 	orr.w	r1, r1, #2
    840c:	e792      	b.n	8334 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    840e:	1813      	adds	r3, r2, r0
    8410:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    8414:	785a      	ldrb	r2, [r3, #1]
    8416:	428a      	cmp	r2, r1
    8418:	d90e      	bls.n	8438 <bt_att_recv+0x120>
    841a:	4a10      	ldr	r2, [pc, #64]	; (845c <bt_att_recv+0x144>)
    841c:	4b0e      	ldr	r3, [pc, #56]	; (8458 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    841e:	4815      	ldr	r0, [pc, #84]	; (8474 <bt_att_recv+0x15c>)
    8420:	1a9b      	subs	r3, r3, r2
    8422:	08db      	lsrs	r3, r3, #3
    8424:	019b      	lsls	r3, r3, #6
    8426:	782a      	ldrb	r2, [r5, #0]
    8428:	f043 0301 	orr.w	r3, r3, #1
    842c:	f013 fe02 	bl	1c034 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    8430:	2f01      	cmp	r7, #1
    8432:	d181      	bne.n	8338 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    8434:	2304      	movs	r3, #4
    8436:	e00a      	b.n	844e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    8438:	685b      	ldr	r3, [r3, #4]
    843a:	4641      	mov	r1, r8
    843c:	4630      	mov	r0, r6
    843e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    8440:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    8442:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8444:	f47f af78 	bne.w	8338 <bt_att_recv+0x20>
    8448:	2800      	cmp	r0, #0
    844a:	f43f af75 	beq.w	8338 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    844e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    8450:	2900      	cmp	r1, #0
    8452:	f43f af71 	beq.w	8338 <bt_att_recv+0x20>
    8456:	e7ba      	b.n	83ce <bt_att_recv+0xb6>
    8458:	00020e08 	.word	0x00020e08
    845c:	00020e00 	.word	0x00020e00
    8460:	00024062 	.word	0x00024062
    8464:	00021588 	.word	0x00021588
    8468:	0002407d 	.word	0x0002407d
    846c:	000240d7 	.word	0x000240d7
    8470:	00024099 	.word	0x00024099
    8474:	000240b8 	.word	0x000240b8

00008478 <att_write_rsp>:
{
    8478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    847c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    847e:	6803      	ldr	r3, [r0, #0]
    8480:	460e      	mov	r6, r1
    8482:	3900      	subs	r1, #0
{
    8484:	b086      	sub	sp, #24
    8486:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8488:	bf18      	it	ne
    848a:	2101      	movne	r1, #1
    848c:	6818      	ldr	r0, [r3, #0]
{
    848e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8490:	f016 ff95 	bl	1f3be <bt_gatt_change_aware>
    8494:	2800      	cmp	r0, #0
    8496:	d04d      	beq.n	8534 <att_write_rsp+0xbc>
	if (!handle) {
    8498:	2f00      	cmp	r7, #0
    849a:	d04d      	beq.n	8538 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    849c:	2218      	movs	r2, #24
    849e:	2100      	movs	r1, #0
    84a0:	4668      	mov	r0, sp
    84a2:	f015 fabe 	bl	1da22 <memset>
	if (rsp) {
    84a6:	f1b8 0f00 	cmp.w	r8, #0
    84aa:	d126      	bne.n	84fa <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    84ac:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    84ae:	4a23      	ldr	r2, [pc, #140]	; (853c <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    84b0:	681b      	ldr	r3, [r3, #0]
    84b2:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    84b4:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    84b8:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    84bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    84be:	9303      	str	r3, [sp, #12]
	data.len = len;
    84c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    84c4:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    84c8:	2301      	movs	r3, #1
    84ca:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    84ce:	4639      	mov	r1, r7
    84d0:	466b      	mov	r3, sp
    84d2:	4638      	mov	r0, r7
	data.req = req;
    84d4:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    84d8:	f016 f8ef 	bl	1e6ba <bt_gatt_foreach_attr>
	if (data.err) {
    84dc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    84e0:	b30c      	cbz	r4, 8526 <att_write_rsp+0xae>
		if (rsp) {
    84e2:	f1b8 0f00 	cmp.w	r8, #0
    84e6:	d019      	beq.n	851c <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    84e8:	9801      	ldr	r0, [sp, #4]
    84ea:	f010 fd05 	bl	18ef8 <net_buf_unref>
	if (!req) {
    84ee:	b976      	cbnz	r6, 850e <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    84f0:	2400      	movs	r4, #0
}
    84f2:	4620      	mov	r0, r4
    84f4:	b006      	add	sp, #24
    84f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    84fa:	2200      	movs	r2, #0
    84fc:	4641      	mov	r1, r8
    84fe:	4628      	mov	r0, r5
    8500:	f7ff fec6 	bl	8290 <bt_att_chan_create_pdu>
    8504:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8506:	2800      	cmp	r0, #0
    8508:	d1d0      	bne.n	84ac <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    850a:	240e      	movs	r4, #14
    850c:	e7f1      	b.n	84f2 <att_write_rsp+0x7a>
    850e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8512:	463a      	mov	r2, r7
    8514:	4631      	mov	r1, r6
    8516:	4628      	mov	r0, r5
    8518:	f016 fb53 	bl	1ebc2 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    851c:	2e18      	cmp	r6, #24
    851e:	d1e7      	bne.n	84f0 <att_write_rsp+0x78>
    8520:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8524:	e7e5      	b.n	84f2 <att_write_rsp+0x7a>
	if (data.buf) {
    8526:	9901      	ldr	r1, [sp, #4]
    8528:	2900      	cmp	r1, #0
    852a:	d0e1      	beq.n	84f0 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    852c:	4628      	mov	r0, r5
    852e:	f7ff fd15 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
    8532:	e7de      	b.n	84f2 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8534:	2412      	movs	r4, #18
    8536:	e7dc      	b.n	84f2 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    8538:	2401      	movs	r4, #1
    853a:	e7da      	b.n	84f2 <att_write_rsp+0x7a>
    853c:	0001e815 	.word	0x0001e815

00008540 <att_signed_write_cmd>:
{
    8540:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    8544:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    8546:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
    8548:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    854c:	460c      	mov	r4, r1
    854e:	4606      	mov	r6, r0
	return net_buf_simple_push(&buf->b, len);
    8550:	2101      	movs	r1, #1
    8552:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    8554:	881f      	ldrh	r7, [r3, #0]
    8556:	f017 fbcf 	bl	1fcf8 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    855a:	4628      	mov	r0, r5
    855c:	4621      	mov	r1, r4
    855e:	f002 f9d3 	bl	a908 <bt_smp_sign_verify>
	if (err) {
    8562:	4605      	mov	r5, r0
    8564:	b168      	cbz	r0, 8582 <att_signed_write_cmd+0x42>
    8566:	4b12      	ldr	r3, [pc, #72]	; (85b0 <att_signed_write_cmd+0x70>)
    8568:	4912      	ldr	r1, [pc, #72]	; (85b4 <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    856a:	4813      	ldr	r0, [pc, #76]	; (85b8 <att_signed_write_cmd+0x78>)
    856c:	1ac9      	subs	r1, r1, r3
    856e:	08c9      	lsrs	r1, r1, #3
    8570:	0189      	lsls	r1, r1, #6
    8572:	f041 0101 	orr.w	r1, r1, #1
    8576:	f013 fd3c 	bl	1bff2 <log_0>
		return 0;
    857a:	2000      	movs	r0, #0
}
    857c:	b004      	add	sp, #16
    857e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull(&buf->b, len);
    8582:	2101      	movs	r1, #1
    8584:	4640      	mov	r0, r8
    8586:	f017 fbbf 	bl	1fd08 <net_buf_simple_pull>
    858a:	2102      	movs	r1, #2
    858c:	4640      	mov	r0, r8
    858e:	f017 fbbb 	bl	1fd08 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    8592:	89a3      	ldrh	r3, [r4, #12]
    8594:	3b0c      	subs	r3, #12
    8596:	b29b      	uxth	r3, r3
    8598:	9302      	str	r3, [sp, #8]
    859a:	68a3      	ldr	r3, [r4, #8]
    859c:	462a      	mov	r2, r5
    859e:	e9cd 5300 	strd	r5, r3, [sp]
    85a2:	4629      	mov	r1, r5
    85a4:	463b      	mov	r3, r7
    85a6:	4630      	mov	r0, r6
    85a8:	f7ff ff66 	bl	8478 <att_write_rsp>
    85ac:	e7e6      	b.n	857c <att_signed_write_cmd+0x3c>
    85ae:	bf00      	nop
    85b0:	00020e00 	.word	0x00020e00
    85b4:	00020e08 	.word	0x00020e08
    85b8:	000240f1 	.word	0x000240f1

000085bc <bt_att_create_pdu>:
{
    85bc:	b570      	push	{r4, r5, r6, lr}
    85be:	460e      	mov	r6, r1
    85c0:	4615      	mov	r5, r2
	att = att_get(conn);
    85c2:	f7ff fb5f 	bl	7c84 <att_get>
	if (!att) {
    85c6:	b1c0      	cbz	r0, 85fa <bt_att_create_pdu+0x3e>
	return list->head;
    85c8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    85ca:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    85cc:	b15b      	cbz	r3, 85e6 <bt_att_create_pdu+0x2a>
    85ce:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
    85d2:	d008      	beq.n	85e6 <bt_att_create_pdu+0x2a>
	return node->next;
    85d4:	681b      	ldr	r3, [r3, #0]
    85d6:	b10b      	cbz	r3, 85dc <bt_att_create_pdu+0x20>
    85d8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    85dc:	f8b0 2086 	ldrh.w	r2, [r0, #134]	; 0x86
    85e0:	4291      	cmp	r1, r2
    85e2:	d90c      	bls.n	85fe <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    85e4:	b98b      	cbnz	r3, 860a <bt_att_create_pdu+0x4e>
    85e6:	4a0e      	ldr	r2, [pc, #56]	; (8620 <bt_att_create_pdu+0x64>)
    85e8:	4b0e      	ldr	r3, [pc, #56]	; (8624 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    85ea:	480f      	ldr	r0, [pc, #60]	; (8628 <bt_att_create_pdu+0x6c>)
    85ec:	1ad2      	subs	r2, r2, r3
    85ee:	08d2      	lsrs	r2, r2, #3
    85f0:	0192      	lsls	r2, r2, #6
    85f2:	f042 0202 	orr.w	r2, r2, #2
    85f6:	f013 fd09 	bl	1c00c <log_1>
}
    85fa:	2000      	movs	r0, #0
    85fc:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    85fe:	462a      	mov	r2, r5
    8600:	4631      	mov	r1, r6
}
    8602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    8606:	f7ff be43 	b.w	8290 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    860a:	f513 74a2 	adds.w	r4, r3, #324	; 0x144
    860e:	d004      	beq.n	861a <bt_att_create_pdu+0x5e>
	return node->next;
    8610:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    8614:	b10c      	cbz	r4, 861a <bt_att_create_pdu+0x5e>
    8616:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
{
    861a:	4618      	mov	r0, r3
    861c:	4623      	mov	r3, r4
    861e:	e7dd      	b.n	85dc <bt_att_create_pdu+0x20>
    8620:	00020e08 	.word	0x00020e08
    8624:	00020e00 	.word	0x00020e00
    8628:	00024106 	.word	0x00024106

0000862c <att_prepare_write_req>:
{
    862c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8630:	460c      	mov	r4, r1
    8632:	b087      	sub	sp, #28
    8634:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    8636:	2104      	movs	r1, #4
    8638:	f104 0008 	add.w	r0, r4, #8
    863c:	f017 fb6c 	bl	1fd18 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    8640:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    8644:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    8648:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    864c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    8650:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    8652:	2101      	movs	r1, #1
    8654:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    8656:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    865a:	f016 feb0 	bl	1f3be <bt_gatt_change_aware>
    865e:	2800      	cmp	r0, #0
    8660:	d04a      	beq.n	86f8 <att_prepare_write_req+0xcc>
	if (!handle) {
    8662:	2e00      	cmp	r6, #0
    8664:	d04a      	beq.n	86fc <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    8666:	2214      	movs	r2, #20
    8668:	2100      	movs	r1, #0
    866a:	a801      	add	r0, sp, #4
    866c:	f015 f9d9 	bl	1da22 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8670:	2301      	movs	r3, #1
    8672:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8676:	4a23      	ldr	r2, [pc, #140]	; (8704 <att_prepare_write_req+0xd8>)
	data.conn = conn;
    8678:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    867c:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    867e:	ab01      	add	r3, sp, #4
    8680:	4631      	mov	r1, r6
    8682:	4630      	mov	r0, r6
	data.offset = offset;
    8684:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    8688:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    868c:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8690:	f016 f813 	bl	1e6ba <bt_gatt_foreach_attr>
	if (data.err) {
    8694:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8698:	b154      	cbz	r4, 86b0 <att_prepare_write_req+0x84>
	if (!req) {
    869a:	4623      	mov	r3, r4
    869c:	4632      	mov	r2, r6
    869e:	2116      	movs	r1, #22
    86a0:	4628      	mov	r0, r5
    86a2:	f016 fa8e 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    86a6:	2400      	movs	r4, #0
}
    86a8:	4620      	mov	r0, r4
    86aa:	b007      	add	sp, #28
    86ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    86b0:	6828      	ldr	r0, [r5, #0]
    86b2:	9902      	ldr	r1, [sp, #8]
    86b4:	3024      	adds	r0, #36	; 0x24
    86b6:	f017 fac9 	bl	1fc4c <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    86ba:	4622      	mov	r2, r4
    86bc:	2117      	movs	r1, #23
    86be:	4658      	mov	r0, fp
    86c0:	f7ff ff7c 	bl	85bc <bt_att_create_pdu>
    86c4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    86c6:	b1d8      	cbz	r0, 8700 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    86c8:	2104      	movs	r1, #4
    86ca:	3008      	adds	r0, #8
    86cc:	f017 fafd 	bl	1fcca <net_buf_simple_add>
    86d0:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    86d2:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    86d6:	f8a0 9002 	strh.w	r9, [r0, #2]
    86da:	9802      	ldr	r0, [sp, #8]
    86dc:	4639      	mov	r1, r7
    86de:	3008      	adds	r0, #8
    86e0:	f017 faf3 	bl	1fcca <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    86e4:	4641      	mov	r1, r8
    86e6:	463a      	mov	r2, r7
    86e8:	1d30      	adds	r0, r6, #4
    86ea:	f015 f98f 	bl	1da0c <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    86ee:	9902      	ldr	r1, [sp, #8]
    86f0:	4628      	mov	r0, r5
    86f2:	f7ff fc33 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    86f6:	e7d7      	b.n	86a8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    86f8:	2412      	movs	r4, #18
    86fa:	e7d5      	b.n	86a8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    86fc:	2401      	movs	r4, #1
    86fe:	e7d3      	b.n	86a8 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    8700:	240e      	movs	r4, #14
    8702:	e7d1      	b.n	86a8 <att_prepare_write_req+0x7c>
    8704:	000080d5 	.word	0x000080d5

00008708 <att_read_group_req>:
{
    8708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    870c:	898c      	ldrh	r4, [r1, #12]
    870e:	3c04      	subs	r4, #4
    8710:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8712:	2c02      	cmp	r4, #2
{
    8714:	4605      	mov	r5, r0
    8716:	b08c      	sub	sp, #48	; 0x30
    8718:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    871a:	d001      	beq.n	8720 <att_read_group_req+0x18>
    871c:	2c10      	cmp	r4, #16
    871e:	d16e      	bne.n	87fe <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    8720:	2104      	movs	r1, #4
    8722:	3008      	adds	r0, #8
    8724:	f017 faf8 	bl	1fd18 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8728:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    872c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    872e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8730:	1d01      	adds	r1, r0, #4
    8732:	4622      	mov	r2, r4
    8734:	4640      	mov	r0, r8
    8736:	f015 fa55 	bl	1dbe4 <bt_uuid_create>
    873a:	2800      	cmp	r0, #0
    873c:	d061      	beq.n	8802 <att_read_group_req+0xfa>
	if (!start || !end) {
    873e:	2e00      	cmp	r6, #0
    8740:	d03a      	beq.n	87b8 <att_read_group_req+0xb0>
    8742:	2400      	movs	r4, #0
    8744:	2f00      	cmp	r7, #0
    8746:	d036      	beq.n	87b6 <att_read_group_req+0xae>
	if (start > end) {
    8748:	42b7      	cmp	r7, r6
    874a:	d335      	bcc.n	87b8 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    874c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8750:	a901      	add	r1, sp, #4
    8752:	4640      	mov	r0, r8
    8754:	f88d 4004 	strb.w	r4, [sp, #4]
    8758:	f8ad 3006 	strh.w	r3, [sp, #6]
    875c:	f015 fa14 	bl	1db88 <bt_uuid_cmp>
    8760:	2800      	cmp	r0, #0
    8762:	d134      	bne.n	87ce <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    8764:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8766:	2214      	movs	r2, #20
    8768:	2100      	movs	r1, #0
    876a:	a807      	add	r0, sp, #28
    876c:	f015 f959 	bl	1da22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8770:	2201      	movs	r2, #1
    8772:	2111      	movs	r1, #17
    8774:	4620      	mov	r0, r4
    8776:	f7ff ff21 	bl	85bc <bt_att_create_pdu>
    877a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    877c:	2800      	cmp	r0, #0
    877e:	d040      	beq.n	8802 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    8780:	2101      	movs	r1, #1
    8782:	3008      	adds	r0, #8
	data.uuid = uuid;
    8784:	e9cd 5807 	strd	r5, r8, [sp, #28]
    8788:	f017 fa9f 	bl	1fcca <net_buf_simple_add>
	data.rsp->len = 0U;
    878c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8790:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8792:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    8794:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8798:	4a1b      	ldr	r2, [pc, #108]	; (8808 <att_read_group_req+0x100>)
	data.group = NULL;
    879a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    879e:	4639      	mov	r1, r7
    87a0:	4630      	mov	r0, r6
    87a2:	f015 ff8a 	bl	1e6ba <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    87a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    87a8:	781c      	ldrb	r4, [r3, #0]
    87aa:	bb1c      	cbnz	r4, 87f4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    87ac:	9809      	ldr	r0, [sp, #36]	; 0x24
    87ae:	f010 fba3 	bl	18ef8 <net_buf_unref>
	if (!req) {
    87b2:	230a      	movs	r3, #10
    87b4:	e018      	b.n	87e8 <att_read_group_req+0xe0>
			*err = 0U;
    87b6:	463e      	mov	r6, r7
	if (!req) {
    87b8:	2301      	movs	r3, #1
    87ba:	4632      	mov	r2, r6
    87bc:	2110      	movs	r1, #16
    87be:	4628      	mov	r0, r5
    87c0:	f016 f9ff 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    87c4:	2400      	movs	r4, #0
}
    87c6:	4620      	mov	r0, r4
    87c8:	b00c      	add	sp, #48	; 0x30
    87ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    87ce:	f642 0301 	movw	r3, #10241	; 0x2801
    87d2:	a907      	add	r1, sp, #28
    87d4:	4640      	mov	r0, r8
    87d6:	f88d 401c 	strb.w	r4, [sp, #28]
    87da:	f8ad 301e 	strh.w	r3, [sp, #30]
    87de:	f015 f9d3 	bl	1db88 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    87e2:	2800      	cmp	r0, #0
    87e4:	d0be      	beq.n	8764 <att_read_group_req+0x5c>
	if (!req) {
    87e6:	2310      	movs	r3, #16
    87e8:	4632      	mov	r2, r6
    87ea:	2110      	movs	r1, #16
    87ec:	4628      	mov	r0, r5
    87ee:	f016 f9e8 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    87f2:	e7e8      	b.n	87c6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    87f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    87f6:	4628      	mov	r0, r5
    87f8:	f7ff fbb0 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    87fc:	e7e2      	b.n	87c4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    87fe:	2404      	movs	r4, #4
    8800:	e7e1      	b.n	87c6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    8802:	240e      	movs	r4, #14
    8804:	e7df      	b.n	87c6 <att_read_group_req+0xbe>
    8806:	bf00      	nop
    8808:	00007f81 	.word	0x00007f81

0000880c <att_read_mult_req>:
{
    880c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8810:	6886      	ldr	r6, [r0, #8]
{
    8812:	b085      	sub	sp, #20
    8814:	4604      	mov	r4, r0
    8816:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
    8818:	4630      	mov	r0, r6
    881a:	2101      	movs	r1, #1
    881c:	f016 fdcf 	bl	1f3be <bt_gatt_change_aware>
    8820:	b3b8      	cbz	r0, 8892 <att_read_mult_req+0x86>
	(void)memset(&data, 0, sizeof(data));
    8822:	2210      	movs	r2, #16
    8824:	2100      	movs	r1, #0
    8826:	4668      	mov	r0, sp
    8828:	f015 f8fb 	bl	1da22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    882c:	2200      	movs	r2, #0
    882e:	210f      	movs	r1, #15
    8830:	4630      	mov	r0, r6
    8832:	f7ff fec3 	bl	85bc <bt_att_create_pdu>
    8836:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8838:	b368      	cbz	r0, 8896 <att_read_mult_req+0x8a>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    883a:	f8df 9060 	ldr.w	r9, [pc, #96]	; 889c <att_read_mult_req+0x90>
	data.chan = chan;
    883e:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    8840:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8844:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    8848:	89ab      	ldrh	r3, [r5, #12]
    884a:	2b01      	cmp	r3, #1
    884c:	d804      	bhi.n	8858 <att_read_mult_req+0x4c>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    884e:	9902      	ldr	r1, [sp, #8]
    8850:	4620      	mov	r0, r4
    8852:	f7ff fb83 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
    8856:	e018      	b.n	888a <att_read_mult_req+0x7e>
    8858:	4638      	mov	r0, r7
    885a:	f017 fa65 	bl	1fd28 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    885e:	466b      	mov	r3, sp
    8860:	464a      	mov	r2, r9
    8862:	4601      	mov	r1, r0
    8864:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8866:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    886a:	f015 ff26 	bl	1e6ba <bt_gatt_foreach_attr>
		if (data.err) {
    886e:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8872:	2b00      	cmp	r3, #0
    8874:	d0e8      	beq.n	8848 <att_read_mult_req+0x3c>
			net_buf_unref(data.buf);
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	f010 fb3e 	bl	18ef8 <net_buf_unref>
	if (!req) {
    887c:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8880:	4632      	mov	r2, r6
    8882:	210e      	movs	r1, #14
    8884:	4620      	mov	r0, r4
    8886:	f016 f99c 	bl	1ebc2 <send_err_rsp.part.0>
	return 0;
    888a:	2000      	movs	r0, #0
}
    888c:	b005      	add	sp, #20
    888e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8892:	2012      	movs	r0, #18
    8894:	e7fa      	b.n	888c <att_read_mult_req+0x80>
		return BT_ATT_ERR_UNLIKELY;
    8896:	200e      	movs	r0, #14
    8898:	e7f8      	b.n	888c <att_read_mult_req+0x80>
    889a:	bf00      	nop
    889c:	0001ea55 	.word	0x0001ea55

000088a0 <att_read_rsp>:
{
    88a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    88a4:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    88a8:	4605      	mov	r5, r0
    88aa:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    88ac:	4640      	mov	r0, r8
    88ae:	2101      	movs	r1, #1
{
    88b0:	4614      	mov	r4, r2
    88b2:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    88b4:	f016 fd83 	bl	1f3be <bt_gatt_change_aware>
    88b8:	b388      	cbz	r0, 891e <att_read_rsp+0x7e>
	if (!handle) {
    88ba:	b396      	cbz	r6, 8922 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    88bc:	2210      	movs	r2, #16
    88be:	2100      	movs	r1, #0
    88c0:	4668      	mov	r0, sp
    88c2:	f015 f8ae 	bl	1da22 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    88c6:	2200      	movs	r2, #0
    88c8:	4621      	mov	r1, r4
    88ca:	4640      	mov	r0, r8
    88cc:	f7ff fe76 	bl	85bc <bt_att_create_pdu>
    88d0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    88d2:	b340      	cbz	r0, 8926 <att_read_rsp+0x86>
	data.offset = offset;
    88d4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    88d8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    88dc:	2301      	movs	r3, #1
    88de:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    88e2:	4a12      	ldr	r2, [pc, #72]	; (892c <att_read_rsp+0x8c>)
	data.chan = chan;
    88e4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    88e6:	466b      	mov	r3, sp
    88e8:	4631      	mov	r1, r6
    88ea:	4630      	mov	r0, r6
    88ec:	f015 fee5 	bl	1e6ba <bt_gatt_foreach_attr>
	if (data.err) {
    88f0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    88f4:	b174      	cbz	r4, 8914 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    88f6:	9802      	ldr	r0, [sp, #8]
    88f8:	f010 fafe 	bl	18ef8 <net_buf_unref>
	if (!req) {
    88fc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8900:	4632      	mov	r2, r6
    8902:	4639      	mov	r1, r7
    8904:	4628      	mov	r0, r5
    8906:	f016 f95c 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    890a:	2400      	movs	r4, #0
}
    890c:	4620      	mov	r0, r4
    890e:	b004      	add	sp, #16
    8910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8914:	9902      	ldr	r1, [sp, #8]
    8916:	4628      	mov	r0, r5
    8918:	f7ff fb20 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    891c:	e7f6      	b.n	890c <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    891e:	2412      	movs	r4, #18
    8920:	e7f4      	b.n	890c <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8922:	2401      	movs	r4, #1
    8924:	e7f2      	b.n	890c <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    8926:	240e      	movs	r4, #14
    8928:	e7f0      	b.n	890c <att_read_rsp+0x6c>
    892a:	bf00      	nop
    892c:	0001ea55 	.word	0x0001ea55

00008930 <att_read_type_req>:
{
    8930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8934:	898c      	ldrh	r4, [r1, #12]
    8936:	3c04      	subs	r4, #4
    8938:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    893a:	2c02      	cmp	r4, #2
{
    893c:	4605      	mov	r5, r0
    893e:	b08c      	sub	sp, #48	; 0x30
    8940:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8942:	d001      	beq.n	8948 <att_read_type_req+0x18>
    8944:	2c10      	cmp	r4, #16
    8946:	d14f      	bne.n	89e8 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    8948:	2104      	movs	r1, #4
    894a:	3008      	adds	r0, #8
    894c:	f017 f9e4 	bl	1fd18 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8950:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    8954:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8956:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8958:	1d01      	adds	r1, r0, #4
    895a:	4622      	mov	r2, r4
    895c:	4640      	mov	r0, r8
    895e:	f015 f941 	bl	1dbe4 <bt_uuid_create>
    8962:	b188      	cbz	r0, 8988 <att_read_type_req+0x58>
	if (!start || !end) {
    8964:	b19e      	cbz	r6, 898e <att_read_type_req+0x5e>
    8966:	b18f      	cbz	r7, 898c <att_read_type_req+0x5c>
	if (start > end) {
    8968:	42be      	cmp	r6, r7
    896a:	d810      	bhi.n	898e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    896c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    896e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8970:	2100      	movs	r1, #0
    8972:	eb0d 0002 	add.w	r0, sp, r2
    8976:	f015 f854 	bl	1da22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    897a:	2201      	movs	r2, #1
    897c:	2109      	movs	r1, #9
    897e:	4620      	mov	r0, r4
    8980:	f7ff fe1c 	bl	85bc <bt_att_create_pdu>
    8984:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    8986:	b968      	cbnz	r0, 89a4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    8988:	240e      	movs	r4, #14
    898a:	e007      	b.n	899c <att_read_type_req+0x6c>
			*err = 0U;
    898c:	463e      	mov	r6, r7
	if (!req) {
    898e:	2301      	movs	r3, #1
    8990:	4632      	mov	r2, r6
    8992:	2108      	movs	r1, #8
    8994:	4628      	mov	r0, r5
    8996:	f016 f914 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    899a:	2400      	movs	r4, #0
}
    899c:	4620      	mov	r0, r4
    899e:	b00c      	add	sp, #48	; 0x30
    89a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    89a4:	2101      	movs	r1, #1
    89a6:	3008      	adds	r0, #8
	data.uuid = uuid;
    89a8:	e9cd 5806 	strd	r5, r8, [sp, #24]
    89ac:	f017 f98d 	bl	1fcca <net_buf_simple_add>
	data.rsp->len = 0U;
    89b0:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    89b4:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    89b6:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    89b8:	4a0c      	ldr	r2, [pc, #48]	; (89ec <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    89ba:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    89be:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    89c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    89c4:	4630      	mov	r0, r6
    89c6:	ab06      	add	r3, sp, #24
    89c8:	f015 fe77 	bl	1e6ba <bt_gatt_foreach_attr>
	if (data.err) {
    89cc:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    89d0:	b12c      	cbz	r4, 89de <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    89d2:	9808      	ldr	r0, [sp, #32]
    89d4:	f010 fa90 	bl	18ef8 <net_buf_unref>
	if (!req) {
    89d8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    89dc:	e7d8      	b.n	8990 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    89de:	9908      	ldr	r1, [sp, #32]
    89e0:	4628      	mov	r0, r5
    89e2:	f7ff fabb 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    89e6:	e7d9      	b.n	899c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    89e8:	2404      	movs	r4, #4
    89ea:	e7d7      	b.n	899c <att_read_type_req+0x6c>
    89ec:	0000802d 	.word	0x0000802d

000089f0 <att_find_type_req>:
{
    89f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    89f4:	4688      	mov	r8, r1
    89f6:	b086      	sub	sp, #24
    89f8:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    89fa:	2106      	movs	r1, #6
    89fc:	f108 0008 	add.w	r0, r8, #8
    8a00:	f017 f98a 	bl	1fd18 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    8a04:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    8a06:	b317      	cbz	r7, 8a4e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8a08:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    8a0c:	f1b9 0f00 	cmp.w	r9, #0
    8a10:	d01c      	beq.n	8a4c <att_find_type_req+0x5c>
	if (start > end) {
    8a12:	45b9      	cmp	r9, r7
    8a14:	d31b      	bcc.n	8a4e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    8a16:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    8a18:	f8ad 3002 	strh.w	r3, [sp, #2]
    8a1c:	2400      	movs	r4, #0
    8a1e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8a22:	a901      	add	r1, sp, #4
    8a24:	4668      	mov	r0, sp
	value = buf->data;
    8a26:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    8a2a:	f88d 4000 	strb.w	r4, [sp]
    8a2e:	f88d 4004 	strb.w	r4, [sp, #4]
    8a32:	f8ad 3006 	strh.w	r3, [sp, #6]
    8a36:	f015 f8a7 	bl	1db88 <bt_uuid_cmp>
    8a3a:	4606      	mov	r6, r0
    8a3c:	b190      	cbz	r0, 8a64 <att_find_type_req+0x74>
	if (!req) {
    8a3e:	230a      	movs	r3, #10
    8a40:	463a      	mov	r2, r7
    8a42:	2106      	movs	r1, #6
    8a44:	4628      	mov	r0, r5
    8a46:	f016 f8bc 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    8a4a:	e007      	b.n	8a5c <att_find_type_req+0x6c>
			*err = 0U;
    8a4c:	464f      	mov	r7, r9
	if (!req) {
    8a4e:	2301      	movs	r3, #1
    8a50:	463a      	mov	r2, r7
    8a52:	2106      	movs	r1, #6
    8a54:	4628      	mov	r0, r5
    8a56:	f016 f8b4 	bl	1ebc2 <send_err_rsp.part.0>
		return 0;
    8a5a:	2400      	movs	r4, #0
}
    8a5c:	4620      	mov	r0, r4
    8a5e:	b006      	add	sp, #24
    8a60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    8a64:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    8a68:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8a6c:	4601      	mov	r1, r0
    8a6e:	2214      	movs	r2, #20
    8a70:	a801      	add	r0, sp, #4
    8a72:	f014 ffd6 	bl	1da22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    8a76:	4632      	mov	r2, r6
    8a78:	2107      	movs	r1, #7
    8a7a:	4640      	mov	r0, r8
    8a7c:	f7ff fd9e 	bl	85bc <bt_att_create_pdu>
    8a80:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8a82:	b1d8      	cbz	r0, 8abc <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8a84:	230a      	movs	r3, #10
    8a86:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a8a:	4a0d      	ldr	r2, [pc, #52]	; (8ac0 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    8a8c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a90:	ab01      	add	r3, sp, #4
    8a92:	4649      	mov	r1, r9
    8a94:	4638      	mov	r0, r7
	data.value = value;
    8a96:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    8a9a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8a9c:	f015 fe0d 	bl	1e6ba <bt_gatt_foreach_attr>
	if (data.err) {
    8aa0:	f89d 4015 	ldrb.w	r4, [sp, #21]
    8aa4:	b12c      	cbz	r4, 8ab2 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    8aa6:	9802      	ldr	r0, [sp, #8]
    8aa8:	f010 fa26 	bl	18ef8 <net_buf_unref>
	if (!req) {
    8aac:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8ab0:	e7ce      	b.n	8a50 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8ab2:	9902      	ldr	r1, [sp, #8]
    8ab4:	4628      	mov	r0, r5
    8ab6:	f7ff fa51 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
	return 0;
    8aba:	e7cf      	b.n	8a5c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    8abc:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    8abe:	e7cd      	b.n	8a5c <att_find_type_req+0x6c>
    8ac0:	00007d1d 	.word	0x00007d1d

00008ac4 <att_find_info_req>:
{
    8ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8ac6:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8ac8:	881e      	ldrh	r6, [r3, #0]
{
    8aca:	b085      	sub	sp, #20
    8acc:	4605      	mov	r5, r0
	if (!start || !end) {
    8ace:	b19e      	cbz	r6, 8af8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8ad0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8ad2:	b184      	cbz	r4, 8af6 <att_find_info_req+0x32>
	if (start > end) {
    8ad4:	42a6      	cmp	r6, r4
    8ad6:	d80f      	bhi.n	8af8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    8ad8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    8ada:	2210      	movs	r2, #16
    8adc:	2100      	movs	r1, #0
    8ade:	4668      	mov	r0, sp
    8ae0:	f014 ff9f 	bl	1da22 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8ae4:	2200      	movs	r2, #0
    8ae6:	2105      	movs	r1, #5
    8ae8:	4638      	mov	r0, r7
    8aea:	f7ff fd67 	bl	85bc <bt_att_create_pdu>
    8aee:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    8af0:	b958      	cbnz	r0, 8b0a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    8af2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    8af4:	e007      	b.n	8b06 <att_find_info_req+0x42>
			*err = 0U;
    8af6:	4626      	mov	r6, r4
	if (!req) {
    8af8:	2301      	movs	r3, #1
    8afa:	4632      	mov	r2, r6
    8afc:	2104      	movs	r1, #4
    8afe:	4628      	mov	r0, r5
    8b00:	f016 f85f 	bl	1ebc2 <send_err_rsp.part.0>
	return 0;
    8b04:	2000      	movs	r0, #0
}
    8b06:	b005      	add	sp, #20
    8b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8b0a:	4621      	mov	r1, r4
    8b0c:	4a08      	ldr	r2, [pc, #32]	; (8b30 <att_find_info_req+0x6c>)
	data.chan = chan;
    8b0e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8b10:	466b      	mov	r3, sp
    8b12:	4630      	mov	r0, r6
    8b14:	f015 fdd1 	bl	1e6ba <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8b18:	9c02      	ldr	r4, [sp, #8]
    8b1a:	b924      	cbnz	r4, 8b26 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    8b1c:	9801      	ldr	r0, [sp, #4]
    8b1e:	f010 f9eb 	bl	18ef8 <net_buf_unref>
	if (!req) {
    8b22:	230a      	movs	r3, #10
    8b24:	e7e9      	b.n	8afa <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8b26:	9901      	ldr	r1, [sp, #4]
    8b28:	4628      	mov	r0, r5
    8b2a:	f7ff fa17 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
    8b2e:	e7e9      	b.n	8b04 <att_find_info_req+0x40>
    8b30:	0001e6d1 	.word	0x0001e6d1

00008b34 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    8b34:	b513      	push	{r0, r1, r4, lr}
    8b36:	4602      	mov	r2, r0
    8b38:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    8b3a:	4808      	ldr	r0, [pc, #32]	; (8b5c <bt_att_req_alloc+0x28>)
    8b3c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    8b3e:	2400      	movs	r4, #0
    8b40:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    8b42:	f011 fbd5 	bl	1a2f0 <k_mem_slab_alloc>
    8b46:	4601      	mov	r1, r0
    8b48:	b930      	cbnz	r0, 8b58 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    8b4a:	9801      	ldr	r0, [sp, #4]
    8b4c:	221c      	movs	r2, #28
    8b4e:	f014 ff68 	bl	1da22 <memset>

	return req;
    8b52:	9801      	ldr	r0, [sp, #4]
}
    8b54:	b002      	add	sp, #8
    8b56:	bd10      	pop	{r4, pc}
		return NULL;
    8b58:	4620      	mov	r0, r4
    8b5a:	e7fb      	b.n	8b54 <bt_att_req_alloc+0x20>
    8b5c:	2000070c 	.word	0x2000070c

00008b60 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    8b60:	b507      	push	{r0, r1, r2, lr}
    8b62:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    8b64:	6880      	ldr	r0, [r0, #8]
    8b66:	b120      	cbz	r0, 8b72 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    8b68:	f010 f9c6 	bl	18ef8 <net_buf_unref>
		req->buf = NULL;
    8b6c:	9b01      	ldr	r3, [sp, #4]
    8b6e:	2200      	movs	r2, #0
    8b70:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    8b72:	4803      	ldr	r0, [pc, #12]	; (8b80 <bt_att_req_free+0x20>)
    8b74:	a901      	add	r1, sp, #4
    8b76:	f017 fabd 	bl	200f4 <k_mem_slab_free>
}
    8b7a:	b003      	add	sp, #12
    8b7c:	f85d fb04 	ldr.w	pc, [sp], #4
    8b80:	2000070c 	.word	0x2000070c

00008b84 <att_handle_rsp>:
{
    8b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b88:	4604      	mov	r4, r0
	k_work_cancel_delayable(&chan->timeout_work);
    8b8a:	f500 7088 	add.w	r0, r0, #272	; 0x110
{
    8b8e:	460f      	mov	r7, r1
    8b90:	4690      	mov	r8, r2
    8b92:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
    8b94:	f017 fc72 	bl	2047c <k_work_cancel_delayable>
	if (!chan->req) {
    8b98:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
    8b9c:	b9e5      	cbnz	r5, 8bd8 <att_handle_rsp+0x54>
    8b9e:	4919      	ldr	r1, [pc, #100]	; (8c04 <att_handle_rsp+0x80>)
    8ba0:	4819      	ldr	r0, [pc, #100]	; (8c08 <att_handle_rsp+0x84>)
    8ba2:	1a40      	subs	r0, r0, r1
    8ba4:	08c0      	lsrs	r0, r0, #3
		BT_WARN("No pending ATT request");
    8ba6:	0180      	lsls	r0, r0, #6
    8ba8:	f040 0102 	orr.w	r1, r0, #2
    8bac:	4817      	ldr	r0, [pc, #92]	; (8c0c <att_handle_rsp+0x88>)
    8bae:	f013 fa20 	bl	1bff2 <log_0>
	bt_att_func_t func = NULL;
    8bb2:	46aa      	mov	sl, r5
	att_req_send_process(chan->att);
    8bb4:	6820      	ldr	r0, [r4, #0]
    8bb6:	f015 ffb4 	bl	1eb22 <att_req_send_process>
	if (func) {
    8bba:	f1ba 0f00 	cmp.w	sl, #0
    8bbe:	d007      	beq.n	8bd0 <att_handle_rsp+0x4c>
		func(chan->att->conn, err, pdu, len, params);
    8bc0:	6820      	ldr	r0, [r4, #0]
    8bc2:	f8cd 9000 	str.w	r9, [sp]
    8bc6:	6800      	ldr	r0, [r0, #0]
    8bc8:	4643      	mov	r3, r8
    8bca:	463a      	mov	r2, r7
    8bcc:	4631      	mov	r1, r6
    8bce:	47d0      	blx	sl
}
    8bd0:	2000      	movs	r0, #0
    8bd2:	b003      	add	sp, #12
    8bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
    8bd8:	4b0d      	ldr	r3, [pc, #52]	; (8c10 <att_handle_rsp+0x8c>)
    8bda:	429d      	cmp	r5, r3
    8bdc:	f04f 0b00 	mov.w	fp, #0
    8be0:	d103      	bne.n	8bea <att_handle_rsp+0x66>
		chan->req = NULL;
    8be2:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
	bt_att_func_t func = NULL;
    8be6:	46da      	mov	sl, fp
		goto process;
    8be8:	e7e4      	b.n	8bb4 <att_handle_rsp+0x30>
	func = chan->req->func;
    8bea:	f8d5 a004 	ldr.w	sl, [r5, #4]
	chan->req->func = NULL;
    8bee:	f8c5 b004 	str.w	fp, [r5, #4]
	bt_att_req_free(chan->req);
    8bf2:	4628      	mov	r0, r5
	params = chan->req->user_data;
    8bf4:	f8d5 9018 	ldr.w	r9, [r5, #24]
	bt_att_req_free(chan->req);
    8bf8:	f7ff ffb2 	bl	8b60 <bt_att_req_free>
	chan->req = NULL;
    8bfc:	f8c4 b0f4 	str.w	fp, [r4, #244]	; 0xf4
    8c00:	e7d8      	b.n	8bb4 <att_handle_rsp+0x30>
    8c02:	bf00      	nop
    8c04:	00020e00 	.word	0x00020e00
    8c08:	00020e08 	.word	0x00020e08
    8c0c:	00024121 	.word	0x00024121
    8c10:	20001578 	.word	0x20001578

00008c14 <bt_att_disconnected>:
{
    8c14:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    8c16:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    8c1a:	b085      	sub	sp, #20
    8c1c:	4604      	mov	r4, r0
	if (!att_chan->att) {
    8c1e:	2d00      	cmp	r5, #0
    8c20:	d056      	beq.n	8cd0 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    8c22:	f500 719e 	add.w	r1, r0, #316	; 0x13c
    8c26:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    8c2a:	f015 fe54 	bl	1e8d6 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    8c2e:	f1a4 0608 	sub.w	r6, r4, #8
    8c32:	f104 07f0 	add.w	r7, r4, #240	; 0xf0
    8c36:	2200      	movs	r2, #0
    8c38:	2300      	movs	r3, #0
    8c3a:	4638      	mov	r0, r7
    8c3c:	f016 ffe8 	bl	1fc10 <net_buf_get>
    8c40:	4602      	mov	r2, r0
    8c42:	bb50      	cbnz	r0, 8c9a <bt_att_disconnected+0x86>
	if (chan->req) {
    8c44:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
    8c48:	b123      	cbz	r3, 8c54 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8c4a:	4601      	mov	r1, r0
    8c4c:	230e      	movs	r3, #14
    8c4e:	4630      	mov	r0, r6
    8c50:	f7ff ff98 	bl	8b84 <att_handle_rsp>
	chan->att = NULL;
    8c54:	2300      	movs	r3, #0
    8c56:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    8c5a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8c5c:	2b00      	cmp	r3, #0
    8c5e:	d137      	bne.n	8cd0 <bt_att_disconnected+0xbc>
	att_reset(att);
    8c60:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    8c62:	9803      	ldr	r0, [sp, #12]
    8c64:	2200      	movs	r2, #0
    8c66:	2300      	movs	r3, #0
    8c68:	3024      	adds	r0, #36	; 0x24
    8c6a:	f016 ffd1 	bl	1fc10 <net_buf_get>
    8c6e:	b9b8      	cbnz	r0, 8ca0 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    8c70:	9803      	ldr	r0, [sp, #12]
    8c72:	2200      	movs	r2, #0
    8c74:	2300      	movs	r3, #0
    8c76:	300c      	adds	r0, #12
    8c78:	f016 ffca 	bl	1fc10 <net_buf_get>
    8c7c:	b998      	cbnz	r0, 8ca6 <bt_att_disconnected+0x92>
	att->conn = NULL;
    8c7e:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    8c80:	6855      	ldr	r5, [r2, #4]
    8c82:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8c84:	b995      	cbnz	r5, 8cac <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    8c86:	4813      	ldr	r0, [pc, #76]	; (8cd4 <bt_att_disconnected+0xc0>)
    8c88:	a903      	add	r1, sp, #12
    8c8a:	f017 fa33 	bl	200f4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    8c8e:	6820      	ldr	r0, [r4, #0]
}
    8c90:	b005      	add	sp, #20
    8c92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    8c96:	f000 bed3 	b.w	9a40 <bt_gatt_disconnected>
		net_buf_unref(buf);
    8c9a:	f010 f92d 	bl	18ef8 <net_buf_unref>
    8c9e:	e7ca      	b.n	8c36 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    8ca0:	f010 f92a 	bl	18ef8 <net_buf_unref>
    8ca4:	e7dd      	b.n	8c62 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    8ca6:	f010 f927 	bl	18ef8 <net_buf_unref>
    8caa:	e7e1      	b.n	8c70 <bt_att_disconnected+0x5c>
	return node->next;
    8cac:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    8cae:	686f      	ldr	r7, [r5, #4]
    8cb0:	b137      	cbz	r7, 8cc0 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    8cb2:	69ab      	ldr	r3, [r5, #24]
    8cb4:	9300      	str	r3, [sp, #0]
    8cb6:	2300      	movs	r3, #0
    8cb8:	461a      	mov	r2, r3
    8cba:	210e      	movs	r1, #14
    8cbc:	4618      	mov	r0, r3
    8cbe:	47b8      	blx	r7
		bt_att_req_free(req);
    8cc0:	4628      	mov	r0, r5
    8cc2:	f7ff ff4d 	bl	8b60 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8cc6:	2e00      	cmp	r6, #0
    8cc8:	d0dd      	beq.n	8c86 <bt_att_disconnected+0x72>
    8cca:	4635      	mov	r5, r6
    8ccc:	6836      	ldr	r6, [r6, #0]
    8cce:	e7ee      	b.n	8cae <bt_att_disconnected+0x9a>
}
    8cd0:	b005      	add	sp, #20
    8cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8cd4:	200006d4 	.word	0x200006d4

00008cd8 <att_timeout>:
    8cd8:	4b08      	ldr	r3, [pc, #32]	; (8cfc <att_timeout+0x24>)
    8cda:	4909      	ldr	r1, [pc, #36]	; (8d00 <att_timeout+0x28>)
{
    8cdc:	b510      	push	{r4, lr}
    8cde:	1ac9      	subs	r1, r1, r3
    8ce0:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    8ce2:	0189      	lsls	r1, r1, #6
{
    8ce4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    8ce6:	f041 0101 	orr.w	r1, r1, #1
    8cea:	4806      	ldr	r0, [pc, #24]	; (8d04 <att_timeout+0x2c>)
    8cec:	f013 f981 	bl	1bff2 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    8cf0:	f5a4 7084 	sub.w	r0, r4, #264	; 0x108
}
    8cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    8cf8:	f7ff bf8c 	b.w	8c14 <bt_att_disconnected>
    8cfc:	00020e00 	.word	0x00020e00
    8d00:	00020e08 	.word	0x00020e08
    8d04:	00024138 	.word	0x00024138

00008d08 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
    8d08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    8d0a:	4d0f      	ldr	r5, [pc, #60]	; (8d48 <find_cf_cfg+0x40>)
    8d0c:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    8d0e:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    8d10:	462e      	mov	r6, r5

		if (!conn) {
    8d12:	1c68      	adds	r0, r5, #1
    8d14:	b964      	cbnz	r4, 8d30 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
    8d16:	2207      	movs	r2, #7
    8d18:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    8d1a:	9400      	str	r4, [sp, #0]
    8d1c:	f8cd 4003 	str.w	r4, [sp, #3]
    8d20:	f014 fe63 	bl	1d9ea <memcmp>
    8d24:	b958      	cbnz	r0, 8d3e <find_cf_cfg+0x36>
			return cfg;
		}
	}

	return NULL;
}
    8d26:	4630      	mov	r0, r6
    8d28:	b003      	add	sp, #12
    8d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8d2c:	2701      	movs	r7, #1
    8d2e:	e7ef      	b.n	8d10 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8d30:	4602      	mov	r2, r0
    8d32:	7829      	ldrb	r1, [r5, #0]
    8d34:	4620      	mov	r0, r4
    8d36:	f015 fb50 	bl	1e3da <bt_conn_is_peer_addr_le>
    8d3a:	2800      	cmp	r0, #0
    8d3c:	d1f3      	bne.n	8d26 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    8d3e:	3510      	adds	r5, #16
    8d40:	2f00      	cmp	r7, #0
    8d42:	d0f3      	beq.n	8d2c <find_cf_cfg+0x24>
	return NULL;
    8d44:	2600      	movs	r6, #0
    8d46:	e7ee      	b.n	8d26 <find_cf_cfg+0x1e>
    8d48:	2000159c 	.word	0x2000159c

00008d4c <cf_write>:
	return true;
}

static ssize_t cf_write(struct bt_conn *conn, const struct bt_gatt_attr *attr,
			const void *buf, uint16_t len, uint16_t offset, uint8_t flags)
{
    8d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d50:	4698      	mov	r8, r3
    8d52:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	struct gatt_cf_cfg *cfg;
	const uint8_t *value = buf;

	if (offset > sizeof(cfg->data)) {
    8d56:	2b01      	cmp	r3, #1
{
    8d58:	4606      	mov	r6, r0
    8d5a:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
    8d5c:	d83d      	bhi.n	8dda <cf_write+0x8e>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (offset + len > sizeof(cfg->data)) {
    8d5e:	4443      	add	r3, r8
    8d60:	2b01      	cmp	r3, #1
    8d62:	4645      	mov	r5, r8
    8d64:	dc3c      	bgt.n	8de0 <cf_write+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	cfg = find_cf_cfg(conn);
    8d66:	f7ff ffcf 	bl	8d08 <find_cf_cfg>
	if (!cfg) {
    8d6a:	4604      	mov	r4, r0
    8d6c:	b918      	cbnz	r0, 8d76 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    8d6e:	f7ff ffcb 	bl	8d08 <find_cf_cfg>
	}

	if (!cfg) {
    8d72:	4604      	mov	r4, r0
    8d74:	b180      	cbz	r0, 8d98 <cf_write+0x4c>
{
    8d76:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    8d78:	f1b8 0f00 	cmp.w	r8, #0
    8d7c:	d11b      	bne.n	8db6 <cf_write+0x6a>

	if (!cf_set_value(cfg, value, len)) {
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
	}

	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8d7e:	f106 0188 	add.w	r1, r6, #136	; 0x88
    8d82:	1c60      	adds	r0, r4, #1
    8d84:	f016 f8be 	bl	1ef04 <bt_addr_le_copy>
	cfg->id = conn->id;
    8d88:	4620      	mov	r0, r4
    8d8a:	7a33      	ldrb	r3, [r6, #8]
    8d8c:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    8d90:	2100      	movs	r1, #0
    8d92:	f016 f94f 	bl	1f034 <atomic_set_bit>

	return len;
    8d96:	e00b      	b.n	8db0 <cf_write+0x64>
    8d98:	4b14      	ldr	r3, [pc, #80]	; (8dec <cf_write+0xa0>)
    8d9a:	4915      	ldr	r1, [pc, #84]	; (8df0 <cf_write+0xa4>)
		BT_WARN("No space to store Client Supported Features");
    8d9c:	4815      	ldr	r0, [pc, #84]	; (8df4 <cf_write+0xa8>)
    8d9e:	1ac9      	subs	r1, r1, r3
    8da0:	08c9      	lsrs	r1, r1, #3
    8da2:	0189      	lsls	r1, r1, #6
    8da4:	f041 0102 	orr.w	r1, r1, #2
    8da8:	f013 f923 	bl	1bff2 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    8dac:	f06f 0510 	mvn.w	r5, #16
}
    8db0:	4628      	mov	r0, r5
    8db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    8db6:	7a20      	ldrb	r0, [r4, #8]
    8db8:	fa20 f301 	lsr.w	r3, r0, r1
    8dbc:	07da      	lsls	r2, r3, #31
    8dbe:	d503      	bpl.n	8dc8 <cf_write+0x7c>
		    !(value[i / 8] & BIT(i % 8))) {
    8dc0:	783b      	ldrb	r3, [r7, #0]
    8dc2:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
    8dc4:	07db      	lsls	r3, r3, #31
    8dc6:	d50e      	bpl.n	8de6 <cf_write+0x9a>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
    8dc8:	3101      	adds	r1, #1
    8dca:	2903      	cmp	r1, #3
    8dcc:	d1d4      	bne.n	8d78 <cf_write+0x2c>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
    8dce:	783b      	ldrb	r3, [r7, #0]
    8dd0:	f003 0307 	and.w	r3, r3, #7
    8dd4:	4318      	orrs	r0, r3
    8dd6:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
    8dd8:	e7d1      	b.n	8d7e <cf_write+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8dda:	f06f 0506 	mvn.w	r5, #6
    8dde:	e7e7      	b.n	8db0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8de0:	f06f 050c 	mvn.w	r5, #12
    8de4:	e7e4      	b.n	8db0 <cf_write+0x64>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    8de6:	f06f 0512 	mvn.w	r5, #18
    8dea:	e7e1      	b.n	8db0 <cf_write+0x64>
    8dec:	00020e00 	.word	0x00020e00
    8df0:	00020ed8 	.word	0x00020ed8
    8df4:	0002414b 	.word	0x0002414b

00008df8 <bt_gatt_attr_write_ccc>:
}

ssize_t bt_gatt_attr_write_ccc(struct bt_conn *conn,
			       const struct bt_gatt_attr *attr, const void *buf,
			       uint16_t len, uint16_t offset, uint8_t flags)
{
    8df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    8dfc:	461f      	mov	r7, r3
    8dfe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
    8e02:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    8e06:	4606      	mov	r6, r0
    8e08:	4688      	mov	r8, r1
	struct bt_gatt_ccc_cfg *cfg;
	bool value_changed;
	uint16_t value;

	if (offset) {
    8e0a:	2b00      	cmp	r3, #0
    8e0c:	d14e      	bne.n	8eac <bt_gatt_attr_write_ccc+0xb4>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
	}

	if (!len || len > sizeof(uint16_t)) {
    8e0e:	1e7b      	subs	r3, r7, #1
    8e10:	2b01      	cmp	r3, #1
    8e12:	d84e      	bhi.n	8eb2 <bt_gatt_attr_write_ccc+0xba>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
	}

	if (len < sizeof(uint16_t)) {
		value = *(uint8_t *)buf;
    8e14:	7815      	ldrb	r5, [r2, #0]
	if (len < sizeof(uint16_t)) {
    8e16:	2f01      	cmp	r7, #1
	} else {
		value = sys_get_le16(buf);
	}

	cfg = find_ccc_cfg(conn, ccc);
    8e18:	4649      	mov	r1, r9
    8e1a:	bf14      	ite	ne
    8e1c:	8815      	ldrhne	r5, [r2, #0]
		value = *(uint8_t *)buf;
    8e1e:	b2ad      	uxtheq	r5, r5
	cfg = find_ccc_cfg(conn, ccc);
    8e20:	f016 f9cd 	bl	1f1be <find_ccc_cfg>
	if (!cfg) {
    8e24:	4604      	mov	r4, r0
    8e26:	b9e8      	cbnz	r0, 8e64 <bt_gatt_attr_write_ccc+0x6c>
		/* If there's no existing entry, but the new value is zero,
		 * we don't need to do anything, since a disabled CCC is
		 * behavioraly the same as no written CCC.
		 */
		if (!value) {
    8e28:	b91d      	cbnz	r5, 8e32 <bt_gatt_attr_write_ccc+0x3a>
			return len;
    8e2a:	4638      	mov	r0, r7
	if (!value) {
		clear_ccc_cfg(cfg);
	}

	return len;
}
    8e2c:	b003      	add	sp, #12
    8e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    8e32:	4649      	mov	r1, r9
    8e34:	f016 f9c3 	bl	1f1be <find_ccc_cfg>
		if (!cfg) {
    8e38:	4604      	mov	r4, r0
    8e3a:	b960      	cbnz	r0, 8e56 <bt_gatt_attr_write_ccc+0x5e>
    8e3c:	4b1e      	ldr	r3, [pc, #120]	; (8eb8 <bt_gatt_attr_write_ccc+0xc0>)
    8e3e:	491f      	ldr	r1, [pc, #124]	; (8ebc <bt_gatt_attr_write_ccc+0xc4>)
			BT_WARN("No space to store CCC cfg");
    8e40:	481f      	ldr	r0, [pc, #124]	; (8ec0 <bt_gatt_attr_write_ccc+0xc8>)
    8e42:	1ac9      	subs	r1, r1, r3
    8e44:	08c9      	lsrs	r1, r1, #3
    8e46:	0189      	lsls	r1, r1, #6
    8e48:	f041 0102 	orr.w	r1, r1, #2
    8e4c:	f013 f8d1 	bl	1bff2 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    8e50:	f06f 0010 	mvn.w	r0, #16
    8e54:	e7ea      	b.n	8e2c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    8e56:	f106 0188 	add.w	r1, r6, #136	; 0x88
    8e5a:	3001      	adds	r0, #1
    8e5c:	f016 f852 	bl	1ef04 <bt_addr_le_copy>
		cfg->id = conn->id;
    8e60:	7a33      	ldrb	r3, [r6, #8]
    8e62:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
    8e64:	f8d9 301c 	ldr.w	r3, [r9, #28]
    8e68:	b9a3      	cbnz	r3, 8e94 <bt_gatt_attr_write_ccc+0x9c>
	if (cfg->value != ccc->value) {
    8e6a:	f8b9 3014 	ldrh.w	r3, [r9, #20]
	cfg->value = value;
    8e6e:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
    8e70:	42ab      	cmp	r3, r5
    8e72:	d003      	beq.n	8e7c <bt_gatt_attr_write_ccc+0x84>
		gatt_ccc_changed(attr, ccc);
    8e74:	4649      	mov	r1, r9
    8e76:	4640      	mov	r0, r8
    8e78:	f016 f81f 	bl	1eeba <gatt_ccc_changed>
	if (!value) {
    8e7c:	2d00      	cmp	r5, #0
    8e7e:	d1d4      	bne.n	8e2a <bt_gatt_attr_write_ccc+0x32>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    8e80:	4669      	mov	r1, sp
    8e82:	1c60      	adds	r0, r4, #1
    8e84:	9500      	str	r5, [sp, #0]
    8e86:	f8cd 5003 	str.w	r5, [sp, #3]
    8e8a:	f016 f83b 	bl	1ef04 <bt_addr_le_copy>
	cfg->id = 0U;
    8e8e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
    8e90:	8125      	strh	r5, [r4, #8]
}
    8e92:	e7ca      	b.n	8e2a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    8e94:	462a      	mov	r2, r5
    8e96:	4641      	mov	r1, r8
    8e98:	4630      	mov	r0, r6
    8e9a:	4798      	blx	r3
		if (write < 0) {
    8e9c:	2800      	cmp	r0, #0
    8e9e:	dbc5      	blt.n	8e2c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    8ea0:	3801      	subs	r0, #1
    8ea2:	2801      	cmp	r0, #1
    8ea4:	d9e1      	bls.n	8e6a <bt_gatt_attr_write_ccc+0x72>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    8ea6:	f06f 000d 	mvn.w	r0, #13
    8eaa:	e7bf      	b.n	8e2c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    8eac:	f06f 0006 	mvn.w	r0, #6
    8eb0:	e7bc      	b.n	8e2c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    8eb2:	f06f 000c 	mvn.w	r0, #12
    8eb6:	e7b9      	b.n	8e2c <bt_gatt_attr_write_ccc+0x34>
    8eb8:	00020e00 	.word	0x00020e00
    8ebc:	00020ed8 	.word	0x00020ed8
    8ec0:	00024177 	.word	0x00024177

00008ec4 <find_sc_cfg>:
{
    8ec4:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    8ec6:	4c0e      	ldr	r4, [pc, #56]	; (8f00 <find_sc_cfg+0x3c>)
    8ec8:	7823      	ldrb	r3, [r4, #0]
    8eca:	4283      	cmp	r3, r0
{
    8ecc:	4605      	mov	r5, r0
    8ece:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    8ed0:	d00a      	beq.n	8ee8 <find_sc_cfg+0x24>
    8ed2:	7b23      	ldrb	r3, [r4, #12]
    8ed4:	42ab      	cmp	r3, r5
    8ed6:	d111      	bne.n	8efc <find_sc_cfg+0x38>
    8ed8:	480a      	ldr	r0, [pc, #40]	; (8f04 <find_sc_cfg+0x40>)
    8eda:	2207      	movs	r2, #7
    8edc:	4631      	mov	r1, r6
    8ede:	f014 fd84 	bl	1d9ea <memcmp>
    8ee2:	b958      	cbnz	r0, 8efc <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    8ee4:	2001      	movs	r0, #1
    8ee6:	e005      	b.n	8ef4 <find_sc_cfg+0x30>
    8ee8:	2207      	movs	r2, #7
    8eea:	1c60      	adds	r0, r4, #1
    8eec:	f014 fd7d 	bl	1d9ea <memcmp>
		if (id == sc_cfg[i].id &&
    8ef0:	2800      	cmp	r0, #0
    8ef2:	d1ee      	bne.n	8ed2 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    8ef4:	230c      	movs	r3, #12
    8ef6:	fb03 4000 	mla	r0, r3, r0, r4
    8efa:	e000      	b.n	8efe <find_sc_cfg+0x3a>
	return NULL;
    8efc:	2000      	movs	r0, #0
}
    8efe:	bd70      	pop	{r4, r5, r6, pc}
    8f00:	200028ec 	.word	0x200028ec
    8f04:	200028f9 	.word	0x200028f9

00008f08 <sc_save>:
{
    8f08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8f0c:	4680      	mov	r8, r0
    8f0e:	460f      	mov	r7, r1
    8f10:	4616      	mov	r6, r2
    8f12:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    8f14:	f7ff ffd6 	bl	8ec4 <find_sc_cfg>
	if (!cfg) {
    8f18:	4604      	mov	r4, r0
    8f1a:	b9c8      	cbnz	r0, 8f50 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    8f1c:	4669      	mov	r1, sp
    8f1e:	9000      	str	r0, [sp, #0]
    8f20:	f8cd 0003 	str.w	r0, [sp, #3]
    8f24:	f7ff ffce 	bl	8ec4 <find_sc_cfg>
		if (!cfg) {
    8f28:	4604      	mov	r4, r0
    8f2a:	b960      	cbnz	r0, 8f46 <sc_save+0x3e>
    8f2c:	490f      	ldr	r1, [pc, #60]	; (8f6c <sc_save+0x64>)
    8f2e:	4b10      	ldr	r3, [pc, #64]	; (8f70 <sc_save+0x68>)
			BT_ERR("unable to save SC: no cfg left");
    8f30:	4810      	ldr	r0, [pc, #64]	; (8f74 <sc_save+0x6c>)
    8f32:	1ac9      	subs	r1, r1, r3
    8f34:	08c9      	lsrs	r1, r1, #3
    8f36:	0189      	lsls	r1, r1, #6
    8f38:	f041 0101 	orr.w	r1, r1, #1
    8f3c:	f013 f859 	bl	1bff2 <log_0>
}
    8f40:	b002      	add	sp, #8
    8f42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    8f46:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    8f4a:	4639      	mov	r1, r7
    8f4c:	f015 ffda 	bl	1ef04 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    8f50:	8922      	ldrh	r2, [r4, #8]
    8f52:	8963      	ldrh	r3, [r4, #10]
    8f54:	b91a      	cbnz	r2, 8f5e <sc_save+0x56>
    8f56:	b923      	cbnz	r3, 8f62 <sc_save+0x5a>
		cfg->data.start = start;
    8f58:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    8f5a:	8165      	strh	r5, [r4, #10]
    8f5c:	e7f0      	b.n	8f40 <sc_save+0x38>
	if (new_start >= *start && new_end <= *end) {
    8f5e:	4296      	cmp	r6, r2
    8f60:	d302      	bcc.n	8f68 <sc_save+0x60>
    8f62:	429d      	cmp	r5, r3
    8f64:	d9ec      	bls.n	8f40 <sc_save+0x38>
    8f66:	e7f8      	b.n	8f5a <sc_save+0x52>
		*start = new_start;
    8f68:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    8f6a:	e7fa      	b.n	8f62 <sc_save+0x5a>
    8f6c:	00020ed8 	.word	0x00020ed8
    8f70:	00020e00 	.word	0x00020e00
    8f74:	00024191 	.word	0x00024191

00008f78 <disconnected_cb>:
	return BT_GATT_ITER_CONTINUE;
}

static uint8_t disconnected_cb(const struct bt_gatt_attr *attr, uint16_t handle,
			       void *user_data)
{
    8f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct _bt_gatt_ccc *ccc;
	bool value_used;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    8f7c:	4b2b      	ldr	r3, [pc, #172]	; (902c <disconnected_cb+0xb4>)
{
    8f7e:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    8f80:	6882      	ldr	r2, [r0, #8]
    8f82:	429a      	cmp	r2, r3
{
    8f84:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    8f86:	d12f      	bne.n	8fe8 <disconnected_cb+0x70>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    8f88:	68c5      	ldr	r5, [r0, #12]

	/* If already disabled skip */
	if (!ccc->value) {
    8f8a:	8aab      	ldrh	r3, [r5, #20]
    8f8c:	b363      	cbz	r3, 8fe8 <disconnected_cb+0x70>
				bt_conn_unref(tmp);
			}
		} else {
			/* Clear value if not paired */
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
				if (ccc == &sc_ccc) {
    8f8e:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 9030 <disconnected_cb+0xb8>
    8f92:	1c6c      	adds	r4, r5, #1
    8f94:	f105 0a15 	add.w	sl, r5, #21
	value_used = false;
    8f98:	f04f 0800 	mov.w	r8, #0
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8f9c:	f106 0988 	add.w	r9, r6, #136	; 0x88
		if (!cfg->value) {
    8fa0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    8fa4:	b19b      	cbz	r3, 8fce <disconnected_cb+0x56>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    8fa6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
    8faa:	4622      	mov	r2, r4
    8fac:	4630      	mov	r0, r6
    8fae:	f015 fa14 	bl	1e3da <bt_conn_is_peer_addr_le>
    8fb2:	b9e8      	cbnz	r0, 8ff0 <disconnected_cb+0x78>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    8fb4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    8fb8:	4621      	mov	r1, r4
    8fba:	f7fe fadb 	bl	7574 <bt_conn_lookup_addr_le>
			if (tmp) {
    8fbe:	b130      	cbz	r0, 8fce <disconnected_cb+0x56>
				if (tmp->state == BT_CONN_CONNECTED) {
    8fc0:	7b43      	ldrb	r3, [r0, #13]
					value_used = true;
    8fc2:	2b07      	cmp	r3, #7
    8fc4:	bf08      	it	eq
    8fc6:	f04f 0801 	moveq.w	r8, #1
				bt_conn_unref(tmp);
    8fca:	f015 f96b 	bl	1e2a4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    8fce:	340a      	adds	r4, #10
    8fd0:	4554      	cmp	r4, sl
    8fd2:	d1e5      	bne.n	8fa0 <disconnected_cb+0x28>
			}
		}
	}

	/* If all values are now disabled, reset value while disconnected */
	if (!value_used) {
    8fd4:	f1b8 0f00 	cmp.w	r8, #0
    8fd8:	d106      	bne.n	8fe8 <disconnected_cb+0x70>
		ccc->value = 0U;
		if (ccc->cfg_changed) {
    8fda:	69ab      	ldr	r3, [r5, #24]
		ccc->value = 0U;
    8fdc:	f8a5 8014 	strh.w	r8, [r5, #20]
		if (ccc->cfg_changed) {
    8fe0:	b113      	cbz	r3, 8fe8 <disconnected_cb+0x70>
			ccc->cfg_changed(attr, ccc->value);
    8fe2:	4641      	mov	r1, r8
    8fe4:	4638      	mov	r0, r7
    8fe6:	4798      	blx	r3

		BT_DBG("ccc %p reseted", ccc);
	}

	return BT_GATT_ITER_CONTINUE;
}
    8fe8:	2001      	movs	r0, #1
    8fea:	b003      	add	sp, #12
    8fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    8ff0:	7a30      	ldrb	r0, [r6, #8]
    8ff2:	4649      	mov	r1, r9
    8ff4:	f014 ff16 	bl	1de24 <bt_addr_le_is_bonded>
    8ff8:	b990      	cbnz	r0, 9020 <disconnected_cb+0xa8>
				if (ccc == &sc_ccc) {
    8ffa:	455d      	cmp	r5, fp
    8ffc:	d102      	bne.n	9004 <disconnected_cb+0x8c>
					sc_clear(conn);
    8ffe:	4630      	mov	r0, r6
    9000:	f016 f91d 	bl	1f23e <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
    9004:	2300      	movs	r3, #0
    9006:	4669      	mov	r1, sp
    9008:	4620      	mov	r0, r4
    900a:	9300      	str	r3, [sp, #0]
    900c:	f8cd 3003 	str.w	r3, [sp, #3]
    9010:	f015 ff78 	bl	1ef04 <bt_addr_le_copy>
	cfg->id = 0U;
    9014:	2300      	movs	r3, #0
    9016:	f804 3c01 	strb.w	r3, [r4, #-1]
	cfg->value = 0U;
    901a:	f8a4 3007 	strh.w	r3, [r4, #7]
}
    901e:	e7d6      	b.n	8fce <disconnected_cb+0x56>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9020:	4649      	mov	r1, r9
    9022:	4620      	mov	r0, r4
    9024:	f015 ff6e 	bl	1ef04 <bt_addr_le_copy>
    9028:	e7d1      	b.n	8fce <disconnected_cb+0x56>
    902a:	bf00      	nop
    902c:	00008df9 	.word	0x00008df9
    9030:	200002a0 	.word	0x200002a0

00009034 <sc_indicate_rsp>:
{
    9034:	b510      	push	{r4, lr}
    9036:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9038:	4814      	ldr	r0, [pc, #80]	; (908c <sc_indicate_rsp+0x58>)
    903a:	f3bf 8f5b 	dmb	ish
    903e:	f100 0350 	add.w	r3, r0, #80	; 0x50
    9042:	e853 2f00 	ldrex	r2, [r3]
    9046:	f022 0202 	bic.w	r2, r2, #2
    904a:	e843 2100 	strex	r1, r2, [r3]
    904e:	2900      	cmp	r1, #0
    9050:	d1f7      	bne.n	9042 <sc_indicate_rsp+0xe>
    9052:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9056:	f3bf 8f5b 	dmb	ish
    905a:	6d03      	ldr	r3, [r0, #80]	; 0x50
    905c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9060:	07da      	lsls	r2, r3, #31
    9062:	d504      	bpl.n	906e <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
    9064:	2200      	movs	r2, #0
    9066:	2300      	movs	r3, #0
    9068:	3020      	adds	r0, #32
    906a:	f011 fd35 	bl	1aad8 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
    906e:	4620      	mov	r0, r4
    9070:	f7ff fe4a 	bl	8d08 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    9074:	b140      	cbz	r0, 9088 <sc_indicate_rsp+0x54>
    9076:	7a03      	ldrb	r3, [r0, #8]
    9078:	07db      	lsls	r3, r3, #31
    907a:	d505      	bpl.n	9088 <sc_indicate_rsp+0x54>
}
    907c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
    9080:	2100      	movs	r1, #0
    9082:	300c      	adds	r0, #12
    9084:	f015 bfd6 	b.w	1f034 <atomic_set_bit>
}
    9088:	bd10      	pop	{r4, pc}
    908a:	bf00      	nop
    908c:	20000cb8 	.word	0x20000cb8

00009090 <bt_gatt_init>:
{
    9090:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    9092:	4b20      	ldr	r3, [pc, #128]	; (9114 <bt_gatt_init+0x84>)
    9094:	f3bf 8f5b 	dmb	ish
    9098:	2201      	movs	r2, #1
    909a:	e853 1f00 	ldrex	r1, [r3]
    909e:	2900      	cmp	r1, #0
    90a0:	d103      	bne.n	90aa <bt_gatt_init+0x1a>
    90a2:	e843 2000 	strex	r0, r2, [r3]
    90a6:	2800      	cmp	r0, #0
    90a8:	d1f7      	bne.n	909a <bt_gatt_init+0xa>
    90aa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    90ae:	d130      	bne.n	9112 <bt_gatt_init+0x82>
    90b0:	f3bf 8f5b 	dmb	ish
    90b4:	4b18      	ldr	r3, [pc, #96]	; (9118 <bt_gatt_init+0x88>)
    90b6:	e853 1f00 	ldrex	r1, [r3]
    90ba:	2900      	cmp	r1, #0
    90bc:	d103      	bne.n	90c6 <bt_gatt_init+0x36>
    90be:	e843 2000 	strex	r0, r2, [r3]
    90c2:	2800      	cmp	r0, #0
    90c4:	d1f7      	bne.n	90b6 <bt_gatt_init+0x26>
    90c6:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    90ca:	d108      	bne.n	90de <bt_gatt_init+0x4e>
    90cc:	4913      	ldr	r1, [pc, #76]	; (911c <bt_gatt_init+0x8c>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    90ce:	4a14      	ldr	r2, [pc, #80]	; (9120 <bt_gatt_init+0x90>)
    90d0:	880b      	ldrh	r3, [r1, #0]
    90d2:	4c14      	ldr	r4, [pc, #80]	; (9124 <bt_gatt_init+0x94>)
	if (!atomic_cas(&service_init, 0, 1)) {
    90d4:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    90d6:	42a2      	cmp	r2, r4
    90d8:	d315      	bcc.n	9106 <bt_gatt_init+0x76>
    90da:	b100      	cbz	r0, 90de <bt_gatt_init+0x4e>
    90dc:	800b      	strh	r3, [r1, #0]
	list->head = NULL;
    90de:	4b12      	ldr	r3, [pc, #72]	; (9128 <bt_gatt_init+0x98>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
    90e0:	4912      	ldr	r1, [pc, #72]	; (912c <bt_gatt_init+0x9c>)
    90e2:	4813      	ldr	r0, [pc, #76]	; (9130 <bt_gatt_init+0xa0>)
    90e4:	2200      	movs	r2, #0
	list->tail = NULL;
    90e6:	e9c3 2200 	strd	r2, r2, [r3]
    90ea:	f017 f9bb 	bl	20464 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
    90ee:	4810      	ldr	r0, [pc, #64]	; (9130 <bt_gatt_init+0xa0>)
    90f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    90f4:	2300      	movs	r3, #0
    90f6:	f011 fcbb 	bl	1aa70 <k_work_schedule>
}
    90fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
    90fe:	490d      	ldr	r1, [pc, #52]	; (9134 <bt_gatt_init+0xa4>)
    9100:	480d      	ldr	r0, [pc, #52]	; (9138 <bt_gatt_init+0xa8>)
    9102:	f017 b9af 	b.w	20464 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
    9106:	6850      	ldr	r0, [r2, #4]
    9108:	4403      	add	r3, r0
    910a:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    910c:	3208      	adds	r2, #8
    910e:	2001      	movs	r0, #1
    9110:	e7e1      	b.n	90d6 <bt_gatt_init+0x46>
}
    9112:	bd10      	pop	{r4, pc}
    9114:	200015bc 	.word	0x200015bc
    9118:	200015d8 	.word	0x200015d8
    911c:	200028ea 	.word	0x200028ea
    9120:	00020de0 	.word	0x00020de0
    9124:	00020e00 	.word	0x00020e00
    9128:	20001594 	.word	0x20001594
    912c:	0001f365 	.word	0x0001f365
    9130:	20000c60 	.word	0x20000c60
    9134:	000094dd 	.word	0x000094dd
    9138:	20000cd8 	.word	0x20000cd8

0000913c <bt_gatt_cb_register>:
	parent->next = child;
    913c:	2300      	movs	r3, #0
    913e:	6043      	str	r3, [r0, #4]
	return list->tail;
    9140:	4b04      	ldr	r3, [pc, #16]	; (9154 <bt_gatt_cb_register+0x18>)
    9142:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
    9144:	1d02      	adds	r2, r0, #4
Z_GENLIST_APPEND(slist, snode)
    9146:	b911      	cbnz	r1, 914e <bt_gatt_cb_register+0x12>
	list->head = node;
    9148:	e9c3 2200 	strd	r2, r2, [r3]
}
    914c:	4770      	bx	lr
	parent->next = child;
    914e:	600a      	str	r2, [r1, #0]
	list->tail = node;
    9150:	605a      	str	r2, [r3, #4]
}
    9152:	4770      	bx	lr
    9154:	20001594 	.word	0x20001594

00009158 <bt_gatt_attr_get_handle>:
{
    9158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    915c:	4603      	mov	r3, r0
    915e:	b148      	cbz	r0, 9174 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    9160:	8a00      	ldrh	r0, [r0, #16]
    9162:	b938      	cbnz	r0, 9174 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9164:	4912      	ldr	r1, [pc, #72]	; (91b0 <bt_gatt_attr_get_handle+0x58>)
    9166:	f8df e04c 	ldr.w	lr, [pc, #76]	; 91b4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    916a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    916c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9170:	4571      	cmp	r1, lr
    9172:	d301      	bcc.n	9178 <bt_gatt_attr_get_handle+0x20>
}
    9174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9178:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    917c:	42bb      	cmp	r3, r7
    917e:	d304      	bcc.n	918a <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9180:	fb0c 7206 	mla	r2, ip, r6, r7
    9184:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    9186:	4293      	cmp	r3, r2
    9188:	d90e      	bls.n	91a8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    918a:	19a2      	adds	r2, r4, r6
    918c:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    918e:	3108      	adds	r1, #8
    9190:	4614      	mov	r4, r2
    9192:	e7ed      	b.n	9170 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    9194:	fb0c 7805 	mla	r8, ip, r5, r7
    9198:	4543      	cmp	r3, r8
    919a:	d007      	beq.n	91ac <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    919c:	3501      	adds	r5, #1
    919e:	1962      	adds	r2, r4, r5
    91a0:	42b5      	cmp	r5, r6
    91a2:	b292      	uxth	r2, r2
    91a4:	d1f6      	bne.n	9194 <bt_gatt_attr_get_handle+0x3c>
    91a6:	e7f2      	b.n	918e <bt_gatt_attr_get_handle+0x36>
    91a8:	2500      	movs	r5, #0
    91aa:	e7f8      	b.n	919e <bt_gatt_attr_get_handle+0x46>
    91ac:	4610      	mov	r0, r2
    91ae:	e7e1      	b.n	9174 <bt_gatt_attr_get_handle+0x1c>
    91b0:	00020de0 	.word	0x00020de0
    91b4:	00020e00 	.word	0x00020e00

000091b8 <bt_gatt_foreach_attr_type>:
{
    91b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91bc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    91c0:	9100      	str	r1, [sp, #0]
    91c2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    91c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    91c8:	2d00      	cmp	r5, #0
    91ca:	bf08      	it	eq
    91cc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    91ce:	4b24      	ldr	r3, [pc, #144]	; (9260 <bt_gatt_foreach_attr_type+0xa8>)
    91d0:	881b      	ldrh	r3, [r3, #0]
    91d2:	4283      	cmp	r3, r0
{
    91d4:	4607      	mov	r7, r0
    91d6:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    91d8:	d23c      	bcs.n	9254 <bt_gatt_foreach_attr_type+0x9c>
}
    91da:	b003      	add	sp, #12
    91dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    91e0:	6873      	ldr	r3, [r6, #4]
    91e2:	4423      	add	r3, r4
    91e4:	42bb      	cmp	r3, r7
    91e6:	d232      	bcs.n	924e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    91e8:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    91ea:	3608      	adds	r6, #8
    91ec:	4b1d      	ldr	r3, [pc, #116]	; (9264 <bt_gatt_foreach_attr_type+0xac>)
    91ee:	429e      	cmp	r6, r3
    91f0:	d3f6      	bcc.n	91e0 <bt_gatt_foreach_attr_type+0x28>
    91f2:	e7f2      	b.n	91da <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    91f4:	5889      	ldr	r1, [r1, r2]
    91f6:	9301      	str	r3, [sp, #4]
    91f8:	4640      	mov	r0, r8
    91fa:	f014 fcc5 	bl	1db88 <bt_uuid_cmp>
    91fe:	9b01      	ldr	r3, [sp, #4]
    9200:	b190      	cbz	r0, 9228 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    9202:	3401      	adds	r4, #1
    9204:	f10a 0a01 	add.w	sl, sl, #1
    9208:	b2a4      	uxth	r4, r4
    920a:	6873      	ldr	r3, [r6, #4]
    920c:	4553      	cmp	r3, sl
    920e:	d9ec      	bls.n	91ea <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    9210:	9b00      	ldr	r3, [sp, #0]
    9212:	429c      	cmp	r4, r3
    9214:	d8e1      	bhi.n	91da <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    9216:	42bc      	cmp	r4, r7
    9218:	d3f3      	bcc.n	9202 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    921a:	6831      	ldr	r1, [r6, #0]
    921c:	fb0b f20a 	mul.w	r2, fp, sl
    9220:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9222:	f1b8 0f00 	cmp.w	r8, #0
    9226:	d1e5      	bne.n	91f4 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    9228:	f1b9 0f00 	cmp.w	r9, #0
    922c:	d10b      	bne.n	9246 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    922e:	3d01      	subs	r5, #1
    9230:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    9232:	4618      	mov	r0, r3
    9234:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9236:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9238:	4621      	mov	r1, r4
    923a:	4798      	blx	r3
	if (!*num_matches) {
    923c:	2d00      	cmp	r5, #0
    923e:	d0cc      	beq.n	91da <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9240:	2800      	cmp	r0, #0
    9242:	d1de      	bne.n	9202 <bt_gatt_foreach_attr_type+0x4a>
    9244:	e7c9      	b.n	91da <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    9246:	68da      	ldr	r2, [r3, #12]
    9248:	4591      	cmp	r9, r2
    924a:	d1da      	bne.n	9202 <bt_gatt_foreach_attr_type+0x4a>
    924c:	e7ef      	b.n	922e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    924e:	f04f 0a00 	mov.w	sl, #0
    9252:	e7da      	b.n	920a <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9254:	4e04      	ldr	r6, [pc, #16]	; (9268 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    9256:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9258:	f04f 0b14 	mov.w	fp, #20
    925c:	e7c6      	b.n	91ec <bt_gatt_foreach_attr_type+0x34>
    925e:	bf00      	nop
    9260:	200028ea 	.word	0x200028ea
    9264:	00020e00 	.word	0x00020e00
    9268:	00020de0 	.word	0x00020de0

0000926c <db_hash_gen.constprop.0>:
static void db_hash_gen(bool store)
    926c:	b510      	push	{r4, lr}
    926e:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
    9270:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9272:	aa1c      	add	r2, sp, #112	; 0x70
    9274:	4669      	mov	r1, sp
    9276:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    9278:	e9cd 4400 	strd	r4, r4, [sp]
    927c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    9280:	f014 faa1 	bl	1d7c6 <tc_cmac_setup>
    9284:	b958      	cbnz	r0, 929e <db_hash_gen.constprop.0+0x32>
    9286:	491d      	ldr	r1, [pc, #116]	; (92fc <db_hash_gen.constprop.0+0x90>)
    9288:	4b1d      	ldr	r3, [pc, #116]	; (9300 <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to setup AES CMAC");
    928a:	481e      	ldr	r0, [pc, #120]	; (9304 <db_hash_gen.constprop.0+0x98>)
    928c:	1ac9      	subs	r1, r1, r3
    928e:	08c9      	lsrs	r1, r1, #3
    9290:	0189      	lsls	r1, r1, #6
    9292:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    9296:	f012 feac 	bl	1bff2 <log_0>
}
    929a:	b048      	add	sp, #288	; 0x120
    929c:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    929e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    92a2:	2001      	movs	r0, #1
    92a4:	4a18      	ldr	r2, [pc, #96]	; (9308 <db_hash_gen.constprop.0+0x9c>)
    92a6:	ab04      	add	r3, sp, #16
    92a8:	f016 f851 	bl	1f34e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
    92ac:	4817      	ldr	r0, [pc, #92]	; (930c <db_hash_gen.constprop.0+0xa0>)
    92ae:	a904      	add	r1, sp, #16
    92b0:	f014 fb1f 	bl	1d8f2 <tc_cmac_final>
    92b4:	b940      	cbnz	r0, 92c8 <db_hash_gen.constprop.0+0x5c>
    92b6:	4911      	ldr	r1, [pc, #68]	; (92fc <db_hash_gen.constprop.0+0x90>)
    92b8:	4b11      	ldr	r3, [pc, #68]	; (9300 <db_hash_gen.constprop.0+0x94>)
		BT_ERR("Unable to calculate hash");
    92ba:	4815      	ldr	r0, [pc, #84]	; (9310 <db_hash_gen.constprop.0+0xa4>)
    92bc:	1ac9      	subs	r1, r1, r3
    92be:	08c9      	lsrs	r1, r1, #3
    92c0:	0189      	lsls	r1, r1, #6
    92c2:	f041 0101 	orr.w	r1, r1, #1
    92c6:	e7e6      	b.n	9296 <db_hash_gen.constprop.0+0x2a>
    92c8:	4b10      	ldr	r3, [pc, #64]	; (930c <db_hash_gen.constprop.0+0xa0>)
    92ca:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    92ce:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
    92d0:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    92d2:	7810      	ldrb	r0, [r2, #0]
    92d4:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
    92d8:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
    92da:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
    92de:	d1f6      	bne.n	92ce <db_hash_gen.constprop.0+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    92e0:	f3bf 8f5b 	dmb	ish
    92e4:	4b0b      	ldr	r3, [pc, #44]	; (9314 <db_hash_gen.constprop.0+0xa8>)
    92e6:	e853 2f00 	ldrex	r2, [r3]
    92ea:	f042 0204 	orr.w	r2, r2, #4
    92ee:	e843 2100 	strex	r1, r2, [r3]
    92f2:	2900      	cmp	r1, #0
    92f4:	d1f7      	bne.n	92e6 <db_hash_gen.constprop.0+0x7a>
    92f6:	f3bf 8f5b 	dmb	ish
    92fa:	e7ce      	b.n	929a <db_hash_gen.constprop.0+0x2e>
    92fc:	00020ed8 	.word	0x00020ed8
    9300:	00020e00 	.word	0x00020e00
    9304:	000241b0 	.word	0x000241b0
    9308:	0001ef4f 	.word	0x0001ef4f
    930c:	20000c50 	.word	0x20000c50
    9310:	000241c9 	.word	0x000241c9
    9314:	20000d08 	.word	0x20000d08

00009318 <gatt_indicate>:
{
    9318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    931c:	4615      	mov	r5, r2
    931e:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
    9320:	2214      	movs	r2, #20
    9322:	6869      	ldr	r1, [r5, #4]
{
    9324:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
    9326:	f016 f81f 	bl	1f368 <bt_gatt_check_perm>
    932a:	4607      	mov	r7, r0
    932c:	b170      	cbz	r0, 934c <gatt_indicate+0x34>
    932e:	4b2a      	ldr	r3, [pc, #168]	; (93d8 <gatt_indicate+0xc0>)
    9330:	492a      	ldr	r1, [pc, #168]	; (93dc <gatt_indicate+0xc4>)
		BT_WARN("Link is not encrypted");
    9332:	482b      	ldr	r0, [pc, #172]	; (93e0 <gatt_indicate+0xc8>)
    9334:	1ac9      	subs	r1, r1, r3
    9336:	08c9      	lsrs	r1, r1, #3
    9338:	0189      	lsls	r1, r1, #6
    933a:	f041 0102 	orr.w	r1, r1, #2
    933e:	f012 fe58 	bl	1bff2 <log_0>
		return -EPERM;
    9342:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
    9346:	4628      	mov	r0, r5
    9348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    934c:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9350:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    9352:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    9354:	f7ff fbee 	bl	8b34 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    9358:	3602      	adds	r6, #2
	if (!req) {
    935a:	4604      	mov	r4, r0
    935c:	b910      	cbnz	r0, 9364 <gatt_indicate+0x4c>
		return -ENOMEM;
    935e:	f06f 050b 	mvn.w	r5, #11
    9362:	e7f0      	b.n	9346 <gatt_indicate+0x2e>
	req->func = func;
    9364:	4b1f      	ldr	r3, [pc, #124]	; (93e4 <gatt_indicate+0xcc>)
	req->len = len;
    9366:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    9368:	211d      	movs	r1, #29
    936a:	7441      	strb	r1, [r0, #17]
	req->encode = encode;
    936c:	60c7      	str	r7, [r0, #12]
	req->func = func;
    936e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    9370:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    9372:	4632      	mov	r2, r6
    9374:	4640      	mov	r0, r8
    9376:	f7ff f921 	bl	85bc <bt_att_create_pdu>
	if (!buf) {
    937a:	4606      	mov	r6, r0
    937c:	b968      	cbnz	r0, 939a <gatt_indicate+0x82>
    937e:	4b16      	ldr	r3, [pc, #88]	; (93d8 <gatt_indicate+0xc0>)
    9380:	4916      	ldr	r1, [pc, #88]	; (93dc <gatt_indicate+0xc4>)
		BT_WARN("No buffer available to send indication");
    9382:	4819      	ldr	r0, [pc, #100]	; (93e8 <gatt_indicate+0xd0>)
    9384:	1ac9      	subs	r1, r1, r3
    9386:	08c9      	lsrs	r1, r1, #3
    9388:	0189      	lsls	r1, r1, #6
    938a:	f041 0102 	orr.w	r1, r1, #2
    938e:	f012 fe30 	bl	1bff2 <log_0>
		bt_att_req_free(req);
    9392:	4620      	mov	r0, r4
    9394:	f7ff fbe4 	bl	8b60 <bt_att_req_free>
    9398:	e7e1      	b.n	935e <gatt_indicate+0x46>
	return net_buf_simple_add(&buf->b, len);
    939a:	f100 0a08 	add.w	sl, r0, #8
    939e:	2102      	movs	r1, #2
    93a0:	4650      	mov	r0, sl
    93a2:	f016 fc92 	bl	1fcca <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    93a6:	4607      	mov	r7, r0
    93a8:	8aa9      	ldrh	r1, [r5, #20]
    93aa:	f827 9b02 	strh.w	r9, [r7], #2
    93ae:	4650      	mov	r0, sl
    93b0:	f016 fc8b 	bl	1fcca <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    93b4:	8aaa      	ldrh	r2, [r5, #20]
    93b6:	6929      	ldr	r1, [r5, #16]
    93b8:	4638      	mov	r0, r7
    93ba:	f014 fb27 	bl	1da0c <memcpy>
	req->buf = buf;
    93be:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    93c0:	4621      	mov	r1, r4
    93c2:	4640      	mov	r0, r8
    93c4:	f015 fd64 	bl	1ee90 <bt_att_req_send>
	if (err) {
    93c8:	4605      	mov	r5, r0
    93ca:	2800      	cmp	r0, #0
    93cc:	d0bb      	beq.n	9346 <gatt_indicate+0x2e>
		bt_att_req_free(req);
    93ce:	4620      	mov	r0, r4
    93d0:	f7ff fbc6 	bl	8b60 <bt_att_req_free>
    93d4:	e7b7      	b.n	9346 <gatt_indicate+0x2e>
    93d6:	bf00      	nop
    93d8:	00020e00 	.word	0x00020e00
    93dc:	00020ed8 	.word	0x00020ed8
    93e0:	000241e2 	.word	0x000241e2
    93e4:	0001eed7 	.word	0x0001eed7
    93e8:	000241f8 	.word	0x000241f8

000093ec <bt_gatt_indicate>:
{
    93ec:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    93ee:	4b38      	ldr	r3, [pc, #224]	; (94d0 <bt_gatt_indicate+0xe4>)
    93f0:	f3bf 8f5b 	dmb	ish
    93f4:	681b      	ldr	r3, [r3, #0]
    93f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    93fa:	079a      	lsls	r2, r3, #30
{
    93fc:	b08b      	sub	sp, #44	; 0x2c
    93fe:	4604      	mov	r4, r0
    9400:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9402:	d55f      	bpl.n	94c4 <bt_gatt_indicate+0xd8>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9404:	b110      	cbz	r0, 940c <bt_gatt_indicate+0x20>
    9406:	7b43      	ldrb	r3, [r0, #13]
    9408:	2b07      	cmp	r3, #7
    940a:	d15e      	bne.n	94ca <bt_gatt_indicate+0xde>
	data.attr = params->attr;
    940c:	6868      	ldr	r0, [r5, #4]
    940e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9410:	f7ff fea2 	bl	9158 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    9414:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9416:	f8ad 0018 	strh.w	r0, [sp, #24]
    941a:	4603      	mov	r3, r0
	if (params->uuid) {
    941c:	b162      	cbz	r2, 9438 <bt_gatt_indicate+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    941e:	a905      	add	r1, sp, #20
    9420:	9102      	str	r1, [sp, #8]
    9422:	492c      	ldr	r1, [pc, #176]	; (94d4 <bt_gatt_indicate+0xe8>)
    9424:	9101      	str	r1, [sp, #4]
    9426:	2101      	movs	r1, #1
	found->attr = NULL;
    9428:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    942a:	9100      	str	r1, [sp, #0]
    942c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9430:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9432:	f7ff fec1 	bl	91b8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9436:	9b05      	ldr	r3, [sp, #20]
    9438:	b1bb      	cbz	r3, 946a <bt_gatt_indicate+0x7e>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    943a:	9b05      	ldr	r3, [sp, #20]
    943c:	6818      	ldr	r0, [r3, #0]
    943e:	2300      	movs	r3, #0
    9440:	f88d 3010 	strb.w	r3, [sp, #16]
    9444:	a904      	add	r1, sp, #16
    9446:	f642 0303 	movw	r3, #10243	; 0x2803
    944a:	f8ad 3012 	strh.w	r3, [sp, #18]
    944e:	f014 fb9b 	bl	1db88 <bt_uuid_cmp>
    9452:	b170      	cbz	r0, 9472 <bt_gatt_indicate+0x86>
		return gatt_indicate(conn, data.handle, params);
    9454:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9458:	b1c4      	cbz	r4, 948c <bt_gatt_indicate+0xa0>
		params->_ref = 1;
    945a:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    945c:	4601      	mov	r1, r0
		params->_ref = 1;
    945e:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    9460:	462a      	mov	r2, r5
    9462:	4620      	mov	r0, r4
    9464:	f7ff ff58 	bl	9318 <gatt_indicate>
    9468:	e001      	b.n	946e <bt_gatt_indicate+0x82>
			return -ENOENT;
    946a:	f06f 0001 	mvn.w	r0, #1
}
    946e:	b00b      	add	sp, #44	; 0x2c
    9470:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9472:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9474:	68c3      	ldr	r3, [r0, #12]
    9476:	799b      	ldrb	r3, [r3, #6]
    9478:	069b      	lsls	r3, r3, #26
    947a:	d402      	bmi.n	9482 <bt_gatt_indicate+0x96>
			return -EINVAL;
    947c:	f06f 0015 	mvn.w	r0, #21
    9480:	e7f5      	b.n	946e <bt_gatt_indicate+0x82>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9482:	f015 ff16 	bl	1f2b2 <bt_gatt_attr_value_handle>
    9486:	f8ad 0018 	strh.w	r0, [sp, #24]
    948a:	e7e3      	b.n	9454 <bt_gatt_indicate+0x68>
	data.err = -ENOTCONN;
    948c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9490:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9492:	2302      	movs	r3, #2
    9494:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9498:	f642 1302 	movw	r3, #10498	; 0x2902
    949c:	f8ad 3012 	strh.w	r3, [sp, #18]
    94a0:	ab05      	add	r3, sp, #20
    94a2:	9302      	str	r3, [sp, #8]
    94a4:	4b0c      	ldr	r3, [pc, #48]	; (94d8 <bt_gatt_indicate+0xec>)
    94a6:	9301      	str	r3, [sp, #4]
    94a8:	2301      	movs	r3, #1
    94aa:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    94ac:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    94ae:	4623      	mov	r3, r4
    94b0:	aa04      	add	r2, sp, #16
    94b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    94b6:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    94b8:	f88d 4010 	strb.w	r4, [sp, #16]
    94bc:	f7ff fe7c 	bl	91b8 <bt_gatt_foreach_attr_type>
	return data.err;
    94c0:	9807      	ldr	r0, [sp, #28]
    94c2:	e7d4      	b.n	946e <bt_gatt_indicate+0x82>
		return -EAGAIN;
    94c4:	f06f 000a 	mvn.w	r0, #10
    94c8:	e7d1      	b.n	946e <bt_gatt_indicate+0x82>
		return -ENOTCONN;
    94ca:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    94ce:	e7ce      	b.n	946e <bt_gatt_indicate+0x82>
    94d0:	20000098 	.word	0x20000098
    94d4:	0001eefd 	.word	0x0001eefd
    94d8:	000096d5 	.word	0x000096d5

000094dc <sc_process>:
{
    94dc:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    94de:	f830 2c08 	ldrh.w	r2, [r0, #-8]
    94e2:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    94e6:	f830 2c06 	ldrh.w	r2, [r0, #-6]
    94ea:	f8ad 2006 	strh.w	r2, [sp, #6]
{
    94ee:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    94f0:	f1a0 0120 	sub.w	r1, r0, #32
    94f4:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    94f8:	f3bf 8f5b 	dmb	ish
    94fc:	e854 2f00 	ldrex	r2, [r4]
    9500:	f022 0201 	bic.w	r2, r2, #1
    9504:	e844 2000 	strex	r0, r2, [r4]
    9508:	2800      	cmp	r0, #0
    950a:	d1f7      	bne.n	94fc <sc_process+0x20>
    950c:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9510:	4a0c      	ldr	r2, [pc, #48]	; (9544 <sc_process+0x68>)
    9512:	f843 2c1c 	str.w	r2, [r3, #-28]
	sc->params.func = sc_indicate_rsp;
    9516:	4a0c      	ldr	r2, [pc, #48]	; (9548 <sc_process+0x6c>)
    9518:	f843 2c18 	str.w	r2, [r3, #-24]
	sc->params.data = &sc_range[0];
    951c:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    951e:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    9520:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.len = sizeof(sc_range);
    9524:	2204      	movs	r2, #4
	sc->start = 0U;
    9526:	f823 0c08 	strh.w	r0, [r3, #-8]
	sc->end = 0U;
    952a:	f823 0c06 	strh.w	r0, [r3, #-6]
	sc->params.len = sizeof(sc_range);
    952e:	f823 2c0c 	strh.w	r2, [r3, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9532:	f7ff ff5b 	bl	93ec <bt_gatt_indicate>
    9536:	b918      	cbnz	r0, 9540 <sc_process+0x64>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
    9538:	2101      	movs	r1, #1
    953a:	4620      	mov	r0, r4
    953c:	f015 fd7a 	bl	1f034 <atomic_set_bit>
}
    9540:	b002      	add	sp, #8
    9542:	bd10      	pop	{r4, pc}
    9544:	00021630 	.word	0x00021630
    9548:	00009035 	.word	0x00009035

0000954c <gatt_notify>:
{
    954c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9550:	4614      	mov	r4, r2
    9552:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
    9554:	2214      	movs	r2, #20
    9556:	6861      	ldr	r1, [r4, #4]
{
    9558:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
    955a:	f015 ff05 	bl	1f368 <bt_gatt_check_perm>
    955e:	b168      	cbz	r0, 957c <gatt_notify+0x30>
    9560:	4b1e      	ldr	r3, [pc, #120]	; (95dc <gatt_notify+0x90>)
    9562:	491f      	ldr	r1, [pc, #124]	; (95e0 <gatt_notify+0x94>)
		BT_WARN("Link is not encrypted");
    9564:	481f      	ldr	r0, [pc, #124]	; (95e4 <gatt_notify+0x98>)
    9566:	1ac9      	subs	r1, r1, r3
    9568:	08c9      	lsrs	r1, r1, #3
    956a:	0189      	lsls	r1, r1, #6
    956c:	f041 0102 	orr.w	r1, r1, #2
    9570:	f012 fd3f 	bl	1bff2 <log_0>
		return -EPERM;
    9574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
    957c:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    957e:	211b      	movs	r1, #27
    9580:	3202      	adds	r2, #2
    9582:	4638      	mov	r0, r7
    9584:	f7ff f81a 	bl	85bc <bt_att_create_pdu>
	if (!buf) {
    9588:	4605      	mov	r5, r0
    958a:	b960      	cbnz	r0, 95a6 <gatt_notify+0x5a>
    958c:	4b13      	ldr	r3, [pc, #76]	; (95dc <gatt_notify+0x90>)
    958e:	4914      	ldr	r1, [pc, #80]	; (95e0 <gatt_notify+0x94>)
		BT_WARN("No buffer available to send notification");
    9590:	4815      	ldr	r0, [pc, #84]	; (95e8 <gatt_notify+0x9c>)
    9592:	1ac9      	subs	r1, r1, r3
    9594:	08c9      	lsrs	r1, r1, #3
    9596:	0189      	lsls	r1, r1, #6
    9598:	f041 0102 	orr.w	r1, r1, #2
    959c:	f012 fd29 	bl	1bff2 <log_0>
		return -ENOMEM;
    95a0:	f06f 000b 	mvn.w	r0, #11
    95a4:	e7e8      	b.n	9578 <gatt_notify+0x2c>
    95a6:	f100 0908 	add.w	r9, r0, #8
    95aa:	2102      	movs	r1, #2
    95ac:	4648      	mov	r0, r9
    95ae:	f016 fb8c 	bl	1fcca <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    95b2:	4606      	mov	r6, r0
    95b4:	89a1      	ldrh	r1, [r4, #12]
    95b6:	f826 8b02 	strh.w	r8, [r6], #2
    95ba:	4648      	mov	r0, r9
    95bc:	f016 fb85 	bl	1fcca <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    95c0:	89a2      	ldrh	r2, [r4, #12]
    95c2:	68a1      	ldr	r1, [r4, #8]
    95c4:	4630      	mov	r0, r6
    95c6:	f014 fa21 	bl	1da0c <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    95ca:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    95ce:	4629      	mov	r1, r5
    95d0:	4638      	mov	r0, r7
}
    95d2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    95d6:	f015 bc10 	b.w	1edfa <bt_att_send>
    95da:	bf00      	nop
    95dc:	00020e00 	.word	0x00020e00
    95e0:	00020ed8 	.word	0x00020ed8
    95e4:	000241e2 	.word	0x000241e2
    95e8:	0002421f 	.word	0x0002421f

000095ec <bt_gatt_notify_cb>:
{
    95ec:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    95ee:	4b36      	ldr	r3, [pc, #216]	; (96c8 <bt_gatt_notify_cb+0xdc>)
    95f0:	f3bf 8f5b 	dmb	ish
    95f4:	681b      	ldr	r3, [r3, #0]
    95f6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    95fa:	079a      	lsls	r2, r3, #30
{
    95fc:	b08b      	sub	sp, #44	; 0x2c
    95fe:	4604      	mov	r4, r0
    9600:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9602:	d55b      	bpl.n	96bc <bt_gatt_notify_cb+0xd0>
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9604:	b110      	cbz	r0, 960c <bt_gatt_notify_cb+0x20>
    9606:	7b43      	ldrb	r3, [r0, #13]
    9608:	2b07      	cmp	r3, #7
    960a:	d15a      	bne.n	96c2 <bt_gatt_notify_cb+0xd6>
	data.attr = params->attr;
    960c:	6868      	ldr	r0, [r5, #4]
    960e:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9610:	f7ff fda2 	bl	9158 <bt_gatt_attr_get_handle>
	if (params->uuid) {
    9614:	682a      	ldr	r2, [r5, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9616:	f8ad 0018 	strh.w	r0, [sp, #24]
    961a:	4603      	mov	r3, r0
	if (params->uuid) {
    961c:	b162      	cbz	r2, 9638 <bt_gatt_notify_cb+0x4c>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    961e:	a905      	add	r1, sp, #20
    9620:	9102      	str	r1, [sp, #8]
    9622:	492a      	ldr	r1, [pc, #168]	; (96cc <bt_gatt_notify_cb+0xe0>)
    9624:	9101      	str	r1, [sp, #4]
    9626:	2101      	movs	r1, #1
	found->attr = NULL;
    9628:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    962a:	9100      	str	r1, [sp, #0]
    962c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9630:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9632:	f7ff fdc1 	bl	91b8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9636:	9b05      	ldr	r3, [sp, #20]
    9638:	b1ab      	cbz	r3, 9666 <bt_gatt_notify_cb+0x7a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    963a:	9b05      	ldr	r3, [sp, #20]
    963c:	6818      	ldr	r0, [r3, #0]
    963e:	2300      	movs	r3, #0
    9640:	f88d 3010 	strb.w	r3, [sp, #16]
    9644:	a904      	add	r1, sp, #16
    9646:	f642 0303 	movw	r3, #10243	; 0x2803
    964a:	f8ad 3012 	strh.w	r3, [sp, #18]
    964e:	f014 fa9b 	bl	1db88 <bt_uuid_cmp>
    9652:	b160      	cbz	r0, 966e <bt_gatt_notify_cb+0x82>
		return gatt_notify(conn, data.handle, params);
    9654:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    9658:	b1b4      	cbz	r4, 9688 <bt_gatt_notify_cb+0x9c>
		return gatt_notify(conn, data.handle, params);
    965a:	4601      	mov	r1, r0
    965c:	462a      	mov	r2, r5
    965e:	4620      	mov	r0, r4
    9660:	f7ff ff74 	bl	954c <gatt_notify>
    9664:	e001      	b.n	966a <bt_gatt_notify_cb+0x7e>
			return -ENOENT;
    9666:	f06f 0001 	mvn.w	r0, #1
}
    966a:	b00b      	add	sp, #44	; 0x2c
    966c:	bd30      	pop	{r4, r5, pc}
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    966e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    9670:	68c3      	ldr	r3, [r0, #12]
    9672:	799b      	ldrb	r3, [r3, #6]
    9674:	06db      	lsls	r3, r3, #27
    9676:	d402      	bmi.n	967e <bt_gatt_notify_cb+0x92>
			return -EINVAL;
    9678:	f06f 0015 	mvn.w	r0, #21
    967c:	e7f5      	b.n	966a <bt_gatt_notify_cb+0x7e>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    967e:	f015 fe18 	bl	1f2b2 <bt_gatt_attr_value_handle>
    9682:	f8ad 0018 	strh.w	r0, [sp, #24]
    9686:	e7e5      	b.n	9654 <bt_gatt_notify_cb+0x68>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9688:	f642 1202 	movw	r2, #10498	; 0x2902
    968c:	f8ad 2012 	strh.w	r2, [sp, #18]
    9690:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    9692:	f06f 037f 	mvn.w	r3, #127	; 0x7f
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9696:	9202      	str	r2, [sp, #8]
    9698:	4a0d      	ldr	r2, [pc, #52]	; (96d0 <bt_gatt_notify_cb+0xe4>)
	data.err = -ENOTCONN;
    969a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    969c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    969e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    96a2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    96a6:	aa04      	add	r2, sp, #16
    96a8:	4623      	mov	r3, r4
    96aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    96ae:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    96b0:	f88d 4010 	strb.w	r4, [sp, #16]
    96b4:	f7ff fd80 	bl	91b8 <bt_gatt_foreach_attr_type>
	return data.err;
    96b8:	9807      	ldr	r0, [sp, #28]
    96ba:	e7d6      	b.n	966a <bt_gatt_notify_cb+0x7e>
		return -EAGAIN;
    96bc:	f06f 000a 	mvn.w	r0, #10
    96c0:	e7d3      	b.n	966a <bt_gatt_notify_cb+0x7e>
		return -ENOTCONN;
    96c2:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    96c6:	e7d0      	b.n	966a <bt_gatt_notify_cb+0x7e>
    96c8:	20000098 	.word	0x20000098
    96cc:	0001eefd 	.word	0x0001eefd
    96d0:	000096d5 	.word	0x000096d5

000096d4 <notify_cb>:
{
    96d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    96d8:	4b45      	ldr	r3, [pc, #276]	; (97f0 <notify_cb+0x11c>)
{
    96da:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    96dc:	6882      	ldr	r2, [r0, #8]
    96de:	429a      	cmp	r2, r3
{
    96e0:	b085      	sub	sp, #20
    96e2:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    96e4:	d005      	beq.n	96f2 <notify_cb+0x1e>
		return BT_GATT_ITER_CONTINUE;
    96e6:	f04f 0801 	mov.w	r8, #1
}
    96ea:	4640      	mov	r0, r8
    96ec:	b005      	add	sp, #20
    96ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ccc = attr->user_data;
    96f2:	f8d0 900c 	ldr.w	r9, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    96f6:	4b3f      	ldr	r3, [pc, #252]	; (97f4 <notify_cb+0x120>)
    96f8:	4599      	cmp	r9, r3
    96fa:	d022      	beq.n	9742 <notify_cb+0x6e>
    96fc:	4b3e      	ldr	r3, [pc, #248]	; (97f8 <notify_cb+0x124>)
    96fe:	4d3f      	ldr	r5, [pc, #252]	; (97fc <notify_cb+0x128>)
			BT_WARN("Link is not encrypted");
    9700:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 9800 <notify_cb+0x12c>
    9704:	1aed      	subs	r5, r5, r3
    9706:	08ed      	lsrs	r5, r5, #3
    9708:	01ad      	lsls	r5, r5, #6
    970a:	f045 0302 	orr.w	r3, r5, #2
    970e:	f109 0601 	add.w	r6, r9, #1
    9712:	f109 0a15 	add.w	sl, r9, #21
    9716:	9300      	str	r3, [sp, #0]
		if (cfg->value != data->type) {
    9718:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    971c:	89a3      	ldrh	r3, [r4, #12]
    971e:	429a      	cmp	r2, r3
    9720:	d10b      	bne.n	973a <notify_cb+0x66>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9722:	f816 0c01 	ldrb.w	r0, [r6, #-1]
    9726:	4631      	mov	r1, r6
    9728:	f7fd ff24 	bl	7574 <bt_conn_lookup_addr_le>
		if (!conn) {
    972c:	4605      	mov	r5, r0
    972e:	b120      	cbz	r0, 973a <notify_cb+0x66>
		if (conn->state != BT_CONN_CONNECTED) {
    9730:	7b42      	ldrb	r2, [r0, #13]
    9732:	2a07      	cmp	r2, #7
    9734:	d02a      	beq.n	978c <notify_cb+0xb8>
			bt_conn_unref(conn);
    9736:	f014 fdb5 	bl	1e2a4 <bt_conn_unref>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    973a:	360a      	adds	r6, #10
    973c:	4556      	cmp	r6, sl
    973e:	d0d2      	beq.n	96e6 <notify_cb+0x12>
    9740:	e7ea      	b.n	9718 <notify_cb+0x44>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9742:	2600      	movs	r6, #0
    9744:	4d2f      	ldr	r5, [pc, #188]	; (9804 <notify_cb+0x130>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9746:	46b0      	mov	r8, r6
    9748:	2207      	movs	r2, #7
    974a:	a902      	add	r1, sp, #8
    974c:	4628      	mov	r0, r5
    974e:	f8cd 8008 	str.w	r8, [sp, #8]
    9752:	f8cd 800b 	str.w	r8, [sp, #11]
    9756:	f014 f948 	bl	1d9ea <memcmp>
    975a:	b178      	cbz	r0, 977c <notify_cb+0xa8>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    975c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    9760:	2207      	movs	r2, #7
    9762:	4629      	mov	r1, r5
    9764:	f7fd ff4a 	bl	75fc <bt_conn_lookup_state_le>
			if (!conn) {
    9768:	b968      	cbnz	r0, 9786 <notify_cb+0xb2>
				sc = (struct sc_data *)data->ind_params->data;
    976a:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    976c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    9770:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    9772:	4629      	mov	r1, r5
    9774:	8853      	ldrh	r3, [r2, #2]
    9776:	8812      	ldrh	r2, [r2, #0]
    9778:	f7ff fbc6 	bl	8f08 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    977c:	350c      	adds	r5, #12
    977e:	2e00      	cmp	r6, #0
    9780:	d1bc      	bne.n	96fc <notify_cb+0x28>
    9782:	2601      	movs	r6, #1
    9784:	e7e0      	b.n	9748 <notify_cb+0x74>
			bt_conn_unref(conn);
    9786:	f014 fd8d 	bl	1e2a4 <bt_conn_unref>
    978a:	e7f7      	b.n	977c <notify_cb+0xa8>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    978c:	f8d9 2020 	ldr.w	r2, [r9, #32]
    9790:	b122      	cbz	r2, 979c <notify_cb+0xc8>
    9792:	4639      	mov	r1, r7
    9794:	4790      	blx	r2
    9796:	b908      	cbnz	r0, 979c <notify_cb+0xc8>
			bt_conn_unref(conn);
    9798:	4628      	mov	r0, r5
    979a:	e7cc      	b.n	9736 <notify_cb+0x62>
		if (bt_gatt_check_perm(conn, attr,
    979c:	2214      	movs	r2, #20
    979e:	4639      	mov	r1, r7
    97a0:	4628      	mov	r0, r5
    97a2:	f015 fde1 	bl	1f368 <bt_gatt_check_perm>
    97a6:	4680      	mov	r8, r0
    97a8:	b128      	cbz	r0, 97b6 <notify_cb+0xe2>
			BT_WARN("Link is not encrypted");
    97aa:	f8bd 1000 	ldrh.w	r1, [sp]
    97ae:	4658      	mov	r0, fp
    97b0:	f012 fc1f 	bl	1bff2 <log_0>
			continue;
    97b4:	e7c1      	b.n	973a <notify_cb+0x66>
		if (data->type == BT_GATT_CCC_INDICATE) {
    97b6:	89a0      	ldrh	r0, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    97b8:	88a1      	ldrh	r1, [r4, #4]
    97ba:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    97bc:	2802      	cmp	r0, #2
			err = gatt_indicate(conn, data->handle,
    97be:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    97c0:	d111      	bne.n	97e6 <notify_cb+0x112>
			err = gatt_indicate(conn, data->handle,
    97c2:	f7ff fda9 	bl	9318 <gatt_indicate>
			if (err == 0) {
    97c6:	4602      	mov	r2, r0
    97c8:	b918      	cbnz	r0, 97d2 <notify_cb+0xfe>
				data->ind_params->_ref++;
    97ca:	6920      	ldr	r0, [r4, #16]
    97cc:	7d81      	ldrb	r1, [r0, #22]
    97ce:	3101      	adds	r1, #1
    97d0:	7581      	strb	r1, [r0, #22]
		bt_conn_unref(conn);
    97d2:	4628      	mov	r0, r5
    97d4:	9201      	str	r2, [sp, #4]
    97d6:	f014 fd65 	bl	1e2a4 <bt_conn_unref>
		if (err < 0) {
    97da:	9a01      	ldr	r2, [sp, #4]
    97dc:	2a00      	cmp	r2, #0
    97de:	db84      	blt.n	96ea <notify_cb+0x16>
		data->err = 0;
    97e0:	2300      	movs	r3, #0
    97e2:	60a3      	str	r3, [r4, #8]
    97e4:	e7a9      	b.n	973a <notify_cb+0x66>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    97e6:	f7ff feb1 	bl	954c <gatt_notify>
    97ea:	4602      	mov	r2, r0
    97ec:	e7f1      	b.n	97d2 <notify_cb+0xfe>
    97ee:	bf00      	nop
    97f0:	00008df9 	.word	0x00008df9
    97f4:	200002a0 	.word	0x200002a0
    97f8:	00020e00 	.word	0x00020e00
    97fc:	00020ed8 	.word	0x00020ed8
    9800:	000241e2 	.word	0x000241e2
    9804:	200028ed 	.word	0x200028ed

00009808 <update_ccc>:
{
    9808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    980c:	6881      	ldr	r1, [r0, #8]
{
    980e:	4617      	mov	r7, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9810:	4a40      	ldr	r2, [pc, #256]	; (9914 <update_ccc+0x10c>)
    9812:	4291      	cmp	r1, r2
{
    9814:	b085      	sub	sp, #20
    9816:	4682      	mov	sl, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9818:	d178      	bne.n	990c <update_ccc+0x104>
    981a:	4c3f      	ldr	r4, [pc, #252]	; (9918 <update_ccc+0x110>)
    981c:	493f      	ldr	r1, [pc, #252]	; (991c <update_ccc+0x114>)
	ccc = attr->user_data;
    981e:	f8d0 800c 	ldr.w	r8, [r0, #12]
	struct bt_conn *conn = data->conn;
    9822:	683d      	ldr	r5, [r7, #0]
				BT_WARN("CCC %p not writable", attr);
    9824:	f8df b0f8 	ldr.w	fp, [pc, #248]	; 9920 <update_ccc+0x118>
    9828:	1a64      	subs	r4, r4, r1
    982a:	08e4      	lsrs	r4, r4, #3
    982c:	f108 0315 	add.w	r3, r8, #21
    9830:	ea4f 1984 	mov.w	r9, r4, lsl #6
    9834:	f108 0601 	add.w	r6, r8, #1
    9838:	9300      	str	r3, [sp, #0]
    983a:	f049 0902 	orr.w	r9, r9, #2
		if (!cfg->value ||
    983e:	f8b6 2007 	ldrh.w	r2, [r6, #7]
    9842:	b19a      	cbz	r2, 986c <update_ccc+0x64>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9844:	f816 1c01 	ldrb.w	r1, [r6, #-1]
    9848:	4632      	mov	r2, r6
    984a:	4628      	mov	r0, r5
    984c:	f014 fdc5 	bl	1e3da <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    9850:	b160      	cbz	r0, 986c <update_ccc+0x64>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    9852:	222a      	movs	r2, #42	; 0x2a
    9854:	4651      	mov	r1, sl
    9856:	4628      	mov	r0, r5
    9858:	f015 fd86 	bl	1f368 <bt_gatt_check_perm>
		if (err) {
    985c:	b1d8      	cbz	r0, 9896 <update_ccc+0x8e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    985e:	2803      	cmp	r0, #3
    9860:	d109      	bne.n	9876 <update_ccc+0x6e>
				BT_WARN("CCC %p not writable", attr);
    9862:	464a      	mov	r2, r9
    9864:	4651      	mov	r1, sl
    9866:	4658      	mov	r0, fp
    9868:	f012 fbd0 	bl	1c00c <log_1>
	for (i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
    986c:	9b00      	ldr	r3, [sp, #0]
    986e:	360a      	adds	r6, #10
    9870:	429e      	cmp	r6, r3
    9872:	d04b      	beq.n	990c <update_ccc+0x104>
    9874:	e7e3      	b.n	983e <update_ccc+0x36>
				sec = BT_SECURITY_L3;
    9876:	2805      	cmp	r0, #5
    9878:	bf14      	ite	ne
    987a:	2202      	movne	r2, #2
    987c:	2203      	moveq	r2, #3
			    bt_conn_get_security(conn) < sec) {
    987e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    9880:	9201      	str	r2, [sp, #4]
			    bt_conn_get_security(conn) < sec) {
    9882:	f014 fda8 	bl	1e3d6 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    9886:	9a01      	ldr	r2, [sp, #4]
    9888:	4282      	cmp	r2, r0
    988a:	d904      	bls.n	9896 <update_ccc+0x8e>
				if (data->sec < sec) {
    988c:	7939      	ldrb	r1, [r7, #4]
    988e:	4291      	cmp	r1, r2
    9890:	d2ec      	bcs.n	986c <update_ccc+0x64>
					data->sec = sec;
    9892:	713a      	strb	r2, [r7, #4]
    9894:	e7ea      	b.n	986c <update_ccc+0x64>
		gatt_ccc_changed(attr, ccc);
    9896:	4641      	mov	r1, r8
    9898:	4650      	mov	r0, sl
    989a:	f015 fb0e 	bl	1eeba <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    989e:	4b21      	ldr	r3, [pc, #132]	; (9924 <update_ccc+0x11c>)
    98a0:	4598      	cmp	r8, r3
    98a2:	d133      	bne.n	990c <update_ccc+0x104>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    98a4:	7a28      	ldrb	r0, [r5, #8]
    98a6:	f105 0188 	add.w	r1, r5, #136	; 0x88
    98aa:	f7ff fb0b 	bl	8ec4 <find_sc_cfg>
	if (!cfg) {
    98ae:	4606      	mov	r6, r0
    98b0:	b360      	cbz	r0, 990c <update_ccc+0x104>
	if (!(cfg->data.start || cfg->data.end)) {
    98b2:	8902      	ldrh	r2, [r0, #8]
    98b4:	8943      	ldrh	r3, [r0, #10]
    98b6:	ea52 0103 	orrs.w	r1, r2, r3
    98ba:	d027      	beq.n	990c <update_ccc+0x104>
	index = bt_conn_index(conn);
    98bc:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    98be:	f8ad 200c 	strh.w	r2, [sp, #12]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    98c2:	f8ad 300e 	strh.w	r3, [sp, #14]
	index = bt_conn_index(conn);
    98c6:	f7fd fd81 	bl	73cc <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    98ca:	4917      	ldr	r1, [pc, #92]	; (9928 <update_ccc+0x120>)
    98cc:	4a17      	ldr	r2, [pc, #92]	; (992c <update_ccc+0x124>)
    98ce:	2318      	movs	r3, #24
    98d0:	fb03 1300 	mla	r3, r3, r0, r1
    98d4:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    98d6:	4a16      	ldr	r2, [pc, #88]	; (9930 <update_ccc+0x128>)
    98d8:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    98da:	aa03      	add	r2, sp, #12
    98dc:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    98de:	2204      	movs	r2, #4
    98e0:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    98e2:	b203      	sxth	r3, r0
    98e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    98e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    98ec:	4628      	mov	r0, r5
    98ee:	f7ff fd7d 	bl	93ec <bt_gatt_indicate>
    98f2:	b128      	cbz	r0, 9900 <update_ccc+0xf8>
		BT_ERR("SC restore indication failed");
    98f4:	01a1      	lsls	r1, r4, #6
    98f6:	480f      	ldr	r0, [pc, #60]	; (9934 <update_ccc+0x12c>)
    98f8:	f041 0101 	orr.w	r1, r1, #1
    98fc:	f012 fb79 	bl	1bff2 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    9900:	2204      	movs	r2, #4
    9902:	2100      	movs	r1, #0
    9904:	f106 0008 	add.w	r0, r6, #8
    9908:	f014 f88b 	bl	1da22 <memset>
}
    990c:	2001      	movs	r0, #1
    990e:	b005      	add	sp, #20
    9910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9914:	00008df9 	.word	0x00008df9
    9918:	00020ed8 	.word	0x00020ed8
    991c:	00020e00 	.word	0x00020e00
    9920:	00024248 	.word	0x00024248
    9924:	200002a0 	.word	0x200002a0
    9928:	200015c0 	.word	0x200015c0
    992c:	00021630 	.word	0x00021630
    9930:	0001f051 	.word	0x0001f051
    9934:	0002425c 	.word	0x0002425c

00009938 <bt_gatt_connected>:
	}
	return 0;
}

void bt_gatt_connected(struct bt_conn *conn)
{
    9938:	b513      	push	{r0, r1, r4, lr}
		}

		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
	}

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    993a:	4a11      	ldr	r2, [pc, #68]	; (9980 <bt_gatt_connected+0x48>)
	data.conn = conn;
    993c:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    993e:	f64f 71ff 	movw	r1, #65535	; 0xffff
{
    9942:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9944:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    9946:	2001      	movs	r0, #1
    9948:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    994c:	f015 fcff 	bl	1f34e <bt_gatt_foreach_attr>
	 * enabling encryption will fail.
	 */
	if (IS_ENABLED(CONFIG_BT_SMP) &&
	    (conn->role == BT_HCI_ROLE_MASTER ||
	     IS_ENABLED(CONFIG_BT_GATT_AUTO_SEC_REQ)) &&
	    bt_conn_get_security(conn) < data.sec) {
    9950:	4620      	mov	r0, r4
    9952:	f014 fd40 	bl	1e3d6 <bt_conn_get_security>
    9956:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    995a:	4288      	cmp	r0, r1
    995c:	d20e      	bcs.n	997c <bt_gatt_connected+0x44>
		int err = bt_conn_set_security(conn, data.sec);
    995e:	4620      	mov	r0, r4
    9960:	f014 fd09 	bl	1e376 <bt_conn_set_security>

		if (err) {
    9964:	4601      	mov	r1, r0
    9966:	b148      	cbz	r0, 997c <bt_gatt_connected+0x44>
    9968:	4a06      	ldr	r2, [pc, #24]	; (9984 <bt_gatt_connected+0x4c>)
    996a:	4b07      	ldr	r3, [pc, #28]	; (9988 <bt_gatt_connected+0x50>)
			BT_WARN("Failed to set security for bonded peer (%d)",
    996c:	4807      	ldr	r0, [pc, #28]	; (998c <bt_gatt_connected+0x54>)
    996e:	1ad2      	subs	r2, r2, r3
    9970:	08d2      	lsrs	r2, r2, #3
    9972:	0192      	lsls	r2, r2, #6
    9974:	f042 0202 	orr.w	r2, r2, #2
    9978:	f012 fb48 	bl	1c00c <log_1>
	}

#if defined(CONFIG_BT_GATT_CLIENT)
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}
    997c:	b002      	add	sp, #8
    997e:	bd10      	pop	{r4, pc}
    9980:	00009809 	.word	0x00009809
    9984:	00020ed8 	.word	0x00020ed8
    9988:	00020e00 	.word	0x00020e00
    998c:	00024279 	.word	0x00024279

00009990 <bt_gatt_att_max_mtu_changed>:

void bt_gatt_att_max_mtu_changed(struct bt_conn *conn, uint16_t tx, uint16_t rx)
{
    9990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return list->head;
    9992:	4b09      	ldr	r3, [pc, #36]	; (99b8 <bt_gatt_att_max_mtu_changed+0x28>)
    9994:	681c      	ldr	r4, [r3, #0]
    9996:	4605      	mov	r5, r0
    9998:	460e      	mov	r6, r1
    999a:	4617      	mov	r7, r2
	struct bt_gatt_cb *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
    999c:	b10c      	cbz	r4, 99a2 <bt_gatt_att_max_mtu_changed+0x12>
    999e:	3c04      	subs	r4, #4
    99a0:	b904      	cbnz	r4, 99a4 <bt_gatt_att_max_mtu_changed+0x14>
		if (cb->att_mtu_updated) {
			cb->att_mtu_updated(conn, tx, rx);
		}
	}
}
    99a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
    99a4:	6823      	ldr	r3, [r4, #0]
    99a6:	b11b      	cbz	r3, 99b0 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
    99a8:	463a      	mov	r2, r7
    99aa:	4631      	mov	r1, r6
    99ac:	4628      	mov	r0, r5
    99ae:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
    99b0:	1d23      	adds	r3, r4, #4
    99b2:	d0f6      	beq.n	99a2 <bt_gatt_att_max_mtu_changed+0x12>
	return node->next;
    99b4:	6864      	ldr	r4, [r4, #4]
    99b6:	e7f1      	b.n	999c <bt_gatt_att_max_mtu_changed+0xc>
    99b8:	20001594 	.word	0x20001594

000099bc <bt_gatt_encrypt_change>:

void bt_gatt_encrypt_change(struct bt_conn *conn)
{
    99bc:	b507      	push	{r0, r1, r2, lr}
	BT_DBG("conn %p", conn);

	data.conn = conn;
	data.sec = BT_SECURITY_L1;

	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    99be:	4a06      	ldr	r2, [pc, #24]	; (99d8 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    99c0:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    99c2:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    99c4:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    99c6:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    99ca:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    99ce:	f015 fcbe 	bl	1f34e <bt_gatt_foreach_attr>
}
    99d2:	b003      	add	sp, #12
    99d4:	f85d fb04 	ldr.w	pc, [sp], #4
    99d8:	00009809 	.word	0x00009809

000099dc <db_hash_read>:
{
    99dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    99de:	4915      	ldr	r1, [pc, #84]	; (9a34 <db_hash_read+0x58>)
{
    99e0:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    99e4:	4604      	mov	r4, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    99e6:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
    99ea:	461f      	mov	r7, r3
    99ec:	4615      	mov	r5, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
    99ee:	f016 fd59 	bl	204a4 <k_work_cancel_delayable_sync>
    99f2:	f3bf 8f5b 	dmb	ish
    99f6:	4b10      	ldr	r3, [pc, #64]	; (9a38 <db_hash_read+0x5c>)
    99f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    99fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
    99fe:	075b      	lsls	r3, r3, #29
    9a00:	d401      	bmi.n	9a06 <db_hash_read+0x2a>
		db_hash_gen(true);
    9a02:	f7ff fc33 	bl	926c <db_hash_gen.constprop.0>
	bt_gatt_change_aware(conn, true);
    9a06:	2101      	movs	r1, #1
    9a08:	4620      	mov	r0, r4
    9a0a:	f015 fcd8 	bl	1f3be <bt_gatt_change_aware>
	if (offset > value_len) {
    9a0e:	2e10      	cmp	r6, #16
    9a10:	d80c      	bhi.n	9a2c <db_hash_read+0x50>
	len = MIN(buf_len, value_len - offset);
    9a12:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    9a16:	4909      	ldr	r1, [pc, #36]	; (9a3c <db_hash_read+0x60>)
	len = MIN(buf_len, value_len - offset);
    9a18:	42bc      	cmp	r4, r7
    9a1a:	bfa8      	it	ge
    9a1c:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    9a1e:	4622      	mov	r2, r4
    9a20:	4431      	add	r1, r6
    9a22:	4628      	mov	r0, r5
    9a24:	f013 fff2 	bl	1da0c <memcpy>
}
    9a28:	4620      	mov	r0, r4
    9a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9a2c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
    9a30:	e7fa      	b.n	9a28 <db_hash_read+0x4c>
    9a32:	bf00      	nop
    9a34:	20000c90 	.word	0x20000c90
    9a38:	20000cb8 	.word	0x20000cb8
    9a3c:	20000c50 	.word	0x20000c50

00009a40 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9a40:	b570      	push	{r4, r5, r6, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9a42:	4603      	mov	r3, r0
    9a44:	4a14      	ldr	r2, [pc, #80]	; (9a98 <bt_gatt_disconnected+0x58>)
{
    9a46:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9a48:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9a4c:	2001      	movs	r0, #1
    9a4e:	f015 fc7e 	bl	1f34e <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    9a52:	4628      	mov	r0, r5
    9a54:	f7ff f958 	bl	8d08 <find_cf_cfg>
	if (!cfg) {
    9a58:	4604      	mov	r4, r0
    9a5a:	b1e0      	cbz	r0, 9a96 <bt_gatt_disconnected+0x56>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9a5c:	f105 0688 	add.w	r6, r5, #136	; 0x88
    9a60:	7a28      	ldrb	r0, [r5, #8]
    9a62:	4631      	mov	r1, r6
    9a64:	f014 f9de 	bl	1de24 <bt_addr_le_is_bonded>
    9a68:	b920      	cbnz	r0, 9a74 <bt_gatt_disconnected+0x34>
		clear_cf_cfg(cfg);
    9a6a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    9a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		clear_cf_cfg(cfg);
    9a70:	f015 bac3 	b.w	1effa <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    9a74:	1c60      	adds	r0, r4, #1
    9a76:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9a78:	340c      	adds	r4, #12
    9a7a:	f015 fa43 	bl	1ef04 <bt_addr_le_copy>
    9a7e:	f3bf 8f5b 	dmb	ish
    9a82:	e854 3f00 	ldrex	r3, [r4]
    9a86:	f023 0302 	bic.w	r3, r3, #2
    9a8a:	e844 3200 	strex	r2, r3, [r4]
    9a8e:	2a00      	cmp	r2, #0
    9a90:	d1f7      	bne.n	9a82 <bt_gatt_disconnected+0x42>
    9a92:	f3bf 8f5b 	dmb	ish
}
    9a96:	bd70      	pop	{r4, r5, r6, pc}
    9a98:	00008f79 	.word	0x00008f79

00009a9c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    9a9c:	4b10      	ldr	r3, [pc, #64]	; (9ae0 <get_io_capa+0x44>)
    9a9e:	681b      	ldr	r3, [r3, #0]
    9aa0:	b1bb      	cbz	r3, 9ad2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9aa2:	681a      	ldr	r2, [r3, #0]
    9aa4:	b142      	cbz	r2, 9ab8 <get_io_capa+0x1c>
    9aa6:	6859      	ldr	r1, [r3, #4]
    9aa8:	b131      	cbz	r1, 9ab8 <get_io_capa+0x1c>
    9aaa:	6899      	ldr	r1, [r3, #8]
    9aac:	b911      	cbnz	r1, 9ab4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9aae:	490d      	ldr	r1, [pc, #52]	; (9ae4 <get_io_capa+0x48>)
    9ab0:	7809      	ldrb	r1, [r1, #0]
    9ab2:	b939      	cbnz	r1, 9ac4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9ab4:	2004      	movs	r0, #4
    9ab6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9ab8:	490a      	ldr	r1, [pc, #40]	; (9ae4 <get_io_capa+0x48>)
    9aba:	7809      	ldrb	r1, [r1, #0]
    9abc:	b111      	cbz	r1, 9ac4 <get_io_capa+0x28>
    9abe:	b10a      	cbz	r2, 9ac4 <get_io_capa+0x28>
    9ac0:	6899      	ldr	r1, [r3, #8]
    9ac2:	b941      	cbnz	r1, 9ad6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    9ac4:	685b      	ldr	r3, [r3, #4]
    9ac6:	b943      	cbnz	r3, 9ada <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    9ac8:	2a00      	cmp	r2, #0
    9aca:	bf0c      	ite	eq
    9acc:	2003      	moveq	r0, #3
    9ace:	2000      	movne	r0, #0
    9ad0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9ad2:	2003      	movs	r0, #3
    9ad4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    9ad6:	2001      	movs	r0, #1
    9ad8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    9ada:	2002      	movs	r0, #2
	}
}
    9adc:	4770      	bx	lr
    9ade:	bf00      	nop
    9ae0:	20001540 	.word	0x20001540
    9ae4:	20002a7a 	.word	0x20002a7a

00009ae8 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    9ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    9aea:	1d14      	adds	r4, r2, #4
{
    9aec:	b08b      	sub	sp, #44	; 0x2c
    9aee:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    9af0:	588b      	ldr	r3, [r1, r2]
    9af2:	9301      	str	r3, [sp, #4]
{
    9af4:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    9af6:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    9af8:	4628      	mov	r0, r5
    9afa:	4621      	mov	r1, r4
    9afc:	f015 fc9b 	bl	1f436 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    9b00:	4631      	mov	r1, r6
    9b02:	2210      	movs	r2, #16
    9b04:	a802      	add	r0, sp, #8
    9b06:	f015 fc8c 	bl	1f422 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    9b0a:	ab06      	add	r3, sp, #24
    9b0c:	4622      	mov	r2, r4
    9b0e:	4629      	mov	r1, r5
    9b10:	a802      	add	r0, sp, #8
    9b12:	f015 fc9f 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
    9b16:	4606      	mov	r6, r0
    9b18:	b160      	cbz	r0, 9b34 <smp_sign_buf+0x4c>
    9b1a:	4910      	ldr	r1, [pc, #64]	; (9b5c <smp_sign_buf+0x74>)
    9b1c:	4b10      	ldr	r3, [pc, #64]	; (9b60 <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    9b1e:	4811      	ldr	r0, [pc, #68]	; (9b64 <smp_sign_buf+0x7c>)
    9b20:	1ac9      	subs	r1, r1, r3
    9b22:	08c9      	lsrs	r1, r1, #3
    9b24:	0189      	lsls	r1, r1, #6
    9b26:	f041 0101 	orr.w	r1, r1, #1
    9b2a:	f012 fa62 	bl	1bff2 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    9b2e:	4630      	mov	r0, r6
    9b30:	b00b      	add	sp, #44	; 0x2c
    9b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    9b34:	a806      	add	r0, sp, #24
    9b36:	2110      	movs	r1, #16
    9b38:	f015 fc7d 	bl	1f436 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    9b3c:	2204      	movs	r2, #4
    9b3e:	eb0d 0102 	add.w	r1, sp, r2
    9b42:	a807      	add	r0, sp, #28
    9b44:	f013 ff62 	bl	1da0c <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    9b48:	4621      	mov	r1, r4
    9b4a:	4628      	mov	r0, r5
    9b4c:	f015 fc73 	bl	1f436 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    9b50:	220c      	movs	r2, #12
    9b52:	a907      	add	r1, sp, #28
    9b54:	4638      	mov	r0, r7
    9b56:	f013 ff59 	bl	1da0c <memcpy>
	return 0;
    9b5a:	e7e8      	b.n	9b2e <smp_sign_buf+0x46>
    9b5c:	00020f10 	.word	0x00020f10
    9b60:	00020e00 	.word	0x00020e00
    9b64:	000242b4 	.word	0x000242b4

00009b68 <smp_chan_get>:
{
    9b68:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    9b6a:	2106      	movs	r1, #6
    9b6c:	f014 fd3f 	bl	1e5ee <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    9b70:	4604      	mov	r4, r0
    9b72:	b958      	cbnz	r0, 9b8c <smp_chan_get+0x24>
    9b74:	4907      	ldr	r1, [pc, #28]	; (9b94 <smp_chan_get+0x2c>)
    9b76:	4b08      	ldr	r3, [pc, #32]	; (9b98 <smp_chan_get+0x30>)
		BT_ERR("Unable to find SMP channel");
    9b78:	4808      	ldr	r0, [pc, #32]	; (9b9c <smp_chan_get+0x34>)
    9b7a:	1ac9      	subs	r1, r1, r3
    9b7c:	08c9      	lsrs	r1, r1, #3
    9b7e:	0189      	lsls	r1, r1, #6
    9b80:	f041 0101 	orr.w	r1, r1, #1
    9b84:	f012 fa35 	bl	1bff2 <log_0>
}
    9b88:	4620      	mov	r0, r4
    9b8a:	bd10      	pop	{r4, pc}
	return CONTAINER_OF(chan, struct bt_smp, chan);
    9b8c:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    9b90:	e7fa      	b.n	9b88 <smp_chan_get+0x20>
    9b92:	bf00      	nop
    9b94:	00020f10 	.word	0x00020f10
    9b98:	00020e00 	.word	0x00020e00
    9b9c:	000242c8 	.word	0x000242c8

00009ba0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    9ba0:	4b0c      	ldr	r3, [pc, #48]	; (9bd4 <bt_smp_accept+0x34>)
{
    9ba2:	b510      	push	{r4, lr}
    9ba4:	4604      	mov	r4, r0
		if (smp->chan.chan.conn) {
    9ba6:	f8d3 00f0 	ldr.w	r0, [r3, #240]	; 0xf0
    9baa:	b928      	cbnz	r0, 9bb8 <bt_smp_accept+0x18>
			continue;
		}

		smp->chan.chan.ops = &ops;
    9bac:	4a0a      	ldr	r2, [pc, #40]	; (9bd8 <bt_smp_accept+0x38>)
    9bae:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

		*chan = &smp->chan.chan;
    9bb2:	33f0      	adds	r3, #240	; 0xf0
    9bb4:	600b      	str	r3, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    9bb6:	bd10      	pop	{r4, pc}
    9bb8:	4b08      	ldr	r3, [pc, #32]	; (9bdc <bt_smp_accept+0x3c>)
    9bba:	4a09      	ldr	r2, [pc, #36]	; (9be0 <bt_smp_accept+0x40>)
	BT_ERR("No available SMP context for conn %p", conn);
    9bbc:	4809      	ldr	r0, [pc, #36]	; (9be4 <bt_smp_accept+0x44>)
    9bbe:	1ad2      	subs	r2, r2, r3
    9bc0:	08d2      	lsrs	r2, r2, #3
    9bc2:	0192      	lsls	r2, r2, #6
    9bc4:	f042 0201 	orr.w	r2, r2, #1
    9bc8:	4621      	mov	r1, r4
    9bca:	f012 fa1f 	bl	1c00c <log_1>
	return -ENOMEM;
    9bce:	f06f 000b 	mvn.w	r0, #11
    9bd2:	e7f0      	b.n	9bb6 <bt_smp_accept+0x16>
    9bd4:	20000d10 	.word	0x20000d10
    9bd8:	000217ac 	.word	0x000217ac
    9bdc:	00020e00 	.word	0x00020e00
    9be0:	00020f10 	.word	0x00020f10
    9be4:	000242e3 	.word	0x000242e3

00009be8 <get_auth.constprop.0>:
	if (sc_supported) {
    9be8:	4b0c      	ldr	r3, [pc, #48]	; (9c1c <get_auth.constprop.0+0x34>)
    9bea:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    9bec:	b510      	push	{r4, lr}
	if (sc_supported) {
    9bee:	b17b      	cbz	r3, 9c10 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    9bf0:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    9bf4:	f7ff ff52 	bl	9a9c <get_io_capa>
	if (bondable) {
    9bf8:	4b09      	ldr	r3, [pc, #36]	; (9c20 <get_auth.constprop.0+0x38>)
    9bfa:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    9bfc:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    9bfe:	bf0c      	ite	eq
    9c00:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    9c04:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    9c08:	b12b      	cbz	r3, 9c16 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    9c0a:	f044 0001 	orr.w	r0, r4, #1
}
    9c0e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    9c10:	f000 0407 	and.w	r4, r0, #7
    9c14:	e7ee      	b.n	9bf4 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    9c16:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    9c1a:	e7f8      	b.n	9c0e <get_auth.constprop.0+0x26>
    9c1c:	20002a7a 	.word	0x20002a7a
    9c20:	200006d2 	.word	0x200006d2

00009c24 <smp_init>:
{
    9c24:	b538      	push	{r3, r4, r5, lr}
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
    9c26:	22f0      	movs	r2, #240	; 0xf0
{
    9c28:	4605      	mov	r5, r0
	(void)memset(smp, 0, offsetof(struct bt_smp, chan));
    9c2a:	2100      	movs	r1, #0
    9c2c:	f013 fef9 	bl	1da22 <memset>
	if (bt_rand(smp->prnd, 16)) {
    9c30:	2110      	movs	r1, #16
    9c32:	f105 0027 	add.w	r0, r5, #39	; 0x27
    9c36:	f004 fc5d 	bl	e4f4 <bt_rand>
    9c3a:	4604      	mov	r4, r0
    9c3c:	b948      	cbnz	r0, 9c52 <smp_init+0x2e>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9c3e:	2105      	movs	r1, #5
    9c40:	4628      	mov	r0, r5
    9c42:	f015 fcc2 	bl	1f5ca <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    9c46:	f7fd f807 	bl	6c58 <bt_pub_key_get>
    9c4a:	4b03      	ldr	r3, [pc, #12]	; (9c58 <smp_init+0x34>)
    9c4c:	6018      	str	r0, [r3, #0]
}
    9c4e:	4620      	mov	r0, r4
    9c50:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9c52:	2408      	movs	r4, #8
    9c54:	e7fb      	b.n	9c4e <smp_init+0x2a>
    9c56:	bf00      	nop
    9c58:	200015dc 	.word	0x200015dc

00009c5c <smp_dhkey_generate>:
{
    9c5c:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    9c5e:	1d05      	adds	r5, r0, #4
{
    9c60:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    9c62:	2108      	movs	r1, #8
    9c64:	4628      	mov	r0, r5
    9c66:	f015 fcb0 	bl	1f5ca <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    9c6a:	490b      	ldr	r1, [pc, #44]	; (9c98 <smp_dhkey_generate+0x3c>)
    9c6c:	f104 0057 	add.w	r0, r4, #87	; 0x57
    9c70:	f7fd f802 	bl	6c78 <bt_dh_key_gen>
	if (err) {
    9c74:	b170      	cbz	r0, 9c94 <smp_dhkey_generate+0x38>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    9c76:	2108      	movs	r1, #8
    9c78:	4628      	mov	r0, r5
    9c7a:	f015 fc7a 	bl	1f572 <atomic_clear_bit>
    9c7e:	4b07      	ldr	r3, [pc, #28]	; (9c9c <smp_dhkey_generate+0x40>)
    9c80:	4907      	ldr	r1, [pc, #28]	; (9ca0 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    9c82:	4808      	ldr	r0, [pc, #32]	; (9ca4 <smp_dhkey_generate+0x48>)
    9c84:	1ac9      	subs	r1, r1, r3
    9c86:	08c9      	lsrs	r1, r1, #3
    9c88:	0189      	lsls	r1, r1, #6
    9c8a:	f041 0101 	orr.w	r1, r1, #1
    9c8e:	f012 f9b0 	bl	1bff2 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    9c92:	2008      	movs	r0, #8
}
    9c94:	bd38      	pop	{r3, r4, r5, pc}
    9c96:	bf00      	nop
    9c98:	0001fa99 	.word	0x0001fa99
    9c9c:	00020e00 	.word	0x00020e00
    9ca0:	00020f10 	.word	0x00020f10
    9ca4:	00024308 	.word	0x00024308

00009ca8 <smp_find>:
{
    9ca8:	4601      	mov	r1, r0
    9caa:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    9cac:	4803      	ldr	r0, [pc, #12]	; (9cbc <smp_find+0x14>)
    9cae:	f015 fca2 	bl	1f5f6 <atomic_test_bit>
	return NULL;
    9cb2:	2800      	cmp	r0, #0
}
    9cb4:	4802      	ldr	r0, [pc, #8]	; (9cc0 <smp_find+0x18>)
    9cb6:	bf08      	it	eq
    9cb8:	2000      	moveq	r0, #0
    9cba:	bd08      	pop	{r3, pc}
    9cbc:	20000d14 	.word	0x20000d14
    9cc0:	20000d10 	.word	0x20000d10

00009cc4 <smp_ident_info>:
{
    9cc4:	b570      	push	{r4, r5, r6, lr}
    9cc6:	460b      	mov	r3, r1
    9cc8:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9cca:	210d      	movs	r1, #13
    9ccc:	3004      	adds	r0, #4
    9cce:	f015 fc92 	bl	1f5f6 <atomic_test_bit>
    9cd2:	b310      	cbz	r0, 9d1a <smp_ident_info+0x56>
		struct bt_smp_ident_info *req = (void *)buf->data;
    9cd4:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    9cd6:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    9cda:	f103 0588 	add.w	r5, r3, #136	; 0x88
    9cde:	7a19      	ldrb	r1, [r3, #8]
    9ce0:	462a      	mov	r2, r5
    9ce2:	2002      	movs	r0, #2
    9ce4:	f015 ff6c 	bl	1fbc0 <bt_keys_get_type>
		if (!keys) {
    9ce8:	b990      	cbnz	r0, 9d10 <smp_ident_info+0x4c>
    9cea:	4a0f      	ldr	r2, [pc, #60]	; (9d28 <smp_ident_info+0x64>)
    9cec:	4c0f      	ldr	r4, [pc, #60]	; (9d2c <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    9cee:	4628      	mov	r0, r5
    9cf0:	1aa4      	subs	r4, r4, r2
    9cf2:	f7fa fbc9 	bl	4488 <bt_addr_le_str_real>
    9cf6:	f7f8 fd03 	bl	2700 <z_log_strdup>
    9cfa:	08e4      	lsrs	r4, r4, #3
    9cfc:	01a4      	lsls	r4, r4, #6
    9cfe:	f044 0401 	orr.w	r4, r4, #1
    9d02:	4601      	mov	r1, r0
    9d04:	4622      	mov	r2, r4
    9d06:	480a      	ldr	r0, [pc, #40]	; (9d30 <smp_ident_info+0x6c>)
    9d08:	f012 f980 	bl	1c00c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    9d0c:	2008      	movs	r0, #8
}
    9d0e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    9d10:	2210      	movs	r2, #16
    9d12:	4631      	mov	r1, r6
    9d14:	302a      	adds	r0, #42	; 0x2a
    9d16:	f013 fe79 	bl	1da0c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    9d1a:	4620      	mov	r0, r4
    9d1c:	2109      	movs	r1, #9
    9d1e:	f015 fc54 	bl	1f5ca <atomic_set_bit>
	return 0;
    9d22:	2000      	movs	r0, #0
    9d24:	e7f3      	b.n	9d0e <smp_ident_info+0x4a>
    9d26:	bf00      	nop
    9d28:	00020e00 	.word	0x00020e00
    9d2c:	00020f10 	.word	0x00020f10
    9d30:	00024321 	.word	0x00024321

00009d34 <smp_encrypt_info>:
{
    9d34:	b570      	push	{r4, r5, r6, lr}
    9d36:	460b      	mov	r3, r1
    9d38:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    9d3a:	210d      	movs	r1, #13
    9d3c:	3004      	adds	r0, #4
    9d3e:	f015 fc5a 	bl	1f5f6 <atomic_test_bit>
    9d42:	b310      	cbz	r0, 9d8a <smp_encrypt_info+0x56>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    9d44:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    9d46:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    9d4a:	f103 0588 	add.w	r5, r3, #136	; 0x88
    9d4e:	7a19      	ldrb	r1, [r3, #8]
    9d50:	462a      	mov	r2, r5
    9d52:	2004      	movs	r0, #4
    9d54:	f015 ff34 	bl	1fbc0 <bt_keys_get_type>
		if (!keys) {
    9d58:	b990      	cbnz	r0, 9d80 <smp_encrypt_info+0x4c>
    9d5a:	4a0f      	ldr	r2, [pc, #60]	; (9d98 <smp_encrypt_info+0x64>)
    9d5c:	4c0f      	ldr	r4, [pc, #60]	; (9d9c <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    9d5e:	4628      	mov	r0, r5
    9d60:	1aa4      	subs	r4, r4, r2
    9d62:	f7fa fb91 	bl	4488 <bt_addr_le_str_real>
    9d66:	f7f8 fccb 	bl	2700 <z_log_strdup>
    9d6a:	08e4      	lsrs	r4, r4, #3
    9d6c:	01a4      	lsls	r4, r4, #6
    9d6e:	f044 0401 	orr.w	r4, r4, #1
    9d72:	4601      	mov	r1, r0
    9d74:	4622      	mov	r2, r4
    9d76:	480a      	ldr	r0, [pc, #40]	; (9da0 <smp_encrypt_info+0x6c>)
    9d78:	f012 f948 	bl	1c00c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    9d7c:	2008      	movs	r0, #8
}
    9d7e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    9d80:	2210      	movs	r2, #16
    9d82:	4631      	mov	r1, r6
    9d84:	301a      	adds	r0, #26
    9d86:	f013 fe41 	bl	1da0c <memcpy>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    9d8a:	4620      	mov	r0, r4
    9d8c:	2107      	movs	r1, #7
    9d8e:	f015 fc1c 	bl	1f5ca <atomic_set_bit>
	return 0;
    9d92:	2000      	movs	r0, #0
    9d94:	e7f3      	b.n	9d7e <smp_encrypt_info+0x4a>
    9d96:	bf00      	nop
    9d98:	00020e00 	.word	0x00020e00
    9d9c:	00020f10 	.word	0x00020f10
    9da0:	00024321 	.word	0x00024321

00009da4 <smp_pairing_req>:
{
    9da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    9da8:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    9daa:	78fb      	ldrb	r3, [r7, #3]
    9dac:	3b07      	subs	r3, #7
    9dae:	2b09      	cmp	r3, #9
{
    9db0:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    9db2:	d904      	bls.n	9dbe <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    9db4:	2706      	movs	r7, #6
}
    9db6:	4638      	mov	r0, r7
    9db8:	b002      	add	sp, #8
    9dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    9dbe:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	if (!conn->le.keys) {
    9dc2:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    9dc6:	b15b      	cbz	r3, 9de0 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    9dc8:	1d25      	adds	r5, r4, #4
    9dca:	210f      	movs	r1, #15
    9dcc:	4628      	mov	r0, r5
    9dce:	f015 fc12 	bl	1f5f6 <atomic_test_bit>
    9dd2:	b980      	cbnz	r0, 9df6 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    9dd4:	4620      	mov	r0, r4
    9dd6:	f7ff ff25 	bl	9c24 <smp_init>
		if (ret) {
    9dda:	b160      	cbz	r0, 9df6 <smp_pairing_req+0x52>
			return ret;
    9ddc:	b2c7      	uxtb	r7, r0
    9dde:	e7ea      	b.n	9db6 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    9de0:	7a30      	ldrb	r0, [r6, #8]
    9de2:	f106 0188 	add.w	r1, r6, #136	; 0x88
    9de6:	f001 fbd7 	bl	b598 <bt_keys_get_addr>
    9dea:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    9dee:	2800      	cmp	r0, #0
    9df0:	d1ea      	bne.n	9dc8 <smp_pairing_req+0x24>
	switch (sec) {
    9df2:	2708      	movs	r7, #8
    9df4:	e7df      	b.n	9db6 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    9df6:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    9df8:	2206      	movs	r2, #6
    9dfa:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    9dfc:	7263      	strb	r3, [r4, #9]
	memcpy(smp->preq + 1, req, sizeof(*req));
    9dfe:	f104 000a 	add.w	r0, r4, #10
    9e02:	f013 fe03 	bl	1da0c <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    9e06:	2302      	movs	r3, #2
    9e08:	7423      	strb	r3, [r4, #16]
	rsp->auth_req = get_auth(conn, req->auth_req);
    9e0a:	78b8      	ldrb	r0, [r7, #2]
    9e0c:	f7ff feec 	bl	9be8 <get_auth.constprop.0>
    9e10:	74e0      	strb	r0, [r4, #19]
    9e12:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    9e14:	f7ff fe42 	bl	9a9c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    9e18:	4b9f      	ldr	r3, [pc, #636]	; (a098 <smp_pairing_req+0x2f4>)
	rsp->io_capability = get_io_capa();
    9e1a:	7460      	strb	r0, [r4, #17]
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    9e1c:	781b      	ldrb	r3, [r3, #0]
    9e1e:	74a3      	strb	r3, [r4, #18]
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    9e20:	2310      	movs	r3, #16
    9e22:	7523      	strb	r3, [r4, #20]
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    9e24:	793b      	ldrb	r3, [r7, #4]
    9e26:	f003 0307 	and.w	r3, r3, #7
    9e2a:	7563      	strb	r3, [r4, #21]
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    9e2c:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    9e2e:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    9e32:	f003 0305 	and.w	r3, r3, #5
    9e36:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    9e38:	d00e      	beq.n	9e58 <smp_pairing_req+0xb4>
    9e3a:	78bb      	ldrb	r3, [r7, #2]
    9e3c:	0719      	lsls	r1, r3, #28
    9e3e:	d50b      	bpl.n	9e58 <smp_pairing_req+0xb4>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    9e40:	2105      	movs	r1, #5
    9e42:	4628      	mov	r0, r5
    9e44:	f015 fbc1 	bl	1f5ca <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    9e48:	7d63      	ldrb	r3, [r4, #21]
    9e4a:	f003 0306 	and.w	r3, r3, #6
    9e4e:	7563      	strb	r3, [r4, #21]
		rsp->resp_key_dist &= SEND_KEYS_SC;
    9e50:	7da3      	ldrb	r3, [r4, #22]
    9e52:	f003 0304 	and.w	r3, r3, #4
    9e56:	75a3      	strb	r3, [r4, #22]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    9e58:	7ce3      	ldrb	r3, [r4, #19]
    9e5a:	069a      	lsls	r2, r3, #26
    9e5c:	d506      	bpl.n	9e6c <smp_pairing_req+0xc8>
    9e5e:	78bb      	ldrb	r3, [r7, #2]
    9e60:	069b      	lsls	r3, r3, #26
    9e62:	d503      	bpl.n	9e6c <smp_pairing_req+0xc8>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    9e64:	2114      	movs	r1, #20
    9e66:	4628      	mov	r0, r5
    9e68:	f015 fbaf 	bl	1f5ca <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    9e6c:	7da3      	ldrb	r3, [r4, #22]
    9e6e:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	smp->remote_dist = rsp->init_key_dist;
    9e72:	7d63      	ldrb	r3, [r4, #21]
    9e74:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    9e78:	7ce3      	ldrb	r3, [r4, #19]
    9e7a:	07d8      	lsls	r0, r3, #31
    9e7c:	d506      	bpl.n	9e8c <smp_pairing_req+0xe8>
    9e7e:	78bb      	ldrb	r3, [r7, #2]
    9e80:	07d9      	lsls	r1, r3, #31
    9e82:	d503      	bpl.n	9e8c <smp_pairing_req+0xe8>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    9e84:	210d      	movs	r1, #13
    9e86:	4628      	mov	r0, r5
    9e88:	f015 fb9f 	bl	1f5ca <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    9e8c:	2103      	movs	r1, #3
    9e8e:	4628      	mov	r0, r5
    9e90:	f015 fb9b 	bl	1f5ca <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9e94:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    9e96:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9e98:	f015 fbad 	bl	1f5f6 <atomic_test_bit>
    9e9c:	bb28      	cbnz	r0, 9eea <smp_pairing_req+0x146>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    9e9e:	2f04      	cmp	r7, #4
    9ea0:	d841      	bhi.n	9f26 <smp_pairing_req+0x182>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    9ea2:	7ca2      	ldrb	r2, [r4, #18]
    9ea4:	7ae3      	ldrb	r3, [r4, #11]
    9ea6:	4013      	ands	r3, r2
    9ea8:	07da      	lsls	r2, r3, #31
    9eaa:	d43a      	bmi.n	9f22 <smp_pairing_req+0x17e>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9eac:	7b21      	ldrb	r1, [r4, #12]
    9eae:	7ce0      	ldrb	r0, [r4, #19]
    9eb0:	4301      	orrs	r1, r0
    9eb2:	f011 0104 	ands.w	r1, r1, #4
    9eb6:	d00f      	beq.n	9ed8 <smp_pairing_req+0x134>
	method = gen_method_legacy[remote_io][get_io_capa()];
    9eb8:	f7ff fdf0 	bl	9a9c <get_io_capa>
    9ebc:	4b77      	ldr	r3, [pc, #476]	; (a09c <smp_pairing_req+0x2f8>)
    9ebe:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9ec2:	441f      	add	r7, r3
    9ec4:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    9ec6:	2904      	cmp	r1, #4
    9ec8:	d106      	bne.n	9ed8 <smp_pairing_req+0x134>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    9eca:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    9ece:	78db      	ldrb	r3, [r3, #3]
			method = PASSKEY_INPUT;
    9ed0:	2b00      	cmp	r3, #0
    9ed2:	bf0c      	ite	eq
    9ed4:	2102      	moveq	r1, #2
    9ed6:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    9ed8:	7221      	strb	r1, [r4, #8]
	if (!update_keys_check(smp, conn->le.keys)) {
    9eda:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    9ede:	4620      	mov	r0, r4
    9ee0:	f015 fb92 	bl	1f608 <update_keys_check>
    9ee4:	bb08      	cbnz	r0, 9f2a <smp_pairing_req+0x186>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    9ee6:	2703      	movs	r7, #3
    9ee8:	e765      	b.n	9db6 <smp_pairing_req+0x12>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    9eea:	7b20      	ldrb	r0, [r4, #12]
    9eec:	7ce2      	ldrb	r2, [r4, #19]
    9eee:	ea00 0302 	and.w	r3, r0, r2
    9ef2:	071b      	lsls	r3, r3, #28
    9ef4:	d506      	bpl.n	9f04 <smp_pairing_req+0x160>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    9ef6:	7ae3      	ldrb	r3, [r4, #11]
    9ef8:	f894 c012 	ldrb.w	ip, [r4, #18]
    9efc:	ea43 030c 	orr.w	r3, r3, ip
    9f00:	07db      	lsls	r3, r3, #31
    9f02:	d4e9      	bmi.n	9ed8 <smp_pairing_req+0x134>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    9f04:	2f04      	cmp	r7, #4
    9f06:	d80e      	bhi.n	9f26 <smp_pairing_req+0x182>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9f08:	ea40 0102 	orr.w	r1, r0, r2
    9f0c:	f011 0104 	ands.w	r1, r1, #4
    9f10:	d0e2      	beq.n	9ed8 <smp_pairing_req+0x134>
	return gen_method_sc[remote_io][get_io_capa()];
    9f12:	f7ff fdc3 	bl	9a9c <get_io_capa>
    9f16:	4b62      	ldr	r3, [pc, #392]	; (a0a0 <smp_pairing_req+0x2fc>)
    9f18:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    9f1c:	441f      	add	r7, r3
    9f1e:	5c39      	ldrb	r1, [r7, r0]
    9f20:	e7da      	b.n	9ed8 <smp_pairing_req+0x134>
		return LEGACY_OOB;
    9f22:	2106      	movs	r1, #6
    9f24:	e7d8      	b.n	9ed8 <smp_pairing_req+0x134>
		return JUST_WORKS;
    9f26:	2100      	movs	r1, #0
    9f28:	e7d6      	b.n	9ed8 <smp_pairing_req+0x134>
	bt_security_t sec = smp->chan.chan.conn->required_sec_level;
    9f2a:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
    9f2e:	7a9b      	ldrb	r3, [r3, #10]
	switch (sec) {
    9f30:	2b03      	cmp	r3, #3
    9f32:	d034      	beq.n	9f9e <smp_pairing_req+0x1fa>
    9f34:	d822      	bhi.n	9f7c <smp_pairing_req+0x1d8>
    9f36:	3b01      	subs	r3, #1
    9f38:	2b01      	cmp	r3, #1
    9f3a:	f63f af5a 	bhi.w	9df2 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9f3e:	2105      	movs	r1, #5
    9f40:	4628      	mov	r0, r5
    9f42:	f015 fb58 	bl	1f5f6 <atomic_test_bit>
    9f46:	2800      	cmp	r0, #0
    9f48:	f040 80c4 	bne.w	a0d4 <smp_pairing_req+0x330>
	struct bt_conn *conn = smp->chan.chan.conn;
    9f4c:	f8d4 60f0 	ldr.w	r6, [r4, #240]	; 0xf0
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    9f50:	f106 0188 	add.w	r1, r6, #136	; 0x88
    9f54:	7a30      	ldrb	r0, [r6, #8]
    9f56:	f001 fba3 	bl	b6a0 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    9f5a:	7a21      	ldrb	r1, [r4, #8]
    9f5c:	b318      	cbz	r0, 9fa6 <smp_pairing_req+0x202>
    9f5e:	7b43      	ldrb	r3, [r0, #13]
    9f60:	07db      	lsls	r3, r3, #31
    9f62:	d520      	bpl.n	9fa6 <smp_pairing_req+0x202>
    9f64:	b9f9      	cbnz	r1, 9fa6 <smp_pairing_req+0x202>
    9f66:	4b4f      	ldr	r3, [pc, #316]	; (a0a4 <smp_pairing_req+0x300>)
    9f68:	494f      	ldr	r1, [pc, #316]	; (a0a8 <smp_pairing_req+0x304>)
		BT_ERR("JustWorks failed, authenticated keys present");
    9f6a:	4850      	ldr	r0, [pc, #320]	; (a0ac <smp_pairing_req+0x308>)
    9f6c:	1ac9      	subs	r1, r1, r3
    9f6e:	08c9      	lsrs	r1, r1, #3
    9f70:	0189      	lsls	r1, r1, #6
    9f72:	f041 0101 	orr.w	r1, r1, #1
    9f76:	f012 f83c 	bl	1bff2 <log_0>
	if (ret) {
    9f7a:	e73a      	b.n	9df2 <smp_pairing_req+0x4e>
	switch (sec) {
    9f7c:	2b04      	cmp	r3, #4
    9f7e:	f47f af38 	bne.w	9df2 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    9f82:	7d23      	ldrb	r3, [r4, #20]
    9f84:	7b62      	ldrb	r2, [r4, #13]
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    9f86:	4293      	cmp	r3, r2
    9f88:	bf28      	it	cs
    9f8a:	4613      	movcs	r3, r2
    9f8c:	2b10      	cmp	r3, #16
    9f8e:	f47f af11 	bne.w	9db4 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    9f92:	2105      	movs	r1, #5
    9f94:	4628      	mov	r0, r5
    9f96:	f015 fb2e 	bl	1f5f6 <atomic_test_bit>
    9f9a:	2800      	cmp	r0, #0
    9f9c:	d0a3      	beq.n	9ee6 <smp_pairing_req+0x142>
		if (smp->method == JUST_WORKS) {
    9f9e:	7a23      	ldrb	r3, [r4, #8]
    9fa0:	2b00      	cmp	r3, #0
    9fa2:	d1cc      	bne.n	9f3e <smp_pairing_req+0x19a>
    9fa4:	e79f      	b.n	9ee6 <smp_pairing_req+0x142>
	switch (smp->method) {
    9fa6:	2906      	cmp	r1, #6
    9fa8:	d869      	bhi.n	a07e <smp_pairing_req+0x2da>
    9faa:	e8df f001 	tbb	[pc, r1]
    9fae:	5e1b      	.short	0x5e1b
    9fb0:	68686833 	.word	0x68686833
    9fb4:	04          	.byte	0x04
    9fb5:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    9fb6:	4e3e      	ldr	r6, [pc, #248]	; (a0b0 <smp_pairing_req+0x30c>)
    9fb8:	6833      	ldr	r3, [r6, #0]
    9fba:	2b00      	cmp	r3, #0
    9fbc:	d06a      	beq.n	a094 <smp_pairing_req+0x2f0>
    9fbe:	68db      	ldr	r3, [r3, #12]
    9fc0:	2b00      	cmp	r3, #0
    9fc2:	d067      	beq.n	a094 <smp_pairing_req+0x2f0>
			struct bt_conn_oob_info info = {
    9fc4:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9fc6:	210a      	movs	r1, #10
    9fc8:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    9fca:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    9fce:	f015 fafc 	bl	1f5ca <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    9fd2:	6833      	ldr	r3, [r6, #0]
    9fd4:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    9fd8:	68db      	ldr	r3, [r3, #12]
    9fda:	a901      	add	r1, sp, #4
    9fdc:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    9fde:	7a23      	ldrb	r3, [r4, #8]
    9fe0:	2b00      	cmp	r3, #0
    9fe2:	d16b      	bne.n	a0bc <smp_pairing_req+0x318>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    9fe4:	210f      	movs	r1, #15
    9fe6:	4628      	mov	r0, r5
    9fe8:	f015 fb05 	bl	1f5f6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    9fec:	4607      	mov	r7, r0
    9fee:	2800      	cmp	r0, #0
    9ff0:	d164      	bne.n	a0bc <smp_pairing_req+0x318>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    9ff2:	4e2f      	ldr	r6, [pc, #188]	; (a0b0 <smp_pairing_req+0x30c>)
    9ff4:	6833      	ldr	r3, [r6, #0]
    9ff6:	2b00      	cmp	r3, #0
    9ff8:	d060      	beq.n	a0bc <smp_pairing_req+0x318>
	    bt_auth && bt_auth->pairing_confirm) {
    9ffa:	695b      	ldr	r3, [r3, #20]
    9ffc:	2b00      	cmp	r3, #0
    9ffe:	d05d      	beq.n	a0bc <smp_pairing_req+0x318>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a000:	4628      	mov	r0, r5
    a002:	210a      	movs	r1, #10
    a004:	f015 fae1 	bl	1f5ca <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    a008:	6833      	ldr	r3, [r6, #0]
    a00a:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    a00e:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    a010:	4798      	blx	r3
		return 0;
    a012:	e6d0      	b.n	9db6 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    a014:	2104      	movs	r1, #4
    a016:	eb0d 0001 	add.w	r0, sp, r1
    a01a:	f004 fa6b 	bl	e4f4 <bt_rand>
    a01e:	2800      	cmp	r0, #0
    a020:	f47f aee7 	bne.w	9df2 <smp_pairing_req+0x4e>
			passkey %= 1000000;
    a024:	9b01      	ldr	r3, [sp, #4]
    a026:	4a23      	ldr	r2, [pc, #140]	; (a0b4 <smp_pairing_req+0x310>)
		if (bt_auth && bt_auth->passkey_display) {
    a028:	4f21      	ldr	r7, [pc, #132]	; (a0b0 <smp_pairing_req+0x30c>)
			passkey %= 1000000;
    a02a:	fbb3 f1f2 	udiv	r1, r3, r2
    a02e:	fb02 3311 	mls	r3, r2, r1, r3
    a032:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    a034:	683b      	ldr	r3, [r7, #0]
    a036:	b153      	cbz	r3, a04e <smp_pairing_req+0x2aa>
    a038:	681b      	ldr	r3, [r3, #0]
    a03a:	b143      	cbz	r3, a04e <smp_pairing_req+0x2aa>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    a03c:	210b      	movs	r1, #11
    a03e:	4628      	mov	r0, r5
    a040:	f015 fac3 	bl	1f5ca <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    a044:	683b      	ldr	r3, [r7, #0]
    a046:	9901      	ldr	r1, [sp, #4]
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	4630      	mov	r0, r6
    a04c:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    a04e:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    a050:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
	dst[1] = val >> 8;
    a054:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    a058:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    a05a:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	dst[1] = val >> 8;
    a05e:	0a1b      	lsrs	r3, r3, #8
    a060:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    a064:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
	if (ret) {
    a068:	e7b9      	b.n	9fde <smp_pairing_req+0x23a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a06a:	4628      	mov	r0, r5
    a06c:	210a      	movs	r1, #10
    a06e:	f015 faac 	bl	1f5ca <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    a072:	4b0f      	ldr	r3, [pc, #60]	; (a0b0 <smp_pairing_req+0x30c>)
    a074:	681b      	ldr	r3, [r3, #0]
    a076:	4630      	mov	r0, r6
    a078:	685b      	ldr	r3, [r3, #4]
    a07a:	4798      	blx	r3
	if (ret) {
    a07c:	e7af      	b.n	9fde <smp_pairing_req+0x23a>
    a07e:	4b09      	ldr	r3, [pc, #36]	; (a0a4 <smp_pairing_req+0x300>)
    a080:	4a09      	ldr	r2, [pc, #36]	; (a0a8 <smp_pairing_req+0x304>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a082:	480d      	ldr	r0, [pc, #52]	; (a0b8 <smp_pairing_req+0x314>)
    a084:	1ad2      	subs	r2, r2, r3
    a086:	08d2      	lsrs	r2, r2, #3
    a088:	0192      	lsls	r2, r2, #6
    a08a:	f042 0201 	orr.w	r2, r2, #1
    a08e:	f011 ffbd 	bl	1c00c <log_1>
	if (ret) {
    a092:	e6ae      	b.n	9df2 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    a094:	2702      	movs	r7, #2
    a096:	e68e      	b.n	9db6 <smp_pairing_req+0x12>
    a098:	20002a79 	.word	0x20002a79
    a09c:	00024683 	.word	0x00024683
    a0a0:	0002469c 	.word	0x0002469c
    a0a4:	00020e00 	.word	0x00020e00
    a0a8:	00020f10 	.word	0x00020f10
    a0ac:	0002433b 	.word	0x0002433b
    a0b0:	20001540 	.word	0x20001540
    a0b4:	000f4240 	.word	0x000f4240
    a0b8:	00024368 	.word	0x00024368
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a0bc:	2103      	movs	r1, #3
    a0be:	4620      	mov	r0, r4
    a0c0:	f015 fa83 	bl	1f5ca <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    a0c4:	210e      	movs	r1, #14
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a0c6:	f015 fa80 	bl	1f5ca <atomic_set_bit>
}
    a0ca:	b002      	add	sp, #8
    a0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    a0d0:	f015 bada 	b.w	1f688 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a0d4:	7a27      	ldrb	r7, [r4, #8]
    a0d6:	b9a7      	cbnz	r7, a102 <smp_pairing_req+0x35e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a0d8:	210f      	movs	r1, #15
    a0da:	4628      	mov	r0, r5
    a0dc:	f015 fa8b 	bl	1f5f6 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a0e0:	b978      	cbnz	r0, a102 <smp_pairing_req+0x35e>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a0e2:	f8df 8024 	ldr.w	r8, [pc, #36]	; a108 <smp_pairing_req+0x364>
    a0e6:	f8d8 3000 	ldr.w	r3, [r8]
    a0ea:	b153      	cbz	r3, a102 <smp_pairing_req+0x35e>
	    bt_auth && bt_auth->pairing_confirm) {
    a0ec:	695b      	ldr	r3, [r3, #20]
    a0ee:	b143      	cbz	r3, a102 <smp_pairing_req+0x35e>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a0f0:	4628      	mov	r0, r5
    a0f2:	210a      	movs	r1, #10
    a0f4:	f015 fa69 	bl	1f5ca <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    a0f8:	f8d8 3000 	ldr.w	r3, [r8]
    a0fc:	4630      	mov	r0, r6
    a0fe:	695b      	ldr	r3, [r3, #20]
    a100:	e786      	b.n	a010 <smp_pairing_req+0x26c>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a102:	210c      	movs	r1, #12
    a104:	4620      	mov	r0, r4
    a106:	e7de      	b.n	a0c6 <smp_pairing_req+0x322>
    a108:	20001540 	.word	0x20001540

0000a10c <compute_and_check_and_send_slave_dhcheck>:
{
    a10c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    a110:	2210      	movs	r2, #16
{
    a112:	b0a3      	sub	sp, #140	; 0x8c
    a114:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    a116:	2100      	movs	r1, #0
    a118:	eb0d 0002 	add.w	r0, sp, r2
    a11c:	f013 fc81 	bl	1da22 <memset>
	switch (smp->method) {
    a120:	7a21      	ldrb	r1, [r4, #8]
    a122:	2905      	cmp	r1, #5
    a124:	f200 809b 	bhi.w	a25e <compute_and_check_and_send_slave_dhcheck+0x152>
    a128:	e8df f001 	tbb	[pc, r1]
    a12c:	09030309 	.word	0x09030309
    a130:	9099      	.short	0x9099
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a132:	2204      	movs	r2, #4
    a134:	f104 01d8 	add.w	r1, r4, #216	; 0xd8
    a138:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    a13a:	f013 fc67 	bl	1da0c <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    a13e:	4b7a      	ldr	r3, [pc, #488]	; (a328 <compute_and_check_and_send_slave_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
    a140:	f8d4 90f0 	ldr.w	r9, [r4, #240]	; 0xf0
	uint8_t m[53] = { 0x00, /* counter */
    a144:	aa14      	add	r2, sp, #80	; 0x50
    a146:	f103 0630 	add.w	r6, r3, #48	; 0x30
    a14a:	6818      	ldr	r0, [r3, #0]
    a14c:	6859      	ldr	r1, [r3, #4]
    a14e:	4615      	mov	r5, r2
    a150:	c503      	stmia	r5!, {r0, r1}
    a152:	3308      	adds	r3, #8
    a154:	42b3      	cmp	r3, r6
    a156:	462a      	mov	r2, r5
    a158:	d1f7      	bne.n	a14a <compute_and_check_and_send_slave_dhcheck+0x3e>
    a15a:	6818      	ldr	r0, [r3, #0]
    a15c:	791b      	ldrb	r3, [r3, #4]
    a15e:	6028      	str	r0, [r5, #0]
    a160:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    a162:	ad0c      	add	r5, sp, #48	; 0x30
    a164:	2220      	movs	r2, #32
    a166:	f104 0197 	add.w	r1, r4, #151	; 0x97
    a16a:	4628      	mov	r0, r5
    a16c:	f015 f959 	bl	1f422 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a170:	486e      	ldr	r0, [pc, #440]	; (a32c <compute_and_check_and_send_slave_dhcheck+0x220>)
    a172:	ab08      	add	r3, sp, #32
    a174:	2220      	movs	r2, #32
    a176:	4629      	mov	r1, r5
    a178:	f015 f96c 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
    a17c:	2800      	cmp	r0, #0
    a17e:	f040 80c9 	bne.w	a314 <compute_and_check_and_send_slave_dhcheck+0x208>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a182:	f104 0737 	add.w	r7, r4, #55	; 0x37
	sys_memcpy_swap(m + 5, n1, 16);
    a186:	2210      	movs	r2, #16
    a188:	4639      	mov	r1, r7
    a18a:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a18e:	f104 0827 	add.w	r8, r4, #39	; 0x27
	sys_memcpy_swap(m + 5, n1, 16);
    a192:	f015 f946 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    a196:	2210      	movs	r2, #16
    a198:	4641      	mov	r1, r8
    a19a:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    a19e:	f015 f940 	bl	1f422 <sys_memcpy_swap>
	m[37] = a1->type;
    a1a2:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    a1a6:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    a1aa:	2206      	movs	r2, #6
    a1ac:	f109 0190 	add.w	r1, r9, #144	; 0x90
    a1b0:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    a1b4:	f015 f935 	bl	1f422 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a1b8:	f104 06c7 	add.w	r6, r4, #199	; 0xc7
	m[44] = a2->type;
    a1bc:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    a1c0:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    a1c4:	2206      	movs	r2, #6
    a1c6:	f109 0197 	add.w	r1, r9, #151	; 0x97
    a1ca:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    a1ce:	f015 f928 	bl	1f422 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a1d2:	4633      	mov	r3, r6
    a1d4:	2235      	movs	r2, #53	; 0x35
    a1d6:	a914      	add	r1, sp, #80	; 0x50
    a1d8:	a808      	add	r0, sp, #32
    a1da:	f015 f93b 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
    a1de:	2800      	cmp	r0, #0
    a1e0:	f040 8098 	bne.w	a314 <compute_and_check_and_send_slave_dhcheck+0x208>
	sys_mem_swap(mackey, 16);
    a1e4:	2110      	movs	r1, #16
    a1e6:	4630      	mov	r0, r6
    a1e8:	f015 f925 	bl	1f436 <sys_mem_swap>
		   smp->tk)) {
    a1ec:	f104 0947 	add.w	r9, r4, #71	; 0x47
	m[0] = 0x01;
    a1f0:	2301      	movs	r3, #1
    a1f2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a1f6:	2235      	movs	r2, #53	; 0x35
    a1f8:	464b      	mov	r3, r9
    a1fa:	a914      	add	r1, sp, #80	; 0x50
    a1fc:	a808      	add	r0, sp, #32
    a1fe:	f015 f929 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
    a202:	2800      	cmp	r0, #0
    a204:	f040 8086 	bne.w	a314 <compute_and_check_and_send_slave_dhcheck+0x208>
	sys_mem_swap(ltk, 16);
    a208:	2110      	movs	r1, #16
    a20a:	4648      	mov	r0, r9
    a20c:	f015 f913 	bl	1f436 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    a210:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a214:	aa14      	add	r2, sp, #80	; 0x50
    a216:	9203      	str	r2, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a218:	f103 028f 	add.w	r2, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    a21c:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a21e:	9301      	str	r3, [sp, #4]
    a220:	f104 0311 	add.w	r3, r4, #17
    a224:	9202      	str	r2, [sp, #8]
    a226:	9300      	str	r3, [sp, #0]
    a228:	463a      	mov	r2, r7
    a22a:	ab04      	add	r3, sp, #16
    a22c:	4641      	mov	r1, r8
    a22e:	4630      	mov	r0, r6
    a230:	f015 f952 	bl	1f4d8 <smp_f6>
    a234:	b1f8      	cbz	r0, a276 <compute_and_check_and_send_slave_dhcheck+0x16a>
    a236:	493e      	ldr	r1, [pc, #248]	; (a330 <compute_and_check_and_send_slave_dhcheck+0x224>)
    a238:	4b3e      	ldr	r3, [pc, #248]	; (a334 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
    a23a:	483f      	ldr	r0, [pc, #252]	; (a338 <compute_and_check_and_send_slave_dhcheck+0x22c>)
    a23c:	1ac9      	subs	r1, r1, r3
    a23e:	08c9      	lsrs	r1, r1, #3
    a240:	0189      	lsls	r1, r1, #6
    a242:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    a246:	f011 fed4 	bl	1bff2 <log_0>
    a24a:	e012      	b.n	a272 <compute_and_check_and_send_slave_dhcheck+0x166>
		if (smp->oobd_remote) {
    a24c:	f8d4 10e4 	ldr.w	r1, [r4, #228]	; 0xe4
    a250:	2900      	cmp	r1, #0
    a252:	f43f af74 	beq.w	a13e <compute_and_check_and_send_slave_dhcheck+0x32>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    a256:	2210      	movs	r2, #16
    a258:	eb0d 0002 	add.w	r0, sp, r2
    a25c:	e76d      	b.n	a13a <compute_and_check_and_send_slave_dhcheck+0x2e>
    a25e:	4a34      	ldr	r2, [pc, #208]	; (a330 <compute_and_check_and_send_slave_dhcheck+0x224>)
    a260:	4b34      	ldr	r3, [pc, #208]	; (a334 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a262:	4836      	ldr	r0, [pc, #216]	; (a33c <compute_and_check_and_send_slave_dhcheck+0x230>)
    a264:	1ad2      	subs	r2, r2, r3
    a266:	08d2      	lsrs	r2, r2, #3
    a268:	0192      	lsls	r2, r2, #6
    a26a:	f042 0201 	orr.w	r2, r2, #1
    a26e:	f011 fecd 	bl	1c00c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    a272:	2008      	movs	r0, #8
    a274:	e049      	b.n	a30a <compute_and_check_and_send_slave_dhcheck+0x1fe>
	if (smp->method == LE_SC_OOB) {
    a276:	7a23      	ldrb	r3, [r4, #8]
    a278:	2b05      	cmp	r3, #5
    a27a:	d107      	bne.n	a28c <compute_and_check_and_send_slave_dhcheck+0x180>
		if (smp->oobd_local) {
    a27c:	f8d4 10e0 	ldr.w	r1, [r4, #224]	; 0xe0
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a280:	2210      	movs	r2, #16
    a282:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    a286:	b1e1      	cbz	r1, a2c2 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a288:	f013 fbc0 	bl	1da0c <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    a28c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a290:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a292:	f103 0296 	add.w	r2, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    a296:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a298:	9301      	str	r3, [sp, #4]
    a29a:	f104 030a 	add.w	r3, r4, #10
    a29e:	9202      	str	r2, [sp, #8]
    a2a0:	9300      	str	r3, [sp, #0]
    a2a2:	4642      	mov	r2, r8
    a2a4:	ab04      	add	r3, sp, #16
    a2a6:	4639      	mov	r1, r7
    a2a8:	4630      	mov	r0, r6
    a2aa:	f015 f915 	bl	1f4d8 <smp_f6>
    a2ae:	b158      	cbz	r0, a2c8 <compute_and_check_and_send_slave_dhcheck+0x1bc>
    a2b0:	491f      	ldr	r1, [pc, #124]	; (a330 <compute_and_check_and_send_slave_dhcheck+0x224>)
    a2b2:	4b20      	ldr	r3, [pc, #128]	; (a334 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
    a2b4:	4822      	ldr	r0, [pc, #136]	; (a340 <compute_and_check_and_send_slave_dhcheck+0x234>)
    a2b6:	1ac9      	subs	r1, r1, r3
    a2b8:	08c9      	lsrs	r1, r1, #3
    a2ba:	0189      	lsls	r1, r1, #6
    a2bc:	f041 0101 	orr.w	r1, r1, #1
    a2c0:	e7c1      	b.n	a246 <compute_and_check_and_send_slave_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
    a2c2:	f013 fbae 	bl	1da22 <memset>
    a2c6:	e7e1      	b.n	a28c <compute_and_check_and_send_slave_dhcheck+0x180>
	if (memcmp(smp->e, re, 16)) {
    a2c8:	4629      	mov	r1, r5
    a2ca:	2210      	movs	r2, #16
    a2cc:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
    a2d0:	f013 fb8b 	bl	1d9ea <memcmp>
    a2d4:	4605      	mov	r5, r0
    a2d6:	b9d8      	cbnz	r0, a310 <compute_and_check_and_send_slave_dhcheck+0x204>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    a2d8:	210d      	movs	r1, #13
    a2da:	4620      	mov	r0, r4
    a2dc:	f015 f9b5 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!buf) {
    a2e0:	4606      	mov	r6, r0
    a2e2:	2800      	cmp	r0, #0
    a2e4:	d0c5      	beq.n	a272 <compute_and_check_and_send_slave_dhcheck+0x166>
    a2e6:	2110      	movs	r1, #16
    a2e8:	3008      	adds	r0, #8
    a2ea:	f015 fcee 	bl	1fcca <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    a2ee:	2210      	movs	r2, #16
    a2f0:	a914      	add	r1, sp, #80	; 0x50
    a2f2:	f013 fb8b 	bl	1da0c <memcpy>
	smp_send(smp, buf, NULL, NULL);
    a2f6:	462a      	mov	r2, r5
    a2f8:	4631      	mov	r1, r6
    a2fa:	4620      	mov	r0, r4
    a2fc:	f015 f948 	bl	1f590 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a300:	1d20      	adds	r0, r4, #4
    a302:	2101      	movs	r1, #1
    a304:	f015 f961 	bl	1f5ca <atomic_set_bit>
	return 0;
    a308:	4628      	mov	r0, r5
}
    a30a:	b023      	add	sp, #140	; 0x8c
    a30c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a310:	200b      	movs	r0, #11
    a312:	e7fa      	b.n	a30a <compute_and_check_and_send_slave_dhcheck+0x1fe>
    a314:	4906      	ldr	r1, [pc, #24]	; (a330 <compute_and_check_and_send_slave_dhcheck+0x224>)
    a316:	4b07      	ldr	r3, [pc, #28]	; (a334 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
    a318:	480a      	ldr	r0, [pc, #40]	; (a344 <compute_and_check_and_send_slave_dhcheck+0x238>)
    a31a:	1ac9      	subs	r1, r1, r3
    a31c:	08c9      	lsrs	r1, r1, #3
    a31e:	0189      	lsls	r1, r1, #6
    a320:	f041 0101 	orr.w	r1, r1, #1
    a324:	e78f      	b.n	a246 <compute_and_check_and_send_slave_dhcheck+0x13a>
    a326:	bf00      	nop
    a328:	0002107b 	.word	0x0002107b
    a32c:	000246b5 	.word	0x000246b5
    a330:	00020f10 	.word	0x00020f10
    a334:	00020e00 	.word	0x00020e00
    a338:	00024384 	.word	0x00024384
    a33c:	00024368 	.word	0x00024368
    a340:	000243a7 	.word	0x000243a7
    a344:	000243cb 	.word	0x000243cb

0000a348 <smp_send_pairing_confirm>:
{
    a348:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    a34a:	7a04      	ldrb	r4, [r0, #8]
    a34c:	2c02      	cmp	r4, #2
{
    a34e:	4606      	mov	r6, r0
	switch (smp->method) {
    a350:	d823      	bhi.n	a39a <smp_send_pairing_confirm+0x52>
    a352:	b144      	cbz	r4, a366 <smp_send_pairing_confirm+0x1e>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a354:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
    a358:	f8d0 40d8 	ldr.w	r4, [r0, #216]	; 0xd8
    a35c:	40dc      	lsrs	r4, r3
    a35e:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    a362:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a366:	2103      	movs	r1, #3
    a368:	4630      	mov	r0, r6
    a36a:	f015 f96e 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!buf) {
    a36e:	4605      	mov	r5, r0
    a370:	b300      	cbz	r0, a3b4 <smp_send_pairing_confirm+0x6c>
    a372:	2110      	movs	r1, #16
    a374:	3008      	adds	r0, #8
    a376:	f015 fca8 	bl	1fcca <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a37a:	9000      	str	r0, [sp, #0]
    a37c:	4815      	ldr	r0, [pc, #84]	; (a3d4 <smp_send_pairing_confirm+0x8c>)
    a37e:	4623      	mov	r3, r4
    a380:	6800      	ldr	r0, [r0, #0]
    a382:	f106 0227 	add.w	r2, r6, #39	; 0x27
    a386:	f106 0157 	add.w	r1, r6, #87	; 0x57
    a38a:	f015 f87f 	bl	1f48c <smp_f4>
    a38e:	4604      	mov	r4, r0
    a390:	b1a0      	cbz	r0, a3bc <smp_send_pairing_confirm+0x74>
		net_buf_unref(buf);
    a392:	4628      	mov	r0, r5
    a394:	f00e fdb0 	bl	18ef8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a398:	e00c      	b.n	a3b4 <smp_send_pairing_confirm+0x6c>
	switch (smp->method) {
    a39a:	2c03      	cmp	r4, #3
    a39c:	d00c      	beq.n	a3b8 <smp_send_pairing_confirm+0x70>
    a39e:	4a0e      	ldr	r2, [pc, #56]	; (a3d8 <smp_send_pairing_confirm+0x90>)
    a3a0:	4b0e      	ldr	r3, [pc, #56]	; (a3dc <smp_send_pairing_confirm+0x94>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a3a2:	480f      	ldr	r0, [pc, #60]	; (a3e0 <smp_send_pairing_confirm+0x98>)
    a3a4:	1ad2      	subs	r2, r2, r3
    a3a6:	08d2      	lsrs	r2, r2, #3
    a3a8:	0192      	lsls	r2, r2, #6
    a3aa:	f042 0201 	orr.w	r2, r2, #1
    a3ae:	4621      	mov	r1, r4
    a3b0:	f011 fe2c 	bl	1c00c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    a3b4:	2008      	movs	r0, #8
    a3b6:	e00b      	b.n	a3d0 <smp_send_pairing_confirm+0x88>
	switch (smp->method) {
    a3b8:	2400      	movs	r4, #0
    a3ba:	e7d4      	b.n	a366 <smp_send_pairing_confirm+0x1e>
	smp_send(smp, buf, NULL, NULL);
    a3bc:	4602      	mov	r2, r0
    a3be:	4629      	mov	r1, r5
    a3c0:	4630      	mov	r0, r6
    a3c2:	f015 f8e5 	bl	1f590 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a3c6:	1d30      	adds	r0, r6, #4
    a3c8:	4621      	mov	r1, r4
    a3ca:	f015 f8d2 	bl	1f572 <atomic_clear_bit>
	return 0;
    a3ce:	4620      	mov	r0, r4
}
    a3d0:	b002      	add	sp, #8
    a3d2:	bd70      	pop	{r4, r5, r6, pc}
    a3d4:	200015dc 	.word	0x200015dc
    a3d8:	00020f10 	.word	0x00020f10
    a3dc:	00020e00 	.word	0x00020e00
    a3e0:	00024368 	.word	0x00024368

0000a3e4 <smp_public_key_slave>:
{
    a3e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    a3e8:	1d06      	adds	r6, r0, #4
{
    a3ea:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    a3ec:	210e      	movs	r1, #14
    a3ee:	4630      	mov	r0, r6
    a3f0:	f015 f901 	bl	1f5f6 <atomic_test_bit>
    a3f4:	b998      	cbnz	r0, a41e <smp_public_key_slave+0x3a>
	    memcmp(smp->pkey, sc_public_key, 32) == 0) {
    a3f6:	4b4e      	ldr	r3, [pc, #312]	; (a530 <smp_public_key_slave+0x14c>)
    a3f8:	2220      	movs	r2, #32
    a3fa:	6819      	ldr	r1, [r3, #0]
    a3fc:	f104 0057 	add.w	r0, r4, #87	; 0x57
    a400:	f013 faf3 	bl	1d9ea <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    a404:	b958      	cbnz	r0, a41e <smp_public_key_slave+0x3a>
    a406:	494b      	ldr	r1, [pc, #300]	; (a534 <smp_public_key_slave+0x150>)
    a408:	4b4b      	ldr	r3, [pc, #300]	; (a538 <smp_public_key_slave+0x154>)
		BT_WARN("Remote public key rejected");
    a40a:	484c      	ldr	r0, [pc, #304]	; (a53c <smp_public_key_slave+0x158>)
    a40c:	1ac9      	subs	r1, r1, r3
    a40e:	08c9      	lsrs	r1, r1, #3
    a410:	0189      	lsls	r1, r1, #6
    a412:	f041 0102 	orr.w	r1, r1, #2
    a416:	f011 fdec 	bl	1bff2 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    a41a:	2008      	movs	r0, #8
    a41c:	e02e      	b.n	a47c <smp_public_key_slave+0x98>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    a41e:	210c      	movs	r1, #12
    a420:	4620      	mov	r0, r4
    a422:	f015 f912 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!req_buf) {
    a426:	4605      	mov	r5, r0
    a428:	2800      	cmp	r0, #0
    a42a:	d0f6      	beq.n	a41a <smp_public_key_slave+0x36>
    a42c:	2140      	movs	r1, #64	; 0x40
    a42e:	3008      	adds	r0, #8
    a430:	f015 fc4b 	bl	1fcca <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a434:	f8df 80f8 	ldr.w	r8, [pc, #248]	; a530 <smp_public_key_slave+0x14c>
    a438:	2220      	movs	r2, #32
    a43a:	f8d8 1000 	ldr.w	r1, [r8]
    a43e:	4607      	mov	r7, r0
    a440:	f013 fae4 	bl	1da0c <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a444:	f8d8 1000 	ldr.w	r1, [r8]
    a448:	2220      	movs	r2, #32
    a44a:	4411      	add	r1, r2
    a44c:	18b8      	adds	r0, r7, r2
    a44e:	f013 fadd 	bl	1da0c <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    a452:	4629      	mov	r1, r5
    a454:	2200      	movs	r2, #0
    a456:	4620      	mov	r0, r4
    a458:	f015 f89a 	bl	1f590 <smp_send.constprop.0>
	switch (smp->method) {
    a45c:	7a21      	ldrb	r1, [r4, #8]
    a45e:	2905      	cmp	r1, #5
    a460:	d859      	bhi.n	a516 <smp_public_key_slave+0x132>
    a462:	e8df f001 	tbb	[pc, r1]
    a466:	3703      	.short	0x3703
    a468:	5558030d 	.word	0x5558030d
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a46c:	2104      	movs	r1, #4
    a46e:	4620      	mov	r0, r4
    a470:	f015 f8ab 	bl	1f5ca <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    a474:	f7ff ff68 	bl	a348 <smp_send_pairing_confirm>
		if (err) {
    a478:	2800      	cmp	r0, #0
    a47a:	d03c      	beq.n	a4f6 <smp_public_key_slave+0x112>
}
    a47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    a480:	2104      	movs	r1, #4
    a482:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    a486:	f004 f835 	bl	e4f4 <bt_rand>
    a48a:	2800      	cmp	r0, #0
    a48c:	d1c5      	bne.n	a41a <smp_public_key_slave+0x36>
		smp->passkey %= 1000000;
    a48e:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    a492:	4a2b      	ldr	r2, [pc, #172]	; (a540 <smp_public_key_slave+0x15c>)
	if (bt_auth && bt_auth->passkey_display) {
    a494:	4d2b      	ldr	r5, [pc, #172]	; (a544 <smp_public_key_slave+0x160>)
		smp->passkey %= 1000000;
    a496:	fbb3 f1f2 	udiv	r1, r3, r2
    a49a:	fb02 3311 	mls	r3, r2, r1, r3
    a49e:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	if (bt_auth && bt_auth->passkey_display) {
    a4a2:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    a4a4:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc
	if (bt_auth && bt_auth->passkey_display) {
    a4a8:	b163      	cbz	r3, a4c4 <smp_public_key_slave+0xe0>
    a4aa:	681b      	ldr	r3, [r3, #0]
    a4ac:	b153      	cbz	r3, a4c4 <smp_public_key_slave+0xe0>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    a4ae:	210b      	movs	r1, #11
    a4b0:	4630      	mov	r0, r6
    a4b2:	f015 f88a 	bl	1f5ca <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    a4b6:	682b      	ldr	r3, [r5, #0]
    a4b8:	f8d4 10d8 	ldr.w	r1, [r4, #216]	; 0xd8
    a4bc:	681b      	ldr	r3, [r3, #0]
    a4be:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    a4c2:	4798      	blx	r3
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a4c4:	2103      	movs	r1, #3
    a4c6:	4620      	mov	r0, r4
    a4c8:	f015 f87f 	bl	1f5ca <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    a4cc:	210e      	movs	r1, #14
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a4ce:	f015 f87c 	bl	1f5ca <atomic_set_bit>
		break;
    a4d2:	e010      	b.n	a4f6 <smp_public_key_slave+0x112>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a4d4:	4620      	mov	r0, r4
    a4d6:	2103      	movs	r1, #3
    a4d8:	f015 f877 	bl	1f5ca <atomic_set_bit>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
    a4dc:	210e      	movs	r1, #14
    a4de:	f015 f874 	bl	1f5ca <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a4e2:	4630      	mov	r0, r6
    a4e4:	210a      	movs	r1, #10
    a4e6:	f015 f870 	bl	1f5ca <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    a4ea:	4b16      	ldr	r3, [pc, #88]	; (a544 <smp_public_key_slave+0x160>)
    a4ec:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    a4f0:	681b      	ldr	r3, [r3, #0]
    a4f2:	685b      	ldr	r3, [r3, #4]
    a4f4:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    a4f6:	4630      	mov	r0, r6
    a4f8:	2107      	movs	r1, #7
    a4fa:	f015 f866 	bl	1f5ca <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    a4fe:	2008      	movs	r0, #8
    a500:	f7ff fbd2 	bl	9ca8 <smp_find>
    a504:	b990      	cbnz	r0, a52c <smp_public_key_slave+0x148>
		return smp_dhkey_generate(smp);
    a506:	4620      	mov	r0, r4
}
    a508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    a50c:	f7ff bba6 	b.w	9c5c <smp_dhkey_generate>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a510:	2104      	movs	r1, #4
    a512:	4620      	mov	r0, r4
    a514:	e7db      	b.n	a4ce <smp_public_key_slave+0xea>
    a516:	4b08      	ldr	r3, [pc, #32]	; (a538 <smp_public_key_slave+0x154>)
    a518:	4a06      	ldr	r2, [pc, #24]	; (a534 <smp_public_key_slave+0x150>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a51a:	480b      	ldr	r0, [pc, #44]	; (a548 <smp_public_key_slave+0x164>)
    a51c:	1ad2      	subs	r2, r2, r3
    a51e:	08d2      	lsrs	r2, r2, #3
    a520:	0192      	lsls	r2, r2, #6
    a522:	f042 0201 	orr.w	r2, r2, #1
    a526:	f011 fd71 	bl	1c00c <log_1>
    a52a:	e776      	b.n	a41a <smp_public_key_slave+0x36>
	return 0;
    a52c:	2000      	movs	r0, #0
    a52e:	e7a5      	b.n	a47c <smp_public_key_slave+0x98>
    a530:	200015dc 	.word	0x200015dc
    a534:	00020f10 	.word	0x00020f10
    a538:	00020e00 	.word	0x00020e00
    a53c:	000243e0 	.word	0x000243e0
    a540:	000f4240 	.word	0x000f4240
    a544:	20001540 	.word	0x20001540
    a548:	00024368 	.word	0x00024368

0000a54c <smp_public_key>:
{
    a54c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    a54e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    a550:	f100 0557 	add.w	r5, r0, #87	; 0x57
{
    a554:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    a556:	2220      	movs	r2, #32
    a558:	4631      	mov	r1, r6
    a55a:	4628      	mov	r0, r5
    a55c:	f013 fa56 	bl	1da0c <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    a560:	2220      	movs	r2, #32
    a562:	18b1      	adds	r1, r6, r2
    a564:	f104 0077 	add.w	r0, r4, #119	; 0x77
    a568:	f013 fa50 	bl	1da0c <memcpy>
	if (bt_pub_key_is_debug(smp->pkey)) {
    a56c:	4628      	mov	r0, r5
    a56e:	f7fc facd 	bl	6b0c <bt_pub_key_is_debug>
    a572:	b940      	cbnz	r0, a586 <smp_public_key+0x3a>
	if (!sc_public_key) {
    a574:	4b1a      	ldr	r3, [pc, #104]	; (a5e0 <smp_public_key+0x94>)
    a576:	681d      	ldr	r5, [r3, #0]
    a578:	bb6d      	cbnz	r5, a5d6 <smp_public_key+0x8a>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a57a:	1d20      	adds	r0, r4, #4
    a57c:	2106      	movs	r1, #6
    a57e:	f015 f824 	bl	1f5ca <atomic_set_bit>
		return 0;
    a582:	4628      	mov	r0, r5
    a584:	e026      	b.n	a5d4 <smp_public_key+0x88>
    a586:	4b17      	ldr	r3, [pc, #92]	; (a5e4 <smp_public_key+0x98>)
    a588:	4917      	ldr	r1, [pc, #92]	; (a5e8 <smp_public_key+0x9c>)
		BT_INFO("Remote is using Debug Public key");
    a58a:	4818      	ldr	r0, [pc, #96]	; (a5ec <smp_public_key+0xa0>)
    a58c:	1ac9      	subs	r1, r1, r3
    a58e:	08c9      	lsrs	r1, r1, #3
    a590:	0189      	lsls	r1, r1, #6
    a592:	f041 0103 	orr.w	r1, r1, #3
    a596:	f011 fd2c 	bl	1bff2 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    a59a:	210e      	movs	r1, #14
    a59c:	1d20      	adds	r0, r4, #4
    a59e:	f015 f814 	bl	1f5ca <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    a5a2:	f8d4 50f0 	ldr.w	r5, [r4, #240]	; 0xf0
	if (!conn->le.keys) {
    a5a6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    a5aa:	b933      	cbnz	r3, a5ba <smp_public_key+0x6e>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    a5ac:	7a28      	ldrb	r0, [r5, #8]
    a5ae:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a5b2:	f000 fff1 	bl	b598 <bt_keys_get_addr>
    a5b6:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    a5ba:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    a5be:	2b00      	cmp	r3, #0
    a5c0:	d0d8      	beq.n	a574 <smp_public_key+0x28>
    a5c2:	89da      	ldrh	r2, [r3, #14]
    a5c4:	f002 0224 	and.w	r2, r2, #36	; 0x24
    a5c8:	2a00      	cmp	r2, #0
    a5ca:	d0d3      	beq.n	a574 <smp_public_key+0x28>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    a5cc:	7b5b      	ldrb	r3, [r3, #13]
    a5ce:	079b      	lsls	r3, r3, #30
    a5d0:	d4d0      	bmi.n	a574 <smp_public_key+0x28>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    a5d2:	2003      	movs	r0, #3
}
    a5d4:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
    a5d6:	4620      	mov	r0, r4
}
    a5d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    a5dc:	f7ff bf02 	b.w	a3e4 <smp_public_key_slave>
    a5e0:	200015dc 	.word	0x200015dc
    a5e4:	00020e00 	.word	0x00020e00
    a5e8:	00020f10 	.word	0x00020f10
    a5ec:	000243fb 	.word	0x000243fb

0000a5f0 <bt_smp_connected>:
{
    a5f0:	b510      	push	{r4, lr}
	k_work_init_delayable(&smp->work, smp_timeout);
    a5f2:	4905      	ldr	r1, [pc, #20]	; (a608 <bt_smp_connected+0x18>)
    a5f4:	f1a0 04f0 	sub.w	r4, r0, #240	; 0xf0
    a5f8:	30e8      	adds	r0, #232	; 0xe8
    a5fa:	f015 ff33 	bl	20464 <k_work_init_delayable>
	smp_reset(smp);
    a5fe:	4620      	mov	r0, r4
}
    a600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    a604:	f015 b8b3 	b.w	1f76e <smp_reset>
    a608:	0000b419 	.word	0x0000b419

0000a60c <smp_pairing_confirm>:
{
    a60c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    a60e:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    a610:	1d05      	adds	r5, r0, #4
{
    a612:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    a614:	210b      	movs	r1, #11
    a616:	4628      	mov	r0, r5
    a618:	f014 ffab 	bl	1f572 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    a61c:	4631      	mov	r1, r6
    a61e:	2210      	movs	r2, #16
    a620:	f104 0017 	add.w	r0, r4, #23
    a624:	f013 f9f2 	bl	1da0c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a628:	2105      	movs	r1, #5
    a62a:	4628      	mov	r0, r5
    a62c:	f014 ffe3 	bl	1f5f6 <atomic_test_bit>
    a630:	b920      	cbnz	r0, a63c <smp_pairing_confirm+0x30>
		return legacy_pairing_confirm(smp);
    a632:	4620      	mov	r0, r4
}
    a634:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    a638:	f015 b917 	b.w	1f86a <legacy_pairing_confirm>
	switch (smp->method) {
    a63c:	7a21      	ldrb	r1, [r4, #8]
    a63e:	2901      	cmp	r1, #1
    a640:	d009      	beq.n	a656 <smp_pairing_confirm+0x4a>
    a642:	2902      	cmp	r1, #2
    a644:	d113      	bne.n	a66e <smp_pairing_confirm+0x62>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a646:	4620      	mov	r0, r4
    a648:	2104      	movs	r1, #4
    a64a:	f014 ffbe 	bl	1f5ca <atomic_set_bit>
}
    a64e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    a652:	f7ff be79 	b.w	a348 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a656:	210a      	movs	r1, #10
    a658:	4628      	mov	r0, r5
    a65a:	f014 ffcc 	bl	1f5f6 <atomic_test_bit>
    a65e:	2800      	cmp	r0, #0
    a660:	d0f1      	beq.n	a646 <smp_pairing_confirm+0x3a>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a662:	4628      	mov	r0, r5
    a664:	2100      	movs	r1, #0
    a666:	f014 ffb0 	bl	1f5ca <atomic_set_bit>
			return 0;
    a66a:	2000      	movs	r0, #0
}
    a66c:	bd70      	pop	{r4, r5, r6, pc}
    a66e:	4b06      	ldr	r3, [pc, #24]	; (a688 <smp_pairing_confirm+0x7c>)
    a670:	4a06      	ldr	r2, [pc, #24]	; (a68c <smp_pairing_confirm+0x80>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a672:	4807      	ldr	r0, [pc, #28]	; (a690 <smp_pairing_confirm+0x84>)
    a674:	1ad2      	subs	r2, r2, r3
    a676:	08d2      	lsrs	r2, r2, #3
    a678:	0192      	lsls	r2, r2, #6
    a67a:	f042 0201 	orr.w	r2, r2, #1
    a67e:	f011 fcc5 	bl	1c00c <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    a682:	2008      	movs	r0, #8
    a684:	e7f2      	b.n	a66c <smp_pairing_confirm+0x60>
    a686:	bf00      	nop
    a688:	00020e00 	.word	0x00020e00
    a68c:	00020f10 	.word	0x00020f10
    a690:	00024368 	.word	0x00024368

0000a694 <smp_pairing_random>:
{
    a694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a698:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a69a:	f100 0737 	add.w	r7, r0, #55	; 0x37
    a69e:	6889      	ldr	r1, [r1, #8]
{
    a6a0:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a6a2:	2210      	movs	r2, #16
    a6a4:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a6a6:	1d26      	adds	r6, r4, #4
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    a6a8:	f013 f9b0 	bl	1da0c <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a6ac:	2105      	movs	r1, #5
    a6ae:	4630      	mov	r0, r6
    a6b0:	f014 ffa1 	bl	1f5f6 <atomic_test_bit>
    a6b4:	2800      	cmp	r0, #0
    a6b6:	d147      	bne.n	a748 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    a6b8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a6bc:	f104 0847 	add.w	r8, r4, #71	; 0x47
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    a6c0:	f103 0296 	add.w	r2, r3, #150	; 0x96
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a6c4:	ad0a      	add	r5, sp, #40	; 0x28
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    a6c6:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    a6c8:	9201      	str	r2, [sp, #4]
    a6ca:	9300      	str	r3, [sp, #0]
    a6cc:	9502      	str	r5, [sp, #8]
    a6ce:	f104 0310 	add.w	r3, r4, #16
    a6d2:	f104 0209 	add.w	r2, r4, #9
    a6d6:	4639      	mov	r1, r7
    a6d8:	4640      	mov	r0, r8
    a6da:	f015 f86b 	bl	1f7b4 <smp_c1>
	if (err) {
    a6de:	bb18      	cbnz	r0, a728 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    a6e0:	2210      	movs	r2, #16
    a6e2:	4629      	mov	r1, r5
    a6e4:	f104 0017 	add.w	r0, r4, #23
    a6e8:	f013 f97f 	bl	1d9ea <memcmp>
    a6ec:	2800      	cmp	r0, #0
    a6ee:	f040 8095 	bne.w	a81c <smp_pairing_random+0x188>
	memcpy(out, r2, 8);
    a6f2:	2208      	movs	r2, #8
    a6f4:	4639      	mov	r1, r7
    a6f6:	4628      	mov	r0, r5
    a6f8:	f013 f988 	bl	1da0c <memcpy>
	memcpy(out + 8, r1, 8);
    a6fc:	2208      	movs	r2, #8
    a6fe:	f104 0127 	add.w	r1, r4, #39	; 0x27
    a702:	a80c      	add	r0, sp, #48	; 0x30
    a704:	f013 f982 	bl	1da0c <memcpy>
	return bt_encrypt_le(k, out, out);
    a708:	462a      	mov	r2, r5
    a70a:	4629      	mov	r1, r5
    a70c:	4640      	mov	r0, r8
    a70e:	f003 fef3 	bl	e4f8 <bt_encrypt_le>
		if (err) {
    a712:	b158      	cbz	r0, a72c <smp_pairing_random+0x98>
    a714:	4973      	ldr	r1, [pc, #460]	; (a8e4 <smp_pairing_random+0x250>)
    a716:	4b74      	ldr	r3, [pc, #464]	; (a8e8 <smp_pairing_random+0x254>)
			BT_ERR("Calculate STK failed");
    a718:	4874      	ldr	r0, [pc, #464]	; (a8ec <smp_pairing_random+0x258>)
    a71a:	1ac9      	subs	r1, r1, r3
    a71c:	08c9      	lsrs	r1, r1, #3
    a71e:	0189      	lsls	r1, r1, #6
    a720:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    a724:	f011 fc65 	bl	1bff2 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    a728:	2508      	movs	r5, #8
    a72a:	e078      	b.n	a81e <smp_pairing_random+0x18a>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    a72c:	4629      	mov	r1, r5
    a72e:	2210      	movs	r2, #16
    a730:	4640      	mov	r0, r8
    a732:	f013 f96b 	bl	1da0c <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a736:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a738:	4630      	mov	r0, r6
    a73a:	f014 ff46 	bl	1f5ca <atomic_set_bit>
	return smp_send_pairing_random(smp);
    a73e:	4620      	mov	r0, r4
    a740:	f014 ffbb 	bl	1f6ba <smp_send_pairing_random>
    a744:	4605      	mov	r5, r0
    a746:	e06a      	b.n	a81e <smp_pairing_random+0x18a>
	switch (smp->method) {
    a748:	7a21      	ldrb	r1, [r4, #8]
    a74a:	2905      	cmp	r1, #5
    a74c:	f200 80aa 	bhi.w	a8a4 <smp_pairing_random+0x210>
    a750:	e8df f001 	tbb	[pc, r1]
    a754:	0341413b 	.word	0x0341413b
    a758:	8ba8      	.short	0x8ba8
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    a75a:	4b65      	ldr	r3, [pc, #404]	; (a8f0 <smp_pairing_random+0x25c>)
    a75c:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    a75e:	2220      	movs	r2, #32
    a760:	f104 0157 	add.w	r1, r4, #87	; 0x57
    a764:	a80a      	add	r0, sp, #40	; 0x28
    a766:	f014 fe5c 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    a76a:	2220      	movs	r2, #32
    a76c:	4629      	mov	r1, r5
    a76e:	a812      	add	r0, sp, #72	; 0x48
    a770:	f014 fe57 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    a774:	2210      	movs	r2, #16
    a776:	f104 0127 	add.w	r1, r4, #39	; 0x27
    a77a:	a81a      	add	r0, sp, #104	; 0x68
    a77c:	f014 fe51 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    a780:	2210      	movs	r2, #16
    a782:	4639      	mov	r1, r7
    a784:	a806      	add	r0, sp, #24
    a786:	f014 fe4c 	bl	1f422 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    a78a:	ab06      	add	r3, sp, #24
    a78c:	2250      	movs	r2, #80	; 0x50
    a78e:	a90a      	add	r1, sp, #40	; 0x28
    a790:	4618      	mov	r0, r3
    a792:	f014 fe5f 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
    a796:	2800      	cmp	r0, #0
    a798:	d1c6      	bne.n	a728 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    a79a:	2204      	movs	r2, #4
    a79c:	a909      	add	r1, sp, #36	; 0x24
    a79e:	a805      	add	r0, sp, #20
    a7a0:	f013 f934 	bl	1da0c <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a7a4:	9b05      	ldr	r3, [sp, #20]
    a7a6:	4a53      	ldr	r2, [pc, #332]	; (a8f4 <smp_pairing_random+0x260>)
    a7a8:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a7aa:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a7ac:	fbb3 f1f2 	udiv	r1, r3, r2
    a7b0:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a7b4:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a7b6:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a7b8:	f014 ff07 	bl	1f5ca <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    a7bc:	4b4e      	ldr	r3, [pc, #312]	; (a8f8 <smp_pairing_random+0x264>)
    a7be:	9905      	ldr	r1, [sp, #20]
    a7c0:	681b      	ldr	r3, [r3, #0]
    a7c2:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    a7c6:	689b      	ldr	r3, [r3, #8]
    a7c8:	4798      	blx	r3
	atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a7ca:	210d      	movs	r1, #13
    a7cc:	4620      	mov	r0, r4
    a7ce:	f014 fefc 	bl	1f5ca <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a7d2:	2110      	movs	r1, #16
    a7d4:	e7b0      	b.n	a738 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a7d6:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
    a7da:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a7de:	4944      	ldr	r1, [pc, #272]	; (a8f0 <smp_pairing_random+0x25c>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a7e0:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a7e2:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a7e4:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a7e8:	9500      	str	r5, [sp, #0]
    a7ea:	6809      	ldr	r1, [r1, #0]
    a7ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a7f0:	463a      	mov	r2, r7
    a7f2:	f104 0057 	add.w	r0, r4, #87	; 0x57
    a7f6:	f014 fe49 	bl	1f48c <smp_f4>
    a7fa:	b140      	cbz	r0, a80e <smp_pairing_random+0x17a>
    a7fc:	4939      	ldr	r1, [pc, #228]	; (a8e4 <smp_pairing_random+0x250>)
    a7fe:	4b3a      	ldr	r3, [pc, #232]	; (a8e8 <smp_pairing_random+0x254>)
		BT_ERR("Calculate confirm failed");
    a800:	483e      	ldr	r0, [pc, #248]	; (a8fc <smp_pairing_random+0x268>)
    a802:	1ac9      	subs	r1, r1, r3
    a804:	08c9      	lsrs	r1, r1, #3
    a806:	0189      	lsls	r1, r1, #6
    a808:	f041 0101 	orr.w	r1, r1, #1
    a80c:	e78a      	b.n	a724 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    a80e:	2210      	movs	r2, #16
    a810:	4629      	mov	r1, r5
    a812:	f104 0017 	add.w	r0, r4, #23
    a816:	f013 f8e8 	bl	1d9ea <memcmp>
    a81a:	b120      	cbz	r0, a826 <smp_pairing_random+0x192>
		return BT_SMP_ERR_CONFIRM_FAILED;
    a81c:	2504      	movs	r5, #4
}
    a81e:	4628      	mov	r0, r5
    a820:	b01e      	add	sp, #120	; 0x78
    a822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(smp->allowed_cmds,
    a826:	2103      	movs	r1, #3
    a828:	4620      	mov	r0, r4
    a82a:	f014 fece 	bl	1f5ca <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    a82e:	f014 ff44 	bl	1f6ba <smp_send_pairing_random>
		if (err) {
    a832:	4605      	mov	r5, r0
    a834:	2800      	cmp	r0, #0
    a836:	d1f2      	bne.n	a81e <smp_pairing_random+0x18a>
		smp->passkey_round++;
    a838:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    a83c:	3301      	adds	r3, #1
    a83e:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    a840:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    a842:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
		if (smp->passkey_round == 20U) {
    a846:	d108      	bne.n	a85a <smp_pairing_random+0x1c6>
			atomic_set_bit(smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a848:	4620      	mov	r0, r4
    a84a:	210d      	movs	r1, #13
    a84c:	f014 febd 	bl	1f5ca <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    a850:	2110      	movs	r1, #16
    a852:	4630      	mov	r0, r6
    a854:	f014 feb9 	bl	1f5ca <atomic_set_bit>
			return 0;
    a858:	e7e1      	b.n	a81e <smp_pairing_random+0x18a>
		if (bt_rand(smp->prnd, 16)) {
    a85a:	2110      	movs	r1, #16
    a85c:	f104 0027 	add.w	r0, r4, #39	; 0x27
    a860:	f003 fe48 	bl	e4f4 <bt_rand>
    a864:	2800      	cmp	r0, #0
    a866:	d0da      	beq.n	a81e <smp_pairing_random+0x18a>
    a868:	e75e      	b.n	a728 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    a86a:	2110      	movs	r1, #16
    a86c:	f104 0027 	add.w	r0, r4, #39	; 0x27
    a870:	f003 fe40 	bl	e4f4 <bt_rand>
    a874:	2800      	cmp	r0, #0
    a876:	f47f af57 	bne.w	a728 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    a87a:	4f1f      	ldr	r7, [pc, #124]	; (a8f8 <smp_pairing_random+0x264>)
    a87c:	683b      	ldr	r3, [r7, #0]
    a87e:	b1e3      	cbz	r3, a8ba <smp_pairing_random+0x226>
    a880:	68db      	ldr	r3, [r3, #12]
    a882:	b1d3      	cbz	r3, a8ba <smp_pairing_random+0x226>
			struct bt_conn_oob_info info = {
    a884:	4b1e      	ldr	r3, [pc, #120]	; (a900 <smp_pairing_random+0x26c>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    a886:	7ae2      	ldrb	r2, [r4, #11]
			struct bt_conn_oob_info info = {
    a888:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    a88c:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    a890:	7ca3      	ldrb	r3, [r4, #18]
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    a892:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    a894:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    a898:	d411      	bmi.n	a8be <smp_pairing_random+0x22a>
				     BT_CONN_OOB_BOTH_PEERS :
    a89a:	2b00      	cmp	r3, #0
    a89c:	bf0c      	ite	eq
    a89e:	2003      	moveq	r0, #3
    a8a0:	2001      	movne	r0, #1
    a8a2:	e00f      	b.n	a8c4 <smp_pairing_random+0x230>
    a8a4:	4b10      	ldr	r3, [pc, #64]	; (a8e8 <smp_pairing_random+0x254>)
    a8a6:	4a0f      	ldr	r2, [pc, #60]	; (a8e4 <smp_pairing_random+0x250>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    a8a8:	4816      	ldr	r0, [pc, #88]	; (a904 <smp_pairing_random+0x270>)
    a8aa:	1ad2      	subs	r2, r2, r3
    a8ac:	08d2      	lsrs	r2, r2, #3
    a8ae:	0192      	lsls	r2, r2, #6
    a8b0:	f042 0201 	orr.w	r2, r2, #1
    a8b4:	f011 fbaa 	bl	1c00c <log_1>
    a8b8:	e736      	b.n	a728 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    a8ba:	2502      	movs	r5, #2
    a8bc:	e7af      	b.n	a81e <smp_pairing_random+0x18a>
				     BT_CONN_OOB_BOTH_PEERS :
    a8be:	2b00      	cmp	r3, #0
    a8c0:	bf18      	it	ne
    a8c2:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    a8c4:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    a8c6:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    a8ca:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    a8ce:	4630      	mov	r0, r6
    a8d0:	210c      	movs	r1, #12
    a8d2:	f014 fe7a 	bl	1f5ca <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    a8d6:	683b      	ldr	r3, [r7, #0]
    a8d8:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
    a8dc:	68db      	ldr	r3, [r3, #12]
    a8de:	a90a      	add	r1, sp, #40	; 0x28
    a8e0:	4798      	blx	r3
			return 0;
    a8e2:	e79c      	b.n	a81e <smp_pairing_random+0x18a>
    a8e4:	00020f10 	.word	0x00020f10
    a8e8:	00020e00 	.word	0x00020e00
    a8ec:	0002441c 	.word	0x0002441c
    a8f0:	200015dc 	.word	0x200015dc
    a8f4:	000f4240 	.word	0x000f4240
    a8f8:	20001540 	.word	0x20001540
    a8fc:	00024431 	.word	0x00024431
    a900:	0002107b 	.word	0x0002107b
    a904:	00024368 	.word	0x00024368

0000a908 <bt_smp_sign_verify>:
{
    a908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    a90a:	898b      	ldrh	r3, [r1, #12]
    a90c:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    a90e:	6889      	ldr	r1, [r1, #8]
{
    a910:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    a912:	3b0c      	subs	r3, #12
    a914:	4419      	add	r1, r3
    a916:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    a918:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    a91c:	a801      	add	r0, sp, #4
    a91e:	f013 f875 	bl	1da0c <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    a922:	7a31      	ldrb	r1, [r6, #8]
    a924:	462a      	mov	r2, r5
    a926:	2010      	movs	r0, #16
    a928:	f000 fe6c 	bl	b604 <bt_keys_find>
	if (!keys) {
    a92c:	4606      	mov	r6, r0
    a92e:	b9a0      	cbnz	r0, a95a <bt_smp_sign_verify+0x52>
    a930:	4a2e      	ldr	r2, [pc, #184]	; (a9ec <bt_smp_sign_verify+0xe4>)
    a932:	4c2f      	ldr	r4, [pc, #188]	; (a9f0 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    a934:	4628      	mov	r0, r5
    a936:	1aa4      	subs	r4, r4, r2
    a938:	f7f9 fda6 	bl	4488 <bt_addr_le_str_real>
    a93c:	f7f7 fee0 	bl	2700 <z_log_strdup>
    a940:	08e4      	lsrs	r4, r4, #3
    a942:	01a4      	lsls	r4, r4, #6
    a944:	f044 0401 	orr.w	r4, r4, #1
    a948:	4601      	mov	r1, r0
    a94a:	4622      	mov	r2, r4
    a94c:	4829      	ldr	r0, [pc, #164]	; (a9f4 <bt_smp_sign_verify+0xec>)
    a94e:	f011 fb5d 	bl	1c00c <log_1>
		return -ENOENT;
    a952:	f06f 0001 	mvn.w	r0, #1
}
    a956:	b004      	add	sp, #16
    a958:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    a95a:	6e43      	ldr	r3, [r0, #100]	; 0x64
    a95c:	9300      	str	r3, [sp, #0]
    a95e:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    a960:	68a0      	ldr	r0, [r4, #8]
    a962:	3b0c      	subs	r3, #12
    a964:	2204      	movs	r2, #4
    a966:	4669      	mov	r1, sp
    a968:	4418      	add	r0, r3
    a96a:	f013 f84f 	bl	1da0c <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    a96e:	89a2      	ldrh	r2, [r4, #12]
    a970:	68a1      	ldr	r1, [r4, #8]
    a972:	3a0c      	subs	r2, #12
    a974:	b292      	uxth	r2, r2
    a976:	f106 0054 	add.w	r0, r6, #84	; 0x54
    a97a:	f7ff f8b5 	bl	9ae8 <smp_sign_buf>
	if (err) {
    a97e:	b198      	cbz	r0, a9a8 <bt_smp_sign_verify+0xa0>
    a980:	4a1a      	ldr	r2, [pc, #104]	; (a9ec <bt_smp_sign_verify+0xe4>)
    a982:	4c1b      	ldr	r4, [pc, #108]	; (a9f0 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    a984:	4628      	mov	r0, r5
    a986:	1aa4      	subs	r4, r4, r2
    a988:	f7f9 fd7e 	bl	4488 <bt_addr_le_str_real>
    a98c:	f7f7 feb8 	bl	2700 <z_log_strdup>
    a990:	08e4      	lsrs	r4, r4, #3
    a992:	01a4      	lsls	r4, r4, #6
    a994:	f044 0401 	orr.w	r4, r4, #1
    a998:	4601      	mov	r1, r0
    a99a:	4622      	mov	r2, r4
    a99c:	4816      	ldr	r0, [pc, #88]	; (a9f8 <bt_smp_sign_verify+0xf0>)
    a99e:	f011 fb35 	bl	1c00c <log_1>
		return -EIO;
    a9a2:	f06f 0004 	mvn.w	r0, #4
    a9a6:	e7d6      	b.n	a956 <bt_smp_sign_verify+0x4e>
    a9a8:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    a9aa:	68a1      	ldr	r1, [r4, #8]
    a9ac:	3b0c      	subs	r3, #12
    a9ae:	220c      	movs	r2, #12
    a9b0:	4419      	add	r1, r3
    a9b2:	a801      	add	r0, sp, #4
    a9b4:	f013 f819 	bl	1d9ea <memcmp>
    a9b8:	b198      	cbz	r0, a9e2 <bt_smp_sign_verify+0xda>
    a9ba:	4a0c      	ldr	r2, [pc, #48]	; (a9ec <bt_smp_sign_verify+0xe4>)
    a9bc:	4c0c      	ldr	r4, [pc, #48]	; (a9f0 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    a9be:	4628      	mov	r0, r5
    a9c0:	1aa4      	subs	r4, r4, r2
    a9c2:	f7f9 fd61 	bl	4488 <bt_addr_le_str_real>
    a9c6:	f7f7 fe9b 	bl	2700 <z_log_strdup>
    a9ca:	08e4      	lsrs	r4, r4, #3
    a9cc:	01a4      	lsls	r4, r4, #6
    a9ce:	f044 0401 	orr.w	r4, r4, #1
    a9d2:	4601      	mov	r1, r0
    a9d4:	4622      	mov	r2, r4
    a9d6:	4809      	ldr	r0, [pc, #36]	; (a9fc <bt_smp_sign_verify+0xf4>)
    a9d8:	f011 fb18 	bl	1c00c <log_1>
		return -EBADMSG;
    a9dc:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    a9e0:	e7b9      	b.n	a956 <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    a9e2:	6e73      	ldr	r3, [r6, #100]	; 0x64
    a9e4:	3301      	adds	r3, #1
    a9e6:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    a9e8:	e7b5      	b.n	a956 <bt_smp_sign_verify+0x4e>
    a9ea:	bf00      	nop
    a9ec:	00020e00 	.word	0x00020e00
    a9f0:	00020f10 	.word	0x00020f10
    a9f4:	0002444a 	.word	0x0002444a
    a9f8:	0002446c 	.word	0x0002446c
    a9fc:	0002448e 	.word	0x0002448e

0000aa00 <bt_smp_sign>:
{
    aa00:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    aa02:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    aa06:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    aa08:	462a      	mov	r2, r5
    aa0a:	7a01      	ldrb	r1, [r0, #8]
    aa0c:	2008      	movs	r0, #8
    aa0e:	f000 fdf9 	bl	b604 <bt_keys_find>
	if (!keys) {
    aa12:	4604      	mov	r4, r0
    aa14:	b9a0      	cbnz	r0, aa40 <bt_smp_sign+0x40>
    aa16:	4a23      	ldr	r2, [pc, #140]	; (aaa4 <bt_smp_sign+0xa4>)
    aa18:	4c23      	ldr	r4, [pc, #140]	; (aaa8 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    aa1a:	4628      	mov	r0, r5
    aa1c:	1aa4      	subs	r4, r4, r2
    aa1e:	f7f9 fd33 	bl	4488 <bt_addr_le_str_real>
    aa22:	f7f7 fe6d 	bl	2700 <z_log_strdup>
    aa26:	08e4      	lsrs	r4, r4, #3
    aa28:	01a4      	lsls	r4, r4, #6
    aa2a:	f044 0401 	orr.w	r4, r4, #1
    aa2e:	4601      	mov	r1, r0
    aa30:	4622      	mov	r2, r4
    aa32:	481e      	ldr	r0, [pc, #120]	; (aaac <bt_smp_sign+0xac>)
    aa34:	f011 faea 	bl	1c00c <log_1>
		return -ENOENT;
    aa38:	f06f 0001 	mvn.w	r0, #1
}
    aa3c:	b002      	add	sp, #8
    aa3e:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
    aa40:	210c      	movs	r1, #12
    aa42:	f106 0008 	add.w	r0, r6, #8
    aa46:	f015 f940 	bl	1fcca <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    aa4a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    aa4c:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
    aa4e:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    aa50:	68b0      	ldr	r0, [r6, #8]
    aa52:	2204      	movs	r2, #4
    aa54:	3b0c      	subs	r3, #12
    aa56:	eb0d 0102 	add.w	r1, sp, r2
    aa5a:	4418      	add	r0, r3
    aa5c:	f012 ffd6 	bl	1da0c <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    aa60:	89b2      	ldrh	r2, [r6, #12]
    aa62:	68b1      	ldr	r1, [r6, #8]
    aa64:	3a0c      	subs	r2, #12
    aa66:	b292      	uxth	r2, r2
    aa68:	f104 0040 	add.w	r0, r4, #64	; 0x40
    aa6c:	f7ff f83c 	bl	9ae8 <smp_sign_buf>
	if (err) {
    aa70:	b198      	cbz	r0, aa9a <bt_smp_sign+0x9a>
    aa72:	4a0c      	ldr	r2, [pc, #48]	; (aaa4 <bt_smp_sign+0xa4>)
    aa74:	4c0c      	ldr	r4, [pc, #48]	; (aaa8 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    aa76:	4628      	mov	r0, r5
    aa78:	1aa4      	subs	r4, r4, r2
    aa7a:	f7f9 fd05 	bl	4488 <bt_addr_le_str_real>
    aa7e:	f7f7 fe3f 	bl	2700 <z_log_strdup>
    aa82:	08e4      	lsrs	r4, r4, #3
    aa84:	01a4      	lsls	r4, r4, #6
    aa86:	f044 0401 	orr.w	r4, r4, #1
    aa8a:	4601      	mov	r1, r0
    aa8c:	4622      	mov	r2, r4
    aa8e:	4808      	ldr	r0, [pc, #32]	; (aab0 <bt_smp_sign+0xb0>)
    aa90:	f011 fabc 	bl	1c00c <log_1>
		return -EIO;
    aa94:	f06f 0004 	mvn.w	r0, #4
    aa98:	e7d0      	b.n	aa3c <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    aa9a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    aa9c:	3301      	adds	r3, #1
    aa9e:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    aaa0:	e7cc      	b.n	aa3c <bt_smp_sign+0x3c>
    aaa2:	bf00      	nop
    aaa4:	00020e00 	.word	0x00020e00
    aaa8:	00020f10 	.word	0x00020f10
    aaac:	000244b0 	.word	0x000244b0
    aab0:	0002446c 	.word	0x0002446c

0000aab4 <bt_smp_start_security>:
{
    aab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    aab8:	78c4      	ldrb	r4, [r0, #3]
    aaba:	2c01      	cmp	r4, #1
{
    aabc:	4605      	mov	r5, r0
	switch (conn->role) {
    aabe:	d005      	beq.n	aacc <bt_smp_start_security+0x18>
		return -EINVAL;
    aac0:	f06f 0415 	mvn.w	r4, #21
}
    aac4:	4620      	mov	r0, r4
    aac6:	b003      	add	sp, #12
    aac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    aacc:	f7ff f84c 	bl	9b68 <smp_chan_get>
	if (!smp) {
    aad0:	4606      	mov	r6, r0
    aad2:	2800      	cmp	r0, #0
    aad4:	f000 80a4 	beq.w	ac20 <bt_smp_start_security+0x16c>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    aad8:	1d07      	adds	r7, r0, #4
    aada:	2104      	movs	r1, #4
    aadc:	4638      	mov	r0, r7
    aade:	f014 fd8a 	bl	1f5f6 <atomic_test_bit>
    aae2:	2800      	cmp	r0, #0
    aae4:	f040 809f 	bne.w	ac26 <bt_smp_start_security+0x172>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    aae8:	2103      	movs	r1, #3
    aaea:	4638      	mov	r0, r7
    aaec:	f014 fd83 	bl	1f5f6 <atomic_test_bit>
    aaf0:	b110      	cbz	r0, aaf8 <bt_smp_start_security+0x44>
		return -EBUSY;
    aaf2:	f06f 040f 	mvn.w	r4, #15
    aaf6:	e7e5      	b.n	aac4 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    aaf8:	4621      	mov	r1, r4
    aafa:	4638      	mov	r0, r7
    aafc:	f014 fd7b 	bl	1f5f6 <atomic_test_bit>
    ab00:	2800      	cmp	r0, #0
    ab02:	d1f6      	bne.n	aaf2 <bt_smp_start_security+0x3e>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    ab04:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    ab06:	2b03      	cmp	r3, #3
    ab08:	d03d      	beq.n	ab86 <bt_smp_start_security+0xd2>
    ab0a:	d82c      	bhi.n	ab66 <bt_smp_start_security+0xb2>
    ab0c:	3b01      	subs	r3, #1
    ab0e:	2b01      	cmp	r3, #1
    ab10:	d946      	bls.n	aba0 <bt_smp_start_security+0xec>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    ab12:	210b      	movs	r1, #11
    ab14:	1d28      	adds	r0, r5, #4
    ab16:	f014 fd6e 	bl	1f5f6 <atomic_test_bit>
    ab1a:	2800      	cmp	r0, #0
    ab1c:	d1d0      	bne.n	aac0 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    ab1e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ab22:	b983      	cbnz	r3, ab46 <bt_smp_start_security+0x92>
						     conn->id, &conn->le.dst);
    ab24:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    ab28:	7a29      	ldrb	r1, [r5, #8]
    ab2a:	4622      	mov	r2, r4
    ab2c:	2020      	movs	r0, #32
    ab2e:	f000 fd69 	bl	b604 <bt_keys_find>
    ab32:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    ab36:	b930      	cbnz	r0, ab46 <bt_smp_start_security+0x92>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    ab38:	7a29      	ldrb	r1, [r5, #8]
    ab3a:	4622      	mov	r2, r4
    ab3c:	2004      	movs	r0, #4
    ab3e:	f000 fd61 	bl	b604 <bt_keys_find>
    ab42:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    ab46:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    ab4a:	2b00      	cmp	r3, #0
    ab4c:	d0b8      	beq.n	aac0 <bt_smp_start_security+0xc>
    ab4e:	89da      	ldrh	r2, [r3, #14]
    ab50:	f002 0224 	and.w	r2, r2, #36	; 0x24
    ab54:	2a00      	cmp	r2, #0
    ab56:	d0b3      	beq.n	aac0 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    ab58:	7aaa      	ldrb	r2, [r5, #10]
    ab5a:	2a02      	cmp	r2, #2
    ab5c:	d920      	bls.n	aba0 <bt_smp_start_security+0xec>
    ab5e:	7b5b      	ldrb	r3, [r3, #13]
    ab60:	07db      	lsls	r3, r3, #31
    ab62:	d5ad      	bpl.n	aac0 <bt_smp_start_security+0xc>
    ab64:	e01c      	b.n	aba0 <bt_smp_start_security+0xec>
	switch (conn->required_sec_level) {
    ab66:	2b04      	cmp	r3, #4
    ab68:	d1d3      	bne.n	ab12 <bt_smp_start_security+0x5e>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ab6a:	f7fe ff97 	bl	9a9c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ab6e:	2803      	cmp	r0, #3
    ab70:	d104      	bne.n	ab7c <bt_smp_start_security+0xc8>
    ab72:	4b2e      	ldr	r3, [pc, #184]	; (ac2c <bt_smp_start_security+0x178>)
    ab74:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ab76:	b1f3      	cbz	r3, abb6 <bt_smp_start_security+0x102>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    ab78:	68dc      	ldr	r4, [r3, #12]
    ab7a:	b10c      	cbz	r4, ab80 <bt_smp_start_security+0xcc>
    ab7c:	4b2c      	ldr	r3, [pc, #176]	; (ac30 <bt_smp_start_security+0x17c>)
    ab7e:	781c      	ldrb	r4, [r3, #0]
    ab80:	f004 0401 	and.w	r4, r4, #1
    ab84:	e00a      	b.n	ab9c <bt_smp_start_security+0xe8>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ab86:	f7fe ff89 	bl	9a9c <get_io_capa>
    ab8a:	2803      	cmp	r0, #3
    ab8c:	d106      	bne.n	ab9c <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
    ab8e:	4b27      	ldr	r3, [pc, #156]	; (ac2c <bt_smp_start_security+0x178>)
    ab90:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    ab92:	b11c      	cbz	r4, ab9c <bt_smp_start_security+0xe8>
		       (bt_auth && bt_auth->oob_data_request);
    ab94:	68e4      	ldr	r4, [r4, #12]
    ab96:	3c00      	subs	r4, #0
    ab98:	bf18      	it	ne
    ab9a:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    ab9c:	2c00      	cmp	r4, #0
    ab9e:	d0b8      	beq.n	ab12 <bt_smp_start_security+0x5e>
	if (!conn->le.keys) {
    aba0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    aba4:	b14b      	cbz	r3, abba <bt_smp_start_security+0x106>
	if (smp_init(smp) != 0) {
    aba6:	4630      	mov	r0, r6
    aba8:	f7ff f83c 	bl	9c24 <smp_init>
    abac:	4604      	mov	r4, r0
    abae:	b180      	cbz	r0, abd2 <bt_smp_start_security+0x11e>
		return -ENOBUFS;
    abb0:	f06f 0468 	mvn.w	r4, #104	; 0x68
    abb4:	e786      	b.n	aac4 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    abb6:	2400      	movs	r4, #0
    abb8:	e7e2      	b.n	ab80 <bt_smp_start_security+0xcc>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    abba:	7a28      	ldrb	r0, [r5, #8]
    abbc:	f105 0188 	add.w	r1, r5, #136	; 0x88
    abc0:	f000 fcea 	bl	b598 <bt_keys_get_addr>
    abc4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    abc8:	2800      	cmp	r0, #0
    abca:	d1ec      	bne.n	aba6 <bt_smp_start_security+0xf2>
			return -ENOMEM;
    abcc:	f06f 040b 	mvn.w	r4, #11
    abd0:	e778      	b.n	aac4 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    abd2:	210b      	movs	r1, #11
    abd4:	4630      	mov	r0, r6
    abd6:	f014 fd38 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!req_buf) {
    abda:	4680      	mov	r8, r0
    abdc:	2800      	cmp	r0, #0
    abde:	d0e7      	beq.n	abb0 <bt_smp_start_security+0xfc>
	return net_buf_simple_add(&buf->b, len);
    abe0:	2101      	movs	r1, #1
    abe2:	3008      	adds	r0, #8
    abe4:	f015 f871 	bl	1fcca <net_buf_simple_add>
    abe8:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    abea:	2009      	movs	r0, #9
    abec:	f7fe fffc 	bl	9be8 <get_auth.constprop.0>
    abf0:	4623      	mov	r3, r4
    abf2:	f889 0000 	strb.w	r0, [r9]
    abf6:	4642      	mov	r2, r8
    abf8:	9400      	str	r4, [sp, #0]
    abfa:	2106      	movs	r1, #6
    abfc:	4628      	mov	r0, r5
    abfe:	f013 fccd 	bl	1e59c <bt_l2cap_send_cb>
	if (err) {
    ac02:	4604      	mov	r4, r0
    ac04:	b118      	cbz	r0, ac0e <bt_smp_start_security+0x15a>
		net_buf_unref(req_buf);
    ac06:	4640      	mov	r0, r8
    ac08:	f00e f976 	bl	18ef8 <net_buf_unref>
		return err;
    ac0c:	e75a      	b.n	aac4 <bt_smp_start_security+0x10>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    ac0e:	4638      	mov	r0, r7
    ac10:	210f      	movs	r1, #15
    ac12:	f014 fcda 	bl	1f5ca <atomic_set_bit>
	atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    ac16:	2101      	movs	r1, #1
    ac18:	4630      	mov	r0, r6
    ac1a:	f014 fcd6 	bl	1f5ca <atomic_set_bit>
	return 0;
    ac1e:	e751      	b.n	aac4 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    ac20:	f06f 047f 	mvn.w	r4, #127	; 0x7f
    ac24:	e74e      	b.n	aac4 <bt_smp_start_security+0x10>
		return -EIO;
    ac26:	f06f 0404 	mvn.w	r4, #4
    ac2a:	e74b      	b.n	aac4 <bt_smp_start_security+0x10>
    ac2c:	20001540 	.word	0x20001540
    ac30:	20002a7a 	.word	0x20002a7a

0000ac34 <smp_pairing_complete>:
{
    ac34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ac38:	f8d0 40f0 	ldr.w	r4, [r0, #240]	; 0xf0
	if (!status) {
    ac3c:	f8df 80a0 	ldr.w	r8, [pc, #160]	; ace0 <smp_pairing_complete+0xac>
{
    ac40:	4605      	mov	r5, r0
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ac42:	1d07      	adds	r7, r0, #4
	if (!status) {
    ac44:	b9b9      	cbnz	r1, ac76 <smp_pairing_complete+0x42>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ac46:	210d      	movs	r1, #13
    ac48:	4638      	mov	r0, r7
    ac4a:	f014 fcd4 	bl	1f5f6 <atomic_test_bit>
		if (bt_auth && bt_auth->pairing_complete) {
    ac4e:	f8d8 3000 	ldr.w	r3, [r8]
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    ac52:	4601      	mov	r1, r0
		if (bt_auth && bt_auth->pairing_complete) {
    ac54:	b11b      	cbz	r3, ac5e <smp_pairing_complete+0x2a>
    ac56:	699b      	ldr	r3, [r3, #24]
    ac58:	b10b      	cbz	r3, ac5e <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    ac5a:	4620      	mov	r0, r4
    ac5c:	4798      	blx	r3
	smp_reset(smp);
    ac5e:	4628      	mov	r0, r5
    ac60:	f014 fd85 	bl	1f76e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    ac64:	7a62      	ldrb	r2, [r4, #9]
    ac66:	7aa3      	ldrb	r3, [r4, #10]
    ac68:	429a      	cmp	r2, r3
    ac6a:	d036      	beq.n	acda <smp_pairing_complete+0xa6>
		bt_smp_start_security(conn);
    ac6c:	4620      	mov	r0, r4
}
    ac6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    ac72:	f7ff bf1f 	b.w	aab4 <bt_smp_start_security>
	switch (smp_err) {
    ac76:	3901      	subs	r1, #1
    ac78:	b2c9      	uxtb	r1, r1
    ac7a:	290d      	cmp	r1, #13
    ac7c:	bf9c      	itt	ls
    ac7e:	4b19      	ldrls	r3, [pc, #100]	; (ace4 <smp_pairing_complete+0xb0>)
    ac80:	5c5e      	ldrbls	r6, [r3, r1]
		if (conn->le.keys &&
    ac82:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    ac86:	bf88      	it	hi
    ac88:	2608      	movhi	r6, #8
		if (conn->le.keys &&
    ac8a:	b143      	cbz	r3, ac9e <smp_pairing_complete+0x6a>
    ac8c:	7b1b      	ldrb	r3, [r3, #12]
    ac8e:	b9eb      	cbnz	r3, accc <smp_pairing_complete+0x98>
			bt_keys_clear(conn->le.keys);
    ac90:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    ac94:	f014 ffa8 	bl	1fbe8 <bt_keys_clear>
			conn->le.keys = NULL;
    ac98:	2300      	movs	r3, #0
    ac9a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    ac9e:	2102      	movs	r1, #2
    aca0:	4638      	mov	r0, r7
    aca2:	f014 fca8 	bl	1f5f6 <atomic_test_bit>
    aca6:	b940      	cbnz	r0, acba <smp_pairing_complete+0x86>
	switch (err) {
    aca8:	2e08      	cmp	r6, #8
    acaa:	bf16      	itet	ne
    acac:	4b0e      	ldrne	r3, [pc, #56]	; (ace8 <smp_pairing_complete+0xb4>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    acae:	211f      	moveq	r1, #31
    acb0:	5d99      	ldrbne	r1, [r3, r6]
			bt_conn_security_changed(conn,
    acb2:	4632      	mov	r2, r6
    acb4:	4620      	mov	r0, r4
    acb6:	f7fc fc23 	bl	7500 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    acba:	f8d8 3000 	ldr.w	r3, [r8]
    acbe:	2b00      	cmp	r3, #0
    acc0:	d0cd      	beq.n	ac5e <smp_pairing_complete+0x2a>
    acc2:	69db      	ldr	r3, [r3, #28]
    acc4:	2b00      	cmp	r3, #0
    acc6:	d0ca      	beq.n	ac5e <smp_pairing_complete+0x2a>
			bt_auth->pairing_failed(conn, security_err);
    acc8:	4631      	mov	r1, r6
    acca:	e7c6      	b.n	ac5a <smp_pairing_complete+0x26>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    accc:	2102      	movs	r1, #2
    acce:	4638      	mov	r0, r7
    acd0:	f014 fc91 	bl	1f5f6 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    acd4:	2800      	cmp	r0, #0
    acd6:	d1db      	bne.n	ac90 <smp_pairing_complete+0x5c>
    acd8:	e7e1      	b.n	ac9e <smp_pairing_complete+0x6a>
}
    acda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acde:	bf00      	nop
    ace0:	20001540 	.word	0x20001540
    ace4:	00024665 	.word	0x00024665
    ace8:	0002467b 	.word	0x0002467b

0000acec <bt_smp_recv>:
{
    acec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    acee:	898b      	ldrh	r3, [r1, #12]
{
    acf0:	4607      	mov	r7, r0
    acf2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    acf4:	b95b      	cbnz	r3, ad0e <bt_smp_recv+0x22>
    acf6:	493a      	ldr	r1, [pc, #232]	; (ade0 <bt_smp_recv+0xf4>)
    acf8:	4b3a      	ldr	r3, [pc, #232]	; (ade4 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    acfa:	483b      	ldr	r0, [pc, #236]	; (ade8 <bt_smp_recv+0xfc>)
    acfc:	1ac9      	subs	r1, r1, r3
    acfe:	08c9      	lsrs	r1, r1, #3
    ad00:	0189      	lsls	r1, r1, #6
    ad02:	f041 0101 	orr.w	r1, r1, #1
    ad06:	f011 f974 	bl	1bff2 <log_0>
}
    ad0a:	2000      	movs	r0, #0
    ad0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    ad0e:	2101      	movs	r1, #1
    ad10:	f105 0008 	add.w	r0, r5, #8
    ad14:	f015 f800 	bl	1fd18 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    ad18:	2104      	movs	r1, #4
    ad1a:	4606      	mov	r6, r0
    ad1c:	f1a7 00ec 	sub.w	r0, r7, #236	; 0xec
    ad20:	f014 fc69 	bl	1f5f6 <atomic_test_bit>
    ad24:	f1a7 04f0 	sub.w	r4, r7, #240	; 0xf0
    ad28:	7831      	ldrb	r1, [r6, #0]
    ad2a:	b150      	cbz	r0, ad42 <bt_smp_recv+0x56>
    ad2c:	4a2c      	ldr	r2, [pc, #176]	; (ade0 <bt_smp_recv+0xf4>)
    ad2e:	4b2d      	ldr	r3, [pc, #180]	; (ade4 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    ad30:	482e      	ldr	r0, [pc, #184]	; (adec <bt_smp_recv+0x100>)
    ad32:	1ad2      	subs	r2, r2, r3
    ad34:	08d2      	lsrs	r2, r2, #3
    ad36:	0192      	lsls	r2, r2, #6
    ad38:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    ad3c:	f011 f966 	bl	1c00c <log_1>
		return 0;
    ad40:	e7e3      	b.n	ad0a <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    ad42:	290e      	cmp	r1, #14
    ad44:	d908      	bls.n	ad58 <bt_smp_recv+0x6c>
    ad46:	4a26      	ldr	r2, [pc, #152]	; (ade0 <bt_smp_recv+0xf4>)
    ad48:	4b26      	ldr	r3, [pc, #152]	; (ade4 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    ad4a:	4829      	ldr	r0, [pc, #164]	; (adf0 <bt_smp_recv+0x104>)
    ad4c:	1ad2      	subs	r2, r2, r3
    ad4e:	08d2      	lsrs	r2, r2, #3
    ad50:	0192      	lsls	r2, r2, #6
    ad52:	f042 0202 	orr.w	r2, r2, #2
    ad56:	e7f1      	b.n	ad3c <bt_smp_recv+0x50>
	if (!handlers[hdr->code].func) {
    ad58:	4f26      	ldr	r7, [pc, #152]	; (adf4 <bt_smp_recv+0x108>)
    ad5a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    ad5e:	b973      	cbnz	r3, ad7e <bt_smp_recv+0x92>
    ad60:	4b20      	ldr	r3, [pc, #128]	; (ade4 <bt_smp_recv+0xf8>)
    ad62:	4a1f      	ldr	r2, [pc, #124]	; (ade0 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    ad64:	4824      	ldr	r0, [pc, #144]	; (adf8 <bt_smp_recv+0x10c>)
    ad66:	1ad2      	subs	r2, r2, r3
    ad68:	08d2      	lsrs	r2, r2, #3
    ad6a:	0192      	lsls	r2, r2, #6
    ad6c:	f042 0202 	orr.w	r2, r2, #2
    ad70:	f011 f94c 	bl	1c00c <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    ad74:	2107      	movs	r1, #7
		smp_error(smp, err);
    ad76:	4620      	mov	r0, r4
    ad78:	f014 fe56 	bl	1fa28 <smp_error>
    ad7c:	e7c5      	b.n	ad0a <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(smp->allowed_cmds, hdr->code)) {
    ad7e:	4620      	mov	r0, r4
    ad80:	f014 fcdd 	bl	1f73e <atomic_test_and_clear_bit>
    ad84:	7831      	ldrb	r1, [r6, #0]
    ad86:	b970      	cbnz	r0, ada6 <bt_smp_recv+0xba>
    ad88:	4b16      	ldr	r3, [pc, #88]	; (ade4 <bt_smp_recv+0xf8>)
    ad8a:	4a15      	ldr	r2, [pc, #84]	; (ade0 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    ad8c:	481b      	ldr	r0, [pc, #108]	; (adfc <bt_smp_recv+0x110>)
    ad8e:	1ad2      	subs	r2, r2, r3
    ad90:	08d2      	lsrs	r2, r2, #3
    ad92:	0192      	lsls	r2, r2, #6
    ad94:	f042 0202 	orr.w	r2, r2, #2
    ad98:	f011 f938 	bl	1c00c <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    ad9c:	7833      	ldrb	r3, [r6, #0]
    ad9e:	2b05      	cmp	r3, #5
    ada0:	d0b3      	beq.n	ad0a <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    ada2:	2108      	movs	r1, #8
    ada4:	e7e7      	b.n	ad76 <bt_smp_recv+0x8a>
	if (buf->len != handlers[hdr->code].expect_len) {
    ada6:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    adaa:	89a8      	ldrh	r0, [r5, #12]
    adac:	791b      	ldrb	r3, [r3, #4]
    adae:	4283      	cmp	r3, r0
    adb0:	d00d      	beq.n	adce <bt_smp_recv+0xe2>
    adb2:	4a0c      	ldr	r2, [pc, #48]	; (ade4 <bt_smp_recv+0xf8>)
    adb4:	4b0a      	ldr	r3, [pc, #40]	; (ade0 <bt_smp_recv+0xf4>)
    adb6:	1a9b      	subs	r3, r3, r2
    adb8:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    adba:	019b      	lsls	r3, r3, #6
    adbc:	460a      	mov	r2, r1
    adbe:	f043 0301 	orr.w	r3, r3, #1
    adc2:	4601      	mov	r1, r0
    adc4:	480e      	ldr	r0, [pc, #56]	; (ae00 <bt_smp_recv+0x114>)
    adc6:	f011 f935 	bl	1c034 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    adca:	210a      	movs	r1, #10
    adcc:	e7d3      	b.n	ad76 <bt_smp_recv+0x8a>
	err = handlers[hdr->code].func(smp, buf);
    adce:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    add2:	4620      	mov	r0, r4
    add4:	4629      	mov	r1, r5
    add6:	4798      	blx	r3
	if (err) {
    add8:	4601      	mov	r1, r0
    adda:	2800      	cmp	r0, #0
    addc:	d095      	beq.n	ad0a <bt_smp_recv+0x1e>
    adde:	e7ca      	b.n	ad76 <bt_smp_recv+0x8a>
    ade0:	00020f10 	.word	0x00020f10
    ade4:	00020e00 	.word	0x00020e00
    ade8:	000244d1 	.word	0x000244d1
    adec:	000244ec 	.word	0x000244ec
    adf0:	0002451d 	.word	0x0002451d
    adf4:	00021734 	.word	0x00021734
    adf8:	0002453f 	.word	0x0002453f
    adfc:	00024559 	.word	0x00024559
    ae00:	000240b8 	.word	0x000240b8

0000ae04 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    ae04:	4b12      	ldr	r3, [pc, #72]	; (ae50 <bt_smp_pkey_ready+0x4c>)
{
    ae06:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    ae08:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    ae0a:	b958      	cbnz	r0, ae24 <bt_smp_pkey_ready+0x20>
    ae0c:	4911      	ldr	r1, [pc, #68]	; (ae54 <bt_smp_pkey_ready+0x50>)
    ae0e:	4b12      	ldr	r3, [pc, #72]	; (ae58 <bt_smp_pkey_ready+0x54>)
		BT_WARN("Public key not available");
    ae10:	4812      	ldr	r0, [pc, #72]	; (ae5c <bt_smp_pkey_ready+0x58>)
    ae12:	1ac9      	subs	r1, r1, r3
    ae14:	08c9      	lsrs	r1, r1, #3
    ae16:	0189      	lsls	r1, r1, #6
}
    ae18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    ae1c:	f041 0102 	orr.w	r1, r1, #2
    ae20:	f011 b8e7 	b.w	1bff2 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ae24:	4c0e      	ldr	r4, [pc, #56]	; (ae60 <bt_smp_pkey_ready+0x5c>)
	z_impl_k_sem_give(sem);
    ae26:	480f      	ldr	r0, [pc, #60]	; (ae64 <bt_smp_pkey_ready+0x60>)
    ae28:	f00f fc4e 	bl	1a6c8 <z_impl_k_sem_give>
    ae2c:	f3bf 8f5b 	dmb	ish
    ae30:	6863      	ldr	r3, [r4, #4]
    ae32:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    ae36:	065b      	lsls	r3, r3, #25
    ae38:	d509      	bpl.n	ae4e <bt_smp_pkey_ready+0x4a>
		err = smp_public_key_slave(smp);
    ae3a:	4620      	mov	r0, r4
    ae3c:	f7ff fad2 	bl	a3e4 <smp_public_key_slave>
		if (err) {
    ae40:	4601      	mov	r1, r0
    ae42:	b120      	cbz	r0, ae4e <bt_smp_pkey_ready+0x4a>
			smp_error(smp, err);
    ae44:	4620      	mov	r0, r4
}
    ae46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    ae4a:	f014 bded 	b.w	1fa28 <smp_error>
}
    ae4e:	bd10      	pop	{r4, pc}
    ae50:	200015dc 	.word	0x200015dc
    ae54:	00020f10 	.word	0x00020f10
    ae58:	00020e00 	.word	0x00020e00
    ae5c:	00024574 	.word	0x00024574
    ae60:	20000d10 	.word	0x20000d10
    ae64:	2000076c 	.word	0x2000076c

0000ae68 <smp_signing_info>:
{
    ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ae6a:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
{
    ae6e:	4604      	mov	r4, r0
    ae70:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ae72:	3004      	adds	r0, #4
    ae74:	210d      	movs	r1, #13
    ae76:	f014 fbbe 	bl	1f5f6 <atomic_test_bit>
    ae7a:	b300      	cbz	r0, aebe <smp_signing_info+0x56>
					&conn->le.dst);
    ae7c:	f106 0588 	add.w	r5, r6, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    ae80:	7a31      	ldrb	r1, [r6, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    ae82:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    ae84:	462a      	mov	r2, r5
    ae86:	2010      	movs	r0, #16
    ae88:	f014 fe9a 	bl	1fbc0 <bt_keys_get_type>
		if (!keys) {
    ae8c:	b990      	cbnz	r0, aeb4 <smp_signing_info+0x4c>
    ae8e:	4a13      	ldr	r2, [pc, #76]	; (aedc <smp_signing_info+0x74>)
    ae90:	4c13      	ldr	r4, [pc, #76]	; (aee0 <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    ae92:	4628      	mov	r0, r5
    ae94:	1aa4      	subs	r4, r4, r2
    ae96:	f7f9 faf7 	bl	4488 <bt_addr_le_str_real>
    ae9a:	f7f7 fc31 	bl	2700 <z_log_strdup>
    ae9e:	08e4      	lsrs	r4, r4, #3
    aea0:	01a4      	lsls	r4, r4, #6
    aea2:	f044 0401 	orr.w	r4, r4, #1
    aea6:	4601      	mov	r1, r0
    aea8:	4622      	mov	r2, r4
    aeaa:	480e      	ldr	r0, [pc, #56]	; (aee4 <smp_signing_info+0x7c>)
    aeac:	f011 f8ae 	bl	1c00c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    aeb0:	2008      	movs	r0, #8
}
    aeb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    aeb4:	2210      	movs	r2, #16
    aeb6:	4639      	mov	r1, r7
    aeb8:	3054      	adds	r0, #84	; 0x54
    aeba:	f012 fda7 	bl	1da0c <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    aebe:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    aec2:	f023 0304 	bic.w	r3, r3, #4
    aec6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (!smp->local_dist && !smp->remote_dist) {
    aeca:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
    aece:	b91d      	cbnz	r5, aed8 <smp_signing_info+0x70>
		smp_pairing_complete(smp, 0);
    aed0:	4629      	mov	r1, r5
    aed2:	4620      	mov	r0, r4
    aed4:	f7ff feae 	bl	ac34 <smp_pairing_complete>
	return 0;
    aed8:	2000      	movs	r0, #0
    aeda:	e7ea      	b.n	aeb2 <smp_signing_info+0x4a>
    aedc:	00020e00 	.word	0x00020e00
    aee0:	00020f10 	.word	0x00020f10
    aee4:	00024321 	.word	0x00024321

0000aee8 <smp_ident_addr_info>:
{
    aee8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    aeec:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    aeee:	f8d0 70f0 	ldr.w	r7, [r0, #240]	; 0xf0
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    aef2:	782b      	ldrb	r3, [r5, #0]
{
    aef4:	4604      	mov	r4, r0
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    aef6:	f107 0688 	add.w	r6, r7, #136	; 0x88
    aefa:	b313      	cbz	r3, af42 <smp_ident_addr_info+0x5a>
	if (!bt_addr_le_is_identity(&req->addr)) {
    aefc:	79ab      	ldrb	r3, [r5, #6]
    aefe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    af02:	2bc0      	cmp	r3, #192	; 0xc0
    af04:	d01d      	beq.n	af42 <smp_ident_addr_info+0x5a>
    af06:	4b4b      	ldr	r3, [pc, #300]	; (b034 <smp_ident_addr_info+0x14c>)
    af08:	4c4b      	ldr	r4, [pc, #300]	; (b038 <smp_ident_addr_info+0x150>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    af0a:	4628      	mov	r0, r5
    af0c:	1ae4      	subs	r4, r4, r3
    af0e:	f7f9 fabb 	bl	4488 <bt_addr_le_str_real>
    af12:	f7f7 fbf5 	bl	2700 <z_log_strdup>
    af16:	08e4      	lsrs	r4, r4, #3
    af18:	01a4      	lsls	r4, r4, #6
    af1a:	f044 0401 	orr.w	r4, r4, #1
    af1e:	4601      	mov	r1, r0
    af20:	4622      	mov	r2, r4
    af22:	4846      	ldr	r0, [pc, #280]	; (b03c <smp_ident_addr_info+0x154>)
    af24:	f011 f872 	bl	1c00c <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    af28:	4630      	mov	r0, r6
    af2a:	f7f9 faad 	bl	4488 <bt_addr_le_str_real>
    af2e:	f7f7 fbe7 	bl	2700 <z_log_strdup>
    af32:	4622      	mov	r2, r4
    af34:	4601      	mov	r1, r0
    af36:	4842      	ldr	r0, [pc, #264]	; (b040 <smp_ident_addr_info+0x158>)
    af38:	f011 f868 	bl	1c00c <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    af3c:	200a      	movs	r0, #10
}
    af3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return memcmp(a, b, sizeof(*a));
    af42:	2207      	movs	r2, #7
    af44:	4629      	mov	r1, r5
    af46:	4630      	mov	r0, r6
    af48:	f012 fd4f 	bl	1d9ea <memcmp>
	if (bt_addr_le_cmp(&conn->le.dst, &req->addr) != 0) {
    af4c:	b168      	cbz	r0, af6a <smp_ident_addr_info+0x82>
		struct bt_keys *keys = bt_keys_find_addr(conn->id, &req->addr);
    af4e:	7a38      	ldrb	r0, [r7, #8]
    af50:	4629      	mov	r1, r5
    af52:	f000 fba5 	bl	b6a0 <bt_keys_find_addr>
		if (keys) {
    af56:	4680      	mov	r8, r0
    af58:	b138      	cbz	r0, af6a <smp_ident_addr_info+0x82>
			if (!update_keys_check(smp, keys)) {
    af5a:	4601      	mov	r1, r0
    af5c:	4620      	mov	r0, r4
    af5e:	f014 fb53 	bl	1f608 <update_keys_check>
    af62:	b300      	cbz	r0, afa6 <smp_ident_addr_info+0xbe>
			bt_keys_clear(keys);
    af64:	4640      	mov	r0, r8
    af66:	f014 fe3f 	bl	1fbe8 <bt_keys_clear>
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    af6a:	210d      	movs	r1, #13
    af6c:	1d20      	adds	r0, r4, #4
    af6e:	f014 fb42 	bl	1f5f6 <atomic_test_bit>
    af72:	2800      	cmp	r0, #0
    af74:	d046      	beq.n	b004 <smp_ident_addr_info+0x11c>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    af76:	7a39      	ldrb	r1, [r7, #8]
    af78:	4632      	mov	r2, r6
    af7a:	2002      	movs	r0, #2
    af7c:	f014 fe20 	bl	1fbc0 <bt_keys_get_type>
		if (!keys) {
    af80:	4680      	mov	r8, r0
    af82:	b990      	cbnz	r0, afaa <smp_ident_addr_info+0xc2>
    af84:	4a2b      	ldr	r2, [pc, #172]	; (b034 <smp_ident_addr_info+0x14c>)
    af86:	4c2c      	ldr	r4, [pc, #176]	; (b038 <smp_ident_addr_info+0x150>)
			BT_ERR("Unable to get keys for %s",
    af88:	4630      	mov	r0, r6
    af8a:	1aa4      	subs	r4, r4, r2
    af8c:	f7f9 fa7c 	bl	4488 <bt_addr_le_str_real>
    af90:	f7f7 fbb6 	bl	2700 <z_log_strdup>
    af94:	08e4      	lsrs	r4, r4, #3
    af96:	01a4      	lsls	r4, r4, #6
    af98:	f044 0401 	orr.w	r4, r4, #1
    af9c:	4601      	mov	r1, r0
    af9e:	4622      	mov	r2, r4
    afa0:	4828      	ldr	r0, [pc, #160]	; (b044 <smp_ident_addr_info+0x15c>)
    afa2:	f011 f833 	bl	1c00c <log_1>
				return BT_SMP_ERR_UNSPECIFIED;
    afa6:	2008      	movs	r0, #8
    afa8:	e7c9      	b.n	af3e <smp_ident_addr_info+0x56>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    afaa:	78fb      	ldrb	r3, [r7, #3]
    afac:	2b00      	cmp	r3, #0
    afae:	d13e      	bne.n	b02e <smp_ident_addr_info+0x146>
			dst = &conn->le.resp_addr;
    afb0:	f107 0196 	add.w	r1, r7, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    afb4:	780b      	ldrb	r3, [r1, #0]
    afb6:	2b01      	cmp	r3, #1
    afb8:	d121      	bne.n	affe <smp_ident_addr_info+0x116>
		if (bt_addr_le_is_rpa(dst)) {
    afba:	798b      	ldrb	r3, [r1, #6]
    afbc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    afc0:	2b40      	cmp	r3, #64	; 0x40
    afc2:	d11c      	bne.n	affe <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
    afc4:	2206      	movs	r2, #6
    afc6:	3101      	adds	r1, #1
    afc8:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    afcc:	f012 fd1e 	bl	1da0c <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    afd0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
    afd4:	b19b      	cbz	r3, affe <smp_ident_addr_info+0x116>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    afd6:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
    afda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    afde:	2bc0      	cmp	r3, #192	; 0xc0
    afe0:	d00d      	beq.n	affe <smp_ident_addr_info+0x116>
	memcpy(dst, src, sizeof(*dst));
    afe2:	2207      	movs	r2, #7
    afe4:	4629      	mov	r1, r5
    afe6:	f108 0001 	add.w	r0, r8, #1
    afea:	f012 fd0f 	bl	1da0c <memcpy>
    afee:	2207      	movs	r2, #7
    aff0:	4629      	mov	r1, r5
    aff2:	4630      	mov	r0, r6
    aff4:	f012 fd0a 	bl	1da0c <memcpy>
				bt_conn_identity_resolved(conn);
    aff8:	4638      	mov	r0, r7
    affa:	f7fc fa67 	bl	74cc <bt_conn_identity_resolved>
		bt_id_add(keys);
    affe:	4640      	mov	r0, r8
    b000:	f7fa ffc2 	bl	5f88 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    b004:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    b008:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b00c:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    b00e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b012:	d503      	bpl.n	b01c <smp_ident_addr_info+0x134>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b014:	210a      	movs	r1, #10
    b016:	4620      	mov	r0, r4
    b018:	f014 fad7 	bl	1f5ca <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    b01c:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
    b020:	b91d      	cbnz	r5, b02a <smp_ident_addr_info+0x142>
		smp_pairing_complete(smp, 0);
    b022:	4629      	mov	r1, r5
    b024:	4620      	mov	r0, r4
    b026:	f7ff fe05 	bl	ac34 <smp_pairing_complete>
	return 0;
    b02a:	2000      	movs	r0, #0
    b02c:	e787      	b.n	af3e <smp_ident_addr_info+0x56>
			dst = &conn->le.init_addr;
    b02e:	f107 018f 	add.w	r1, r7, #143	; 0x8f
    b032:	e7bf      	b.n	afb4 <smp_ident_addr_info+0xcc>
    b034:	00020e00 	.word	0x00020e00
    b038:	00020f10 	.word	0x00020f10
    b03c:	0002458d 	.word	0x0002458d
    b040:	00024464 	.word	0x00024464
    b044:	00024321 	.word	0x00024321

0000b048 <smp_master_ident>:
{
    b048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    b04a:	f8d0 50f0 	ldr.w	r5, [r0, #240]	; 0xf0
{
    b04e:	4604      	mov	r4, r0
    b050:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b052:	3004      	adds	r0, #4
    b054:	210d      	movs	r1, #13
    b056:	f014 face 	bl	1f5f6 <atomic_test_bit>
    b05a:	b368      	cbz	r0, b0b8 <smp_master_ident+0x70>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    b05c:	f105 0788 	add.w	r7, r5, #136	; 0x88
    b060:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    b062:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    b064:	463a      	mov	r2, r7
    b066:	2004      	movs	r0, #4
    b068:	f014 fdaa 	bl	1fbc0 <bt_keys_get_type>
		if (!keys) {
    b06c:	4605      	mov	r5, r0
    b06e:	b990      	cbnz	r0, b096 <smp_master_ident+0x4e>
    b070:	4a1c      	ldr	r2, [pc, #112]	; (b0e4 <smp_master_ident+0x9c>)
    b072:	4c1d      	ldr	r4, [pc, #116]	; (b0e8 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    b074:	4638      	mov	r0, r7
    b076:	1aa4      	subs	r4, r4, r2
    b078:	f7f9 fa06 	bl	4488 <bt_addr_le_str_real>
    b07c:	f7f7 fb40 	bl	2700 <z_log_strdup>
    b080:	08e4      	lsrs	r4, r4, #3
    b082:	01a4      	lsls	r4, r4, #6
    b084:	f044 0401 	orr.w	r4, r4, #1
    b088:	4601      	mov	r1, r0
    b08a:	4622      	mov	r2, r4
    b08c:	4817      	ldr	r0, [pc, #92]	; (b0ec <smp_master_ident+0xa4>)
    b08e:	f010 ffbd 	bl	1c00c <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    b092:	2008      	movs	r0, #8
}
    b094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    b096:	2202      	movs	r2, #2
    b098:	4631      	mov	r1, r6
    b09a:	3018      	adds	r0, #24
    b09c:	f012 fcb6 	bl	1da0c <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    b0a0:	2208      	movs	r2, #8
    b0a2:	1cb1      	adds	r1, r6, #2
    b0a4:	f105 0010 	add.w	r0, r5, #16
    b0a8:	f012 fcb0 	bl	1da0c <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    b0ac:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    b0b0:	f023 0301 	bic.w	r3, r3, #1
    b0b4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b0b8:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
    b0bc:	079a      	lsls	r2, r3, #30
    b0be:	d50c      	bpl.n	b0da <smp_master_ident+0x92>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b0c0:	2108      	movs	r1, #8
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b0c2:	4620      	mov	r0, r4
    b0c4:	f014 fa81 	bl	1f5ca <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    b0c8:	f8b4 50e8 	ldrh.w	r5, [r4, #232]	; 0xe8
    b0cc:	b91d      	cbnz	r5, b0d6 <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    b0ce:	4629      	mov	r1, r5
    b0d0:	4620      	mov	r0, r4
    b0d2:	f7ff fdaf 	bl	ac34 <smp_pairing_complete>
	return 0;
    b0d6:	2000      	movs	r0, #0
    b0d8:	e7dc      	b.n	b094 <smp_master_ident+0x4c>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b0da:	075b      	lsls	r3, r3, #29
    b0dc:	d5f4      	bpl.n	b0c8 <smp_master_ident+0x80>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b0de:	210a      	movs	r1, #10
    b0e0:	e7ef      	b.n	b0c2 <smp_master_ident+0x7a>
    b0e2:	bf00      	nop
    b0e4:	00020e00 	.word	0x00020e00
    b0e8:	00020f10 	.word	0x00020f10
    b0ec:	00024321 	.word	0x00024321

0000b0f0 <smp_pairing_failed>:
{
    b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0f2:	4a15      	ldr	r2, [pc, #84]	; (b148 <smp_pairing_failed+0x58>)
    b0f4:	4b15      	ldr	r3, [pc, #84]	; (b14c <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    b0f6:	688d      	ldr	r5, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    b0f8:	f8d0 60f0 	ldr.w	r6, [r0, #240]	; 0xf0
	BT_ERR("reason 0x%x", req->reason);
    b0fc:	7829      	ldrb	r1, [r5, #0]
    b0fe:	1ad2      	subs	r2, r2, r3
    b100:	08d2      	lsrs	r2, r2, #3
{
    b102:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    b104:	0192      	lsls	r2, r2, #6
    b106:	4812      	ldr	r0, [pc, #72]	; (b150 <smp_pairing_failed+0x60>)
    b108:	f042 0201 	orr.w	r2, r2, #1
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    b10c:	1d27      	adds	r7, r4, #4
	BT_ERR("reason 0x%x", req->reason);
    b10e:	f010 ff7d 	bl	1c00c <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    b112:	210a      	movs	r1, #10
    b114:	4638      	mov	r0, r7
    b116:	f014 fb12 	bl	1f73e <atomic_test_and_clear_bit>
    b11a:	b140      	cbz	r0, b12e <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    b11c:	4b0d      	ldr	r3, [pc, #52]	; (b154 <smp_pairing_failed+0x64>)
    b11e:	681b      	ldr	r3, [r3, #0]
    b120:	b963      	cbnz	r3, b13c <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    b122:	4620      	mov	r0, r4
    b124:	7829      	ldrb	r1, [r5, #0]
    b126:	f7ff fd85 	bl	ac34 <smp_pairing_complete>
}
    b12a:	2000      	movs	r0, #0
    b12c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    b12e:	210b      	movs	r1, #11
    b130:	4638      	mov	r0, r7
    b132:	f014 fb04 	bl	1f73e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    b136:	2800      	cmp	r0, #0
    b138:	d1f0      	bne.n	b11c <smp_pairing_failed+0x2c>
    b13a:	e7f2      	b.n	b122 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    b13c:	691b      	ldr	r3, [r3, #16]
    b13e:	2b00      	cmp	r3, #0
    b140:	d0ef      	beq.n	b122 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    b142:	4630      	mov	r0, r6
    b144:	4798      	blx	r3
    b146:	e7ec      	b.n	b122 <smp_pairing_failed+0x32>
    b148:	00020f10 	.word	0x00020f10
    b14c:	00020e00 	.word	0x00020e00
    b150:	000245a1 	.word	0x000245a1
    b154:	20001540 	.word	0x20001540

0000b158 <bt_smp_encrypt_change>:
{
    b158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    b15c:	4605      	mov	r5, r0
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b15e:	f1a0 06ec 	sub.w	r6, r0, #236	; 0xec
{
    b162:	b089      	sub	sp, #36	; 0x24
    b164:	4604      	mov	r4, r0
    b166:	460f      	mov	r7, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b168:	4630      	mov	r0, r6
    b16a:	2101      	movs	r1, #1
	struct bt_conn *conn = chan->conn;
    b16c:	f855 89f0 	ldr.w	r8, [r5], #-240
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b170:	f014 fae5 	bl	1f73e <atomic_test_and_clear_bit>
    b174:	2800      	cmp	r0, #0
    b176:	f000 8138 	beq.w	b3ea <bt_smp_encrypt_change+0x292>
	if (hci_status) {
    b17a:	b1df      	cbz	r7, b1b4 <bt_smp_encrypt_change+0x5c>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b17c:	2103      	movs	r1, #3
    b17e:	4630      	mov	r0, r6
    b180:	f014 fa39 	bl	1f5f6 <atomic_test_bit>
    b184:	2800      	cmp	r0, #0
    b186:	f000 8130 	beq.w	b3ea <bt_smp_encrypt_change+0x292>
			uint8_t smp_err = smp_err_get(
    b18a:	4638      	mov	r0, r7
    b18c:	f7fa fb7a 	bl	5884 <bt_security_err_get>
	switch (auth_err) {
    b190:	3801      	subs	r0, #1
    b192:	b2c0      	uxtb	r0, r0
    b194:	2807      	cmp	r0, #7
    b196:	bf9a      	itte	ls
    b198:	4b95      	ldrls	r3, [pc, #596]	; (b3f0 <bt_smp_encrypt_change+0x298>)
    b19a:	5c1c      	ldrbls	r4, [r3, r0]
			uint8_t smp_err = smp_err_get(
    b19c:	2400      	movhi	r4, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    b19e:	2102      	movs	r1, #2
    b1a0:	4630      	mov	r0, r6
    b1a2:	f014 fa12 	bl	1f5ca <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    b1a6:	4621      	mov	r1, r4
		smp_pairing_complete(smp, 0);
    b1a8:	4628      	mov	r0, r5
}
    b1aa:	b009      	add	sp, #36	; 0x24
    b1ac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_pairing_complete(smp, 0);
    b1b0:	f7ff bd40 	b.w	ac34 <smp_pairing_complete>
	if (!conn->encrypt) {
    b1b4:	f898 300b 	ldrb.w	r3, [r8, #11]
    b1b8:	2b00      	cmp	r3, #0
    b1ba:	f000 8116 	beq.w	b3ea <bt_smp_encrypt_change+0x292>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b1be:	2103      	movs	r1, #3
    b1c0:	4630      	mov	r0, r6
    b1c2:	f014 fa18 	bl	1f5f6 <atomic_test_bit>
    b1c6:	b928      	cbnz	r0, b1d4 <bt_smp_encrypt_change+0x7c>
		smp_reset(smp);
    b1c8:	4628      	mov	r0, r5
}
    b1ca:	b009      	add	sp, #36	; 0x24
    b1cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_reset(smp);
    b1d0:	f014 bacd 	b.w	1f76e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b1d4:	2105      	movs	r1, #5
    b1d6:	4630      	mov	r0, r6
    b1d8:	f014 fa0d 	bl	1f5f6 <atomic_test_bit>
    b1dc:	b1b8      	cbz	r0, b20e <bt_smp_encrypt_change+0xb6>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b1de:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    b1e2:	071a      	lsls	r2, r3, #28
    b1e4:	d507      	bpl.n	b1f6 <bt_smp_encrypt_change+0x9e>
    b1e6:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    b1ea:	071b      	lsls	r3, r3, #28
    b1ec:	d503      	bpl.n	b1f6 <bt_smp_encrypt_change+0x9e>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    b1ee:	2111      	movs	r1, #17
    b1f0:	4630      	mov	r0, r6
    b1f2:	f014 f9ea 	bl	1f5ca <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    b1f6:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    b1fa:	f023 0308 	bic.w	r3, r3, #8
    b1fe:	f804 3c08 	strb.w	r3, [r4, #-8]
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    b202:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    b206:	f023 0308 	bic.w	r3, r3, #8
    b20a:	f804 3c07 	strb.w	r3, [r4, #-7]
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    b20e:	f814 3c07 	ldrb.w	r3, [r4, #-7]
    b212:	07df      	lsls	r7, r3, #31
    b214:	d520      	bpl.n	b258 <bt_smp_encrypt_change+0x100>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    b216:	2106      	movs	r1, #6
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b218:	4628      	mov	r0, r5
    b21a:	f014 f9d6 	bl	1f5ca <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    b21e:	2102      	movs	r1, #2
    b220:	4630      	mov	r0, r6
    b222:	f014 f9d2 	bl	1f5ca <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    b226:	6823      	ldr	r3, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    b228:	f8d3 70b4 	ldr.w	r7, [r3, #180]	; 0xb4
	if (!keys) {
    b22c:	b9e7      	cbnz	r7, b268 <bt_smp_encrypt_change+0x110>
    b22e:	4a71      	ldr	r2, [pc, #452]	; (b3f4 <bt_smp_encrypt_change+0x29c>)
    b230:	4c71      	ldr	r4, [pc, #452]	; (b3f8 <bt_smp_encrypt_change+0x2a0>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    b232:	f103 0088 	add.w	r0, r3, #136	; 0x88
    b236:	1aa4      	subs	r4, r4, r2
    b238:	f7f9 f926 	bl	4488 <bt_addr_le_str_real>
    b23c:	f7f7 fa60 	bl	2700 <z_log_strdup>
    b240:	08e4      	lsrs	r4, r4, #3
    b242:	01a4      	lsls	r4, r4, #6
    b244:	f044 0401 	orr.w	r4, r4, #1
    b248:	4601      	mov	r1, r0
    b24a:	486c      	ldr	r0, [pc, #432]	; (b3fc <bt_smp_encrypt_change+0x2a4>)
    b24c:	4622      	mov	r2, r4
}
    b24e:	b009      	add	sp, #36	; 0x24
    b250:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    b254:	f010 beda 	b.w	1c00c <log_1>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b258:	0798      	lsls	r0, r3, #30
    b25a:	d501      	bpl.n	b260 <bt_smp_encrypt_change+0x108>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b25c:	2108      	movs	r1, #8
    b25e:	e7db      	b.n	b218 <bt_smp_encrypt_change+0xc0>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b260:	0759      	lsls	r1, r3, #29
    b262:	d5dc      	bpl.n	b21e <bt_smp_encrypt_change+0xc6>
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b264:	210a      	movs	r1, #10
    b266:	e7d7      	b.n	b218 <bt_smp_encrypt_change+0xc0>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b268:	2105      	movs	r1, #5
    b26a:	f014 f9c4 	bl	1f5f6 <atomic_test_bit>
    b26e:	b9b0      	cbnz	r0, b29e <bt_smp_encrypt_change+0x146>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b270:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    b274:	07da      	lsls	r2, r3, #31
    b276:	d512      	bpl.n	b29e <bt_smp_encrypt_change+0x146>
	struct bt_keys *keys = conn->le.keys;
    b278:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    b27a:	211a      	movs	r1, #26
    b27c:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    b27e:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    b282:	f003 f937 	bl	e4f4 <bt_rand>
    b286:	4682      	mov	sl, r0
    b288:	b310      	cbz	r0, b2d0 <bt_smp_encrypt_change+0x178>
    b28a:	495b      	ldr	r1, [pc, #364]	; (b3f8 <bt_smp_encrypt_change+0x2a0>)
    b28c:	4b59      	ldr	r3, [pc, #356]	; (b3f4 <bt_smp_encrypt_change+0x29c>)
			BT_ERR("Unable to get random bytes");
    b28e:	485c      	ldr	r0, [pc, #368]	; (b400 <bt_smp_encrypt_change+0x2a8>)
    b290:	1ac9      	subs	r1, r1, r3
    b292:	08c9      	lsrs	r1, r1, #3
    b294:	0189      	lsls	r1, r1, #6
    b296:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    b29a:	f010 feaa 	bl	1bff2 <log_0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    b29e:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    b2a2:	075b      	lsls	r3, r3, #29
    b2a4:	f140 809c 	bpl.w	b3e0 <bt_smp_encrypt_change+0x288>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    b2a8:	210a      	movs	r1, #10
    b2aa:	4628      	mov	r0, r5
    b2ac:	f014 f9cd 	bl	1f64a <smp_create_pdu.constprop.0>
		if (!buf) {
    b2b0:	4680      	mov	r8, r0
    b2b2:	2800      	cmp	r0, #0
    b2b4:	d174      	bne.n	b3a0 <bt_smp_encrypt_change+0x248>
    b2b6:	4b4f      	ldr	r3, [pc, #316]	; (b3f4 <bt_smp_encrypt_change+0x29c>)
    b2b8:	494f      	ldr	r1, [pc, #316]	; (b3f8 <bt_smp_encrypt_change+0x2a0>)
			BT_ERR("Unable to allocate Signing Info buffer");
    b2ba:	4852      	ldr	r0, [pc, #328]	; (b404 <bt_smp_encrypt_change+0x2ac>)
    b2bc:	1ac9      	subs	r1, r1, r3
    b2be:	08c9      	lsrs	r1, r1, #3
    b2c0:	0189      	lsls	r1, r1, #6
    b2c2:	f041 0101 	orr.w	r1, r1, #1
}
    b2c6:	b009      	add	sp, #36	; 0x24
    b2c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unable to allocate Signing Info buffer");
    b2cc:	f010 be91 	b.w	1bff2 <log_0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    b2d0:	2106      	movs	r1, #6
    b2d2:	4628      	mov	r0, r5
    b2d4:	f014 f9b9 	bl	1f64a <smp_create_pdu.constprop.0>
		if (!buf) {
    b2d8:	4681      	mov	r9, r0
    b2da:	b940      	cbnz	r0, b2ee <bt_smp_encrypt_change+0x196>
    b2dc:	4946      	ldr	r1, [pc, #280]	; (b3f8 <bt_smp_encrypt_change+0x2a0>)
    b2de:	4b45      	ldr	r3, [pc, #276]	; (b3f4 <bt_smp_encrypt_change+0x29c>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    b2e0:	4849      	ldr	r0, [pc, #292]	; (b408 <bt_smp_encrypt_change+0x2b0>)
    b2e2:	1ac9      	subs	r1, r1, r3
    b2e4:	08c9      	lsrs	r1, r1, #3
    b2e6:	0189      	lsls	r1, r1, #6
    b2e8:	f041 0101 	orr.w	r1, r1, #1
    b2ec:	e7d5      	b.n	b29a <bt_smp_encrypt_change+0x142>
	return net_buf_simple_add(&buf->b, len);
    b2ee:	2110      	movs	r1, #16
    b2f0:	3008      	adds	r0, #8
    b2f2:	f014 fcea 	bl	1fcca <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    b2f6:	f898 200c 	ldrb.w	r2, [r8, #12]
    b2fa:	a901      	add	r1, sp, #4
    b2fc:	4683      	mov	fp, r0
    b2fe:	f012 fb85 	bl	1da0c <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b302:	f898 000c 	ldrb.w	r0, [r8, #12]
    b306:	280f      	cmp	r0, #15
    b308:	d805      	bhi.n	b316 <bt_smp_encrypt_change+0x1be>
			(void)memset(info->ltk + keys->enc_size, 0,
    b30a:	f1c0 0210 	rsb	r2, r0, #16
    b30e:	4651      	mov	r1, sl
    b310:	4458      	add	r0, fp
    b312:	f012 fb86 	bl	1da22 <memset>
		smp_send(smp, buf, NULL, NULL);
    b316:	4649      	mov	r1, r9
    b318:	2200      	movs	r2, #0
    b31a:	4628      	mov	r0, r5
    b31c:	f014 f938 	bl	1f590 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    b320:	2107      	movs	r1, #7
    b322:	4628      	mov	r0, r5
    b324:	f014 f991 	bl	1f64a <smp_create_pdu.constprop.0>
		if (!buf) {
    b328:	4681      	mov	r9, r0
    b32a:	b940      	cbnz	r0, b33e <bt_smp_encrypt_change+0x1e6>
    b32c:	4932      	ldr	r1, [pc, #200]	; (b3f8 <bt_smp_encrypt_change+0x2a0>)
    b32e:	4b31      	ldr	r3, [pc, #196]	; (b3f4 <bt_smp_encrypt_change+0x29c>)
			BT_ERR("Unable to allocate Master Ident buffer");
    b330:	4836      	ldr	r0, [pc, #216]	; (b40c <bt_smp_encrypt_change+0x2b4>)
    b332:	1ac9      	subs	r1, r1, r3
    b334:	08c9      	lsrs	r1, r1, #3
    b336:	0189      	lsls	r1, r1, #6
    b338:	f041 0101 	orr.w	r1, r1, #1
    b33c:	e7ad      	b.n	b29a <bt_smp_encrypt_change+0x142>
    b33e:	210a      	movs	r1, #10
    b340:	3008      	adds	r0, #8
    b342:	f014 fcc2 	bl	1fcca <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    b346:	2208      	movs	r2, #8
    b348:	4682      	mov	sl, r0
    b34a:	a905      	add	r1, sp, #20
    b34c:	3002      	adds	r0, #2
    b34e:	f012 fb5d 	bl	1da0c <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    b352:	2202      	movs	r2, #2
    b354:	a907      	add	r1, sp, #28
    b356:	4650      	mov	r0, sl
    b358:	f012 fb58 	bl	1da0c <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    b35c:	4649      	mov	r1, r9
    b35e:	4628      	mov	r0, r5
    b360:	4a2b      	ldr	r2, [pc, #172]	; (b410 <bt_smp_encrypt_change+0x2b8>)
    b362:	f014 f915 	bl	1f590 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b366:	210d      	movs	r1, #13
    b368:	4630      	mov	r0, r6
    b36a:	f014 f944 	bl	1f5f6 <atomic_test_bit>
    b36e:	2800      	cmp	r0, #0
    b370:	d095      	beq.n	b29e <bt_smp_encrypt_change+0x146>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b372:	4640      	mov	r0, r8
    b374:	2101      	movs	r1, #1
    b376:	f014 fc33 	bl	1fbe0 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    b37a:	a901      	add	r1, sp, #4
    b37c:	2210      	movs	r2, #16
    b37e:	f108 0072 	add.w	r0, r8, #114	; 0x72
    b382:	f012 fb43 	bl	1da0c <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    b386:	a905      	add	r1, sp, #20
    b388:	2208      	movs	r2, #8
    b38a:	f108 0068 	add.w	r0, r8, #104	; 0x68
    b38e:	f012 fb3d 	bl	1da0c <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    b392:	2202      	movs	r2, #2
    b394:	a907      	add	r1, sp, #28
    b396:	f108 0070 	add.w	r0, r8, #112	; 0x70
    b39a:	f012 fb37 	bl	1da0c <memcpy>
    b39e:	e77e      	b.n	b29e <bt_smp_encrypt_change+0x146>
    b3a0:	2110      	movs	r1, #16
    b3a2:	3008      	adds	r0, #8
    b3a4:	f014 fc91 	bl	1fcca <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
    b3a8:	2110      	movs	r1, #16
    b3aa:	4682      	mov	sl, r0
    b3ac:	f003 f8a2 	bl	e4f4 <bt_rand>
    b3b0:	4681      	mov	r9, r0
    b3b2:	b9d0      	cbnz	r0, b3ea <bt_smp_encrypt_change+0x292>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b3b4:	210d      	movs	r1, #13
    b3b6:	4630      	mov	r0, r6
    b3b8:	f014 f91d 	bl	1f5f6 <atomic_test_bit>
    b3bc:	b158      	cbz	r0, b3d6 <bt_smp_encrypt_change+0x27e>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    b3be:	2108      	movs	r1, #8
    b3c0:	4638      	mov	r0, r7
    b3c2:	f014 fc0d 	bl	1fbe0 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    b3c6:	2210      	movs	r2, #16
    b3c8:	4651      	mov	r1, sl
    b3ca:	f107 0040 	add.w	r0, r7, #64	; 0x40
    b3ce:	f012 fb1d 	bl	1da0c <memcpy>
			keys->local_csrk.cnt = 0U;
    b3d2:	f8c7 9050 	str.w	r9, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    b3d6:	4a0f      	ldr	r2, [pc, #60]	; (b414 <bt_smp_encrypt_change+0x2bc>)
    b3d8:	4641      	mov	r1, r8
    b3da:	4628      	mov	r0, r5
    b3dc:	f014 f8d8 	bl	1f590 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
    b3e0:	f834 1c08 	ldrh.w	r1, [r4, #-8]
    b3e4:	2900      	cmp	r1, #0
    b3e6:	f43f aedf 	beq.w	b1a8 <bt_smp_encrypt_change+0x50>
}
    b3ea:	b009      	add	sp, #36	; 0x24
    b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b3f0:	00024673 	.word	0x00024673
    b3f4:	00020e00 	.word	0x00020e00
    b3f8:	00020f10 	.word	0x00020f10
    b3fc:	000245ad 	.word	0x000245ad
    b400:	000245c2 	.word	0x000245c2
    b404:	0002462b 	.word	0x0002462b
    b408:	000245dd 	.word	0x000245dd
    b40c:	00024604 	.word	0x00024604
    b410:	0001fb51 	.word	0x0001fb51
    b414:	0001fb43 	.word	0x0001fb43

0000b418 <smp_timeout>:
    b418:	4b0b      	ldr	r3, [pc, #44]	; (b448 <smp_timeout+0x30>)
    b41a:	490c      	ldr	r1, [pc, #48]	; (b44c <smp_timeout+0x34>)
{
    b41c:	b510      	push	{r4, lr}
    b41e:	1ac9      	subs	r1, r1, r3
    b420:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    b422:	0189      	lsls	r1, r1, #6
{
    b424:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    b426:	f041 0101 	orr.w	r1, r1, #1
    b42a:	4809      	ldr	r0, [pc, #36]	; (b450 <smp_timeout+0x38>)
    b42c:	f010 fde1 	bl	1bff2 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    b430:	f5a4 70ec 	sub.w	r0, r4, #472	; 0x1d8
    b434:	2108      	movs	r1, #8
    b436:	f7ff fbfd 	bl	ac34 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    b43a:	f5a4 70ea 	sub.w	r0, r4, #468	; 0x1d4
    b43e:	2104      	movs	r1, #4
}
    b440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    b444:	f014 b8c1 	b.w	1f5ca <atomic_set_bit>
    b448:	00020e00 	.word	0x00020e00
    b44c:	00020f10 	.word	0x00020f10
    b450:	00024652 	.word	0x00024652

0000b454 <bt_smp_update_keys>:
{
    b454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b456:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    b458:	f7fe fb86 	bl	9b68 <smp_chan_get>
	if (!smp) {
    b45c:	4605      	mov	r5, r0
    b45e:	2800      	cmp	r0, #0
    b460:	d07c      	beq.n	b55c <bt_smp_update_keys+0x108>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b462:	1d06      	adds	r6, r0, #4
    b464:	2103      	movs	r1, #3
    b466:	4630      	mov	r0, r6
    b468:	f014 f8c5 	bl	1f5f6 <atomic_test_bit>
    b46c:	2800      	cmp	r0, #0
    b46e:	d075      	beq.n	b55c <bt_smp_update_keys+0x108>
	if (conn->le.keys) {
    b470:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    b474:	b108      	cbz	r0, b47a <bt_smp_update_keys+0x26>
		bt_keys_clear(conn->le.keys);
    b476:	f014 fbb7 	bl	1fbe8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    b47a:	f104 0788 	add.w	r7, r4, #136	; 0x88
    b47e:	7a20      	ldrb	r0, [r4, #8]
    b480:	4639      	mov	r1, r7
    b482:	f000 f889 	bl	b598 <bt_keys_get_addr>
    b486:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
    b48a:	b9b0      	cbnz	r0, b4ba <bt_smp_update_keys+0x66>
    b48c:	4a34      	ldr	r2, [pc, #208]	; (b560 <bt_smp_update_keys+0x10c>)
    b48e:	4c35      	ldr	r4, [pc, #212]	; (b564 <bt_smp_update_keys+0x110>)
		BT_ERR("Unable to get keys for %s",
    b490:	4638      	mov	r0, r7
    b492:	1aa4      	subs	r4, r4, r2
    b494:	f7f8 fff8 	bl	4488 <bt_addr_le_str_real>
    b498:	f7f7 f932 	bl	2700 <z_log_strdup>
    b49c:	08e4      	lsrs	r4, r4, #3
    b49e:	01a4      	lsls	r4, r4, #6
    b4a0:	f044 0401 	orr.w	r4, r4, #1
    b4a4:	4601      	mov	r1, r0
    b4a6:	4622      	mov	r2, r4
    b4a8:	482f      	ldr	r0, [pc, #188]	; (b568 <bt_smp_update_keys+0x114>)
    b4aa:	f010 fdaf 	bl	1c00c <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b4ae:	4628      	mov	r0, r5
    b4b0:	2108      	movs	r1, #8
}
    b4b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b4b6:	f014 bab7 	b.w	1fa28 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    b4ba:	210e      	movs	r1, #14
    b4bc:	4630      	mov	r0, r6
    b4be:	f014 f89a 	bl	1f5f6 <atomic_test_bit>
    b4c2:	b128      	cbz	r0, b4d0 <bt_smp_update_keys+0x7c>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    b4c4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
    b4c8:	7b53      	ldrb	r3, [r2, #13]
    b4ca:	f043 0302 	orr.w	r3, r3, #2
    b4ce:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
    b4d0:	7a2a      	ldrb	r2, [r5, #8]
		conn->le.keys->flags |= BT_KEYS_DEBUG;
    b4d2:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
    b4d6:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    b4d8:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
    b4da:	d836      	bhi.n	b54a <bt_smp_update_keys+0xf6>
    b4dc:	b3c2      	cbz	r2, b550 <bt_smp_update_keys+0xfc>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
    b4de:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    b4e2:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
    b4e4:	7d2b      	ldrb	r3, [r5, #20]
    b4e6:	7b6a      	ldrb	r2, [r5, #13]
    b4e8:	4293      	cmp	r3, r2
    b4ea:	bf28      	it	cs
    b4ec:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    b4ee:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b4f0:	4630      	mov	r0, r6
    b4f2:	2105      	movs	r1, #5
    b4f4:	f014 f87f 	bl	1f5f6 <atomic_test_bit>
    b4f8:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
    b4fc:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b4fe:	b350      	cbz	r0, b556 <bt_smp_update_keys+0x102>
		conn->le.keys->flags |= BT_KEYS_SC;
    b500:	f042 0210 	orr.w	r2, r2, #16
    b504:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b506:	210d      	movs	r1, #13
    b508:	4630      	mov	r0, r6
    b50a:	f014 f874 	bl	1f5f6 <atomic_test_bit>
    b50e:	b328      	cbz	r0, b55c <bt_smp_update_keys+0x108>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    b510:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    b514:	2120      	movs	r1, #32
    b516:	f014 fb63 	bl	1fbe0 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
    b51a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    b51e:	f105 0147 	add.w	r1, r5, #71	; 0x47
    b522:	2210      	movs	r2, #16
    b524:	301a      	adds	r0, #26
    b526:	f012 fa71 	bl	1da0c <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
    b52a:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    b52e:	2208      	movs	r2, #8
    b530:	2100      	movs	r1, #0
    b532:	3010      	adds	r0, #16
    b534:	f012 fa75 	bl	1da22 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
    b538:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    b53c:	2202      	movs	r2, #2
}
    b53e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
    b542:	2100      	movs	r1, #0
    b544:	3018      	adds	r0, #24
    b546:	f012 ba6c 	b.w	1da22 <memset>
	switch (smp->method) {
    b54a:	3a05      	subs	r2, #5
    b54c:	2a01      	cmp	r2, #1
    b54e:	d9c6      	bls.n	b4de <bt_smp_update_keys+0x8a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
    b550:	f023 0301 	bic.w	r3, r3, #1
    b554:	e7c5      	b.n	b4e2 <bt_smp_update_keys+0x8e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
    b556:	f022 0210 	bic.w	r2, r2, #16
    b55a:	735a      	strb	r2, [r3, #13]
}
    b55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b55e:	bf00      	nop
    b560:	00020e00 	.word	0x00020e00
    b564:	00020f10 	.word	0x00020f10
    b568:	00024321 	.word	0x00024321

0000b56c <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    b56c:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    b56e:	4b07      	ldr	r3, [pc, #28]	; (b58c <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    b570:	4807      	ldr	r0, [pc, #28]	; (b590 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    b572:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
    b576:	f003 0306 	and.w	r3, r3, #6
    b57a:	1f9a      	subs	r2, r3, #6
    b57c:	4253      	negs	r3, r2
    b57e:	4153      	adcs	r3, r2
    b580:	4a04      	ldr	r2, [pc, #16]	; (b594 <bt_smp_init+0x28>)
    b582:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    b584:	f7fb face 	bl	6b24 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    b588:	2000      	movs	r0, #0
    b58a:	bd08      	pop	{r3, pc}
    b58c:	20000000 	.word	0x20000000
    b590:	200002c4 	.word	0x200002c4
    b594:	20002a7a 	.word	0x20002a7a

0000b598 <bt_keys_get_addr>:
	return kdata.in_use;
}
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    b598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b59a:	4d11      	ldr	r5, [pc, #68]	; (b5e0 <bt_keys_get_addr+0x48>)
    b59c:	782b      	ldrb	r3, [r5, #0]
    b59e:	4283      	cmp	r3, r0
{
    b5a0:	4606      	mov	r6, r0
    b5a2:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b5a4:	d00b      	beq.n	b5be <bt_keys_get_addr+0x26>
			return keys;
		}
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    b5a6:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    b5a8:	480e      	ldr	r0, [pc, #56]	; (b5e4 <bt_keys_get_addr+0x4c>)
    b5aa:	9400      	str	r4, [sp, #0]
    b5ac:	2207      	movs	r2, #7
    b5ae:	4669      	mov	r1, sp
    b5b0:	f8cd 4003 	str.w	r4, [sp, #3]
    b5b4:	f012 fa19 	bl	1d9ea <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    b5b8:	b150      	cbz	r0, b5d0 <bt_keys_get_addr+0x38>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    b5ba:	4620      	mov	r0, r4
    b5bc:	e006      	b.n	b5cc <bt_keys_get_addr+0x34>
    b5be:	2207      	movs	r2, #7
    b5c0:	1c68      	adds	r0, r5, #1
    b5c2:	f012 fa12 	bl	1d9ea <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b5c6:	2800      	cmp	r0, #0
    b5c8:	d1ed      	bne.n	b5a6 <bt_keys_get_addr+0xe>
		keys = &key_pool[i];
    b5ca:	4628      	mov	r0, r5
}
    b5cc:	b003      	add	sp, #12
    b5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(dst, src, sizeof(*dst));
    b5d0:	4804      	ldr	r0, [pc, #16]	; (b5e4 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    b5d2:	702e      	strb	r6, [r5, #0]
    b5d4:	2207      	movs	r2, #7
    b5d6:	4639      	mov	r1, r7
    b5d8:	f012 fa18 	bl	1da0c <memcpy>
		return keys;
    b5dc:	4800      	ldr	r0, [pc, #0]	; (b5e0 <bt_keys_get_addr+0x48>)
}
    b5de:	e7f5      	b.n	b5cc <bt_keys_get_addr+0x34>
    b5e0:	200015e0 	.word	0x200015e0
    b5e4:	200015e1 	.word	0x200015e1

0000b5e8 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    b5e8:	460b      	mov	r3, r1
    b5ea:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    b5ec:	4a04      	ldr	r2, [pc, #16]	; (b600 <bt_keys_foreach+0x18>)
{
    b5ee:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    b5f0:	89d4      	ldrh	r4, [r2, #14]
    b5f2:	4204      	tst	r4, r0
    b5f4:	d002      	beq.n	b5fc <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    b5f6:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    b5f8:	4610      	mov	r0, r2
    b5fa:	4718      	bx	r3
}
    b5fc:	bc10      	pop	{r4}
    b5fe:	4770      	bx	lr
    b600:	200015e0 	.word	0x200015e0

0000b604 <bt_keys_find>:

struct bt_keys *bt_keys_find(int type, uint8_t id, const bt_addr_le_t *addr)
{
    b604:	b510      	push	{r4, lr}
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    b606:	4c09      	ldr	r4, [pc, #36]	; (b62c <bt_keys_find+0x28>)
{
    b608:	460b      	mov	r3, r1
    b60a:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    b60c:	89e2      	ldrh	r2, [r4, #14]
    b60e:	4202      	tst	r2, r0
    b610:	d007      	beq.n	b622 <bt_keys_find+0x1e>
    b612:	7822      	ldrb	r2, [r4, #0]
    b614:	429a      	cmp	r2, r3
    b616:	d104      	bne.n	b622 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    b618:	2207      	movs	r2, #7
    b61a:	1c60      	adds	r0, r4, #1
    b61c:	f012 f9e5 	bl	1d9ea <memcmp>
    b620:	b108      	cbz	r0, b626 <bt_keys_find+0x22>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    b622:	2000      	movs	r0, #0
}
    b624:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b626:	4620      	mov	r0, r4
    b628:	e7fc      	b.n	b624 <bt_keys_find+0x20>
    b62a:	bf00      	nop
    b62c:	200015e0 	.word	0x200015e0

0000b630 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(uint8_t id, const bt_addr_le_t *addr)
{
    b630:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b632:	780b      	ldrb	r3, [r1, #0]
    b634:	2b01      	cmp	r3, #1
    b636:	4606      	mov	r6, r0
    b638:	460d      	mov	r5, r1
    b63a:	d001      	beq.n	b640 <bt_keys_find_irk+0x10>
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
		return NULL;
    b63c:	2000      	movs	r0, #0
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
}
    b63e:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    b640:	798b      	ldrb	r3, [r1, #6]
    b642:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b646:	2b40      	cmp	r3, #64	; 0x40
    b648:	d1f8      	bne.n	b63c <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b64a:	4c12      	ldr	r4, [pc, #72]	; (b694 <bt_keys_find_irk+0x64>)
    b64c:	89e3      	ldrh	r3, [r4, #14]
    b64e:	079b      	lsls	r3, r3, #30
    b650:	d5f4      	bpl.n	b63c <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    b652:	7823      	ldrb	r3, [r4, #0]
    b654:	42b3      	cmp	r3, r6
    b656:	d10b      	bne.n	b670 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
    b658:	2206      	movs	r2, #6
    b65a:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    b65e:	1c68      	adds	r0, r5, #1
    b660:	f012 f9c3 	bl	1d9ea <memcmp>
    b664:	b908      	cbnz	r0, b66a <bt_keys_find_irk+0x3a>
			return &key_pool[i];
    b666:	4620      	mov	r0, r4
    b668:	e7e9      	b.n	b63e <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b66a:	89e3      	ldrh	r3, [r4, #14]
    b66c:	079a      	lsls	r2, r3, #30
    b66e:	d5e5      	bpl.n	b63c <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    b670:	7823      	ldrb	r3, [r4, #0]
    b672:	42b3      	cmp	r3, r6
    b674:	d1e2      	bne.n	b63c <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    b676:	3501      	adds	r5, #1
    b678:	4807      	ldr	r0, [pc, #28]	; (b698 <bt_keys_find_irk+0x68>)
    b67a:	4629      	mov	r1, r5
    b67c:	f012 fa18 	bl	1dab0 <bt_rpa_irk_matches>
    b680:	2800      	cmp	r0, #0
    b682:	d0db      	beq.n	b63c <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    b684:	4805      	ldr	r0, [pc, #20]	; (b69c <bt_keys_find_irk+0x6c>)
    b686:	2206      	movs	r2, #6
    b688:	4629      	mov	r1, r5
    b68a:	f012 f9bf 	bl	1da0c <memcpy>
			return &key_pool[i];
    b68e:	4801      	ldr	r0, [pc, #4]	; (b694 <bt_keys_find_irk+0x64>)
}
    b690:	e7d5      	b.n	b63e <bt_keys_find_irk+0xe>
    b692:	bf00      	nop
    b694:	200015e0 	.word	0x200015e0
    b698:	2000160a 	.word	0x2000160a
    b69c:	2000161a 	.word	0x2000161a

0000b6a0 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(uint8_t id, const bt_addr_le_t *addr)
{
    b6a0:	b510      	push	{r4, lr}
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if (key_pool[i].id == id &&
    b6a2:	4c06      	ldr	r4, [pc, #24]	; (b6bc <bt_keys_find_addr+0x1c>)
    b6a4:	7823      	ldrb	r3, [r4, #0]
    b6a6:	4283      	cmp	r3, r0
    b6a8:	d104      	bne.n	b6b4 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    b6aa:	2207      	movs	r2, #7
    b6ac:	1c60      	adds	r0, r4, #1
    b6ae:	f012 f99c 	bl	1d9ea <memcmp>
    b6b2:	b108      	cbz	r0, b6b8 <bt_keys_find_addr+0x18>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    b6b4:	2000      	movs	r0, #0
}
    b6b6:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b6b8:	4620      	mov	r0, r4
    b6ba:	e7fc      	b.n	b6b6 <bt_keys_find_addr+0x16>
    b6bc:	200015e0 	.word	0x200015e0

0000b6c0 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6c4:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b6c6:	1dc2      	adds	r2, r0, #7
    b6c8:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b6cc:	1e75      	subs	r5, r6, #1
{
    b6ce:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b6d0:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
    b6d2:	6018      	str	r0, [r3, #0]
{
    b6d4:	b082      	sub	sp, #8
    b6d6:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b6d8:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b6da:	2100      	movs	r1, #0
    b6dc:	2204      	movs	r2, #4
    b6de:	fb07 0005 	mla	r0, r7, r5, r0
    b6e2:	f012 f99e 	bl	1da22 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    b6e6:	b1bd      	cbz	r5, b718 <mem_init+0x58>
    b6e8:	3e02      	subs	r6, #2
    b6ea:	b2b6      	uxth	r6, r6
    b6ec:	fb06 7307 	mla	r3, r6, r7, r7
    b6f0:	fb06 f807 	mul.w	r8, r6, r7
    b6f4:	441c      	add	r4, r3
    b6f6:	eba8 0803 	sub.w	r8, r8, r3
    b6fa:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    b6fc:	2204      	movs	r2, #4
    b6fe:	eb04 0008 	add.w	r0, r4, r8
    b702:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
    b706:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    b708:	f012 f980 	bl	1da0c <memcpy>
	while (mem_count--) {
    b70c:	42b5      	cmp	r5, r6
    b70e:	eba4 0407 	sub.w	r4, r4, r7
    b712:	f105 0501 	add.w	r5, r5, #1
    b716:	d1f1      	bne.n	b6fc <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    b718:	b002      	add	sp, #8
    b71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b71e:	bf00      	nop

0000b720 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    b720:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    b722:	6805      	ldr	r5, [r0, #0]
{
    b724:	b082      	sub	sp, #8
	if (*mem_head) {
    b726:	b195      	cbz	r5, b74e <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b728:	1deb      	adds	r3, r5, #7
    b72a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    b72e:	2204      	movs	r2, #4
    b730:	4604      	mov	r4, r0
    b732:	4629      	mov	r1, r5
    b734:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b738:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    b73a:	f012 f967 	bl	1da0c <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    b73e:	9b01      	ldr	r3, [sp, #4]
    b740:	b123      	cbz	r3, b74c <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b742:	1dda      	adds	r2, r3, #7
    b744:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    b748:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b74a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    b74c:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    b74e:	4628      	mov	r0, r5
    b750:	b002      	add	sp, #8
    b752:	bd70      	pop	{r4, r5, r6, pc}

0000b754 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    b754:	680b      	ldr	r3, [r1, #0]
{
    b756:	b570      	push	{r4, r5, r6, lr}
    b758:	460c      	mov	r4, r1
    b75a:	4605      	mov	r5, r0
	if (*mem_head) {
    b75c:	b183      	cbz	r3, b780 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b75e:	3307      	adds	r3, #7
    b760:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
    b764:	881e      	ldrh	r6, [r3, #0]
    b766:	3601      	adds	r6, #1
    b768:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
    b76a:	2204      	movs	r2, #4
    b76c:	4621      	mov	r1, r4
    b76e:	4628      	mov	r0, r5
    b770:	f012 f94c 	bl	1da0c <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    b774:	1deb      	adds	r3, r5, #7
    b776:	f023 0303 	bic.w	r3, r3, #3
    b77a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    b77c:	6025      	str	r5, [r4, #0]
}
    b77e:	bd70      	pop	{r4, r5, r6, pc}
    b780:	2601      	movs	r6, #1
    b782:	e7f2      	b.n	b76a <mem_release+0x16>

0000b784 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    b784:	fb02 0001 	mla	r0, r2, r1, r0
    b788:	4770      	bx	lr
    b78a:	bf00      	nop

0000b78c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    b78c:	1a40      	subs	r0, r0, r1
    b78e:	b280      	uxth	r0, r0
}
    b790:	fbb0 f0f2 	udiv	r0, r0, r2
    b794:	4770      	bx	lr
    b796:	bf00      	nop

0000b798 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    b798:	1e53      	subs	r3, r2, #1
	src += len;
    b79a:	4411      	add	r1, r2
	while (len--) {
    b79c:	b29b      	uxth	r3, r3
    b79e:	b142      	cbz	r2, b7b2 <mem_rcopy+0x1a>
    b7a0:	43db      	mvns	r3, r3
    b7a2:	3801      	subs	r0, #1
    b7a4:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
    b7a6:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    b7aa:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    b7ae:	4291      	cmp	r1, r2
    b7b0:	d1f9      	bne.n	b7a6 <mem_rcopy+0xe>
	}
}
    b7b2:	4770      	bx	lr

0000b7b4 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    b7b4:	4401      	add	r1, r0
    b7b6:	e002      	b.n	b7be <mem_nz+0xa>
		if (*src++) {
    b7b8:	f810 3b01 	ldrb.w	r3, [r0], #1
    b7bc:	b91b      	cbnz	r3, b7c6 <mem_nz+0x12>
	while (len--) {
    b7be:	4288      	cmp	r0, r1
    b7c0:	d1fa      	bne.n	b7b8 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    b7c2:	2000      	movs	r0, #0
    b7c4:	4770      	bx	lr
			return 1;
    b7c6:	2001      	movs	r0, #1
}
    b7c8:	4770      	bx	lr
    b7ca:	bf00      	nop

0000b7cc <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    b7cc:	6010      	str	r0, [r2, #0]
    b7ce:	6008      	str	r0, [r1, #0]

	return link;
}
    b7d0:	4770      	bx	lr
    b7d2:	bf00      	nop

0000b7d4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    b7d4:	680a      	ldr	r2, [r1, #0]
{
    b7d6:	4603      	mov	r3, r0
	if (*head != *tail) {
    b7d8:	6800      	ldr	r0, [r0, #0]
    b7da:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    b7dc:	bf05      	ittet	eq
    b7de:	2200      	moveq	r2, #0
    b7e0:	600a      	streq	r2, [r1, #0]
		return NULL;
    b7e2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    b7e4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    b7e6:	4770      	bx	lr

0000b7e8 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    b7e8:	f8d2 c000 	ldr.w	ip, [r2]
    b7ec:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    b7f0:	f8d2 c000 	ldr.w	ip, [r2]
    b7f4:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
    b7f8:	6010      	str	r0, [r2, #0]

	return link;
}
    b7fa:	4770      	bx	lr

0000b7fc <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    b7fc:	4288      	cmp	r0, r1
    b7fe:	d003      	beq.n	b808 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    b800:	b11a      	cbz	r2, b80a <memq_peek+0xe>
		*mem = head->mem;
    b802:	6843      	ldr	r3, [r0, #4]
    b804:	6013      	str	r3, [r2, #0]
    b806:	4770      	bx	lr
		return NULL;
    b808:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    b80a:	4770      	bx	lr

0000b80c <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    b80c:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    b80e:	4283      	cmp	r3, r0
    b810:	d009      	beq.n	b826 <memq_dequeue+0x1a>
	if (mem) {
    b812:	b12a      	cbz	r2, b820 <memq_dequeue+0x14>
		*mem = head->mem;
    b814:	6858      	ldr	r0, [r3, #4]
    b816:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    b818:	681a      	ldr	r2, [r3, #0]
    b81a:	600a      	str	r2, [r1, #0]

	return old_head;
}
    b81c:	4618      	mov	r0, r3
    b81e:	4770      	bx	lr
	if (old_head == NULL) {
    b820:	2b00      	cmp	r3, #0
    b822:	d1f9      	bne.n	b818 <memq_dequeue+0xc>
    b824:	e7fa      	b.n	b81c <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    b826:	2300      	movs	r3, #0
    b828:	e7f8      	b.n	b81c <memq_dequeue+0x10>
    b82a:	bf00      	nop

0000b82c <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    b82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b830:	f8df 8030 	ldr.w	r8, [pc, #48]	; b864 <mayfly_init+0x38>
    b834:	4e0c      	ldr	r6, [pc, #48]	; (b868 <mayfly_init+0x3c>)
    b836:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    b838:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    b83c:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    b83e:	1d22      	adds	r2, r4, #4
    b840:	4621      	mov	r1, r4
    b842:	4628      	mov	r0, r5
		while (caller_id--) {
    b844:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
    b846:	f7ff ffc1 	bl	b7cc <memq_init>
		while (caller_id--) {
    b84a:	42b4      	cmp	r4, r6
    b84c:	f1a5 0508 	sub.w	r5, r5, #8
    b850:	d1f5      	bne.n	b83e <mayfly_init+0x12>
	while (callee_id--) {
    b852:	3f04      	subs	r7, #4
    b854:	1d3b      	adds	r3, r7, #4
    b856:	f1a8 0820 	sub.w	r8, r8, #32
    b85a:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    b85e:	d1eb      	bne.n	b838 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b864:	200016dc 	.word	0x200016dc
    b868:	2000176c 	.word	0x2000176c

0000b86c <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    b86c:	b410      	push	{r4}
    b86e:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
    b870:	4c15      	ldr	r4, [pc, #84]	; (b8c8 <mayfly_enable+0x5c>)
{
    b872:	468c      	mov	ip, r1
	if (enable) {
    b874:	b192      	cbz	r2, b89c <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    b876:	eb00 0140 	add.w	r1, r0, r0, lsl #1
    b87a:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
    b87e:	0100      	lsls	r0, r0, #4
    b880:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b884:	4421      	add	r1, r4
    b886:	7a48      	ldrb	r0, [r1, #9]
    b888:	7a0c      	ldrb	r4, [r1, #8]
    b88a:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    b88c:	bf04      	itt	eq
    b88e:	3001      	addeq	r0, #1
    b890:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    b892:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
    b894:	4661      	mov	r1, ip
    b896:	4618      	mov	r0, r3
    b898:	f00d b858 	b.w	1894c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    b89c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    b8a0:	0112      	lsls	r2, r2, #4
    b8a2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b8a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b8aa:	4423      	add	r3, r4
    b8ac:	7a9c      	ldrb	r4, [r3, #10]
    b8ae:	7ada      	ldrb	r2, [r3, #11]
    b8b0:	42a2      	cmp	r2, r4
    b8b2:	d001      	beq.n	b8b8 <mayfly_enable+0x4c>
}
    b8b4:	bc10      	pop	{r4}
    b8b6:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
    b8b8:	3201      	adds	r2, #1
    b8ba:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    b8bc:	4b03      	ldr	r3, [pc, #12]	; (b8cc <mayfly_enable+0x60>)
    b8be:	2201      	movs	r2, #1
    b8c0:	545a      	strb	r2, [r3, r1]
}
    b8c2:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
    b8c4:	f00d b898 	b.w	189f8 <mayfly_pend>
    b8c8:	200016e8 	.word	0x200016e8
    b8cc:	200016e4 	.word	0x200016e4

0000b8d0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    b8d0:	b570      	push	{r4, r5, r6, lr}
    b8d2:	4606      	mov	r6, r0
    b8d4:	461c      	mov	r4, r3
    b8d6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    b8d8:	b322      	cbz	r2, b924 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    b8da:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    b8dc:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    b8de:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b8e0:	f012 0203 	ands.w	r2, r2, #3
    b8e4:	d005      	beq.n	b8f2 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    b8e6:	2a01      	cmp	r2, #1
    b8e8:	d040      	beq.n	b96c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    b8ea:	3301      	adds	r3, #1
    b8ec:	b2db      	uxtb	r3, r3
    b8ee:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    b8f0:	e00f      	b.n	b912 <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    b8f2:	3301      	adds	r3, #1
    b8f4:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b8f6:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
    b8f8:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b8fa:	2304      	movs	r3, #4
    b8fc:	fb11 3105 	smlabb	r1, r1, r5, r3
    b900:	4a1b      	ldr	r2, [pc, #108]	; (b970 <mayfly_enqueue+0xa0>)
    b902:	6860      	ldr	r0, [r4, #4]
    b904:	230c      	movs	r3, #12
    b906:	fb13 1306 	smlabb	r3, r3, r6, r1
    b90a:	441a      	add	r2, r3
    b90c:	4621      	mov	r1, r4
    b90e:	f7ff ff6b 	bl	b7e8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    b912:	4b18      	ldr	r3, [pc, #96]	; (b974 <mayfly_enqueue+0xa4>)
    b914:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    b916:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    b918:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    b91a:	4629      	mov	r1, r5
    b91c:	f00d f86c 	bl	189f8 <mayfly_pend>

	return 0;
    b920:	2000      	movs	r0, #0
}
    b922:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b924:	f00d f852 	bl	189cc <mayfly_prio_is_equal>
    b928:	2800      	cmp	r0, #0
    b92a:	d0d6      	beq.n	b8da <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    b92c:	4629      	mov	r1, r5
    b92e:	4630      	mov	r0, r6
    b930:	f00d f82c 	bl	1898c <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b934:	2800      	cmp	r0, #0
    b936:	d0d0      	beq.n	b8da <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    b938:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    b93c:	0112      	lsls	r2, r2, #4
    b93e:	490c      	ldr	r1, [pc, #48]	; (b970 <mayfly_enqueue+0xa0>)
    b940:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b944:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b948:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    b94a:	7a9a      	ldrb	r2, [r3, #10]
    b94c:	7adb      	ldrb	r3, [r3, #11]
    b94e:	429a      	cmp	r2, r3
    b950:	d1c3      	bne.n	b8da <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
    b952:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
    b954:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    b956:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b958:	0792      	lsls	r2, r2, #30
    b95a:	d002      	beq.n	b962 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    b95c:	3302      	adds	r3, #2
    b95e:	b2db      	uxtb	r3, r3
    b960:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    b962:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b966:	4798      	blx	r3
		return 0;
    b968:	2000      	movs	r0, #0
}
    b96a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    b96c:	4610      	mov	r0, r2
}
    b96e:	bd70      	pop	{r4, r5, r6, pc}
    b970:	200016e8 	.word	0x200016e8
    b974:	200016e4 	.word	0x200016e4

0000b978 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    b978:	4a4f      	ldr	r2, [pc, #316]	; (bab8 <mayfly_run+0x140>)
    b97a:	5c13      	ldrb	r3, [r2, r0]
    b97c:	2b00      	cmp	r3, #0
    b97e:	f000 8099 	beq.w	bab4 <mayfly_run+0x13c>
{
    b982:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
    b986:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b988:	4f4c      	ldr	r7, [pc, #304]	; (babc <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
    b98a:	5413      	strb	r3, [r2, r0]
{
    b98c:	b087      	sub	sp, #28
	uint8_t enable = 0U;
    b98e:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b990:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
    b994:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b998:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
    b99c:	9303      	str	r3, [sp, #12]
    b99e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b9a2:	f10b 0804 	add.w	r8, fp, #4
    b9a6:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
    b9aa:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
    b9ae:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    b9b0:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    b9b4:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    b9b6:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    b9b8:	f7ff ff20 	bl	b7fc <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    b9bc:	f107 0624 	add.w	r6, r7, #36	; 0x24
    b9c0:	4683      	mov	fp, r0
    b9c2:	b398      	cbz	r0, ba2c <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    b9c4:	9c05      	ldr	r4, [sp, #20]
    b9c6:	7863      	ldrb	r3, [r4, #1]
    b9c8:	7825      	ldrb	r5, [r4, #0]
    b9ca:	1aed      	subs	r5, r5, r3
    b9cc:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    b9d0:	2d01      	cmp	r5, #1
    b9d2:	d106      	bne.n	b9e2 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    b9d4:	3b01      	subs	r3, #1
    b9d6:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    b9d8:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
    b9dc:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
    b9de:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
    b9e0:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    b9e2:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    b9e4:	1ac3      	subs	r3, r0, r3
    b9e6:	f003 0303 	and.w	r3, r3, #3
    b9ea:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    b9ec:	f04f 0200 	mov.w	r2, #0
    b9f0:	4631      	mov	r1, r6
	req = m->_req;
    b9f2:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    b9f6:	d00f      	beq.n	ba18 <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
    b9f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b9fa:	f7ff ff07 	bl	b80c <memq_dequeue>
		ack = m->_ack;
    b9fe:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    ba02:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    ba04:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    ba08:	eba3 030c 	sub.w	r3, r3, ip
    ba0c:	f003 0303 	and.w	r3, r3, #3
    ba10:	2b01      	cmp	r3, #1
		m->_ack = req;
    ba12:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    ba16:	d045      	beq.n	baa4 <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    ba18:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    ba1c:	aa05      	add	r2, sp, #20
    ba1e:	f7ff feed 	bl	b7fc <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    ba22:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    ba24:	4683      	mov	fp, r0
			if (state == 1U) {
    ba26:	d02b      	beq.n	ba80 <mayfly_run+0x108>
		while (link) {
    ba28:	2800      	cmp	r0, #0
    ba2a:	d1cb      	bne.n	b9c4 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    ba2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    ba30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    ba34:	429a      	cmp	r2, r3
    ba36:	d003      	beq.n	ba40 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    ba38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    ba3c:	2301      	movs	r3, #1
    ba3e:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    ba40:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    ba44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    ba48:	429a      	cmp	r2, r3
    ba4a:	d003      	beq.n	ba54 <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    ba4c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    ba50:	2301      	movs	r3, #1
    ba52:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    ba54:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    ba58:	fa5f f989 	uxtb.w	r9, r9
    ba5c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    ba60:	f1a7 070c 	sub.w	r7, r7, #12
    ba64:	d1a3      	bne.n	b9ae <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    ba66:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    ba6a:	b1c3      	cbz	r3, ba9e <mayfly_run+0x126>
    ba6c:	9b03      	ldr	r3, [sp, #12]
    ba6e:	b9b3      	cbnz	r3, ba9e <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
    ba70:	461a      	mov	r2, r3
    ba72:	4651      	mov	r1, sl
    ba74:	4650      	mov	r0, sl
	}
}
    ba76:	b007      	add	sp, #28
    ba78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
    ba7c:	f00c bf66 	b.w	1894c <mayfly_enable_cb>
				if (caller_id || link) {
    ba80:	f1b9 0f00 	cmp.w	r9, #0
    ba84:	d101      	bne.n	ba8a <mayfly_run+0x112>
    ba86:	2800      	cmp	r0, #0
    ba88:	d0d0      	beq.n	ba2c <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
    ba8a:	f8dd a008 	ldr.w	sl, [sp, #8]
    ba8e:	4a0a      	ldr	r2, [pc, #40]	; (bab8 <mayfly_run+0x140>)
    ba90:	2301      	movs	r3, #1
    ba92:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    ba96:	4651      	mov	r1, sl
    ba98:	4650      	mov	r0, sl
    ba9a:	f00c ffad 	bl	189f8 <mayfly_pend>
}
    ba9e:	b007      	add	sp, #28
    baa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    baa4:	4642      	mov	r2, r8
    baa6:	4621      	mov	r1, r4
    baa8:	4658      	mov	r0, fp
			m->_ack = ack;
    baaa:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    baae:	f7ff fe9b 	bl	b7e8 <memq_enqueue>
    bab2:	e7b1      	b.n	ba18 <mayfly_run+0xa0>
    bab4:	4770      	bx	lr
    bab6:	bf00      	nop
    bab8:	200016e4 	.word	0x200016e4
    babc:	200016e8 	.word	0x200016e8

0000bac0 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    bac0:	1e4b      	subs	r3, r1, #1
    bac2:	b2db      	uxtb	r3, r3
    bac4:	b189      	cbz	r1, baea <util_ones_count_get+0x2a>
    bac6:	1e41      	subs	r1, r0, #1
    bac8:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
    bacc:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    bace:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    bad2:	b13b      	cbz	r3, bae4 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    bad4:	b25b      	sxtb	r3, r3
    bad6:	1e5a      	subs	r2, r3, #1
    bad8:	4013      	ands	r3, r2
			one_count++;
    bada:	3001      	adds	r0, #1
		while (bite) {
    badc:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    bae0:	b2c0      	uxtb	r0, r0
		while (bite) {
    bae2:	d1f7      	bne.n	bad4 <util_ones_count_get+0x14>
	while (octets_len--) {
    bae4:	4561      	cmp	r1, ip
    bae6:	d1f2      	bne.n	bace <util_ones_count_get+0xe>
    bae8:	4770      	bx	lr
	uint8_t one_count = 0U;
    baea:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
    baec:	4770      	bx	lr
    baee:	bf00      	nop

0000baf0 <ticker_dequeue>:
 * @return Total ticks until expiration for dequeued ticker node, or 0 if
 * node was not found
 * @internal
 */
static uint32_t ticker_dequeue(struct ticker_instance *instance, uint8_t id)
{
    baf0:	b530      	push	{r4, r5, lr}

	/* Find the ticker's position in ticker node list while accumulating
	 * ticks_to_expire
	 */
	node = &instance->nodes[0];
	previous = instance->ticker_id_head;
    baf2:	7f43      	ldrb	r3, [r0, #29]
	node = &instance->nodes[0];
    baf4:	6805      	ldr	r5, [r0, #0]
	current = previous;
	total = 0U;
	ticker_current = 0;
	while (current != TICKER_NULL) {
    baf6:	2bff      	cmp	r3, #255	; 0xff
    baf8:	d014      	beq.n	bb24 <ticker_dequeue+0x34>
		ticker_current = &node[current];
    bafa:	eb03 0243 	add.w	r2, r3, r3, lsl #1

		if (current == id) {
    bafe:	428b      	cmp	r3, r1
		ticker_current = &node[current];
    bb00:	eb05 1202 	add.w	r2, r5, r2, lsl #4
		if (current == id) {
    bb04:	d028      	beq.n	bb58 <ticker_dequeue+0x68>
	total = 0U;
    bb06:	f04f 0c00 	mov.w	ip, #0
    bb0a:	e001      	b.n	bb10 <ticker_dequeue+0x20>
		if (current == id) {
    bb0c:	4299      	cmp	r1, r3
    bb0e:	d00b      	beq.n	bb28 <ticker_dequeue+0x38>
			break;
		}

		total += ticker_current->ticks_to_expire;
    bb10:	469e      	mov	lr, r3
		previous = current;
		current = ticker_current->next;
    bb12:	7813      	ldrb	r3, [r2, #0]
		total += ticker_current->ticks_to_expire;
    bb14:	6894      	ldr	r4, [r2, #8]
	while (current != TICKER_NULL) {
    bb16:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
    bb18:	eb03 0243 	add.w	r2, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
    bb1c:	44a4      	add	ip, r4
		ticker_current = &node[current];
    bb1e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
	while (current != TICKER_NULL) {
    bb22:	d1f3      	bne.n	bb0c <ticker_dequeue+0x1c>
	}

	if (current == TICKER_NULL) {
		/* Ticker not in active list */
		return 0;
    bb24:	2000      	movs	r0, #0
	if (ticker_current->next != TICKER_NULL) {
		node[ticker_current->next].ticks_to_expire += timeout;
	}

	return (total + timeout);
}
    bb26:	bd30      	pop	{r4, r5, pc}
	if (previous == current) {
    bb28:	4571      	cmp	r1, lr
    bb2a:	d018      	beq.n	bb5e <ticker_dequeue+0x6e>
	node[previous].next = ticker_current->next;
    bb2c:	7813      	ldrb	r3, [r2, #0]
	timeout = ticker_current->ticks_to_expire;
    bb2e:	6890      	ldr	r0, [r2, #8]
	node[previous].next = ticker_current->next;
    bb30:	fa0f fe8e 	sxth.w	lr, lr
    bb34:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
    bb38:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
    bb3c:	f805 300e 	strb.w	r3, [r5, lr]
	if (ticker_current->next != TICKER_NULL) {
    bb40:	7813      	ldrb	r3, [r2, #0]
    bb42:	2bff      	cmp	r3, #255	; 0xff
    bb44:	d006      	beq.n	bb54 <ticker_dequeue+0x64>
		node[ticker_current->next].ticks_to_expire += timeout;
    bb46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bb4a:	eb05 1503 	add.w	r5, r5, r3, lsl #4
    bb4e:	68ab      	ldr	r3, [r5, #8]
    bb50:	4403      	add	r3, r0
    bb52:	60ab      	str	r3, [r5, #8]
	return (total + timeout);
    bb54:	4460      	add	r0, ip
}
    bb56:	bd30      	pop	{r4, r5, pc}
		if (current == id) {
    bb58:	469e      	mov	lr, r3
	total = 0U;
    bb5a:	f04f 0c00 	mov.w	ip, #0
		instance->ticker_id_head = ticker_current->next;
    bb5e:	7813      	ldrb	r3, [r2, #0]
    bb60:	7743      	strb	r3, [r0, #29]
    bb62:	e7e4      	b.n	bb2e <ticker_dequeue+0x3e>

0000bb64 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    bb64:	eba2 0c01 	sub.w	ip, r2, r1
    bb68:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
    bb6c:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
    bb6e:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    bb70:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    bb72:	d10a      	bne.n	bb8a <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bb74:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    bb78:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    bb7a:	42a3      	cmp	r3, r4
    bb7c:	d914      	bls.n	bba8 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
    bb7e:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
    bb80:	2100      	movs	r1, #0
}
    bb82:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    bb84:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    bb86:	6141      	str	r1, [r0, #20]
}
    bb88:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bb8a:	1a89      	subs	r1, r1, r2
    bb8c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    bb90:	428b      	cmp	r3, r1
    bb92:	d806      	bhi.n	bba2 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
    bb94:	4421      	add	r1, r4
    bb96:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    bb98:	2300      	movs	r3, #0
}
    bb9a:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
    bb9c:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    bb9e:	6141      	str	r1, [r0, #20]
}
    bba0:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
    bba2:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
    bba4:	42a3      	cmp	r3, r4
    bba6:	d8ea      	bhi.n	bb7e <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
    bba8:	1ae1      	subs	r1, r4, r3
    bbaa:	e7f5      	b.n	bb98 <ticks_to_expire_prep+0x34>

0000bbac <ticker_job_list_insert>:
{
    bbac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bbb0:	b087      	sub	sp, #28
    bbb2:	4603      	mov	r3, r0
	count_user = instance->count_user;
    bbb4:	7a42      	ldrb	r2, [r0, #9]
{
    bbb6:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
    bbb8:	6800      	ldr	r0, [r0, #0]
    bbba:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
    bbbc:	6858      	ldr	r0, [r3, #4]
    bbbe:	9005      	str	r0, [sp, #20]
	while (count_user--) {
    bbc0:	2a00      	cmp	r2, #0
    bbc2:	f000 80f6 	beq.w	bdb2 <ticker_job_list_insert+0x206>
    bbc6:	1e53      	subs	r3, r2, #1
    bbc8:	b2db      	uxtb	r3, r3
    bbca:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    bbce:	460f      	mov	r7, r1
    bbd0:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    bbd2:	9b03      	ldr	r3, [sp, #12]
    bbd4:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
    bbd6:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
    bbd8:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
    bbda:	2fff      	cmp	r7, #255	; 0xff
    bbdc:	d05e      	beq.n	bc9c <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
    bbde:	eb07 0447 	add.w	r4, r7, r7, lsl #1
    bbe2:	9b02      	ldr	r3, [sp, #8]
    bbe4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    bbe8:	46b8      	mov	r8, r7
				insert_head = ticker->next;
    bbea:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
    bbee:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
    bbf2:	2500      	movs	r5, #0
	node = &instance->nodes[0];
    bbf4:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
    bbf6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    bbfa:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
    bbfe:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
    bc02:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
    bc04:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bc08:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
    bc0a:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bc0e:	d10f      	bne.n	bc30 <ticker_job_list_insert+0x84>
    bc10:	e0ca      	b.n	bda8 <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    bc12:	1a09      	subs	r1, r1, r0
    bc14:	d106      	bne.n	bc24 <ticker_job_list_insert+0x78>
    bc16:	f8bb a01e 	ldrh.w	sl, [fp, #30]
    bc1a:	f8bc c01e 	ldrh.w	ip, [ip, #30]
    bc1e:	45e2      	cmp	sl, ip
    bc20:	f200 8086 	bhi.w	bd30 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
    bc24:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bc28:	2bff      	cmp	r3, #255	; 0xff
    bc2a:	4691      	mov	r9, r2
    bc2c:	d072      	beq.n	bd14 <ticker_job_list_insert+0x168>
    bc2e:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
    bc30:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    bc34:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
    bc38:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
    bc3a:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bc3e:	4288      	cmp	r0, r1
    bc40:	d9e7      	bls.n	bc12 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
    bc42:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
    bc46:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    bc4a:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
    bc4e:	d166      	bne.n	bd1e <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
    bc50:	9b01      	ldr	r3, [sp, #4]
    bc52:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    bc56:	2aff      	cmp	r2, #255	; 0xff
    bc58:	d008      	beq.n	bc6c <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
    bc5a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    bc5e:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
    bc62:	f8de 3008 	ldr.w	r3, [lr, #8]
    bc66:	1a5b      	subs	r3, r3, r1
    bc68:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
    bc6c:	78a3      	ldrb	r3, [r4, #2]
    bc6e:	3301      	adds	r3, #1
    bc70:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    bc72:	2d00      	cmp	r5, #0
    bc74:	d0b1      	beq.n	bbda <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bc76:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    bc7a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bc7c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    bc7e:	2200      	movs	r2, #0
    bc80:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bc82:	b113      	cbz	r3, bc8a <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bc84:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bc86:	4610      	mov	r0, r2
    bc88:	4798      	blx	r3
				if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    bc8a:	6863      	ldr	r3, [r4, #4]
    bc8c:	2b00      	cmp	r3, #0
    bc8e:	d1a4      	bne.n	bbda <ticker_job_list_insert+0x2e>
					ticker->op_context =
    bc90:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
    bc94:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
    bc96:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    bc9a:	d1a0      	bne.n	bbde <ticker_job_list_insert+0x32>
    bc9c:	9b03      	ldr	r3, [sp, #12]
    bc9e:	7898      	ldrb	r0, [r3, #2]
    bca0:	42b0      	cmp	r0, r6
    bca2:	d02f      	beq.n	bd04 <ticker_job_list_insert+0x158>
    bca4:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
    bca8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    bcac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
    bcb0:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bcb4:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
    bcb8:	3601      	adds	r6, #1
    bcba:	b2f6      	uxtb	r6, r6
					first = 0U;
    bcbc:	42b1      	cmp	r1, r6
    bcbe:	bf08      	it	eq
    bcc0:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bcc2:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
    bcc4:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bcc8:	d11a      	bne.n	bd00 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
    bcca:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
    bcce:	9902      	ldr	r1, [sp, #8]
    bcd0:	eb08 0248 	add.w	r2, r8, r8, lsl #1
    bcd4:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    bcd8:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
    bcdc:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
    bcde:	7862      	ldrb	r2, [r4, #1]
    bce0:	1a52      	subs	r2, r2, r1
    bce2:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    bce6:	d025      	beq.n	bd34 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bce8:	f04f 0200 	mov.w	r2, #0
    bcec:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
    bcf0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bcf2:	2001      	movs	r0, #1
	user_op->status = status;
    bcf4:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bcf6:	b10b      	cbz	r3, bcfc <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bcf8:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bcfa:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    bcfc:	f89b 0002 	ldrb.w	r0, [fp, #2]
    bd00:	42b0      	cmp	r0, r6
    bd02:	d1d1      	bne.n	bca8 <ticker_job_list_insert+0xfc>
	while (count_user--) {
    bd04:	9a03      	ldr	r2, [sp, #12]
    bd06:	9905      	ldr	r1, [sp, #20]
    bd08:	4291      	cmp	r1, r2
    bd0a:	f1a2 0308 	sub.w	r3, r2, #8
    bd0e:	d050      	beq.n	bdb2 <ticker_job_list_insert+0x206>
    bd10:	9303      	str	r3, [sp, #12]
    bd12:	e75e      	b.n	bbd2 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
    bd14:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
    bd18:	f88b 3000 	strb.w	r3, [fp]
    bd1c:	461a      	mov	r2, r3
		node[previous].next = id;
    bd1e:	fa0f f989 	sxth.w	r9, r9
    bd22:	eb09 0949 	add.w	r9, r9, r9, lsl #1
    bd26:	ea4f 1909 	mov.w	r9, r9, lsl #4
    bd2a:	f80e 8009 	strb.w	r8, [lr, r9]
    bd2e:	e792      	b.n	bc56 <ticker_job_list_insert+0xaa>
    bd30:	4601      	mov	r1, r0
    bd32:	e786      	b.n	bc42 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    bd34:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    bd36:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    bd38:	f64f 70fe 	movw	r0, #65534	; 0xfffe
    bd3c:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
    bd3e:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
    bd40:	d02a      	beq.n	bd98 <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
    bd42:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bd46:	1a9a      	subs	r2, r3, r2
    bd48:	fab2 f282 	clz	r2, r2
    bd4c:	0952      	lsrs	r2, r2, #5
    bd4e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    bd52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    bd54:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    bd56:	68ea      	ldr	r2, [r5, #12]
    bd58:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    bd5a:	692a      	ldr	r2, [r5, #16]
    bd5c:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    bd5e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
    bd62:	4293      	cmp	r3, r2
    bd64:	bf88      	it	hi
    bd66:	2300      	movhi	r3, #0
    bd68:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
    bd6a:	69ab      	ldr	r3, [r5, #24]
    bd6c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
    bd6e:	69eb      	ldr	r3, [r5, #28]
    bd70:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
    bd72:	6a2b      	ldr	r3, [r5, #32]
    bd74:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
    bd76:	68ab      	ldr	r3, [r5, #8]
    bd78:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
    bd7a:	2300      	movs	r3, #0
    bd7c:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    bd7e:	686a      	ldr	r2, [r5, #4]
    bd80:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
    bd82:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    bd84:	f7ff feee 	bl	bb64 <ticks_to_expire_prep>
	ticker->force = 1U;
    bd88:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
    bd8c:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    bd90:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
    bd94:	70e3      	strb	r3, [r4, #3]
}
    bd96:	e72d      	b.n	bbf4 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
    bd98:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
    bd9a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    bd9c:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
    bd9e:	68ea      	ldr	r2, [r5, #12]
    bda0:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
    bda2:	692a      	ldr	r2, [r5, #16]
    bda4:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
    bda6:	e7df      	b.n	bd68 <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
    bda8:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
    bdac:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
    bdb0:	e75c      	b.n	bc6c <ticker_job_list_insert+0xc0>
}
    bdb2:	b007      	add	sp, #28
    bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000bdb8 <ticker_worker>:
{
    bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    bdbc:	7f82      	ldrb	r2, [r0, #30]
{
    bdbe:	b08f      	sub	sp, #60	; 0x3c
	instance->worker_trigger = 1U;
    bdc0:	2301      	movs	r3, #1
	if (instance->job_guard) {
    bdc2:	9206      	str	r2, [sp, #24]
	instance->worker_trigger = 1U;
    bdc4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    bdc6:	2a00      	cmp	r2, #0
    bdc8:	d15b      	bne.n	be82 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
    bdca:	7f43      	ldrb	r3, [r0, #29]
    bdcc:	2bff      	cmp	r3, #255	; 0xff
    bdce:	4681      	mov	r9, r0
    bdd0:	d056      	beq.n	be80 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    bdd2:	f00c f903 	bl	17fdc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bdd6:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    bdda:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    bdde:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bde2:	1a80      	subs	r0, r0, r2
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    bde4:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bde6:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    bdea:	f000 813f 	beq.w	c06c <ticker_worker+0x2b4>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    bdee:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    bdf2:	42b3      	cmp	r3, r6
    bdf4:	bf94      	ite	ls
    bdf6:	2300      	movls	r3, #0
    bdf8:	2301      	movhi	r3, #1
    bdfa:	9303      	str	r3, [sp, #12]
	while (ticker_id_head != TICKER_NULL) {
    bdfc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    be00:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    be04:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    be08:	d046      	beq.n	be98 <ticker_worker+0xe0>
			must_expire_skip = 1U;
    be0a:	f8cd 9010 	str.w	r9, [sp, #16]
		ticker = &node[ticker_id_head];
    be0e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    be12:	eb07 140b 	add.w	r4, r7, fp, lsl #4
    be16:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    be1a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    be1c:	42b3      	cmp	r3, r6
    be1e:	d839      	bhi.n	be94 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    be20:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
    be24:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
    be28:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
    be2a:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    be2c:	7863      	ldrb	r3, [r4, #1]
    be2e:	eba3 030a 	sub.w	r3, r3, sl
    be32:	b2db      	uxtb	r3, r3
    be34:	2b01      	cmp	r3, #1
    be36:	d12a      	bne.n	be8e <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
    be38:	69a0      	ldr	r0, [r4, #24]
    be3a:	2800      	cmp	r0, #0
    be3c:	d054      	beq.n	bee8 <ticker_worker+0x130>
    be3e:	9b03      	ldr	r3, [sp, #12]
    be40:	2b00      	cmp	r3, #0
    be42:	d04c      	beq.n	bede <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
    be44:	8be3      	ldrh	r3, [r4, #30]
    be46:	9305      	str	r3, [sp, #20]
			struct ticker_ext *ext_data = ticker->ext_data;
    be48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
    be4a:	b13a      	cbz	r2, be5c <ticker_worker+0xa4>
    be4c:	6813      	ldr	r3, [r2, #0]
    be4e:	b11b      	cbz	r3, be58 <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
    be50:	7a13      	ldrb	r3, [r2, #8]
    be52:	2b00      	cmp	r3, #0
    be54:	f000 80f0 	beq.w	c038 <ticker_worker+0x280>
				ext_data->reschedule_state =
    be58:	2300      	movs	r3, #0
    be5a:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
    be5c:	9b05      	ldr	r3, [sp, #20]
			if ((ticker->must_expire == 0U) ||
    be5e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    be62:	3301      	adds	r3, #1
    be64:	b29b      	uxth	r3, r3
    be66:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    be68:	b171      	cbz	r1, be88 <ticker_worker+0xd0>
    be6a:	8ba1      	ldrh	r1, [r4, #28]
    be6c:	4299      	cmp	r1, r3
    be6e:	d20b      	bcs.n	be88 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    be70:	2a00      	cmp	r2, #0
    be72:	f000 80fe 	beq.w	c072 <ticker_worker+0x2ba>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    be76:	7a13      	ldrb	r3, [r2, #8]
    be78:	2b01      	cmp	r3, #1
    be7a:	d005      	beq.n	be88 <ticker_worker+0xd0>
			must_expire_skip = 1U;
    be7c:	2301      	movs	r3, #1
    be7e:	e036      	b.n	beee <ticker_worker+0x136>
		instance->worker_trigger = 0U;
    be80:	77c2      	strb	r2, [r0, #31]
}
    be82:	b00f      	add	sp, #60	; 0x3c
    be84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
    be88:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    be8c:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
    be8e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    be92:	d1bc      	bne.n	be0e <ticker_worker+0x56>
    be94:	f8dd 9010 	ldr.w	r9, [sp, #16]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    be98:	f899 300b 	ldrb.w	r3, [r9, #11]
    be9c:	f899 200a 	ldrb.w	r2, [r9, #10]
    bea0:	429a      	cmp	r2, r3
    bea2:	d10a      	bne.n	beba <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
    bea4:	3201      	adds	r2, #1
    bea6:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    bea8:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    beaa:	bf1c      	itt	ne
    beac:	4613      	movne	r3, r2
    beae:	9306      	strne	r3, [sp, #24]
	*ticks_elapsed_index = idx;
    beb0:	9a06      	ldr	r2, [sp, #24]
    beb2:	f889 200b 	strb.w	r2, [r9, #11]
    beb6:	bf08      	it	eq
    beb8:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    beba:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bebe:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    bec2:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    bec6:	2200      	movs	r2, #0
    bec8:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    becc:	464b      	mov	r3, r9
    bece:	2201      	movs	r2, #1
    bed0:	2104      	movs	r1, #4
    bed2:	2003      	movs	r0, #3
    bed4:	46a4      	mov	ip, r4
}
    bed6:	b00f      	add	sp, #60	; 0x3c
    bed8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    bedc:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    bede:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    bee2:	9307      	str	r3, [sp, #28]
    bee4:	3380      	adds	r3, #128	; 0x80
    bee6:	d13c      	bne.n	bf62 <ticker_worker+0x1aa>
		if (ticker->ext_data) {
    bee8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    beea:	b1d2      	cbz	r2, bf22 <ticker_worker+0x16a>
    beec:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
    beee:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    bef0:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
    bef2:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    bef4:	6051      	str	r1, [r2, #4]
		ticker->ack--;
    bef6:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
    befa:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
    befc:	2d00      	cmp	r5, #0
    befe:	d0c6      	beq.n	be8e <ticker_worker+0xd6>
					   ticks_expired -
    bf00:	9a04      	ldr	r2, [sp, #16]
    bf02:	6960      	ldr	r0, [r4, #20]
    bf04:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
    bf06:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    bf08:	eba8 0000 	sub.w	r0, r8, r0
    bf0c:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    bf0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    bf12:	b1ab      	cbz	r3, bf40 <ticker_worker+0x188>
    bf14:	6922      	ldr	r2, [r4, #16]
    bf16:	78e3      	ldrb	r3, [r4, #3]
    bf18:	9200      	str	r2, [sp, #0]
    bf1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    bf1e:	47a8      	blx	r5
			if (!IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) &&
    bf20:	e7b5      	b.n	be8e <ticker_worker+0xd6>
		if (ticker->timeout_func) {
    bf22:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    bf24:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    bf28:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    bf2a:	2d00      	cmp	r5, #0
    bf2c:	d0af      	beq.n	be8e <ticker_worker+0xd6>
					   ticks_expired -
    bf2e:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    bf30:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    bf32:	eba8 0003 	sub.w	r0, r8, r3
    bf36:	9b04      	ldr	r3, [sp, #16]
    bf38:	695b      	ldr	r3, [r3, #20]
    bf3a:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    bf3c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    bf40:	f8d4 c010 	ldr.w	ip, [r4, #16]
    bf44:	78e3      	ldrb	r3, [r4, #3]
    bf46:	8be2      	ldrh	r2, [r4, #30]
    bf48:	f8cd c000 	str.w	ip, [sp]
    bf4c:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    bf4e:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
    bf50:	2b00      	cmp	r3, #0
    bf52:	9b03      	ldr	r3, [sp, #12]
    bf54:	bf18      	it	ne
    bf56:	2301      	movne	r3, #1
    bf58:	9303      	str	r3, [sp, #12]
				ticker->lazy_current = 0U;
    bf5a:	2300      	movs	r3, #0
    bf5c:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
    bf5e:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
    bf60:	e795      	b.n	be8e <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    bf62:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    bf66:	d0bf      	beq.n	bee8 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
    bf68:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    bf6a:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
    bf6c:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
    bf70:	9205      	str	r2, [sp, #20]
		if (lazy_current >= ticker->lazy_periodic) {
    bf72:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
    bf74:	bf28      	it	cs
    bf76:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
    bf78:	fb02 c10c 	mla	r1, r2, ip, ip
    bf7c:	9108      	str	r1, [sp, #32]
				(lazy_current - ticker->priority);
    bf7e:	9907      	ldr	r1, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
    bf80:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    bf84:	e9cd 680b 	strd	r6, r8, [sp, #44]	; 0x2c
				(lazy_current - ticker->priority);
    bf88:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
    bf8a:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
    bf8c:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
    bf8e:	9209      	str	r2, [sp, #36]	; 0x24
		uint32_t acc_ticks_to_expire = 0U;
    bf90:	2500      	movs	r5, #0
    bf92:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    bf96:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
    bf98:	b21b      	sxth	r3, r3
    bf9a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bf9e:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    bfa2:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    bfa4:	f8d2 8008 	ldr.w	r8, [r2, #8]
    bfa8:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    bfaa:	42a8      	cmp	r0, r5
    bfac:	d33c      	bcc.n	c028 <ticker_worker+0x270>
			if (ticker_next->ticks_slot == 0U) {
    bfae:	6991      	ldr	r1, [r2, #24]
    bfb0:	2900      	cmp	r1, #0
    bfb2:	d036      	beq.n	c022 <ticker_worker+0x26a>
			int32_t lazy_next = ticker_next->lazy_current;
    bfb4:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    bfb6:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    bfb8:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    bfbc:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    bfc0:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    bfc2:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    bfc4:	bf28      	it	cs
    bfc6:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    bfca:	f1ba 0f00 	cmp.w	sl, #0
    bfce:	d040      	beq.n	c052 <ticker_worker+0x29a>
    bfd0:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    bfd4:	2c00      	cmp	r4, #0
    bfd6:	d038      	beq.n	c04a <ticker_worker+0x292>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    bfd8:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    bfdc:	f8dd a020 	ldr.w	sl, [sp, #32]
    bfe0:	45c2      	cmp	sl, r8
    bfe2:	bf8c      	ite	hi
    bfe4:	f04f 0801 	movhi.w	r8, #1
    bfe8:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    bfec:	bf34      	ite	cc
    bfee:	f04f 0a01 	movcc.w	sl, #1
    bff2:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    bff6:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    bff8:	f892 b003 	ldrb.w	fp, [r2, #3]
    bffc:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    c000:	d30f      	bcc.n	c022 <ticker_worker+0x26a>
    c002:	4593      	cmp	fp, r2
    c004:	d82a      	bhi.n	c05c <ticker_worker+0x2a4>
			    (next_force ||
    c006:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    c00a:	d027      	beq.n	c05c <ticker_worker+0x2a4>
			     next_is_critical ||
    c00c:	9a09      	ldr	r2, [sp, #36]	; 0x24
				(lazy_next - ticker_next->priority) >
    c00e:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    c012:	4594      	cmp	ip, r2
    c014:	dd02      	ble.n	c01c <ticker_worker+0x264>
			     (next_has_priority && !current_is_older) ||
    c016:	f1b8 0f00 	cmp.w	r8, #0
    c01a:	d01f      	beq.n	c05c <ticker_worker+0x2a4>
    c01c:	9a07      	ldr	r2, [sp, #28]
    c01e:	4572      	cmp	r2, lr
    c020:	d019      	beq.n	c056 <ticker_worker+0x29e>
			id_head = ticker_next->next;
    c022:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    c024:	2bff      	cmp	r3, #255	; 0xff
    c026:	d1b7      	bne.n	bf98 <ticker_worker+0x1e0>
    c028:	e9dd 680b 	ldrd	r6, r8, [sp, #44]	; 0x2c
    c02c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    c030:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    c034:	464c      	mov	r4, r9
    c036:	e757      	b.n	bee8 <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
    c038:	8ba3      	ldrh	r3, [r4, #28]
    c03a:	9905      	ldr	r1, [sp, #20]
    c03c:	428b      	cmp	r3, r1
    c03e:	f63f af0b 	bhi.w	be58 <ticker_worker+0xa0>
				ext_data->reschedule_state =
    c042:	f04f 0301 	mov.w	r3, #1
    c046:	7213      	strb	r3, [r2, #8]
    c048:	e708      	b.n	be5c <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
    c04a:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
    c04e:	46a2      	mov	sl, r4
    c050:	e7d1      	b.n	bff6 <ticker_worker+0x23e>
					  0U :
    c052:	46d0      	mov	r8, sl
    c054:	e7be      	b.n	bfd4 <ticker_worker+0x21c>
			     (equal_priority && next_is_older))) {
    c056:	f1ba 0f00 	cmp.w	sl, #0
    c05a:	d0e2      	beq.n	c022 <ticker_worker+0x26a>
    c05c:	e9dd 680b 	ldrd	r6, r8, [sp, #44]	; 0x2c
    c060:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    c064:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    c068:	464c      	mov	r4, r9
    c06a:	e6ed      	b.n	be48 <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
    c06c:	9b06      	ldr	r3, [sp, #24]
    c06e:	9303      	str	r3, [sp, #12]
    c070:	e6c4      	b.n	bdfc <ticker_worker+0x44>
		if (ticker->timeout_func) {
    c072:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    c074:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    c078:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    c07a:	2d00      	cmp	r5, #0
    c07c:	f43f af07 	beq.w	be8e <ticker_worker+0xd6>
					   ticks_expired -
    c080:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
    c082:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    c084:	eba8 0003 	sub.w	r0, r8, r3
    c088:	9b04      	ldr	r3, [sp, #16]
    c08a:	695b      	ldr	r3, [r3, #20]
    c08c:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    c08e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    c092:	e73f      	b.n	bf14 <ticker_worker+0x15c>

0000c094 <ticker_job>:
	if (instance->worker_trigger) {
    c094:	7fc3      	ldrb	r3, [r0, #31]
    c096:	2b00      	cmp	r3, #0
    c098:	f040 8428 	bne.w	c8ec <ticker_job+0x858>
{
    c09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
    c0a0:	7f82      	ldrb	r2, [r0, #30]
{
    c0a2:	b08d      	sub	sp, #52	; 0x34
    c0a4:	4683      	mov	fp, r0
	if (instance->job_guard) {
    c0a6:	2a00      	cmp	r2, #0
    c0a8:	f040 808c 	bne.w	c1c4 <ticker_job+0x130>
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    c0ac:	7a83      	ldrb	r3, [r0, #10]
    c0ae:	7ac1      	ldrb	r1, [r0, #11]
	instance->job_guard = 1U;
    c0b0:	2001      	movs	r0, #1
    c0b2:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    c0b6:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
    c0b8:	f8db 0014 	ldr.w	r0, [fp, #20]
    c0bc:	9007      	str	r0, [sp, #28]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    c0be:	f000 843b 	beq.w	c938 <ticker_job+0x8a4>
	uint8_t idx = *ticks_elapsed_index + 1;
    c0c2:	3301      	adds	r3, #1
    c0c4:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    c0c6:	2b02      	cmp	r3, #2
		idx = 0U;
    c0c8:	bf08      	it	eq
    c0ca:	4613      	moveq	r3, r2
		ticks_elapsed =
    c0cc:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    c0d0:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
    c0d4:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
    c0d8:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
    c0da:	9309      	str	r3, [sp, #36]	; 0x24
		instance->ticks_current += ticks_elapsed;
    c0dc:	9b07      	ldr	r3, [sp, #28]
		ticks_elapsed =
    c0de:	9203      	str	r2, [sp, #12]
		instance->ticks_current += ticks_elapsed;
    c0e0:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    c0e2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
    c0e6:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    c0ea:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
    c0ee:	f8db 3000 	ldr.w	r3, [fp]
    c0f2:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    c0f4:	f8db 3004 	ldr.w	r3, [fp, #4]
    c0f8:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    c0fa:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
    c0fc:	9206      	str	r2, [sp, #24]
	while (count_user--) {
    c0fe:	b2db      	uxtb	r3, r3
    c100:	2a00      	cmp	r2, #0
    c102:	f000 81d5 	beq.w	c4b0 <ticker_job+0x41c>
		flag_elapsed = 1U;
    c106:	2201      	movs	r2, #1
    c108:	920b      	str	r2, [sp, #44]	; 0x2c
    c10a:	9a05      	ldr	r2, [sp, #20]
    c10c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
    c110:	2300      	movs	r3, #0
    c112:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    c114:	23ff      	movs	r3, #255	; 0xff
    c116:	9301      	str	r3, [sp, #4]
    c118:	46ca      	mov	sl, r9
		user_ops = &user->user_op[0];
    c11a:	f8da 8004 	ldr.w	r8, [sl, #4]
		while (user->middle != user->last) {
    c11e:	f89a c003 	ldrb.w	ip, [sl, #3]
    c122:	f89a 7002 	ldrb.w	r7, [sl, #2]
    c126:	4567      	cmp	r7, ip
    c128:	d044      	beq.n	c1b4 <ticker_job+0x120>
			if (middle == user->count_user_op) {
    c12a:	f89a 2000 	ldrb.w	r2, [sl]
			middle = user->middle + 1;
    c12e:	1c7b      	adds	r3, r7, #1
			user_op = &user_ops[user->middle];
    c130:	b23e      	sxth	r6, r7
			middle = user->middle + 1;
    c132:	b2db      	uxtb	r3, r3
				middle = 0U;
    c134:	429a      	cmp	r2, r3
    c136:	bf08      	it	eq
    c138:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
    c13a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    c13e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
			user->middle = middle;
    c142:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    c146:	f818 0026 	ldrb.w	r0, [r8, r6, lsl #2]
    c14a:	2804      	cmp	r0, #4
			user_op = &user_ops[user->middle];
    c14c:	eb08 0486 	add.w	r4, r8, r6, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    c150:	d942      	bls.n	c1d8 <ticker_job+0x144>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    c152:	2808      	cmp	r0, #8
    c154:	d842      	bhi.n	c1dc <ticker_job+0x148>
			ticker = &node[user_op->id];
    c156:	7861      	ldrb	r1, [r4, #1]
    c158:	9a00      	ldr	r2, [sp, #0]
    c15a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    c15e:	eb02 1505 	add.w	r5, r2, r5, lsl #4
			state = (ticker->req - ticker->ack) & 0xff;
    c162:	786a      	ldrb	r2, [r5, #1]
    c164:	f895 e002 	ldrb.w	lr, [r5, #2]
    c168:	eba2 020e 	sub.w	r2, r2, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    c16c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    c170:	d034      	beq.n	c1dc <ticker_job+0x148>
			    (state == 0U) ||
    c172:	2805      	cmp	r0, #5
    c174:	d041      	beq.n	c1fa <ticker_job+0x166>
			if (state == 1U) {
    c176:	2a01      	cmp	r2, #1
    c178:	f040 8118 	bne.w	c3ac <ticker_job+0x318>
		if (user_op->op != TICKER_USER_OP_TYPE_YIELD_ABS) {
    c17c:	2806      	cmp	r0, #6
    c17e:	d006      	beq.n	c18e <ticker_job+0xfa>
			ticker->ticks_to_expire = ticker_dequeue(instance,
    c180:	4658      	mov	r0, fp
    c182:	f7ff fcb5 	bl	baf0 <ticker_dequeue>
			ticker->req = ticker->ack;
    c186:	78ab      	ldrb	r3, [r5, #2]
			ticker->ticks_to_expire = ticker_dequeue(instance,
    c188:	60a8      	str	r0, [r5, #8]
			ticker->req = ticker->ack;
    c18a:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    c18c:	7861      	ldrb	r1, [r4, #1]
    c18e:	f89b 301c 	ldrb.w	r3, [fp, #28]
    c192:	428b      	cmp	r3, r1
    c194:	f000 80d9 	beq.w	c34a <ticker_job+0x2b6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c198:	2000      	movs	r0, #0
    c19a:	f808 0026 	strb.w	r0, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    c19e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	user_op->status = status;
    c1a0:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    c1a2:	b10b      	cbz	r3, c1a8 <ticker_job+0x114>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c1a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c1a6:	4798      	blx	r3
		while (user->middle != user->last) {
    c1a8:	f89a c003 	ldrb.w	ip, [sl, #3]
    c1ac:	f89a 7002 	ldrb.w	r7, [sl, #2]
    c1b0:	4567      	cmp	r7, ip
    c1b2:	d1ba      	bne.n	c12a <ticker_job+0x96>
	while (count_user--) {
    c1b4:	9a05      	ldr	r2, [sp, #20]
    c1b6:	4552      	cmp	r2, sl
    c1b8:	f1aa 0308 	sub.w	r3, sl, #8
    c1bc:	f000 8107 	beq.w	c3ce <ticker_job+0x33a>
    c1c0:	469a      	mov	sl, r3
    c1c2:	e7aa      	b.n	c11a <ticker_job+0x86>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_JOB, 1,
    c1c4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    c1c6:	2104      	movs	r1, #4
    c1c8:	4603      	mov	r3, r0
    c1ca:	2201      	movs	r2, #1
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c1cc:	2004      	movs	r0, #4
    c1ce:	46a4      	mov	ip, r4
}
    c1d0:	b00d      	add	sp, #52	; 0x34
    c1d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c1d6:	4760      	bx	ip
    c1d8:	461f      	mov	r7, r3
    c1da:	e7a4      	b.n	c126 <ticker_job+0x92>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c1dc:	2200      	movs	r2, #0
    c1de:	f808 2026 	strb.w	r2, [r8, r6, lsl #2]
	if (user_op->fp_op_func) {
    c1e2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	user_op->status = status;
    c1e4:	2001      	movs	r0, #1
    c1e6:	62a0      	str	r0, [r4, #40]	; 0x28
	if (user_op->fp_op_func) {
    c1e8:	2a00      	cmp	r2, #0
    c1ea:	d0f5      	beq.n	c1d8 <ticker_job+0x144>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c1ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c1ee:	4790      	blx	r2
		while (user->middle != user->last) {
    c1f0:	f89a c003 	ldrb.w	ip, [sl, #3]
    c1f4:	f89a 7002 	ldrb.w	r7, [sl, #2]
    c1f8:	e795      	b.n	c126 <ticker_job+0x92>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    c1fa:	6860      	ldr	r0, [r4, #4]
    c1fc:	b948      	cbnz	r0, c212 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    c1fe:	68a0      	ldr	r0, [r4, #8]
    c200:	b938      	cbnz	r0, c212 <ticker_job+0x17e>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    c202:	68e0      	ldr	r0, [r4, #12]
    c204:	b928      	cbnz	r0, c212 <ticker_job+0x17e>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    c206:	6920      	ldr	r0, [r4, #16]
    c208:	b918      	cbnz	r0, c212 <ticker_job+0x17e>
			     (user_op->params.update.lazy == 0U) &&
    c20a:	6960      	ldr	r0, [r4, #20]
    c20c:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
    c210:	d0e4      	beq.n	c1dc <ticker_job+0x148>
			if (state == 1U) {
    c212:	2a01      	cmp	r2, #1
    c214:	f040 80ca 	bne.w	c3ac <ticker_job+0x318>
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    c218:	4658      	mov	r0, fp
    c21a:	f7ff fc69 	bl	baf0 <ticker_dequeue>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    c21e:	f8db 3014 	ldr.w	r3, [fp, #20]
		ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    c222:	60a8      	str	r0, [r5, #8]
    c224:	4607      	mov	r7, r0
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    c226:	9302      	str	r3, [sp, #8]
	ticks_now = cntr_cnt_get();
    c228:	f00b fed8 	bl	17fdc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c22c:	9b02      	ldr	r3, [sp, #8]
    c22e:	1ac2      	subs	r2, r0, r3
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    c230:	9b03      	ldr	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c232:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    c236:	18d1      	adds	r1, r2, r3
	if (ticks_to_expire > ticks_elapsed) {
    c238:	428f      	cmp	r7, r1
	ticks_now = cntr_cnt_get();
    c23a:	4681      	mov	r9, r0
	if (ticks_to_expire > ticks_elapsed) {
    c23c:	f240 80af 	bls.w	c39e <ticker_job+0x30a>
	ticker->ticks_to_expire_minus +=
    c240:	696b      	ldr	r3, [r5, #20]
    c242:	9304      	str	r3, [sp, #16]
		ticks_to_expire -= ticks_elapsed;
    c244:	1a7a      	subs	r2, r7, r1
	if ((ticker->ticks_periodic != 0U) &&
    c246:	f8d5 c004 	ldr.w	ip, [r5, #4]
    c24a:	f1bc 0f00 	cmp.w	ip, #0
    c24e:	d051      	beq.n	c2f4 <ticker_job+0x260>
	    (user_op->params.update.lazy != 0U)) {
    c250:	8aa3      	ldrh	r3, [r4, #20]
	if ((ticker->ticks_periodic != 0U) &&
    c252:	2b00      	cmp	r3, #0
    c254:	d04e      	beq.n	c2f4 <ticker_job+0x260>
		user_op->params.update.lazy--;
    c256:	3b01      	subs	r3, #1
    c258:	b29f      	uxth	r7, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    c25a:	4594      	cmp	ip, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
    c25c:	8beb      	ldrh	r3, [r5, #30]
		user_op->params.update.lazy--;
    c25e:	82a7      	strh	r7, [r4, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    c260:	d223      	bcs.n	c2aa <ticker_job+0x216>
    c262:	f10c 0e01 	add.w	lr, ip, #1
    c266:	f8cd 8018 	str.w	r8, [sp, #24]
    c26a:	940a      	str	r4, [sp, #40]	; 0x28
    c26c:	e018      	b.n	c2a0 <ticker_job+0x20c>
	if ((ticker->remainder_current >= BIT(31)) ||
    c26e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c270:	f8df 8228 	ldr.w	r8, [pc, #552]	; c49c <ticker_job+0x408>
    c274:	4c8a      	ldr	r4, [pc, #552]	; (c4a0 <ticker_job+0x40c>)
    c276:	4488      	add	r8, r1
    c278:	45a0      	cmp	r8, r4
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    c27a:	bf84      	itt	hi
    c27c:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
    c280:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
    c284:	4670      	mov	r0, lr
	ticker->remainder_current -= ticker->remainder_periodic;
    c286:	6a2c      	ldr	r4, [r5, #32]
    c288:	bf94      	ite	ls
    c28a:	4660      	movls	r0, ip
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    c28c:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
    c290:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
    c292:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
    c294:	1b09      	subs	r1, r1, r4
			ticker->lazy_current--;
    c296:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    c298:	4594      	cmp	ip, r2
	ticker->remainder_current -= ticker->remainder_periodic;
    c29a:	6269      	str	r1, [r5, #36]	; 0x24
			ticker->lazy_current--;
    c29c:	83eb      	strh	r3, [r5, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    c29e:	d201      	bcs.n	c2a4 <ticker_job+0x210>
    c2a0:	429f      	cmp	r7, r3
    c2a2:	d3e4      	bcc.n	c26e <ticker_job+0x1da>
    c2a4:	f8dd 8018 	ldr.w	r8, [sp, #24]
    c2a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2aa:	429f      	cmp	r7, r3
    c2ac:	d921      	bls.n	c2f2 <ticker_job+0x25e>
			ticks_to_expire += ticker->ticks_periodic +
    c2ae:	f10c 0001 	add.w	r0, ip, #1
	ticker->remainder_current += ticker->remainder_periodic;
    c2b2:	e9d5 e108 	ldrd	lr, r1, [r5, #32]
			ticks_to_expire += ticker->ticks_periodic +
    c2b6:	9006      	str	r0, [sp, #24]
    c2b8:	940a      	str	r4, [sp, #40]	; 0x28
    c2ba:	e005      	b.n	c2c8 <ticker_job+0x234>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2bc:	3301      	adds	r3, #1
    c2be:	b29b      	uxth	r3, r3
    c2c0:	4660      	mov	r0, ip
    c2c2:	429f      	cmp	r7, r3
			ticks_to_expire += ticker->ticks_periodic +
    c2c4:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2c6:	d011      	beq.n	c2ec <ticker_job+0x258>
	if ((ticker->remainder_current < BIT(31)) &&
    c2c8:	4874      	ldr	r0, [pc, #464]	; (c49c <ticker_job+0x408>)
    c2ca:	4c75      	ldr	r4, [pc, #468]	; (c4a0 <ticker_job+0x40c>)
	ticker->remainder_current += ticker->remainder_periodic;
    c2cc:	4471      	add	r1, lr
	if ((ticker->remainder_current < BIT(31)) &&
    c2ce:	1808      	adds	r0, r1, r0
    c2d0:	42a0      	cmp	r0, r4
    c2d2:	d8f3      	bhi.n	c2bc <ticker_job+0x228>
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2d4:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
    c2d6:	9806      	ldr	r0, [sp, #24]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c2d8:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2dc:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c2de:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2e2:	429f      	cmp	r7, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c2e4:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
    c2e8:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
    c2ea:	d1ed      	bne.n	c2c8 <ticker_job+0x234>
    c2ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    c2ee:	6269      	str	r1, [r5, #36]	; 0x24
    c2f0:	83ef      	strh	r7, [r5, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    c2f2:	83af      	strh	r7, [r5, #28]
				  user_op->params.update.ticks_drift_plus;
    c2f4:	6861      	ldr	r1, [r4, #4]
				user_op->params.update.ticks_drift_minus;
    c2f6:	68a0      	ldr	r0, [r4, #8]
	ticker->ticks_to_expire_minus +=
    c2f8:	9b04      	ldr	r3, [sp, #16]
	ticker->ticks_to_expire = ticks_to_expire +
    c2fa:	440a      	add	r2, r1
    c2fc:	60aa      	str	r2, [r5, #8]
	struct ticker_ext *ext_data = ticker->ext_data;
    c2fe:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	ticker->ticks_to_expire_minus +=
    c300:	4403      	add	r3, r0
    c302:	616b      	str	r3, [r5, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    c304:	b11a      	cbz	r2, c30e <ticker_job+0x27a>
    c306:	6813      	ldr	r3, [r2, #0]
    c308:	b10b      	cbz	r3, c30e <ticker_job+0x27a>
			user_op->params.update.ticks_drift_plus -
    c30a:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
    c30c:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
    c30e:	464a      	mov	r2, r9
    c310:	9902      	ldr	r1, [sp, #8]
    c312:	4628      	mov	r0, r5
    c314:	f7ff fc26 	bl	bb64 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    c318:	68e2      	ldr	r2, [r4, #12]
    c31a:	69ab      	ldr	r3, [r5, #24]
    c31c:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    c31e:	6922      	ldr	r2, [r4, #16]
    c320:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    c322:	bf8c      	ite	hi
    c324:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
    c326:	2300      	movls	r3, #0
    c328:	61ab      	str	r3, [r5, #24]
	if (user_op->params.update.force != 0U) {
    c32a:	7da3      	ldrb	r3, [r4, #22]
    c32c:	b103      	cbz	r3, c330 <ticker_job+0x29c>
		ticker->force = user_op->params.update.force;
    c32e:	70eb      	strb	r3, [r5, #3]
	if (user_op->params.update.must_expire) {
    c330:	7de3      	ldrb	r3, [r4, #23]
    c332:	b113      	cbz	r3, c33a <ticker_job+0x2a6>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
    c334:	3b01      	subs	r3, #1
    c336:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
	ticker->next = *insert_head;
    c33a:	9b01      	ldr	r3, [sp, #4]
    c33c:	702b      	strb	r3, [r5, #0]
		ticker->req++;
    c33e:	786b      	ldrb	r3, [r5, #1]
	*insert_head = user_op->id;
    c340:	7862      	ldrb	r2, [r4, #1]
    c342:	9201      	str	r2, [sp, #4]
		ticker->req++;
    c344:	3301      	adds	r3, #1
    c346:	706b      	strb	r3, [r5, #1]
    c348:	e726      	b.n	c198 <ticker_job+0x104>
			instance->ticker_id_slot_previous = TICKER_NULL;
    c34a:	23ff      	movs	r3, #255	; 0xff
    c34c:	f88b 301c 	strb.w	r3, [fp, #28]
			if ((user_op->op == TICKER_USER_OP_TYPE_YIELD_ABS) ||
    c350:	f818 3026 	ldrb.w	r3, [r8, r6, lsl #2]
    c354:	2b06      	cmp	r3, #6
    c356:	d013      	beq.n	c380 <ticker_job+0x2ec>
    c358:	2b08      	cmp	r3, #8
    c35a:	d011      	beq.n	c380 <ticker_job+0x2ec>
				ticks_at_yield = cntr_cnt_get();
    c35c:	f00b fe3e 	bl	17fdc <cntr_cnt_get>
			ticks_current = instance->ticks_current;
    c360:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    c364:	1a83      	subs	r3, r0, r2
    c366:	021d      	lsls	r5, r3, #8
    c368:	d410      	bmi.n	c38c <ticker_job+0x2f8>
				ticks_used = ticks_elapsed +
    c36a:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c36c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    c370:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    c372:	f8db 2018 	ldr.w	r2, [fp, #24]
    c376:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    c378:	bf88      	it	hi
    c37a:	f8cb 3018 	strhi.w	r3, [fp, #24]
    c37e:	e70b      	b.n	c198 <ticker_job+0x104>
				ticks_at_yield =
    c380:	6860      	ldr	r0, [r4, #4]
			ticks_current = instance->ticks_current;
    c382:	f8db 2014 	ldr.w	r2, [fp, #20]
			if (!((ticks_at_yield - ticks_current) &
    c386:	1a83      	subs	r3, r0, r2
    c388:	021d      	lsls	r5, r3, #8
    c38a:	d5ee      	bpl.n	c36a <ticker_job+0x2d6>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c38c:	1a13      	subs	r3, r2, r0
				if (ticks_elapsed > ticks_used) {
    c38e:	9a03      	ldr	r2, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c390:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    c394:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
    c396:	bf34      	ite	cc
    c398:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
    c39a:	2300      	movcs	r3, #0
    c39c:	e7e9      	b.n	c372 <ticker_job+0x2de>
		ticker->ticks_to_expire_minus += ticks_elapsed -
    c39e:	696b      	ldr	r3, [r5, #20]
    c3a0:	1bda      	subs	r2, r3, r7
    c3a2:	1853      	adds	r3, r2, r1
    c3a4:	9304      	str	r3, [sp, #16]
    c3a6:	616b      	str	r3, [r5, #20]
		ticks_to_expire = 0U;
    c3a8:	2200      	movs	r2, #0
    c3aa:	e74c      	b.n	c246 <ticker_job+0x1b2>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    c3ac:	2104      	movs	r1, #4
    c3ae:	465b      	mov	r3, fp
    c3b0:	2201      	movs	r2, #1
    c3b2:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    c3b6:	4608      	mov	r0, r1
    c3b8:	47a0      	blx	r4
	while (count_user--) {
    c3ba:	9a05      	ldr	r2, [sp, #20]
				user->middle = prev;
    c3bc:	f88a 7002 	strb.w	r7, [sl, #2]
				pending = 1U;
    c3c0:	2301      	movs	r3, #1
	while (count_user--) {
    c3c2:	4552      	cmp	r2, sl
				pending = 1U;
    c3c4:	9308      	str	r3, [sp, #32]
	while (count_user--) {
    c3c6:	f1aa 0308 	sub.w	r3, sl, #8
    c3ca:	f47f aef9 	bne.w	c1c0 <ticker_job+0x12c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    c3ce:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
    c3d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c3d4:	1a9b      	subs	r3, r3, r2
    c3d6:	bf18      	it	ne
    c3d8:	2301      	movne	r3, #1
    c3da:	9306      	str	r3, [sp, #24]
	if (flag_elapsed) {
    c3dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c3de:	2b00      	cmp	r3, #0
    c3e0:	d16a      	bne.n	c4b8 <ticker_job+0x424>
		ticker_job_list_insert(instance, insert_head);
    c3e2:	9901      	ldr	r1, [sp, #4]
    c3e4:	4658      	mov	r0, fp
    c3e6:	f7ff fbe1 	bl	bbac <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
    c3ea:	f89b 301d 	ldrb.w	r3, [fp, #29]
    c3ee:	9300      	str	r3, [sp, #0]
    c3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c3f2:	9a00      	ldr	r2, [sp, #0]
    c3f4:	4293      	cmp	r3, r2
    c3f6:	f000 8263 	beq.w	c8c0 <ticker_job+0x82c>
	if (!pending) {
    c3fa:	9b08      	ldr	r3, [sp, #32]
    c3fc:	2b00      	cmp	r3, #0
    c3fe:	f000 81d6 	beq.w	c7ae <ticker_job+0x71a>
	if (instance->ticker_id_head == TICKER_NULL) {
    c402:	f89b 301d 	ldrb.w	r3, [fp, #29]
    c406:	9300      	str	r3, [sp, #0]
    c408:	9b00      	ldr	r3, [sp, #0]
    c40a:	2bff      	cmp	r3, #255	; 0xff
    c40c:	f000 82bf 	beq.w	c98e <ticker_job+0x8fa>
	if (ticker_id_old_head == TICKER_NULL) {
    c410:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c412:	2bff      	cmp	r3, #255	; 0xff
    c414:	f000 82d2 	beq.w	c9bc <ticker_job+0x928>
	ticker = &instance->nodes[instance->ticker_id_head];
    c418:	9a00      	ldr	r2, [sp, #0]
	ticks_to_expire = ticker->ticks_to_expire;
    c41a:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    c41e:	f8df 9084 	ldr.w	r9, [pc, #132]	; c4a4 <ticker_job+0x410>
    c422:	f8df 8084 	ldr.w	r8, [pc, #132]	; c4a8 <ticker_job+0x414>
    c426:	4f21      	ldr	r7, [pc, #132]	; (c4ac <ticker_job+0x418>)
	ticker = &instance->nodes[instance->ticker_id_head];
    c428:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    c42c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
    c430:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    c432:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
    c434:	f00b fdd2 	bl	17fdc <cntr_cnt_get>
		cc = instance->ticks_current;
    c438:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c43c:	1b03      	subs	r3, r0, r4
    c43e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    c442:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    c444:	42b3      	cmp	r3, r6
    c446:	bf2c      	ite	cs
    c448:	18e4      	addcs	r4, r4, r3
    c44a:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
    c44c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
    c450:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
    c454:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    c456:	4620      	mov	r0, r4
    c458:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
    c45a:	f00b fdbf 	bl	17fdc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c45e:	eba0 030a 	sub.w	r3, r0, sl
    c462:	eba4 040a 	sub.w	r4, r4, sl
    c466:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    c46a:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c46c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
    c470:	42a3      	cmp	r3, r4
		i--;
    c472:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    c476:	f240 822a 	bls.w	c8ce <ticker_job+0x83a>
		LL_ASSERT(i);
    c47a:	2d00      	cmp	r5, #0
    c47c:	d1da      	bne.n	c434 <ticker_job+0x3a0>
    c47e:	f640 132f 	movw	r3, #2351	; 0x92f
    c482:	464a      	mov	r2, r9
    c484:	4641      	mov	r1, r8
    c486:	4638      	mov	r0, r7
    c488:	f00f f974 	bl	1b774 <printk>
    c48c:	4040      	eors	r0, r0
    c48e:	f380 8811 	msr	BASEPRI, r0
    c492:	f04f 0003 	mov.w	r0, #3
    c496:	df02      	svc	2
    c498:	e7cc      	b.n	c434 <ticker_job+0x3a0>
    c49a:	bf00      	nop
    c49c:	ff172b5a 	.word	0xff172b5a
    c4a0:	7f172b59 	.word	0x7f172b59
    c4a4:	000217cc 	.word	0x000217cc
    c4a8:	000218d0 	.word	0x000218d0
    c4ac:	0002180c 	.word	0x0002180c
	pending = 0U;
    c4b0:	9b06      	ldr	r3, [sp, #24]
    c4b2:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    c4b4:	23ff      	movs	r3, #255	; 0xff
    c4b6:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    c4b8:	f00b fd90 	bl	17fdc <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c4bc:	9b07      	ldr	r3, [sp, #28]
	while (instance->ticker_id_head != TICKER_NULL) {
    c4be:	f89b 601d 	ldrb.w	r6, [fp, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c4c2:	1ac3      	subs	r3, r0, r3
    c4c4:	f023 497f 	bic.w	r9, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    c4c8:	2eff      	cmp	r6, #255	; 0xff
	node = &instance->nodes[0];
    c4ca:	f8db 3000 	ldr.w	r3, [fp]
    c4ce:	9300      	str	r3, [sp, #0]
	while (instance->ticker_id_head != TICKER_NULL) {
    c4d0:	d04f      	beq.n	c572 <ticker_job+0x4de>
	ticks_expired = 0U;
    c4d2:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
    c4d4:	f8df 8268 	ldr.w	r8, [pc, #616]	; c740 <ticker_job+0x6ac>
    c4d8:	f8df a268 	ldr.w	sl, [pc, #616]	; c744 <ticker_job+0x6b0>
	while (instance->ticker_id_head != TICKER_NULL) {
    c4dc:	9f03      	ldr	r7, [sp, #12]
	ticks_expired = 0U;
    c4de:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
    c4e0:	9a00      	ldr	r2, [sp, #0]
    c4e2:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    c4e6:	eb02 1403 	add.w	r4, r2, r3, lsl #4
    c4ea:	011b      	lsls	r3, r3, #4
    c4ec:	9304      	str	r3, [sp, #16]
		ticks_to_expire = ticker->ticks_to_expire;
    c4ee:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    c4f0:	429f      	cmp	r7, r3
    c4f2:	f0c0 823f 	bcc.w	c974 <ticker_job+0x8e0>
		ticks_expired += ticks_to_expire;
    c4f6:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
    c4f8:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
    c4fc:	441a      	add	r2, r3
    c4fe:	9202      	str	r2, [sp, #8]
		if (instance->ticks_slot_previous > ticks_to_expire) {
    c500:	f8db 2018 	ldr.w	r2, [fp, #24]
    c504:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
    c506:	eba7 0703 	sub.w	r7, r7, r3
		ticks_latency -= ticks_to_expire;
    c50a:	eba9 0903 	sub.w	r9, r9, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
    c50e:	bf25      	ittet	cs
    c510:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    c514:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
    c518:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    c51a:	2300      	movcs	r3, #0
    c51c:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    c520:	78a2      	ldrb	r2, [r4, #2]
    c522:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c524:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
    c526:	1a9b      	subs	r3, r3, r2
    c528:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c52a:	b111      	cbz	r1, c532 <ticker_job+0x49e>
    c52c:	2b02      	cmp	r3, #2
    c52e:	f000 812b 	beq.w	c788 <ticker_job+0x6f4>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c532:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
    c534:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
    c536:	2100      	movs	r1, #0
    c538:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c53a:	9900      	ldr	r1, [sp, #0]
    c53c:	5d49      	ldrb	r1, [r1, r5]
    c53e:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c542:	6865      	ldr	r5, [r4, #4]
    c544:	2d00      	cmp	r5, #0
    c546:	d150      	bne.n	c5ea <ticker_job+0x556>
    c548:	b110      	cbz	r0, c550 <ticker_job+0x4bc>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    c54a:	7a01      	ldrb	r1, [r0, #8]
    c54c:	2901      	cmp	r1, #1
    c54e:	d053      	beq.n	c5f8 <ticker_job+0x564>
			if (state && ((state == 1U) || skip_collision) &&
    c550:	b153      	cbz	r3, c568 <ticker_job+0x4d4>
    c552:	2b01      	cmp	r3, #1
    c554:	d002      	beq.n	c55c <ticker_job+0x4c8>
    c556:	f1be 0f00 	cmp.w	lr, #0
    c55a:	d005      	beq.n	c568 <ticker_job+0x4d4>
			    ticker->fp_op_func) {
    c55c:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
    c55e:	b11b      	cbz	r3, c568 <ticker_job+0x4d4>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    c560:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c562:	2001      	movs	r0, #1
    c564:	4798      	blx	r3
			ticker->req = ticker->ack;
    c566:	78a2      	ldrb	r2, [r4, #2]
    c568:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    c56a:	f89b 601d 	ldrb.w	r6, [fp, #29]
    c56e:	2eff      	cmp	r6, #255	; 0xff
    c570:	d1b6      	bne.n	c4e0 <ticker_job+0x44c>
			flag_compare_update = 1U;
    c572:	9b06      	ldr	r3, [sp, #24]
    c574:	9a09      	ldr	r2, [sp, #36]	; 0x24
		ticker_job_list_insert(instance, insert_head);
    c576:	9901      	ldr	r1, [sp, #4]
			flag_compare_update = 1U;
    c578:	4296      	cmp	r6, r2
    c57a:	bf18      	it	ne
    c57c:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
    c57e:	4658      	mov	r0, fp
			flag_compare_update = 1U;
    c580:	9306      	str	r3, [sp, #24]
		ticker_job_list_insert(instance, insert_head);
    c582:	f7ff fb13 	bl	bbac <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
    c586:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
    c58a:	f8db 1000 	ldr.w	r1, [fp]
	while (rescheduling) {
    c58e:	e9cd 3b00 	strd	r3, fp, [sp]
	uint8_t  rescheduled = 0U;
    c592:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
    c594:	9b00      	ldr	r3, [sp, #0]
    c596:	2bff      	cmp	r3, #255	; 0xff
    c598:	d00e      	beq.n	c5b8 <ticker_job+0x524>
    c59a:	9f00      	ldr	r7, [sp, #0]
			ticker = &nodes[ticker_id_head];
    c59c:	b23b      	sxth	r3, r7
    c59e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5a2:	eb01 1603 	add.w	r6, r1, r3, lsl #4
    c5a6:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
    c5a8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    c5aa:	b110      	cbz	r0, c5b2 <ticker_job+0x51e>
    c5ac:	7a04      	ldrb	r4, [r0, #8]
    c5ae:	2c01      	cmp	r4, #1
    c5b0:	d03a      	beq.n	c628 <ticker_job+0x594>
			ticker_id_head = ticker->next;
    c5b2:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
    c5b4:	2fff      	cmp	r7, #255	; 0xff
    c5b6:	d1f1      	bne.n	c59c <ticker_job+0x508>
	return rescheduled;
    c5b8:	f8dd b004 	ldr.w	fp, [sp, #4]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    c5bc:	2a00      	cmp	r2, #0
    c5be:	f43f af17 	beq.w	c3f0 <ticker_job+0x35c>
	if (instance->ticker_id_head != ticker_id_old_head) {
    c5c2:	9b00      	ldr	r3, [sp, #0]
    c5c4:	9909      	ldr	r1, [sp, #36]	; 0x24
    c5c6:	428b      	cmp	r3, r1
    c5c8:	f47f af17 	bne.w	c3fa <ticker_job+0x366>
	if (!pending) {
    c5cc:	9b08      	ldr	r3, [sp, #32]
    c5ce:	2b00      	cmp	r3, #0
    c5d0:	f47f af1a 	bne.w	c408 <ticker_job+0x374>
	count_user = instance->count_user;
    c5d4:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c5d8:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c5dc:	1e5f      	subs	r7, r3, #1
    c5de:	b2ff      	uxtb	r7, r7
    c5e0:	2b00      	cmp	r3, #0
    c5e2:	f43f af11 	beq.w	c408 <ticker_job+0x374>
			flag_compare_update = 1U;
    c5e6:	9206      	str	r2, [sp, #24]
    c5e8:	e0ec      	b.n	c7c4 <ticker_job+0x730>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    c5ea:	2800      	cmp	r0, #0
    c5ec:	f000 809c 	beq.w	c728 <ticker_job+0x694>
    c5f0:	7a03      	ldrb	r3, [r0, #8]
    c5f2:	2b01      	cmp	r3, #1
    c5f4:	f040 8098 	bne.w	c728 <ticker_job+0x694>
				ticker->req = ticker->ack;
    c5f8:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
    c5fa:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c5fc:	9b07      	ldr	r3, [sp, #28]
    c5fe:	9a02      	ldr	r2, [sp, #8]
    c600:	f8db 1014 	ldr.w	r1, [fp, #20]
    c604:	189a      	adds	r2, r3, r2
    c606:	4620      	mov	r0, r4
    c608:	f7ff faac 	bl	bb64 <ticks_to_expire_prep>
			ticker->next = *insert_head;
    c60c:	9a00      	ldr	r2, [sp, #0]
    c60e:	9904      	ldr	r1, [sp, #16]
    c610:	9b01      	ldr	r3, [sp, #4]
    c612:	5453      	strb	r3, [r2, r1]
			ticker->req++;
    c614:	7863      	ldrb	r3, [r4, #1]
    c616:	9601      	str	r6, [sp, #4]
    c618:	3301      	adds	r3, #1
    c61a:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    c61c:	f89b 601d 	ldrb.w	r6, [fp, #29]
    c620:	2eff      	cmp	r6, #255	; 0xff
    c622:	f47f af5d 	bne.w	c4e0 <ticker_job+0x44c>
    c626:	e7a4      	b.n	c572 <ticker_job+0x4de>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c628:	9b01      	ldr	r3, [sp, #4]
    c62a:	7f1b      	ldrb	r3, [r3, #28]
    c62c:	2bff      	cmp	r3, #255	; 0xff
    c62e:	4686      	mov	lr, r0
    c630:	d044      	beq.n	c6bc <ticker_job+0x628>
			instance->ticks_slot_previous > ticks_elapsed) {
    c632:	9b01      	ldr	r3, [sp, #4]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c634:	9a03      	ldr	r2, [sp, #12]
			instance->ticks_slot_previous > ticks_elapsed) {
    c636:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c638:	4293      	cmp	r3, r2
    c63a:	d93f      	bls.n	c6bc <ticker_job+0x628>
			window_start_ticks = instance->ticks_slot_previous -
    c63c:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c640:	e9de 2300 	ldrd	r2, r3, [lr]
    c644:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    c646:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c64a:	d23f      	bcs.n	c6cc <ticker_job+0x638>
		while (ticker_id_iter != TICKER_NULL &&
    c64c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    c650:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
    c654:	d03a      	beq.n	c6cc <ticker_job+0x638>
		       ticks_start_offset + ticker->ticks_slot <=
    c656:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
    c65a:	45c1      	cmp	r9, r8
    c65c:	f04f 0300 	mov.w	r3, #0
    c660:	d337      	bcc.n	c6d2 <ticker_job+0x63e>
    c662:	46c2      	mov	sl, r8
    c664:	465a      	mov	r2, fp
    c666:	461d      	mov	r5, r3
    c668:	e01b      	b.n	c6a2 <ticker_job+0x60e>
			if (node->ticks_to_expire >
    c66a:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
    c66c:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
    c66e:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
    c670:	442b      	add	r3, r5
			if (node->ticks_to_expire >
    c672:	d909      	bls.n	c688 <ticker_job+0x5f4>
				window_end_ticks =
    c674:	454b      	cmp	r3, r9
    c676:	bf28      	it	cs
    c678:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
    c67a:	459a      	cmp	sl, r3
    c67c:	d204      	bcs.n	c688 <ticker_job+0x5f4>
			if (ticks_to_expire != 0U &&
    c67e:	ebb3 0308 	subs.w	r3, r3, r8
    c682:	d001      	beq.n	c688 <ticker_job+0x5f4>
    c684:	459c      	cmp	ip, r3
    c686:	d924      	bls.n	c6d2 <ticker_job+0x63e>
			window_start_ticks  = node->ticks_to_expire +
    c688:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
    c68a:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
    c68c:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
    c690:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
    c692:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
    c696:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    c698:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
    c69c:	d019      	beq.n	c6d2 <ticker_job+0x63e>
    c69e:	45d1      	cmp	r9, sl
    c6a0:	d317      	bcc.n	c6d2 <ticker_job+0x63e>
			node = &nodes[ticker_id_iter];
    c6a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c6a6:	eb01 1402 	add.w	r4, r1, r2, lsl #4
    c6aa:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
    c6ac:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c6ae:	2800      	cmp	r0, #0
    c6b0:	d0db      	beq.n	c66a <ticker_job+0x5d6>
    c6b2:	7a00      	ldrb	r0, [r0, #8]
    c6b4:	2801      	cmp	r0, #1
    c6b6:	d1d8      	bne.n	c66a <ticker_job+0x5d6>
				ticker_id_iter = node->next;
    c6b8:	5c8a      	ldrb	r2, [r1, r2]
				continue;
    c6ba:	e7ec      	b.n	c696 <ticker_job+0x602>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c6bc:	e9de 2300 	ldrd	r2, r3, [lr]
    c6c0:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
    c6c2:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
    c6c6:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c6ca:	d3bf      	bcc.n	c64c <ticker_job+0x5b8>
		ticker->ticks_to_expire = ticks_to_expire;
    c6cc:	2300      	movs	r3, #0
    c6ce:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
    c6d0:	e021      	b.n	c716 <ticker_job+0x682>
		ticker->ticks_to_expire = ticks_to_expire;
    c6d2:	60b3      	str	r3, [r6, #8]
    c6d4:	465d      	mov	r5, fp
    c6d6:	f04f 08ff 	mov.w	r8, #255	; 0xff
    c6da:	e000      	b.n	c6de <ticker_job+0x64a>
    c6dc:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
    c6de:	b228      	sxth	r0, r5
    c6e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    c6e4:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
    c6e8:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    c6ea:	f8dc 4008 	ldr.w	r4, [ip, #8]
    c6ee:	429c      	cmp	r4, r3
    c6f0:	f080 8136 	bcs.w	c960 <ticker_job+0x8cc>
				ticker->ticks_to_expire -=
    c6f4:	1b1b      	subs	r3, r3, r4
    c6f6:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
    c6f8:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
    c6fa:	2aff      	cmp	r2, #255	; 0xff
    c6fc:	46a8      	mov	r8, r5
    c6fe:	d1ed      	bne.n	c6dc <ticker_job+0x648>
			instance->ticker_id_head = nodes[ticker_id_head].next;
    c700:	9b01      	ldr	r3, [sp, #4]
			nodes[ticker_id_prev].next = ticker_id_head;
    c702:	f8cd b000 	str.w	fp, [sp]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c706:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    c70a:	0100      	lsls	r0, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    c70c:	f883 b01d 	strb.w	fp, [r3, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c710:	5c0b      	ldrb	r3, [r1, r0]
    c712:	7033      	strb	r3, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    c714:	540f      	strb	r7, [r1, r0]
		ticker->lazy_current--;
    c716:	8bf3      	ldrh	r3, [r6, #30]
    c718:	3b01      	subs	r3, #1
    c71a:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
    c71c:	f04f 0302 	mov.w	r3, #2
    c720:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
    c724:	2201      	movs	r2, #1
    c726:	e735      	b.n	c594 <ticker_job+0x500>
				if (!ticker->lazy_current) {
    c728:	f1be 0f00 	cmp.w	lr, #0
    c72c:	d13b      	bne.n	c7a6 <ticker_job+0x712>
					lazy_periodic = ticker->lazy_periodic;
    c72e:	8ba3      	ldrh	r3, [r4, #28]
    c730:	930a      	str	r3, [sp, #40]	; 0x28
    c732:	461a      	mov	r2, r3
				while (count--) {
    c734:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
    c736:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
    c73a:	2100      	movs	r1, #0
    c73c:	9005      	str	r0, [sp, #20]
    c73e:	e008      	b.n	c752 <ticker_job+0x6be>
    c740:	ff172b5a 	.word	0xff172b5a
    c744:	7f172b59 	.word	0x7f172b59
    c748:	4628      	mov	r0, r5
				while (count--) {
    c74a:	3a01      	subs	r2, #1
					ticks_to_expire +=
    c74c:	4401      	add	r1, r0
				while (count--) {
    c74e:	1c50      	adds	r0, r2, #1
    c750:	d00f      	beq.n	c772 <ticker_job+0x6de>
	ticker->remainder_current += ticker->remainder_periodic;
    c752:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c754:	eb03 0008 	add.w	r0, r3, r8
    c758:	4550      	cmp	r0, sl
    c75a:	d8f5      	bhi.n	c748 <ticker_job+0x6b4>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c75c:	9805      	ldr	r0, [sp, #20]
    c75e:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
    c762:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c764:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
    c768:	4401      	add	r1, r0
				while (count--) {
    c76a:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c76c:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
    c770:	d1ef      	bne.n	c752 <ticker_job+0x6be>
				} else if (!ticker->must_expire) {
    c772:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    c776:	6263      	str	r3, [r4, #36]	; 0x24
    c778:	2a00      	cmp	r2, #0
    c77a:	f000 80b8 	beq.w	c8ee <ticker_job+0x85a>
				ticker->lazy_current += (lazy_periodic + lazy);
    c77e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				ticker->ticks_to_expire = ticks_to_expire;
    c780:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
    c782:	4473      	add	r3, lr
    c784:	83e3      	strh	r3, [r4, #30]
    c786:	e739      	b.n	c5fc <ticker_job+0x568>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c788:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
    c78a:	f1be 0f00 	cmp.w	lr, #0
    c78e:	f47f aed1 	bne.w	c534 <ticker_job+0x4a0>
    c792:	b118      	cbz	r0, c79c <ticker_job+0x708>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c794:	7a05      	ldrb	r5, [r0, #8]
    c796:	2d01      	cmp	r5, #1
    c798:	f000 8104 	beq.w	c9a4 <ticker_job+0x910>
			instance->ticks_slot_previous = ticker->ticks_slot;
    c79c:	f8cb 1018 	str.w	r1, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
    c7a0:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    c7a4:	e6c6      	b.n	c534 <ticker_job+0x4a0>
					ticker->req = ticker->ack;
    c7a6:	7062      	strb	r2, [r4, #1]
    c7a8:	2200      	movs	r2, #0
					lazy_periodic = 0U;
    c7aa:	920a      	str	r2, [sp, #40]	; 0x28
    c7ac:	e7c2      	b.n	c734 <ticker_job+0x6a0>
	count_user = instance->count_user;
    c7ae:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c7b2:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c7b6:	1e5f      	subs	r7, r3, #1
    c7b8:	b2ff      	uxtb	r7, r7
    c7ba:	2b00      	cmp	r3, #0
    c7bc:	f43f ae21 	beq.w	c402 <ticker_job+0x36e>
		flag_compare_update = 1U;
    c7c0:	2301      	movs	r3, #1
    c7c2:	9306      	str	r3, [sp, #24]
    c7c4:	eb06 07c7 	add.w	r7, r6, r7, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    c7c8:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
    c7ca:	f04f 0a01 	mov.w	sl, #1
    c7ce:	9600      	str	r6, [sp, #0]
		while (user->first != user->last) {
    c7d0:	787b      	ldrb	r3, [r7, #1]
    c7d2:	78fa      	ldrb	r2, [r7, #3]
		user_op = &user->user_op[0];
    c7d4:	687e      	ldr	r6, [r7, #4]
		while (user->first != user->last) {
    c7d6:	429a      	cmp	r2, r3
    c7d8:	d10c      	bne.n	c7f4 <ticker_job+0x760>
    c7da:	e060      	b.n	c89e <ticker_job+0x80a>
	switch (uop->op) {
    c7dc:	2b01      	cmp	r3, #1
    c7de:	d058      	beq.n	c892 <ticker_job+0x7fe>
			first = user->first + 1;
    c7e0:	787b      	ldrb	r3, [r7, #1]
			if (first == user->count_user_op) {
    c7e2:	7839      	ldrb	r1, [r7, #0]
			first = user->first + 1;
    c7e4:	3301      	adds	r3, #1
    c7e6:	b2db      	uxtb	r3, r3
				first = 0U;
    c7e8:	4299      	cmp	r1, r3
    c7ea:	bf08      	it	eq
    c7ec:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    c7ee:	429a      	cmp	r2, r3
			user->first = first;
    c7f0:	707b      	strb	r3, [r7, #1]
		while (user->first != user->last) {
    c7f2:	d054      	beq.n	c89e <ticker_job+0x80a>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    c7f4:	b21b      	sxth	r3, r3
    c7f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    c7fa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    c7fe:	eb06 0083 	add.w	r0, r6, r3, lsl #2
	switch (uop->op) {
    c802:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
    c806:	2b02      	cmp	r3, #2
    c808:	d017      	beq.n	c83a <ticker_job+0x7a6>
    c80a:	2b03      	cmp	r3, #3
    c80c:	d1e6      	bne.n	c7dc <ticker_job+0x748>
		if (uop->id < instance->count_node) {
    c80e:	7843      	ldrb	r3, [r0, #1]
    c810:	f89b 2008 	ldrb.w	r2, [fp, #8]
    c814:	429a      	cmp	r2, r3
    c816:	d93f      	bls.n	c898 <ticker_job+0x804>
			node[uop->id].priority =
    c818:	f8db 2000 	ldr.w	r2, [fp]
    c81c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c820:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    c824:	7902      	ldrb	r2, [r0, #4]
    c826:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    c82a:	6285      	str	r5, [r0, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    c82c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	if (fp_op_func) {
    c82e:	b113      	cbz	r3, c836 <ticker_job+0x7a2>
		fp_op_func(uop->status, uop->op_context);
    c830:	6b01      	ldr	r1, [r0, #48]	; 0x30
    c832:	6a80      	ldr	r0, [r0, #40]	; 0x28
    c834:	4798      	blx	r3
    c836:	78fa      	ldrb	r2, [r7, #3]
    c838:	e7d2      	b.n	c7e0 <ticker_job+0x74c>
		ticker_by_next_slot_get(instance,
    c83a:	e9d0 e101 	ldrd	lr, r1, [r0, #4]
	_ticker_id_head = *ticker_id_head;
    c83e:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
    c842:	f8d0 800c 	ldr.w	r8, [r0, #12]
	node = instance->nodes;
    c846:	f8db c000 	ldr.w	ip, [fp]
	    (*ticks_current != instance->ticks_current)) {
    c84a:	f8db 4014 	ldr.w	r4, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    c84e:	2aff      	cmp	r2, #255	; 0xff
    c850:	d002      	beq.n	c858 <ticker_job+0x7c4>
    c852:	680b      	ldr	r3, [r1, #0]
    c854:	42a3      	cmp	r3, r4
    c856:	d02b      	beq.n	c8b0 <ticker_job+0x81c>
		_ticker_id_head = instance->ticker_id_head;
    c858:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
    c85c:	600c      	str	r4, [r1, #0]
		_ticks_to_expire = 0U;
    c85e:	2400      	movs	r4, #0
	while (_ticker_id_head != TICKER_NULL) {
    c860:	2aff      	cmp	r2, #255	; 0xff
    c862:	d012      	beq.n	c88a <ticker_job+0x7f6>
    c864:	4681      	mov	r9, r0
    c866:	e005      	b.n	c874 <ticker_job+0x7e0>
		_ticker_id_head = ticker->next;
    c868:	f81c 2003 	ldrb.w	r2, [ip, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
    c86c:	6889      	ldr	r1, [r1, #8]
	while (_ticker_id_head != TICKER_NULL) {
    c86e:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
    c870:	440c      	add	r4, r1
	while (_ticker_id_head != TICKER_NULL) {
    c872:	d01b      	beq.n	c8ac <ticker_job+0x818>
		ticker = &node[_ticker_id_head];
    c874:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    c878:	eb0c 1103 	add.w	r1, ip, r3, lsl #4
    c87c:	011b      	lsls	r3, r3, #4
			if (ticker->ticks_slot) {
    c87e:	6988      	ldr	r0, [r1, #24]
    c880:	2800      	cmp	r0, #0
    c882:	d0f1      	beq.n	c868 <ticker_job+0x7d4>
		_ticks_to_expire += ticker->ticks_to_expire;
    c884:	688b      	ldr	r3, [r1, #8]
    c886:	4648      	mov	r0, r9
    c888:	441c      	add	r4, r3
	*ticker_id_head = _ticker_id_head;
    c88a:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
    c88e:	f8c8 4000 	str.w	r4, [r8]
		fp_op_func = uop->fp_op_func;
    c892:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    c894:	6285      	str	r5, [r0, #40]	; 0x28
		break;
    c896:	e7ca      	b.n	c82e <ticker_job+0x79a>
			uop->status = TICKER_STATUS_FAILURE;
    c898:	f8c0 a028 	str.w	sl, [r0, #40]	; 0x28
    c89c:	e7c6      	b.n	c82c <ticker_job+0x798>
	while (count_user--) {
    c89e:	9a00      	ldr	r2, [sp, #0]
    c8a0:	42ba      	cmp	r2, r7
    c8a2:	f1a7 0308 	sub.w	r3, r7, #8
    c8a6:	d00e      	beq.n	c8c6 <ticker_job+0x832>
    c8a8:	461f      	mov	r7, r3
    c8aa:	e791      	b.n	c7d0 <ticker_job+0x73c>
    c8ac:	4648      	mov	r0, r9
    c8ae:	e7ec      	b.n	c88a <ticker_job+0x7f6>
		ticker = &node[_ticker_id_head];
    c8b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c8b4:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
    c8b6:	f8d8 4000 	ldr.w	r4, [r8]
		_ticker_id_head = ticker->next;
    c8ba:	f81c 2003 	ldrb.w	r2, [ip, r3]
    c8be:	e7cf      	b.n	c860 <ticker_job+0x7cc>
	if (!pending) {
    c8c0:	9b08      	ldr	r3, [sp, #32]
    c8c2:	2b00      	cmp	r3, #0
    c8c4:	d059      	beq.n	c97a <ticker_job+0x8e6>
	if (flag_compare_update) {
    c8c6:	9b06      	ldr	r3, [sp, #24]
    c8c8:	2b00      	cmp	r3, #0
    c8ca:	f47f ad9a 	bne.w	c402 <ticker_job+0x36e>
	if (instance->worker_trigger) {
    c8ce:	f89b 301f 	ldrb.w	r3, [fp, #31]
	instance->job_guard = 0U;
    c8d2:	2200      	movs	r2, #0
    c8d4:	f88b 201e 	strb.w	r2, [fp, #30]
	if (instance->worker_trigger) {
    c8d8:	b12b      	cbz	r3, c8e6 <ticker_job+0x852>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c8da:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    c8de:	465b      	mov	r3, fp
    c8e0:	2201      	movs	r2, #1
    c8e2:	2103      	movs	r1, #3
    c8e4:	e472      	b.n	c1cc <ticker_job+0x138>
}
    c8e6:	b00d      	add	sp, #52	; 0x34
    c8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c8ec:	4770      	bx	lr
					while (ticks_to_expire <
    c8ee:	4589      	cmp	r9, r1
    c8f0:	f67f af45 	bls.w	c77e <ticker_job+0x6ea>
    c8f4:	1c68      	adds	r0, r5, #1
    c8f6:	9405      	str	r4, [sp, #20]
    c8f8:	4604      	mov	r4, r0
    c8fa:	e005      	b.n	c908 <ticker_job+0x874>
    c8fc:	4628      	mov	r0, r5
						ticks_to_expire +=
    c8fe:	4401      	add	r1, r0
						lazy++;
    c900:	3201      	adds	r2, #1
					while (ticks_to_expire <
    c902:	4589      	cmp	r9, r1
						lazy++;
    c904:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    c906:	d910      	bls.n	c92a <ticker_job+0x896>
	ticker->remainder_current += ticker->remainder_periodic;
    c908:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c90a:	eb03 0008 	add.w	r0, r3, r8
    c90e:	4550      	cmp	r0, sl
    c910:	d8f4      	bhi.n	c8fc <ticker_job+0x868>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c912:	4620      	mov	r0, r4
    c914:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
    c918:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c91a:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
    c91e:	3201      	adds	r2, #1
					while (ticks_to_expire <
    c920:	4589      	cmp	r9, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c922:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
    c926:	b292      	uxth	r2, r2
					while (ticks_to_expire <
    c928:	d8ee      	bhi.n	c908 <ticker_job+0x874>
				ticker->lazy_current += (lazy_periodic + lazy);
    c92a:	980a      	ldr	r0, [sp, #40]	; 0x28
    c92c:	9c05      	ldr	r4, [sp, #20]
    c92e:	4410      	add	r0, r2
    c930:	6263      	str	r3, [r4, #36]	; 0x24
    c932:	b283      	uxth	r3, r0
    c934:	930a      	str	r3, [sp, #40]	; 0x28
    c936:	e722      	b.n	c77e <ticker_job+0x6ea>
	ticker_id_old_head = instance->ticker_id_head;
    c938:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
    c93c:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    c940:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->nodes[0];
    c942:	f8db 3000 	ldr.w	r3, [fp]
    c946:	9300      	str	r3, [sp, #0]
	users = &instance->users[0];
    c948:	f8db 3004 	ldr.w	r3, [fp, #4]
    c94c:	9305      	str	r3, [sp, #20]
	while (count_user--) {
    c94e:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
    c950:	9108      	str	r1, [sp, #32]
	while (count_user--) {
    c952:	b2db      	uxtb	r3, r3
    c954:	2900      	cmp	r1, #0
    c956:	d03f      	beq.n	c9d8 <ticker_job+0x944>
		flag_elapsed = 0U;
    c958:	920b      	str	r2, [sp, #44]	; 0x2c
		ticks_elapsed = 0U;
    c95a:	9203      	str	r2, [sp, #12]
    c95c:	f7ff bbd5 	b.w	c10a <ticker_job+0x76>
				node->ticks_to_expire -=
    c960:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
    c962:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
    c966:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
    c96a:	f43f aed4 	beq.w	c716 <ticker_job+0x682>
    c96e:	fa0f f088 	sxth.w	r0, r8
    c972:	e6c5      	b.n	c700 <ticker_job+0x66c>
			ticker->ticks_to_expire -= ticks_elapsed;
    c974:	1bdb      	subs	r3, r3, r7
    c976:	60a3      	str	r3, [r4, #8]
			break;
    c978:	e5fb      	b.n	c572 <ticker_job+0x4de>
	count_user = instance->count_user;
    c97a:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c97e:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c982:	1e5f      	subs	r7, r3, #1
    c984:	b2ff      	uxtb	r7, r7
    c986:	2b00      	cmp	r3, #0
    c988:	f47f af1c 	bne.w	c7c4 <ticker_job+0x730>
    c98c:	e79b      	b.n	c8c6 <ticker_job+0x832>
		if (cntr_stop() == 0) {
    c98e:	f00b faff 	bl	17f90 <cntr_stop>
    c992:	2800      	cmp	r0, #0
    c994:	d19b      	bne.n	c8ce <ticker_job+0x83a>
			instance->ticks_slot_previous = 0U;
    c996:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    c99a:	f00b fb1f 	bl	17fdc <cntr_cnt_get>
    c99e:	f8cb 0014 	str.w	r0, [fp, #20]
    c9a2:	e794      	b.n	c8ce <ticker_job+0x83a>
		instance->ticker_id_head = ticker->next;
    c9a4:	9900      	ldr	r1, [sp, #0]
    c9a6:	9d04      	ldr	r5, [sp, #16]
		ticker->ticks_to_expire = 0U;
    c9a8:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c9ac:	5d49      	ldrb	r1, [r1, r5]
    c9ae:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c9b2:	6861      	ldr	r1, [r4, #4]
    c9b4:	2900      	cmp	r1, #0
    c9b6:	f43f adc8 	beq.w	c54a <ticker_job+0x4b6>
    c9ba:	e61d      	b.n	c5f8 <ticker_job+0x564>
		ticks_current = cntr_cnt_get();
    c9bc:	f00b fb0e 	bl	17fdc <cntr_cnt_get>
    c9c0:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    c9c2:	f00b fad5 	bl	17f70 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
    c9c6:	f89b 301d 	ldrb.w	r3, [fp, #29]
    c9ca:	9300      	str	r3, [sp, #0]
		if (cntr_start() == 0) {
    c9cc:	2800      	cmp	r0, #0
    c9ce:	f47f ad23 	bne.w	c418 <ticker_job+0x384>
			instance->ticks_current = ticks_current;
    c9d2:	f8cb 4014 	str.w	r4, [fp, #20]
    c9d6:	e51f      	b.n	c418 <ticker_job+0x384>
	insert_head = TICKER_NULL;
    c9d8:	23ff      	movs	r3, #255	; 0xff
	while (count_user--) {
    c9da:	9106      	str	r1, [sp, #24]
	insert_head = TICKER_NULL;
    c9dc:	9301      	str	r3, [sp, #4]
    c9de:	e500      	b.n	c3e2 <ticker_job+0x34e>

0000c9e0 <ticker_init>:
{
    c9e0:	b4f0      	push	{r4, r5, r6, r7}
    c9e2:	9d04      	ldr	r5, [sp, #16]
    c9e4:	f89d 7014 	ldrb.w	r7, [sp, #20]
    c9e8:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    c9ea:	2800      	cmp	r0, #0
    c9ec:	d137      	bne.n	ca5e <ticker_init+0x7e>
	instance->count_node = count_node;
    c9ee:	4e1d      	ldr	r6, [pc, #116]	; (ca64 <ticker_init+0x84>)
	while (count_node--) {
    c9f0:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
	instance->count_node = count_node;
    c9f4:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
    c9f6:	6032      	str	r2, [r6, #0]
	while (count_node--) {
    c9f8:	fa5f fc8c 	uxtb.w	ip, ip
    c9fc:	b149      	cbz	r1, ca12 <ticker_init+0x32>
    c9fe:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    ca02:	eb02 110c 	add.w	r1, r2, ip, lsl #4
    ca06:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    ca08:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    ca0c:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    ca10:	d1f9      	bne.n	ca06 <ticker_init+0x26>
	while (count_user--) {
    ca12:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    ca14:	7273      	strb	r3, [r6, #9]
	instance->users = user;
    ca16:	6075      	str	r5, [r6, #4]
	while (count_user--) {
    ca18:	b2d2      	uxtb	r2, r2
    ca1a:	b183      	cbz	r3, ca3e <ticker_init+0x5e>
    ca1c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
    ca20:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    ca22:	4610      	mov	r0, r2
    ca24:	f812 3908 	ldrb.w	r3, [r2], #-8
    ca28:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    ca2c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
    ca30:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
    ca32:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
    ca36:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
    ca3a:	b2df      	uxtb	r7, r3
	while (count_user--) {
    ca3c:	d1f0      	bne.n	ca20 <ticker_init+0x40>
	if (count_op) {
    ca3e:	b977      	cbnz	r7, ca5e <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
    ca40:	9a07      	ldr	r2, [sp, #28]
    ca42:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
    ca44:	9a08      	ldr	r2, [sp, #32]
    ca46:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    ca48:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    ca4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca4e:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
    ca50:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
    ca52:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
    ca56:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
    ca58:	8177      	strh	r7, [r6, #10]
}
    ca5a:	bcf0      	pop	{r4, r5, r6, r7}
    ca5c:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    ca5e:	2001      	movs	r0, #1
}
    ca60:	bcf0      	pop	{r4, r5, r6, r7}
    ca62:	4770      	bx	lr
    ca64:	200017a8 	.word	0x200017a8

0000ca68 <ticker_trigger>:
	if (instance->sched_cb) {
    ca68:	4b0a      	ldr	r3, [pc, #40]	; (ca94 <ticker_trigger+0x2c>)
    ca6a:	222c      	movs	r2, #44	; 0x2c
    ca6c:	fb02 3200 	mla	r2, r2, r0, r3
{
    ca70:	b410      	push	{r4}
	if (instance->sched_cb) {
    ca72:	6a54      	ldr	r4, [r2, #36]	; 0x24
    ca74:	b15c      	cbz	r4, ca8e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    ca76:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    ca7a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ca7e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    ca82:	46a4      	mov	ip, r4
    ca84:	2201      	movs	r2, #1
}
    ca86:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    ca88:	2103      	movs	r1, #3
    ca8a:	2002      	movs	r0, #2
    ca8c:	4760      	bx	ip
}
    ca8e:	bc10      	pop	{r4}
    ca90:	4770      	bx	lr
    ca92:	bf00      	nop
    ca94:	200017a8 	.word	0x200017a8

0000ca98 <ticker_start_ext>:
{
    ca98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    ca9c:	4e28      	ldr	r6, [pc, #160]	; (cb40 <ticker_start_ext+0xa8>)
{
    ca9e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    caa2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    caa4:	252c      	movs	r5, #44	; 0x2c
    caa6:	fb05 6504 	mla	r5, r5, r4, r6
{
    caaa:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
    caac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    cab0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
    cab4:	6869      	ldr	r1, [r5, #4]
    cab6:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
    caba:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
    cabe:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
    cac2:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
    cac6:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
    cac8:	f10e 0c01 	add.w	ip, lr, #1
    cacc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    cad0:	4564      	cmp	r4, ip
    cad2:	bf98      	it	ls
    cad4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    cad8:	4561      	cmp	r1, ip
    cada:	d02e      	beq.n	cb3a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    cadc:	6879      	ldr	r1, [r7, #4]
    cade:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    cae2:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    cae6:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    caea:	f04f 0904 	mov.w	r9, #4
    caee:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    caf2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    caf4:	9b08      	ldr	r3, [sp, #32]
    caf6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    caf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    cafa:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    cafc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cafe:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    cb00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb02:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    cb04:	9b11      	ldr	r3, [sp, #68]	; 0x44
    cb06:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    cb08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb0a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    cb0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cb0e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    cb10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cb12:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    cb14:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cb16:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    cb18:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    cb1a:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    cb1c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
    cb1e:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
    cb22:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cb26:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
    cb2a:	4798      	blx	r3
    cb2c:	4633      	mov	r3, r6
    cb2e:	4649      	mov	r1, r9
    cb30:	2200      	movs	r2, #0
    cb32:	47a8      	blx	r5
	return user_op->status;
    cb34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    cb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    cb3a:	2001      	movs	r0, #1
}
    cb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cb40:	200017a8 	.word	0x200017a8

0000cb44 <ticker_start>:
{
    cb44:	b510      	push	{r4, lr}
    cb46:	b08a      	sub	sp, #40	; 0x28
    cb48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb4a:	9400      	str	r4, [sp, #0]
{
    cb4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb4e:	9401      	str	r4, [sp, #4]
{
    cb50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb52:	9402      	str	r4, [sp, #8]
{
    cb54:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb58:	9403      	str	r4, [sp, #12]
{
    cb5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb5c:	9404      	str	r4, [sp, #16]
{
    cb5e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb60:	9405      	str	r4, [sp, #20]
{
    cb62:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb64:	9406      	str	r4, [sp, #24]
{
    cb66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb68:	9407      	str	r4, [sp, #28]
{
    cb6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    cb6c:	9408      	str	r4, [sp, #32]
    cb6e:	2400      	movs	r4, #0
    cb70:	9409      	str	r4, [sp, #36]	; 0x24
    cb72:	f7ff ff91 	bl	ca98 <ticker_start_ext>
}
    cb76:	b00a      	add	sp, #40	; 0x28
    cb78:	bd10      	pop	{r4, pc}
    cb7a:	bf00      	nop

0000cb7c <ticker_update_ext>:
{
    cb7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    cb80:	4d28      	ldr	r5, [pc, #160]	; (cc24 <ticker_update_ext+0xa8>)
{
    cb82:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
    cb86:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
    cb8a:	4604      	mov	r4, r0
    cb8c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    cb8e:	212c      	movs	r1, #44	; 0x2c
    cb90:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
    cb94:	eb04 0684 	add.w	r6, r4, r4, lsl #2
    cb98:	eb04 0446 	add.w	r4, r4, r6, lsl #1
    cb9c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
    cba0:	684c      	ldr	r4, [r1, #4]
    cba2:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
    cba6:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
    cbaa:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    cbae:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
    cbb0:	f10e 0c01 	add.w	ip, lr, #1
    cbb4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    cbb8:	45e1      	cmp	r9, ip
    cbba:	bf98      	it	ls
    cbbc:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    cbc0:	4564      	cmp	r4, ip
{
    cbc2:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
    cbc6:	d02a      	beq.n	cc1e <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
    cbc8:	f8d6 a004 	ldr.w	sl, [r6, #4]
    cbcc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
    cbd0:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
    cbd4:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    cbd8:	f04f 0b05 	mov.w	fp, #5
    cbdc:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    cbe0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    cbe2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cbe4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    cbe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    cbe8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    cbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cbec:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    cbee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cbf0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
    cbf2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    cbf4:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    cbf6:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    cbf8:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
    cbfa:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
    cbfc:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
    cbfe:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
    cc02:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
    cc06:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    cc0a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    cc0e:	4798      	blx	r3
    cc10:	462b      	mov	r3, r5
    cc12:	2200      	movs	r2, #0
    cc14:	2104      	movs	r1, #4
    cc16:	47b0      	blx	r6
	return user_op->status;
    cc18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    cc1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
    cc1e:	2001      	movs	r0, #1
}
    cc20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cc24:	200017a8 	.word	0x200017a8

0000cc28 <ticker_update>:
{
    cc28:	b510      	push	{r4, lr}
    cc2a:	b088      	sub	sp, #32
    cc2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc2e:	9400      	str	r4, [sp, #0]
{
    cc30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc32:	9401      	str	r4, [sp, #4]
{
    cc34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc36:	9402      	str	r4, [sp, #8]
{
    cc38:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc3c:	9403      	str	r4, [sp, #12]
{
    cc3e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc42:	9404      	str	r4, [sp, #16]
{
    cc44:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc46:	9405      	str	r4, [sp, #20]
{
    cc48:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
    cc4a:	9406      	str	r4, [sp, #24]
    cc4c:	2400      	movs	r4, #0
    cc4e:	9407      	str	r4, [sp, #28]
    cc50:	f7ff ff94 	bl	cb7c <ticker_update_ext>
}
    cc54:	b008      	add	sp, #32
    cc56:	bd10      	pop	{r4, pc}

0000cc58 <ticker_stop>:
{
    cc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    cc5c:	4c1e      	ldr	r4, [pc, #120]	; (ccd8 <ticker_stop+0x80>)
{
    cc5e:	4684      	mov	ip, r0
    cc60:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    cc62:	212c      	movs	r1, #44	; 0x2c
    cc64:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
    cc68:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
    cc6c:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
    cc70:	684d      	ldr	r5, [r1, #4]
    cc72:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
    cc76:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
    cc7a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
    cc7e:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    cc80:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
    cc84:	f10e 0c01 	add.w	ip, lr, #1
    cc88:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
    cc8c:	4567      	cmp	r7, ip
    cc8e:	bf98      	it	ls
    cc90:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
    cc94:	4565      	cmp	r5, ip
    cc96:	d01c      	beq.n	ccd2 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
    cc98:	6877      	ldr	r7, [r6, #4]
    cc9a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    cc9e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    cca2:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    cca6:	f04f 0807 	mov.w	r8, #7
    ccaa:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
    ccae:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
    ccb0:	9b06      	ldr	r3, [sp, #24]
    ccb2:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    ccb4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
    ccb6:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
    ccb8:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
    ccba:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    ccbe:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
    ccc2:	4798      	blx	r3
    ccc4:	4623      	mov	r3, r4
    ccc6:	2200      	movs	r2, #0
    ccc8:	2104      	movs	r1, #4
    ccca:	47b0      	blx	r6
	return user_op->status;
    cccc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
    ccce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    ccd2:	2001      	movs	r0, #1
}
    ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ccd8:	200017a8 	.word	0x200017a8

0000ccdc <ticker_ticks_now_get>:
	return cntr_cnt_get();
    ccdc:	f00b b97e 	b.w	17fdc <cntr_cnt_get>

0000cce0 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    cce0:	2801      	cmp	r0, #1
{
    cce2:	b508      	push	{r3, lr}
    cce4:	4603      	mov	r3, r0
	if (addr_type > 1) {
    cce6:	d811      	bhi.n	cd0c <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
    cce8:	4608      	mov	r0, r1
    ccea:	b943      	cbnz	r3, ccfe <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    ccec:	b129      	cbz	r1, ccfa <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    ccee:	4909      	ldr	r1, [pc, #36]	; (cd14 <ll_addr_get+0x34>)
    ccf0:	2206      	movs	r2, #6
    ccf2:	f010 fe8b 	bl	1da0c <memcpy>
	}

	return pub_addr;
    ccf6:	4807      	ldr	r0, [pc, #28]	; (cd14 <ll_addr_get+0x34>)
}
    ccf8:	bd08      	pop	{r3, pc}
	return pub_addr;
    ccfa:	4806      	ldr	r0, [pc, #24]	; (cd14 <ll_addr_get+0x34>)
}
    ccfc:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    ccfe:	b139      	cbz	r1, cd10 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    cd00:	4905      	ldr	r1, [pc, #20]	; (cd18 <ll_addr_get+0x38>)
    cd02:	2206      	movs	r2, #6
    cd04:	f010 fe82 	bl	1da0c <memcpy>
		return rnd_addr;
    cd08:	4803      	ldr	r0, [pc, #12]	; (cd18 <ll_addr_get+0x38>)
}
    cd0a:	bd08      	pop	{r3, pc}
		return NULL;
    cd0c:	2000      	movs	r0, #0
}
    cd0e:	bd08      	pop	{r3, pc}
		return rnd_addr;
    cd10:	4801      	ldr	r0, [pc, #4]	; (cd18 <ll_addr_get+0x38>)
}
    cd12:	bd08      	pop	{r3, pc}
    cd14:	200017d4 	.word	0x200017d4
    cd18:	200017dc 	.word	0x200017dc

0000cd1c <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    cd1c:	b570      	push	{r4, r5, r6, lr}
    cd1e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    cd20:	2000      	movs	r0, #0
{
    cd22:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
    cd24:	f003 f9de 	bl	100e4 <ull_adv_is_enabled>
    cd28:	b978      	cbnz	r0, cd4a <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    cd2a:	b13c      	cbz	r4, cd3c <ll_addr_set+0x20>
    cd2c:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    cd2e:	2206      	movs	r2, #6
    cd30:	4631      	mov	r1, r6
    cd32:	4807      	ldr	r0, [pc, #28]	; (cd50 <ll_addr_set+0x34>)
    cd34:	f010 fe6a 	bl	1da0c <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    cd38:	4628      	mov	r0, r5
}
    cd3a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    cd3c:	2206      	movs	r2, #6
    cd3e:	4631      	mov	r1, r6
    cd40:	4804      	ldr	r0, [pc, #16]	; (cd54 <ll_addr_set+0x38>)
    cd42:	f010 fe63 	bl	1da0c <memcpy>
	return 0;
    cd46:	4620      	mov	r0, r4
}
    cd48:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    cd4a:	200c      	movs	r0, #12
}
    cd4c:	bd70      	pop	{r4, r5, r6, pc}
    cd4e:	bf00      	nop
    cd50:	200017dc 	.word	0x200017dc
    cd54:	200017d4 	.word	0x200017d4

0000cd58 <ll_tx_pwr_lvl_get>:
#include "ll.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
    cd58:	2802      	cmp	r0, #2
    cd5a:	d001      	beq.n	cd60 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
    cd5c:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
    cd5e:	4770      	bx	lr
{
    cd60:	b538      	push	{r3, r4, r5, lr}
    cd62:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
    cd64:	4608      	mov	r0, r1
    cd66:	461d      	mov	r5, r3
    cd68:	f004 f8e6 	bl	10f38 <ll_connected_get>
			if (!conn) {
    cd6c:	b110      	cbz	r0, cd74 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    cd6e:	2000      	movs	r0, #0
    cd70:	7028      	strb	r0, [r5, #0]
}
    cd72:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    cd74:	4620      	mov	r0, r4
}
    cd76:	bd38      	pop	{r3, r4, r5, pc}

0000cd78 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
    cd78:	2300      	movs	r3, #0
    cd7a:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
    cd7c:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    cd7e:	4770      	bx	lr

0000cd80 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    cd80:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    cd82:	4802      	ldr	r0, [pc, #8]	; (cd8c <hci_driver_init+0xc>)
    cd84:	f7f8 ff40 	bl	5c08 <bt_hci_driver_register>

	return 0;
}
    cd88:	2000      	movs	r0, #0
    cd8a:	bd08      	pop	{r3, pc}
    cd8c:	000218fc 	.word	0x000218fc

0000cd90 <hci_driver_send>:
{
    cd90:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    cd92:	8983      	ldrh	r3, [r0, #12]
{
    cd94:	b083      	sub	sp, #12
	if (!buf->len) {
    cd96:	2b00      	cmp	r3, #0
    cd98:	d03a      	beq.n	ce10 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    cd9a:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    cd9c:	4604      	mov	r4, r0
    cd9e:	b31b      	cbz	r3, cde8 <hci_driver_send+0x58>
    cda0:	2b02      	cmp	r3, #2
    cda2:	d00f      	beq.n	cdc4 <hci_driver_send+0x34>
    cda4:	4921      	ldr	r1, [pc, #132]	; (ce2c <hci_driver_send+0x9c>)
    cda6:	4a22      	ldr	r2, [pc, #136]	; (ce30 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
    cda8:	4822      	ldr	r0, [pc, #136]	; (ce34 <hci_driver_send+0xa4>)
    cdaa:	1a52      	subs	r2, r2, r1
    cdac:	08d2      	lsrs	r2, r2, #3
    cdae:	0192      	lsls	r2, r2, #6
    cdb0:	f042 0201 	orr.w	r2, r2, #1
    cdb4:	4619      	mov	r1, r3
    cdb6:	f00f f929 	bl	1c00c <log_1>
		return -EINVAL;
    cdba:	f06f 0515 	mvn.w	r5, #21
}
    cdbe:	4628      	mov	r0, r5
    cdc0:	b003      	add	sp, #12
    cdc2:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    cdc4:	a901      	add	r1, sp, #4
    cdc6:	f000 ff5d 	bl	dc84 <hci_acl_handle>
	if (evt) {
    cdca:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    cdcc:	4605      	mov	r5, r0
	if (evt) {
    cdce:	b113      	cbz	r3, cdd6 <hci_driver_send+0x46>
		bt_recv_prio(evt);
    cdd0:	4618      	mov	r0, r3
    cdd2:	f7f8 fefb 	bl	5bcc <bt_recv_prio>
	if (!err) {
    cdd6:	2d00      	cmp	r5, #0
    cdd8:	d1f1      	bne.n	cdbe <hci_driver_send+0x2e>
		net_buf_unref(buf);
    cdda:	4620      	mov	r0, r4
    cddc:	f00c f88c 	bl	18ef8 <net_buf_unref>
    cde0:	2500      	movs	r5, #0
}
    cde2:	4628      	mov	r0, r5
    cde4:	b003      	add	sp, #12
    cde6:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cde8:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    cdea:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cdec:	f000 fa66 	bl	d2bc <hci_cmd_handle>
	if (evt) {
    cdf0:	2800      	cmp	r0, #0
    cdf2:	d0f2      	beq.n	cdda <hci_driver_send+0x4a>
		bt_recv_prio(evt);
    cdf4:	f7f8 feea 	bl	5bcc <bt_recv_prio>
		if (node_rx) {
    cdf8:	9d01      	ldr	r5, [sp, #4]
    cdfa:	2d00      	cmp	r5, #0
    cdfc:	d0ed      	beq.n	cdda <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cdfe:	4628      	mov	r0, r5
    ce00:	f001 fb42 	bl	e488 <hci_get_class>
    ce04:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    ce06:	9901      	ldr	r1, [sp, #4]
    ce08:	480b      	ldr	r0, [pc, #44]	; (ce38 <hci_driver_send+0xa8>)
    ce0a:	f013 fa34 	bl	20276 <k_queue_append>
	if (!err) {
    ce0e:	e7e4      	b.n	cdda <hci_driver_send+0x4a>
    ce10:	4b06      	ldr	r3, [pc, #24]	; (ce2c <hci_driver_send+0x9c>)
    ce12:	4907      	ldr	r1, [pc, #28]	; (ce30 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
    ce14:	4809      	ldr	r0, [pc, #36]	; (ce3c <hci_driver_send+0xac>)
    ce16:	1ac9      	subs	r1, r1, r3
    ce18:	08c9      	lsrs	r1, r1, #3
    ce1a:	0189      	lsls	r1, r1, #6
    ce1c:	f041 0101 	orr.w	r1, r1, #1
    ce20:	f00f f8e7 	bl	1bff2 <log_0>
		return -EINVAL;
    ce24:	f06f 0515 	mvn.w	r5, #21
    ce28:	e7c9      	b.n	cdbe <hci_driver_send+0x2e>
    ce2a:	bf00      	nop
    ce2c:	00020e00 	.word	0x00020e00
    ce30:	00020e50 	.word	0x00020e50
    ce34:	00021850 	.word	0x00021850
    ce38:	200007b4 	.word	0x200007b4
    ce3c:	0002183c 	.word	0x0002183c

0000ce40 <recv_thread>:
{
    ce40:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    ce42:	4e41      	ldr	r6, [pc, #260]	; (cf48 <recv_thread+0x108>)
		LL_ASSERT(0);
    ce44:	4f41      	ldr	r7, [pc, #260]	; (cf4c <recv_thread+0x10c>)
{
    ce46:	b083      	sub	sp, #12
    ce48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce50:	4630      	mov	r0, r6
    ce52:	f00d fc05 	bl	1a660 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    ce56:	2800      	cmp	r0, #0
    ce58:	d0f6      	beq.n	ce48 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    ce5a:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    ce5c:	9001      	str	r0, [sp, #4]
	switch (class) {
    ce5e:	2b04      	cmp	r3, #4
    ce60:	d821      	bhi.n	cea6 <recv_thread+0x66>
    ce62:	2b00      	cmp	r3, #0
    ce64:	d14b      	bne.n	cefe <recv_thread+0xbe>
		LL_ASSERT(0);
    ce66:	493a      	ldr	r1, [pc, #232]	; (cf50 <recv_thread+0x110>)
    ce68:	483a      	ldr	r0, [pc, #232]	; (cf54 <recv_thread+0x114>)
    ce6a:	f44f 73a3 	mov.w	r3, #326	; 0x146
    ce6e:	463a      	mov	r2, r7
    ce70:	f00e fc80 	bl	1b774 <printk>
    ce74:	4040      	eors	r0, r0
    ce76:	f380 8811 	msr	BASEPRI, r0
    ce7a:	f04f 0003 	mov.w	r0, #3
    ce7e:	df02      	svc	2
	node_rx->hdr.next = NULL;
    ce80:	9b01      	ldr	r3, [sp, #4]
    ce82:	2200      	movs	r2, #0
    ce84:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    ce86:	a801      	add	r0, sp, #4
    ce88:	f002 f93e 	bl	f108 <ll_rx_mem_release>
    ce8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ce90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ce94:	4630      	mov	r0, r6
    ce96:	f00d fbe3 	bl	1a660 <z_impl_k_queue_get>
		if (node_rx && !buf) {
    ce9a:	2800      	cmp	r0, #0
    ce9c:	d0d4      	beq.n	ce48 <recv_thread+0x8>
	uint8_t class = node_rx->hdr.user_meta;
    ce9e:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    cea0:	9001      	str	r0, [sp, #4]
	switch (class) {
    cea2:	2b04      	cmp	r3, #4
    cea4:	d9dd      	bls.n	ce62 <recv_thread+0x22>
    cea6:	2b05      	cmp	r3, #5
    cea8:	d1dd      	bne.n	ce66 <recv_thread+0x26>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    ceaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ceae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ceb2:	2003      	movs	r0, #3
    ceb4:	f7f7 fd26 	bl	4904 <bt_buf_get_rx>
    ceb8:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    ceba:	4621      	mov	r1, r4
    cebc:	9801      	ldr	r0, [sp, #4]
    cebe:	f000 ffa7 	bl	de10 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    cec2:	9b01      	ldr	r3, [sp, #4]
    cec4:	2200      	movs	r2, #0
    cec6:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cec8:	a801      	add	r0, sp, #4
    ceca:	f002 f91d 	bl	f108 <ll_rx_mem_release>
		while (buf) {
    cece:	2c00      	cmp	r4, #0
    ced0:	d0ba      	beq.n	ce48 <recv_thread+0x8>
			frag = net_buf_ref(buf);
    ced2:	4620      	mov	r0, r4
    ced4:	f012 fec7 	bl	1fc66 <net_buf_ref>
			buf = net_buf_frag_del(NULL, buf);
    ced8:	4621      	mov	r1, r4
			frag = net_buf_ref(buf);
    ceda:	4605      	mov	r5, r0
			buf = net_buf_frag_del(NULL, buf);
    cedc:	2000      	movs	r0, #0
    cede:	f012 fee8 	bl	1fcb2 <net_buf_frag_del>
			if (frag->len) {
    cee2:	89ab      	ldrh	r3, [r5, #12]
			buf = net_buf_frag_del(NULL, buf);
    cee4:	4604      	mov	r4, r0
				bt_recv(frag);
    cee6:	4628      	mov	r0, r5
			if (frag->len) {
    cee8:	b133      	cbz	r3, cef8 <recv_thread+0xb8>
				bt_recv(frag);
    ceea:	f7f8 fdcb 	bl	5a84 <bt_recv>
	z_impl_k_yield();
    ceee:	f00e f847 	bl	1af80 <z_impl_k_yield>
		while (buf) {
    cef2:	2c00      	cmp	r4, #0
    cef4:	d1ed      	bne.n	ced2 <recv_thread+0x92>
    cef6:	e7a7      	b.n	ce48 <recv_thread+0x8>
				net_buf_unref(frag);
    cef8:	f00b fffe 	bl	18ef8 <net_buf_unref>
    cefc:	e7f7      	b.n	ceee <recv_thread+0xae>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    cefe:	2b02      	cmp	r3, #2
    cf00:	d013      	beq.n	cf2a <recv_thread+0xea>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cf02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cf06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf0a:	2001      	movs	r0, #1
    cf0c:	f7f7 fcfa 	bl	4904 <bt_buf_get_rx>
    cf10:	4604      	mov	r4, r0
		if (buf) {
    cf12:	b19c      	cbz	r4, cf3c <recv_thread+0xfc>
			hci_evt_encode(node_rx, buf);
    cf14:	9801      	ldr	r0, [sp, #4]
    cf16:	4621      	mov	r1, r4
    cf18:	f000 ffb4 	bl	de84 <hci_evt_encode>
	node_rx->hdr.next = NULL;
    cf1c:	9b01      	ldr	r3, [sp, #4]
    cf1e:	2200      	movs	r2, #0
    cf20:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cf22:	a801      	add	r0, sp, #4
    cf24:	f002 f8f0 	bl	f108 <ll_rx_mem_release>
		while (buf) {
    cf28:	e7d3      	b.n	ced2 <recv_thread+0x92>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    cf2a:	2200      	movs	r2, #0
    cf2c:	2300      	movs	r3, #0
    cf2e:	2101      	movs	r1, #1
    cf30:	2000      	movs	r0, #0
    cf32:	f7f7 fd1d 	bl	4970 <bt_buf_get_evt>
    cf36:	4604      	mov	r4, r0
		if (buf) {
    cf38:	2c00      	cmp	r4, #0
    cf3a:	d1eb      	bne.n	cf14 <recv_thread+0xd4>
	node_rx->hdr.next = NULL;
    cf3c:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    cf3e:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    cf40:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cf42:	f002 f8e1 	bl	f108 <ll_rx_mem_release>
		while (buf) {
    cf46:	e77f      	b.n	ce48 <recv_thread+0x8>
    cf48:	200007b4 	.word	0x200007b4
    cf4c:	00021864 	.word	0x00021864
    cf50:	000218a4 	.word	0x000218a4
    cf54:	0002180c 	.word	0x0002180c

0000cf58 <prio_recv_thread>:
{
    cf58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    cf5c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; d010 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
    cf60:	4f2c      	ldr	r7, [pc, #176]	; (d014 <prio_recv_thread+0xbc>)
{
    cf62:	b082      	sub	sp, #8
    cf64:	e00c      	b.n	cf80 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    cf66:	f7f7 fd03 	bl	4970 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    cf6a:	4622      	mov	r2, r4
    cf6c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    cf70:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    cf72:	f001 fa71 	bl	e458 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    cf76:	4620      	mov	r0, r4
    cf78:	f7f8 fe28 	bl	5bcc <bt_recv_prio>
	z_impl_k_yield();
    cf7c:	f00e f800 	bl	1af80 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cf80:	f10d 0102 	add.w	r1, sp, #2
    cf84:	a801      	add	r0, sp, #4
    cf86:	f001 ff0d 	bl	eda4 <ll_rx_get>
    cf8a:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    cf8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cf90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cf94:	2100      	movs	r1, #0
    cf96:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cf98:	2c00      	cmp	r4, #0
    cf9a:	d1e4      	bne.n	cf66 <prio_recv_thread+0xe>
		if (node_rx) {
    cf9c:	9b01      	ldr	r3, [sp, #4]
    cf9e:	b193      	cbz	r3, cfc6 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    cfa0:	f001 ffe2 	bl	ef68 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cfa4:	9e01      	ldr	r6, [sp, #4]
    cfa6:	4630      	mov	r0, r6
    cfa8:	f001 fa6e 	bl	e488 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    cfac:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cfae:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    cfb0:	796b      	ldrb	r3, [r5, #5]
    cfb2:	2b03      	cmp	r3, #3
    cfb4:	d102      	bne.n	cfbc <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    cfb6:	792b      	ldrb	r3, [r5, #4]
    cfb8:	2b15      	cmp	r3, #21
    cfba:	d00c      	beq.n	cfd6 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    cfbc:	4629      	mov	r1, r5
    cfbe:	4638      	mov	r0, r7
    cfc0:	f013 f959 	bl	20276 <k_queue_append>
			continue;
    cfc4:	e7dc      	b.n	cf80 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    cfc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cfca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cfce:	4640      	mov	r0, r8
    cfd0:	f00d fba0 	bl	1a714 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cfd4:	e7d4      	b.n	cf80 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    cfd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cfda:	4621      	mov	r1, r4
    cfdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cfe0:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    cfe2:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    cfe4:	f7f7 fcc4 	bl	4970 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
    cfe8:	4631      	mov	r1, r6
    cfea:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    cfec:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    cfee:	f105 001c 	add.w	r0, r5, #28
    cff2:	f000 fee5 	bl	ddc0 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    cff6:	4630      	mov	r0, r6
    cff8:	f000 ff02 	bl	de00 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    cffc:	4620      	mov	r0, r4
			if (buf) {
    cffe:	b124      	cbz	r4, d00a <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    d000:	f7f8 fde4 	bl	5bcc <bt_recv_prio>
					net_buf_unref(buf);
    d004:	4620      	mov	r0, r4
    d006:	f00b ff77 	bl	18ef8 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
    d00a:	9d01      	ldr	r5, [sp, #4]
    d00c:	e7d6      	b.n	cfbc <prio_recv_thread+0x64>
    d00e:	bf00      	nop
    d010:	20000784 	.word	0x20000784
    d014:	200007b4 	.word	0x200007b4

0000d018 <hci_driver_open>:
{
    d018:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    d01a:	4821      	ldr	r0, [pc, #132]	; (d0a0 <hci_driver_open+0x88>)
{
    d01c:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    d01e:	f001 fdbd 	bl	eb9c <ll_init>
	if (err) {
    d022:	4604      	mov	r4, r0
    d024:	bb70      	cbnz	r0, d084 <hci_driver_open+0x6c>
	hci_init(NULL);
    d026:	f001 fa45 	bl	e4b4 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    d02a:	2600      	movs	r6, #0
    d02c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d02e:	f06f 0209 	mvn.w	r2, #9
    d032:	e9cd 2403 	strd	r2, r4, [sp, #12]
    d036:	e9cd 6706 	strd	r6, r7, [sp, #24]
    d03a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d03e:	4b19      	ldr	r3, [pc, #100]	; (d0a4 <hci_driver_open+0x8c>)
    d040:	4919      	ldr	r1, [pc, #100]	; (d0a8 <hci_driver_open+0x90>)
    d042:	9400      	str	r4, [sp, #0]
    d044:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    d048:	4818      	ldr	r0, [pc, #96]	; (d0ac <hci_driver_open+0x94>)
    d04a:	f00d f9b1 	bl	1a3b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    d04e:	4918      	ldr	r1, [pc, #96]	; (d0b0 <hci_driver_open+0x98>)
    d050:	4816      	ldr	r0, [pc, #88]	; (d0ac <hci_driver_open+0x94>)
    d052:	f013 f87e 	bl	20152 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    d056:	f06f 0207 	mvn.w	r2, #7
    d05a:	e9cd 2403 	strd	r2, r4, [sp, #12]
    d05e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    d062:	e9cd 4401 	strd	r4, r4, [sp, #4]
    d066:	4b13      	ldr	r3, [pc, #76]	; (d0b4 <hci_driver_open+0x9c>)
    d068:	4913      	ldr	r1, [pc, #76]	; (d0b8 <hci_driver_open+0xa0>)
    d06a:	9400      	str	r4, [sp, #0]
    d06c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    d070:	4812      	ldr	r0, [pc, #72]	; (d0bc <hci_driver_open+0xa4>)
    d072:	f00d f99d 	bl	1a3b0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    d076:	4912      	ldr	r1, [pc, #72]	; (d0c0 <hci_driver_open+0xa8>)
    d078:	4810      	ldr	r0, [pc, #64]	; (d0bc <hci_driver_open+0xa4>)
    d07a:	f013 f86a 	bl	20152 <z_impl_k_thread_name_set>
}
    d07e:	4620      	mov	r0, r4
    d080:	b008      	add	sp, #32
    d082:	bdd0      	pop	{r4, r6, r7, pc}
    d084:	4b0f      	ldr	r3, [pc, #60]	; (d0c4 <hci_driver_open+0xac>)
    d086:	4a10      	ldr	r2, [pc, #64]	; (d0c8 <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
    d088:	4810      	ldr	r0, [pc, #64]	; (d0cc <hci_driver_open+0xb4>)
    d08a:	1ad2      	subs	r2, r2, r3
    d08c:	08d2      	lsrs	r2, r2, #3
    d08e:	0192      	lsls	r2, r2, #6
    d090:	f042 0201 	orr.w	r2, r2, #1
    d094:	4621      	mov	r1, r4
    d096:	f00e ffb9 	bl	1c00c <log_1>
}
    d09a:	4620      	mov	r0, r4
    d09c:	b008      	add	sp, #32
    d09e:	bdd0      	pop	{r4, r6, r7, pc}
    d0a0:	20000784 	.word	0x20000784
    d0a4:	0000cf59 	.word	0x0000cf59
    d0a8:	20003900 	.word	0x20003900
    d0ac:	20000f18 	.word	0x20000f18
    d0b0:	000218c8 	.word	0x000218c8
    d0b4:	0000ce41 	.word	0x0000ce41
    d0b8:	20003ae0 	.word	0x20003ae0
    d0bc:	20000f98 	.word	0x20000f98
    d0c0:	000218d4 	.word	0x000218d4
    d0c4:	00020e00 	.word	0x00020e00
    d0c8:	00020e50 	.word	0x00020e50
    d0cc:	000218a8 	.word	0x000218a8

0000d0d0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    d0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0d2:	4c19      	ldr	r4, [pc, #100]	; (d138 <le_remote_feat_complete+0x68>)
    d0d4:	6864      	ldr	r4, [r4, #4]
    d0d6:	00a4      	lsls	r4, r4, #2
    d0d8:	d504      	bpl.n	d0e4 <le_remote_feat_complete+0x14>
    d0da:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    d0dc:	4a17      	ldr	r2, [pc, #92]	; (d13c <le_remote_feat_complete+0x6c>)
    d0de:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d0e0:	0712      	lsls	r2, r2, #28
    d0e2:	d400      	bmi.n	d0e6 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    d0e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d0e6:	f103 0408 	add.w	r4, r3, #8
    d0ea:	4607      	mov	r7, r0
    d0ec:	460e      	mov	r6, r1
    d0ee:	4620      	mov	r0, r4
    d0f0:	2102      	movs	r1, #2
    d0f2:	f012 fdea 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    d0f6:	233e      	movs	r3, #62	; 0x3e
    d0f8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    d0fa:	230c      	movs	r3, #12
    d0fc:	7043      	strb	r3, [r0, #1]
    d0fe:	2101      	movs	r1, #1
    d100:	4620      	mov	r0, r4
    d102:	f012 fde2 	bl	1fcca <net_buf_simple_add>
    d106:	4603      	mov	r3, r0
	me->subevent = subevt;
    d108:	2204      	movs	r2, #4
    d10a:	701a      	strb	r2, [r3, #0]
    d10c:	4620      	mov	r0, r4
    d10e:	210b      	movs	r1, #11
    d110:	f012 fddb 	bl	1fcca <net_buf_simple_add>
		memcpy(&sep->features[0],
    d114:	2208      	movs	r2, #8
	sep->status = status;
    d116:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d118:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    d11c:	b92f      	cbnz	r7, d12a <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
    d11e:	1d31      	adds	r1, r6, #4
    d120:	3003      	adds	r0, #3
}
    d122:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
    d126:	f010 bc71 	b.w	1da0c <memcpy>
}
    d12a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    d12e:	2100      	movs	r1, #0
    d130:	3003      	adds	r0, #3
    d132:	f010 bc76 	b.w	1da22 <memset>
    d136:	bf00      	nop
    d138:	20000170 	.word	0x20000170
    d13c:	20000178 	.word	0x20000178

0000d140 <hci_vendor_cmd_handle_common>:
{
    d140:	b5f0      	push	{r4, r5, r6, r7, lr}
    d142:	3801      	subs	r0, #1
    d144:	b087      	sub	sp, #28
    d146:	4615      	mov	r5, r2
    d148:	2809      	cmp	r0, #9
    d14a:	d806      	bhi.n	d15a <hci_vendor_cmd_handle_common+0x1a>
    d14c:	e8df f000 	tbb	[pc, r0]
    d150:	05442709 	.word	0x05442709
    d154:	6c055805 	.word	0x6c055805
    d158:	9e89      	.short	0x9e89
	return 0;
    d15a:	f06f 0015 	mvn.w	r0, #21
}
    d15e:	b007      	add	sp, #28
    d160:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d162:	4b54      	ldr	r3, [pc, #336]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
    d164:	210d      	movs	r1, #13
    d166:	8818      	ldrh	r0, [r3, #0]
    d168:	f010 fe78 	bl	1de5c <bt_hci_cmd_complete_create>
    d16c:	210d      	movs	r1, #13
    d16e:	6028      	str	r0, [r5, #0]
    d170:	3008      	adds	r0, #8
    d172:	f012 fdaa 	bl	1fcca <net_buf_simple_add>
    d176:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d178:	2202      	movs	r2, #2
	rp->status = 0x00;
    d17a:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d17c:	2406      	movs	r4, #6
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    d17e:	2163      	movs	r1, #99	; 0x63
	rp->status = 0x00;
    d180:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    d182:	705a      	strb	r2, [r3, #1]
    d184:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    d186:	70da      	strb	r2, [r3, #3]
    d188:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    d18a:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d18c:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    d18e:	71dc      	strb	r4, [r3, #7]
    d190:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    d192:	7259      	strb	r1, [r3, #9]
    d194:	7298      	strb	r0, [r3, #10]
    d196:	72d8      	strb	r0, [r3, #11]
    d198:	7318      	strb	r0, [r3, #12]
}
    d19a:	b007      	add	sp, #28
    d19c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d19e:	4b45      	ldr	r3, [pc, #276]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
    d1a0:	2141      	movs	r1, #65	; 0x41
    d1a2:	8818      	ldrh	r0, [r3, #0]
    d1a4:	f010 fe5a 	bl	1de5c <bt_hci_cmd_complete_create>
    d1a8:	2141      	movs	r1, #65	; 0x41
    d1aa:	6028      	str	r0, [r5, #0]
    d1ac:	3008      	adds	r0, #8
    d1ae:	f012 fd8c 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d1b2:	2400      	movs	r4, #0
    d1b4:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d1b6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d1b8:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d1bc:	4621      	mov	r1, r4
    d1be:	f010 fc30 	bl	1da22 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    d1c2:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d1c4:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    d1c6:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
    d1ca:	f043 0303 	orr.w	r3, r3, #3
	return 0;
    d1ce:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    d1d0:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d1d2:	70ab      	strb	r3, [r5, #2]
}
    d1d4:	b007      	add	sp, #28
    d1d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d1d8:	4b36      	ldr	r3, [pc, #216]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
    d1da:	2109      	movs	r1, #9
    d1dc:	8818      	ldrh	r0, [r3, #0]
    d1de:	f010 fe3d 	bl	1de5c <bt_hci_cmd_complete_create>
    d1e2:	2109      	movs	r1, #9
    d1e4:	6028      	str	r0, [r5, #0]
    d1e6:	3008      	adds	r0, #8
    d1e8:	f012 fd6f 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d1ec:	2400      	movs	r4, #0
    d1ee:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d1f2:	2208      	movs	r2, #8
    d1f4:	4621      	mov	r1, r4
    d1f6:	f010 fc14 	bl	1da22 <memset>
	return 0;
    d1fa:	4620      	mov	r0, r4
}
    d1fc:	b007      	add	sp, #28
    d1fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d200:	6889      	ldr	r1, [r1, #8]
    d202:	2000      	movs	r0, #0
    d204:	f7ff fd8a 	bl	cd1c <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d208:	4b2a      	ldr	r3, [pc, #168]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
    d20a:	2101      	movs	r1, #1
    d20c:	8818      	ldrh	r0, [r3, #0]
    d20e:	f010 fe25 	bl	1de5c <bt_hci_cmd_complete_create>
    d212:	2101      	movs	r1, #1
    d214:	4604      	mov	r4, r0
    d216:	3008      	adds	r0, #8
    d218:	f012 fd57 	bl	1fcca <net_buf_simple_add>
    d21c:	4603      	mov	r3, r0
	ccst->status = status;
    d21e:	2000      	movs	r0, #0
    d220:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
    d222:	602c      	str	r4, [r5, #0]
}
    d224:	b007      	add	sp, #28
    d226:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    d228:	4e23      	ldr	r6, [pc, #140]	; (d2b8 <hci_vendor_cmd_handle_common+0x178>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d22a:	4f22      	ldr	r7, [pc, #136]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
	const char build_info[] = HCI_VS_BUILD_INFO;
    d22c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    d22e:	f10d 0c04 	add.w	ip, sp, #4
    d232:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
    d236:	6833      	ldr	r3, [r6, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d238:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
    d23a:	f8ac 3000 	strh.w	r3, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d23e:	2113      	movs	r1, #19
    d240:	f010 fe0c 	bl	1de5c <bt_hci_cmd_complete_create>
    d244:	2113      	movs	r1, #19
    d246:	6028      	str	r0, [r5, #0]
    d248:	3008      	adds	r0, #8
    d24a:	f012 fd3e 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d24e:	2400      	movs	r4, #0
    d250:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d254:	2212      	movs	r2, #18
    d256:	a901      	add	r1, sp, #4
    d258:	f010 fbd8 	bl	1da0c <memcpy>
	return 0;
    d25c:	4620      	mov	r0, r4
}
    d25e:	b007      	add	sp, #28
    d260:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d262:	4b14      	ldr	r3, [pc, #80]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
    d264:	2118      	movs	r1, #24
    d266:	8818      	ldrh	r0, [r3, #0]
    d268:	f010 fdf8 	bl	1de5c <bt_hci_cmd_complete_create>
    d26c:	2118      	movs	r1, #24
    d26e:	6028      	str	r0, [r5, #0]
    d270:	3008      	adds	r0, #8
    d272:	f012 fd2a 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d276:	2400      	movs	r4, #0
    d278:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d27a:	2101      	movs	r1, #1
	rp->status = 0x00;
    d27c:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d280:	f00b fcc0 	bl	18c04 <hci_vendor_read_static_addr>
    d284:	7068      	strb	r0, [r5, #1]
	return 0;
    d286:	4620      	mov	r0, r4
}
    d288:	b007      	add	sp, #28
    d28a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d28c:	4b09      	ldr	r3, [pc, #36]	; (d2b4 <hci_vendor_cmd_handle_common+0x174>)
    d28e:	2121      	movs	r1, #33	; 0x21
    d290:	8818      	ldrh	r0, [r3, #0]
    d292:	f010 fde3 	bl	1de5c <bt_hci_cmd_complete_create>
    d296:	2121      	movs	r1, #33	; 0x21
    d298:	6028      	str	r0, [r5, #0]
    d29a:	3008      	adds	r0, #8
    d29c:	f012 fd15 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d2a0:	4601      	mov	r1, r0
    d2a2:	2400      	movs	r4, #0
    d2a4:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    d2a8:	3001      	adds	r0, #1
    d2aa:	f00b fd1f 	bl	18cec <hci_vendor_read_key_hierarchy_roots>
	return 0;
    d2ae:	4620      	mov	r0, r4
}
    d2b0:	b007      	add	sp, #28
    d2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d2b4:	20002904 	.word	0x20002904
    d2b8:	00021910 	.word	0x00021910

0000d2bc <hci_cmd_handle>:
{
    d2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d2be:	8983      	ldrh	r3, [r0, #12]
{
    d2c0:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    d2c2:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
    d2c4:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    d2c6:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d2c8:	f240 811c 	bls.w	d504 <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
    d2cc:	4605      	mov	r5, r0
    d2ce:	2103      	movs	r1, #3
    d2d0:	3008      	adds	r0, #8
    d2d2:	f012 fd21 	bl	1fd18 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    d2d6:	89aa      	ldrh	r2, [r5, #12]
    d2d8:	7883      	ldrb	r3, [r0, #2]
    d2da:	429a      	cmp	r2, r3
    d2dc:	f0c0 8150 	bcc.w	d580 <hci_cmd_handle+0x2c4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d2e0:	8802      	ldrh	r2, [r0, #0]
    d2e2:	4ebc      	ldr	r6, [pc, #752]	; (d5d4 <hci_cmd_handle+0x318>)
	switch (BT_OGF(_opcode)) {
    d2e4:	f3c2 2385 	ubfx	r3, r2, #10, #6
    d2e8:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d2ea:	8032      	strh	r2, [r6, #0]
    d2ec:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
    d2ee:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
    d2f2:	d809      	bhi.n	d308 <hci_cmd_handle+0x4c>
    d2f4:	b1a3      	cbz	r3, d320 <hci_cmd_handle+0x64>
    d2f6:	3b01      	subs	r3, #1
    d2f8:	2b07      	cmp	r3, #7
    d2fa:	d811      	bhi.n	d320 <hci_cmd_handle+0x64>
    d2fc:	e8df f003 	tbb	[pc, r3]
    d300:	e9c81017 	.word	0xe9c81017
    d304:	26101010 	.word	0x26101010
    d308:	2b3f      	cmp	r3, #63	; 0x3f
    d30a:	d109      	bne.n	d320 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    d30c:	4629      	mov	r1, r5
    d30e:	aa07      	add	r2, sp, #28
    d310:	4620      	mov	r0, r4
    d312:	f7ff ff15 	bl	d140 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    d316:	3016      	adds	r0, #22
	return evt;
    d318:	bf18      	it	ne
    d31a:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
    d31c:	d104      	bne.n	d328 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
    d31e:	8830      	ldrh	r0, [r6, #0]
    d320:	2101      	movs	r1, #1
    d322:	f010 fdad 	bl	1de80 <bt_hci_cmd_status_create>
    d326:	4605      	mov	r5, r0
}
    d328:	4628      	mov	r0, r5
    d32a:	b00d      	add	sp, #52	; 0x34
    d32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d32e:	2c06      	cmp	r4, #6
    d330:	f000 8443 	beq.w	dbba <hci_cmd_handle+0x8fe>
    d334:	2c1d      	cmp	r4, #29
    d336:	d1f3      	bne.n	d320 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
    d338:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
    d33a:	8818      	ldrh	r0, [r3, #0]
    d33c:	f003 ff8a 	bl	11254 <ll_version_ind_send>
    d340:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d342:	8830      	ldrh	r0, [r6, #0]
    d344:	f010 fd9c 	bl	1de80 <bt_hci_cmd_status_create>
    d348:	4605      	mov	r5, r0
}
    d34a:	e7ed      	b.n	d328 <hci_cmd_handle+0x6c>
	switch (ocf) {
    d34c:	1e62      	subs	r2, r4, #1
    d34e:	2a4d      	cmp	r2, #77	; 0x4d
    d350:	d8e6      	bhi.n	d320 <hci_cmd_handle+0x64>
    d352:	a301      	add	r3, pc, #4	; (adr r3, d358 <hci_cmd_handle+0x9c>)
    d354:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d358:	0000d8db 	.word	0x0000d8db
    d35c:	0000d955 	.word	0x0000d955
    d360:	0000d90d 	.word	0x0000d90d
    d364:	0000d321 	.word	0x0000d321
    d368:	0000d903 	.word	0x0000d903
    d36c:	0000d8e7 	.word	0x0000d8e7
    d370:	0000d9d3 	.word	0x0000d9d3
    d374:	0000d9c7 	.word	0x0000d9c7
    d378:	0000d9bb 	.word	0x0000d9bb
    d37c:	0000d9b1 	.word	0x0000d9b1
    d380:	0000d321 	.word	0x0000d321
    d384:	0000d321 	.word	0x0000d321
    d388:	0000d321 	.word	0x0000d321
    d38c:	0000d321 	.word	0x0000d321
    d390:	0000d98f 	.word	0x0000d98f
    d394:	0000d989 	.word	0x0000d989
    d398:	0000d981 	.word	0x0000d981
    d39c:	0000d979 	.word	0x0000d979
    d3a0:	0000db93 	.word	0x0000db93
    d3a4:	0000d321 	.word	0x0000d321
    d3a8:	0000db67 	.word	0x0000db67
    d3ac:	0000db51 	.word	0x0000db51
    d3b0:	0000db1b 	.word	0x0000db1b
    d3b4:	0000daf9 	.word	0x0000daf9
    d3b8:	0000d321 	.word	0x0000d321
    d3bc:	0000daef 	.word	0x0000daef
    d3c0:	0000dadf 	.word	0x0000dadf
    d3c4:	0000daa9 	.word	0x0000daa9
    d3c8:	0000d321 	.word	0x0000d321
    d3cc:	0000d321 	.word	0x0000d321
    d3d0:	0000d321 	.word	0x0000d321
    d3d4:	0000da93 	.word	0x0000da93
    d3d8:	0000da5d 	.word	0x0000da5d
    d3dc:	0000da4d 	.word	0x0000da4d
    d3e0:	0000da17 	.word	0x0000da17
    d3e4:	0000da0b 	.word	0x0000da0b
    d3e8:	0000d321 	.word	0x0000d321
    d3ec:	0000d321 	.word	0x0000d321
    d3f0:	0000d9fd 	.word	0x0000d9fd
    d3f4:	0000d9f5 	.word	0x0000d9f5
    d3f8:	0000d9ef 	.word	0x0000d9ef
    d3fc:	0000d85f 	.word	0x0000d85f
    d400:	0000d831 	.word	0x0000d831
    d404:	0000d803 	.word	0x0000d803
    d408:	0000d7f9 	.word	0x0000d7f9
    d40c:	0000d8cd 	.word	0x0000d8cd
    d410:	0000d881 	.word	0x0000d881
    d414:	0000d79f 	.word	0x0000d79f
    d418:	0000d781 	.word	0x0000d781
    d41c:	0000d725 	.word	0x0000d725
    d420:	0000d321 	.word	0x0000d321
    d424:	0000d321 	.word	0x0000d321
    d428:	0000d321 	.word	0x0000d321
    d42c:	0000d321 	.word	0x0000d321
    d430:	0000d321 	.word	0x0000d321
    d434:	0000d321 	.word	0x0000d321
    d438:	0000d321 	.word	0x0000d321
    d43c:	0000d321 	.word	0x0000d321
    d440:	0000d321 	.word	0x0000d321
    d444:	0000d321 	.word	0x0000d321
    d448:	0000d321 	.word	0x0000d321
    d44c:	0000d321 	.word	0x0000d321
    d450:	0000d321 	.word	0x0000d321
    d454:	0000d321 	.word	0x0000d321
    d458:	0000d321 	.word	0x0000d321
    d45c:	0000d321 	.word	0x0000d321
    d460:	0000d321 	.word	0x0000d321
    d464:	0000d321 	.word	0x0000d321
    d468:	0000d321 	.word	0x0000d321
    d46c:	0000d321 	.word	0x0000d321
    d470:	0000d321 	.word	0x0000d321
    d474:	0000d321 	.word	0x0000d321
    d478:	0000d321 	.word	0x0000d321
    d47c:	0000d321 	.word	0x0000d321
    d480:	0000d701 	.word	0x0000d701
    d484:	0000d321 	.word	0x0000d321
    d488:	0000d321 	.word	0x0000d321
    d48c:	0000d6df 	.word	0x0000d6df
	switch (ocf) {
    d490:	2c63      	cmp	r4, #99	; 0x63
    d492:	f000 839e 	beq.w	dbd2 <hci_cmd_handle+0x916>
    d496:	d857      	bhi.n	d548 <hci_cmd_handle+0x28c>
    d498:	2c03      	cmp	r4, #3
    d49a:	f000 83a1 	beq.w	dbe0 <hci_cmd_handle+0x924>
    d49e:	2c2d      	cmp	r4, #45	; 0x2d
    d4a0:	d13e      	bne.n	d520 <hci_cmd_handle+0x264>
		read_tx_power_level(cmd, evt);
    d4a2:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d4a4:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
    d4a6:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
    d4a8:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d4aa:	f010 fcd7 	bl	1de5c <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
    d4ae:	2104      	movs	r1, #4
    d4b0:	9007      	str	r0, [sp, #28]
    d4b2:	3008      	adds	r0, #8
    d4b4:	f012 fc09 	bl	1fcca <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
    d4b8:	b2b5      	uxth	r5, r6
    d4ba:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    d4bc:	1cc3      	adds	r3, r0, #3
    d4be:	4629      	mov	r1, r5
    d4c0:	463a      	mov	r2, r7
    d4c2:	2002      	movs	r0, #2
    d4c4:	f7ff fc48 	bl	cd58 <ll_tx_pwr_lvl_get>
	rp->status = status;
    d4c8:	7020      	strb	r0, [r4, #0]
	return evt;
    d4ca:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    d4cc:	f8a4 6001 	strh.w	r6, [r4, #1]
}
    d4d0:	e72a      	b.n	d328 <hci_cmd_handle+0x6c>
	switch (ocf) {
    d4d2:	1e62      	subs	r2, r4, #1
    d4d4:	2a08      	cmp	r2, #8
    d4d6:	f63f af23 	bhi.w	d320 <hci_cmd_handle+0x64>
    d4da:	a301      	add	r3, pc, #4	; (adr r3, d4e0 <hci_cmd_handle+0x224>)
    d4dc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
    d4e0:	0000d6a9 	.word	0x0000d6a9
    d4e4:	0000d5ed 	.word	0x0000d5ed
    d4e8:	0000d5ab 	.word	0x0000d5ab
    d4ec:	0000d321 	.word	0x0000d321
    d4f0:	0000d321 	.word	0x0000d321
    d4f4:	0000d321 	.word	0x0000d321
    d4f8:	0000d321 	.word	0x0000d321
    d4fc:	0000d321 	.word	0x0000d321
    d500:	0000d589 	.word	0x0000d589
    d504:	4934      	ldr	r1, [pc, #208]	; (d5d8 <hci_cmd_handle+0x31c>)
    d506:	4b35      	ldr	r3, [pc, #212]	; (d5dc <hci_cmd_handle+0x320>)
		BT_ERR("No HCI Command header");
    d508:	4835      	ldr	r0, [pc, #212]	; (d5e0 <hci_cmd_handle+0x324>)
    d50a:	1ac9      	subs	r1, r1, r3
    d50c:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
    d50e:	0189      	lsls	r1, r1, #6
    d510:	f041 0101 	orr.w	r1, r1, #1
    d514:	f00e fd6d 	bl	1bff2 <log_0>
		return NULL;
    d518:	4625      	mov	r5, r4
}
    d51a:	4628      	mov	r0, r5
    d51c:	b00d      	add	sp, #52	; 0x34
    d51e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d520:	2c01      	cmp	r4, #1
    d522:	f47f aefd 	bne.w	d320 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d526:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
    d528:	4b2e      	ldr	r3, [pc, #184]	; (d5e4 <hci_cmd_handle+0x328>)
    d52a:	6811      	ldr	r1, [r2, #0]
    d52c:	6852      	ldr	r2, [r2, #4]
    d52e:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d530:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d532:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d534:	f010 fc92 	bl	1de5c <bt_hci_cmd_complete_create>
    d538:	2101      	movs	r1, #1
    d53a:	4605      	mov	r5, r0
    d53c:	3008      	adds	r0, #8
    d53e:	f012 fbc4 	bl	1fcca <net_buf_simple_add>
	ccst->status = status;
    d542:	2300      	movs	r3, #0
    d544:	7003      	strb	r3, [r0, #0]
}
    d546:	e6ef      	b.n	d328 <hci_cmd_handle+0x6c>
	switch (ocf) {
    d548:	2c7b      	cmp	r4, #123	; 0x7b
    d54a:	f000 836b 	beq.w	dc24 <hci_cmd_handle+0x968>
    d54e:	2c7c      	cmp	r4, #124	; 0x7c
    d550:	f47f aee6 	bne.w	d320 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
    d554:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d556:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d558:	8859      	ldrh	r1, [r3, #2]
    d55a:	b2b8      	uxth	r0, r7
    d55c:	f003 ffb4 	bl	114c8 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d560:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d562:	2103      	movs	r1, #3
    d564:	8830      	ldrh	r0, [r6, #0]
    d566:	f010 fc79 	bl	1de5c <bt_hci_cmd_complete_create>
    d56a:	2103      	movs	r1, #3
    d56c:	4603      	mov	r3, r0
    d56e:	3008      	adds	r0, #8
    d570:	9307      	str	r3, [sp, #28]
    d572:	f012 fbaa 	bl	1fcca <net_buf_simple_add>
	rp->status = status;
    d576:	7004      	strb	r4, [r0, #0]
	return evt;
    d578:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    d57a:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
    d57e:	e6d3      	b.n	d328 <hci_cmd_handle+0x6c>
    d580:	4915      	ldr	r1, [pc, #84]	; (d5d8 <hci_cmd_handle+0x31c>)
    d582:	4b16      	ldr	r3, [pc, #88]	; (d5dc <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
    d584:	4818      	ldr	r0, [pc, #96]	; (d5e8 <hci_cmd_handle+0x32c>)
    d586:	e7c0      	b.n	d50a <hci_cmd_handle+0x24e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d588:	2107      	movs	r1, #7
    d58a:	f010 fc67 	bl	1de5c <bt_hci_cmd_complete_create>
    d58e:	2107      	movs	r1, #7
    d590:	4603      	mov	r3, r0
    d592:	3008      	adds	r0, #8
    d594:	9307      	str	r3, [sp, #28]
    d596:	f012 fb98 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d59a:	4601      	mov	r1, r0
    d59c:	2000      	movs	r0, #0
    d59e:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d5a2:	f7ff fb9d 	bl	cce0 <ll_addr_get>
	return evt;
    d5a6:	9d07      	ldr	r5, [sp, #28]
    d5a8:	e6be      	b.n	d328 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d5aa:	2109      	movs	r1, #9
    d5ac:	f010 fc56 	bl	1de5c <bt_hci_cmd_complete_create>
    d5b0:	2109      	movs	r1, #9
    d5b2:	4603      	mov	r3, r0
    d5b4:	3008      	adds	r0, #8
    d5b6:	9307      	str	r3, [sp, #28]
    d5b8:	f012 fb87 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d5bc:	2100      	movs	r1, #0
    d5be:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d5c0:	2208      	movs	r2, #8
	rp->status = 0x00;
    d5c2:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d5c6:	f010 fa2c 	bl	1da22 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d5ca:	2360      	movs	r3, #96	; 0x60
	return evt;
    d5cc:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
    d5ce:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    d5d0:	e6aa      	b.n	d328 <hci_cmd_handle+0x6c>
    d5d2:	bf00      	nop
    d5d4:	20002904 	.word	0x20002904
    d5d8:	00020e48 	.word	0x00020e48
    d5dc:	00020e00 	.word	0x00020e00
    d5e0:	00021924 	.word	0x00021924
    d5e4:	20000170 	.word	0x20000170
    d5e8:	0002193c 	.word	0x0002193c
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d5ec:	2141      	movs	r1, #65	; 0x41
    d5ee:	f010 fc35 	bl	1de5c <bt_hci_cmd_complete_create>
    d5f2:	2141      	movs	r1, #65	; 0x41
    d5f4:	4603      	mov	r3, r0
    d5f6:	3008      	adds	r0, #8
    d5f8:	9307      	str	r3, [sp, #28]
    d5fa:	f012 fb66 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d5fe:	2100      	movs	r1, #0
    d600:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d602:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d604:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d608:	f010 fa0b 	bl	1da22 <memset>
	rp->commands[15] |= BIT(1);
    d60c:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
    d60e:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
    d610:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d612:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
    d614:	f043 0302 	orr.w	r3, r3, #2
    d618:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d61a:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
    d61c:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
    d620:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d624:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
    d628:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
    d62a:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
    d62c:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
    d62e:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d630:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
    d632:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
    d636:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
    d63a:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
    d63e:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
    d642:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
    d646:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
    d648:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
    d64a:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
    d64c:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
    d64e:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
    d650:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
    d654:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d656:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
    d65a:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d65e:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
    d662:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d666:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
    d66a:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
    d66c:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
    d66e:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
    d672:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d676:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d678:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
    d67c:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    d680:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d684:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    d688:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
    d68c:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
    d690:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
    d694:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d698:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d69c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    d6a0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
    d6a4:	9d07      	ldr	r5, [sp, #28]
    d6a6:	e63f      	b.n	d328 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d6a8:	2109      	movs	r1, #9
    d6aa:	f010 fbd7 	bl	1de5c <bt_hci_cmd_complete_create>
    d6ae:	2109      	movs	r1, #9
    d6b0:	4603      	mov	r3, r0
    d6b2:	3008      	adds	r0, #8
    d6b4:	9307      	str	r3, [sp, #28]
    d6b6:	f012 fb08 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d6ba:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
    d6bc:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d6be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	rp->status = 0x00;
    d6c2:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    d6c4:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d6c6:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
    d6ca:	7083      	strb	r3, [r0, #2]
    d6cc:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d6ce:	2305      	movs	r3, #5
	return evt;
    d6d0:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
    d6d2:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d6d4:	7144      	strb	r4, [r0, #5]
    d6d6:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d6d8:	71c2      	strb	r2, [r0, #7]
    d6da:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
    d6dc:	e624      	b.n	d328 <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
    d6de:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d6e0:	79c1      	ldrb	r1, [r0, #7]
    d6e2:	f008 f92f 	bl	15944 <ll_priv_mode_set>
    d6e6:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d6e8:	2101      	movs	r1, #1
    d6ea:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d6ec:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d6ee:	f010 fbb5 	bl	1de5c <bt_hci_cmd_complete_create>
    d6f2:	2101      	movs	r1, #1
    d6f4:	4605      	mov	r5, r0
    d6f6:	3008      	adds	r0, #8
    d6f8:	f012 fae7 	bl	1fcca <net_buf_simple_add>
	ccst->status = status;
    d6fc:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
    d6fe:	e613      	b.n	d328 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d700:	2103      	movs	r1, #3
    d702:	f010 fbab 	bl	1de5c <bt_hci_cmd_complete_create>
    d706:	2103      	movs	r1, #3
    d708:	4603      	mov	r3, r0
    d70a:	3008      	adds	r0, #8
    d70c:	9307      	str	r3, [sp, #28]
    d70e:	f012 fadc 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d712:	4601      	mov	r1, r0
    d714:	2300      	movs	r3, #0
    d716:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d71a:	3001      	adds	r0, #1
    d71c:	f7ff fb2c 	bl	cd78 <ll_tx_pwr_get>
	return evt;
    d720:	9d07      	ldr	r5, [sp, #28]
    d722:	e601      	b.n	d328 <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
    d724:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d726:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
    d728:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    d72a:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d72c:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d730:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
    d732:	bf44      	itt	mi
    d734:	f041 0103 	orrmi.w	r1, r1, #3
    d738:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d73a:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
    d73e:	7913      	ldrb	r3, [r2, #4]
    d740:	bf1c      	itt	ne
    d742:	f043 0303 	orrne.w	r3, r3, #3
    d746:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    d748:	ea41 0203 	orr.w	r2, r1, r3
    d74c:	f012 0ffc 	tst.w	r2, #252	; 0xfc
    d750:	f040 8289 	bne.w	dc66 <hci_cmd_handle+0x9aa>
	if (!(cmd->tx_phys & 0x07) ||
    d754:	074f      	lsls	r7, r1, #29
    d756:	f000 8280 	beq.w	dc5a <hci_cmd_handle+0x99e>
    d75a:	075a      	lsls	r2, r3, #29
    d75c:	f000 827d 	beq.w	dc5a <hci_cmd_handle+0x99e>
	if (phy_opts & 0x03) {
    d760:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    d764:	bf1c      	itt	ne
    d766:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    d76a:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d76e:	4628      	mov	r0, r5
    d770:	f003 fe34 	bl	113dc <ll_phy_req_send>
    d774:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d776:	8830      	ldrh	r0, [r6, #0]
    d778:	f010 fb82 	bl	1de80 <bt_hci_cmd_status_create>
    d77c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    d77e:	e5d3      	b.n	d328 <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
    d780:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d782:	781a      	ldrb	r2, [r3, #0]
    d784:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    d786:	bf4a      	itet	mi
    d788:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d78a:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
    d78c:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d78e:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    d790:	bf4a      	itet	mi
    d792:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d794:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
    d796:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d798:	f003 fe16 	bl	113c8 <ll_phy_default_set>
    d79c:	e7a3      	b.n	d6e6 <hci_cmd_handle+0x42a>
	handle = sys_le16_to_cpu(cmd->handle);
    d79e:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d7a0:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    d7a2:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d7a4:	f010 fb5a 	bl	1de5c <bt_hci_cmd_complete_create>
    d7a8:	2105      	movs	r1, #5
    d7aa:	4603      	mov	r3, r0
    d7ac:	3008      	adds	r0, #8
    d7ae:	9307      	str	r3, [sp, #28]
    d7b0:	f012 fa8b 	bl	1fcca <net_buf_simple_add>
    d7b4:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d7b6:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    d7b8:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d7ba:	1ce1      	adds	r1, r4, #3
    d7bc:	f003 fde6 	bl	1138c <ll_phy_get>
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
#ifdef CONFIG_TOOLCHAIN_HAS_BUILTIN_FFS
	return __builtin_ffs(op);
    d7c0:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
    d7c2:	7020      	strb	r0, [r4, #0]
    d7c4:	2b00      	cmp	r3, #0
    d7c6:	fa93 f2a3 	rbit	r2, r3
    d7ca:	7923      	ldrb	r3, [r4, #4]
    d7cc:	fab2 f282 	clz	r2, r2
    d7d0:	bf08      	it	eq
    d7d2:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    d7d6:	2b00      	cmp	r3, #0
    d7d8:	fa93 f3a3 	rbit	r3, r3
    d7dc:	fab3 f383 	clz	r3, r3
    d7e0:	f102 0201 	add.w	r2, r2, #1
    d7e4:	bf08      	it	eq
    d7e6:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d7ea:	70e2      	strb	r2, [r4, #3]
    d7ec:	3301      	adds	r3, #1
	return evt;
    d7ee:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d7f0:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
    d7f2:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
    d7f6:	e597      	b.n	d328 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
    d7f8:	68ab      	ldr	r3, [r5, #8]
    d7fa:	7818      	ldrb	r0, [r3, #0]
    d7fc:	f008 f882 	bl	15904 <ll_rl_enable>
    d800:	e771      	b.n	d6e6 <hci_cmd_handle+0x42a>
	memcpy(dst, src, sizeof(*dst));
    d802:	2207      	movs	r2, #7
    d804:	68a9      	ldr	r1, [r5, #8]
    d806:	a808      	add	r0, sp, #32
    d808:	f010 f900 	bl	1da0c <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d80c:	2107      	movs	r1, #7
    d80e:	8830      	ldrh	r0, [r6, #0]
    d810:	f010 fb24 	bl	1de5c <bt_hci_cmd_complete_create>
    d814:	2107      	movs	r1, #7
    d816:	4603      	mov	r3, r0
    d818:	3008      	adds	r0, #8
    d81a:	9307      	str	r3, [sp, #28]
    d81c:	f012 fa55 	bl	1fcca <net_buf_simple_add>
    d820:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d822:	1c41      	adds	r1, r0, #1
    d824:	a808      	add	r0, sp, #32
    d826:	f008 f83b 	bl	158a0 <ll_rl_lrpa_get>
    d82a:	7020      	strb	r0, [r4, #0]
	return evt;
    d82c:	9d07      	ldr	r5, [sp, #28]
    d82e:	e57b      	b.n	d328 <hci_cmd_handle+0x6c>
    d830:	2207      	movs	r2, #7
    d832:	68a9      	ldr	r1, [r5, #8]
    d834:	a808      	add	r0, sp, #32
    d836:	f010 f8e9 	bl	1da0c <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d83a:	2107      	movs	r1, #7
    d83c:	8830      	ldrh	r0, [r6, #0]
    d83e:	f010 fb0d 	bl	1de5c <bt_hci_cmd_complete_create>
    d842:	2107      	movs	r1, #7
    d844:	4603      	mov	r3, r0
    d846:	3008      	adds	r0, #8
    d848:	9307      	str	r3, [sp, #28]
    d84a:	f012 fa3e 	bl	1fcca <net_buf_simple_add>
    d84e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d850:	1c41      	adds	r1, r0, #1
    d852:	a808      	add	r0, sp, #32
    d854:	f007 ffea 	bl	1582c <ll_rl_crpa_get>
    d858:	7020      	strb	r0, [r4, #0]
	return evt;
    d85a:	9d07      	ldr	r5, [sp, #28]
    d85c:	e564      	b.n	d328 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d85e:	2102      	movs	r1, #2
    d860:	f010 fafc 	bl	1de5c <bt_hci_cmd_complete_create>
    d864:	2102      	movs	r1, #2
    d866:	4603      	mov	r3, r0
    d868:	3008      	adds	r0, #8
    d86a:	9307      	str	r3, [sp, #28]
    d86c:	f012 fa2d 	bl	1fcca <net_buf_simple_add>
    d870:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d872:	f007 fea3 	bl	155bc <ll_rl_size_get>
	rp->status = 0x00;
    d876:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    d878:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d87a:	7023      	strb	r3, [r4, #0]
	return evt;
    d87c:	9d07      	ldr	r5, [sp, #28]
    d87e:	e553      	b.n	d328 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d880:	2109      	movs	r1, #9
    d882:	f010 faeb 	bl	1de5c <bt_hci_cmd_complete_create>
    d886:	2109      	movs	r1, #9
    d888:	4603      	mov	r3, r0
    d88a:	3008      	adds	r0, #8
    d88c:	9307      	str	r3, [sp, #28]
    d88e:	f012 fa1c 	bl	1fcca <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d892:	ab08      	add	r3, sp, #32
    d894:	4604      	mov	r4, r0
    d896:	f10d 021a 	add.w	r2, sp, #26
    d89a:	a906      	add	r1, sp, #24
    d89c:	f10d 0016 	add.w	r0, sp, #22
    d8a0:	f003 fd68 	bl	11374 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d8a4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d8a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    d8ac:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d8b0:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    d8b4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d8b8:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    d8bc:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d8be:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d8c2:	7022      	strb	r2, [r4, #0]
	return evt;
    d8c4:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d8c6:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    d8ca:	e52d      	b.n	d328 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    d8cc:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
    d8ce:	8818      	ldrh	r0, [r3, #0]
    d8d0:	f008 f82e 	bl	15930 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    d8d4:	8830      	ldrh	r0, [r6, #0]
    d8d6:	2101      	movs	r1, #1
    d8d8:	e62c      	b.n	d534 <hci_cmd_handle+0x278>
    d8da:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
    d8dc:	4bbe      	ldr	r3, [pc, #760]	; (dbd8 <hci_cmd_handle+0x91c>)
    d8de:	6811      	ldr	r1, [r2, #0]
    d8e0:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d8e2:	6019      	str	r1, [r3, #0]
    d8e4:	e624      	b.n	d530 <hci_cmd_handle+0x274>
		le_set_adv_param(cmd, evt);
    d8e6:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    d8e8:	7ba5      	ldrb	r5, [r4, #14]
    d8ea:	79a3      	ldrb	r3, [r4, #6]
    d8ec:	7962      	ldrb	r2, [r4, #5]
    d8ee:	7921      	ldrb	r1, [r4, #4]
    d8f0:	8820      	ldrh	r0, [r4, #0]
    d8f2:	9502      	str	r5, [sp, #8]
    d8f4:	7b65      	ldrb	r5, [r4, #13]
    d8f6:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    d8f8:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    d8fa:	9400      	str	r4, [sp, #0]
    d8fc:	f002 fa9a 	bl	fe34 <ll_adv_params_set>
    d900:	e6f1      	b.n	d6e6 <hci_cmd_handle+0x42a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    d902:	68a9      	ldr	r1, [r5, #8]
    d904:	2001      	movs	r0, #1
    d906:	f7ff fa09 	bl	cd1c <ll_addr_set>
    d90a:	e6ec      	b.n	d6e6 <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d90c:	2109      	movs	r1, #9
    d90e:	f010 faa5 	bl	1de5c <bt_hci_cmd_complete_create>
    d912:	2109      	movs	r1, #9
    d914:	4603      	mov	r3, r0
    d916:	3008      	adds	r0, #8
    d918:	9307      	str	r3, [sp, #28]
    d91a:	f012 f9d6 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d91e:	2100      	movs	r1, #0
    d920:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d922:	2208      	movs	r2, #8
	rp->status = 0x00;
    d924:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d928:	f010 f87b 	bl	1da22 <memset>
	sys_put_le64(ll_feat_get(), rp->features);
    d92c:	f000 fdea 	bl	e504 <ll_feat_get>
	sys_put_le16(val >> 16, &dst[2]);
    d930:	0c03      	lsrs	r3, r0, #16
	dst[1] = val >> 8;
    d932:	f3c0 2507 	ubfx	r5, r0, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    d936:	0c0a      	lsrs	r2, r1, #16
	dst[0] = val;
    d938:	70e3      	strb	r3, [r4, #3]
	dst[1] = val >> 8;
    d93a:	0a1b      	lsrs	r3, r3, #8
	dst[0] = val;
    d93c:	7060      	strb	r0, [r4, #1]
	dst[1] = val >> 8;
    d93e:	70a5      	strb	r5, [r4, #2]
    d940:	f3c1 2007 	ubfx	r0, r1, #8, #8
    d944:	7123      	strb	r3, [r4, #4]
    d946:	0a13      	lsrs	r3, r2, #8
	return evt;
    d948:	9d07      	ldr	r5, [sp, #28]
	dst[0] = val;
    d94a:	7161      	strb	r1, [r4, #5]
	dst[1] = val >> 8;
    d94c:	71a0      	strb	r0, [r4, #6]
	dst[0] = val;
    d94e:	71e2      	strb	r2, [r4, #7]
	dst[1] = val >> 8;
    d950:	7223      	strb	r3, [r4, #8]
	if (err == -EINVAL) {
    d952:	e4e9      	b.n	d328 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d954:	2104      	movs	r1, #4
    d956:	f010 fa81 	bl	1de5c <bt_hci_cmd_complete_create>
    d95a:	2104      	movs	r1, #4
    d95c:	4603      	mov	r3, r0
    d95e:	3008      	adds	r0, #8
    d960:	9307      	str	r3, [sp, #28]
    d962:	f012 f9b2 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d966:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    d968:	2103      	movs	r1, #3
	rp->status = 0x00;
    d96a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    d96c:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_BUF_ACL_TX_COUNT;
    d96e:	70c1      	strb	r1, [r0, #3]
	return evt;
    d970:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_BUF_ACL_TX_SIZE);
    d972:	7042      	strb	r2, [r0, #1]
    d974:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    d976:	e4d7      	b.n	d328 <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
    d978:	68a8      	ldr	r0, [r5, #8]
    d97a:	f007 fd8d 	bl	15498 <ll_wl_remove>
    d97e:	e6b2      	b.n	d6e6 <hci_cmd_handle+0x42a>
	status = ll_wl_add(&cmd->addr);
    d980:	68a8      	ldr	r0, [r5, #8]
    d982:	f007 fce9 	bl	15358 <ll_wl_add>
    d986:	e6ae      	b.n	d6e6 <hci_cmd_handle+0x42a>
	status = ll_wl_clear();
    d988:	f007 fcbc 	bl	15304 <ll_wl_clear>
    d98c:	e6ab      	b.n	d6e6 <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d98e:	2102      	movs	r1, #2
    d990:	f010 fa64 	bl	1de5c <bt_hci_cmd_complete_create>
    d994:	2102      	movs	r1, #2
    d996:	4603      	mov	r3, r0
    d998:	3008      	adds	r0, #8
    d99a:	9307      	str	r3, [sp, #28]
    d99c:	f012 f995 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d9a0:	2300      	movs	r3, #0
    d9a2:	7003      	strb	r3, [r0, #0]
    d9a4:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    d9a6:	f007 fcab 	bl	15300 <ll_wl_size_get>
    d9aa:	7060      	strb	r0, [r4, #1]
	return evt;
    d9ac:	9d07      	ldr	r5, [sp, #28]
    d9ae:	e4bb      	b.n	d328 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
    d9b0:	68ab      	ldr	r3, [r5, #8]
    d9b2:	7818      	ldrb	r0, [r3, #0]
    d9b4:	f7f2 ffbc 	bl	930 <ll_adv_enable>
    d9b8:	e695      	b.n	d6e6 <hci_cmd_handle+0x42a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    d9ba:	68a9      	ldr	r1, [r5, #8]
    d9bc:	f811 0b01 	ldrb.w	r0, [r1], #1
    d9c0:	f002 fc7e 	bl	102c0 <ll_adv_scan_rsp_set>
    d9c4:	e68f      	b.n	d6e6 <hci_cmd_handle+0x42a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    d9c6:	68a9      	ldr	r1, [r5, #8]
    d9c8:	f811 0b01 	ldrb.w	r0, [r1], #1
    d9cc:	f002 fc2e 	bl	1022c <ll_adv_data_set>
    d9d0:	e689      	b.n	d6e6 <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    d9d2:	2102      	movs	r1, #2
    d9d4:	f010 fa42 	bl	1de5c <bt_hci_cmd_complete_create>
    d9d8:	2102      	movs	r1, #2
    d9da:	4603      	mov	r3, r0
    d9dc:	3008      	adds	r0, #8
    d9de:	9307      	str	r3, [sp, #28]
    d9e0:	f012 f973 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    d9e4:	2300      	movs	r3, #0
    d9e6:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d9e8:	7043      	strb	r3, [r0, #1]
	return evt;
    d9ea:	9d07      	ldr	r5, [sp, #28]
    d9ec:	e49c      	b.n	d328 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
    d9ee:	f007 fde7 	bl	155c0 <ll_rl_clear>
    d9f2:	e678      	b.n	d6e6 <hci_cmd_handle+0x42a>
	status = ll_rl_remove(&cmd->peer_id_addr);
    d9f4:	68a8      	ldr	r0, [r5, #8]
    d9f6:	f007 fe21 	bl	1563c <ll_rl_remove>
    d9fa:	e674      	b.n	d6e6 <hci_cmd_handle+0x42a>
		le_add_dev_to_rl(cmd, evt);
    d9fc:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d9fe:	f100 0217 	add.w	r2, r0, #23
    da02:	1dc1      	adds	r1, r0, #7
    da04:	f008 f9ac 	bl	15d60 <ll_rl_add>
    da08:	e66d      	b.n	d6e6 <hci_cmd_handle+0x42a>
		le_write_default_data_len(cmd, evt);
    da0a:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    da0c:	8859      	ldrh	r1, [r3, #2]
    da0e:	8818      	ldrh	r0, [r3, #0]
    da10:	f003 fca6 	bl	11360 <ll_length_default_set>
    da14:	e667      	b.n	d6e6 <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    da16:	2105      	movs	r1, #5
    da18:	f010 fa20 	bl	1de5c <bt_hci_cmd_complete_create>
    da1c:	2105      	movs	r1, #5
    da1e:	4603      	mov	r3, r0
    da20:	3008      	adds	r0, #8
    da22:	9307      	str	r3, [sp, #28]
    da24:	f012 f951 	bl	1fcca <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    da28:	a908      	add	r1, sp, #32
    da2a:	4604      	mov	r4, r0
    da2c:	f10d 001a 	add.w	r0, sp, #26
    da30:	f003 fc8a 	bl	11348 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    da34:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    da38:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    da3c:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    da3e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    da42:	7022      	strb	r2, [r4, #0]
	return evt;
    da44:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    da46:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    da4a:	e46d      	b.n	d328 <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
    da4c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da4e:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    da50:	889a      	ldrh	r2, [r3, #4]
    da52:	8859      	ldrh	r1, [r3, #2]
    da54:	b2b8      	uxth	r0, r7
    da56:	f003 fc23 	bl	112a0 <ll_length_req_send>
    da5a:	e581      	b.n	d560 <hci_cmd_handle+0x2a4>
		le_conn_param_req_neg_reply(cmd, evt);
    da5c:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    da5e:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
    da60:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    da62:	7892      	ldrb	r2, [r2, #2]
    da64:	9300      	str	r3, [sp, #0]
    da66:	e9cd 3301 	strd	r3, r3, [sp, #4]
    da6a:	2102      	movs	r1, #2
    da6c:	b2a0      	uxth	r0, r4
    da6e:	f003 facd 	bl	1100c <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    da72:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    da74:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    da76:	8830      	ldrh	r0, [r6, #0]
    da78:	f010 f9f0 	bl	1de5c <bt_hci_cmd_complete_create>
    da7c:	2103      	movs	r1, #3
    da7e:	4603      	mov	r3, r0
    da80:	3008      	adds	r0, #8
    da82:	9307      	str	r3, [sp, #28]
    da84:	f012 f921 	bl	1fcca <net_buf_simple_add>
	rp->status = status;
    da88:	7005      	strb	r5, [r0, #0]
	return evt;
    da8a:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    da8c:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
    da90:	e44a      	b.n	d328 <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
    da92:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    da94:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    da96:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    da98:	8853      	ldrh	r3, [r2, #2]
    da9a:	9102      	str	r1, [sp, #8]
    da9c:	88d1      	ldrh	r1, [r2, #6]
    da9e:	9101      	str	r1, [sp, #4]
    daa0:	8891      	ldrh	r1, [r2, #4]
    daa2:	9100      	str	r1, [sp, #0]
    daa4:	2200      	movs	r2, #0
    daa6:	e7e0      	b.n	da6a <hci_cmd_handle+0x7ae>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    daa8:	2109      	movs	r1, #9
    daaa:	f010 f9d7 	bl	1de5c <bt_hci_cmd_complete_create>
    daae:	2109      	movs	r1, #9
    dab0:	4603      	mov	r3, r0
    dab2:	3008      	adds	r0, #8
    dab4:	9307      	str	r3, [sp, #28]
    dab6:	f012 f908 	bl	1fcca <net_buf_simple_add>
	dst[0] = val;
    daba:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    dabc:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    dabe:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    dac0:	2230      	movs	r2, #48	; 0x30
    dac2:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    dac4:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    dac6:	70c2      	strb	r2, [r0, #3]
    dac8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
    daca:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    dacc:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    dace:	2201      	movs	r2, #1
	return evt;
    dad0:	9d07      	ldr	r5, [sp, #28]
    dad2:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    dad4:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    dad6:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    dad8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    dada:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    dadc:	e424      	b.n	d328 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
    dade:	68ab      	ldr	r3, [r5, #8]
    dae0:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    dae2:	2200      	movs	r2, #0
    dae4:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    dae6:	b2b8      	uxth	r0, r7
    dae8:	f007 fa92 	bl	15010 <ll_start_enc_req_send>
    daec:	e538      	b.n	d560 <hci_cmd_handle+0x2a4>
	handle = sys_le16_to_cpu(cmd->handle);
    daee:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    daf0:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
    daf2:	f832 7b02 	ldrh.w	r7, [r2], #2
    daf6:	e7f6      	b.n	dae6 <hci_cmd_handle+0x82a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    daf8:	2109      	movs	r1, #9
    dafa:	f010 f9af 	bl	1de5c <bt_hci_cmd_complete_create>
    dafe:	2109      	movs	r1, #9
    db00:	4603      	mov	r3, r0
    db02:	3008      	adds	r0, #8
    db04:	9307      	str	r3, [sp, #28]
    db06:	f012 f8e0 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    db0a:	2300      	movs	r3, #0
    db0c:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    db10:	2108      	movs	r1, #8
    db12:	f008 fcd7 	bl	164c4 <lll_csrand_get>
	return evt;
    db16:	9d07      	ldr	r5, [sp, #28]
    db18:	e406      	b.n	d328 <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
    db1a:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    db1c:	aa08      	add	r2, sp, #32
    db1e:	2300      	movs	r3, #0
    db20:	f100 0110 	add.w	r1, r0, #16
    db24:	f00a fa90 	bl	18048 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    db28:	2111      	movs	r1, #17
    db2a:	8830      	ldrh	r0, [r6, #0]
    db2c:	f010 f996 	bl	1de5c <bt_hci_cmd_complete_create>
    db30:	2111      	movs	r1, #17
    db32:	4603      	mov	r3, r0
    db34:	3008      	adds	r0, #8
    db36:	9307      	str	r3, [sp, #28]
    db38:	f012 f8c7 	bl	1fcca <net_buf_simple_add>
	rp->status = 0x00;
    db3c:	2300      	movs	r3, #0
    db3e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    db42:	2210      	movs	r2, #16
    db44:	a908      	add	r1, sp, #32
    db46:	f00f ff61 	bl	1da0c <memcpy>
	return evt;
    db4a:	9d07      	ldr	r5, [sp, #28]
    db4c:	f7ff bbec 	b.w	d328 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
    db50:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
    db52:	8818      	ldrh	r0, [r3, #0]
    db54:	f003 fb58 	bl	11208 <ll_feature_req_send>
    db58:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    db5a:	8830      	ldrh	r0, [r6, #0]
    db5c:	f010 f990 	bl	1de80 <bt_hci_cmd_status_create>
    db60:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    db62:	f7ff bbe1 	b.w	d328 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
    db66:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    db68:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
    db6a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    db6c:	f010 f976 	bl	1de5c <bt_hci_cmd_complete_create>
    db70:	2108      	movs	r1, #8
    db72:	4603      	mov	r3, r0
    db74:	4408      	add	r0, r1
    db76:	9307      	str	r3, [sp, #28]
    db78:	f012 f8a7 	bl	1fcca <net_buf_simple_add>
    db7c:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    db7e:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    db80:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
    db82:	f003 fad7 	bl	11134 <ll_chm_get>
	rp->status = status;
    db86:	7020      	strb	r0, [r4, #0]
	return evt;
    db88:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
    db8a:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
    db8e:	f7ff bbcb 	b.w	d328 <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
    db92:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    db94:	890a      	ldrh	r2, [r1, #8]
    db96:	884b      	ldrh	r3, [r1, #2]
    db98:	8808      	ldrh	r0, [r1, #0]
    db9a:	9202      	str	r2, [sp, #8]
    db9c:	88ca      	ldrh	r2, [r1, #6]
    db9e:	9201      	str	r2, [sp, #4]
    dba0:	8889      	ldrh	r1, [r1, #4]
    dba2:	9100      	str	r1, [sp, #0]
    dba4:	2200      	movs	r2, #0
    dba6:	4611      	mov	r1, r2
    dba8:	f003 fa30 	bl	1100c <ll_conn_update>
    dbac:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    dbae:	8830      	ldrh	r0, [r6, #0]
    dbb0:	f010 f966 	bl	1de80 <bt_hci_cmd_status_create>
    dbb4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    dbb6:	f7ff bbb7 	b.w	d328 <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
    dbba:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    dbbc:	7899      	ldrb	r1, [r3, #2]
    dbbe:	8818      	ldrh	r0, [r3, #0]
    dbc0:	f003 fad8 	bl	11174 <ll_terminate_ind_send>
    dbc4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    dbc6:	8830      	ldrh	r0, [r6, #0]
    dbc8:	f010 f95a 	bl	1de80 <bt_hci_cmd_status_create>
    dbcc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    dbce:	f7ff bbab 	b.w	d328 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    dbd2:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    dbd4:	4b01      	ldr	r3, [pc, #4]	; (dbdc <hci_cmd_handle+0x920>)
    dbd6:	e682      	b.n	d8de <hci_cmd_handle+0x622>
    dbd8:	20000178 	.word	0x20000178
    dbdc:	20001018 	.word	0x20001018
	event_mask = DEFAULT_EVENT_MASK;
    dbe0:	4b24      	ldr	r3, [pc, #144]	; (dc74 <hci_cmd_handle+0x9b8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    dbe2:	4a25      	ldr	r2, [pc, #148]	; (dc78 <hci_cmd_handle+0x9bc>)
	event_mask = DEFAULT_EVENT_MASK;
    dbe4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    dbe8:	f641 71ff 	movw	r1, #8191	; 0x1fff
    dbec:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    dbf0:	4b22      	ldr	r3, [pc, #136]	; (dc7c <hci_cmd_handle+0x9c0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    dbf2:	2000      	movs	r0, #0
    dbf4:	2100      	movs	r1, #0
    dbf6:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    dbfa:	201f      	movs	r0, #31
    dbfc:	2100      	movs	r1, #0
    dbfe:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
    dc02:	f001 f839 	bl	ec78 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    dc06:	2101      	movs	r1, #1
    dc08:	8830      	ldrh	r0, [r6, #0]
    dc0a:	f010 f927 	bl	1de5c <bt_hci_cmd_complete_create>
    dc0e:	2101      	movs	r1, #1
    dc10:	4605      	mov	r5, r0
    dc12:	3008      	adds	r0, #8
    dc14:	f012 f859 	bl	1fcca <net_buf_simple_add>
	conn_count = 0U;
    dc18:	4a19      	ldr	r2, [pc, #100]	; (dc80 <hci_cmd_handle+0x9c4>)
	ccst->status = status;
    dc1a:	2300      	movs	r3, #0
    dc1c:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
    dc1e:	6013      	str	r3, [r2, #0]
}
    dc20:	f7ff bb82 	b.w	d328 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
    dc24:	68ab      	ldr	r3, [r5, #8]
    dc26:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    dc28:	a908      	add	r1, sp, #32
    dc2a:	b2a8      	uxth	r0, r5
    dc2c:	f003 fc28 	bl	11480 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    dc30:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    dc32:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    dc34:	8830      	ldrh	r0, [r6, #0]
    dc36:	f010 f911 	bl	1de5c <bt_hci_cmd_complete_create>
    dc3a:	2105      	movs	r1, #5
    dc3c:	4603      	mov	r3, r0
    dc3e:	3008      	adds	r0, #8
    dc40:	9307      	str	r3, [sp, #28]
    dc42:	f012 f842 	bl	1fcca <net_buf_simple_add>
	rp->status = status;
    dc46:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    dc48:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    dc4c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
    dc50:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    dc52:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    dc56:	f7ff bb67 	b.w	d328 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
    dc5a:	2112      	movs	r1, #18
    dc5c:	f010 f910 	bl	1de80 <bt_hci_cmd_status_create>
    dc60:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    dc62:	f7ff bb61 	b.w	d328 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
    dc66:	2111      	movs	r1, #17
    dc68:	f010 f90a 	bl	1de80 <bt_hci_cmd_status_create>
    dc6c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
    dc6e:	f7ff bb5b 	b.w	d328 <hci_cmd_handle+0x6c>
    dc72:	bf00      	nop
    dc74:	20000170 	.word	0x20000170
    dc78:	20001018 	.word	0x20001018
    dc7c:	20000178 	.word	0x20000178
    dc80:	200017e4 	.word	0x200017e4

0000dc84 <hci_acl_handle>:
{
    dc84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
    dc88:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    dc8a:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    dc8c:	2b03      	cmp	r3, #3
	*evt = NULL;
    dc8e:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    dc90:	d944      	bls.n	dd1c <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
    dc92:	4605      	mov	r5, r0
    dc94:	4688      	mov	r8, r1
    dc96:	3008      	adds	r0, #8
    dc98:	2104      	movs	r1, #4
    dc9a:	f012 f83d 	bl	1fd18 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    dc9e:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    dca0:	8846      	ldrh	r6, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    dca2:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
    dca6:	42b3      	cmp	r3, r6
    dca8:	d349      	bcc.n	dd3e <hci_acl_handle+0xba>
	if (len > CONFIG_BT_BUF_ACL_TX_SIZE) {
    dcaa:	2e1b      	cmp	r6, #27
    dcac:	d843      	bhi.n	dd36 <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
    dcae:	f003 f955 	bl	10f5c <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    dcb2:	ea4f 3719 	mov.w	r7, r9, lsr #12
	if (!node_tx) {
    dcb6:	4604      	mov	r4, r0
    dcb8:	2800      	cmp	r0, #0
    dcba:	d044      	beq.n	dd46 <hci_acl_handle+0xc2>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    dcbc:	08bb      	lsrs	r3, r7, #2
    dcbe:	d102      	bne.n	dcc6 <hci_acl_handle+0x42>
	switch (bt_acl_flags_pb(flags)) {
    dcc0:	b337      	cbz	r7, dd10 <hci_acl_handle+0x8c>
    dcc2:	2f01      	cmp	r7, #1
    dcc4:	d003      	beq.n	dcce <hci_acl_handle+0x4a>
		return -EINVAL;
    dcc6:	f06f 0015 	mvn.w	r0, #21
}
    dcca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    dcce:	7903      	ldrb	r3, [r0, #4]
    dcd0:	f367 0301 	bfi	r3, r7, #0, #2
    dcd4:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
    dcd6:	7166      	strb	r6, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    dcd8:	68a9      	ldr	r1, [r5, #8]
    dcda:	4632      	mov	r2, r6
    dcdc:	1de0      	adds	r0, r4, #7
    dcde:	f00f fe95 	bl	1da0c <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    dce2:	4621      	mov	r1, r4
    dce4:	f3c9 000b 	ubfx	r0, r9, #0, #12
    dce8:	f003 f944 	bl	10f74 <ll_tx_mem_enqueue>
    dcec:	2800      	cmp	r0, #0
    dcee:	d0ec      	beq.n	dcca <hci_acl_handle+0x46>
    dcf0:	4b2b      	ldr	r3, [pc, #172]	; (dda0 <hci_acl_handle+0x11c>)
    dcf2:	492c      	ldr	r1, [pc, #176]	; (dda4 <hci_acl_handle+0x120>)
		BT_ERR("Invalid Tx Enqueue");
    dcf4:	482c      	ldr	r0, [pc, #176]	; (dda8 <hci_acl_handle+0x124>)
    dcf6:	1ac9      	subs	r1, r1, r3
    dcf8:	08c9      	lsrs	r1, r1, #3
    dcfa:	0189      	lsls	r1, r1, #6
    dcfc:	f041 0101 	orr.w	r1, r1, #1
    dd00:	f00e f977 	bl	1bff2 <log_0>
		ll_tx_mem_release(node_tx);
    dd04:	4620      	mov	r0, r4
    dd06:	f003 f92f 	bl	10f68 <ll_tx_mem_release>
		return -EINVAL;
    dd0a:	f06f 0015 	mvn.w	r0, #21
    dd0e:	e7dc      	b.n	dcca <hci_acl_handle+0x46>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    dd10:	7903      	ldrb	r3, [r0, #4]
    dd12:	2202      	movs	r2, #2
    dd14:	f362 0301 	bfi	r3, r2, #0, #2
    dd18:	7103      	strb	r3, [r0, #4]
		break;
    dd1a:	e7dc      	b.n	dcd6 <hci_acl_handle+0x52>
    dd1c:	4921      	ldr	r1, [pc, #132]	; (dda4 <hci_acl_handle+0x120>)
    dd1e:	4b20      	ldr	r3, [pc, #128]	; (dda0 <hci_acl_handle+0x11c>)
		BT_ERR("No HCI ACL header");
    dd20:	4822      	ldr	r0, [pc, #136]	; (ddac <hci_acl_handle+0x128>)
    dd22:	1ac9      	subs	r1, r1, r3
    dd24:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
    dd26:	0189      	lsls	r1, r1, #6
    dd28:	f041 0101 	orr.w	r1, r1, #1
    dd2c:	f00e f961 	bl	1bff2 <log_0>
		return -EINVAL;
    dd30:	f06f 0015 	mvn.w	r0, #21
    dd34:	e7c9      	b.n	dcca <hci_acl_handle+0x46>
    dd36:	491b      	ldr	r1, [pc, #108]	; (dda4 <hci_acl_handle+0x120>)
    dd38:	4b19      	ldr	r3, [pc, #100]	; (dda0 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL Data length");
    dd3a:	481d      	ldr	r0, [pc, #116]	; (ddb0 <hci_acl_handle+0x12c>)
    dd3c:	e7f1      	b.n	dd22 <hci_acl_handle+0x9e>
    dd3e:	4919      	ldr	r1, [pc, #100]	; (dda4 <hci_acl_handle+0x120>)
    dd40:	4b17      	ldr	r3, [pc, #92]	; (dda0 <hci_acl_handle+0x11c>)
		BT_ERR("Invalid HCI ACL packet length");
    dd42:	481c      	ldr	r0, [pc, #112]	; (ddb4 <hci_acl_handle+0x130>)
    dd44:	e7ed      	b.n	dd22 <hci_acl_handle+0x9e>
    dd46:	4b16      	ldr	r3, [pc, #88]	; (dda0 <hci_acl_handle+0x11c>)
    dd48:	4916      	ldr	r1, [pc, #88]	; (dda4 <hci_acl_handle+0x120>)
		BT_ERR("Tx Buffer Overflow");
    dd4a:	481b      	ldr	r0, [pc, #108]	; (ddb8 <hci_acl_handle+0x134>)
    dd4c:	1ac9      	subs	r1, r1, r3
    dd4e:	08c9      	lsrs	r1, r1, #3
    dd50:	0189      	lsls	r1, r1, #6
    dd52:	f041 0101 	orr.w	r1, r1, #1
    dd56:	f00e f94c 	bl	1bff2 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    dd5a:	4b18      	ldr	r3, [pc, #96]	; (ddbc <hci_acl_handle+0x138>)
    dd5c:	681b      	ldr	r3, [r3, #0]
    dd5e:	019b      	lsls	r3, r3, #6
    dd60:	d402      	bmi.n	dd68 <hci_acl_handle+0xe4>
		return -ENOBUFS;
    dd62:	f06f 0068 	mvn.w	r0, #104	; 0x68
    dd66:	e7b0      	b.n	dcca <hci_acl_handle+0x46>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    dd68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    dd6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    dd70:	2001      	movs	r0, #1
    dd72:	f7f6 fdc7 	bl	4904 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
    dd76:	2102      	movs	r1, #2
    dd78:	f8c8 0000 	str.w	r0, [r8]
    dd7c:	3008      	adds	r0, #8
    dd7e:	f011 ffa4 	bl	1fcca <net_buf_simple_add>
	hdr->len = len;
    dd82:	2401      	movs	r4, #1
	hdr->evt = evt;
    dd84:	221a      	movs	r2, #26
    dd86:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    dd88:	7044      	strb	r4, [r0, #1]
    dd8a:	f8d8 0000 	ldr.w	r0, [r8]
    dd8e:	4621      	mov	r1, r4
    dd90:	3008      	adds	r0, #8
    dd92:	f011 ff9a 	bl	1fcca <net_buf_simple_add>
    dd96:	4603      	mov	r3, r0
		return -ENOBUFS;
    dd98:	f06f 0068 	mvn.w	r0, #104	; 0x68
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    dd9c:	701c      	strb	r4, [r3, #0]
    dd9e:	e794      	b.n	dcca <hci_acl_handle+0x46>
    dda0:	00020e00 	.word	0x00020e00
    dda4:	00020e48 	.word	0x00020e48
    dda8:	000219c0 	.word	0x000219c0
    ddac:	0002195c 	.word	0x0002195c
    ddb0:	00021990 	.word	0x00021990
    ddb4:	00021970 	.word	0x00021970
    ddb8:	000219ac 	.word	0x000219ac
    ddbc:	20000170 	.word	0x20000170

0000ddc0 <hci_disconn_complete_encode>:
{
    ddc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    ddc2:	4b0e      	ldr	r3, [pc, #56]	; (ddfc <hci_disconn_complete_encode+0x3c>)
    ddc4:	681b      	ldr	r3, [r3, #0]
    ddc6:	06db      	lsls	r3, r3, #27
    ddc8:	d400      	bmi.n	ddcc <hci_disconn_complete_encode+0xc>
}
    ddca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddcc:	f102 0408 	add.w	r4, r2, #8
    ddd0:	4605      	mov	r5, r0
    ddd2:	460e      	mov	r6, r1
    ddd4:	4620      	mov	r0, r4
    ddd6:	2102      	movs	r1, #2
    ddd8:	f011 ff77 	bl	1fcca <net_buf_simple_add>
    dddc:	4603      	mov	r3, r0
	hdr->len = len;
    ddde:	2104      	movs	r1, #4
	hdr->evt = evt;
    dde0:	2205      	movs	r2, #5
	hdr->len = len;
    dde2:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
    dde4:	701a      	strb	r2, [r3, #0]
    dde6:	4620      	mov	r0, r4
    dde8:	f011 ff6f 	bl	1fcca <net_buf_simple_add>
    ddec:	2700      	movs	r7, #0
	ep->status = 0x00;
    ddee:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ddf0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
    ddf4:	782b      	ldrb	r3, [r5, #0]
    ddf6:	70c3      	strb	r3, [r0, #3]
}
    ddf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ddfa:	bf00      	nop
    ddfc:	20000170 	.word	0x20000170

0000de00 <hci_disconn_complete_process>:
	conn_count--;
    de00:	4a02      	ldr	r2, [pc, #8]	; (de0c <hci_disconn_complete_process+0xc>)
    de02:	6813      	ldr	r3, [r2, #0]
    de04:	3b01      	subs	r3, #1
    de06:	6013      	str	r3, [r2, #0]
}
    de08:	4770      	bx	lr
    de0a:	bf00      	nop
    de0c:	200017e4 	.word	0x200017e4

0000de10 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    de10:	7f03      	ldrb	r3, [r0, #28]
    de12:	f003 0303 	and.w	r3, r3, #3
    de16:	3b01      	subs	r3, #1
    de18:	2b01      	cmp	r3, #1
{
    de1a:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    de1c:	d90d      	bls.n	de3a <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    de1e:	4a16      	ldr	r2, [pc, #88]	; (de78 <hci_acl_encode+0x68>)
    de20:	4916      	ldr	r1, [pc, #88]	; (de7c <hci_acl_encode+0x6c>)
    de22:	4817      	ldr	r0, [pc, #92]	; (de80 <hci_acl_encode+0x70>)
    de24:	f641 03d8 	movw	r3, #6360	; 0x18d8
    de28:	f00d fca4 	bl	1b774 <printk>
    de2c:	4040      	eors	r0, r0
    de2e:	f380 8811 	msr	BASEPRI, r0
    de32:	f04f 0003 	mov.w	r0, #3
    de36:	df02      	svc	2
		break;
	}
}
    de38:	bd70      	pop	{r4, r5, r6, pc}
    de3a:	4604      	mov	r4, r0
    de3c:	f101 0508 	add.w	r5, r1, #8
    de40:	4628      	mov	r0, r5
    de42:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    de44:	88e6      	ldrh	r6, [r4, #6]
    de46:	f011 ff40 	bl	1fcca <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    de4a:	7f23      	ldrb	r3, [r4, #28]
    de4c:	f003 0303 	and.w	r3, r3, #3
    de50:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    de52:	bf0c      	ite	eq
    de54:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    de58:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    de5c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    de5e:	7f61      	ldrb	r1, [r4, #29]
    de60:	8041      	strh	r1, [r0, #2]
    de62:	4628      	mov	r0, r5
    de64:	f011 ff31 	bl	1fcca <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    de68:	7f62      	ldrb	r2, [r4, #29]
    de6a:	f104 011f 	add.w	r1, r4, #31
}
    de6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    de72:	f00f bdcb 	b.w	1da0c <memcpy>
    de76:	bf00      	nop
    de78:	000219d4 	.word	0x000219d4
    de7c:	000218a4 	.word	0x000218a4
    de80:	0002180c 	.word	0x0002180c

0000de84 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    de88:	f890 c004 	ldrb.w	ip, [r0, #4]
    de8c:	f1bc 0f03 	cmp.w	ip, #3
{
    de90:	4604      	mov	r4, r0
    de92:	b088      	sub	sp, #32
    de94:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    de96:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    de9a:	d00f      	beq.n	debc <hci_evt_encode+0x38>
		encode_control(node_rx, pdu_data, buf);
    de9c:	f1ac 0c14 	sub.w	ip, ip, #20
    dea0:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
    dea2:	f1bc 0f06 	cmp.w	ip, #6
    dea6:	f200 82be 	bhi.w	e426 <hci_evt_encode+0x5a2>
    deaa:	e8df f01c 	tbh	[pc, ip, lsl #1]
    deae:	0022      	.short	0x0022
    deb0:	0083007c 	.word	0x0083007c
    deb4:	00c200ac 	.word	0x00c200ac
    deb8:	00f300d4 	.word	0x00f300d4
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
    debc:	7fe3      	ldrb	r3, [r4, #31]
    debe:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
    dec0:	3b03      	subs	r3, #3
    dec2:	2b12      	cmp	r3, #18
    dec4:	f200 8116 	bhi.w	e0f4 <hci_evt_encode+0x270>
    dec8:	e8df f013 	tbh	[pc, r3, lsl #1]
    decc:	011401e8 	.word	0x011401e8
    ded0:	02170114 	.word	0x02170114
    ded4:	01140177 	.word	0x01140177
    ded8:	01140189 	.word	0x01140189
    dedc:	01140114 	.word	0x01140114
    dee0:	011401a8 	.word	0x011401a8
    dee4:	011401c3 	.word	0x011401c3
    dee8:	01140114 	.word	0x01140114
    deec:	01220114 	.word	0x01220114
    def0:	0122      	.short	0x0122
	uint8_t status = cc->status;
    def2:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
    def4:	2f00      	cmp	r7, #0
    def6:	f000 8219 	beq.w	e32c <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    defa:	4bbd      	ldr	r3, [pc, #756]	; (e1f0 <hci_evt_encode+0x36c>)
    defc:	685b      	ldr	r3, [r3, #4]
    defe:	009a      	lsls	r2, r3, #2
    df00:	d54e      	bpl.n	dfa0 <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    df02:	4bbc      	ldr	r3, [pc, #752]	; (e1f4 <hci_evt_encode+0x370>)
    df04:	681b      	ldr	r3, [r3, #0]
    df06:	f240 2201 	movw	r2, #513	; 0x201
    df0a:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    df0c:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    df10:	d046      	beq.n	dfa0 <hci_evt_encode+0x11c>
	if (!status) {
    df12:	2f00      	cmp	r7, #0
    df14:	f040 821d 	bne.w	e352 <hci_evt_encode+0x4ce>
		conn_count++;
    df18:	4ab7      	ldr	r2, [pc, #732]	; (e1f8 <hci_evt_encode+0x374>)
    df1a:	6813      	ldr	r3, [r2, #0]
    df1c:	3301      	adds	r3, #1
    df1e:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    df20:	f1b8 0f00 	cmp.w	r8, #0
    df24:	f000 8232 	beq.w	e38c <hci_evt_encode+0x508>
    df28:	3508      	adds	r5, #8
    df2a:	2102      	movs	r1, #2
    df2c:	4628      	mov	r0, r5
    df2e:	f011 fecc 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    df32:	233e      	movs	r3, #62	; 0x3e
    df34:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    df36:	231f      	movs	r3, #31
    df38:	7043      	strb	r3, [r0, #1]
    df3a:	2101      	movs	r1, #1
    df3c:	4628      	mov	r0, r5
    df3e:	f011 fec4 	bl	1fcca <net_buf_simple_add>
    df42:	4603      	mov	r3, r0
	me->subevent = subevt;
    df44:	220a      	movs	r2, #10
    df46:	701a      	strb	r2, [r3, #0]
    df48:	4628      	mov	r0, r5
    df4a:	211e      	movs	r1, #30
    df4c:	f011 febd 	bl	1fcca <net_buf_simple_add>
		leecc->status = 0x00;
    df50:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    df52:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
    df56:	7f63      	ldrb	r3, [r4, #29]
    df58:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
    df5a:	7fa3      	ldrb	r3, [r4, #30]
    df5c:	7103      	strb	r3, [r0, #4]
    df5e:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
    df60:	2206      	movs	r2, #6
    df62:	f104 011f 	add.w	r1, r4, #31
    df66:	3005      	adds	r0, #5
    df68:	f00f fd50 	bl	1da0c <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
    df6c:	2206      	movs	r2, #6
    df6e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    df72:	f105 000b 	add.w	r0, r5, #11
    df76:	f00f fd49 	bl	1da0c <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
    df7a:	2206      	movs	r2, #6
    df7c:	f104 0125 	add.w	r1, r4, #37	; 0x25
    df80:	f105 0011 	add.w	r0, r5, #17
    df84:	f00f fd42 	bl	1da0c <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    df88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
    df8a:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
    df8c:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    df8e:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
    df92:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    df96:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
    df9a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    df9e:	776b      	strb	r3, [r5, #29]
	}
}
    dfa0:	b008      	add	sp, #32
    dfa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    dfa6:	460a      	mov	r2, r1
    dfa8:	4631      	mov	r1, r6
}
    dfaa:	b008      	add	sp, #32
    dfac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
    dfb0:	f7ff bf06 	b.w	ddc0 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dfb4:	4b8e      	ldr	r3, [pc, #568]	; (e1f0 <hci_evt_encode+0x36c>)
    dfb6:	685b      	ldr	r3, [r3, #4]
    dfb8:	009b      	lsls	r3, r3, #2
    dfba:	d5f1      	bpl.n	dfa0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    dfbc:	4b8d      	ldr	r3, [pc, #564]	; (e1f4 <hci_evt_encode+0x370>)
    dfbe:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dfc0:	075f      	lsls	r7, r3, #29
    dfc2:	d5ed      	bpl.n	dfa0 <hci_evt_encode+0x11c>
    dfc4:	3508      	adds	r5, #8
    dfc6:	2102      	movs	r1, #2
    dfc8:	4628      	mov	r0, r5
    dfca:	f011 fe7e 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    dfce:	233e      	movs	r3, #62	; 0x3e
    dfd0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    dfd2:	230a      	movs	r3, #10
    dfd4:	7043      	strb	r3, [r0, #1]
    dfd6:	2101      	movs	r1, #1
    dfd8:	4628      	mov	r0, r5
    dfda:	f011 fe76 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    dfde:	2303      	movs	r3, #3
    dfe0:	7003      	strb	r3, [r0, #0]
    dfe2:	2109      	movs	r1, #9
    dfe4:	4628      	mov	r0, r5
    dfe6:	f011 fe70 	bl	1fcca <net_buf_simple_add>
	sep->status = cu->status;
    dfea:	7f23      	ldrb	r3, [r4, #28]
    dfec:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    dfee:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    dff0:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    dff2:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    dff4:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    dff8:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    dffc:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    e000:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    e004:	e7cc      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    e006:	4b7a      	ldr	r3, [pc, #488]	; (e1f0 <hci_evt_encode+0x36c>)
    e008:	685b      	ldr	r3, [r3, #4]
    e00a:	0418      	lsls	r0, r3, #16
    e00c:	f04f 0400 	mov.w	r4, #0
    e010:	d5c6      	bpl.n	dfa0 <hci_evt_encode+0x11c>
    e012:	3508      	adds	r5, #8
    e014:	2102      	movs	r1, #2
    e016:	4628      	mov	r0, r5
    e018:	f011 fe57 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e01c:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
    e01e:	2103      	movs	r1, #3
	hdr->evt = evt;
    e020:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e022:	7041      	strb	r1, [r0, #1]
    e024:	4628      	mov	r0, r5
    e026:	f011 fe50 	bl	1fcca <net_buf_simple_add>
	ep->status = 0x00;
    e02a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e02c:	f8a0 6001 	strh.w	r6, [r0, #1]
    e030:	e7b6      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    e032:	4b72      	ldr	r3, [pc, #456]	; (e1fc <hci_evt_encode+0x378>)
    e034:	681b      	ldr	r3, [r3, #0]
    e036:	0219      	lsls	r1, r3, #8
    e038:	d5b2      	bpl.n	dfa0 <hci_evt_encode+0x11c>
    e03a:	3508      	adds	r5, #8
    e03c:	2102      	movs	r1, #2
    e03e:	4628      	mov	r0, r5
    e040:	f011 fe43 	bl	1fcca <net_buf_simple_add>
	hdr->len = len;
    e044:	2102      	movs	r1, #2
	hdr->evt = evt;
    e046:	2357      	movs	r3, #87	; 0x57
    e048:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e04a:	7041      	strb	r1, [r0, #1]
    e04c:	4628      	mov	r0, r5
    e04e:	f011 fe3c 	bl	1fcca <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    e052:	8006      	strh	r6, [r0, #0]
    e054:	e7a4      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e056:	4b66      	ldr	r3, [pc, #408]	; (e1f0 <hci_evt_encode+0x36c>)
    e058:	685b      	ldr	r3, [r3, #4]
    e05a:	009a      	lsls	r2, r3, #2
    e05c:	d5a0      	bpl.n	dfa0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    e05e:	4b65      	ldr	r3, [pc, #404]	; (e1f4 <hci_evt_encode+0x370>)
    e060:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e062:	031b      	lsls	r3, r3, #12
    e064:	d59c      	bpl.n	dfa0 <hci_evt_encode+0x11c>
    e066:	3508      	adds	r5, #8
    e068:	2102      	movs	r1, #2
    e06a:	4628      	mov	r0, r5
    e06c:	f011 fe2d 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e070:	233e      	movs	r3, #62	; 0x3e
    e072:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e074:	2304      	movs	r3, #4
    e076:	7043      	strb	r3, [r0, #1]
    e078:	2101      	movs	r1, #1
    e07a:	4628      	mov	r0, r5
    e07c:	f011 fe25 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e080:	2314      	movs	r3, #20
    e082:	7003      	strb	r3, [r0, #0]
    e084:	2103      	movs	r1, #3
    e086:	4628      	mov	r0, r5
    e088:	f011 fe1f 	bl	1fcca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    e08c:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    e08e:	7f23      	ldrb	r3, [r4, #28]
    e090:	7083      	strb	r3, [r0, #2]
    e092:	e785      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e094:	4b56      	ldr	r3, [pc, #344]	; (e1f0 <hci_evt_encode+0x36c>)
    e096:	685b      	ldr	r3, [r3, #4]
    e098:	009f      	lsls	r7, r3, #2
    e09a:	d503      	bpl.n	e0a4 <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e09c:	4b55      	ldr	r3, [pc, #340]	; (e1f4 <hci_evt_encode+0x370>)
    e09e:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0a0:	0518      	lsls	r0, r3, #20
    e0a2:	d45c      	bmi.n	e15e <hci_evt_encode+0x2da>
    e0a4:	7f62      	ldrb	r2, [r4, #29]
    e0a6:	7fa0      	ldrb	r0, [r4, #30]
    e0a8:	4955      	ldr	r1, [pc, #340]	; (e200 <hci_evt_encode+0x37c>)
    e0aa:	4b56      	ldr	r3, [pc, #344]	; (e204 <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
    e0ac:	7f24      	ldrb	r4, [r4, #28]
    e0ae:	2a00      	cmp	r2, #0
    e0b0:	fa92 f2a2 	rbit	r2, r2
    e0b4:	fab2 f282 	clz	r2, r2
    e0b8:	eba3 0301 	sub.w	r3, r3, r1
    e0bc:	bf08      	it	eq
    e0be:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    e0c2:	2800      	cmp	r0, #0
    e0c4:	fa90 f0a0 	rbit	r0, r0
    e0c8:	fab0 f080 	clz	r0, r0
    e0cc:	ea4f 03d3 	mov.w	r3, r3, lsr #3
    e0d0:	bf08      	it	eq
    e0d2:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
    e0d6:	1c51      	adds	r1, r2, #1
    e0d8:	3001      	adds	r0, #1
    e0da:	019b      	lsls	r3, r3, #6
    e0dc:	9007      	str	r0, [sp, #28]
    e0de:	9106      	str	r1, [sp, #24]
    e0e0:	4849      	ldr	r0, [pc, #292]	; (e208 <hci_evt_encode+0x384>)
    e0e2:	f043 0302 	orr.w	r3, r3, #2
    e0e6:	2204      	movs	r2, #4
    e0e8:	a904      	add	r1, sp, #16
    e0ea:	e9cd 6404 	strd	r6, r4, [sp, #16]
    e0ee:	f00d ffd6 	bl	1c09e <log_n>
		return;
    e0f2:	e755      	b.n	dfa0 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
    e0f4:	4a45      	ldr	r2, [pc, #276]	; (e20c <hci_evt_encode+0x388>)
    e0f6:	4946      	ldr	r1, [pc, #280]	; (e210 <hci_evt_encode+0x38c>)
    e0f8:	4846      	ldr	r0, [pc, #280]	; (e214 <hci_evt_encode+0x390>)
    e0fa:	f641 03ac 	movw	r3, #6316	; 0x18ac
    e0fe:	f00d fb39 	bl	1b774 <printk>
    e102:	4040      	eors	r0, r0
    e104:	f380 8811 	msr	BASEPRI, r0
    e108:	f04f 0003 	mov.w	r0, #3
    e10c:	df02      	svc	2
}
    e10e:	e747      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e110:	4b37      	ldr	r3, [pc, #220]	; (e1f0 <hci_evt_encode+0x36c>)
    e112:	685b      	ldr	r3, [r3, #4]
    e114:	009a      	lsls	r2, r3, #2
    e116:	f57f af43 	bpl.w	dfa0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    e11a:	4b36      	ldr	r3, [pc, #216]	; (e1f4 <hci_evt_encode+0x370>)
    e11c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e11e:	065b      	lsls	r3, r3, #25
    e120:	f57f af3e 	bpl.w	dfa0 <hci_evt_encode+0x11c>
    e124:	3508      	adds	r5, #8
    e126:	2102      	movs	r1, #2
    e128:	4628      	mov	r0, r5
    e12a:	f011 fdce 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e12e:	233e      	movs	r3, #62	; 0x3e
    e130:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e132:	230b      	movs	r3, #11
    e134:	7043      	strb	r3, [r0, #1]
    e136:	2101      	movs	r1, #1
    e138:	4628      	mov	r0, r5
    e13a:	f011 fdc6 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e13e:	2307      	movs	r3, #7
    e140:	7003      	strb	r3, [r0, #0]
    e142:	210a      	movs	r1, #10
    e144:	4628      	mov	r0, r5
    e146:	f011 fdc0 	bl	1fcca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    e14a:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    e14c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e14e:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    e150:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e152:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    e154:	8c23      	ldrh	r3, [r4, #32]
    e156:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    e158:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    e15a:	8103      	strh	r3, [r0, #8]
    e15c:	e720      	b.n	dfa0 <hci_evt_encode+0x11c>
    e15e:	3508      	adds	r5, #8
    e160:	2102      	movs	r1, #2
    e162:	4628      	mov	r0, r5
    e164:	f011 fdb1 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e168:	233e      	movs	r3, #62	; 0x3e
    e16a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e16c:	2306      	movs	r3, #6
    e16e:	7043      	strb	r3, [r0, #1]
    e170:	2101      	movs	r1, #1
    e172:	4628      	mov	r0, r5
    e174:	f011 fda9 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e178:	230c      	movs	r3, #12
    e17a:	7003      	strb	r3, [r0, #0]
    e17c:	2105      	movs	r1, #5
    e17e:	4628      	mov	r0, r5
    e180:	f011 fda3 	bl	1fcca <net_buf_simple_add>
	sep->status = pu->status;
    e184:	7f23      	ldrb	r3, [r4, #28]
    e186:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e188:	f8a0 6001 	strh.w	r6, [r0, #1]
    e18c:	7f62      	ldrb	r2, [r4, #29]
    e18e:	2a00      	cmp	r2, #0
    e190:	fa92 f3a2 	rbit	r3, r2
    e194:	fab3 f383 	clz	r3, r3
    e198:	bf08      	it	eq
    e19a:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e19e:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    e1a0:	70c3      	strb	r3, [r0, #3]
    e1a2:	7fa2      	ldrb	r2, [r4, #30]
    e1a4:	fa92 f3a2 	rbit	r3, r2
    e1a8:	2a00      	cmp	r2, #0
    e1aa:	fab3 f383 	clz	r3, r3
    e1ae:	bf08      	it	eq
    e1b0:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    e1b4:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    e1b6:	7103      	strb	r3, [r0, #4]
    e1b8:	e6f2      	b.n	dfa0 <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
    e1ba:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
    e1be:	290e      	cmp	r1, #14
    e1c0:	f000 8115 	beq.w	e3ee <hci_evt_encode+0x56a>
    e1c4:	4b0e      	ldr	r3, [pc, #56]	; (e200 <hci_evt_encode+0x37c>)
    e1c6:	4a0f      	ldr	r2, [pc, #60]	; (e204 <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e1c8:	4813      	ldr	r0, [pc, #76]	; (e218 <hci_evt_encode+0x394>)
    e1ca:	1ad2      	subs	r2, r2, r3
    e1cc:	08d2      	lsrs	r2, r2, #3
    e1ce:	0192      	lsls	r2, r2, #6
    e1d0:	f042 0202 	orr.w	r2, r2, #2
}
    e1d4:	b008      	add	sp, #32
    e1d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
    e1da:	f00d bf17 	b.w	1c00c <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e1de:	460b      	mov	r3, r1
    e1e0:	4632      	mov	r2, r6
    e1e2:	4601      	mov	r1, r0
    e1e4:	2000      	movs	r0, #0
}
    e1e6:	b008      	add	sp, #32
    e1e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e1ec:	f7fe bf70 	b.w	d0d0 <le_remote_feat_complete>
    e1f0:	20000170 	.word	0x20000170
    e1f4:	20000178 	.word	0x20000178
    e1f8:	200017e4 	.word	0x200017e4
    e1fc:	20001018 	.word	0x20001018
    e200:	00020e00 	.word	0x00020e00
    e204:	00020e48 	.word	0x00020e48
    e208:	00021a10 	.word	0x00021a10
    e20c:	000219d4 	.word	0x000219d4
    e210:	000218a4 	.word	0x000218a4
    e214:	0002180c 	.word	0x0002180c
    e218:	00021a3c 	.word	0x00021a3c
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    e21c:	4b89      	ldr	r3, [pc, #548]	; (e444 <hci_evt_encode+0x5c0>)
    e21e:	681b      	ldr	r3, [r3, #0]
    e220:	061f      	lsls	r7, r3, #24
    e222:	f57f aebd 	bpl.w	dfa0 <hci_evt_encode+0x11c>
    e226:	3508      	adds	r5, #8
    e228:	2102      	movs	r1, #2
    e22a:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
    e22c:	f894 4020 	ldrb.w	r4, [r4, #32]
    e230:	f011 fd4b 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e234:	2308      	movs	r3, #8
	hdr->len = len;
    e236:	2104      	movs	r1, #4
	hdr->evt = evt;
    e238:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e23a:	7041      	strb	r1, [r0, #1]
    e23c:	4628      	mov	r0, r5
    e23e:	f011 fd44 	bl	1fcca <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    e242:	fab4 f384 	clz	r3, r4
    e246:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    e248:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e24a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    e24e:	70c3      	strb	r3, [r0, #3]
    e250:	e6a6      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e252:	4b7c      	ldr	r3, [pc, #496]	; (e444 <hci_evt_encode+0x5c0>)
    e254:	685b      	ldr	r3, [r3, #4]
    e256:	0098      	lsls	r0, r3, #2
    e258:	d571      	bpl.n	e33e <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    e25a:	4b7b      	ldr	r3, [pc, #492]	; (e448 <hci_evt_encode+0x5c4>)
    e25c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e25e:	0699      	lsls	r1, r3, #26
    e260:	d56d      	bpl.n	e33e <hci_evt_encode+0x4ba>
    e262:	3508      	adds	r5, #8
    e264:	2102      	movs	r1, #2
    e266:	4628      	mov	r0, r5
    e268:	f011 fd2f 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e26c:	233e      	movs	r3, #62	; 0x3e
    e26e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e270:	230b      	movs	r3, #11
    e272:	7043      	strb	r3, [r0, #1]
    e274:	2101      	movs	r1, #1
    e276:	4628      	mov	r0, r5
    e278:	f011 fd27 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e27c:	2306      	movs	r3, #6
    e27e:	7003      	strb	r3, [r0, #0]
    e280:	210a      	movs	r1, #10
    e282:	4628      	mov	r0, r5
    e284:	f011 fd21 	bl	1fcca <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
    e288:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    e28a:	8c23      	ldrh	r3, [r4, #32]
    e28c:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    e28e:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    e290:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    e292:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    e294:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    e296:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    e298:	8103      	strh	r3, [r0, #8]
    e29a:	e681      	b.n	dfa0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e29c:	4b69      	ldr	r3, [pc, #420]	; (e444 <hci_evt_encode+0x5c0>)
    e29e:	685b      	ldr	r3, [r3, #4]
    e2a0:	0099      	lsls	r1, r3, #2
    e2a2:	f57f ae7d 	bpl.w	dfa0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    e2a6:	4b68      	ldr	r3, [pc, #416]	; (e448 <hci_evt_encode+0x5c4>)
    e2a8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e2aa:	06da      	lsls	r2, r3, #27
    e2ac:	f57f ae78 	bpl.w	dfa0 <hci_evt_encode+0x11c>
    e2b0:	3508      	adds	r5, #8
    e2b2:	2102      	movs	r1, #2
    e2b4:	4628      	mov	r0, r5
    e2b6:	f011 fd08 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e2ba:	233e      	movs	r3, #62	; 0x3e
    e2bc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e2be:	230d      	movs	r3, #13
    e2c0:	7043      	strb	r3, [r0, #1]
    e2c2:	2101      	movs	r1, #1
    e2c4:	4628      	mov	r0, r5
    e2c6:	f011 fd00 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e2ca:	2305      	movs	r3, #5
    e2cc:	7003      	strb	r3, [r0, #0]
    e2ce:	210c      	movs	r1, #12
    e2d0:	4628      	mov	r0, r5
    e2d2:	f011 fcfa 	bl	1fcca <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    e2d6:	f104 0120 	add.w	r1, r4, #32
    e2da:	4605      	mov	r5, r0
    e2dc:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    e2de:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    e2e2:	f00f fb93 	bl	1da0c <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    e2e6:	2202      	movs	r2, #2
    e2e8:	f104 0128 	add.w	r1, r4, #40	; 0x28
    e2ec:	f105 000a 	add.w	r0, r5, #10
}
    e2f0:	b008      	add	sp, #32
    e2f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    e2f6:	f00f bb89 	b.w	1da0c <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    e2fa:	4b52      	ldr	r3, [pc, #328]	; (e444 <hci_evt_encode+0x5c0>)
    e2fc:	681b      	ldr	r3, [r3, #0]
    e2fe:	061b      	lsls	r3, r3, #24
    e300:	f04f 0400 	mov.w	r4, #0
    e304:	f57f ae4c 	bpl.w	dfa0 <hci_evt_encode+0x11c>
    e308:	3508      	adds	r5, #8
    e30a:	2102      	movs	r1, #2
    e30c:	4628      	mov	r0, r5
    e30e:	f011 fcdc 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e312:	2308      	movs	r3, #8
	hdr->len = len;
    e314:	2104      	movs	r1, #4
	hdr->evt = evt;
    e316:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e318:	7041      	strb	r1, [r0, #1]
    e31a:	4628      	mov	r0, r5
    e31c:	f011 fcd5 	bl	1fcca <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
    e320:	2301      	movs	r3, #1
	ep->status = err;
    e322:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    e324:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    e328:	70c3      	strb	r3, [r0, #3]
    e32a:	e639      	b.n	dfa0 <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
    e32c:	7fa0      	ldrb	r0, [r4, #30]
    e32e:	f104 0325 	add.w	r3, r4, #37	; 0x25
    e332:	22ff      	movs	r2, #255	; 0xff
    e334:	f104 011f 	add.w	r1, r4, #31
    e338:	f007 fa32 	bl	157a0 <ll_rl_crpa_set>
    e33c:	e5dd      	b.n	defa <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    e33e:	2300      	movs	r3, #0
    e340:	e9cd 3301 	strd	r3, r3, [sp, #4]
    e344:	9300      	str	r3, [sp, #0]
    e346:	221a      	movs	r2, #26
    e348:	2102      	movs	r1, #2
    e34a:	4630      	mov	r0, r6
    e34c:	f002 fe5e 	bl	1100c <ll_conn_update>
		return;
    e350:	e626      	b.n	dfa0 <hci_evt_encode+0x11c>
    e352:	3508      	adds	r5, #8
    e354:	2102      	movs	r1, #2
    e356:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    e358:	f1b8 0f00 	cmp.w	r8, #0
    e35c:	d14c      	bne.n	e3f8 <hci_evt_encode+0x574>
    e35e:	f011 fcb4 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e362:	233e      	movs	r3, #62	; 0x3e
    e364:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e366:	2313      	movs	r3, #19
    e368:	7043      	strb	r3, [r0, #1]
    e36a:	2101      	movs	r1, #1
    e36c:	4628      	mov	r0, r5
    e36e:	f011 fcac 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e372:	2301      	movs	r3, #1
    e374:	7003      	strb	r3, [r0, #0]
    e376:	2112      	movs	r1, #18
    e378:	4628      	mov	r0, r5
    e37a:	f011 fca6 	bl	1fcca <net_buf_simple_add>
    e37e:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    e380:	2212      	movs	r2, #18
    e382:	4641      	mov	r1, r8
    e384:	f00f fb4d 	bl	1da22 <memset>
		lecc->status = status;
    e388:	7027      	strb	r7, [r4, #0]
		return;
    e38a:	e609      	b.n	dfa0 <hci_evt_encode+0x11c>
    e38c:	3508      	adds	r5, #8
    e38e:	2102      	movs	r1, #2
    e390:	4628      	mov	r0, r5
    e392:	f011 fc9a 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e396:	233e      	movs	r3, #62	; 0x3e
    e398:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e39a:	2313      	movs	r3, #19
    e39c:	7043      	strb	r3, [r0, #1]
    e39e:	2101      	movs	r1, #1
    e3a0:	4628      	mov	r0, r5
    e3a2:	f011 fc92 	bl	1fcca <net_buf_simple_add>
    e3a6:	4603      	mov	r3, r0
	me->subevent = subevt;
    e3a8:	2201      	movs	r2, #1
    e3aa:	701a      	strb	r2, [r3, #0]
    e3ac:	4628      	mov	r0, r5
    e3ae:	2112      	movs	r1, #18
    e3b0:	f011 fc8b 	bl	1fcca <net_buf_simple_add>
	lecc->status = 0x00;
    e3b4:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    e3b6:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
    e3ba:	7f63      	ldrb	r3, [r4, #29]
    e3bc:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
    e3be:	7fa3      	ldrb	r3, [r4, #30]
    e3c0:	f003 0301 	and.w	r3, r3, #1
    e3c4:	4605      	mov	r5, r0
    e3c6:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
    e3c8:	2206      	movs	r2, #6
    e3ca:	f104 011f 	add.w	r1, r4, #31
    e3ce:	3005      	adds	r0, #5
    e3d0:	f00f fb1c 	bl	1da0c <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    e3d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
    e3d6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
    e3d8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    e3da:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
    e3de:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
    e3e2:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
    e3e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    e3ea:	746b      	strb	r3, [r5, #17]
    e3ec:	e5d8      	b.n	dfa0 <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    e3ee:	462b      	mov	r3, r5
    e3f0:	4632      	mov	r2, r6
    e3f2:	2100      	movs	r1, #0
    e3f4:	201a      	movs	r0, #26
    e3f6:	e6f6      	b.n	e1e6 <hci_evt_encode+0x362>
    e3f8:	f011 fc67 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e3fc:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
    e3fe:	231f      	movs	r3, #31
	hdr->evt = evt;
    e400:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    e402:	7043      	strb	r3, [r0, #1]
    e404:	2101      	movs	r1, #1
    e406:	4628      	mov	r0, r5
    e408:	f011 fc5f 	bl	1fcca <net_buf_simple_add>
	me->subevent = subevt;
    e40c:	230a      	movs	r3, #10
    e40e:	7003      	strb	r3, [r0, #0]
    e410:	211e      	movs	r1, #30
    e412:	4628      	mov	r0, r5
    e414:	f011 fc59 	bl	1fcca <net_buf_simple_add>
    e418:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    e41a:	221e      	movs	r2, #30
    e41c:	2100      	movs	r1, #0
    e41e:	f00f fb00 	bl	1da22 <memset>
			leecc->status = status;
    e422:	7027      	strb	r7, [r4, #0]
			return;
    e424:	e5bc      	b.n	dfa0 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
    e426:	4a09      	ldr	r2, [pc, #36]	; (e44c <hci_evt_encode+0x5c8>)
    e428:	4909      	ldr	r1, [pc, #36]	; (e450 <hci_evt_encode+0x5cc>)
    e42a:	480a      	ldr	r0, [pc, #40]	; (e454 <hci_evt_encode+0x5d0>)
    e42c:	f241 73e3 	movw	r3, #6115	; 0x17e3
    e430:	f00d f9a0 	bl	1b774 <printk>
    e434:	4040      	eors	r0, r0
    e436:	f380 8811 	msr	BASEPRI, r0
    e43a:	f04f 0003 	mov.w	r0, #3
    e43e:	df02      	svc	2
		return;
    e440:	e5ae      	b.n	dfa0 <hci_evt_encode+0x11c>
    e442:	bf00      	nop
    e444:	20000170 	.word	0x20000170
    e448:	20000178 	.word	0x20000178
    e44c:	000219d4 	.word	0x000219d4
    e450:	000218a4 	.word	0x000218a4
    e454:	0002180c 	.word	0x0002180c

0000e458 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    e458:	b570      	push	{r4, r5, r6, lr}
    e45a:	f100 0408 	add.w	r4, r0, #8
    e45e:	460e      	mov	r6, r1
    e460:	4620      	mov	r0, r4
    e462:	2102      	movs	r1, #2
    e464:	4615      	mov	r5, r2
    e466:	f011 fc30 	bl	1fcca <net_buf_simple_add>
	hdr->evt = evt;
    e46a:	2313      	movs	r3, #19
	hdr->len = len;
    e46c:	2105      	movs	r1, #5
	hdr->evt = evt;
    e46e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
    e470:	7041      	strb	r1, [r0, #1]
    e472:	4620      	mov	r0, r4
    e474:	f011 fc29 	bl	1fcca <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
    e478:	2301      	movs	r3, #1
    e47a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    e47c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e480:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    e484:	bd70      	pop	{r4, r5, r6, pc}
    e486:	bf00      	nop

0000e488 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e488:	7903      	ldrb	r3, [r0, #4]
    e48a:	2b03      	cmp	r3, #3
    e48c:	d009      	beq.n	e4a2 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    e48e:	2b14      	cmp	r3, #20
    e490:	d005      	beq.n	e49e <hci_get_class+0x16>
    e492:	3b15      	subs	r3, #21
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
    e494:	2b05      	cmp	r3, #5
    e496:	bf94      	ite	ls
    e498:	2003      	movls	r0, #3
    e49a:	2000      	movhi	r0, #0
    e49c:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e49e:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    e4a0:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e4a2:	7f03      	ldrb	r3, [r0, #28]
    e4a4:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
    e4a8:	2b03      	cmp	r3, #3
    e4aa:	bf0c      	ite	eq
    e4ac:	2004      	moveq	r0, #4
    e4ae:	2005      	movne	r0, #5
    e4b0:	4770      	bx	lr
    e4b2:	bf00      	nop

0000e4b4 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    e4b4:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    e4b6:	4b0b      	ldr	r3, [pc, #44]	; (e4e4 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e4b8:	490b      	ldr	r1, [pc, #44]	; (e4e8 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e4ba:	4a0c      	ldr	r2, [pc, #48]	; (e4ec <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
    e4bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    e4c0:	f641 75ff 	movw	r5, #8191	; 0x1fff
    e4c4:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    e4c8:	2400      	movs	r4, #0
    e4ca:	2500      	movs	r5, #0
    e4cc:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
    e4d0:	4b07      	ldr	r3, [pc, #28]	; (e4f0 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    e4d2:	201f      	movs	r0, #31
    e4d4:	2100      	movs	r1, #0
    e4d6:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    e4da:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    e4dc:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    e4de:	601a      	str	r2, [r3, #0]
}
    e4e0:	4770      	bx	lr
    e4e2:	bf00      	nop
    e4e4:	20000170 	.word	0x20000170
    e4e8:	20001018 	.word	0x20001018
    e4ec:	20000178 	.word	0x20000178
    e4f0:	200017e4 	.word	0x200017e4

0000e4f4 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    e4f4:	f007 bfe6 	b.w	164c4 <lll_csrand_get>

0000e4f8 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    e4f8:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    e4fa:	2300      	movs	r3, #0
    e4fc:	f009 fda4 	bl	18048 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    e500:	2000      	movs	r0, #0
    e502:	bd08      	pop	{r3, pc}

0000e504 <ll_feat_get>:

#else /* !CONFIG_BT_CTLR_SET_HOST_FEATURE */
uint64_t ll_feat_get(void)
{
	return LL_FEAT;
}
    e504:	4801      	ldr	r0, [pc, #4]	; (e50c <ll_feat_get+0x8>)
    e506:	2100      	movs	r1, #0
    e508:	4770      	bx	lr
    e50a:	bf00      	nop
    e50c:	0001417f 	.word	0x0001417f

0000e510 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    e510:	b510      	push	{r4, lr}
    e512:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    e514:	f008 f80c 	bl	16530 <lll_reset>
	LL_ASSERT(!err);
    e518:	b950      	cbnz	r0, e530 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    e51a:	f008 fbf1 	bl	16d00 <lll_adv_reset>
	LL_ASSERT(!err);
    e51e:	b9c0      	cbnz	r0, e552 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    e520:	f009 f884 	bl	1762c <lll_conn_reset>
	LL_ASSERT(!err);
    e524:	bb30      	cbnz	r0, e574 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    e526:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    e528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e52c:	f00c b8cc 	b.w	1a6c8 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    e530:	4a19      	ldr	r2, [pc, #100]	; (e598 <perform_lll_reset+0x88>)
    e532:	491a      	ldr	r1, [pc, #104]	; (e59c <perform_lll_reset+0x8c>)
    e534:	481a      	ldr	r0, [pc, #104]	; (e5a0 <perform_lll_reset+0x90>)
    e536:	f240 738d 	movw	r3, #1933	; 0x78d
    e53a:	f00d f91b 	bl	1b774 <printk>
    e53e:	4040      	eors	r0, r0
    e540:	f380 8811 	msr	BASEPRI, r0
    e544:	f04f 0003 	mov.w	r0, #3
    e548:	df02      	svc	2
	err = lll_adv_reset();
    e54a:	f008 fbd9 	bl	16d00 <lll_adv_reset>
	LL_ASSERT(!err);
    e54e:	2800      	cmp	r0, #0
    e550:	d0e6      	beq.n	e520 <perform_lll_reset+0x10>
    e552:	4a11      	ldr	r2, [pc, #68]	; (e598 <perform_lll_reset+0x88>)
    e554:	4911      	ldr	r1, [pc, #68]	; (e59c <perform_lll_reset+0x8c>)
    e556:	4812      	ldr	r0, [pc, #72]	; (e5a0 <perform_lll_reset+0x90>)
    e558:	f240 7392 	movw	r3, #1938	; 0x792
    e55c:	f00d f90a 	bl	1b774 <printk>
    e560:	4040      	eors	r0, r0
    e562:	f380 8811 	msr	BASEPRI, r0
    e566:	f04f 0003 	mov.w	r0, #3
    e56a:	df02      	svc	2
	err = lll_conn_reset();
    e56c:	f009 f85e 	bl	1762c <lll_conn_reset>
	LL_ASSERT(!err);
    e570:	2800      	cmp	r0, #0
    e572:	d0d8      	beq.n	e526 <perform_lll_reset+0x16>
    e574:	4a08      	ldr	r2, [pc, #32]	; (e598 <perform_lll_reset+0x88>)
    e576:	4909      	ldr	r1, [pc, #36]	; (e59c <perform_lll_reset+0x8c>)
    e578:	4809      	ldr	r0, [pc, #36]	; (e5a0 <perform_lll_reset+0x90>)
    e57a:	f240 739e 	movw	r3, #1950	; 0x79e
    e57e:	f00d f8f9 	bl	1b774 <printk>
    e582:	4040      	eors	r0, r0
    e584:	f380 8811 	msr	BASEPRI, r0
    e588:	f04f 0003 	mov.w	r0, #3
    e58c:	df02      	svc	2
    e58e:	4620      	mov	r0, r4
}
    e590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e594:	f00c b898 	b.w	1a6c8 <z_impl_k_sem_give>
    e598:	00021a78 	.word	0x00021a78
    e59c:	00021ab4 	.word	0x00021ab4
    e5a0:	0002180c 	.word	0x0002180c

0000e5a4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    e5a4:	6008      	str	r0, [r1, #0]
    e5a6:	4801      	ldr	r0, [pc, #4]	; (e5ac <ull_ticker_status_give+0x8>)
    e5a8:	f00c b88e 	b.w	1a6c8 <z_impl_k_sem_give>
    e5ac:	20001b44 	.word	0x20001b44

0000e5b0 <disabled_cb>:
    e5b0:	f00c b88a 	b.w	1a6c8 <z_impl_k_sem_give>

0000e5b4 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    e5b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e5b8:	4e2f      	ldr	r6, [pc, #188]	; (e678 <tx_cmplt_get+0xc4>)
{
    e5ba:	460c      	mov	r4, r1
    e5bc:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    e5be:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e5c0:	7872      	ldrb	r2, [r6, #1]
    e5c2:	7831      	ldrb	r1, [r6, #0]
    e5c4:	429a      	cmp	r2, r3
    e5c6:	bf9c      	itt	ls
    e5c8:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
    e5ca:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
    e5cc:	4599      	cmp	r9, r3
{
    e5ce:	4682      	mov	sl, r0
    e5d0:	d049      	beq.n	e666 <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    e5d2:	fb13 f101 	smulbb	r1, r3, r1
    e5d6:	4d29      	ldr	r5, [pc, #164]	; (e67c <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    e5d8:	3301      	adds	r3, #1
    e5da:	b2db      	uxtb	r3, r3
		i = 0U;
    e5dc:	429a      	cmp	r2, r3
    e5de:	bf08      	it	eq
    e5e0:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    e5e2:	186a      	adds	r2, r5, r1

	*idx = i;
    e5e4:	7023      	strb	r3, [r4, #0]
    e5e6:	d03e      	beq.n	e666 <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
    e5e8:	5a6b      	ldrh	r3, [r5, r1]
    e5ea:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    e5ec:	2700      	movs	r7, #0
    e5ee:	f04f 0802 	mov.w	r8, #2
    e5f2:	f04f 0b01 	mov.w	fp, #1
    e5f6:	e022      	b.n	e63e <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
    e5f8:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
    e5fa:	f030 0303 	bics.w	r3, r0, #3
    e5fe:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
    e602:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
    e604:	d129      	bne.n	e65a <tx_cmplt_get+0xa6>
	if (*idx >= count) {
    e606:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    e608:	7872      	ldrb	r2, [r6, #1]
    e60a:	7831      	ldrb	r1, [r6, #0]
    e60c:	429a      	cmp	r2, r3
    e60e:	bf9c      	itt	ls
    e610:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
    e612:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
    e614:	454b      	cmp	r3, r9
    e616:	d027      	beq.n	e668 <tx_cmplt_get+0xb4>
	i = *idx + 1;
    e618:	f103 0c01 	add.w	ip, r3, #1
    e61c:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
    e620:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
    e624:	4562      	cmp	r2, ip
    e626:	bf08      	it	eq
    e628:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    e62c:	18ea      	adds	r2, r5, r3
	*idx = i;
    e62e:	f884 c000 	strb.w	ip, [r4]
    e632:	d019      	beq.n	e668 <tx_cmplt_get+0xb4>
    e634:	5ae9      	ldrh	r1, [r5, r3]
    e636:	f8ba 3000 	ldrh.w	r3, [sl]
    e63a:	4299      	cmp	r1, r3
    e63c:	d114      	bne.n	e668 <tx_cmplt_get+0xb4>
		node_tx = tx->node;
    e63e:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    e640:	2801      	cmp	r0, #1
    e642:	d9d9      	bls.n	e5f8 <tx_cmplt_get+0x44>
    e644:	f030 0303 	bics.w	r3, r0, #3
    e648:	d00a      	beq.n	e660 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    e64a:	7903      	ldrb	r3, [r0, #4]
    e64c:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    e650:	3b01      	subs	r3, #1
    e652:	2b01      	cmp	r3, #1
    e654:	d90b      	bls.n	e66e <tx_cmplt_get+0xba>
    e656:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
    e65a:	f002 fc85 	bl	10f68 <ll_tx_mem_release>
    e65e:	e7d2      	b.n	e606 <tx_cmplt_get+0x52>
    e660:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
    e664:	e7cf      	b.n	e606 <tx_cmplt_get+0x52>
		return 0;
    e666:	2700      	movs	r7, #0

	return cmplt;
}
    e668:	4638      	mov	r0, r7
    e66a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    e66e:	3701      	adds	r7, #1
    e670:	f8c2 b004 	str.w	fp, [r2, #4]
    e674:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
    e676:	e7f0      	b.n	e65a <tx_cmplt_get+0xa6>
    e678:	20000408 	.word	0x20000408
    e67c:	2000040c 	.word	0x2000040c

0000e680 <ull_done>:
}
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_LOW_LAT_ULL)
static void ull_done(void *param)
{
    e680:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e684:	4f3c      	ldr	r7, [pc, #240]	; (e778 <ull_done+0xf8>)
	void *release;

	/* Decrement prepare reference if ULL will not resume */
	ull_hdr = done->param;
	if (ull_hdr) {
		LL_ASSERT(ull_ref_get(ull_hdr));
    e686:	f8df 80f4 	ldr.w	r8, [pc, #244]	; e77c <ull_done+0xfc>
    e68a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; e780 <ull_done+0x100>
{
    e68e:	b083      	sub	sp, #12
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    e690:	e9d7 0100 	ldrd	r0, r1, [r7]
    e694:	aa01      	add	r2, sp, #4
    e696:	f7fd f8b1 	bl	b7fc <memq_peek>
		if (link) {
    e69a:	4604      	mov	r4, r0
    e69c:	2800      	cmp	r0, #0
    e69e:	d03e      	beq.n	e71e <ull_done+0x9e>
			memq_dequeue(memq_ull_done.tail, &memq_ull_done.head, NULL);
    e6a0:	6878      	ldr	r0, [r7, #4]
    e6a2:	2200      	movs	r2, #0
    e6a4:	4639      	mov	r1, r7
    e6a6:	f7fd f8b1 	bl	b80c <memq_dequeue>
			rx_demux_event_done(link, done);
    e6aa:	9e01      	ldr	r6, [sp, #4]
	ull_hdr = done->param;
    e6ac:	69f5      	ldr	r5, [r6, #28]
	if (ull_hdr) {
    e6ae:	b135      	cbz	r5, e6be <ull_done+0x3e>
	return hdr->ref;
    e6b0:	782b      	ldrb	r3, [r5, #0]
		LL_ASSERT(ull_ref_get(ull_hdr));
    e6b2:	2b00      	cmp	r3, #0
    e6b4:	d052      	beq.n	e75c <ull_done+0xdc>
	return hdr->ref--;
    e6b6:	782b      	ldrb	r3, [r5, #0]
    e6b8:	3b01      	subs	r3, #1
    e6ba:	b2db      	uxtb	r3, r3
    e6bc:	702b      	strb	r3, [r5, #0]
		ull_ref_dec(ull_hdr);
	}

	/* Process role dependent event done */
	switch (done->extra.type) {
    e6be:	f896 3020 	ldrb.w	r3, [r6, #32]
    e6c2:	b123      	cbz	r3, e6ce <ull_done+0x4e>
    e6c4:	2b01      	cmp	r3, #1
    e6c6:	d13b      	bne.n	e740 <ull_done+0xc0>
#if defined(CONFIG_BT_CONN)
	case EVENT_DONE_EXTRA_TYPE_CONN:
		ull_conn_done(done);
    e6c8:	4630      	mov	r0, r6
    e6ca:	f005 ff47 	bl	1455c <ull_conn_done>
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e6ce:	4a2d      	ldr	r2, [pc, #180]	; (e784 <ull_done+0x104>)
	last = last + 1;
    e6d0:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
    e6d2:	f892 c001 	ldrb.w	ip, [r2, #1]
    e6d6:	7891      	ldrb	r1, [r2, #2]
	last = last + 1;
    e6d8:	3301      	adds	r3, #1
		LL_ASSERT(0);
		break;
	}

	/* release done */
	done->extra.type = 0U;
    e6da:	2000      	movs	r0, #0
    e6dc:	b2db      	uxtb	r3, r3
		last = 0U;
    e6de:	459c      	cmp	ip, r3
    e6e0:	bf08      	it	eq
    e6e2:	4603      	moveq	r3, r0
	if (last == first) {
    e6e4:	4299      	cmp	r1, r3
    e6e6:	f886 0020 	strb.w	r0, [r6, #32]
    e6ea:	d01b      	beq.n	e724 <ull_done+0xa4>
	done->hdr.link = link;
    e6ec:	6034      	str	r4, [r6, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e6ee:	78d0      	ldrb	r0, [r2, #3]
    e6f0:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e6f2:	fb00 2101 	mla	r1, r0, r1, r2
    e6f6:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
    e6f8:	70d3      	strb	r3, [r2, #3]
	/* LLL done synchronized */
	lll_done_sync();
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL_DONE */

	/* If disable initiated, signal the semaphore */
	if (ull_hdr && !ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    e6fa:	2d00      	cmp	r5, #0
    e6fc:	d0c8      	beq.n	e690 <ull_done+0x10>
	return hdr->ref;
    e6fe:	782b      	ldrb	r3, [r5, #0]
    e700:	2b00      	cmp	r3, #0
    e702:	d1c5      	bne.n	e690 <ull_done+0x10>
    e704:	696b      	ldr	r3, [r5, #20]
    e706:	2b00      	cmp	r3, #0
    e708:	d0c2      	beq.n	e690 <ull_done+0x10>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    e70a:	69a8      	ldr	r0, [r5, #24]
    e70c:	4798      	blx	r3
		link = memq_peek(memq_ull_done.head, memq_ull_done.tail,
    e70e:	e9d7 0100 	ldrd	r0, r1, [r7]
    e712:	aa01      	add	r2, sp, #4
    e714:	f7fd f872 	bl	b7fc <memq_peek>
		if (link) {
    e718:	4604      	mov	r4, r0
    e71a:	2800      	cmp	r0, #0
    e71c:	d1c0      	bne.n	e6a0 <ull_done+0x20>
}
    e71e:	b003      	add	sp, #12
    e720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(release == done);
    e724:	4918      	ldr	r1, [pc, #96]	; (e788 <ull_done+0x108>)
    e726:	4819      	ldr	r0, [pc, #100]	; (e78c <ull_done+0x10c>)
    e728:	f640 13e7 	movw	r3, #2535	; 0x9e7
    e72c:	4642      	mov	r2, r8
    e72e:	f00d f821 	bl	1b774 <printk>
    e732:	4040      	eors	r0, r0
    e734:	f380 8811 	msr	BASEPRI, r0
    e738:	f04f 0003 	mov.w	r0, #3
    e73c:	df02      	svc	2
    e73e:	e7dc      	b.n	e6fa <ull_done+0x7a>
		LL_ASSERT(0);
    e740:	4913      	ldr	r1, [pc, #76]	; (e790 <ull_done+0x110>)
    e742:	4812      	ldr	r0, [pc, #72]	; (e78c <ull_done+0x10c>)
    e744:	f44f 631e 	mov.w	r3, #2528	; 0x9e0
    e748:	4642      	mov	r2, r8
    e74a:	f00d f813 	bl	1b774 <printk>
    e74e:	4040      	eors	r0, r0
    e750:	f380 8811 	msr	BASEPRI, r0
    e754:	f04f 0003 	mov.w	r0, #3
    e758:	df02      	svc	2
		break;
    e75a:	e7b8      	b.n	e6ce <ull_done+0x4e>
		LL_ASSERT(ull_ref_get(ull_hdr));
    e75c:	480b      	ldr	r0, [pc, #44]	; (e78c <ull_done+0x10c>)
    e75e:	f640 13aa 	movw	r3, #2474	; 0x9aa
    e762:	4642      	mov	r2, r8
    e764:	4649      	mov	r1, r9
    e766:	f00d f805 	bl	1b774 <printk>
    e76a:	4040      	eors	r0, r0
    e76c:	f380 8811 	msr	BASEPRI, r0
    e770:	f04f 0003 	mov.w	r0, #3
    e774:	df02      	svc	2
    e776:	e79e      	b.n	e6b6 <ull_done+0x36>
    e778:	20001b30 	.word	0x20001b30
    e77c:	00021a78 	.word	0x00021a78
    e780:	00021abc 	.word	0x00021abc
    e784:	200002cc 	.word	0x200002cc
    e788:	00021ad4 	.word	0x00021ad4
    e78c:	0002180c 	.word	0x0002180c
    e790:	000218a4 	.word	0x000218a4

0000e794 <rx_alloc>:
{
    e794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
    e798:	4f33      	ldr	r7, [pc, #204]	; (e868 <rx_alloc+0xd4>)
    e79a:	783e      	ldrb	r6, [r7, #0]
    e79c:	4286      	cmp	r6, r0
    e79e:	bf28      	it	cs
    e7a0:	4606      	movcs	r6, r0
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7a2:	b34e      	cbz	r6, e7f8 <rx_alloc+0x64>
    e7a4:	4d31      	ldr	r5, [pc, #196]	; (e86c <rx_alloc+0xd8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    e7a6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; e870 <rx_alloc+0xdc>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7aa:	78ec      	ldrb	r4, [r5, #3]
		link = mem_acquire(&mem_link_rx.free);
    e7ac:	f107 0804 	add.w	r8, r7, #4
	if (last == count) {
    e7b0:	786a      	ldrb	r2, [r5, #1]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7b2:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e7b4:	3401      	adds	r4, #1
    e7b6:	b2e4      	uxtb	r4, r4
		last = 0U;
    e7b8:	42a2      	cmp	r2, r4
    e7ba:	bf08      	it	eq
    e7bc:	2400      	moveq	r4, #0
	if (last == first) {
    e7be:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
    e7c0:	4640      	mov	r0, r8
    e7c2:	d01b      	beq.n	e7fc <rx_alloc+0x68>
    e7c4:	f7fc ffac 	bl	b720 <mem_acquire>
    e7c8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e7ca:	4648      	mov	r0, r9
		if (!link) {
    e7cc:	f1ba 0f00 	cmp.w	sl, #0
    e7d0:	d012      	beq.n	e7f8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    e7d2:	f7fc ffa5 	bl	b720 <mem_acquire>
		if (!rx) {
    e7d6:	2800      	cmp	r0, #0
    e7d8:	d03f      	beq.n	e85a <rx_alloc+0xc6>
		rx->link = link;
    e7da:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e7de:	78ea      	ldrb	r2, [r5, #3]
    e7e0:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e7e2:	fb02 5303 	mla	r3, r2, r3, r5
    e7e6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e7e8:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    e7ea:	70ec      	strb	r4, [r5, #3]
		max--;
    e7ec:	3e01      	subs	r6, #1
	mem_link_rx.quota_pdu += delta;
    e7ee:	3b01      	subs	r3, #1
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7f0:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
    e7f4:	703b      	strb	r3, [r7, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7f6:	d1db      	bne.n	e7b0 <rx_alloc+0x1c>
}
    e7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	while (mem_link_rx.quota_pdu &&
    e7fc:	783b      	ldrb	r3, [r7, #0]
    e7fe:	2b00      	cmp	r3, #0
    e800:	d0fa      	beq.n	e7f8 <rx_alloc+0x64>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e802:	4d1c      	ldr	r5, [pc, #112]	; (e874 <rx_alloc+0xe0>)
		link = mem_acquire(&mem_link_rx.free);
    e804:	4e1c      	ldr	r6, [pc, #112]	; (e878 <rx_alloc+0xe4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e806:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    e808:	f8df 8064 	ldr.w	r8, [pc, #100]	; e870 <rx_alloc+0xdc>
		link->mem = NULL;
    e80c:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    e810:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e812:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e814:	3401      	adds	r4, #1
    e816:	b2e4      	uxtb	r4, r4
		last = 0U;
    e818:	42a2      	cmp	r2, r4
    e81a:	bf08      	it	eq
    e81c:	2400      	moveq	r4, #0
	if (last == first) {
    e81e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e820:	4630      	mov	r0, r6
    e822:	d0e9      	beq.n	e7f8 <rx_alloc+0x64>
    e824:	f7fc ff7c 	bl	b720 <mem_acquire>
    e828:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e82a:	4640      	mov	r0, r8
		if (!link) {
    e82c:	f1ba 0f00 	cmp.w	sl, #0
    e830:	d0e2      	beq.n	e7f8 <rx_alloc+0x64>
		rx = mem_acquire(&mem_pdu_rx.free);
    e832:	f7fc ff75 	bl	b720 <mem_acquire>
		if (!rx) {
    e836:	b180      	cbz	r0, e85a <rx_alloc+0xc6>
		link->mem = NULL;
    e838:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
    e83c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e840:	78ea      	ldrb	r2, [r5, #3]
    e842:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e844:	fb02 5303 	mla	r3, r2, r3, r5
    e848:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    e84a:	783b      	ldrb	r3, [r7, #0]
	*last = idx; /* Commit: Update write index */
    e84c:	70ec      	strb	r4, [r5, #3]
    e84e:	3b01      	subs	r3, #1
    e850:	b2db      	uxtb	r3, r3
    e852:	703b      	strb	r3, [r7, #0]
	while (mem_link_rx.quota_pdu &&
    e854:	2b00      	cmp	r3, #0
    e856:	d1db      	bne.n	e810 <rx_alloc+0x7c>
    e858:	e7ce      	b.n	e7f8 <rx_alloc+0x64>
			mem_release(link, &mem_link_rx.free);
    e85a:	4650      	mov	r0, sl
    e85c:	4906      	ldr	r1, [pc, #24]	; (e878 <rx_alloc+0xe4>)
}
    e85e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
    e862:	f7fc bf77 	b.w	b754 <mem_release>
    e866:	bf00      	nop
    e868:	200018dc 	.word	0x200018dc
    e86c:	200002ec 	.word	0x200002ec
    e870:	2000192c 	.word	0x2000192c
    e874:	200002e0 	.word	0x200002e0
    e878:	200018e0 	.word	0x200018e0

0000e87c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e87c:	4b46      	ldr	r3, [pc, #280]	; (e998 <init_reset+0x11c>)
{
    e87e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e882:	1d18      	adds	r0, r3, #4
    e884:	2203      	movs	r2, #3
    e886:	2134      	movs	r1, #52	; 0x34
    e888:	f7fc ff1a 	bl	b6c0 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    e88c:	4b43      	ldr	r3, [pc, #268]	; (e99c <init_reset+0x120>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e88e:	4d44      	ldr	r5, [pc, #272]	; (e9a0 <init_reset+0x124>)
		link = mem_acquire(&mem_link_done.free);
    e890:	4f42      	ldr	r7, [pc, #264]	; (e99c <init_reset+0x120>)
		rx = mem_acquire(&mem_done.free);
    e892:	f8df 8104 	ldr.w	r8, [pc, #260]	; e998 <init_reset+0x11c>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX +
    e896:	2204      	movs	r2, #4
    e898:	2108      	movs	r1, #8
    e89a:	1898      	adds	r0, r3, r2
    e89c:	f7fc ff10 	bl	b6c0 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e8a0:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    e8a2:	786a      	ldrb	r2, [r5, #1]
    e8a4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e8a6:	3401      	adds	r4, #1
    e8a8:	b2e4      	uxtb	r4, r4
		last = 0U;
    e8aa:	42a2      	cmp	r2, r4
    e8ac:	bf08      	it	eq
    e8ae:	2400      	moveq	r4, #0
	if (last == first) {
    e8b0:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    e8b2:	4638      	mov	r0, r7
    e8b4:	d013      	beq.n	e8de <init_reset+0x62>
    e8b6:	f7fc ff33 	bl	b720 <mem_acquire>
    e8ba:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    e8bc:	4640      	mov	r0, r8
		if (!link) {
    e8be:	b176      	cbz	r6, e8de <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
    e8c0:	f7fc ff2e 	bl	b720 <mem_acquire>
		if (!rx) {
    e8c4:	b138      	cbz	r0, e8d6 <init_reset+0x5a>
		rx->link = link;
    e8c6:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e8c8:	78ea      	ldrb	r2, [r5, #3]
    e8ca:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e8cc:	fb02 5303 	mla	r3, r2, r3, r5
    e8d0:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    e8d2:	70ec      	strb	r4, [r5, #3]
}
    e8d4:	e7e5      	b.n	e8a2 <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
    e8d6:	4931      	ldr	r1, [pc, #196]	; (e99c <init_reset+0x120>)
    e8d8:	4630      	mov	r0, r6
    e8da:	f7fc ff3b 	bl	b754 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e8de:	4b31      	ldr	r3, [pc, #196]	; (e9a4 <init_reset+0x128>)
    e8e0:	2207      	movs	r2, #7
    e8e2:	1d18      	adds	r0, r3, #4
    e8e4:	2148      	movs	r1, #72	; 0x48
    e8e6:	f7fc feeb 	bl	b6c0 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e8ea:	4b2f      	ldr	r3, [pc, #188]	; (e9a8 <init_reset+0x12c>)
    e8ec:	2209      	movs	r2, #9
    e8ee:	1d18      	adds	r0, r3, #4
    e8f0:	2108      	movs	r1, #8
    e8f2:	f7fc fee5 	bl	b6c0 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e8f6:	482c      	ldr	r0, [pc, #176]	; (e9a8 <init_reset+0x12c>)
    e8f8:	f7fc ff12 	bl	b720 <mem_acquire>
	LL_ASSERT(link);
    e8fc:	4604      	mov	r4, r0
    e8fe:	b308      	cbz	r0, e944 <init_reset+0xc8>
	MEMQ_INIT(ull_rx, link);
    e900:	4a2a      	ldr	r2, [pc, #168]	; (e9ac <init_reset+0x130>)
    e902:	4620      	mov	r0, r4
    e904:	1f11      	subs	r1, r2, #4
    e906:	f7fc ff61 	bl	b7cc <memq_init>
	link = mem_acquire(&mem_link_done.free);
    e90a:	4824      	ldr	r0, [pc, #144]	; (e99c <init_reset+0x120>)
    e90c:	f7fc ff08 	bl	b720 <mem_acquire>
	LL_ASSERT(link);
    e910:	4604      	mov	r4, r0
    e912:	b328      	cbz	r0, e960 <init_reset+0xe4>
	MEMQ_INIT(ull_done, link);
    e914:	4a26      	ldr	r2, [pc, #152]	; (e9b0 <init_reset+0x134>)
    e916:	4620      	mov	r0, r4
    e918:	1f11      	subs	r1, r2, #4
    e91a:	f7fc ff57 	bl	b7cc <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e91e:	4822      	ldr	r0, [pc, #136]	; (e9a8 <init_reset+0x12c>)
    e920:	f7fc fefe 	bl	b720 <mem_acquire>
	LL_ASSERT(link);
    e924:	4604      	mov	r4, r0
    e926:	b348      	cbz	r0, e97c <init_reset+0x100>
	MEMQ_INIT(ll_rx, link);
    e928:	4a22      	ldr	r2, [pc, #136]	; (e9b4 <init_reset+0x138>)
    e92a:	4620      	mov	r0, r4
    e92c:	1f11      	subs	r1, r2, #4
    e92e:	f7fc ff4d 	bl	b7cc <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e932:	4b21      	ldr	r3, [pc, #132]	; (e9b8 <init_reset+0x13c>)
    e934:	2205      	movs	r2, #5
	rx_alloc(UINT8_MAX);
    e936:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
    e938:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
    e93a:	f7ff ff2b 	bl	e794 <rx_alloc>
}
    e93e:	2000      	movs	r0, #0
    e940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
    e944:	4a1d      	ldr	r2, [pc, #116]	; (e9bc <init_reset+0x140>)
    e946:	491e      	ldr	r1, [pc, #120]	; (e9c0 <init_reset+0x144>)
    e948:	481e      	ldr	r0, [pc, #120]	; (e9c4 <init_reset+0x148>)
    e94a:	f240 736b 	movw	r3, #1899	; 0x76b
    e94e:	f00c ff11 	bl	1b774 <printk>
    e952:	4040      	eors	r0, r0
    e954:	f380 8811 	msr	BASEPRI, r0
    e958:	f04f 0003 	mov.w	r0, #3
    e95c:	df02      	svc	2
    e95e:	e7cf      	b.n	e900 <init_reset+0x84>
	LL_ASSERT(link);
    e960:	4a16      	ldr	r2, [pc, #88]	; (e9bc <init_reset+0x140>)
    e962:	4917      	ldr	r1, [pc, #92]	; (e9c0 <init_reset+0x144>)
    e964:	4817      	ldr	r0, [pc, #92]	; (e9c4 <init_reset+0x148>)
    e966:	f240 7373 	movw	r3, #1907	; 0x773
    e96a:	f00c ff03 	bl	1b774 <printk>
    e96e:	4040      	eors	r0, r0
    e970:	f380 8811 	msr	BASEPRI, r0
    e974:	f04f 0003 	mov.w	r0, #3
    e978:	df02      	svc	2
    e97a:	e7cb      	b.n	e914 <init_reset+0x98>
	LL_ASSERT(link);
    e97c:	4a0f      	ldr	r2, [pc, #60]	; (e9bc <init_reset+0x140>)
    e97e:	4910      	ldr	r1, [pc, #64]	; (e9c0 <init_reset+0x144>)
    e980:	4810      	ldr	r0, [pc, #64]	; (e9c4 <init_reset+0x148>)
    e982:	f240 737b 	movw	r3, #1915	; 0x77b
    e986:	f00c fef5 	bl	1b774 <printk>
    e98a:	4040      	eors	r0, r0
    e98c:	f380 8811 	msr	BASEPRI, r0
    e990:	f04f 0003 	mov.w	r0, #3
    e994:	df02      	svc	2
    e996:	e7c7      	b.n	e928 <init_reset+0xac>
    e998:	20001818 	.word	0x20001818
    e99c:	200018b8 	.word	0x200018b8
    e9a0:	200002cc 	.word	0x200002cc
    e9a4:	2000192c 	.word	0x2000192c
    e9a8:	200018e0 	.word	0x200018e0
    e9ac:	20001b3c 	.word	0x20001b3c
    e9b0:	20001b34 	.word	0x20001b34
    e9b4:	20001b2c 	.word	0x20001b2c
    e9b8:	200018dc 	.word	0x200018dc
    e9bc:	00021a78 	.word	0x00021a78
    e9c0:	00021e08 	.word	0x00021e08
    e9c4:	0002180c 	.word	0x0002180c

0000e9c8 <rx_demux>:
{
    e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e9cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; eb7c <rx_demux+0x1b4>
	k_sem_give(sem_recv);
    e9d0:	f8df 91ac 	ldr.w	r9, [pc, #428]	; eb80 <rx_demux+0x1b8>
		LL_ASSERT(0);
    e9d4:	f8df a1ac 	ldr.w	sl, [pc, #428]	; eb84 <rx_demux+0x1bc>
    e9d8:	f8df b1ac 	ldr.w	fp, [pc, #428]	; eb88 <rx_demux+0x1c0>
{
    e9dc:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e9de:	e9d8 0100 	ldrd	r0, r1, [r8]
    e9e2:	aa03      	add	r2, sp, #12
    e9e4:	f7fc ff0a 	bl	b7fc <memq_peek>
		if (link) {
    e9e8:	4605      	mov	r5, r0
    e9ea:	2800      	cmp	r0, #0
    e9ec:	d035      	beq.n	ea5a <rx_demux+0x92>
			LL_ASSERT(rx);
    e9ee:	9b03      	ldr	r3, [sp, #12]
    e9f0:	2b00      	cmp	r3, #0
    e9f2:	f000 80a5 	beq.w	eb40 <rx_demux+0x178>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    e9f6:	7818      	ldrb	r0, [r3, #0]
    e9f8:	aa04      	add	r2, sp, #16
    e9fa:	a902      	add	r1, sp, #8
    e9fc:	f006 f866 	bl	14acc <ull_conn_ack_by_last_peek>
			if (link_tx) {
    ea00:	4604      	mov	r4, r0
    ea02:	2800      	cmp	r0, #0
    ea04:	d055      	beq.n	eab2 <rx_demux+0xea>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    ea06:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
    ea0a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    ea0e:	780f      	ldrb	r7, [r1, #0]
    ea10:	f8ad 200a 	strh.w	r2, [sp, #10]
    ea14:	ae05      	add	r6, sp, #20
    ea16:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    ea18:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    ea1c:	f006 f872 	bl	14b04 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    ea20:	4621      	mov	r1, r4
    ea22:	9a05      	ldr	r2, [sp, #20]
    ea24:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    ea28:	f006 f8b6 	bl	14b98 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    ea2c:	4620      	mov	r0, r4
    ea2e:	f006 f825 	bl	14a7c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    ea32:	4632      	mov	r2, r6
    ea34:	4629      	mov	r1, r5
    ea36:	4638      	mov	r0, r7
    ea38:	f006 f848 	bl	14acc <ull_conn_ack_by_last_peek>
	} while (link);
    ea3c:	4604      	mov	r4, r0
    ea3e:	2800      	cmp	r0, #0
    ea40:	d1ec      	bne.n	ea1c <rx_demux+0x54>
	k_sem_give(sem_recv);
    ea42:	f8d9 0000 	ldr.w	r0, [r9]
    ea46:	f00b fe3f 	bl	1a6c8 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    ea4a:	e9d8 0100 	ldrd	r0, r1, [r8]
    ea4e:	aa03      	add	r2, sp, #12
    ea50:	f7fc fed4 	bl	b7fc <memq_peek>
		if (link) {
    ea54:	4605      	mov	r5, r0
    ea56:	2800      	cmp	r0, #0
    ea58:	d1c9      	bne.n	e9ee <rx_demux+0x26>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    ea5a:	aa04      	add	r2, sp, #16
    ea5c:	a902      	add	r1, sp, #8
    ea5e:	f10d 0007 	add.w	r0, sp, #7
    ea62:	f006 f817 	bl	14a94 <ull_conn_ack_peek>
			if (link) {
    ea66:	4604      	mov	r4, r0
    ea68:	2800      	cmp	r0, #0
    ea6a:	d066      	beq.n	eb3a <rx_demux+0x172>
				rx_demux_conn_tx_ack(ack_last, handle,
    ea6c:	9b04      	ldr	r3, [sp, #16]
    ea6e:	9305      	str	r3, [sp, #20]
    ea70:	f89d 7007 	ldrb.w	r7, [sp, #7]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    ea74:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    ea78:	f8ad 300a 	strh.w	r3, [sp, #10]
    ea7c:	ae05      	add	r6, sp, #20
    ea7e:	f10d 050a 	add.w	r5, sp, #10
		ull_conn_ack_dequeue();
    ea82:	f006 f83f 	bl	14b04 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    ea86:	4621      	mov	r1, r4
    ea88:	9a05      	ldr	r2, [sp, #20]
    ea8a:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    ea8e:	f006 f883 	bl	14b98 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    ea92:	4620      	mov	r0, r4
    ea94:	f005 fff2 	bl	14a7c <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    ea98:	4632      	mov	r2, r6
    ea9a:	4629      	mov	r1, r5
    ea9c:	4638      	mov	r0, r7
    ea9e:	f006 f815 	bl	14acc <ull_conn_ack_by_last_peek>
	} while (link);
    eaa2:	4604      	mov	r4, r0
    eaa4:	2800      	cmp	r0, #0
    eaa6:	d1ec      	bne.n	ea82 <rx_demux+0xba>
	k_sem_give(sem_recv);
    eaa8:	f8d9 0000 	ldr.w	r0, [r9]
    eaac:	f00b fe0c 	bl	1a6c8 <z_impl_k_sem_give>
			if (nack) {
    eab0:	e7cb      	b.n	ea4a <rx_demux+0x82>
				nack = rx_demux_rx(link, rx);
    eab2:	9b03      	ldr	r3, [sp, #12]
    eab4:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    eab6:	791b      	ldrb	r3, [r3, #4]
    eab8:	3b01      	subs	r3, #1
    eaba:	2b14      	cmp	r3, #20
    eabc:	d80c      	bhi.n	ead8 <rx_demux+0x110>
    eabe:	e8df f003 	tbb	[pc, r3]
    eac2:	0b19      	.short	0x0b19
    eac4:	0b0b0b37 	.word	0x0b0b0b37
    eac8:	0b0b0b0b 	.word	0x0b0b0b0b
    eacc:	0b0b0b0b 	.word	0x0b0b0b0b
    ead0:	0b0b0b0b 	.word	0x0b0b0b0b
    ead4:	2c0b      	.short	0x2c0b
    ead6:	19          	.byte	0x19
    ead7:	00          	.byte	0x00
		LL_ASSERT(0);
    ead8:	482c      	ldr	r0, [pc, #176]	; (eb8c <rx_demux+0x1c4>)
    eada:	f640 1397 	movw	r3, #2455	; 0x997
    eade:	4652      	mov	r2, sl
    eae0:	4659      	mov	r1, fp
    eae2:	f00c fe47 	bl	1b774 <printk>
    eae6:	4040      	eors	r0, r0
    eae8:	f380 8811 	msr	BASEPRI, r0
    eaec:	f04f 0003 	mov.w	r0, #3
    eaf0:	df02      	svc	2
			if (nack) {
    eaf2:	e774      	b.n	e9de <rx_demux+0x16>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    eaf4:	4921      	ldr	r1, [pc, #132]	; (eb7c <rx_demux+0x1b4>)
    eaf6:	f8d8 0004 	ldr.w	r0, [r8, #4]
    eafa:	2200      	movs	r2, #0
    eafc:	f7fc fe86 	bl	b80c <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eb00:	4b23      	ldr	r3, [pc, #140]	; (eb90 <rx_demux+0x1c8>)
		ll_rx_put(link, rx);
    eb02:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eb04:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    eb06:	4628      	mov	r0, r5
    eb08:	4a22      	ldr	r2, [pc, #136]	; (eb94 <rx_demux+0x1cc>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eb0a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    eb0c:	f7fc fe6c 	bl	b7e8 <memq_enqueue>
	k_sem_give(sem_recv);
    eb10:	f8d9 0000 	ldr.w	r0, [r9]
    eb14:	f00b fdd8 	bl	1a6c8 <z_impl_k_sem_give>
			if (nack) {
    eb18:	e797      	b.n	ea4a <rx_demux+0x82>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    eb1a:	4918      	ldr	r1, [pc, #96]	; (eb7c <rx_demux+0x1b4>)
    eb1c:	f8d8 0004 	ldr.w	r0, [r8, #4]
    eb20:	2200      	movs	r2, #0
    eb22:	f7fc fe73 	bl	b80c <memq_dequeue>
		ull_conn_setup(link, rx);
    eb26:	9905      	ldr	r1, [sp, #20]
    eb28:	4628      	mov	r0, r5
    eb2a:	f002 fd43 	bl	115b4 <ull_conn_setup>
			if (nack) {
    eb2e:	e756      	b.n	e9de <rx_demux+0x16>
		nack = ull_conn_rx(link, (void *)&rx);
    eb30:	a905      	add	r1, sp, #20
    eb32:	4628      	mov	r0, r5
    eb34:	f002 fd66 	bl	11604 <ull_conn_rx>
		if (nack) {
    eb38:	b188      	cbz	r0, eb5e <rx_demux+0x196>
}
    eb3a:	b007      	add	sp, #28
    eb3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
    eb40:	4915      	ldr	r1, [pc, #84]	; (eb98 <rx_demux+0x1d0>)
    eb42:	4812      	ldr	r0, [pc, #72]	; (eb8c <rx_demux+0x1c4>)
    eb44:	f640 0346 	movw	r3, #2118	; 0x846
    eb48:	4652      	mov	r2, sl
    eb4a:	f00c fe13 	bl	1b774 <printk>
    eb4e:	4040      	eors	r0, r0
    eb50:	f380 8811 	msr	BASEPRI, r0
    eb54:	f04f 0003 	mov.w	r0, #3
    eb58:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    eb5a:	9b03      	ldr	r3, [sp, #12]
    eb5c:	e74b      	b.n	e9f6 <rx_demux+0x2e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    eb5e:	4907      	ldr	r1, [pc, #28]	; (eb7c <rx_demux+0x1b4>)
    eb60:	4602      	mov	r2, r0
    eb62:	f8d8 0004 	ldr.w	r0, [r8, #4]
    eb66:	f7fc fe51 	bl	b80c <memq_dequeue>
		if (rx) {
    eb6a:	9905      	ldr	r1, [sp, #20]
    eb6c:	2900      	cmp	r1, #0
    eb6e:	f43f af36 	beq.w	e9de <rx_demux+0x16>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eb72:	4b07      	ldr	r3, [pc, #28]	; (eb90 <rx_demux+0x1c8>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    eb74:	4628      	mov	r0, r5
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eb76:	78db      	ldrb	r3, [r3, #3]
    eb78:	e7c6      	b.n	eb08 <rx_demux+0x140>
    eb7a:	bf00      	nop
    eb7c:	20001b38 	.word	0x20001b38
    eb80:	20001b40 	.word	0x20001b40
    eb84:	00021a78 	.word	0x00021a78
    eb88:	000218a4 	.word	0x000218a4
    eb8c:	0002180c 	.word	0x0002180c
    eb90:	20000408 	.word	0x20000408
    eb94:	20001b2c 	.word	0x20001b2c
    eb98:	00021ae4 	.word	0x00021ae4

0000eb9c <ll_init>:
{
    eb9c:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
    eb9e:	4b2b      	ldr	r3, [pc, #172]	; (ec4c <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    eba0:	4d2b      	ldr	r5, [pc, #172]	; (ec50 <ll_init+0xb4>)
	sem_recv = sem_rx;
    eba2:	6018      	str	r0, [r3, #0]
{
    eba4:	b087      	sub	sp, #28
	cntr_init();
    eba6:	f009 f9d5 	bl	17f54 <cntr_init>
	mayfly_init();
    ebaa:	f7fc fe3f 	bl	b82c <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ebae:	4a29      	ldr	r2, [pc, #164]	; (ec54 <ll_init+0xb8>)
    ebb0:	4929      	ldr	r1, [pc, #164]	; (ec58 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    ebb2:	482a      	ldr	r0, [pc, #168]	; (ec5c <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ebb4:	e9cd 2504 	strd	r2, r5, [sp, #16]
    ebb8:	4a29      	ldr	r2, [pc, #164]	; (ec60 <ll_init+0xc4>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    ebba:	2304      	movs	r3, #4
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ebbc:	e9cd 2102 	strd	r2, r1, [sp, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    ebc0:	2402      	movs	r4, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ebc2:	210c      	movs	r1, #12
    ebc4:	e9cd 0100 	strd	r0, r1, [sp]
    ebc8:	4a26      	ldr	r2, [pc, #152]	; (ec64 <ll_init+0xc8>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    ebca:	7003      	strb	r3, [r0, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    ebcc:	7203      	strb	r3, [r0, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    ebce:	7404      	strb	r4, [r0, #16]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_THREAD_OPS;
    ebd0:	7604      	strb	r4, [r0, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    ebd2:	4619      	mov	r1, r3
    ebd4:	2000      	movs	r0, #0
    ebd6:	f7fd ff03 	bl	c9e0 <ticker_init>
	LL_ASSERT(!err);
    ebda:	bb40      	cbnz	r0, ec2e <ll_init+0x92>
	return z_impl_k_sem_init(sem, initial_count, limit);
    ebdc:	2201      	movs	r2, #1
    ebde:	2100      	movs	r1, #0
    ebe0:	4821      	ldr	r0, [pc, #132]	; (ec68 <ll_init+0xcc>)
    ebe2:	f011 fb99 	bl	20318 <z_impl_k_sem_init>
	err = lll_init();
    ebe6:	f007 fc39 	bl	1645c <lll_init>
	if (err) {
    ebea:	4604      	mov	r4, r0
    ebec:	b110      	cbz	r0, ebf4 <ll_init+0x58>
}
    ebee:	4620      	mov	r0, r4
    ebf0:	b007      	add	sp, #28
    ebf2:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
    ebf4:	f7ff fe42 	bl	e87c <init_reset>
	if (err) {
    ebf8:	4604      	mov	r4, r0
    ebfa:	2800      	cmp	r0, #0
    ebfc:	d1f7      	bne.n	ebee <ll_init+0x52>
	err = lll_adv_init();
    ebfe:	f008 f867 	bl	16cd0 <lll_adv_init>
	if (err) {
    ec02:	4604      	mov	r4, r0
    ec04:	2800      	cmp	r0, #0
    ec06:	d1f2      	bne.n	ebee <ll_init+0x52>
	err = ull_adv_init();
    ec08:	f001 fa02 	bl	10010 <ull_adv_init>
	if (err) {
    ec0c:	4604      	mov	r4, r0
    ec0e:	2800      	cmp	r0, #0
    ec10:	d1ed      	bne.n	ebee <ll_init+0x52>
	err = lll_conn_init();
    ec12:	f008 fcff 	bl	17614 <lll_conn_init>
	if (err) {
    ec16:	4604      	mov	r4, r0
    ec18:	2800      	cmp	r0, #0
    ec1a:	d1e8      	bne.n	ebee <ll_init+0x52>
	err = ull_conn_init();
    ec1c:	f002 fc76 	bl	1150c <ull_conn_init>
	if (err) {
    ec20:	4604      	mov	r4, r0
    ec22:	2800      	cmp	r0, #0
    ec24:	d1e3      	bne.n	ebee <ll_init+0x52>
		ull_filter_reset(true);
    ec26:	2001      	movs	r0, #1
    ec28:	f007 f974 	bl	15f14 <ull_filter_reset>
	return  0;
    ec2c:	e7df      	b.n	ebee <ll_init+0x52>
	LL_ASSERT(!err);
    ec2e:	4a0f      	ldr	r2, [pc, #60]	; (ec6c <ll_init+0xd0>)
    ec30:	490f      	ldr	r1, [pc, #60]	; (ec70 <ll_init+0xd4>)
    ec32:	4810      	ldr	r0, [pc, #64]	; (ec74 <ll_init+0xd8>)
    ec34:	f240 13e7 	movw	r3, #487	; 0x1e7
    ec38:	f00c fd9c 	bl	1b774 <printk>
    ec3c:	4040      	eors	r0, r0
    ec3e:	f380 8811 	msr	BASEPRI, r0
    ec42:	f04f 0003 	mov.w	r0, #3
    ec46:	df02      	svc	2
    ec48:	e7c8      	b.n	ebdc <ll_init+0x40>
    ec4a:	bf00      	nop
    ec4c:	20001b40 	.word	0x20001b40
    ec50:	00018bfd 	.word	0x00018bfd
    ec54:	00018aad 	.word	0x00018aad
    ec58:	00018a49 	.word	0x00018a49
    ec5c:	20001e8c 	.word	0x20001e8c
    ec60:	20001c1c 	.word	0x20001c1c
    ec64:	20001b5c 	.word	0x20001b5c
    ec68:	20001b44 	.word	0x20001b44
    ec6c:	00021a78 	.word	0x00021a78
    ec70:	00021ab4 	.word	0x00021ab4
    ec74:	0002180c 	.word	0x0002180c

0000ec78 <ll_reset>:
{
    ec78:	b510      	push	{r4, lr}
    ec7a:	b086      	sub	sp, #24
	err = ull_adv_reset();
    ec7c:	f001 f9d8 	bl	10030 <ull_adv_reset>
	LL_ASSERT(!err);
    ec80:	2800      	cmp	r0, #0
    ec82:	d130      	bne.n	ece6 <ll_reset+0x6e>
	err = ull_conn_reset();
    ec84:	f002 fc44 	bl	11510 <ull_conn_reset>
	LL_ASSERT(!err);
    ec88:	2800      	cmp	r0, #0
    ec8a:	d13d      	bne.n	ed08 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
    ec8c:	4b3b      	ldr	r3, [pc, #236]	; (ed7c <ll_reset+0x104>)
    ec8e:	2400      	movs	r4, #0
		ull_filter_reset(false);
    ec90:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
    ec92:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    ec94:	f007 f93e 	bl	15f14 <ull_filter_reset>
	MFIFO_INIT(prep);
    ec98:	4839      	ldr	r0, [pc, #228]	; (ed80 <ll_reset+0x108>)
	MFIFO_INIT(done);
    ec9a:	493a      	ldr	r1, [pc, #232]	; (ed84 <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
    ec9c:	4a3a      	ldr	r2, [pc, #232]	; (ed88 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
    ec9e:	4b3b      	ldr	r3, [pc, #236]	; (ed8c <ll_reset+0x114>)
	MFIFO_INIT(prep);
    eca0:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
    eca2:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
    eca4:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    eca6:	805c      	strh	r4, [r3, #2]
    eca8:	2201      	movs	r2, #1
    ecaa:	4621      	mov	r1, r4
    ecac:	4668      	mov	r0, sp
    ecae:	f011 fb33 	bl	20318 <z_impl_k_sem_init>
		mfy.param = &sem;
    ecb2:	4b37      	ldr	r3, [pc, #220]	; (ed90 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    ecb4:	4622      	mov	r2, r4
    ecb6:	4621      	mov	r1, r4
    ecb8:	2003      	movs	r0, #3
		mfy.param = &sem;
    ecba:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    ecbe:	f7fc fe07 	bl	b8d0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    ecc2:	2800      	cmp	r0, #0
    ecc4:	d14b      	bne.n	ed5e <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
    ecc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ecca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ecce:	4668      	mov	r0, sp
    ecd0:	f00b fd20 	bl	1a714 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
    ecd4:	f001 f9c6 	bl	10064 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
    ecd8:	2800      	cmp	r0, #0
    ecda:	d132      	bne.n	ed42 <ll_reset+0xca>
	err = init_reset();
    ecdc:	f7ff fdce 	bl	e87c <init_reset>
	LL_ASSERT(!err);
    ece0:	bb00      	cbnz	r0, ed24 <ll_reset+0xac>
}
    ece2:	b006      	add	sp, #24
    ece4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    ece6:	4a2b      	ldr	r2, [pc, #172]	; (ed94 <ll_reset+0x11c>)
    ece8:	492b      	ldr	r1, [pc, #172]	; (ed98 <ll_reset+0x120>)
    ecea:	482c      	ldr	r0, [pc, #176]	; (ed9c <ll_reset+0x124>)
    ecec:	f240 2387 	movw	r3, #647	; 0x287
    ecf0:	f00c fd40 	bl	1b774 <printk>
    ecf4:	4040      	eors	r0, r0
    ecf6:	f380 8811 	msr	BASEPRI, r0
    ecfa:	f04f 0003 	mov.w	r0, #3
    ecfe:	df02      	svc	2
	err = ull_conn_reset();
    ed00:	f002 fc06 	bl	11510 <ull_conn_reset>
	LL_ASSERT(!err);
    ed04:	2800      	cmp	r0, #0
    ed06:	d0c1      	beq.n	ec8c <ll_reset+0x14>
    ed08:	4a22      	ldr	r2, [pc, #136]	; (ed94 <ll_reset+0x11c>)
    ed0a:	4923      	ldr	r1, [pc, #140]	; (ed98 <ll_reset+0x120>)
    ed0c:	4823      	ldr	r0, [pc, #140]	; (ed9c <ll_reset+0x124>)
    ed0e:	f240 23e1 	movw	r3, #737	; 0x2e1
    ed12:	f00c fd2f 	bl	1b774 <printk>
    ed16:	4040      	eors	r0, r0
    ed18:	f380 8811 	msr	BASEPRI, r0
    ed1c:	f04f 0003 	mov.w	r0, #3
    ed20:	df02      	svc	2
    ed22:	e7b3      	b.n	ec8c <ll_reset+0x14>
	LL_ASSERT(!err);
    ed24:	4a1b      	ldr	r2, [pc, #108]	; (ed94 <ll_reset+0x11c>)
    ed26:	491c      	ldr	r1, [pc, #112]	; (ed98 <ll_reset+0x120>)
    ed28:	481c      	ldr	r0, [pc, #112]	; (ed9c <ll_reset+0x124>)
    ed2a:	f240 3325 	movw	r3, #805	; 0x325
    ed2e:	f00c fd21 	bl	1b774 <printk>
    ed32:	4040      	eors	r0, r0
    ed34:	f380 8811 	msr	BASEPRI, r0
    ed38:	f04f 0003 	mov.w	r0, #3
    ed3c:	df02      	svc	2
}
    ed3e:	b006      	add	sp, #24
    ed40:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
    ed42:	4a14      	ldr	r2, [pc, #80]	; (ed94 <ll_reset+0x11c>)
    ed44:	4914      	ldr	r1, [pc, #80]	; (ed98 <ll_reset+0x120>)
    ed46:	4815      	ldr	r0, [pc, #84]	; (ed9c <ll_reset+0x124>)
    ed48:	f44f 7348 	mov.w	r3, #800	; 0x320
    ed4c:	f00c fd12 	bl	1b774 <printk>
    ed50:	4040      	eors	r0, r0
    ed52:	f380 8811 	msr	BASEPRI, r0
    ed56:	f04f 0003 	mov.w	r0, #3
    ed5a:	df02      	svc	2
    ed5c:	e7be      	b.n	ecdc <ll_reset+0x64>
		LL_ASSERT(!retval);
    ed5e:	4a0d      	ldr	r2, [pc, #52]	; (ed94 <ll_reset+0x11c>)
    ed60:	490f      	ldr	r1, [pc, #60]	; (eda0 <ll_reset+0x128>)
    ed62:	480e      	ldr	r0, [pc, #56]	; (ed9c <ll_reset+0x124>)
    ed64:	f240 3313 	movw	r3, #787	; 0x313
    ed68:	f00c fd04 	bl	1b774 <printk>
    ed6c:	4040      	eors	r0, r0
    ed6e:	f380 8811 	msr	BASEPRI, r0
    ed72:	f04f 0003 	mov.w	r0, #3
    ed76:	df02      	svc	2
    ed78:	e7a5      	b.n	ecc6 <ll_reset+0x4e>
    ed7a:	bf00      	nop
    ed7c:	20000408 	.word	0x20000408
    ed80:	20000304 	.word	0x20000304
    ed84:	200002cc 	.word	0x200002cc
    ed88:	200002ec 	.word	0x200002ec
    ed8c:	200002e0 	.word	0x200002e0
    ed90:	2000043c 	.word	0x2000043c
    ed94:	00021a78 	.word	0x00021a78
    ed98:	00021ab4 	.word	0x00021ab4
    ed9c:	0002180c 	.word	0x0002180c
    eda0:	00021ae8 	.word	0x00021ae8

0000eda4 <ll_rx_get>:
{
    eda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eda8:	b085      	sub	sp, #20
    edaa:	e9cd 0100 	strd	r0, r1, [sp]
    edae:	4c63      	ldr	r4, [pc, #396]	; (ef3c <ll_rx_get+0x198>)
				mem_release(link, &mem_link_rx.free);
    edb0:	4d63      	ldr	r5, [pc, #396]	; (ef40 <ll_rx_get+0x19c>)
    edb2:	4e64      	ldr	r6, [pc, #400]	; (ef44 <ll_rx_get+0x1a0>)
	*node_rx = NULL;
    edb4:	9a00      	ldr	r2, [sp, #0]
    edb6:	2300      	movs	r3, #0
    edb8:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    edba:	e9d6 0100 	ldrd	r0, r1, [r6]
    edbe:	aa03      	add	r2, sp, #12
    edc0:	f7fc fd1c 	bl	b7fc <memq_peek>
	if (link) {
    edc4:	4680      	mov	r8, r0
    edc6:	2800      	cmp	r0, #0
    edc8:	f000 809f 	beq.w	ef0a <ll_rx_get+0x166>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    edcc:	9b03      	ldr	r3, [sp, #12]
    edce:	495e      	ldr	r1, [pc, #376]	; (ef48 <ll_rx_get+0x1a4>)
    edd0:	781a      	ldrb	r2, [r3, #0]
    edd2:	9801      	ldr	r0, [sp, #4]
    edd4:	f7ff fbee 	bl	e5b4 <tx_cmplt_get>
		if (!cmplt) {
    edd8:	2800      	cmp	r0, #0
    edda:	f040 809b 	bne.w	ef14 <ll_rx_get+0x170>
			f = mfifo_tx_ack.f;
    edde:	78a3      	ldrb	r3, [r4, #2]
    ede0:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    ede4:	78e2      	ldrb	r2, [r4, #3]
    ede6:	4607      	mov	r7, r0
    ede8:	f10d 0109 	add.w	r1, sp, #9
    edec:	f10d 000a 	add.w	r0, sp, #10
    edf0:	f7ff fbe0 	bl	e5b4 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
    edf4:	ea47 0200 	orr.w	r2, r7, r0
    edf8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    edfc:	d1f2      	bne.n	ede4 <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
    edfe:	9b03      	ldr	r3, [sp, #12]
    ee00:	7919      	ldrb	r1, [r3, #4]
    ee02:	2901      	cmp	r1, #1
    ee04:	f040 8093 	bne.w	ef2e <ll_rx_get+0x18a>
				(void)memq_dequeue(memq_ll_rx.tail,
    ee08:	494e      	ldr	r1, [pc, #312]	; (ef44 <ll_rx_get+0x1a0>)
    ee0a:	6870      	ldr	r0, [r6, #4]
    ee0c:	f7fc fcfe 	bl	b80c <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    ee10:	494e      	ldr	r1, [pc, #312]	; (ef4c <ll_rx_get+0x1a8>)
    ee12:	4640      	mov	r0, r8
    ee14:	f7fc fc9e 	bl	b754 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ee18:	782b      	ldrb	r3, [r5, #0]
    ee1a:	2b04      	cmp	r3, #4
    ee1c:	d866      	bhi.n	eeec <ll_rx_get+0x148>
	mem_link_rx.quota_pdu += delta;
    ee1e:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    ee20:	494b      	ldr	r1, [pc, #300]	; (ef50 <ll_rx_get+0x1ac>)
    ee22:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    ee24:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    ee26:	f7fc fc95 	bl	b754 <mem_release>
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee2a:	782b      	ldrb	r3, [r5, #0]
    ee2c:	2b00      	cmp	r3, #0
    ee2e:	d0c1      	beq.n	edb4 <ll_rx_get+0x10>
    ee30:	f8df 8120 	ldr.w	r8, [pc, #288]	; ef54 <ll_rx_get+0x1b0>
	last = last + 1;
    ee34:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
    ee38:	f898 2001 	ldrb.w	r2, [r8, #1]
    ee3c:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    ee40:	3701      	adds	r7, #1
    ee42:	b2ff      	uxtb	r7, r7
		last = 0U;
    ee44:	42ba      	cmp	r2, r7
    ee46:	bf08      	it	eq
    ee48:	2700      	moveq	r7, #0
	if (last == first) {
    ee4a:	429f      	cmp	r7, r3
    ee4c:	d019      	beq.n	ee82 <ll_rx_get+0xde>
		link = mem_acquire(&mem_link_rx.free);
    ee4e:	483f      	ldr	r0, [pc, #252]	; (ef4c <ll_rx_get+0x1a8>)
    ee50:	f7fc fc66 	bl	b720 <mem_acquire>
		if (!link) {
    ee54:	4681      	mov	r9, r0
    ee56:	2800      	cmp	r0, #0
    ee58:	d0ac      	beq.n	edb4 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    ee5a:	483d      	ldr	r0, [pc, #244]	; (ef50 <ll_rx_get+0x1ac>)
    ee5c:	f7fc fc60 	bl	b720 <mem_acquire>
		if (!rx) {
    ee60:	2800      	cmp	r0, #0
    ee62:	d05a      	beq.n	ef1a <ll_rx_get+0x176>
		rx->link = link;
    ee64:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ee68:	f898 2003 	ldrb.w	r2, [r8, #3]
    ee6c:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ee70:	fb02 8303 	mla	r3, r2, r3, r8
    ee74:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    ee76:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    ee78:	f888 7003 	strb.w	r7, [r8, #3]
    ee7c:	3b01      	subs	r3, #1
    ee7e:	702b      	strb	r3, [r5, #0]
	while (max && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee80:	e798      	b.n	edb4 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    ee82:	f8df 80d4 	ldr.w	r8, [pc, #212]	; ef58 <ll_rx_get+0x1b4>
		link = mem_acquire(&mem_link_rx.free);
    ee86:	f8df 90c4 	ldr.w	r9, [pc, #196]	; ef4c <ll_rx_get+0x1a8>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    ee8a:	f898 7003 	ldrb.w	r7, [r8, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    ee8e:	f8df a0c0 	ldr.w	sl, [pc, #192]	; ef50 <ll_rx_get+0x1ac>
	if (last == count) {
    ee92:	f898 2001 	ldrb.w	r2, [r8, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    ee96:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
    ee9a:	3701      	adds	r7, #1
    ee9c:	b2ff      	uxtb	r7, r7
		last = 0U;
    ee9e:	42ba      	cmp	r2, r7
    eea0:	bf08      	it	eq
    eea2:	2700      	moveq	r7, #0
	if (last == first) {
    eea4:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
    eea6:	4648      	mov	r0, r9
    eea8:	d084      	beq.n	edb4 <ll_rx_get+0x10>
    eeaa:	f7fc fc39 	bl	b720 <mem_acquire>
    eeae:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    eeb0:	4650      	mov	r0, sl
		if (!link) {
    eeb2:	f1bb 0f00 	cmp.w	fp, #0
    eeb6:	f43f af7d 	beq.w	edb4 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
    eeba:	f7fc fc31 	bl	b720 <mem_acquire>
		if (!rx) {
    eebe:	2800      	cmp	r0, #0
    eec0:	d030      	beq.n	ef24 <ll_rx_get+0x180>
		link->mem = NULL;
    eec2:	2300      	movs	r3, #0
    eec4:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    eec8:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    eecc:	f898 2003 	ldrb.w	r2, [r8, #3]
    eed0:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    eed4:	fb02 8303 	mla	r3, r2, r3, r8
    eed8:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
    eeda:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    eedc:	f888 7003 	strb.w	r7, [r8, #3]
    eee0:	3b01      	subs	r3, #1
    eee2:	b2db      	uxtb	r3, r3
    eee4:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
    eee6:	2b00      	cmp	r3, #0
    eee8:	d1d3      	bne.n	ee92 <ll_rx_get+0xee>
    eeea:	e763      	b.n	edb4 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    eeec:	4a1b      	ldr	r2, [pc, #108]	; (ef5c <ll_rx_get+0x1b8>)
    eeee:	491c      	ldr	r1, [pc, #112]	; (ef60 <ll_rx_get+0x1bc>)
    eef0:	481c      	ldr	r0, [pc, #112]	; (ef64 <ll_rx_get+0x1c0>)
    eef2:	f240 5384 	movw	r3, #1412	; 0x584
    eef6:	f00c fc3d 	bl	1b774 <printk>
    eefa:	4040      	eors	r0, r0
    eefc:	f380 8811 	msr	BASEPRI, r0
    ef00:	f04f 0003 	mov.w	r0, #3
    ef04:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    ef06:	782b      	ldrb	r3, [r5, #0]
    ef08:	e789      	b.n	ee1e <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    ef0a:	78e2      	ldrb	r2, [r4, #3]
    ef0c:	490e      	ldr	r1, [pc, #56]	; (ef48 <ll_rx_get+0x1a4>)
    ef0e:	9801      	ldr	r0, [sp, #4]
    ef10:	f7ff fb50 	bl	e5b4 <tx_cmplt_get>
}
    ef14:	b005      	add	sp, #20
    ef16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    ef1a:	490c      	ldr	r1, [pc, #48]	; (ef4c <ll_rx_get+0x1a8>)
    ef1c:	4648      	mov	r0, r9
    ef1e:	f7fc fc19 	bl	b754 <mem_release>
			return;
    ef22:	e747      	b.n	edb4 <ll_rx_get+0x10>
			mem_release(link, &mem_link_rx.free);
    ef24:	4909      	ldr	r1, [pc, #36]	; (ef4c <ll_rx_get+0x1a8>)
    ef26:	4658      	mov	r0, fp
    ef28:	f7fc fc14 	bl	b754 <mem_release>
			return;
    ef2c:	e742      	b.n	edb4 <ll_rx_get+0x10>
			*node_rx = rx;
    ef2e:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ef30:	4610      	mov	r0, r2
			*node_rx = rx;
    ef32:	600b      	str	r3, [r1, #0]
}
    ef34:	b005      	add	sp, #20
    ef36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef3a:	bf00      	nop
    ef3c:	20000408 	.word	0x20000408
    ef40:	200018dc 	.word	0x200018dc
    ef44:	20001b28 	.word	0x20001b28
    ef48:	2000040a 	.word	0x2000040a
    ef4c:	200018e0 	.word	0x200018e0
    ef50:	2000192c 	.word	0x2000192c
    ef54:	200002ec 	.word	0x200002ec
    ef58:	200002e0 	.word	0x200002e0
    ef5c:	00021a78 	.word	0x00021a78
    ef60:	00021af0 	.word	0x00021af0
    ef64:	0002180c 	.word	0x0002180c

0000ef68 <ll_rx_dequeue>:
{
    ef68:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    ef6a:	495d      	ldr	r1, [pc, #372]	; (f0e0 <ll_rx_dequeue+0x178>)
{
    ef6c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    ef6e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    ef70:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    ef72:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    ef74:	aa01      	add	r2, sp, #4
    ef76:	f7fc fc49 	bl	b80c <memq_dequeue>
	LL_ASSERT(link);
    ef7a:	4604      	mov	r4, r0
    ef7c:	2800      	cmp	r0, #0
    ef7e:	d062      	beq.n	f046 <ll_rx_dequeue+0xde>
	mem_release(link, &mem_link_rx.free);
    ef80:	4958      	ldr	r1, [pc, #352]	; (f0e4 <ll_rx_dequeue+0x17c>)
    ef82:	4620      	mov	r0, r4
    ef84:	f7fc fbe6 	bl	b754 <mem_release>
	switch (rx->type) {
    ef88:	9a01      	ldr	r2, [sp, #4]
    ef8a:	7913      	ldrb	r3, [r2, #4]
    ef8c:	2b1a      	cmp	r3, #26
    ef8e:	d80f      	bhi.n	efb0 <ll_rx_dequeue+0x48>
    ef90:	e8df f003 	tbb	[pc, r3]
    ef94:	1d0e0e1d 	.word	0x1d0e0e1d
    ef98:	0e0e0e0e 	.word	0x0e0e0e0e
    ef9c:	0e0e0e0e 	.word	0x0e0e0e0e
    efa0:	0e0e0e0e 	.word	0x0e0e0e0e
    efa4:	0e0e0e0e 	.word	0x0e0e0e0e
    efa8:	1d1d1d2e 	.word	0x1d1d1d2e
    efac:	1d1d      	.short	0x1d1d
    efae:	1d          	.byte	0x1d
    efaf:	00          	.byte	0x00
		LL_ASSERT(0);
    efb0:	4a4d      	ldr	r2, [pc, #308]	; (f0e8 <ll_rx_dequeue+0x180>)
    efb2:	494e      	ldr	r1, [pc, #312]	; (f0ec <ll_rx_dequeue+0x184>)
    efb4:	484e      	ldr	r0, [pc, #312]	; (f0f0 <ll_rx_dequeue+0x188>)
    efb6:	f240 4393 	movw	r3, #1171	; 0x493
    efba:	f00c fbdb 	bl	1b774 <printk>
    efbe:	4040      	eors	r0, r0
    efc0:	f380 8811 	msr	BASEPRI, r0
    efc4:	f04f 0003 	mov.w	r0, #3
    efc8:	df02      	svc	2
}
    efca:	b002      	add	sp, #8
    efcc:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    efce:	2b00      	cmp	r3, #0
    efd0:	d1fb      	bne.n	efca <ll_rx_dequeue+0x62>
    efd2:	4a45      	ldr	r2, [pc, #276]	; (f0e8 <ll_rx_dequeue+0x180>)
    efd4:	4947      	ldr	r1, [pc, #284]	; (f0f4 <ll_rx_dequeue+0x18c>)
    efd6:	4846      	ldr	r0, [pc, #280]	; (f0f0 <ll_rx_dequeue+0x188>)
    efd8:	f240 438f 	movw	r3, #1167	; 0x48f
    efdc:	f00c fbca 	bl	1b774 <printk>
    efe0:	4040      	eors	r0, r0
    efe2:	f380 8811 	msr	BASEPRI, r0
    efe6:	f04f 0003 	mov.w	r0, #3
    efea:	df02      	svc	2
}
    efec:	b002      	add	sp, #8
    efee:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    eff0:	7f13      	ldrb	r3, [r2, #28]
    eff2:	2b3c      	cmp	r3, #60	; 0x3c
    eff4:	d035      	beq.n	f062 <ll_rx_dequeue+0xfa>
    eff6:	7f53      	ldrb	r3, [r2, #29]
    eff8:	b1bb      	cbz	r3, f02a <ll_rx_dequeue+0xc2>
			adv = HDR_LLL2ULL(lll);
    effa:	6893      	ldr	r3, [r2, #8]
    effc:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    effe:	6e60      	ldr	r0, [r4, #100]	; 0x64
    f000:	b120      	cbz	r0, f00c <ll_rx_dequeue+0xa4>
					adv->node_rx_cc_free = NULL;
    f002:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    f004:	493c      	ldr	r1, [pc, #240]	; (f0f8 <ll_rx_dequeue+0x190>)
					adv->node_rx_cc_free = NULL;
    f006:	6663      	str	r3, [r4, #100]	; 0x64
					mem_release(rx_free, &mem_pdu_rx.free);
    f008:	f7fc fba4 	bl	b754 <mem_release>
			adv->is_enabled = 0U;
    f00c:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    f010:	f36f 0300 	bfc	r3, #0, #1
    f014:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
			      ull_adv_is_enabled(0));
    f018:	2000      	movs	r0, #0
    f01a:	f001 f863 	bl	100e4 <ull_adv_is_enabled>
			if (!bm) {
    f01e:	2800      	cmp	r0, #0
    f020:	d1d3      	bne.n	efca <ll_rx_dequeue+0x62>
				ull_filter_adv_scan_state_cb(0);
    f022:	f006 fcd5 	bl	159d0 <ull_filter_adv_scan_state_cb>
}
    f026:	b002      	add	sp, #8
    f028:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    f02a:	4a2f      	ldr	r2, [pc, #188]	; (f0e8 <ll_rx_dequeue+0x180>)
    f02c:	492f      	ldr	r1, [pc, #188]	; (f0ec <ll_rx_dequeue+0x184>)
    f02e:	4830      	ldr	r0, [pc, #192]	; (f0f0 <ll_rx_dequeue+0x188>)
    f030:	f240 432a 	movw	r3, #1066	; 0x42a
    f034:	f00c fb9e 	bl	1b774 <printk>
    f038:	4040      	eors	r0, r0
    f03a:	f380 8811 	msr	BASEPRI, r0
    f03e:	f04f 0003 	mov.w	r0, #3
    f042:	df02      	svc	2
    f044:	e7e8      	b.n	f018 <ll_rx_dequeue+0xb0>
	LL_ASSERT(link);
    f046:	4a28      	ldr	r2, [pc, #160]	; (f0e8 <ll_rx_dequeue+0x180>)
    f048:	492c      	ldr	r1, [pc, #176]	; (f0fc <ll_rx_dequeue+0x194>)
    f04a:	4829      	ldr	r0, [pc, #164]	; (f0f0 <ll_rx_dequeue+0x188>)
    f04c:	f240 3377 	movw	r3, #887	; 0x377
    f050:	f00c fb90 	bl	1b774 <printk>
    f054:	4040      	eors	r0, r0
    f056:	f380 8811 	msr	BASEPRI, r0
    f05a:	f04f 0003 	mov.w	r0, #3
    f05e:	df02      	svc	2
    f060:	e78e      	b.n	ef80 <ll_rx_dequeue+0x18>
			lll = ftr->param;
    f062:	6896      	ldr	r6, [r2, #8]
			adv = HDR_LLL2ULL(lll);
    f064:	e9d6 4500 	ldrd	r4, r5, [r6]
				LL_ASSERT(conn_lll);
    f068:	b1ed      	cbz	r5, f0a6 <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
    f06a:	6dab      	ldr	r3, [r5, #88]	; 0x58
				lll->conn = NULL;
    f06c:	2200      	movs	r2, #0
    f06e:	6072      	str	r2, [r6, #4]
				LL_ASSERT(!conn_lll->link_tx_free);
    f070:	b163      	cbz	r3, f08c <ll_rx_dequeue+0x124>
    f072:	4a1d      	ldr	r2, [pc, #116]	; (f0e8 <ll_rx_dequeue+0x180>)
    f074:	4922      	ldr	r1, [pc, #136]	; (f100 <ll_rx_dequeue+0x198>)
    f076:	481e      	ldr	r0, [pc, #120]	; (f0f0 <ll_rx_dequeue+0x188>)
    f078:	f44f 737c 	mov.w	r3, #1008	; 0x3f0
    f07c:	f00c fb7a 	bl	1b774 <printk>
    f080:	4040      	eors	r0, r0
    f082:	f380 8811 	msr	BASEPRI, r0
    f086:	f04f 0003 	mov.w	r0, #3
    f08a:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    f08c:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    f090:	f105 0048 	add.w	r0, r5, #72	; 0x48
    f094:	f7fc fb9e 	bl	b7d4 <memq_deinit>
				LL_ASSERT(link);
    f098:	4606      	mov	r6, r0
    f09a:	b190      	cbz	r0, f0c2 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
    f09c:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    f09e:	65ae      	str	r6, [r5, #88]	; 0x58
				ll_conn_release(conn);
    f0a0:	f001 ff34 	bl	10f0c <ll_conn_release>
    f0a4:	e7b2      	b.n	f00c <ll_rx_dequeue+0xa4>
				LL_ASSERT(conn_lll);
    f0a6:	4a10      	ldr	r2, [pc, #64]	; (f0e8 <ll_rx_dequeue+0x180>)
    f0a8:	4916      	ldr	r1, [pc, #88]	; (f104 <ll_rx_dequeue+0x19c>)
    f0aa:	4811      	ldr	r0, [pc, #68]	; (f0f0 <ll_rx_dequeue+0x188>)
    f0ac:	f240 33ed 	movw	r3, #1005	; 0x3ed
    f0b0:	f00c fb60 	bl	1b774 <printk>
    f0b4:	4040      	eors	r0, r0
    f0b6:	f380 8811 	msr	BASEPRI, r0
    f0ba:	f04f 0003 	mov.w	r0, #3
    f0be:	df02      	svc	2
    f0c0:	e7d3      	b.n	f06a <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
    f0c2:	4a09      	ldr	r2, [pc, #36]	; (f0e8 <ll_rx_dequeue+0x180>)
    f0c4:	490d      	ldr	r1, [pc, #52]	; (f0fc <ll_rx_dequeue+0x194>)
    f0c6:	480a      	ldr	r0, [pc, #40]	; (f0f0 <ll_rx_dequeue+0x188>)
    f0c8:	f240 33f3 	movw	r3, #1011	; 0x3f3
    f0cc:	f00c fb52 	bl	1b774 <printk>
    f0d0:	4040      	eors	r0, r0
    f0d2:	f380 8811 	msr	BASEPRI, r0
    f0d6:	f04f 0003 	mov.w	r0, #3
    f0da:	df02      	svc	2
    f0dc:	e7de      	b.n	f09c <ll_rx_dequeue+0x134>
    f0de:	bf00      	nop
    f0e0:	20001b28 	.word	0x20001b28
    f0e4:	200018e0 	.word	0x200018e0
    f0e8:	00021a78 	.word	0x00021a78
    f0ec:	000218a4 	.word	0x000218a4
    f0f0:	0002180c 	.word	0x0002180c
    f0f4:	00021b50 	.word	0x00021b50
    f0f8:	2000192c 	.word	0x2000192c
    f0fc:	00021e08 	.word	0x00021e08
    f100:	00021b38 	.word	0x00021b38
    f104:	00021b2c 	.word	0x00021b2c

0000f108 <ll_rx_mem_release>:
{
    f108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
    f10c:	6804      	ldr	r4, [r0, #0]
{
    f10e:	4680      	mov	r8, r0
	while (rx) {
    f110:	b33c      	cbz	r4, f162 <ll_rx_mem_release+0x5a>
			LL_ASSERT(0);
    f112:	4f54      	ldr	r7, [pc, #336]	; (f264 <ll_rx_mem_release+0x15c>)
    f114:	f8df 9150 	ldr.w	r9, [pc, #336]	; f268 <ll_rx_mem_release+0x160>
    f118:	4e54      	ldr	r6, [pc, #336]	; (f26c <ll_rx_mem_release+0x164>)
		rx = rx->next;
    f11a:	4625      	mov	r5, r4
    f11c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    f11e:	792b      	ldrb	r3, [r5, #4]
    f120:	2b1a      	cmp	r3, #26
    f122:	d80f      	bhi.n	f144 <ll_rx_mem_release+0x3c>
    f124:	e8df f003 	tbb	[pc, r3]
    f128:	370e0e37 	.word	0x370e0e37
    f12c:	0e0e0e0e 	.word	0x0e0e0e0e
    f130:	0e0e0e0e 	.word	0x0e0e0e0e
    f134:	0e0e0e0e 	.word	0x0e0e0e0e
    f138:	0e0e0e0e 	.word	0x0e0e0e0e
    f13c:	37375525 	.word	0x37375525
    f140:	3737      	.short	0x3737
    f142:	37          	.byte	0x37
    f143:	00          	.byte	0x00
			LL_ASSERT(0);
    f144:	f44f 63af 	mov.w	r3, #1400	; 0x578
    f148:	463a      	mov	r2, r7
    f14a:	4649      	mov	r1, r9
    f14c:	4630      	mov	r0, r6
    f14e:	f00c fb11 	bl	1b774 <printk>
    f152:	4040      	eors	r0, r0
    f154:	f380 8811 	msr	BASEPRI, r0
    f158:	f04f 0003 	mov.w	r0, #3
    f15c:	df02      	svc	2
	while (rx) {
    f15e:	2c00      	cmp	r4, #0
    f160:	d1db      	bne.n	f11a <ll_rx_mem_release+0x12>
	*node_rx = rx;
    f162:	2300      	movs	r3, #0
    f164:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
    f168:	20ff      	movs	r0, #255	; 0xff
}
    f16a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
    f16e:	f7ff bb11 	b.w	e794 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    f172:	7f2b      	ldrb	r3, [r5, #28]
    f174:	2b3c      	cmp	r3, #60	; 0x3c
    f176:	d05f      	beq.n	f238 <ll_rx_mem_release+0x130>
				LL_ASSERT(!cc->status);
    f178:	b1db      	cbz	r3, f1b2 <ll_rx_mem_release+0xaa>
    f17a:	493d      	ldr	r1, [pc, #244]	; (f270 <ll_rx_mem_release+0x168>)
    f17c:	f240 43e9 	movw	r3, #1257	; 0x4e9
    f180:	463a      	mov	r2, r7
    f182:	4630      	mov	r0, r6
    f184:	f00c faf6 	bl	1b774 <printk>
    f188:	4040      	eors	r0, r0
    f18a:	f380 8811 	msr	BASEPRI, r0
    f18e:	f04f 0003 	mov.w	r0, #3
    f192:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    f194:	792b      	ldrb	r3, [r5, #4]
    f196:	b963      	cbnz	r3, f1b2 <ll_rx_mem_release+0xaa>
    f198:	4936      	ldr	r1, [pc, #216]	; (f274 <ll_rx_mem_release+0x16c>)
    f19a:	f240 533b 	movw	r3, #1339	; 0x53b
    f19e:	463a      	mov	r2, r7
    f1a0:	4630      	mov	r0, r6
    f1a2:	f00c fae7 	bl	1b774 <printk>
    f1a6:	4040      	eors	r0, r0
    f1a8:	f380 8811 	msr	BASEPRI, r0
    f1ac:	f04f 0003 	mov.w	r0, #3
    f1b0:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    f1b2:	f8df a0c4 	ldr.w	sl, [pc, #196]	; f278 <ll_rx_mem_release+0x170>
    f1b6:	f89a 3000 	ldrb.w	r3, [sl]
    f1ba:	2b04      	cmp	r3, #4
    f1bc:	d82c      	bhi.n	f218 <ll_rx_mem_release+0x110>
	mem_link_rx.quota_pdu += delta;
    f1be:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    f1c0:	492e      	ldr	r1, [pc, #184]	; (f27c <ll_rx_mem_release+0x174>)
	mem_link_rx.quota_pdu += delta;
    f1c2:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
    f1c6:	4628      	mov	r0, r5
    f1c8:	f7fc fac4 	bl	b754 <mem_release>
	while (rx) {
    f1cc:	2c00      	cmp	r4, #0
    f1ce:	d1a4      	bne.n	f11a <ll_rx_mem_release+0x12>
    f1d0:	e7c7      	b.n	f162 <ll_rx_mem_release+0x5a>
			conn = ll_conn_get(rx_free->handle);
    f1d2:	88e8      	ldrh	r0, [r5, #6]
    f1d4:	f001 fea8 	bl	10f28 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    f1d8:	6f43      	ldr	r3, [r0, #116]	; 0x74
			conn = ll_conn_get(rx_free->handle);
    f1da:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    f1dc:	b163      	cbz	r3, f1f8 <ll_rx_mem_release+0xf0>
    f1de:	4928      	ldr	r1, [pc, #160]	; (f280 <ll_rx_mem_release+0x178>)
    f1e0:	f240 536b 	movw	r3, #1387	; 0x56b
    f1e4:	463a      	mov	r2, r7
    f1e6:	4630      	mov	r0, r6
    f1e8:	f00c fac4 	bl	1b774 <printk>
    f1ec:	4040      	eors	r0, r0
    f1ee:	f380 8811 	msr	BASEPRI, r0
    f1f2:	f04f 0003 	mov.w	r0, #3
    f1f6:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    f1f8:	f105 0168 	add.w	r1, r5, #104	; 0x68
    f1fc:	f105 0064 	add.w	r0, r5, #100	; 0x64
    f200:	f7fc fae8 	bl	b7d4 <memq_deinit>
			LL_ASSERT(link);
    f204:	4682      	mov	sl, r0
    f206:	b1f8      	cbz	r0, f248 <ll_rx_mem_release+0x140>
			conn->lll.link_tx_free = link;
    f208:	f8c5 a074 	str.w	sl, [r5, #116]	; 0x74
			ll_conn_release(conn);
    f20c:	4628      	mov	r0, r5
    f20e:	f001 fe7d 	bl	10f0c <ll_conn_release>
	while (rx) {
    f212:	2c00      	cmp	r4, #0
    f214:	d181      	bne.n	f11a <ll_rx_mem_release+0x12>
    f216:	e7a4      	b.n	f162 <ll_rx_mem_release+0x5a>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    f218:	491a      	ldr	r1, [pc, #104]	; (f284 <ll_rx_mem_release+0x17c>)
    f21a:	f240 5384 	movw	r3, #1412	; 0x584
    f21e:	463a      	mov	r2, r7
    f220:	4630      	mov	r0, r6
    f222:	f00c faa7 	bl	1b774 <printk>
    f226:	4040      	eors	r0, r0
    f228:	f380 8811 	msr	BASEPRI, r0
    f22c:	f04f 0003 	mov.w	r0, #3
    f230:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
    f232:	f89a 3000 	ldrb.w	r3, [sl]
    f236:	e7c2      	b.n	f1be <ll_rx_mem_release+0xb6>
				mem_release(rx_free, &mem_pdu_rx.free);
    f238:	4910      	ldr	r1, [pc, #64]	; (f27c <ll_rx_mem_release+0x174>)
    f23a:	4628      	mov	r0, r5
    f23c:	f7fc fa8a 	bl	b754 <mem_release>
	while (rx) {
    f240:	2c00      	cmp	r4, #0
    f242:	f47f af6a 	bne.w	f11a <ll_rx_mem_release+0x12>
    f246:	e78c      	b.n	f162 <ll_rx_mem_release+0x5a>
			LL_ASSERT(link);
    f248:	490f      	ldr	r1, [pc, #60]	; (f288 <ll_rx_mem_release+0x180>)
    f24a:	f240 536e 	movw	r3, #1390	; 0x56e
    f24e:	463a      	mov	r2, r7
    f250:	4630      	mov	r0, r6
    f252:	f00c fa8f 	bl	1b774 <printk>
    f256:	4040      	eors	r0, r0
    f258:	f380 8811 	msr	BASEPRI, r0
    f25c:	f04f 0003 	mov.w	r0, #3
    f260:	df02      	svc	2
    f262:	e7d1      	b.n	f208 <ll_rx_mem_release+0x100>
    f264:	00021a78 	.word	0x00021a78
    f268:	000218a4 	.word	0x000218a4
    f26c:	0002180c 	.word	0x0002180c
    f270:	00021b70 	.word	0x00021b70
    f274:	00021b7c 	.word	0x00021b7c
    f278:	200018dc 	.word	0x200018dc
    f27c:	2000192c 	.word	0x2000192c
    f280:	00021ba0 	.word	0x00021ba0
    f284:	00021af0 	.word	0x00021af0
    f288:	00021e08 	.word	0x00021e08

0000f28c <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    f28c:	4801      	ldr	r0, [pc, #4]	; (f294 <ll_rx_link_alloc+0x8>)
    f28e:	f7fc ba47 	b.w	b720 <mem_acquire>
    f292:	bf00      	nop
    f294:	200018e0 	.word	0x200018e0

0000f298 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    f298:	4901      	ldr	r1, [pc, #4]	; (f2a0 <ll_rx_link_release+0x8>)
    f29a:	f7fc ba5b 	b.w	b754 <mem_release>
    f29e:	bf00      	nop
    f2a0:	200018e0 	.word	0x200018e0

0000f2a4 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    f2a4:	4801      	ldr	r0, [pc, #4]	; (f2ac <ll_rx_alloc+0x8>)
    f2a6:	f7fc ba3b 	b.w	b720 <mem_acquire>
    f2aa:	bf00      	nop
    f2ac:	2000192c 	.word	0x2000192c

0000f2b0 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    f2b0:	4901      	ldr	r1, [pc, #4]	; (f2b8 <ll_rx_release+0x8>)
    f2b2:	f7fc ba4f 	b.w	b754 <mem_release>
    f2b6:	bf00      	nop
    f2b8:	2000192c 	.word	0x2000192c

0000f2bc <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f2bc:	4b02      	ldr	r3, [pc, #8]	; (f2c8 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f2be:	4a03      	ldr	r2, [pc, #12]	; (f2cc <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    f2c0:	78db      	ldrb	r3, [r3, #3]
    f2c2:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    f2c4:	f7fc ba90 	b.w	b7e8 <memq_enqueue>
    f2c8:	20000408 	.word	0x20000408
    f2cc:	20001b2c 	.word	0x20001b2c

0000f2d0 <ll_rx_sched>:
	k_sem_give(sem_recv);
    f2d0:	4b01      	ldr	r3, [pc, #4]	; (f2d8 <ll_rx_sched+0x8>)
    f2d2:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    f2d4:	f00b b9f8 	b.w	1a6c8 <z_impl_k_sem_give>
    f2d8:	20001b40 	.word	0x20001b40

0000f2dc <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f2dc:	4b0d      	ldr	r3, [pc, #52]	; (f314 <ll_pdu_rx_alloc_peek+0x38>)
    f2de:	789a      	ldrb	r2, [r3, #2]
    f2e0:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
    f2e4:	4562      	cmp	r2, ip
    f2e6:	d809      	bhi.n	f2fc <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    f2e8:	ebac 0102 	sub.w	r1, ip, r2
    f2ec:	b2c9      	uxtb	r1, r1
    f2ee:	4288      	cmp	r0, r1
    f2f0:	d802      	bhi.n	f2f8 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    f2f2:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f2f4:	7819      	ldrb	r1, [r3, #0]
    f2f6:	d108      	bne.n	f30a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f2f8:	2000      	movs	r0, #0
}
    f2fa:	4770      	bx	lr
		return count - first + last;
    f2fc:	7859      	ldrb	r1, [r3, #1]
    f2fe:	1a89      	subs	r1, r1, r2
    f300:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    f302:	b2c9      	uxtb	r1, r1
    f304:	4288      	cmp	r0, r1
    f306:	d8f7      	bhi.n	f2f8 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    f308:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
    f30a:	fb02 3301 	mla	r3, r2, r1, r3
    f30e:	6858      	ldr	r0, [r3, #4]
    f310:	4770      	bx	lr
    f312:	bf00      	nop
    f314:	200002e0 	.word	0x200002e0

0000f318 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    f318:	4b09      	ldr	r3, [pc, #36]	; (f340 <ll_pdu_rx_alloc+0x28>)
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    f31a:	7899      	ldrb	r1, [r3, #2]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    f31c:	78da      	ldrb	r2, [r3, #3]
    f31e:	7818      	ldrb	r0, [r3, #0]
    f320:	f893 c001 	ldrb.w	ip, [r3, #1]
    f324:	428a      	cmp	r2, r1
    f326:	d009      	beq.n	f33c <ll_pdu_rx_alloc+0x24>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    f328:	1c4a      	adds	r2, r1, #1
    f32a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f32c:	fb01 3100 	mla	r1, r1, r0, r3
	if (_first == count) {
		_first = 0U;
    f330:	4594      	cmp	ip, r2
    f332:	bf08      	it	eq
    f334:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f336:	6848      	ldr	r0, [r1, #4]
	}

	*first = _first; /* Write back read-index */
    f338:	709a      	strb	r2, [r3, #2]

	return mem;
    f33a:	4770      	bx	lr
		return NULL;
    f33c:	2000      	movs	r0, #0
}
    f33e:	4770      	bx	lr
    f340:	200002e0 	.word	0x200002e0

0000f344 <ll_tx_ack_put>:
{
    f344:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    f346:	4a15      	ldr	r2, [pc, #84]	; (f39c <ll_tx_ack_put+0x58>)
    f348:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
    f34a:	f892 e001 	ldrb.w	lr, [r2, #1]
    f34e:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
    f352:	1c63      	adds	r3, r4, #1
    f354:	b2db      	uxtb	r3, r3
		last = 0U;
    f356:	459e      	cmp	lr, r3
    f358:	bf08      	it	eq
    f35a:	2300      	moveq	r3, #0
	if (last == first) {
    f35c:	459c      	cmp	ip, r3
    f35e:	d00c      	beq.n	f37a <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f360:	4696      	mov	lr, r2
    f362:	f81e cb04 	ldrb.w	ip, [lr], #4
    f366:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
    f36a:	eb1e 040c 	adds.w	r4, lr, ip
    f36e:	d004      	beq.n	f37a <ll_tx_ack_put+0x36>
	tx->handle = handle;
    f370:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
    f374:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
    f376:	70d3      	strb	r3, [r2, #3]
}
    f378:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
    f37a:	4a09      	ldr	r2, [pc, #36]	; (f3a0 <ll_tx_ack_put+0x5c>)
    f37c:	4909      	ldr	r1, [pc, #36]	; (f3a4 <ll_tx_ack_put+0x60>)
    f37e:	480a      	ldr	r0, [pc, #40]	; (f3a8 <ll_tx_ack_put+0x64>)
    f380:	f240 53cc 	movw	r3, #1484	; 0x5cc
    f384:	f00c f9f6 	bl	1b774 <printk>
    f388:	4040      	eors	r0, r0
    f38a:	f380 8811 	msr	BASEPRI, r0
    f38e:	f04f 0003 	mov.w	r0, #3
    f392:	df02      	svc	2
	tx->handle = handle;
    f394:	2300      	movs	r3, #0
    f396:	801b      	strh	r3, [r3, #0]
    f398:	deff      	udf	#255	; 0xff
    f39a:	bf00      	nop
    f39c:	20000408 	.word	0x20000408
    f3a0:	00021a78 	.word	0x00021a78
    f3a4:	00021dfc 	.word	0x00021dfc
    f3a8:	0002180c 	.word	0x0002180c

0000f3ac <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3ac:	f030 0302 	bics.w	r3, r0, #2
{
    f3b0:	b510      	push	{r4, lr}
    f3b2:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3b4:	d002      	beq.n	f3bc <ull_ticker_status_take+0x10>
    f3b6:	680b      	ldr	r3, [r1, #0]
    f3b8:	2b02      	cmp	r3, #2
    f3ba:	d008      	beq.n	f3ce <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    f3bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f3c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f3c4:	4809      	ldr	r0, [pc, #36]	; (f3ec <ull_ticker_status_take+0x40>)
    f3c6:	f00b f9a5 	bl	1a714 <z_impl_k_sem_take>
	return *ret_cb;
    f3ca:	6820      	ldr	r0, [r4, #0]
}
    f3cc:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f3ce:	4a08      	ldr	r2, [pc, #32]	; (f3f0 <ull_ticker_status_take+0x44>)
    f3d0:	4908      	ldr	r1, [pc, #32]	; (f3f4 <ull_ticker_status_take+0x48>)
    f3d2:	4809      	ldr	r0, [pc, #36]	; (f3f8 <ull_ticker_status_take+0x4c>)
    f3d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    f3d8:	f00c f9cc 	bl	1b774 <printk>
    f3dc:	4040      	eors	r0, r0
    f3de:	f380 8811 	msr	BASEPRI, r0
    f3e2:	f04f 0003 	mov.w	r0, #3
    f3e6:	df02      	svc	2
    f3e8:	e7e8      	b.n	f3bc <ull_ticker_status_take+0x10>
    f3ea:	bf00      	nop
    f3ec:	20001b44 	.word	0x20001b44
    f3f0:	00021a78 	.word	0x00021a78
    f3f4:	00021bc0 	.word	0x00021bc0
    f3f8:	0002180c 	.word	0x0002180c

0000f3fc <ull_disable_mark>:
	if (!*m) {
    f3fc:	4a03      	ldr	r2, [pc, #12]	; (f40c <ull_disable_mark+0x10>)
{
    f3fe:	4603      	mov	r3, r0
	if (!*m) {
    f400:	6810      	ldr	r0, [r2, #0]
    f402:	b100      	cbz	r0, f406 <ull_disable_mark+0xa>
}
    f404:	4770      	bx	lr
		*m = param;
    f406:	6013      	str	r3, [r2, #0]
    f408:	4618      	mov	r0, r3
}
    f40a:	4770      	bx	lr
    f40c:	20001810 	.word	0x20001810

0000f410 <ull_disable_unmark>:
	if (*m && *m == param) {
    f410:	4a04      	ldr	r2, [pc, #16]	; (f424 <ull_disable_unmark+0x14>)
    f412:	6813      	ldr	r3, [r2, #0]
    f414:	b123      	cbz	r3, f420 <ull_disable_unmark+0x10>
    f416:	4298      	cmp	r0, r3
		*m = NULL;
    f418:	bf06      	itte	eq
    f41a:	2100      	moveq	r1, #0
    f41c:	6011      	streq	r1, [r2, #0]
	return NULL;
    f41e:	2300      	movne	r3, #0
}
    f420:	4618      	mov	r0, r3
    f422:	4770      	bx	lr
    f424:	20001810 	.word	0x20001810

0000f428 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    f428:	4b01      	ldr	r3, [pc, #4]	; (f430 <ull_disable_mark_get+0x8>)
}
    f42a:	6818      	ldr	r0, [r3, #0]
    f42c:	4770      	bx	lr
    f42e:	bf00      	nop
    f430:	20001810 	.word	0x20001810

0000f434 <ull_update_mark>:
	if (!*m) {
    f434:	4a03      	ldr	r2, [pc, #12]	; (f444 <ull_update_mark+0x10>)
{
    f436:	4603      	mov	r3, r0
	if (!*m) {
    f438:	6810      	ldr	r0, [r2, #0]
    f43a:	b100      	cbz	r0, f43e <ull_update_mark+0xa>
}
    f43c:	4770      	bx	lr
		*m = param;
    f43e:	6013      	str	r3, [r2, #0]
    f440:	4618      	mov	r0, r3
}
    f442:	4770      	bx	lr
    f444:	20001814 	.word	0x20001814

0000f448 <ull_update_unmark>:
	if (*m && *m == param) {
    f448:	4a04      	ldr	r2, [pc, #16]	; (f45c <ull_update_unmark+0x14>)
    f44a:	6813      	ldr	r3, [r2, #0]
    f44c:	b123      	cbz	r3, f458 <ull_update_unmark+0x10>
    f44e:	4298      	cmp	r0, r3
		*m = NULL;
    f450:	bf06      	itte	eq
    f452:	2100      	moveq	r1, #0
    f454:	6011      	streq	r1, [r2, #0]
	return NULL;
    f456:	2300      	movne	r3, #0
}
    f458:	4618      	mov	r0, r3
    f45a:	4770      	bx	lr
    f45c:	20001814 	.word	0x20001814

0000f460 <ull_update_mark_get>:
	return mark_get(mark_update);
    f460:	4b01      	ldr	r3, [pc, #4]	; (f468 <ull_update_mark_get+0x8>)
}
    f462:	6818      	ldr	r0, [r3, #0]
    f464:	4770      	bx	lr
    f466:	bf00      	nop
    f468:	20001814 	.word	0x20001814

0000f46c <ull_disable>:
{
    f46c:	b530      	push	{r4, r5, lr}
	hdr = HDR_LLL2ULL(lll);
    f46e:	6805      	ldr	r5, [r0, #0]
{
    f470:	b087      	sub	sp, #28
	if (!hdr || !ull_ref_get(hdr)) {
    f472:	b305      	cbz	r5, f4b6 <ull_disable+0x4a>
    f474:	782b      	ldrb	r3, [r5, #0]
    f476:	4604      	mov	r4, r0
    f478:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    f47c:	b90b      	cbnz	r3, f482 <ull_disable+0x16>
}
    f47e:	b007      	add	sp, #28
    f480:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_sem_init(sem, initial_count, limit);
    f482:	2201      	movs	r2, #1
    f484:	2100      	movs	r1, #0
    f486:	4668      	mov	r0, sp
    f488:	f010 ff46 	bl	20318 <z_impl_k_sem_init>
	hdr->disabled_cb = disabled_cb;
    f48c:	4912      	ldr	r1, [pc, #72]	; (f4d8 <ull_disable+0x6c>)
	mfy.param = lll;
    f48e:	4b13      	ldr	r3, [pc, #76]	; (f4dc <ull_disable+0x70>)
	hdr->disabled_cb = disabled_cb;
    f490:	6169      	str	r1, [r5, #20]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f492:	2200      	movs	r2, #0
	hdr->disabled_param = &sem;
    f494:	f8c5 d018 	str.w	sp, [r5, #24]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f498:	4611      	mov	r1, r2
    f49a:	2003      	movs	r0, #3
	mfy.param = lll;
    f49c:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f49e:	f7fc fa17 	bl	b8d0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f4a2:	b958      	cbnz	r0, f4bc <ull_disable+0x50>
	return z_impl_k_sem_take(sem, timeout);
    f4a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f4a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f4ac:	4668      	mov	r0, sp
    f4ae:	f00b f931 	bl	1a714 <z_impl_k_sem_take>
}
    f4b2:	b007      	add	sp, #28
    f4b4:	bd30      	pop	{r4, r5, pc}
		return 0;
    f4b6:	4628      	mov	r0, r5
}
    f4b8:	b007      	add	sp, #28
    f4ba:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    f4bc:	4a08      	ldr	r2, [pc, #32]	; (f4e0 <ull_disable+0x74>)
    f4be:	4909      	ldr	r1, [pc, #36]	; (f4e4 <ull_disable+0x78>)
    f4c0:	4809      	ldr	r0, [pc, #36]	; (f4e8 <ull_disable+0x7c>)
    f4c2:	f240 636e 	movw	r3, #1646	; 0x66e
    f4c6:	f00c f955 	bl	1b774 <printk>
    f4ca:	4040      	eors	r0, r0
    f4cc:	f380 8811 	msr	BASEPRI, r0
    f4d0:	f04f 0003 	mov.w	r0, #3
    f4d4:	df02      	svc	2
    f4d6:	e7e5      	b.n	f4a4 <ull_disable+0x38>
    f4d8:	0000e5b1 	.word	0x0000e5b1
    f4dc:	2000046c 	.word	0x2000046c
    f4e0:	00021a78 	.word	0x00021a78
    f4e4:	00021bb8 	.word	0x00021bb8
    f4e8:	0002180c 	.word	0x0002180c

0000f4ec <ull_ticker_stop_with_mark>:
{
    f4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
    f4ee:	4d1d      	ldr	r5, [pc, #116]	; (f564 <ull_ticker_stop_with_mark+0x78>)
    f4f0:	682b      	ldr	r3, [r5, #0]
{
    f4f2:	b085      	sub	sp, #20
    f4f4:	460c      	mov	r4, r1
    f4f6:	4616      	mov	r6, r2
	if (!*m) {
    f4f8:	b323      	cbz	r3, f544 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
    f4fa:	4299      	cmp	r1, r3
    f4fc:	d112      	bne.n	f524 <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
    f4fe:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f500:	af03      	add	r7, sp, #12
    f502:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
    f504:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f506:	2103      	movs	r1, #3
    f508:	4b17      	ldr	r3, [pc, #92]	; (f568 <ull_ticker_stop_with_mark+0x7c>)
    f50a:	9700      	str	r7, [sp, #0]
    f50c:	2000      	movs	r0, #0
    f50e:	f7fd fba3 	bl	cc58 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    f512:	4639      	mov	r1, r7
    f514:	f7ff ff4a 	bl	f3ac <ull_ticker_status_take>
	if (ret) {
    f518:	b140      	cbz	r0, f52c <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
    f51a:	682b      	ldr	r3, [r5, #0]
    f51c:	b10b      	cbz	r3, f522 <ull_ticker_stop_with_mark+0x36>
    f51e:	429c      	cmp	r4, r3
    f520:	d012      	beq.n	f548 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
    f522:	b1cc      	cbz	r4, f558 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
    f524:	f06f 002d 	mvn.w	r0, #45	; 0x2d
}
    f528:	b005      	add	sp, #20
    f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
    f52c:	4630      	mov	r0, r6
    f52e:	f7ff ff9d 	bl	f46c <ull_disable>
	if (ret) {
    f532:	b9a0      	cbnz	r0, f55e <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
    f534:	682b      	ldr	r3, [r5, #0]
    f536:	b10b      	cbz	r3, f53c <ull_ticker_stop_with_mark+0x50>
    f538:	429c      	cmp	r4, r3
    f53a:	d00b      	beq.n	f554 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
    f53c:	2c00      	cmp	r4, #0
    f53e:	d1f1      	bne.n	f524 <ull_ticker_stop_with_mark+0x38>
}
    f540:	b005      	add	sp, #20
    f542:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
    f544:	6029      	str	r1, [r5, #0]
	if (mark != param) {
    f546:	e7da      	b.n	f4fe <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
    f548:	2300      	movs	r3, #0
		return -EALREADY;
    f54a:	f06f 0077 	mvn.w	r0, #119	; 0x77
		*m = NULL;
    f54e:	602b      	str	r3, [r5, #0]
}
    f550:	b005      	add	sp, #20
    f552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
    f554:	6028      	str	r0, [r5, #0]
	if (mark != param) {
    f556:	e7e7      	b.n	f528 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
    f558:	f06f 0077 	mvn.w	r0, #119	; 0x77
    f55c:	e7e4      	b.n	f528 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
    f55e:	f06f 000f 	mvn.w	r0, #15
    f562:	e7e1      	b.n	f528 <ull_ticker_stop_with_mark+0x3c>
    f564:	20001810 	.word	0x20001810
    f568:	0000e5a5 	.word	0x0000e5a5

0000f56c <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f56c:	4b0d      	ldr	r3, [pc, #52]	; (f5a4 <ull_pdu_rx_alloc_peek+0x38>)
    f56e:	789a      	ldrb	r2, [r3, #2]
    f570:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
    f574:	4562      	cmp	r2, ip
    f576:	d809      	bhi.n	f58c <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    f578:	ebac 0102 	sub.w	r1, ip, r2
    f57c:	b2c9      	uxtb	r1, r1
    f57e:	4288      	cmp	r0, r1
    f580:	d802      	bhi.n	f588 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
    f582:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f584:	7819      	ldrb	r1, [r3, #0]
    f586:	d108      	bne.n	f59a <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f588:	2000      	movs	r0, #0
}
    f58a:	4770      	bx	lr
		return count - first + last;
    f58c:	7859      	ldrb	r1, [r3, #1]
    f58e:	1a89      	subs	r1, r1, r2
    f590:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f592:	b2c9      	uxtb	r1, r1
    f594:	4288      	cmp	r0, r1
    f596:	d8f7      	bhi.n	f588 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f598:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
    f59a:	fb02 3301 	mla	r3, r2, r1, r3
    f59e:	6858      	ldr	r0, [r3, #4]
    f5a0:	4770      	bx	lr
    f5a2:	bf00      	nop
    f5a4:	200002ec 	.word	0x200002ec

0000f5a8 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
    f5a8:	4b09      	ldr	r3, [pc, #36]	; (f5d0 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
    f5aa:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f5ac:	78da      	ldrb	r2, [r3, #3]
    f5ae:	7818      	ldrb	r0, [r3, #0]
    f5b0:	f893 c001 	ldrb.w	ip, [r3, #1]
    f5b4:	428a      	cmp	r2, r1
    f5b6:	d009      	beq.n	f5cc <ull_pdu_rx_alloc+0x24>
	_first += 1U;
    f5b8:	1c4a      	adds	r2, r1, #1
    f5ba:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f5bc:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f5c0:	4594      	cmp	ip, r2
    f5c2:	bf08      	it	eq
    f5c4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f5c6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f5c8:	709a      	strb	r2, [r3, #2]
	return mem;
    f5ca:	4770      	bx	lr
		return NULL;
    f5cc:	2000      	movs	r0, #0
}
    f5ce:	4770      	bx	lr
    f5d0:	200002ec 	.word	0x200002ec

0000f5d4 <ull_rx_put>:
{
    f5d4:	b538      	push	{r3, r4, r5, lr}
    f5d6:	460c      	mov	r4, r1
    f5d8:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f5da:	f005 fa55 	bl	14a88 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f5de:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f5e0:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f5e2:	4a03      	ldr	r2, [pc, #12]	; (f5f0 <ull_rx_put+0x1c>)
    f5e4:	4628      	mov	r0, r5
}
    f5e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f5ea:	f7fc b8fd 	b.w	b7e8 <memq_enqueue>
    f5ee:	bf00      	nop
    f5f0:	20001b3c 	.word	0x20001b3c

0000f5f4 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f5f4:	2201      	movs	r2, #1
    f5f6:	4b02      	ldr	r3, [pc, #8]	; (f600 <ull_rx_sched+0xc>)
    f5f8:	4611      	mov	r1, r2
    f5fa:	2000      	movs	r0, #0
    f5fc:	f7fc b968 	b.w	b8d0 <mayfly_enqueue>
    f600:	2000045c 	.word	0x2000045c

0000f604 <ull_prepare_enqueue>:
{
    f604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f608:	4e16      	ldr	r6, [pc, #88]	; (f664 <ull_prepare_enqueue+0x60>)
{
    f60a:	f89d a020 	ldrb.w	sl, [sp, #32]
    f60e:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f610:	78f3      	ldrb	r3, [r6, #3]
{
    f612:	4680      	mov	r8, r0
	last = last + 1;
    f614:	1c5d      	adds	r5, r3, #1
	if (last == count) {
    f616:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
    f618:	b2ed      	uxtb	r5, r5
		last = 0U;
    f61a:	42a8      	cmp	r0, r5
    f61c:	bf08      	it	eq
    f61e:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f620:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
    f622:	42a8      	cmp	r0, r5
    f624:	d01a      	beq.n	f65c <ull_prepare_enqueue+0x58>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f626:	4634      	mov	r4, r6
    f628:	460f      	mov	r7, r1
    f62a:	4611      	mov	r1, r2
    f62c:	f814 2b04 	ldrb.w	r2, [r4], #4
    f630:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
    f634:	b17c      	cbz	r4, f656 <ull_prepare_enqueue+0x52>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    f636:	2210      	movs	r2, #16
    f638:	4620      	mov	r0, r4
    f63a:	f00e f9e7 	bl	1da0c <memcpy>
	e->is_resume = is_resume;
    f63e:	7f23      	ldrb	r3, [r4, #28]
	e->abort_cb = abort_cb;
    f640:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
    f642:	f00a 0a01 	and.w	sl, sl, #1
    f646:	f023 0303 	bic.w	r3, r3, #3
    f64a:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
    f64e:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->is_resume = is_resume;
    f652:	7723      	strb	r3, [r4, #28]
	*last = idx; /* Commit: Update write index */
    f654:	70f5      	strb	r5, [r6, #3]
}
    f656:	4620      	mov	r0, r4
    f658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return NULL;
    f65c:	2400      	movs	r4, #0
}
    f65e:	4620      	mov	r0, r4
    f660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f664:	20000304 	.word	0x20000304

0000f668 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    f668:	4b05      	ldr	r3, [pc, #20]	; (f680 <ull_prepare_dequeue_get+0x18>)
    f66a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
    f66c:	78da      	ldrb	r2, [r3, #3]
    f66e:	7819      	ldrb	r1, [r3, #0]
    f670:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
    f672:	bf1a      	itte	ne
    f674:	3304      	addne	r3, #4
    f676:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
    f67a:	2000      	moveq	r0, #0
}
    f67c:	4770      	bx	lr
    f67e:	bf00      	nop
    f680:	20000304 	.word	0x20000304

0000f684 <ull_prepare_dequeue_iter>:
{
    f684:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f686:	4b0d      	ldr	r3, [pc, #52]	; (f6bc <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
    f688:	7802      	ldrb	r2, [r0, #0]
    f68a:	7859      	ldrb	r1, [r3, #1]
    f68c:	f893 c003 	ldrb.w	ip, [r3, #3]
    f690:	f893 e000 	ldrb.w	lr, [r3]
    f694:	4291      	cmp	r1, r2
    f696:	bf9c      	itt	ls
    f698:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    f69a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    f69c:	4594      	cmp	ip, r2
    f69e:	d00a      	beq.n	f6b6 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
    f6a0:	1c53      	adds	r3, r2, #1
    f6a2:	b2db      	uxtb	r3, r3
		i = 0U;
    f6a4:	4299      	cmp	r1, r3
    f6a6:	bf08      	it	eq
    f6a8:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
    f6aa:	4905      	ldr	r1, [pc, #20]	; (f6c0 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
    f6ac:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    f6ae:	fb02 100e 	mla	r0, r2, lr, r1
}
    f6b2:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
    f6b6:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f6b8:	e7fb      	b.n	f6b2 <ull_prepare_dequeue_iter+0x2e>
    f6ba:	bf00      	nop
    f6bc:	20000304 	.word	0x20000304
    f6c0:	20000308 	.word	0x20000308

0000f6c4 <ull_prepare_dequeue>:
{
    f6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return MFIFO_DEQUEUE_GET(prep);
    f6c8:	4c26      	ldr	r4, [pc, #152]	; (f764 <ull_prepare_dequeue+0xa0>)
    f6ca:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
    f6cc:	78e1      	ldrb	r1, [r4, #3]
    f6ce:	7823      	ldrb	r3, [r4, #0]
    f6d0:	4291      	cmp	r1, r2
    f6d2:	d027      	beq.n	f724 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    f6d4:	1d27      	adds	r7, r4, #4
    f6d6:	fb02 7203 	mla	r2, r2, r3, r7
	while (next) {
    f6da:	b31a      	cbz	r2, f724 <ull_prepare_dequeue+0x60>
			mfy.param = next;
    f6dc:	f8df 9088 	ldr.w	r9, [pc, #136]	; f768 <ull_prepare_dequeue+0xa4>
			LL_ASSERT(!ret);
    f6e0:	f8df b088 	ldr.w	fp, [pc, #136]	; f76c <ull_prepare_dequeue+0xa8>
    f6e4:	f8df a088 	ldr.w	sl, [pc, #136]	; f770 <ull_prepare_dequeue+0xac>
    f6e8:	4680      	mov	r8, r0
		uint8_t is_aborted = next->is_aborted;
    f6ea:	7f13      	ldrb	r3, [r2, #28]
		if (!is_aborted) {
    f6ec:	0799      	lsls	r1, r3, #30
		uint8_t is_aborted = next->is_aborted;
    f6ee:	f3c3 0540 	ubfx	r5, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    f6f2:	f003 0601 	and.w	r6, r3, #1
		if (!is_aborted) {
    f6f6:	d517      	bpl.n	f728 <ull_prepare_dequeue+0x64>
		MFIFO_DEQUEUE(prep);
    f6f8:	78e1      	ldrb	r1, [r4, #3]
	uint8_t _first = *first; /* Copy read-index */
    f6fa:	78a3      	ldrb	r3, [r4, #2]
    f6fc:	7822      	ldrb	r2, [r4, #0]
    f6fe:	7860      	ldrb	r0, [r4, #1]
	if (_first == last) {
    f700:	4299      	cmp	r1, r3
    f702:	d00f      	beq.n	f724 <ull_prepare_dequeue+0x60>
	_first += 1U;
    f704:	3301      	adds	r3, #1
    f706:	b2db      	uxtb	r3, r3
	if (_first == count) {
    f708:	4298      	cmp	r0, r3
    f70a:	d025      	beq.n	f758 <ull_prepare_dequeue+0x94>
	if (first == last) {
    f70c:	4299      	cmp	r1, r3
	*first = _first; /* Write back read-index */
    f70e:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    f710:	d008      	beq.n	f724 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    f712:	fb03 7202 	mla	r2, r3, r2, r7
		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    f716:	b12a      	cbz	r2, f724 <ull_prepare_dequeue+0x60>
    f718:	2d00      	cmp	r5, #0
    f71a:	d1e6      	bne.n	f6ea <ull_prepare_dequeue+0x26>
    f71c:	b116      	cbz	r6, f724 <ull_prepare_dequeue+0x60>
    f71e:	7f13      	ldrb	r3, [r2, #28]
    f720:	07db      	lsls	r3, r3, #31
    f722:	d5e2      	bpl.n	f6ea <ull_prepare_dequeue+0x26>
}
    f724:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mfy.param = next;
    f728:	f8c9 2008 	str.w	r2, [r9, #8]
			ret = mayfly_enqueue(caller_id, TICKER_USER_ID_LLL, 0,
    f72c:	4b0e      	ldr	r3, [pc, #56]	; (f768 <ull_prepare_dequeue+0xa4>)
    f72e:	462a      	mov	r2, r5
    f730:	4629      	mov	r1, r5
    f732:	4640      	mov	r0, r8
    f734:	f7fc f8cc 	bl	b8d0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    f738:	2800      	cmp	r0, #0
    f73a:	d0dd      	beq.n	f6f8 <ull_prepare_dequeue+0x34>
    f73c:	480d      	ldr	r0, [pc, #52]	; (f774 <ull_prepare_dequeue+0xb0>)
    f73e:	f240 63e5 	movw	r3, #1765	; 0x6e5
    f742:	465a      	mov	r2, fp
    f744:	4651      	mov	r1, sl
    f746:	f00c f815 	bl	1b774 <printk>
    f74a:	4040      	eors	r0, r0
    f74c:	f380 8811 	msr	BASEPRI, r0
    f750:	f04f 0003 	mov.w	r0, #3
    f754:	df02      	svc	2
    f756:	e7cf      	b.n	f6f8 <ull_prepare_dequeue+0x34>
	*first = _first; /* Write back read-index */
    f758:	2300      	movs	r3, #0
    f75a:	70a3      	strb	r3, [r4, #2]
	if (first == last) {
    f75c:	2900      	cmp	r1, #0
    f75e:	d0e1      	beq.n	f724 <ull_prepare_dequeue+0x60>
	return (void *)(fifo + first * size);
    f760:	4a05      	ldr	r2, [pc, #20]	; (f778 <ull_prepare_dequeue+0xb4>)
    f762:	e7d9      	b.n	f718 <ull_prepare_dequeue+0x54>
    f764:	20000304 	.word	0x20000304
    f768:	2000042c 	.word	0x2000042c
    f76c:	00021a78 	.word	0x00021a78
    f770:	00021bb8 	.word	0x00021bb8
    f774:	0002180c 	.word	0x0002180c
    f778:	20000308 	.word	0x20000308

0000f77c <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    f77c:	4b06      	ldr	r3, [pc, #24]	; (f798 <ull_event_done_extra_get+0x1c>)
    f77e:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    f780:	78d9      	ldrb	r1, [r3, #3]
    f782:	7818      	ldrb	r0, [r3, #0]
    f784:	4291      	cmp	r1, r2
    f786:	d005      	beq.n	f794 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    f788:	fb02 3300 	mla	r3, r2, r0, r3
    f78c:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    f78e:	b110      	cbz	r0, f796 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    f790:	3020      	adds	r0, #32
    f792:	4770      	bx	lr
		return NULL;
    f794:	2000      	movs	r0, #0
}
    f796:	4770      	bx	lr
    f798:	200002cc 	.word	0x200002cc

0000f79c <ull_event_done>:
{
    f79c:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
    f79e:	4a13      	ldr	r2, [pc, #76]	; (f7ec <ull_event_done+0x50>)
	uint8_t _first = *first; /* Copy read-index */
    f7a0:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f7a2:	78d4      	ldrb	r4, [r2, #3]
    f7a4:	7811      	ldrb	r1, [r2, #0]
    f7a6:	429c      	cmp	r4, r3
{
    f7a8:	4606      	mov	r6, r0
	evdone = MFIFO_DEQUEUE(done);
    f7aa:	7850      	ldrb	r0, [r2, #1]
    f7ac:	d01b      	beq.n	f7e6 <ull_event_done+0x4a>
	mem = *((void **)(fifo + _first * size));
    f7ae:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f7b2:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    f7b4:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    f7b6:	b2db      	uxtb	r3, r3
		_first = 0U;
    f7b8:	4298      	cmp	r0, r3
    f7ba:	bf08      	it	eq
    f7bc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f7be:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    f7c0:	b17c      	cbz	r4, f7e2 <ull_event_done+0x46>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f7c2:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
    f7c4:	2500      	movs	r5, #0
	link = evdone->hdr.link;
    f7c6:	6820      	ldr	r0, [r4, #0]
	memq_enqueue(link, done, &memq_ull_done.tail);
    f7c8:	4a09      	ldr	r2, [pc, #36]	; (f7f0 <ull_event_done+0x54>)
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f7ca:	7123      	strb	r3, [r4, #4]
	memq_enqueue(link, done, &memq_ull_done.tail);
    f7cc:	4621      	mov	r1, r4
	evdone->hdr.link = NULL;
    f7ce:	6025      	str	r5, [r4, #0]
	evdone->param = param;
    f7d0:	61e6      	str	r6, [r4, #28]
	memq_enqueue(link, done, &memq_ull_done.tail);
    f7d2:	f7fc f809 	bl	b7e8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f7d6:	2201      	movs	r2, #1
    f7d8:	4b06      	ldr	r3, [pc, #24]	; (f7f4 <ull_event_done+0x58>)
    f7da:	4611      	mov	r1, r2
    f7dc:	4628      	mov	r0, r5
    f7de:	f7fc f877 	bl	b8d0 <mayfly_enqueue>
}
    f7e2:	4620      	mov	r0, r4
    f7e4:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
    f7e6:	2400      	movs	r4, #0
    f7e8:	e7fb      	b.n	f7e2 <ull_event_done+0x46>
    f7ea:	bf00      	nop
    f7ec:	200002cc 	.word	0x200002cc
    f7f0:	20001b34 	.word	0x20001b34
    f7f4:	2000044c 	.word	0x2000044c

0000f7f8 <lll_prepare>:
 *	   -EINPROGRESS: Event already in progress and prepare was queued
 */
int lll_prepare(lll_is_abort_cb_t is_abort_cb, lll_abort_cb_t abort_cb,
		lll_prepare_cb_t prepare_cb, int8_t event_prio,
		struct lll_prepare_param *prepare_param)
{
    f7f8:	b510      	push	{r4, lr}
    f7fa:	b082      	sub	sp, #8
	}

	prepare_param->prio = prio;
#endif /* CONFIG_BT_CTLR_JIT_SCHEDULING */

	return lll_prepare_resolve(is_abort_cb, abort_cb, prepare_cb,
    f7fc:	2400      	movs	r4, #0
    f7fe:	e9cd 4400 	strd	r4, r4, [sp]
    f802:	9b04      	ldr	r3, [sp, #16]
    f804:	f007 f83e 	bl	16884 <lll_prepare_resolve>
				   prepare_param, 0, 0);
}
    f808:	b002      	add	sp, #8
    f80a:	bd10      	pop	{r4, pc}

0000f80c <lll_resume>:

void lll_resume(void *param)
{
    f80c:	b510      	push	{r4, lr}
    f80e:	4603      	mov	r3, r0
	int ret;

	next = param;
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
				  next->prepare_cb, &next->prepare_param,
				  next->is_resume, 1);
    f810:	7f00      	ldrb	r0, [r0, #28]
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    f812:	691a      	ldr	r2, [r3, #16]
    f814:	6999      	ldr	r1, [r3, #24]
    f816:	2401      	movs	r4, #1
{
    f818:	b082      	sub	sp, #8
	ret = lll_prepare_resolve(next->is_abort_cb, next->abort_cb,
    f81a:	4020      	ands	r0, r4
    f81c:	e9cd 0400 	strd	r0, r4, [sp]
    f820:	6958      	ldr	r0, [r3, #20]
    f822:	f007 f82f 	bl	16884 <lll_prepare_resolve>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    f826:	b108      	cbz	r0, f82c <lll_resume+0x20>
    f828:	3077      	adds	r0, #119	; 0x77
    f82a:	d101      	bne.n	f830 <lll_resume+0x24>
}
    f82c:	b002      	add	sp, #8
    f82e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
    f830:	4a06      	ldr	r2, [pc, #24]	; (f84c <lll_resume+0x40>)
    f832:	4907      	ldr	r1, [pc, #28]	; (f850 <lll_resume+0x44>)
    f834:	4807      	ldr	r0, [pc, #28]	; (f854 <lll_resume+0x48>)
    f836:	234f      	movs	r3, #79	; 0x4f
    f838:	f00b ff9c 	bl	1b774 <printk>
    f83c:	4040      	eors	r0, r0
    f83e:	f380 8811 	msr	BASEPRI, r0
    f842:	f04f 0003 	mov.w	r0, #3
    f846:	df02      	svc	2
}
    f848:	b002      	add	sp, #8
    f84a:	bd10      	pop	{r4, pc}
    f84c:	00021bec 	.word	0x00021bec
    f850:	00021c30 	.word	0x00021c30
    f854:	0002180c 	.word	0x0002180c

0000f858 <ticker_stop_cb>:
{
    f858:	b530      	push	{r4, r5, lr}
    f85a:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f85c:	4b19      	ldr	r3, [pc, #100]	; (f8c4 <ticker_stop_cb+0x6c>)
{
    f85e:	9d06      	ldr	r5, [sp, #24]
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f860:	4a19      	ldr	r2, [pc, #100]	; (f8c8 <ticker_stop_cb+0x70>)
    f862:	1aeb      	subs	r3, r5, r3
    f864:	fba2 2303 	umull	r2, r3, r2, r3
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f868:	f413 5f7f 	tst.w	r3, #16320	; 0x3fc0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f86c:	ea4f 1493 	mov.w	r4, r3, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f870:	d119      	bne.n	f8a6 <ticker_stop_cb+0x4e>
			  TICKER_ID_ADV_BASE + handle,
    f872:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    f874:	4b15      	ldr	r3, [pc, #84]	; (f8cc <ticker_stop_cb+0x74>)
    f876:	9500      	str	r5, [sp, #0]
    f878:	b2d2      	uxtb	r2, r2
    f87a:	2101      	movs	r1, #1
    f87c:	2000      	movs	r0, #0
    f87e:	f7fd f9eb 	bl	cc58 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f882:	f030 0302 	bics.w	r3, r0, #2
    f886:	d00c      	beq.n	f8a2 <ticker_stop_cb+0x4a>
    f888:	4a11      	ldr	r2, [pc, #68]	; (f8d0 <ticker_stop_cb+0x78>)
    f88a:	4912      	ldr	r1, [pc, #72]	; (f8d4 <ticker_stop_cb+0x7c>)
    f88c:	4812      	ldr	r0, [pc, #72]	; (f8d8 <ticker_stop_cb+0x80>)
    f88e:	f640 0309 	movw	r3, #2057	; 0x809
    f892:	f00b ff6f 	bl	1b774 <printk>
    f896:	4040      	eors	r0, r0
    f898:	f380 8811 	msr	BASEPRI, r0
    f89c:	f04f 0003 	mov.w	r0, #3
    f8a0:	df02      	svc	2
}
    f8a2:	b003      	add	sp, #12
    f8a4:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f8a6:	4a0a      	ldr	r2, [pc, #40]	; (f8d0 <ticker_stop_cb+0x78>)
    f8a8:	490c      	ldr	r1, [pc, #48]	; (f8dc <ticker_stop_cb+0x84>)
    f8aa:	480b      	ldr	r0, [pc, #44]	; (f8d8 <ticker_stop_cb+0x80>)
    f8ac:	f640 0304 	movw	r3, #2052	; 0x804
    f8b0:	f00b ff60 	bl	1b774 <printk>
    f8b4:	4040      	eors	r0, r0
    f8b6:	f380 8811 	msr	BASEPRI, r0
    f8ba:	f04f 0003 	mov.w	r0, #3
    f8be:	df02      	svc	2
    f8c0:	e7d7      	b.n	f872 <ticker_stop_cb+0x1a>
    f8c2:	bf00      	nop
    f8c4:	20001ebc 	.word	0x20001ebc
    f8c8:	8d3dcb09 	.word	0x8d3dcb09
    f8cc:	0000faa5 	.word	0x0000faa5
    f8d0:	00021c58 	.word	0x00021c58
    f8d4:	00021ca4 	.word	0x00021ca4
    f8d8:	0002180c 	.word	0x0002180c
    f8dc:	00021c98 	.word	0x00021c98

0000f8e0 <disabled_cb>:
{
    f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    f8e2:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    f8e4:	6e2f      	ldr	r7, [r5, #96]	; 0x60
{
    f8e6:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    f8e8:	b1d7      	cbz	r7, f920 <disabled_cb+0x40>
	LL_ASSERT(adv->node_rx_cc_free);
    f8ea:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	adv->link_cc_free = NULL;
    f8ec:	2300      	movs	r3, #0
    f8ee:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    f8f0:	b34c      	cbz	r4, f946 <disabled_cb+0x66>
	adv->node_rx_cc_free = NULL;
    f8f2:	2100      	movs	r1, #0
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f8f4:	2314      	movs	r3, #20
	adv->node_rx_cc_free = NULL;
    f8f6:	6669      	str	r1, [r5, #100]	; 0x64
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f8f8:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
    f8fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f8fe:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    f900:	221e      	movs	r2, #30
    f902:	f104 001c 	add.w	r0, r4, #28
    f906:	f00e f88c 	bl	1da22 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f90a:	233c      	movs	r3, #60	; 0x3c
    f90c:	7723      	strb	r3, [r4, #28]
	rx->hdr.rx_ftr.param = param;
    f90e:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    f910:	4621      	mov	r1, r4
    f912:	4638      	mov	r0, r7
    f914:	f7ff fcd2 	bl	f2bc <ll_rx_put>
}
    f918:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    f91c:	f7ff bcd8 	b.w	f2d0 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    f920:	4a10      	ldr	r2, [pc, #64]	; (f964 <disabled_cb+0x84>)
    f922:	4911      	ldr	r1, [pc, #68]	; (f968 <disabled_cb+0x88>)
    f924:	4811      	ldr	r0, [pc, #68]	; (f96c <disabled_cb+0x8c>)
    f926:	f640 0349 	movw	r3, #2121	; 0x849
    f92a:	f00b ff23 	bl	1b774 <printk>
    f92e:	4040      	eors	r0, r0
    f930:	f380 8811 	msr	BASEPRI, r0
    f934:	f04f 0003 	mov.w	r0, #3
    f938:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    f93a:	6e6c      	ldr	r4, [r5, #100]	; 0x64
	link = adv->link_cc_free;
    f93c:	6e2f      	ldr	r7, [r5, #96]	; 0x60
	adv->link_cc_free = NULL;
    f93e:	2300      	movs	r3, #0
    f940:	662b      	str	r3, [r5, #96]	; 0x60
	LL_ASSERT(adv->node_rx_cc_free);
    f942:	2c00      	cmp	r4, #0
    f944:	d1d5      	bne.n	f8f2 <disabled_cb+0x12>
    f946:	4a07      	ldr	r2, [pc, #28]	; (f964 <disabled_cb+0x84>)
    f948:	4909      	ldr	r1, [pc, #36]	; (f970 <disabled_cb+0x90>)
    f94a:	4808      	ldr	r0, [pc, #32]	; (f96c <disabled_cb+0x8c>)
    f94c:	f640 034d 	movw	r3, #2125	; 0x84d
    f950:	f00b ff10 	bl	1b774 <printk>
    f954:	4040      	eors	r0, r0
    f956:	f380 8811 	msr	BASEPRI, r0
    f95a:	f04f 0003 	mov.w	r0, #3
    f95e:	df02      	svc	2
	rx = adv->node_rx_cc_free;
    f960:	6e6c      	ldr	r4, [r5, #100]	; 0x64
    f962:	e7c6      	b.n	f8f2 <disabled_cb+0x12>
    f964:	00021c58 	.word	0x00021c58
    f968:	00021cc0 	.word	0x00021cc0
    f96c:	0002180c 	.word	0x0002180c
    f970:	00021cd4 	.word	0x00021cd4

0000f974 <ticker_cb>:
{
    f974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f978:	461f      	mov	r7, r3
    f97a:	b08b      	sub	sp, #44	; 0x2c
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    f97c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f980:	429a      	cmp	r2, r3
{
    f982:	9c12      	ldr	r4, [sp, #72]	; 0x48
	if (IS_ENABLED(CONFIG_BT_TICKER_LOW_LAT) ||
    f984:	d018      	beq.n	f9b8 <ticker_cb+0x44>
	return ++hdr->ref;
    f986:	4615      	mov	r5, r2
    f988:	7822      	ldrb	r2, [r4, #0]
    f98a:	3201      	adds	r2, #1
    f98c:	b2d2      	uxtb	r2, r2
    f98e:	4681      	mov	r9, r0
    f990:	4688      	mov	r8, r1
    f992:	7022      	strb	r2, [r4, #0]
		LL_ASSERT(ref);
    f994:	2a00      	cmp	r2, #0
    f996:	d060      	beq.n	fa5a <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
    f998:	4e37      	ldr	r6, [pc, #220]	; (fa78 <ticker_cb+0x104>)
		mfy.param = &p;
    f99a:	4b38      	ldr	r3, [pc, #224]	; (fa7c <ticker_cb+0x108>)
		p.lazy = lazy;
    f99c:	8135      	strh	r5, [r6, #8]
	lll = &adv->lll;
    f99e:	f104 011c 	add.w	r1, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f9a2:	2200      	movs	r2, #0
		p.param = lll;
    f9a4:	60f1      	str	r1, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f9a6:	2001      	movs	r0, #1
    f9a8:	4611      	mov	r1, r2
		p.remainder = remainder;
    f9aa:	e9c6 9800 	strd	r9, r8, [r6]
		p.force = force;
    f9ae:	72b7      	strb	r7, [r6, #10]
		mfy.param = &p;
    f9b0:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f9b2:	f7fb ff8d 	bl	b8d0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f9b6:	b938      	cbnz	r0, f9c8 <ticker_cb+0x54>
	if (!lll->is_hdcd)
    f9b8:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    f9bc:	f010 0501 	ands.w	r5, r0, #1
    f9c0:	d014      	beq.n	f9ec <ticker_cb+0x78>
}
    f9c2:	b00b      	add	sp, #44	; 0x2c
    f9c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		LL_ASSERT(!ret);
    f9c8:	4a2d      	ldr	r2, [pc, #180]	; (fa80 <ticker_cb+0x10c>)
    f9ca:	492e      	ldr	r1, [pc, #184]	; (fa84 <ticker_cb+0x110>)
    f9cc:	482e      	ldr	r0, [pc, #184]	; (fa88 <ticker_cb+0x114>)
    f9ce:	f240 73bc 	movw	r3, #1980	; 0x7bc
    f9d2:	f00b fecf 	bl	1b774 <printk>
    f9d6:	4040      	eors	r0, r0
    f9d8:	f380 8811 	msr	BASEPRI, r0
    f9dc:	f04f 0003 	mov.w	r0, #3
    f9e0:	df02      	svc	2
	if (!lll->is_hdcd)
    f9e2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    f9e6:	f010 0501 	ands.w	r5, r0, #1
    f9ea:	d1ea      	bne.n	f9c2 <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
    f9ec:	2104      	movs	r1, #4
    f9ee:	a809      	add	r0, sp, #36	; 0x24
    f9f0:	f006 fd8a 	bl	16508 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f9f6:	4a25      	ldr	r2, [pc, #148]	; (fa8c <ticker_cb+0x118>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f9f8:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f9fa:	fba2 1203 	umull	r1, r2, r2, r3
    f9fe:	1a99      	subs	r1, r3, r2
    fa00:	eb02 0251 	add.w	r2, r2, r1, lsr #1
    fa04:	0a12      	lsrs	r2, r2, #8
    fa06:	f240 1147 	movw	r1, #327	; 0x147
    fa0a:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    fa0e:	4a20      	ldr	r2, [pc, #128]	; (fa90 <ticker_cb+0x11c>)
    fa10:	4920      	ldr	r1, [pc, #128]	; (fa94 <ticker_cb+0x120>)
    fa12:	1aa2      	subs	r2, r4, r2
    fa14:	fba1 1202 	umull	r1, r2, r1, r2
    fa18:	0992      	lsrs	r2, r2, #6
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fa1a:	491f      	ldr	r1, [pc, #124]	; (fa98 <ticker_cb+0x124>)
				    (TICKER_ID_ADV_BASE +
    fa1c:	3202      	adds	r2, #2
		random_delay += 1;
    fa1e:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fa20:	e9cd 5104 	strd	r5, r1, [sp, #16]
    fa24:	e9cd 5502 	strd	r5, r5, [sp, #8]
    fa28:	e9cd 5500 	strd	r5, r5, [sp]
    fa2c:	b2d2      	uxtb	r2, r2
    fa2e:	2101      	movs	r1, #1
    fa30:	4628      	mov	r0, r5
		random_delay += 1;
    fa32:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    fa34:	f7fd f8f8 	bl	cc28 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    fa38:	f030 0302 	bics.w	r3, r0, #2
    fa3c:	d0c1      	beq.n	f9c2 <ticker_cb+0x4e>
    fa3e:	4a10      	ldr	r2, [pc, #64]	; (fa80 <ticker_cb+0x10c>)
    fa40:	4916      	ldr	r1, [pc, #88]	; (fa9c <ticker_cb+0x128>)
    fa42:	4811      	ldr	r0, [pc, #68]	; (fa88 <ticker_cb+0x114>)
    fa44:	f240 73d2 	movw	r3, #2002	; 0x7d2
    fa48:	f00b fe94 	bl	1b774 <printk>
    fa4c:	4040      	eors	r0, r0
    fa4e:	f380 8811 	msr	BASEPRI, r0
    fa52:	f04f 0003 	mov.w	r0, #3
    fa56:	df02      	svc	2
}
    fa58:	e7b3      	b.n	f9c2 <ticker_cb+0x4e>
		LL_ASSERT(ref);
    fa5a:	4a09      	ldr	r2, [pc, #36]	; (fa80 <ticker_cb+0x10c>)
    fa5c:	4910      	ldr	r1, [pc, #64]	; (faa0 <ticker_cb+0x12c>)
    fa5e:	480a      	ldr	r0, [pc, #40]	; (fa88 <ticker_cb+0x114>)
    fa60:	f240 73af 	movw	r3, #1967	; 0x7af
    fa64:	f00b fe86 	bl	1b774 <printk>
    fa68:	4040      	eors	r0, r0
    fa6a:	f380 8811 	msr	BASEPRI, r0
    fa6e:	f04f 0003 	mov.w	r0, #3
    fa72:	df02      	svc	2
    fa74:	e790      	b.n	f998 <ticker_cb+0x24>
    fa76:	bf00      	nop
    fa78:	20001f3c 	.word	0x20001f3c
    fa7c:	2000047c 	.word	0x2000047c
    fa80:	00021c58 	.word	0x00021c58
    fa84:	00021bb8 	.word	0x00021bb8
    fa88:	0002180c 	.word	0x0002180c
    fa8c:	90d4f121 	.word	0x90d4f121
    fa90:	20001ebc 	.word	0x20001ebc
    fa94:	8d3dcb09 	.word	0x8d3dcb09
    fa98:	0000fb61 	.word	0x0000fb61
    fa9c:	00021ca4 	.word	0x00021ca4
    faa0:	00021cec 	.word	0x00021cec

0000faa4 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    faa4:	2800      	cmp	r0, #0
    faa6:	d13d      	bne.n	fb24 <ticker_op_stop_cb+0x80>
{
    faa8:	b538      	push	{r3, r4, r5, lr}
	mfy.param = &adv->lll;
    faaa:	4d26      	ldr	r5, [pc, #152]	; (fb44 <ticker_op_stop_cb+0xa0>)
    faac:	f101 031c 	add.w	r3, r1, #28
    fab0:	60ab      	str	r3, [r5, #8]
	return hdr->ref;
    fab2:	460c      	mov	r4, r1
    fab4:	7809      	ldrb	r1, [r1, #0]
	if (ull_ref_get(hdr)) {
    fab6:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    faba:	b1e1      	cbz	r1, faf6 <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
    fabc:	6962      	ldr	r2, [r4, #20]
    fabe:	b16a      	cbz	r2, fadc <ticker_op_stop_cb+0x38>
    fac0:	4a21      	ldr	r2, [pc, #132]	; (fb48 <ticker_op_stop_cb+0xa4>)
    fac2:	4922      	ldr	r1, [pc, #136]	; (fb4c <ticker_op_stop_cb+0xa8>)
    fac4:	4822      	ldr	r0, [pc, #136]	; (fb50 <ticker_op_stop_cb+0xac>)
    fac6:	f640 032e 	movw	r3, #2094	; 0x82e
    faca:	f00b fe53 	bl	1b774 <printk>
    face:	4040      	eors	r0, r0
    fad0:	f380 8811 	msr	BASEPRI, r0
    fad4:	f04f 0003 	mov.w	r0, #3
    fad8:	df02      	svc	2
		hdr->disabled_param = mfy.param;
    fada:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    fadc:	491d      	ldr	r1, [pc, #116]	; (fb54 <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
    fade:	481e      	ldr	r0, [pc, #120]	; (fb58 <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
    fae0:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    fae2:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    fae4:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    fae6:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    fae8:	4b16      	ldr	r3, [pc, #88]	; (fb44 <ticker_op_stop_cb+0xa0>)
    faea:	4611      	mov	r1, r2
    faec:	2002      	movs	r0, #2
    faee:	f7fb feef 	bl	b8d0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    faf2:	b9c0      	cbnz	r0, fb26 <ticker_op_stop_cb+0x82>
}
    faf4:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    faf6:	4817      	ldr	r0, [pc, #92]	; (fb54 <ticker_op_stop_cb+0xb0>)
    faf8:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    fafa:	462b      	mov	r3, r5
    fafc:	2101      	movs	r1, #1
    fafe:	2002      	movs	r0, #2
    fb00:	f7fb fee6 	bl	b8d0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    fb04:	2800      	cmp	r0, #0
    fb06:	d0f5      	beq.n	faf4 <ticker_op_stop_cb+0x50>
    fb08:	4a0f      	ldr	r2, [pc, #60]	; (fb48 <ticker_op_stop_cb+0xa4>)
    fb0a:	4914      	ldr	r1, [pc, #80]	; (fb5c <ticker_op_stop_cb+0xb8>)
    fb0c:	4810      	ldr	r0, [pc, #64]	; (fb50 <ticker_op_stop_cb+0xac>)
    fb0e:	f640 033c 	movw	r3, #2108	; 0x83c
    fb12:	f00b fe2f 	bl	1b774 <printk>
    fb16:	4040      	eors	r0, r0
    fb18:	f380 8811 	msr	BASEPRI, r0
    fb1c:	f04f 0003 	mov.w	r0, #3
    fb20:	df02      	svc	2
}
    fb22:	bd38      	pop	{r3, r4, r5, pc}
    fb24:	4770      	bx	lr
		LL_ASSERT(!ret);
    fb26:	4a08      	ldr	r2, [pc, #32]	; (fb48 <ticker_op_stop_cb+0xa4>)
    fb28:	490c      	ldr	r1, [pc, #48]	; (fb5c <ticker_op_stop_cb+0xb8>)
    fb2a:	4809      	ldr	r0, [pc, #36]	; (fb50 <ticker_op_stop_cb+0xac>)
    fb2c:	f640 0335 	movw	r3, #2101	; 0x835
    fb30:	f00b fe20 	bl	1b774 <printk>
    fb34:	4040      	eors	r0, r0
    fb36:	f380 8811 	msr	BASEPRI, r0
    fb3a:	f04f 0003 	mov.w	r0, #3
    fb3e:	df02      	svc	2
}
    fb40:	bd38      	pop	{r3, r4, r5, pc}
    fb42:	bf00      	nop
    fb44:	2000048c 	.word	0x2000048c
    fb48:	00021c58 	.word	0x00021c58
    fb4c:	00021cf0 	.word	0x00021cf0
    fb50:	0002180c 	.word	0x0002180c
    fb54:	0000f8e1 	.word	0x0000f8e1
    fb58:	00016535 	.word	0x00016535
    fb5c:	00021bb8 	.word	0x00021bb8

0000fb60 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fb60:	b900      	cbnz	r0, fb64 <ticker_op_update_cb+0x4>
    fb62:	4770      	bx	lr
{
    fb64:	b510      	push	{r4, lr}
    fb66:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    fb68:	f7ff fc5e 	bl	f428 <ull_disable_mark_get>
    fb6c:	4284      	cmp	r4, r0
    fb6e:	d00c      	beq.n	fb8a <ticker_op_update_cb+0x2a>
    fb70:	4a06      	ldr	r2, [pc, #24]	; (fb8c <ticker_op_update_cb+0x2c>)
    fb72:	4907      	ldr	r1, [pc, #28]	; (fb90 <ticker_op_update_cb+0x30>)
    fb74:	4807      	ldr	r0, [pc, #28]	; (fb94 <ticker_op_update_cb+0x34>)
    fb76:	f240 73f7 	movw	r3, #2039	; 0x7f7
    fb7a:	f00b fdfb 	bl	1b774 <printk>
    fb7e:	4040      	eors	r0, r0
    fb80:	f380 8811 	msr	BASEPRI, r0
    fb84:	f04f 0003 	mov.w	r0, #3
    fb88:	df02      	svc	2
}
    fb8a:	bd10      	pop	{r4, pc}
    fb8c:	00021c58 	.word	0x00021c58
    fb90:	00021d04 	.word	0x00021d04
    fb94:	0002180c 	.word	0x0002180c

0000fb98 <init_set.constprop.0>:
	pdu->tx_addr = 0;
	pdu->rx_addr = 0;
	pdu->len = BDADDR_SIZE;
}

static void init_set(struct ll_adv_set *adv)
    fb98:	b500      	push	{lr}
{
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    fb9a:	4b13      	ldr	r3, [pc, #76]	; (fbe8 <init_set.constprop.0+0x50>)
#if defined(CONFIG_BT_CTLR_PRIVACY)
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
#endif /* CONFIG_BT_CTLR_PRIVACY */
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    fb9c:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    fb9e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    fba2:	f893 c06a 	ldrb.w	ip, [r3, #106]	; 0x6a
    fba6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	adv->lll.chan_map = BT_LE_ADV_CHAN_MAP_ALL;
    fbaa:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
    fbae:	f022 0202 	bic.w	r2, r2, #2
    fbb2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    fbb4:	f042 020e 	orr.w	r2, r2, #14
    fbb8:	849a      	strh	r2, [r3, #36]	; 0x24
	pdu->len = BDADDR_SIZE;
    fbba:	2006      	movs	r0, #6
	pdu->type = pdu_type;
    fbbc:	2200      	movs	r2, #0
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    fbbe:	f44f 6e00 	mov.w	lr, #2048	; 0x800
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    fbc2:	f36f 0c42 	bfc	ip, #1, #2
	adv->interval = BT_LE_ADV_INTERVAL_DEFAULT;
    fbc6:	f8a3 e068 	strh.w	lr, [r3, #104]	; 0x68
	adv->own_addr_type = BT_ADDR_LE_PUBLIC;
    fbca:	f883 c06a 	strb.w	ip, [r3, #106]	; 0x6a
	pdu->len = BDADDR_SIZE;
    fbce:	7048      	strb	r0, [r1, #1]
	pdu->type = pdu_type;
    fbd0:	700a      	strb	r2, [r1, #0]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    fbd2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
    fbd6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    fbda:	2204      	movs	r2, #4
    fbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	pdu->len = BDADDR_SIZE;
    fbde:	7058      	strb	r0, [r3, #1]
	pdu->type = pdu_type;
    fbe0:	701a      	strb	r2, [r3, #0]
	adv->lll.filter_policy = BT_LE_ADV_FP_NO_WHITELIST;

	init_pdu(lll_adv_data_peek(&ll_adv[0].lll), PDU_ADV_TYPE_ADV_IND);
	init_pdu(lll_adv_scan_rsp_peek(&ll_adv[0].lll), PDU_ADV_TYPE_SCAN_RSP);
}
    fbe2:	f85d fb04 	ldr.w	pc, [sp], #4
    fbe6:	bf00      	nop
    fbe8:	20001ebc 	.word	0x20001ebc

0000fbec <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    fbec:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    fbee:	4c1b      	ldr	r4, [pc, #108]	; (fc5c <conn_release.constprop.0+0x70>)
    fbf0:	6a25      	ldr	r5, [r4, #32]
	LL_ASSERT(!lll->link_tx_free);
    fbf2:	6dab      	ldr	r3, [r5, #88]	; 0x58
    fbf4:	b163      	cbz	r3, fc10 <conn_release.constprop.0+0x24>
    fbf6:	4a1a      	ldr	r2, [pc, #104]	; (fc60 <conn_release.constprop.0+0x74>)
    fbf8:	491a      	ldr	r1, [pc, #104]	; (fc64 <conn_release.constprop.0+0x78>)
    fbfa:	481b      	ldr	r0, [pc, #108]	; (fc68 <conn_release.constprop.0+0x7c>)
    fbfc:	f640 0377 	movw	r3, #2167	; 0x877
    fc00:	f00b fdb8 	bl	1b774 <printk>
    fc04:	4040      	eors	r0, r0
    fc06:	f380 8811 	msr	BASEPRI, r0
    fc0a:	f04f 0003 	mov.w	r0, #3
    fc0e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    fc10:	f105 014c 	add.w	r1, r5, #76	; 0x4c
    fc14:	f105 0048 	add.w	r0, r5, #72	; 0x48
    fc18:	f7fb fddc 	bl	b7d4 <memq_deinit>
	LL_ASSERT(link);
    fc1c:	4606      	mov	r6, r0
    fc1e:	b170      	cbz	r0, fc3e <conn_release.constprop.0+0x52>
	ll_conn_release(lll->hdr.parent);
    fc20:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    fc22:	65ae      	str	r6, [r5, #88]	; 0x58
	ll_conn_release(lll->hdr.parent);
    fc24:	f001 f972 	bl	10f0c <ll_conn_release>
	adv->lll.conn = NULL;
    fc28:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    fc2a:	6e60      	ldr	r0, [r4, #100]	; 0x64
	adv->lll.conn = NULL;
    fc2c:	6225      	str	r5, [r4, #32]
	ll_rx_release(adv->node_rx_cc_free);
    fc2e:	f7ff fb3f 	bl	f2b0 <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    fc32:	6e20      	ldr	r0, [r4, #96]	; 0x60
	adv->node_rx_cc_free = NULL;
    fc34:	6665      	str	r5, [r4, #100]	; 0x64
	ll_rx_link_release(adv->link_cc_free);
    fc36:	f7ff fb2f 	bl	f298 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    fc3a:	6625      	str	r5, [r4, #96]	; 0x60
}
    fc3c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    fc3e:	4a08      	ldr	r2, [pc, #32]	; (fc60 <conn_release.constprop.0+0x74>)
    fc40:	490a      	ldr	r1, [pc, #40]	; (fc6c <conn_release.constprop.0+0x80>)
    fc42:	4809      	ldr	r0, [pc, #36]	; (fc68 <conn_release.constprop.0+0x7c>)
    fc44:	f640 0379 	movw	r3, #2169	; 0x879
    fc48:	f00b fd94 	bl	1b774 <printk>
    fc4c:	4040      	eors	r0, r0
    fc4e:	f380 8811 	msr	BASEPRI, r0
    fc52:	f04f 0003 	mov.w	r0, #3
    fc56:	df02      	svc	2
    fc58:	e7e2      	b.n	fc20 <conn_release.constprop.0+0x34>
    fc5a:	bf00      	nop
    fc5c:	20001ebc 	.word	0x20001ebc
    fc60:	00021c58 	.word	0x00021c58
    fc64:	00021d34 	.word	0x00021d34
    fc68:	0002180c 	.word	0x0002180c
    fc6c:	00021e08 	.word	0x00021e08

0000fc70 <disable.part.0>:
static inline uint8_t disable(uint8_t handle)
    fc70:	b530      	push	{r4, r5, lr}
	mark = ull_disable_mark(adv);
    fc72:	4c4a      	ldr	r4, [pc, #296]	; (fd9c <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
    fc74:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
    fc76:	4620      	mov	r0, r4
    fc78:	f7ff fbc0 	bl	f3fc <ull_disable_mark>
	LL_ASSERT(mark == adv);
    fc7c:	4284      	cmp	r4, r0
    fc7e:	d00c      	beq.n	fc9a <disable.part.0+0x2a>
    fc80:	4a47      	ldr	r2, [pc, #284]	; (fda0 <disable.part.0+0x130>)
    fc82:	4948      	ldr	r1, [pc, #288]	; (fda4 <disable.part.0+0x134>)
    fc84:	4848      	ldr	r0, [pc, #288]	; (fda8 <disable.part.0+0x138>)
    fc86:	f640 03da 	movw	r3, #2266	; 0x8da
    fc8a:	f00b fd73 	bl	1b774 <printk>
    fc8e:	4040      	eors	r0, r0
    fc90:	f380 8811 	msr	BASEPRI, r0
    fc94:	f04f 0003 	mov.w	r0, #3
    fc98:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    fc9a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    fc9e:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fca0:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    fca2:	d50d      	bpl.n	fcc0 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
    fca4:	2102      	movs	r1, #2
    fca6:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    fca8:	4b40      	ldr	r3, [pc, #256]	; (fdac <disable.part.0+0x13c>)
    fcaa:	9500      	str	r5, [sp, #0]
    fcac:	2103      	movs	r1, #3
    fcae:	2201      	movs	r2, #1
    fcb0:	2000      	movs	r0, #0
    fcb2:	f7fc ffd1 	bl	cc58 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    fcb6:	4629      	mov	r1, r5
    fcb8:	f7ff fb78 	bl	f3ac <ull_ticker_status_take>
		if (ret) {
    fcbc:	2800      	cmp	r0, #0
    fcbe:	d157      	bne.n	fd70 <disable.part.0+0x100>
	ret_cb = TICKER_STATUS_BUSY;
    fcc0:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    fcc2:	2103      	movs	r1, #3
    fcc4:	4b39      	ldr	r3, [pc, #228]	; (fdac <disable.part.0+0x13c>)
    fcc6:	9500      	str	r5, [sp, #0]
    fcc8:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    fcca:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    fccc:	f7fc ffc4 	bl	cc58 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    fcd0:	4629      	mov	r1, r5
    fcd2:	f7ff fb6b 	bl	f3ac <ull_ticker_status_take>
	if (ret) {
    fcd6:	2800      	cmp	r0, #0
    fcd8:	d135      	bne.n	fd46 <disable.part.0+0xd6>
	ret = ull_disable(&adv->lll);
    fcda:	4835      	ldr	r0, [pc, #212]	; (fdb0 <disable.part.0+0x140>)
    fcdc:	f7ff fbc6 	bl	f46c <ull_disable>
	LL_ASSERT(!ret);
    fce0:	b9f0      	cbnz	r0, fd20 <disable.part.0+0xb0>
	mark = ull_disable_unmark(adv);
    fce2:	482e      	ldr	r0, [pc, #184]	; (fd9c <disable.part.0+0x12c>)
    fce4:	f7ff fb94 	bl	f410 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    fce8:	4284      	cmp	r4, r0
    fcea:	d00c      	beq.n	fd06 <disable.part.0+0x96>
    fcec:	4a2c      	ldr	r2, [pc, #176]	; (fda0 <disable.part.0+0x130>)
    fcee:	492d      	ldr	r1, [pc, #180]	; (fda4 <disable.part.0+0x134>)
    fcf0:	482d      	ldr	r0, [pc, #180]	; (fda8 <disable.part.0+0x138>)
    fcf2:	f640 03fc 	movw	r3, #2300	; 0x8fc
    fcf6:	f00b fd3d 	bl	1b774 <printk>
    fcfa:	4040      	eors	r0, r0
    fcfc:	f380 8811 	msr	BASEPRI, r0
    fd00:	f04f 0003 	mov.w	r0, #3
    fd04:	df02      	svc	2
	if (adv->lll.conn) {
    fd06:	6a23      	ldr	r3, [r4, #32]
    fd08:	b10b      	cbz	r3, fd0e <disable.part.0+0x9e>
		conn_release(adv);
    fd0a:	f7ff ff6f 	bl	fbec <conn_release.constprop.0>
	adv->is_enabled = 0U;
    fd0e:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
	return 0;
    fd12:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
    fd14:	f36f 0300 	bfc	r3, #0, #1
    fd18:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
    fd1c:	b005      	add	sp, #20
    fd1e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    fd20:	4a1f      	ldr	r2, [pc, #124]	; (fda0 <disable.part.0+0x130>)
    fd22:	4924      	ldr	r1, [pc, #144]	; (fdb4 <disable.part.0+0x144>)
    fd24:	4820      	ldr	r0, [pc, #128]	; (fda8 <disable.part.0+0x138>)
    fd26:	f640 03f9 	movw	r3, #2297	; 0x8f9
    fd2a:	f00b fd23 	bl	1b774 <printk>
    fd2e:	4040      	eors	r0, r0
    fd30:	f380 8811 	msr	BASEPRI, r0
    fd34:	f04f 0003 	mov.w	r0, #3
    fd38:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    fd3a:	4818      	ldr	r0, [pc, #96]	; (fd9c <disable.part.0+0x12c>)
    fd3c:	f7ff fb68 	bl	f410 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    fd40:	4284      	cmp	r4, r0
    fd42:	d1d3      	bne.n	fcec <disable.part.0+0x7c>
    fd44:	e7df      	b.n	fd06 <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
    fd46:	4815      	ldr	r0, [pc, #84]	; (fd9c <disable.part.0+0x12c>)
    fd48:	f7ff fb62 	bl	f410 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    fd4c:	4284      	cmp	r4, r0
    fd4e:	d021      	beq.n	fd94 <disable.part.0+0x124>
    fd50:	4a13      	ldr	r2, [pc, #76]	; (fda0 <disable.part.0+0x130>)
    fd52:	4914      	ldr	r1, [pc, #80]	; (fda4 <disable.part.0+0x134>)
    fd54:	4814      	ldr	r0, [pc, #80]	; (fda8 <disable.part.0+0x138>)
    fd56:	f640 03f3 	movw	r3, #2291	; 0x8f3
    fd5a:	f00b fd0b 	bl	1b774 <printk>
    fd5e:	4040      	eors	r0, r0
    fd60:	f380 8811 	msr	BASEPRI, r0
    fd64:	f04f 0003 	mov.w	r0, #3
    fd68:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
    fd6a:	200c      	movs	r0, #12
}
    fd6c:	b005      	add	sp, #20
    fd6e:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
    fd70:	480a      	ldr	r0, [pc, #40]	; (fd9c <disable.part.0+0x12c>)
    fd72:	f7ff fb4d 	bl	f410 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    fd76:	4284      	cmp	r4, r0
    fd78:	d00c      	beq.n	fd94 <disable.part.0+0x124>
    fd7a:	4a09      	ldr	r2, [pc, #36]	; (fda0 <disable.part.0+0x130>)
    fd7c:	4909      	ldr	r1, [pc, #36]	; (fda4 <disable.part.0+0x134>)
    fd7e:	480a      	ldr	r0, [pc, #40]	; (fda8 <disable.part.0+0x138>)
    fd80:	f640 03e5 	movw	r3, #2277	; 0x8e5
    fd84:	f00b fcf6 	bl	1b774 <printk>
    fd88:	4040      	eors	r0, r0
    fd8a:	f380 8811 	msr	BASEPRI, r0
    fd8e:	f04f 0003 	mov.w	r0, #3
    fd92:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
    fd94:	200c      	movs	r0, #12
}
    fd96:	b005      	add	sp, #20
    fd98:	bd30      	pop	{r4, r5, pc}
    fd9a:	bf00      	nop
    fd9c:	20001ebc 	.word	0x20001ebc
    fda0:	00021c58 	.word	0x00021c58
    fda4:	00021d48 	.word	0x00021d48
    fda8:	0002180c 	.word	0x0002180c
    fdac:	0000e5a5 	.word	0x0000e5a5
    fdb0:	20001ed8 	.word	0x20001ed8
    fdb4:	00021bb8 	.word	0x00021bb8

0000fdb8 <adv_time_get.constprop.0.isra.0>:
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    fdb8:	7803      	ldrb	r3, [r0, #0]
    fdba:	f003 030f 	and.w	r3, r3, #15
    fdbe:	2b02      	cmp	r3, #2
static uint16_t adv_time_get(struct pdu_adv *pdu, struct pdu_adv *pdu_scan,
    fdc0:	4684      	mov	ip, r0
		if (pdu->type == PDU_ADV_TYPE_NONCONN_IND) {
    fdc2:	d027      	beq.n	fe14 <adv_time_get.constprop.0.isra.0+0x5c>
			if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    fdc4:	2b01      	cmp	r3, #1
    fdc6:	d00d      	beq.n	fde4 <adv_time_get.constprop.0.isra.0+0x2c>
			BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    fdc8:	3110      	adds	r1, #16
		const uint16_t scan_rsp_us =
    fdca:	00c9      	lsls	r1, r1, #3
			} else if (pdu->type == PDU_ADV_TYPE_ADV_IND) {
    fdcc:	b19b      	cbz	r3, fdf6 <adv_time_get.constprop.0.isra.0+0x3e>
			} else if (pdu->type == PDU_ADV_TYPE_SCAN_IND) {
    fdce:	2b06      	cmp	r3, #6
    fdd0:	d011      	beq.n	fdf6 <adv_time_get.constprop.0.isra.0+0x3e>
    fdd2:	f44f 73f3 	mov.w	r3, #486	; 0x1e6
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    fdd6:	3a01      	subs	r2, #1
    fdd8:	f44f 701b 	mov.w	r0, #620	; 0x26c
			time_us += (BYTES2US(adv_size, PHY_1M) +
    fddc:	fb02 0003 	mla	r0, r2, r3, r0
    fde0:	b280      	uxth	r0, r0
}
    fde2:	4770      	bx	lr
			time_us += (BYTES2US(adv_size, PHY_1M) +
    fde4:	f240 2316 	movw	r3, #534	; 0x216
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    fde8:	3a01      	subs	r2, #1
    fdea:	f44f 707f 	mov.w	r0, #1020	; 0x3fc
			time_us += (BYTES2US(adv_size, PHY_1M) +
    fdee:	fb02 0003 	mla	r0, r2, r3, r0
    fdf2:	b280      	uxth	r0, r0
}
    fdf4:	4770      	bx	lr
				adv_size += pdu->len;
    fdf6:	f89c 0001 	ldrb.w	r0, [ip, #1]
    fdfa:	3010      	adds	r0, #16
				   BYTES2US(adv_size, PHY_1M) + EVENT_IFS_MAX_US;
    fdfc:	00c3      	lsls	r3, r0, #3
    fdfe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    fe02:	f501 704d 	add.w	r0, r1, #820	; 0x334
				    rxtx_turn_us) * (adv_chn_cnt - 1) +
    fe06:	f503 73b3 	add.w	r3, r3, #358	; 0x166
    fe0a:	3a01      	subs	r2, #1
			time_us += (BYTES2US(adv_size, PHY_1M) +
    fe0c:	fb02 0003 	mla	r0, r2, r3, r0
    fe10:	b280      	uxth	r0, r0
}
    fe12:	4770      	bx	lr
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    fe14:	1e53      	subs	r3, r2, #1
			adv_size += pdu->len;
    fe16:	7840      	ldrb	r0, [r0, #1]
			time_us += BYTES2US(adv_size, PHY_1M) * adv_chn_cnt +
    fe18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    fe1c:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    fe20:	3010      	adds	r0, #16
    fe22:	005b      	lsls	r3, r3, #1
    fe24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
    fe28:	00c0      	lsls	r0, r0, #3
    fe2a:	fb00 3002 	mla	r0, r0, r2, r3
    fe2e:	b280      	uxth	r0, r0
    fe30:	4770      	bx	lr
    fe32:	bf00      	nop

0000fe34 <ll_adv_params_set>:
{
    fe34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!adv || adv->is_enabled) {
    fe38:	4c6e      	ldr	r4, [pc, #440]	; (fff4 <ll_adv_params_set+0x1c0>)
{
    fe3a:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fe3c:	4b6e      	ldr	r3, [pc, #440]	; (fff8 <ll_adv_params_set+0x1c4>)
	if (!adv || adv->is_enabled) {
    fe3e:	f894 606a 	ldrb.w	r6, [r4, #106]	; 0x6a
{
    fe42:	4680      	mov	r8, r0
    fe44:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fe46:	e893 0003 	ldmia.w	r3, {r0, r1}
{
    fe4a:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    fe4c:	f016 0601 	ands.w	r6, r6, #1
{
    fe50:	4615      	mov	r5, r2
    fe52:	f89d c02c 	ldrb.w	ip, [sp, #44]	; 0x2c
    fe56:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    fe5a:	9000      	str	r0, [sp, #0]
    fe5c:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    fe60:	f040 8088 	bne.w	ff74 <ll_adv_params_set+0x140>
	adv->lll.chan_map = chan_map;
    fe64:	f00c 0c07 	and.w	ip, ip, #7
    fe68:	f002 0203 	and.w	r2, r2, #3
    fe6c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    fe70:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    fe74:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
		adv->interval = 0;
    fe78:	f1be 0f01 	cmp.w	lr, #1
    fe7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    fe80:	bf08      	it	eq
    fe82:	f04f 0800 	moveq.w	r8, #0
	pdu->type = pdu_adv_type[adv_type];
    fe86:	ab02      	add	r3, sp, #8
    fe88:	f8a4 8068 	strh.w	r8, [r4, #104]	; 0x68
    fe8c:	449e      	add	lr, r3
    fe8e:	f8d2 802c 	ldr.w	r8, [r2, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    fe92:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    fe94:	f898 9000 	ldrb.w	r9, [r8]
	pdu->type = pdu_adv_type[adv_type];
    fe98:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
    fe9c:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    fea0:	f013 0f0e 	tst.w	r3, #14
	adv->lll.chan_map = chan_map;
    fea4:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
    fea8:	f029 011f 	bic.w	r1, r9, #31
    feac:	f003 030f 	and.w	r3, r3, #15
	adv->lll.chan_map = chan_map;
    feb0:	ea4c 0c02 	orr.w	ip, ip, r2
    feb4:	ea43 0301 	orr.w	r3, r3, r1
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    feb8:	bf0c      	ite	eq
    feba:	2201      	moveq	r2, #1
    febc:	2200      	movne	r2, #0
    febe:	f362 1345 	bfi	r3, r2, #5, #1
	adv->lll.chan_map = chan_map;
    fec2:	f8a4 c024 	strh.w	ip, [r4, #36]	; 0x24
	pdu_type_prev = pdu->type;
    fec6:	f888 3000 	strb.w	r3, [r8]
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    feca:	f003 030f 	and.w	r3, r3, #15
    fece:	2b01      	cmp	r3, #1
	pdu_type_prev = pdu->type;
    fed0:	f009 090f 	and.w	r9, r9, #15
	if (((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
    fed4:	d045      	beq.n	ff62 <ll_adv_params_set+0x12e>
	adv->own_addr_type = own_addr_type;
    fed6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
    feda:	f365 0342 	bfi	r3, r5, #1, #2
    fede:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    fee2:	b2da      	uxtb	r2, r3
    fee4:	075b      	lsls	r3, r3, #29
    fee6:	d508      	bpl.n	fefa <ll_adv_params_set+0xc6>
		adv->peer_addr_type = direct_addr_type;
    fee8:	f367 02c3 	bfi	r2, r7, #3, #1
    feec:	f884 206a 	strb.w	r2, [r4, #106]	; 0x6a
		memcpy(&adv->peer_addr, direct_addr, BDADDR_SIZE);
    fef0:	4842      	ldr	r0, [pc, #264]	; (fffc <ll_adv_params_set+0x1c8>)
    fef2:	990a      	ldr	r1, [sp, #40]	; 0x28
    fef4:	2206      	movs	r2, #6
    fef6:	f00d fd89 	bl	1da0c <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    fefa:	f898 3000 	ldrb.w	r3, [r8]
    fefe:	f003 020f 	and.w	r2, r3, #15
    ff02:	2a01      	cmp	r2, #1
    ff04:	d03b      	beq.n	ff7e <ll_adv_params_set+0x14a>
	} else if (pdu->len == 0) {
    ff06:	f898 2001 	ldrb.w	r2, [r8, #1]
    ff0a:	b1f2      	cbz	r2, ff4a <ll_adv_params_set+0x116>
		if (((pdu_type_prev == PDU_ADV_TYPE_DIRECT_IND) ||
    ff0c:	f1b9 0f01 	cmp.w	r9, #1
    ff10:	d052      	beq.n	ffb8 <ll_adv_params_set+0x184>
		pdu->tx_addr = own_addr_type & 0x1;
    ff12:	f898 3000 	ldrb.w	r3, [r8]
    ff16:	f005 0501 	and.w	r5, r5, #1
    ff1a:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    ff1e:	f36f 13c7 	bfc	r3, #7, #1
    ff22:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    ff26:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
    ff2a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff2e:	01ad      	lsls	r5, r5, #6
    ff30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if (pdu->len == 0) {
    ff32:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    ff34:	f045 0504 	orr.w	r5, r5, #4
    ff38:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
    ff3a:	b912      	cbnz	r2, ff42 <ll_adv_params_set+0x10e>
			pdu->len = BDADDR_SIZE;
    ff3c:	2106      	movs	r1, #6
    ff3e:	7059      	strb	r1, [r3, #1]
	return 0;
    ff40:	4616      	mov	r6, r2
}
    ff42:	4630      	mov	r0, r6
    ff44:	b003      	add	sp, #12
    ff46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    ff4a:	f005 0501 	and.w	r5, r5, #1
    ff4e:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = 0;
    ff52:	f362 13c7 	bfi	r3, r2, #7, #1
    ff56:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
    ff5a:	2306      	movs	r3, #6
    ff5c:	f888 3001 	strb.w	r3, [r8, #1]
    ff60:	e7e1      	b.n	ff26 <ll_adv_params_set+0xf2>
	    (pdu_type_prev != PDU_ADV_TYPE_DIRECT_IND) &&
    ff62:	f1b9 0f01 	cmp.w	r9, #1
    ff66:	d0b6      	beq.n	fed6 <ll_adv_params_set+0xa2>
		if (pdu->len == 0U) {
    ff68:	f898 2001 	ldrb.w	r2, [r8, #1]
    ff6c:	b9c2      	cbnz	r2, ffa0 <ll_adv_params_set+0x16c>
			adv->ad_data_backup.len = 0U;
    ff6e:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    ff72:	e7b0      	b.n	fed6 <ll_adv_params_set+0xa2>
		return BT_HCI_ERR_CMD_DISALLOWED;
    ff74:	260c      	movs	r6, #12
}
    ff76:	4630      	mov	r0, r6
    ff78:	b003      	add	sp, #12
    ff7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    ff7e:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
    ff82:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
    ff84:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    ff88:	f367 13c7 	bfi	r3, r7, #7, #1
    ff8c:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    ff90:	990a      	ldr	r1, [sp, #40]	; 0x28
    ff92:	2206      	movs	r2, #6
    ff94:	f00d fd3a 	bl	1da0c <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    ff98:	230c      	movs	r3, #12
    ff9a:	f888 3001 	strb.w	r3, [r8, #1]
    ff9e:	e7c2      	b.n	ff26 <ll_adv_params_set+0xf2>
			LL_ASSERT(pdu->len >=
    ffa0:	2a05      	cmp	r2, #5
    ffa2:	d916      	bls.n	ffd2 <ll_adv_params_set+0x19e>
			adv->ad_data_backup.len = pdu->len -
    ffa4:	3a06      	subs	r2, #6
    ffa6:	b2d2      	uxtb	r2, r2
    ffa8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
			memcpy(adv->ad_data_backup.data, pdu->adv_ind.data,
    ffac:	f108 0108 	add.w	r1, r8, #8
    ffb0:	4813      	ldr	r0, [pc, #76]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ffb2:	f00d fd2b 	bl	1da0c <memcpy>
    ffb6:	e78e      	b.n	fed6 <ll_adv_params_set+0xa2>
			memcpy(pdu->adv_ind.data, adv->ad_data_backup.data,
    ffb8:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
    ffbc:	4910      	ldr	r1, [pc, #64]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ffbe:	f108 0008 	add.w	r0, r8, #8
    ffc2:	f00d fd23 	bl	1da0c <memcpy>
			pdu->len = offsetof(struct pdu_adv_adv_ind, data) +
    ffc6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    ffca:	3306      	adds	r3, #6
    ffcc:	f888 3001 	strb.w	r3, [r8, #1]
    ffd0:	e79f      	b.n	ff12 <ll_adv_params_set+0xde>
			LL_ASSERT(pdu->len >=
    ffd2:	4a0c      	ldr	r2, [pc, #48]	; (10004 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5>)
    ffd4:	490c      	ldr	r1, [pc, #48]	; (10008 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x9>)
    ffd6:	480d      	ldr	r0, [pc, #52]	; (1000c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xd>)
    ffd8:	f44f 73c1 	mov.w	r3, #386	; 0x182
    ffdc:	f00b fbca 	bl	1b774 <printk>
    ffe0:	4040      	eors	r0, r0
    ffe2:	f380 8811 	msr	BASEPRI, r0
    ffe6:	f04f 0003 	mov.w	r0, #3
    ffea:	df02      	svc	2
			adv->ad_data_backup.len = pdu->len -
    ffec:	f898 2001 	ldrb.w	r2, [r8, #1]
    fff0:	e7d8      	b.n	ffa4 <ll_adv_params_set+0x170>
    fff2:	bf00      	nop
    fff4:	20001ebc 	.word	0x20001ebc
    fff8:	00021044 	.word	0x00021044
    fffc:	20001f27 	.word	0x20001f27
   10000:	20001efd 	.word	0x20001efd
   10004:	00021c58 	.word	0x00021c58
   10008:	00021d54 	.word	0x00021d54
   1000c:	0002180c 	.word	0x0002180c

00010010 <ull_adv_init>:
{
   10010:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   10012:	4c06      	ldr	r4, [pc, #24]	; (1002c <ull_adv_init+0x1c>)
   10014:	f104 0028 	add.w	r0, r4, #40	; 0x28
   10018:	f006 fe8a 	bl	16d30 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   1001c:	f104 0034 	add.w	r0, r4, #52	; 0x34
   10020:	f006 fe86 	bl	16d30 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   10024:	f7ff fdb8 	bl	fb98 <init_set.constprop.0>
}
   10028:	2000      	movs	r0, #0
   1002a:	bd10      	pop	{r4, pc}
   1002c:	20001ebc 	.word	0x20001ebc

00010030 <ull_adv_reset>:
{
   10030:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   10032:	4b0b      	ldr	r3, [pc, #44]	; (10060 <ull_adv_reset+0x30>)
   10034:	f893 206a 	ldrb.w	r2, [r3, #106]	; 0x6a
   10038:	07d2      	lsls	r2, r2, #31
   1003a:	d50e      	bpl.n	1005a <ull_adv_reset+0x2a>
	if (adv->lll.conn) {
   1003c:	6a1a      	ldr	r2, [r3, #32]
   1003e:	b152      	cbz	r2, 10056 <ull_adv_reset+0x26>
		adv->lll.conn->slave.cancelled = 1U;
   10040:	f892 1020 	ldrb.w	r1, [r2, #32]
   10044:	f041 0102 	orr.w	r1, r1, #2
   10048:	f882 1020 	strb.w	r1, [r2, #32]
		if (unlikely(adv->lll.conn->slave.initiated)) {
   1004c:	6a1b      	ldr	r3, [r3, #32]
   1004e:	f893 3020 	ldrb.w	r3, [r3, #32]
   10052:	07db      	lsls	r3, r3, #31
   10054:	d401      	bmi.n	1005a <ull_adv_reset+0x2a>
   10056:	f7ff fe0b 	bl	fc70 <disable.part.0>
}
   1005a:	2000      	movs	r0, #0
   1005c:	bd08      	pop	{r3, pc}
   1005e:	bf00      	nop
   10060:	20001ebc 	.word	0x20001ebc

00010064 <ull_adv_reset_finalize>:
{
   10064:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&lll->adv_data);
   10066:	4c0a      	ldr	r4, [pc, #40]	; (10090 <ull_adv_reset_finalize+0x2c>)
   10068:	f104 0528 	add.w	r5, r4, #40	; 0x28
   1006c:	4628      	mov	r0, r5
		lll_adv_data_reset(&lll->scan_rsp);
   1006e:	3434      	adds	r4, #52	; 0x34
		lll_adv_data_reset(&lll->adv_data);
   10070:	f006 fe6e 	bl	16d50 <lll_adv_data_reset>
		lll_adv_data_reset(&lll->scan_rsp);
   10074:	4620      	mov	r0, r4
   10076:	f006 fe6b 	bl	16d50 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   1007a:	4628      	mov	r0, r5
   1007c:	f006 fe58 	bl	16d30 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   10080:	4620      	mov	r0, r4
   10082:	f006 fe55 	bl	16d30 <lll_adv_data_init>
	init_set(&ll_adv[0]);
   10086:	f7ff fd87 	bl	fb98 <init_set.constprop.0>
}
   1008a:	2000      	movs	r0, #0
   1008c:	bd38      	pop	{r3, r4, r5, pc}
   1008e:	bf00      	nop
   10090:	20001ebc 	.word	0x20001ebc

00010094 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   10094:	4a03      	ldr	r2, [pc, #12]	; (100a4 <ull_adv_handle_get+0x10>)
   10096:	4b04      	ldr	r3, [pc, #16]	; (100a8 <ull_adv_handle_get+0x14>)
   10098:	1a80      	subs	r0, r0, r2
   1009a:	fba3 3000 	umull	r3, r0, r3, r0
}
   1009e:	f3c0 108f 	ubfx	r0, r0, #6, #16
   100a2:	4770      	bx	lr
   100a4:	20001ebc 	.word	0x20001ebc
   100a8:	8d3dcb09 	.word	0x8d3dcb09

000100ac <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   100ac:	4a04      	ldr	r2, [pc, #16]	; (100c0 <ull_adv_lll_handle_get+0x14>)
   100ae:	6800      	ldr	r0, [r0, #0]
   100b0:	4b04      	ldr	r3, [pc, #16]	; (100c4 <ull_adv_lll_handle_get+0x18>)
   100b2:	1a80      	subs	r0, r0, r2
   100b4:	fba3 3000 	umull	r3, r0, r3, r0
}
   100b8:	f3c0 108f 	ubfx	r0, r0, #6, #16
   100bc:	4770      	bx	lr
   100be:	bf00      	nop
   100c0:	20001ebc 	.word	0x20001ebc
   100c4:	8d3dcb09 	.word	0x8d3dcb09

000100c8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   100c8:	b938      	cbnz	r0, 100da <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   100ca:	4805      	ldr	r0, [pc, #20]	; (100e0 <ull_adv_is_enabled_get+0x18>)
   100cc:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
	return &ll_adv[handle];
   100d0:	f013 0f01 	tst.w	r3, #1
   100d4:	bf08      	it	eq
   100d6:	2000      	moveq	r0, #0
   100d8:	4770      	bx	lr
		return NULL;
   100da:	2000      	movs	r0, #0
}
   100dc:	4770      	bx	lr
   100de:	bf00      	nop
   100e0:	20001ebc 	.word	0x20001ebc

000100e4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   100e4:	b928      	cbnz	r0, 100f2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   100e6:	4b04      	ldr	r3, [pc, #16]	; (100f8 <ull_adv_is_enabled+0x14>)
   100e8:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   100ec:	f000 0001 	and.w	r0, r0, #1
   100f0:	4770      	bx	lr
   100f2:	2000      	movs	r0, #0
}
   100f4:	4770      	bx	lr
   100f6:	bf00      	nop
   100f8:	20001ebc 	.word	0x20001ebc

000100fc <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   100fc:	b950      	cbnz	r0, 10114 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   100fe:	4b06      	ldr	r3, [pc, #24]	; (10118 <ull_adv_filter_pol_get+0x1c>)
   10100:	f893 006a 	ldrb.w	r0, [r3, #106]	; 0x6a
   10104:	f010 0001 	ands.w	r0, r0, #1
   10108:	d005      	beq.n	10116 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   1010a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1010e:	f000 0003 	and.w	r0, r0, #3
   10112:	4770      	bx	lr
		return 0;
   10114:	2000      	movs	r0, #0
}
   10116:	4770      	bx	lr
   10118:	20001ebc 	.word	0x20001ebc

0001011c <ull_adv_pdu_update_addrs>:
{
   1011c:	b570      	push	{r4, r5, r6, lr}
   1011e:	460c      	mov	r4, r1
   10120:	4605      	mov	r5, r0
	const uint8_t *rpa = ull_filter_adva_get(adv);
   10122:	f005 fd99 	bl	15c58 <ull_filter_adva_get>
	if (!rpa || IS_ENABLED(CONFIG_BT_CTLR_CHECK_SAME_PEER_CONN)) {
   10126:	4601      	mov	r1, r0
   10128:	b300      	cbz	r0, 1016c <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   1012a:	7823      	ldrb	r3, [r4, #0]
   1012c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10130:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   10132:	1ca6      	adds	r6, r4, #2
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   10134:	2206      	movs	r2, #6
   10136:	4630      	mov	r0, r6
   10138:	f00d fc68 	bl	1da0c <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1013c:	7823      	ldrb	r3, [r4, #0]
   1013e:	f003 030f 	and.w	r3, r3, #15
   10142:	2b01      	cmp	r3, #1
   10144:	d001      	beq.n	1014a <ull_adv_pdu_update_addrs+0x2e>
}
   10146:	4630      	mov	r0, r6
   10148:	bd70      	pop	{r4, r5, r6, pc}
	rx_addr = ull_filter_tgta_get(adv);
   1014a:	4628      	mov	r0, r5
   1014c:	f005 fdb2 	bl	15cb4 <ull_filter_tgta_get>
	if (rx_addr) {
   10150:	4601      	mov	r1, r0
   10152:	2800      	cmp	r0, #0
   10154:	d0f7      	beq.n	10146 <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   10156:	7823      	ldrb	r3, [r4, #0]
   10158:	4620      	mov	r0, r4
   1015a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1015e:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   10162:	2206      	movs	r2, #6
   10164:	f00d fc52 	bl	1da0c <memcpy>
}
   10168:	4630      	mov	r0, r6
   1016a:	bd70      	pop	{r4, r5, r6, pc}
			own_addr = ll_addr_get(pdu->tx_addr, NULL);
   1016c:	7820      	ldrb	r0, [r4, #0]
   1016e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   10172:	f7fc fdb5 	bl	cce0 <ll_addr_get>
   10176:	4601      	mov	r1, r0
	if (rpa) {
   10178:	e7db      	b.n	10132 <ull_adv_pdu_update_addrs+0x16>
   1017a:	bf00      	nop

0001017c <ull_adv_data_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   1017c:	291f      	cmp	r1, #31
   1017e:	d849      	bhi.n	10214 <ull_adv_data_set+0x98>
{
   10180:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   10182:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   10186:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1018a:	b083      	sub	sp, #12
   1018c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1018e:	7833      	ldrb	r3, [r6, #0]
   10190:	f003 030f 	and.w	r3, r3, #15
   10194:	2b01      	cmp	r3, #1
   10196:	460d      	mov	r5, r1
   10198:	4604      	mov	r4, r0
   1019a:	4617      	mov	r7, r2
   1019c:	d03c      	beq.n	10218 <ull_adv_data_set+0x9c>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1019e:	f10d 0107 	add.w	r1, sp, #7
   101a2:	3028      	adds	r0, #40	; 0x28
   101a4:	f006 fe54 	bl	16e50 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   101a8:	4631      	mov	r1, r6
   101aa:	4606      	mov	r6, r0
   101ac:	f811 2b02 	ldrb.w	r2, [r1], #2
   101b0:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   101b4:	f3c2 0303 	ubfx	r3, r2, #0, #4
   101b8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   101bc:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   101c0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   101c4:	f002 0280 	and.w	r2, r2, #128	; 0x80
   101c8:	4630      	mov	r0, r6
   101ca:	4313      	orrs	r3, r2
   101cc:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   101d0:	2206      	movs	r2, #6
   101d2:	f00d fc1b 	bl	1da0c <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   101d6:	462a      	mov	r2, r5
   101d8:	4639      	mov	r1, r7
   101da:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
   101de:	3506      	adds	r5, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
   101e0:	f00d fc14 	bl	1da0c <memcpy>
	pdu->len = BDADDR_SIZE + len;
   101e4:	7075      	strb	r5, [r6, #1]
	if (adv->is_enabled) {
   101e6:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   101ea:	07db      	lsls	r3, r3, #31
   101ec:	d406      	bmi.n	101fc <ull_adv_data_set+0x80>
	pdu->last = idx;
   101ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
   101f2:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	return 0;
   101f6:	2000      	movs	r0, #0
}
   101f8:	b003      	add	sp, #12
   101fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   101fc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   10200:	eb04 0383 	add.w	r3, r4, r3, lsl #2
		err = ull_adv_time_update(adv, pdu, pdu_scan);
   10204:	4631      	mov	r1, r6
   10206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   10208:	4620      	mov	r0, r4
   1020a:	f7f0 fdbd 	bl	d88 <ull_adv_time_update>
		if (err) {
   1020e:	2800      	cmp	r0, #0
   10210:	d0ed      	beq.n	101ee <ull_adv_data_set+0x72>
   10212:	e7f1      	b.n	101f8 <ull_adv_data_set+0x7c>
		return BT_HCI_ERR_INVALID_PARAM;
   10214:	2012      	movs	r0, #18
}
   10216:	4770      	bx	lr
		adv->ad_data_backup.len = len;
   10218:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
		memcpy(adv->ad_data_backup.data, data, adv->ad_data_backup.len);
   1021c:	460a      	mov	r2, r1
   1021e:	3041      	adds	r0, #65	; 0x41
   10220:	4639      	mov	r1, r7
   10222:	f00d fbf3 	bl	1da0c <memcpy>
		return 0;
   10226:	2000      	movs	r0, #0
}
   10228:	b003      	add	sp, #12
   1022a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001022c <ll_adv_data_set>:
{
   1022c:	4603      	mov	r3, r0
   1022e:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
   10230:	4801      	ldr	r0, [pc, #4]	; (10238 <ll_adv_data_set+0xc>)
   10232:	4619      	mov	r1, r3
   10234:	f7ff bfa2 	b.w	1017c <ull_adv_data_set>
   10238:	20001ebc 	.word	0x20001ebc

0001023c <ull_scan_rsp_set.part.0>:
uint8_t ull_scan_rsp_set(struct ll_adv_set *adv, uint8_t len,
   1023c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1023e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
   10242:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   10246:	b083      	sub	sp, #12
   10248:	6b9d      	ldr	r5, [r3, #56]	; 0x38
   1024a:	460e      	mov	r6, r1
   1024c:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   1024e:	f10d 0107 	add.w	r1, sp, #7
   10252:	3034      	adds	r0, #52	; 0x34
   10254:	4617      	mov	r7, r2
   10256:	f006 fdfb 	bl	16e50 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   1025a:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   1025c:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   1025e:	f811 3b02 	ldrb.w	r3, [r1], #2
   10262:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   10266:	019b      	lsls	r3, r3, #6
   10268:	f043 0304 	orr.w	r3, r3, #4
   1026c:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   1026e:	1db3      	adds	r3, r6, #6
   10270:	7043      	strb	r3, [r0, #1]
   10272:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   10274:	3002      	adds	r0, #2
   10276:	f00d fbc9 	bl	1da0c <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   1027a:	4632      	mov	r2, r6
   1027c:	4639      	mov	r1, r7
   1027e:	f105 0008 	add.w	r0, r5, #8
   10282:	f00d fbc3 	bl	1da0c <memcpy>
	if (adv->is_enabled) {
   10286:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
   1028a:	07db      	lsls	r3, r3, #31
   1028c:	d50a      	bpl.n	102a4 <ull_scan_rsp_set.part.0+0x68>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1028e:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   10292:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   10296:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
		if ((pdu_adv_scan->type == PDU_ADV_TYPE_ADV_IND) ||
   10298:	780b      	ldrb	r3, [r1, #0]
   1029a:	f013 030f 	ands.w	r3, r3, #15
   1029e:	d008      	beq.n	102b2 <ull_scan_rsp_set.part.0+0x76>
   102a0:	2b06      	cmp	r3, #6
   102a2:	d006      	beq.n	102b2 <ull_scan_rsp_set.part.0+0x76>
	pdu->last = idx;
   102a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
   102a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
	return 0;
   102ac:	2000      	movs	r0, #0
}
   102ae:	b003      	add	sp, #12
   102b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			err = ull_adv_time_update(adv, pdu_adv_scan, pdu);
   102b2:	462a      	mov	r2, r5
   102b4:	4620      	mov	r0, r4
   102b6:	f7f0 fd67 	bl	d88 <ull_adv_time_update>
			if (err) {
   102ba:	2800      	cmp	r0, #0
   102bc:	d0f2      	beq.n	102a4 <ull_scan_rsp_set.part.0+0x68>
   102be:	e7f6      	b.n	102ae <ull_scan_rsp_set.part.0+0x72>

000102c0 <ll_adv_scan_rsp_set>:
	if (len > PDU_AC_DATA_SIZE_MAX) {
   102c0:	281f      	cmp	r0, #31
{
   102c2:	4603      	mov	r3, r0
   102c4:	460a      	mov	r2, r1
	if (len > PDU_AC_DATA_SIZE_MAX) {
   102c6:	d803      	bhi.n	102d0 <ll_adv_scan_rsp_set+0x10>
   102c8:	4802      	ldr	r0, [pc, #8]	; (102d4 <ll_adv_scan_rsp_set+0x14>)
   102ca:	4619      	mov	r1, r3
   102cc:	f7ff bfb6 	b.w	1023c <ull_scan_rsp_set.part.0>
}
   102d0:	2012      	movs	r0, #18
   102d2:	4770      	bx	lr
   102d4:	20001ebc 	.word	0x20001ebc

000102d8 <init_reset>:
{
   102d8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   102da:	4b15      	ldr	r3, [pc, #84]	; (10330 <init_reset+0x58>)
   102dc:	4815      	ldr	r0, [pc, #84]	; (10334 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   102de:	4c16      	ldr	r4, [pc, #88]	; (10338 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   102e0:	2201      	movs	r2, #1
   102e2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   102e6:	f7fb f9eb 	bl	b6c0 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_BUF_ACL_TX_COUNT,
   102ea:	4b14      	ldr	r3, [pc, #80]	; (1033c <init_reset+0x64>)
   102ec:	2203      	movs	r2, #3
   102ee:	1d18      	adds	r0, r3, #4
   102f0:	2124      	movs	r1, #36	; 0x24
   102f2:	f7fb f9e5 	bl	b6c0 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   102f6:	4b12      	ldr	r3, [pc, #72]	; (10340 <init_reset+0x68>)
   102f8:	2204      	movs	r2, #4
   102fa:	1898      	adds	r0, r3, r2
   102fc:	212c      	movs	r1, #44	; 0x2c
   102fe:	f7fb f9df 	bl	b6c0 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   10302:	4b10      	ldr	r3, [pc, #64]	; (10344 <init_reset+0x6c>)
   10304:	2207      	movs	r2, #7
   10306:	1d18      	adds	r0, r3, #4
   10308:	2108      	movs	r1, #8
   1030a:	f7fb f9d9 	bl	b6c0 <mem_init>
	default_phy_tx |= PHY_2M;
   1030e:	490e      	ldr	r1, [pc, #56]	; (10348 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   10310:	4a0e      	ldr	r2, [pc, #56]	; (1034c <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   10312:	480f      	ldr	r0, [pc, #60]	; (10350 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   10314:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   10316:	f04f 0c1b 	mov.w	ip, #27
   1031a:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   1031e:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   10320:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   10324:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   10326:	f8a0 c000 	strh.w	ip, [r0]
}
   1032a:	2000      	movs	r0, #0
   1032c:	bd10      	pop	{r4, pc}
   1032e:	bf00      	nop
   10330:	20001f4c 	.word	0x20001f4c
   10334:	20001020 	.word	0x20001020
   10338:	20002906 	.word	0x20002906
   1033c:	20001f6c 	.word	0x20001f6c
   10340:	20001fdc 	.word	0x20001fdc
   10344:	20002090 	.word	0x20002090
   10348:	20002a7c 	.word	0x20002a7c
   1034c:	20002a7b 	.word	0x20002a7b
   10350:	20002908 	.word	0x20002908

00010354 <ctrl_tx_pause_enqueue>:
{
   10354:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
   10356:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
{
   1035a:	4604      	mov	r4, r0
   1035c:	460d      	mov	r5, r1
	if (
   1035e:	b11b      	cbz	r3, 10368 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
   10360:	f890 1166 	ldrb.w	r1, [r0, #358]	; 0x166
	    conn->tx_head &&
   10364:	0788      	lsls	r0, r1, #30
   10366:	d50e      	bpl.n	10386 <ctrl_tx_pause_enqueue+0x32>
		if (!conn->tx_ctrl) {
   10368:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1036c:	b351      	cbz	r1, 103c4 <ctrl_tx_pause_enqueue+0x70>
			LL_ASSERT(!pause);
   1036e:	2a00      	cmp	r2, #0
   10370:	d132      	bne.n	103d8 <ctrl_tx_pause_enqueue+0x84>
	tx->next = conn->tx_ctrl_last->next;
   10372:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10376:	681a      	ldr	r2, [r3, #0]
   10378:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   1037a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   1037c:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1037e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10382:	b1e3      	cbz	r3, 103be <ctrl_tx_pause_enqueue+0x6a>
}
   10384:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
   10386:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   1038a:	07c9      	lsls	r1, r1, #31
   1038c:	d4ec      	bmi.n	10368 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
   1038e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   10392:	428b      	cmp	r3, r1
   10394:	d02e      	beq.n	103f4 <ctrl_tx_pause_enqueue+0xa0>
		} else if (!conn->tx_ctrl) {
   10396:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1039a:	2900      	cmp	r1, #0
   1039c:	d038      	beq.n	10410 <ctrl_tx_pause_enqueue+0xbc>
			LL_ASSERT(!pause);
   1039e:	2a00      	cmp	r2, #0
   103a0:	d0e7      	beq.n	10372 <ctrl_tx_pause_enqueue+0x1e>
   103a2:	4a23      	ldr	r2, [pc, #140]	; (10430 <ctrl_tx_pause_enqueue+0xdc>)
   103a4:	4923      	ldr	r1, [pc, #140]	; (10434 <ctrl_tx_pause_enqueue+0xe0>)
   103a6:	4824      	ldr	r0, [pc, #144]	; (10438 <ctrl_tx_pause_enqueue+0xe4>)
   103a8:	f640 03e7 	movw	r3, #2279	; 0x8e7
   103ac:	f00b f9e2 	bl	1b774 <printk>
   103b0:	4040      	eors	r0, r0
   103b2:	f380 8811 	msr	BASEPRI, r0
   103b6:	f04f 0003 	mov.w	r0, #3
   103ba:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   103bc:	e7d9      	b.n	10372 <ctrl_tx_pause_enqueue+0x1e>
		conn->tx_data_last = tx;
   103be:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
}
   103c2:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
   103c4:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
   103c6:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
			if (!pause) {
   103ca:	2a00      	cmp	r2, #0
   103cc:	d1d9      	bne.n	10382 <ctrl_tx_pause_enqueue+0x2e>
				conn->tx_ctrl_last = tx;
   103ce:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
	if (!tx->next) {
   103d2:	2b00      	cmp	r3, #0
   103d4:	d1d6      	bne.n	10384 <ctrl_tx_pause_enqueue+0x30>
   103d6:	e7f2      	b.n	103be <ctrl_tx_pause_enqueue+0x6a>
			LL_ASSERT(!pause);
   103d8:	4a15      	ldr	r2, [pc, #84]	; (10430 <ctrl_tx_pause_enqueue+0xdc>)
   103da:	4916      	ldr	r1, [pc, #88]	; (10434 <ctrl_tx_pause_enqueue+0xe0>)
   103dc:	4816      	ldr	r0, [pc, #88]	; (10438 <ctrl_tx_pause_enqueue+0xe4>)
   103de:	f640 03f9 	movw	r3, #2297	; 0x8f9
   103e2:	f00b f9c7 	bl	1b774 <printk>
   103e6:	4040      	eors	r0, r0
   103e8:	f380 8811 	msr	BASEPRI, r0
   103ec:	f04f 0003 	mov.w	r0, #3
   103f0:	df02      	svc	2
   103f2:	e7be      	b.n	10372 <ctrl_tx_pause_enqueue+0x1e>
			conn->tx_data = conn->tx_data->next;
   103f4:	6819      	ldr	r1, [r3, #0]
   103f6:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   103fa:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   103fe:	2900      	cmp	r1, #0
   10400:	d1cd      	bne.n	1039e <ctrl_tx_pause_enqueue+0x4a>
			tx->next = conn->tx_head->next;
   10402:	6819      	ldr	r1, [r3, #0]
   10404:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   10406:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   10408:	682b      	ldr	r3, [r5, #0]
			if (!pause) {
   1040a:	2a00      	cmp	r2, #0
   1040c:	d0df      	beq.n	103ce <ctrl_tx_pause_enqueue+0x7a>
   1040e:	e7b8      	b.n	10382 <ctrl_tx_pause_enqueue+0x2e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10410:	7919      	ldrb	r1, [r3, #4]
   10412:	f001 0103 	and.w	r1, r1, #3
   10416:	2903      	cmp	r1, #3
   10418:	d004      	beq.n	10424 <ctrl_tx_pause_enqueue+0xd0>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1041a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
			LL_ASSERT(!pause);
   1041e:	2a00      	cmp	r2, #0
   10420:	d0a7      	beq.n	10372 <ctrl_tx_pause_enqueue+0x1e>
   10422:	e7be      	b.n	103a2 <ctrl_tx_pause_enqueue+0x4e>
	    ((pdu_data_tx->llctrl.opcode !=
   10424:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10426:	2903      	cmp	r1, #3
   10428:	d0eb      	beq.n	10402 <ctrl_tx_pause_enqueue+0xae>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1042a:	290a      	cmp	r1, #10
   1042c:	d1f5      	bne.n	1041a <ctrl_tx_pause_enqueue+0xc6>
   1042e:	e7e8      	b.n	10402 <ctrl_tx_pause_enqueue+0xae>
   10430:	00021da4 	.word	0x00021da4
   10434:	00021de4 	.word	0x00021de4
   10438:	0002180c 	.word	0x0002180c

0001043c <ticker_op_stop_cb>:
{
   1043c:	b538      	push	{r3, r4, r5, lr}
   1043e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10440:	2800      	cmp	r0, #0
   10442:	d14a      	bne.n	104da <ticker_op_stop_cb+0x9e>
	mfy.param = &conn->lll;
   10444:	4d2c      	ldr	r5, [pc, #176]	; (104f8 <ticker_op_stop_cb+0xbc>)
   10446:	f104 031c 	add.w	r3, r4, #28
   1044a:	60ab      	str	r3, [r5, #8]
   1044c:	7821      	ldrb	r1, [r4, #0]
	if (ull_ref_get(hdr)) {
   1044e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   10452:	2900      	cmp	r1, #0
   10454:	d02a      	beq.n	104ac <ticker_op_stop_cb+0x70>
		LL_ASSERT(!hdr->disabled_cb);
   10456:	6962      	ldr	r2, [r4, #20]
   10458:	b16a      	cbz	r2, 10476 <ticker_op_stop_cb+0x3a>
   1045a:	4a28      	ldr	r2, [pc, #160]	; (104fc <ticker_op_stop_cb+0xc0>)
   1045c:	4928      	ldr	r1, [pc, #160]	; (10500 <ticker_op_stop_cb+0xc4>)
   1045e:	4829      	ldr	r0, [pc, #164]	; (10504 <ticker_op_stop_cb+0xc8>)
   10460:	f640 030b 	movw	r3, #2059	; 0x80b
   10464:	f00b f986 	bl	1b774 <printk>
   10468:	4040      	eors	r0, r0
   1046a:	f380 8811 	msr	BASEPRI, r0
   1046e:	f04f 0003 	mov.w	r0, #3
   10472:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   10474:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   10476:	4924      	ldr	r1, [pc, #144]	; (10508 <ticker_op_stop_cb+0xcc>)
		mfy.fp = lll_disable;
   10478:	4824      	ldr	r0, [pc, #144]	; (1050c <ticker_op_stop_cb+0xd0>)
		hdr->disabled_param = mfy.param;
   1047a:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1047c:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   1047e:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   10480:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   10482:	4b1d      	ldr	r3, [pc, #116]	; (104f8 <ticker_op_stop_cb+0xbc>)
   10484:	4611      	mov	r1, r2
   10486:	2002      	movs	r0, #2
   10488:	f7fb fa22 	bl	b8d0 <mayfly_enqueue>
		LL_ASSERT(!ret);
   1048c:	b900      	cbnz	r0, 10490 <ticker_op_stop_cb+0x54>
}
   1048e:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!ret);
   10490:	4a1a      	ldr	r2, [pc, #104]	; (104fc <ticker_op_stop_cb+0xc0>)
   10492:	491f      	ldr	r1, [pc, #124]	; (10510 <ticker_op_stop_cb+0xd4>)
   10494:	481b      	ldr	r0, [pc, #108]	; (10504 <ticker_op_stop_cb+0xc8>)
   10496:	f640 0312 	movw	r3, #2066	; 0x812
   1049a:	f00b f96b 	bl	1b774 <printk>
   1049e:	4040      	eors	r0, r0
   104a0:	f380 8811 	msr	BASEPRI, r0
   104a4:	f04f 0003 	mov.w	r0, #3
   104a8:	df02      	svc	2
}
   104aa:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   104ac:	4816      	ldr	r0, [pc, #88]	; (10508 <ticker_op_stop_cb+0xcc>)
   104ae:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   104b0:	462b      	mov	r3, r5
   104b2:	2101      	movs	r1, #1
   104b4:	2002      	movs	r0, #2
   104b6:	f7fb fa0b 	bl	b8d0 <mayfly_enqueue>
		LL_ASSERT(!ret);
   104ba:	2800      	cmp	r0, #0
   104bc:	d0e7      	beq.n	1048e <ticker_op_stop_cb+0x52>
   104be:	4a0f      	ldr	r2, [pc, #60]	; (104fc <ticker_op_stop_cb+0xc0>)
   104c0:	4913      	ldr	r1, [pc, #76]	; (10510 <ticker_op_stop_cb+0xd4>)
   104c2:	4810      	ldr	r0, [pc, #64]	; (10504 <ticker_op_stop_cb+0xc8>)
   104c4:	f640 0319 	movw	r3, #2073	; 0x819
   104c8:	f00b f954 	bl	1b774 <printk>
   104cc:	4040      	eors	r0, r0
   104ce:	f380 8811 	msr	BASEPRI, r0
   104d2:	f04f 0003 	mov.w	r0, #3
   104d6:	df02      	svc	2
}
   104d8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   104da:	4a08      	ldr	r2, [pc, #32]	; (104fc <ticker_op_stop_cb+0xc0>)
   104dc:	490d      	ldr	r1, [pc, #52]	; (10514 <ticker_op_stop_cb+0xd8>)
   104de:	4809      	ldr	r0, [pc, #36]	; (10504 <ticker_op_stop_cb+0xc8>)
   104e0:	f240 73fd 	movw	r3, #2045	; 0x7fd
   104e4:	f00b f946 	bl	1b774 <printk>
   104e8:	4040      	eors	r0, r0
   104ea:	f380 8811 	msr	BASEPRI, r0
   104ee:	f04f 0003 	mov.w	r0, #3
   104f2:	df02      	svc	2
   104f4:	e7a6      	b.n	10444 <ticker_op_stop_cb+0x8>
   104f6:	bf00      	nop
   104f8:	20000514 	.word	0x20000514
   104fc:	00021da4 	.word	0x00021da4
   10500:	00021cf0 	.word	0x00021cf0
   10504:	0002180c 	.word	0x0002180c
   10508:	00010691 	.word	0x00010691
   1050c:	00016535 	.word	0x00016535
   10510:	00021bb8 	.word	0x00021bb8
   10514:	00021dec 	.word	0x00021dec

00010518 <tx_lll_flush>:
{
   10518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	conn = HDR_LLL2ULL(lll);
   1051c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10520:	4934      	ldr	r1, [pc, #208]	; (105f4 <tx_lll_flush+0xdc>)
{
   10522:	b083      	sub	sp, #12
   10524:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10526:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   1052a:	4640      	mov	r0, r8
   1052c:	f7fb f92e 	bl	b78c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   10530:	f105 0648 	add.w	r6, r5, #72	; 0x48
	lll_conn_flush(handle, lll);
   10534:	4629      	mov	r1, r5
   10536:	f007 f87b 	bl	17630 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1053a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   1053c:	aa01      	add	r2, sp, #4
   1053e:	4631      	mov	r1, r6
   10540:	f7fb f964 	bl	b80c <memq_dequeue>
	while (link) {
   10544:	b328      	cbz	r0, 10592 <tx_lll_flush+0x7a>
   10546:	4c2c      	ldr	r4, [pc, #176]	; (105f8 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   10548:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1054c:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   10550:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   10552:	f894 c001 	ldrb.w	ip, [r4, #1]
   10556:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   10558:	1c4b      	adds	r3, r1, #1
   1055a:	b2db      	uxtb	r3, r3
		last = 0U;
   1055c:	459c      	cmp	ip, r3
   1055e:	bf08      	it	eq
   10560:	2300      	moveq	r3, #0
	if (last == first) {
   10562:	429a      	cmp	r2, r3
   10564:	d035      	beq.n	105d2 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10566:	7822      	ldrb	r2, [r4, #0]
   10568:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   1056c:	eb19 0c02 	adds.w	ip, r9, r2
   10570:	d02f      	beq.n	105d2 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   10572:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   10574:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   10578:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   1057a:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1057e:	6002      	str	r2, [r0, #0]
		tx->next = link;
   10580:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   10582:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
	*last = idx; /* Commit: Update write index */
   10584:	70e3      	strb	r3, [r4, #3]
   10586:	aa01      	add	r2, sp, #4
   10588:	4631      	mov	r1, r6
   1058a:	f7fb f93f 	bl	b80c <memq_dequeue>
	while (link) {
   1058e:	2800      	cmp	r0, #0
   10590:	d1de      	bne.n	10550 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   10592:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
	rx = (void *)&conn->llcp_terminate.node_rx;
   10596:	f508 74a2 	add.w	r4, r8, #324	; 0x144
	LL_ASSERT(rx->hdr.link);
   1059a:	b150      	cbz	r0, 105b2 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1059c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1059e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   105a0:	f8c8 3144 	str.w	r3, [r8, #324]	; 0x144
	ull_rx_put(link, rx);
   105a4:	f7ff f816 	bl	f5d4 <ull_rx_put>
	ull_rx_sched();
   105a8:	f7ff f824 	bl	f5f4 <ull_rx_sched>
}
   105ac:	b003      	add	sp, #12
   105ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   105b2:	4a12      	ldr	r2, [pc, #72]	; (105fc <tx_lll_flush+0xe4>)
   105b4:	4912      	ldr	r1, [pc, #72]	; (10600 <tx_lll_flush+0xe8>)
   105b6:	4813      	ldr	r0, [pc, #76]	; (10604 <tx_lll_flush+0xec>)
   105b8:	f640 0354 	movw	r3, #2132	; 0x854
   105bc:	f00b f8da 	bl	1b774 <printk>
   105c0:	4040      	eors	r0, r0
   105c2:	f380 8811 	msr	BASEPRI, r0
   105c6:	f04f 0003 	mov.w	r0, #3
   105ca:	df02      	svc	2
	link = rx->hdr.link;
   105cc:	f8d8 0144 	ldr.w	r0, [r8, #324]	; 0x144
   105d0:	e7e4      	b.n	1059c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   105d2:	4a0a      	ldr	r2, [pc, #40]	; (105fc <tx_lll_flush+0xe4>)
   105d4:	490c      	ldr	r1, [pc, #48]	; (10608 <tx_lll_flush+0xf0>)
   105d6:	480b      	ldr	r0, [pc, #44]	; (10604 <tx_lll_flush+0xec>)
   105d8:	f44f 6304 	mov.w	r3, #2112	; 0x840
   105dc:	f00b f8ca 	bl	1b774 <printk>
   105e0:	4040      	eors	r0, r0
   105e2:	f380 8811 	msr	BASEPRI, r0
   105e6:	f04f 0003 	mov.w	r0, #3
   105ea:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   105ec:	2300      	movs	r3, #0
   105ee:	801b      	strh	r3, [r3, #0]
   105f0:	deff      	udf	#255	; 0xff
   105f2:	bf00      	nop
   105f4:	20001020 	.word	0x20001020
   105f8:	2000049c 	.word	0x2000049c
   105fc:	00021da4 	.word	0x00021da4
   10600:	00021e00 	.word	0x00021e00
   10604:	0002180c 	.word	0x0002180c
   10608:	00021df8 	.word	0x00021df8

0001060c <ctrl_tx_sec_enqueue>:
	if (conn->llcp_enc.pause_tx) {
   1060c:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   10610:	f012 0202 	ands.w	r2, r2, #2
   10614:	d00a      	beq.n	1062c <ctrl_tx_sec_enqueue+0x20>
		if (!conn->tx_ctrl) {
   10616:	f8d0 31c8 	ldr.w	r3, [r0, #456]	; 0x1c8
   1061a:	b1d3      	cbz	r3, 10652 <ctrl_tx_sec_enqueue+0x46>
			tx->next = conn->tx_ctrl_last->next;
   1061c:	f8d0 31cc 	ldr.w	r3, [r0, #460]	; 0x1cc
   10620:	681a      	ldr	r2, [r3, #0]
   10622:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   10624:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   10626:	680b      	ldr	r3, [r1, #0]
   10628:	b1d3      	cbz	r3, 10660 <ctrl_tx_sec_enqueue+0x54>
   1062a:	4770      	bx	lr
		if (conn->tx_head) {
   1062c:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   10630:	b1cb      	cbz	r3, 10666 <ctrl_tx_sec_enqueue+0x5a>
{
   10632:	b500      	push	{lr}
			if ((conn->llcp_req != conn->llcp_ack) &&
   10634:	f890 c0e5 	ldrb.w	ip, [r0, #229]	; 0xe5
   10638:	f890 e0e4 	ldrb.w	lr, [r0, #228]	; 0xe4
   1063c:	45e6      	cmp	lr, ip
   1063e:	d004      	beq.n	1064a <ctrl_tx_sec_enqueue+0x3e>
   10640:	f890 c0e6 	ldrb.w	ip, [r0, #230]	; 0xe6
   10644:	f1bc 0f03 	cmp.w	ip, #3
   10648:	d010      	beq.n	1066c <ctrl_tx_sec_enqueue+0x60>
}
   1064a:	f85d eb04 	ldr.w	lr, [sp], #4
		ctrl_tx_pause_enqueue(conn, tx, pause);
   1064e:	f7ff be81 	b.w	10354 <ctrl_tx_pause_enqueue>
			tx->next = conn->tx_head;
   10652:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   10656:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   10658:	f8c0 11c4 	str.w	r1, [r0, #452]	; 0x1c4
		if (!tx->next) {
   1065c:	2b00      	cmp	r3, #0
   1065e:	d1e4      	bne.n	1062a <ctrl_tx_sec_enqueue+0x1e>
			conn->tx_data_last = tx;
   10660:	f8c0 11d4 	str.w	r1, [r0, #468]	; 0x1d4
   10664:	4770      	bx	lr
	bool pause = false;
   10666:	461a      	mov	r2, r3
		ctrl_tx_pause_enqueue(conn, tx, pause);
   10668:	f7ff be74 	b.w	10354 <ctrl_tx_pause_enqueue>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1066c:	f893 c004 	ldrb.w	ip, [r3, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   10670:	f00c 0c03 	and.w	ip, ip, #3
   10674:	f1bc 0f03 	cmp.w	ip, #3
   10678:	d1e7      	bne.n	1064a <ctrl_tx_sec_enqueue+0x3e>
			    ((pdu_data_tx->llctrl.opcode ==
   1067a:	79da      	ldrb	r2, [r3, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   1067c:	2a03      	cmp	r2, #3
   1067e:	d005      	beq.n	1068c <ctrl_tx_sec_enqueue+0x80>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   10680:	f1a2 020a 	sub.w	r2, r2, #10
   10684:	fab2 f282 	clz	r2, r2
   10688:	0952      	lsrs	r2, r2, #5
   1068a:	e7de      	b.n	1064a <ctrl_tx_sec_enqueue+0x3e>
				pause = true;
   1068c:	2201      	movs	r2, #1
   1068e:	e7dc      	b.n	1064a <ctrl_tx_sec_enqueue+0x3e>

00010690 <disabled_cb>:
{
   10690:	b508      	push	{r3, lr}
	mfy.param = param;
   10692:	4b0b      	ldr	r3, [pc, #44]	; (106c0 <disabled_cb+0x30>)
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   10694:	2200      	movs	r2, #0
	mfy.param = param;
   10696:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   10698:	4611      	mov	r1, r2
   1069a:	2001      	movs	r0, #1
   1069c:	f7fb f918 	bl	b8d0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   106a0:	b900      	cbnz	r0, 106a4 <disabled_cb+0x14>
}
   106a2:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   106a4:	4a07      	ldr	r2, [pc, #28]	; (106c4 <disabled_cb+0x34>)
   106a6:	4908      	ldr	r1, [pc, #32]	; (106c8 <disabled_cb+0x38>)
   106a8:	4808      	ldr	r0, [pc, #32]	; (106cc <disabled_cb+0x3c>)
   106aa:	f640 0326 	movw	r3, #2086	; 0x826
   106ae:	f00b f861 	bl	1b774 <printk>
   106b2:	4040      	eors	r0, r0
   106b4:	f380 8811 	msr	BASEPRI, r0
   106b8:	f04f 0003 	mov.w	r0, #3
   106bc:	df02      	svc	2
}
   106be:	bd08      	pop	{r3, pc}
   106c0:	20000504 	.word	0x20000504
   106c4:	00021da4 	.word	0x00021da4
   106c8:	00021bb8 	.word	0x00021bb8
   106cc:	0002180c 	.word	0x0002180c

000106d0 <conn_setup_adv_scan_disabled_cb>:
{
   106d0:	b508      	push	{r3, lr}
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   106d2:	6883      	ldr	r3, [r0, #8]
   106d4:	685a      	ldr	r2, [r3, #4]
	switch (lll->role) {
   106d6:	7f53      	ldrb	r3, [r2, #29]
   106d8:	09db      	lsrs	r3, r3, #7
   106da:	d10d      	bne.n	106f8 <conn_setup_adv_scan_disabled_cb+0x28>
		LL_ASSERT(0);
   106dc:	4a09      	ldr	r2, [pc, #36]	; (10704 <conn_setup_adv_scan_disabled_cb+0x34>)
   106de:	490a      	ldr	r1, [pc, #40]	; (10708 <conn_setup_adv_scan_disabled_cb+0x38>)
   106e0:	480a      	ldr	r0, [pc, #40]	; (1070c <conn_setup_adv_scan_disabled_cb+0x3c>)
   106e2:	f44f 63ef 	mov.w	r3, #1912	; 0x778
   106e6:	f00b f845 	bl	1b774 <printk>
   106ea:	4040      	eors	r0, r0
   106ec:	f380 8811 	msr	BASEPRI, r0
   106f0:	f04f 0003 	mov.w	r0, #3
   106f4:	df02      	svc	2
}
   106f6:	bd08      	pop	{r3, pc}
		ull_slave_setup(rx, ftr, lll);
   106f8:	4601      	mov	r1, r0
}
   106fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ull_slave_setup(rx, ftr, lll);
   106fe:	3108      	adds	r1, #8
   10700:	f7f0 be4a 	b.w	1398 <ull_slave_setup>
   10704:	00021da4 	.word	0x00021da4
   10708:	000218a4 	.word	0x000218a4
   1070c:	0002180c 	.word	0x0002180c

00010710 <ticker_start_conn_op_cb>:
{
   10710:	b510      	push	{r4, lr}
   10712:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10714:	b990      	cbnz	r0, 1073c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   10716:	4620      	mov	r0, r4
   10718:	f7fe fe96 	bl	f448 <ull_update_unmark>
	LL_ASSERT(p == param);
   1071c:	4284      	cmp	r4, r0
   1071e:	d00c      	beq.n	1073a <ticker_start_conn_op_cb+0x2a>
   10720:	4a0d      	ldr	r2, [pc, #52]	; (10758 <ticker_start_conn_op_cb+0x48>)
   10722:	490e      	ldr	r1, [pc, #56]	; (1075c <ticker_start_conn_op_cb+0x4c>)
   10724:	480e      	ldr	r0, [pc, #56]	; (10760 <ticker_start_conn_op_cb+0x50>)
   10726:	f240 735a 	movw	r3, #1882	; 0x75a
   1072a:	f00b f823 	bl	1b774 <printk>
   1072e:	4040      	eors	r0, r0
   10730:	f380 8811 	msr	BASEPRI, r0
   10734:	f04f 0003 	mov.w	r0, #3
   10738:	df02      	svc	2
}
   1073a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1073c:	4a06      	ldr	r2, [pc, #24]	; (10758 <ticker_start_conn_op_cb+0x48>)
   1073e:	4909      	ldr	r1, [pc, #36]	; (10764 <ticker_start_conn_op_cb+0x54>)
   10740:	4807      	ldr	r0, [pc, #28]	; (10760 <ticker_start_conn_op_cb+0x50>)
   10742:	f240 7357 	movw	r3, #1879	; 0x757
   10746:	f00b f815 	bl	1b774 <printk>
   1074a:	4040      	eors	r0, r0
   1074c:	f380 8811 	msr	BASEPRI, r0
   10750:	f04f 0003 	mov.w	r0, #3
   10754:	df02      	svc	2
   10756:	e7de      	b.n	10716 <ticker_start_conn_op_cb+0x6>
   10758:	00021da4 	.word	0x00021da4
   1075c:	00021e10 	.word	0x00021e10
   10760:	0002180c 	.word	0x0002180c
   10764:	00021dec 	.word	0x00021dec

00010768 <ticker_stop_conn_op_cb>:
{
   10768:	b510      	push	{r4, lr}
   1076a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1076c:	b990      	cbnz	r0, 10794 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1076e:	4620      	mov	r0, r4
   10770:	f7fe fe60 	bl	f434 <ull_update_mark>
	LL_ASSERT(p == param);
   10774:	4284      	cmp	r4, r0
   10776:	d00c      	beq.n	10792 <ticker_stop_conn_op_cb+0x2a>
   10778:	4a0d      	ldr	r2, [pc, #52]	; (107b0 <ticker_stop_conn_op_cb+0x48>)
   1077a:	490e      	ldr	r1, [pc, #56]	; (107b4 <ticker_stop_conn_op_cb+0x4c>)
   1077c:	480e      	ldr	r0, [pc, #56]	; (107b8 <ticker_stop_conn_op_cb+0x50>)
   1077e:	f44f 63ea 	mov.w	r3, #1872	; 0x750
   10782:	f00a fff7 	bl	1b774 <printk>
   10786:	4040      	eors	r0, r0
   10788:	f380 8811 	msr	BASEPRI, r0
   1078c:	f04f 0003 	mov.w	r0, #3
   10790:	df02      	svc	2
}
   10792:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   10794:	4a06      	ldr	r2, [pc, #24]	; (107b0 <ticker_stop_conn_op_cb+0x48>)
   10796:	4909      	ldr	r1, [pc, #36]	; (107bc <ticker_stop_conn_op_cb+0x54>)
   10798:	4807      	ldr	r0, [pc, #28]	; (107b8 <ticker_stop_conn_op_cb+0x50>)
   1079a:	f240 734d 	movw	r3, #1869	; 0x74d
   1079e:	f00a ffe9 	bl	1b774 <printk>
   107a2:	4040      	eors	r0, r0
   107a4:	f380 8811 	msr	BASEPRI, r0
   107a8:	f04f 0003 	mov.w	r0, #3
   107ac:	df02      	svc	2
   107ae:	e7de      	b.n	1076e <ticker_stop_conn_op_cb+0x6>
   107b0:	00021da4 	.word	0x00021da4
   107b4:	00021e10 	.word	0x00021e10
   107b8:	0002180c 	.word	0x0002180c
   107bc:	00021dec 	.word	0x00021dec

000107c0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   107c0:	b900      	cbnz	r0, 107c4 <ticker_update_conn_op_cb+0x4>
   107c2:	4770      	bx	lr
{
   107c4:	b510      	push	{r4, lr}
   107c6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   107c8:	f7fe fe4a 	bl	f460 <ull_update_mark_get>
   107cc:	4284      	cmp	r4, r0
   107ce:	d010      	beq.n	107f2 <ticker_update_conn_op_cb+0x32>
   107d0:	f7fe fe2a 	bl	f428 <ull_disable_mark_get>
   107d4:	4284      	cmp	r4, r0
   107d6:	d00c      	beq.n	107f2 <ticker_update_conn_op_cb+0x32>
   107d8:	4a06      	ldr	r2, [pc, #24]	; (107f4 <ticker_update_conn_op_cb+0x34>)
   107da:	4907      	ldr	r1, [pc, #28]	; (107f8 <ticker_update_conn_op_cb+0x38>)
   107dc:	4807      	ldr	r0, [pc, #28]	; (107fc <ticker_update_conn_op_cb+0x3c>)
   107de:	f240 7344 	movw	r3, #1860	; 0x744
   107e2:	f00a ffc7 	bl	1b774 <printk>
   107e6:	4040      	eors	r0, r0
   107e8:	f380 8811 	msr	BASEPRI, r0
   107ec:	f04f 0003 	mov.w	r0, #3
   107f0:	df02      	svc	2
}
   107f2:	bd10      	pop	{r4, pc}
   107f4:	00021da4 	.word	0x00021da4
   107f8:	00021e1c 	.word	0x00021e1c
   107fc:	0002180c 	.word	0x0002180c

00010800 <tx_ull_dequeue>:
{
   10800:	4603      	mov	r3, r0
   10802:	b410      	push	{r4}
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   10804:	f8d0 41c8 	ldr.w	r4, [r0, #456]	; 0x1c8
   10808:	f8d3 21c4 	ldr.w	r2, [r3, #452]	; 0x1c4
{
   1080c:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1080e:	b164      	cbz	r4, 1082a <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   10810:	4294      	cmp	r4, r2
   10812:	d021      	beq.n	10858 <tx_ull_dequeue+0x58>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   10814:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
		if (conn->tx_head == conn->tx_data) {
   10818:	428a      	cmp	r2, r1
   1081a:	d00b      	beq.n	10834 <tx_ull_dequeue+0x34>
		conn->tx_head = conn->tx_head->next;
   1081c:	6811      	ldr	r1, [r2, #0]
   1081e:	f8c3 11c4 	str.w	r1, [r3, #452]	; 0x1c4
		tx->next = NULL;
   10822:	2200      	movs	r2, #0
}
   10824:	bc10      	pop	{r4}
		tx->next = NULL;
   10826:	6002      	str	r2, [r0, #0]
}
   10828:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1082a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	; 0x1d0
   1082e:	428a      	cmp	r2, r1
   10830:	d104      	bne.n	1083c <tx_ull_dequeue+0x3c>
	if (conn->tx_head == conn->tx_ctrl) {
   10832:	b18a      	cbz	r2, 10858 <tx_ull_dequeue+0x58>
			conn->tx_data = conn->tx_data->next;
   10834:	6809      	ldr	r1, [r1, #0]
   10836:	f8c3 11d0 	str.w	r1, [r3, #464]	; 0x1d0
   1083a:	e7ef      	b.n	1081c <tx_ull_dequeue+0x1c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1083c:	7911      	ldrb	r1, [r2, #4]
   1083e:	f001 0103 	and.w	r1, r1, #3
   10842:	2903      	cmp	r1, #3
   10844:	d013      	beq.n	1086e <tx_ull_dequeue+0x6e>
		conn->tx_head = conn->tx_head->next;
   10846:	6812      	ldr	r2, [r2, #0]
   10848:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
			conn->tx_ctrl = NULL;
   1084c:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   1084e:	e9c3 2272 	strd	r2, r2, [r3, #456]	; 0x1c8
}
   10852:	bc10      	pop	{r4}
		tx->next = tx;
   10854:	6000      	str	r0, [r0, #0]
}
   10856:	4770      	bx	lr
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   10858:	f8d3 11cc 	ldr.w	r1, [r3, #460]	; 0x1cc
		conn->tx_head = conn->tx_head->next;
   1085c:	6812      	ldr	r2, [r2, #0]
   1085e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   10862:	42a1      	cmp	r1, r4
			conn->tx_ctrl = conn->tx_head;
   10864:	bf18      	it	ne
   10866:	f8c3 21c8 	strne.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1086a:	d1f2      	bne.n	10852 <tx_ull_dequeue+0x52>
   1086c:	e7ee      	b.n	1084c <tx_ull_dequeue+0x4c>
	    ((pdu_data_tx->llctrl.opcode !=
   1086e:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10870:	2903      	cmp	r1, #3
   10872:	d0d3      	beq.n	1081c <tx_ull_dequeue+0x1c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   10874:	290a      	cmp	r1, #10
   10876:	d1e6      	bne.n	10846 <tx_ull_dequeue+0x46>
   10878:	e7d0      	b.n	1081c <tx_ull_dequeue+0x1c>
   1087a:	bf00      	nop

0001087c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1087e:	4604      	mov	r4, r0
	if (conn->common.txn_lock) {
   10880:	f890 00d8 	ldrb.w	r0, [r0, #216]	; 0xd8
   10884:	0780      	lsls	r0, r0, #30
{
   10886:	460d      	mov	r5, r1
	if (conn->common.txn_lock) {
   10888:	d433      	bmi.n	108f2 <reject_ext_ind_send+0x76>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1088a:	4830      	ldr	r0, [pc, #192]	; (1094c <reject_ext_ind_send+0xd0>)
   1088c:	4617      	mov	r7, r2
   1088e:	461e      	mov	r6, r3
   10890:	f7fa ff46 	bl	b720 <mem_acquire>
	if (!tx) {
   10894:	2800      	cmp	r0, #0
   10896:	d03a      	beq.n	1090e <reject_ext_ind_send+0x92>
	conn->common.txn_lock = 1U;
   10898:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1089c:	f043 0302 	orr.w	r3, r3, #2
   108a0:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
		return err;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   108a4:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   108a6:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   108a8:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   108aa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   108ae:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   108b0:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   108b2:	7207      	strb	r7, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   108b4:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   108b8:	7246      	strb	r6, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   108ba:	7102      	strb	r2, [r0, #4]
	if (
   108bc:	b1eb      	cbz	r3, 108fa <reject_ext_ind_send+0x7e>
	    !conn->llcp_enc.pause_tx &&
   108be:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   108c2:	0791      	lsls	r1, r2, #30
   108c4:	d419      	bmi.n	108fa <reject_ext_ind_send+0x7e>
	    !conn->llcp_phy.pause_tx &&
   108c6:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   108ca:	07d2      	lsls	r2, r2, #31
   108cc:	d415      	bmi.n	108fa <reject_ext_ind_send+0x7e>
		if (conn->tx_head == conn->tx_data) {
   108ce:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   108d2:	4293      	cmp	r3, r2
   108d4:	d026      	beq.n	10924 <reject_ext_ind_send+0xa8>
		} else if (!conn->tx_ctrl) {
   108d6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   108da:	b1da      	cbz	r2, 10914 <reject_ext_ind_send+0x98>
	tx->next = conn->tx_ctrl_last->next;
   108dc:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   108e0:	681a      	ldr	r2, [r3, #0]
   108e2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   108e4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   108e6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   108e8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   108ec:	b90b      	cbnz	r3, 108f2 <reject_ext_ind_send+0x76>
		conn->tx_data_last = tx;
   108ee:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   108f2:	2301      	movs	r3, #1
   108f4:	712b      	strb	r3, [r5, #4]
		*err = 0U;
   108f6:	2000      	movs	r0, #0

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;

	return 0;
}
   108f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!conn->tx_ctrl) {
   108fa:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   108fe:	2a00      	cmp	r2, #0
   10900:	d1ec      	bne.n	108dc <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head;
   10902:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10904:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10908:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1090c:	e7ee      	b.n	108ec <reject_ext_ind_send+0x70>
		*err = -ENOBUFS;
   1090e:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10914:	791a      	ldrb	r2, [r3, #4]
   10916:	f002 0203 	and.w	r2, r2, #3
   1091a:	2a03      	cmp	r2, #3
   1091c:	d010      	beq.n	10940 <reject_ext_ind_send+0xc4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1091e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   10922:	e7dd      	b.n	108e0 <reject_ext_ind_send+0x64>
			conn->tx_data = conn->tx_data->next;
   10924:	681a      	ldr	r2, [r3, #0]
   10926:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   1092a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1092e:	2a00      	cmp	r2, #0
   10930:	d1d4      	bne.n	108dc <reject_ext_ind_send+0x60>
			tx->next = conn->tx_head->next;
   10932:	681a      	ldr	r2, [r3, #0]
   10934:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   10936:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10938:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1093a:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   1093e:	e7d5      	b.n	108ec <reject_ext_ind_send+0x70>
	    ((pdu_data_tx->llctrl.opcode !=
   10940:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10942:	2a03      	cmp	r2, #3
   10944:	d0f5      	beq.n	10932 <reject_ext_ind_send+0xb6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   10946:	2a0a      	cmp	r2, #10
   10948:	d1e9      	bne.n	1091e <reject_ext_ind_send+0xa2>
   1094a:	e7f2      	b.n	10932 <reject_ext_ind_send+0xb6>
   1094c:	20001fdc 	.word	0x20001fdc

00010950 <event_len_prep>:
{
   10950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   10952:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   10956:	f003 0207 	and.w	r2, r3, #7
{
   1095a:	4604      	mov	r4, r0
   1095c:	2a06      	cmp	r2, #6
   1095e:	f200 80d7 	bhi.w	10b10 <event_len_prep+0x1c0>
   10962:	e8df f002 	tbb	[pc, r2]
   10966:	4804      	.short	0x4804
   10968:	49494848 	.word	0x49494848
   1096c:	48          	.byte	0x48
   1096d:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1096e:	486f      	ldr	r0, [pc, #444]	; (10b2c <event_len_prep+0x1dc>)
   10970:	f7fa fed6 	bl	b720 <mem_acquire>
		if (!tx) {
   10974:	2800      	cmp	r0, #0
   10976:	d03e      	beq.n	109f6 <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   10978:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1097c:	f8b4 21b2 	ldrh.w	r2, [r4, #434]	; 0x1b2
		conn->default_tx_time = conn->llcp_length.tx_time;
   10980:	f8b4 51b6 	ldrh.w	r5, [r4, #438]	; 0x1b6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   10984:	f8a4 20d2 	strh.w	r2, [r4, #210]	; 0xd2
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   10988:	2301      	movs	r3, #1
   1098a:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   1098e:	f8a4 50d4 	strh.w	r5, [r4, #212]	; 0xd4
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   10992:	f884 11ae 	strb.w	r1, [r4, #430]	; 0x1ae
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   10996:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   10998:	72c3      	strb	r3, [r0, #11]
   1099a:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1099c:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1099e:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   109a0:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   109a2:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   109a4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   109a6:	2214      	movs	r2, #20
	    conn->tx_head &&
   109a8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   109ac:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   109ae:	221b      	movs	r2, #27
   109b0:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109b2:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   109b4:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109b6:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   109ba:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   109bc:	7102      	strb	r2, [r0, #4]
	if (
   109be:	b13b      	cbz	r3, 109d0 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   109c0:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   109c4:	0791      	lsls	r1, r2, #30
   109c6:	d403      	bmi.n	109d0 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   109c8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   109cc:	07d2      	lsls	r2, r2, #31
   109ce:	d576      	bpl.n	10abe <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   109d0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   109d4:	2a00      	cmp	r2, #0
   109d6:	f000 8082 	beq.w	10ade <event_len_prep+0x18e>
	tx->next = conn->tx_ctrl_last->next;
   109da:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   109de:	681a      	ldr	r2, [r3, #0]
   109e0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   109e2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   109e4:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   109e6:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   109ea:	2b00      	cmp	r3, #0
   109ec:	d056      	beq.n	10a9c <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   109ee:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   109f2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
}
   109f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   109f8:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   109fc:	f8b0 c1b0 	ldrh.w	ip, [r0, #432]	; 0x1b0
		lll->max_rx_time = conn->llcp_length.rx_time;
   10a00:	f8b0 11b4 	ldrh.w	r1, [r0, #436]	; 0x1b4
		tx_octets = conn->llcp_length.tx_octets;
   10a04:	f8b0 71b2 	ldrh.w	r7, [r0, #434]	; 0x1b2
		uint16_t tx_time = conn->llcp_length.tx_time;
   10a08:	f8b0 61b6 	ldrh.w	r6, [r0, #438]	; 0x1b6
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   10a0c:	f8a0 c05a 	strh.w	ip, [r0, #90]	; 0x5a
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   10a10:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   10a12:	f8a0 105e 	strh.w	r1, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   10a16:	d024      	beq.n	10a62 <event_len_prep+0x112>
			conn->llcp_length.state =
   10a18:	2206      	movs	r2, #6
   10a1a:	f362 0302 	bfi	r3, r2, #0, #3
   10a1e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
		rx = conn->llcp_rx;
   10a22:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   10a26:	b335      	cbz	r5, 10a76 <event_len_prep+0x126>
   10a28:	6828      	ldr	r0, [r5, #0]
   10a2a:	b320      	cbz	r0, 10a76 <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10a2c:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   10a2e:	6842      	ldr	r2, [r0, #4]
   10a30:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10a34:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   10a38:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   10a3a:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   10a3c:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   10a3e:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   10a40:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10a42:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10a44:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   10a46:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   10a48:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   10a4c:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   10a4e:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   10a50:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10a52:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10a54:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   10a56:	f7fe fc31 	bl	f2bc <ll_rx_put>
}
   10a5a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   10a5e:	f7fe bc37 	b.w	f2d0 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   10a62:	f8b0 21b8 	ldrh.w	r2, [r0, #440]	; 0x1b8
   10a66:	b9e2      	cbnz	r2, 10aa2 <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   10a68:	f890 31ac 	ldrb.w	r3, [r0, #428]	; 0x1ac
				conn->procedure_expire = 0U;
   10a6c:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
				conn->llcp_length.ack = conn->llcp_length.req;
   10a70:	f880 31ad 	strb.w	r3, [r0, #429]	; 0x1ad
				conn->procedure_expire = 0U;
   10a74:	e7d5      	b.n	10a22 <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   10a76:	4a2e      	ldr	r2, [pc, #184]	; (10b30 <event_len_prep+0x1e0>)
   10a78:	492e      	ldr	r1, [pc, #184]	; (10b34 <event_len_prep+0x1e4>)
   10a7a:	482f      	ldr	r0, [pc, #188]	; (10b38 <event_len_prep+0x1e8>)
   10a7c:	f640 730d 	movw	r3, #3853	; 0xf0d
   10a80:	f00a fe78 	bl	1b774 <printk>
   10a84:	4040      	eors	r0, r0
   10a86:	f380 8811 	msr	BASEPRI, r0
   10a8a:	f04f 0003 	mov.w	r0, #3
   10a8e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   10a90:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   10a92:	f8b4 c05a 	ldrh.w	ip, [r4, #90]	; 0x5a
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   10a96:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   10a9a:	e7c7      	b.n	10a2c <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   10a9c:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   10aa0:	e7a5      	b.n	109ee <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   10aa2:	f8a0 21b2 	strh.w	r2, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   10aa6:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10aa8:	f362 0302 	bfi	r3, r2, #0, #3
   10aac:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   10ab0:	f8b0 31ba 	ldrh.w	r3, [r0, #442]	; 0x1ba
				conn->llcp_length.cache.tx_octets = 0;
   10ab4:	f8a0 21b8 	strh.w	r2, [r0, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   10ab8:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   10abc:	e7b1      	b.n	10a22 <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   10abe:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10ac2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   10ac4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10ac8:	d00f      	beq.n	10aea <event_len_prep+0x19a>
		} else if (!conn->tx_ctrl) {
   10aca:	2a00      	cmp	r2, #0
   10acc:	d185      	bne.n	109da <event_len_prep+0x8a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10ace:	791a      	ldrb	r2, [r3, #4]
   10ad0:	f002 0203 	and.w	r2, r2, #3
   10ad4:	2a03      	cmp	r2, #3
   10ad6:	d015      	beq.n	10b04 <event_len_prep+0x1b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   10ad8:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   10adc:	e77f      	b.n	109de <event_len_prep+0x8e>
			tx->next = conn->tx_head;
   10ade:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10ae0:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10ae4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   10ae8:	e77f      	b.n	109ea <event_len_prep+0x9a>
			conn->tx_data = conn->tx_data->next;
   10aea:	6819      	ldr	r1, [r3, #0]
   10aec:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10af0:	2a00      	cmp	r2, #0
   10af2:	f47f af72 	bne.w	109da <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   10af6:	681a      	ldr	r2, [r3, #0]
   10af8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   10afa:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   10afc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   10afe:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   10b02:	e772      	b.n	109ea <event_len_prep+0x9a>
	    ((pdu_data_tx->llctrl.opcode !=
   10b04:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10b06:	2a03      	cmp	r2, #3
   10b08:	d0f5      	beq.n	10af6 <event_len_prep+0x1a6>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   10b0a:	2a0a      	cmp	r2, #10
   10b0c:	d1e4      	bne.n	10ad8 <event_len_prep+0x188>
   10b0e:	e7f2      	b.n	10af6 <event_len_prep+0x1a6>
		LL_ASSERT(0);
   10b10:	4a07      	ldr	r2, [pc, #28]	; (10b30 <event_len_prep+0x1e0>)
   10b12:	490a      	ldr	r1, [pc, #40]	; (10b3c <event_len_prep+0x1ec>)
   10b14:	4808      	ldr	r0, [pc, #32]	; (10b38 <event_len_prep+0x1e8>)
   10b16:	f640 7335 	movw	r3, #3893	; 0xf35
   10b1a:	f00a fe2b 	bl	1b774 <printk>
   10b1e:	4040      	eors	r0, r0
   10b20:	f380 8811 	msr	BASEPRI, r0
   10b24:	f04f 0003 	mov.w	r0, #3
   10b28:	df02      	svc	2
}
   10b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b2c:	20001fdc 	.word	0x20001fdc
   10b30:	00021da4 	.word	0x00021da4
   10b34:	00021e70 	.word	0x00021e70
   10b38:	0002180c 	.word	0x0002180c
   10b3c:	000218a4 	.word	0x000218a4

00010b40 <event_phy_upd_ind_prep>:
{
   10b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   10b44:	f890 30e8 	ldrb.w	r3, [r0, #232]	; 0xe8
   10b48:	f013 0601 	ands.w	r6, r3, #1
{
   10b4c:	4604      	mov	r4, r0
   10b4e:	460d      	mov	r5, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   10b50:	f040 808c 	bne.w	10c6c <event_phy_upd_ind_prep+0x12c>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   10b54:	f8b0 10ea 	ldrh.w	r1, [r0, #234]	; 0xea
   10b58:	1a69      	subs	r1, r5, r1
   10b5a:	040a      	lsls	r2, r1, #16
   10b5c:	f100 808d 	bmi.w	10c7a <event_phy_upd_ind_prep+0x13a>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10b60:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
   10b64:	2900      	cmp	r1, #0
   10b66:	f2c0 810a 	blt.w	10d7e <event_phy_upd_ind_prep+0x23e>
		rx = conn->llcp_rx;
   10b6a:	f8d0 5108 	ldr.w	r5, [r0, #264]	; 0x108
   10b6e:	461a      	mov	r2, r3
			conn->llcp_ack = conn->llcp_req;
   10b70:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   10b74:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
		old_tx = lll->phy_tx;
   10b78:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		old_rx = lll->phy_rx;
   10b7c:	f894 8061 	ldrb.w	r8, [r4, #97]	; 0x61
		uint16_t eff_rx_time = lll->max_rx_time;
   10b80:	f8b4 705e 	ldrh.w	r7, [r4, #94]	; 0x5e
		if (conn->llcp.phy_upd_ind.tx) {
   10b84:	f013 0f1c 	tst.w	r3, #28
		old_rx = lll->phy_rx;
   10b88:	f008 0807 	and.w	r8, r8, #7
		old_tx = lll->phy_tx;
   10b8c:	f001 0907 	and.w	r9, r1, #7
		if (conn->llcp.phy_upd_ind.tx) {
   10b90:	d175      	bne.n	10c7e <event_phy_upd_ind_prep+0x13e>
		uint16_t eff_tx_time = lll->max_tx_time;
   10b92:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c
		if (conn->llcp.phy_upd_ind.rx) {
   10b96:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   10b9a:	d008      	beq.n	10bae <event_phy_upd_ind_prep+0x6e>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   10b9c:	f894 1061 	ldrb.w	r1, [r4, #97]	; 0x61
   10ba0:	095b      	lsrs	r3, r3, #5
   10ba2:	f363 0102 	bfi	r1, r3, #0, #3
   10ba6:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   10baa:	f44f 77a4 	mov.w	r7, #328	; 0x148
		LL_ASSERT(rx && rx->hdr.link);
   10bae:	2d00      	cmp	r5, #0
   10bb0:	f000 80c5 	beq.w	10d3e <event_phy_upd_ind_prep+0x1fe>
   10bb4:	6828      	ldr	r0, [r5, #0]
   10bb6:	2800      	cmp	r0, #0
   10bb8:	f000 80c1 	beq.w	10d3e <event_phy_upd_ind_prep+0x1fe>
		conn->llcp_rx = rx->hdr.link->mem;
   10bbc:	6843      	ldr	r3, [r0, #4]
   10bbe:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10bc2:	f012 0f02 	tst.w	r2, #2
   10bc6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		    (lll->phy_rx == old_rx)) {
   10bca:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10bce:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   10bd2:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10bd6:	d102      	bne.n	10bde <event_phy_upd_ind_prep+0x9e>
   10bd8:	4599      	cmp	r9, r3
   10bda:	f000 80e7 	beq.w	10dac <event_phy_upd_ind_prep+0x26c>
		rx->hdr.handle = lll->handle;
   10bde:	8d21      	ldrh	r1, [r4, #40]	; 0x28
		upd->tx = lll->phy_tx;
   10be0:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10be2:	231a      	movs	r3, #26
   10be4:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   10be6:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   10be8:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   10bea:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   10bec:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   10bee:	4629      	mov	r1, r5
   10bf0:	f7fe fb64 	bl	f2bc <ll_rx_put>
		rx = conn->llcp_rx;
   10bf4:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
		LL_ASSERT(rx && rx->hdr.link);
   10bf8:	2d00      	cmp	r5, #0
   10bfa:	f000 80b1 	beq.w	10d60 <event_phy_upd_ind_prep+0x220>
   10bfe:	6828      	ldr	r0, [r5, #0]
   10c00:	2800      	cmp	r0, #0
   10c02:	f000 80ad 	beq.w	10d60 <event_phy_upd_ind_prep+0x220>
		if ((eff_tx_time <= lll->max_tx_time) &&
   10c06:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
		conn->llcp_rx = rx->hdr.link->mem;
   10c0a:	6842      	ldr	r2, [r0, #4]
   10c0c:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
		if ((eff_tx_time <= lll->max_tx_time) &&
   10c10:	42b3      	cmp	r3, r6
   10c12:	d30a      	bcc.n	10c2a <event_phy_upd_ind_prep+0xea>
   10c14:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   10c18:	d807      	bhi.n	10c2a <event_phy_upd_ind_prep+0xea>
		    (eff_rx_time <= lll->max_rx_time) &&
   10c1a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		    (lll->max_tx_time <= max_tx_time) &&
   10c1e:	42bb      	cmp	r3, r7
   10c20:	d303      	bcc.n	10c2a <event_phy_upd_ind_prep+0xea>
		    (eff_rx_time <= lll->max_rx_time) &&
   10c22:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   10c26:	f240 8100 	bls.w	10e2a <event_phy_upd_ind_prep+0x2ea>
		lll->max_tx_time = eff_tx_time;
   10c2a:	f8a4 605c 	strh.w	r6, [r4, #92]	; 0x5c
		lll->max_rx_time = eff_rx_time;
   10c2e:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10c32:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   10c34:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   10c36:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10c38:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10c3c:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   10c40:	2109      	movs	r1, #9
   10c42:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   10c44:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   10c48:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   10c4a:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
   10c4e:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   10c50:	f8b4 3058 	ldrh.w	r3, [r4, #88]	; 0x58
   10c54:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10c56:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   10c58:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   10c5a:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   10c5c:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   10c5e:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   10c60:	f7fe fb2c 	bl	f2bc <ll_rx_put>
}
   10c64:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   10c68:	f7fe bb32 	b.w	f2d0 <ll_rx_sched>
		if (memq_peek(conn->lll.memq_tx.head, conn->lll.memq_tx.tail,
   10c6c:	e9d0 0119 	ldrd	r0, r1, [r0, #100]	; 0x64
   10c70:	2200      	movs	r2, #0
   10c72:	f7fa fdc3 	bl	b7fc <memq_peek>
   10c76:	4606      	mov	r6, r0
   10c78:	b150      	cbz	r0, 10c90 <event_phy_upd_ind_prep+0x150>
}
   10c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   10c7e:	f3c3 0082 	ubfx	r0, r3, #2, #3
   10c82:	f360 0102 	bfi	r1, r0, #0, #3
   10c86:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   10c8a:	f44f 76a4 	mov.w	r6, #328	; 0x148
   10c8e:	e782      	b.n	10b96 <event_phy_upd_ind_prep+0x56>
		rx = ll_pdu_rx_alloc_peek(2);
   10c90:	2002      	movs	r0, #2
   10c92:	f7fe fb23 	bl	f2dc <ll_pdu_rx_alloc_peek>
		if (!rx) {
   10c96:	4680      	mov	r8, r0
   10c98:	2800      	cmp	r0, #0
   10c9a:	d0ee      	beq.n	10c7a <event_phy_upd_ind_prep+0x13a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10c9c:	4894      	ldr	r0, [pc, #592]	; (10ef0 <event_phy_upd_ind_prep+0x3b0>)
   10c9e:	f7fa fd3f 	bl	b720 <mem_acquire>
		if (!tx) {
   10ca2:	4607      	mov	r7, r0
   10ca4:	2800      	cmp	r0, #0
   10ca6:	d0e8      	beq.n	10c7a <event_phy_upd_ind_prep+0x13a>
		conn->llcp.phy_upd_ind.initiate = 0U;
   10ca8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10cac:	f366 0300 	bfi	r3, r6, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   10cb0:	f3c3 1642 	ubfx	r6, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   10cb4:	ea46 0693 	orr.w	r6, r6, r3, lsr #2
   10cb8:	f016 0607 	ands.w	r6, r6, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   10cbc:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		if (!((conn->llcp.phy_upd_ind.tx |
   10cc0:	b2db      	uxtb	r3, r3
   10cc2:	f040 8094 	bne.w	10dee <event_phy_upd_ind_prep+0x2ae>
			conn->llcp_ack = conn->llcp_req;
   10cc6:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
			conn->llcp.phy_upd_ind.instant = 0U;
   10cca:	f8a4 60ea 	strh.w	r6, [r4, #234]	; 0xea
			if (conn->llcp.phy_upd_ind.cmd) {
   10cce:	079d      	lsls	r5, r3, #30
			conn->llcp_ack = conn->llcp_req;
   10cd0:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			if (conn->llcp.phy_upd_ind.cmd) {
   10cd4:	f100 80bd 	bmi.w	10e52 <event_phy_upd_ind_prep+0x312>
   10cd8:	4633      	mov	r3, r6
   10cda:	4632      	mov	r2, r6
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10cdc:	727b      	strb	r3, [r7, #9]
		pdu_ctrl_tx->len =
   10cde:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10ce0:	723e      	strb	r6, [r7, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   10ce2:	817a      	strh	r2, [r7, #10]
		pdu_ctrl_tx->len =
   10ce4:	717b      	strb	r3, [r7, #5]
		pdu_ctrl_tx->llctrl.opcode =
   10ce6:	2218      	movs	r2, #24
	    conn->tx_head &&
   10ce8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
		pdu_ctrl_tx->llctrl.opcode =
   10cec:	71fa      	strb	r2, [r7, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10cee:	793a      	ldrb	r2, [r7, #4]
   10cf0:	f042 0203 	orr.w	r2, r2, #3
   10cf4:	713a      	strb	r2, [r7, #4]
	if (
   10cf6:	2b00      	cmp	r3, #0
   10cf8:	f000 80a0 	beq.w	10e3c <event_phy_upd_ind_prep+0x2fc>
	    !conn->llcp_enc.pause_tx &&
   10cfc:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   10d00:	0790      	lsls	r0, r2, #30
   10d02:	f100 809b 	bmi.w	10e3c <event_phy_upd_ind_prep+0x2fc>
	    !conn->llcp_phy.pause_tx &&
   10d06:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   10d0a:	07d1      	lsls	r1, r2, #31
   10d0c:	f100 8096 	bmi.w	10e3c <event_phy_upd_ind_prep+0x2fc>
		if (conn->tx_head == conn->tx_data) {
   10d10:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   10d14:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   10d16:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   10d1a:	f000 80ce 	beq.w	10eba <event_phy_upd_ind_prep+0x37a>
		} else if (!conn->tx_ctrl) {
   10d1e:	2a00      	cmp	r2, #0
   10d20:	f000 80d8 	beq.w	10ed4 <event_phy_upd_ind_prep+0x394>
	tx->next = conn->tx_ctrl_last->next;
   10d24:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   10d28:	681a      	ldr	r2, [r3, #0]
   10d2a:	603a      	str	r2, [r7, #0]
	conn->tx_ctrl_last->next = tx;
   10d2c:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   10d2e:	683b      	ldr	r3, [r7, #0]
	conn->tx_ctrl_last = tx;
   10d30:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
	if (!tx->next) {
   10d34:	2b00      	cmp	r3, #0
   10d36:	d1a0      	bne.n	10c7a <event_phy_upd_ind_prep+0x13a>
		conn->tx_data_last = tx;
   10d38:	f8c4 71d4 	str.w	r7, [r4, #468]	; 0x1d4
   10d3c:	e79d      	b.n	10c7a <event_phy_upd_ind_prep+0x13a>
		LL_ASSERT(rx && rx->hdr.link);
   10d3e:	4a6d      	ldr	r2, [pc, #436]	; (10ef4 <event_phy_upd_ind_prep+0x3b4>)
   10d40:	496d      	ldr	r1, [pc, #436]	; (10ef8 <event_phy_upd_ind_prep+0x3b8>)
   10d42:	486e      	ldr	r0, [pc, #440]	; (10efc <event_phy_upd_ind_prep+0x3bc>)
   10d44:	f44f 5383 	mov.w	r3, #4192	; 0x1060
   10d48:	f00a fd14 	bl	1b774 <printk>
   10d4c:	4040      	eors	r0, r0
   10d4e:	f380 8811 	msr	BASEPRI, r0
   10d52:	f04f 0003 	mov.w	r0, #3
   10d56:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   10d58:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10d5a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   10d5e:	e72d      	b.n	10bbc <event_phy_upd_ind_prep+0x7c>
		LL_ASSERT(rx && rx->hdr.link);
   10d60:	4a64      	ldr	r2, [pc, #400]	; (10ef4 <event_phy_upd_ind_prep+0x3b4>)
   10d62:	4965      	ldr	r1, [pc, #404]	; (10ef8 <event_phy_upd_ind_prep+0x3b8>)
   10d64:	4865      	ldr	r0, [pc, #404]	; (10efc <event_phy_upd_ind_prep+0x3bc>)
   10d66:	f241 038f 	movw	r3, #4239	; 0x108f
   10d6a:	f00a fd03 	bl	1b774 <printk>
   10d6e:	4040      	eors	r0, r0
   10d70:	f380 8811 	msr	BASEPRI, r0
   10d74:	f04f 0003 	mov.w	r0, #3
   10d78:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   10d7a:	6828      	ldr	r0, [r5, #0]
   10d7c:	e743      	b.n	10c06 <event_phy_upd_ind_prep+0xc6>
			rx = ll_pdu_rx_alloc();
   10d7e:	f7fe facb 	bl	f318 <ll_pdu_rx_alloc>
			if (!rx) {
   10d82:	4605      	mov	r5, r0
   10d84:	2800      	cmp	r0, #0
   10d86:	f43f af78 	beq.w	10c7a <event_phy_upd_ind_prep+0x13a>
			rx->hdr.link->mem = conn->llcp_rx;
   10d8a:	6803      	ldr	r3, [r0, #0]
   10d8c:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   10d90:	605a      	str	r2, [r3, #4]
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10d92:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
			conn->llcp_rx = rx;
   10d96:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   10d9a:	2b00      	cmp	r3, #0
   10d9c:	da02      	bge.n	10da4 <event_phy_upd_ind_prep+0x264>
   10d9e:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   10da2:	b9f3      	cbnz	r3, 10de2 <event_phy_upd_ind_prep+0x2a2>
		if (conn->llcp.phy_upd_ind.tx) {
   10da4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10da8:	461a      	mov	r2, r3
   10daa:	e6e1      	b.n	10b70 <event_phy_upd_ind_prep+0x30>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   10dac:	4590      	cmp	r8, r2
   10dae:	f47f af16 	bne.w	10bde <event_phy_upd_ind_prep+0x9e>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10db2:	2301      	movs	r3, #1
   10db4:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   10db6:	4629      	mov	r1, r5
   10db8:	f7fe fa80 	bl	f2bc <ll_rx_put>
				rx = conn->llcp_rx;
   10dbc:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
				LL_ASSERT(rx && rx->hdr.link);
   10dc0:	2d00      	cmp	r5, #0
   10dc2:	d06b      	beq.n	10e9c <event_phy_upd_ind_prep+0x35c>
   10dc4:	6828      	ldr	r0, [r5, #0]
   10dc6:	2800      	cmp	r0, #0
   10dc8:	d068      	beq.n	10e9c <event_phy_upd_ind_prep+0x35c>
				conn->llcp_rx = rx->hdr.link->mem;
   10dca:	6842      	ldr	r2, [r0, #4]
   10dcc:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10dd0:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   10dd2:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10dd4:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   10dd6:	f7fe fa71 	bl	f2bc <ll_rx_put>
}
   10dda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   10dde:	f7fe ba77 	b.w	f2d0 <ll_rx_sched>
		if (conn->llcp.phy_upd_ind.tx) {
   10de2:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->slave.llcp_type = LLCP_NONE;
   10de6:	f884 60d9 	strb.w	r6, [r4, #217]	; 0xd9
		if (conn->llcp.phy_upd_ind.tx) {
   10dea:	461a      	mov	r2, r3
			conn->slave.llcp_type = LLCP_NONE;
   10dec:	e6c4      	b.n	10b78 <event_phy_upd_ind_prep+0x38>
			conn->llcp.phy_upd_ind.instant = event_counter +
   10dee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   10df0:	4429      	add	r1, r5
							 lll->latency +
   10df2:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   10df4:	f8a4 10ea 	strh.w	r1, [r4, #234]	; 0xea
			(void)ll_pdu_rx_alloc();
   10df8:	f7fe fa8e 	bl	f318 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   10dfc:	f8d8 3000 	ldr.w	r3, [r8]
   10e00:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   10e04:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   10e06:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
				rx = ll_pdu_rx_alloc();
   10e0a:	f7fe fa85 	bl	f318 <ll_pdu_rx_alloc>
				rx->hdr.link->mem = conn->llcp_rx;
   10e0e:	6803      	ldr	r3, [r0, #0]
   10e10:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   10e14:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10e16:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   10e1a:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
				conn->llcp_rx = rx;
   10e1e:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10e22:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10e26:	095b      	lsrs	r3, r3, #5
   10e28:	e758      	b.n	10cdc <event_phy_upd_ind_prep+0x19c>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   10e2a:	2301      	movs	r3, #1
   10e2c:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   10e2e:	4629      	mov	r1, r5
   10e30:	f7fe fa44 	bl	f2bc <ll_rx_put>
}
   10e34:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   10e38:	f7fe ba4a 	b.w	f2d0 <ll_rx_sched>
		if (!conn->tx_ctrl) {
   10e3c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   10e40:	2a00      	cmp	r2, #0
   10e42:	f47f af6f 	bne.w	10d24 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head;
   10e46:	603b      	str	r3, [r7, #0]
				conn->tx_ctrl = tx;
   10e48:	e9c4 7771 	strd	r7, r7, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   10e4c:	f8c4 71cc 	str.w	r7, [r4, #460]	; 0x1cc
   10e50:	e770      	b.n	10d34 <event_phy_upd_ind_prep+0x1f4>
				(void)ll_pdu_rx_alloc();
   10e52:	f7fe fa61 	bl	f318 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   10e56:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   10e58:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10e5c:	231a      	movs	r3, #26
				upd->status = 0U;
   10e5e:	f888 601c 	strb.w	r6, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   10e62:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   10e66:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
				ll_rx_put(rx->hdr.link, rx);
   10e6a:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   10e6e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10e72:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   10e76:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   10e7a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   10e7e:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   10e82:	4641      	mov	r1, r8
   10e84:	f7fe fa1a 	bl	f2bc <ll_rx_put>
				ll_rx_sched();
   10e88:	f7fe fa22 	bl	f2d0 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10e8c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   10e90:	f8b4 20ea 	ldrh.w	r2, [r4, #234]	; 0xea
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   10e94:	f3c3 0682 	ubfx	r6, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   10e98:	095b      	lsrs	r3, r3, #5
   10e9a:	e71f      	b.n	10cdc <event_phy_upd_ind_prep+0x19c>
				LL_ASSERT(rx && rx->hdr.link);
   10e9c:	4a15      	ldr	r2, [pc, #84]	; (10ef4 <event_phy_upd_ind_prep+0x3b4>)
   10e9e:	4916      	ldr	r1, [pc, #88]	; (10ef8 <event_phy_upd_ind_prep+0x3b8>)
   10ea0:	4816      	ldr	r0, [pc, #88]	; (10efc <event_phy_upd_ind_prep+0x3bc>)
   10ea2:	f241 0372 	movw	r3, #4210	; 0x1072
   10ea6:	f00a fc65 	bl	1b774 <printk>
   10eaa:	4040      	eors	r0, r0
   10eac:	f380 8811 	msr	BASEPRI, r0
   10eb0:	f04f 0003 	mov.w	r0, #3
   10eb4:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   10eb6:	6828      	ldr	r0, [r5, #0]
   10eb8:	e787      	b.n	10dca <event_phy_upd_ind_prep+0x28a>
			conn->tx_data = conn->tx_data->next;
   10eba:	6819      	ldr	r1, [r3, #0]
   10ebc:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   10ec0:	2a00      	cmp	r2, #0
   10ec2:	f47f af2f 	bne.w	10d24 <event_phy_upd_ind_prep+0x1e4>
			tx->next = conn->tx_head->next;
   10ec6:	681a      	ldr	r2, [r3, #0]
   10ec8:	603a      	str	r2, [r7, #0]
			conn->tx_head->next = tx;
   10eca:	601f      	str	r7, [r3, #0]
	if (!tx->next) {
   10ecc:	683b      	ldr	r3, [r7, #0]
				conn->tx_ctrl_last = tx;
   10ece:	e9c4 7772 	strd	r7, r7, [r4, #456]	; 0x1c8
   10ed2:	e72f      	b.n	10d34 <event_phy_upd_ind_prep+0x1f4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10ed4:	791a      	ldrb	r2, [r3, #4]
   10ed6:	f002 0203 	and.w	r2, r2, #3
   10eda:	2a03      	cmp	r2, #3
   10edc:	d002      	beq.n	10ee4 <event_phy_upd_ind_prep+0x3a4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   10ede:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   10ee2:	e71f      	b.n	10d24 <event_phy_upd_ind_prep+0x1e4>
	    ((pdu_data_tx->llctrl.opcode !=
   10ee4:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   10ee6:	2a03      	cmp	r2, #3
   10ee8:	d0ed      	beq.n	10ec6 <event_phy_upd_ind_prep+0x386>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   10eea:	2a0a      	cmp	r2, #10
   10eec:	d1f7      	bne.n	10ede <event_phy_upd_ind_prep+0x39e>
   10eee:	e7ea      	b.n	10ec6 <event_phy_upd_ind_prep+0x386>
   10ef0:	20001fdc 	.word	0x20001fdc
   10ef4:	00021da4 	.word	0x00021da4
   10ef8:	00021e70 	.word	0x00021e70
   10efc:	0002180c 	.word	0x0002180c

00010f00 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   10f00:	4801      	ldr	r0, [pc, #4]	; (10f08 <ll_conn_acquire+0x8>)
   10f02:	f7fa bc0d 	b.w	b720 <mem_acquire>
   10f06:	bf00      	nop
   10f08:	20001f4c 	.word	0x20001f4c

00010f0c <ll_conn_release>:
	mem_release(conn, &conn_free);
   10f0c:	4901      	ldr	r1, [pc, #4]	; (10f14 <ll_conn_release+0x8>)
   10f0e:	f7fa bc21 	b.w	b754 <mem_release>
   10f12:	bf00      	nop
   10f14:	20001f4c 	.word	0x20001f4c

00010f18 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10f18:	4902      	ldr	r1, [pc, #8]	; (10f24 <ll_conn_handle_get+0xc>)
   10f1a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
   10f1e:	f7fa bc35 	b.w	b78c <mem_index_get>
   10f22:	bf00      	nop
   10f24:	20001020 	.word	0x20001020

00010f28 <ll_conn_get>:
{
   10f28:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f2a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10f2e:	4801      	ldr	r0, [pc, #4]	; (10f34 <ll_conn_get+0xc>)
   10f30:	f7fa bc28 	b.w	b784 <mem_get>
   10f34:	20001020 	.word	0x20001020

00010f38 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10f38:	b958      	cbnz	r0, 10f52 <ll_connected_get+0x1a>
{
   10f3a:	b508      	push	{r3, lr}
   10f3c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f3e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10f42:	4805      	ldr	r0, [pc, #20]	; (10f58 <ll_connected_get+0x20>)
   10f44:	f7fa fc1e 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   10f48:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   10f4a:	b903      	cbnz	r3, 10f4e <ll_connected_get+0x16>
}
   10f4c:	bd08      	pop	{r3, pc}
		return NULL;
   10f4e:	2000      	movs	r0, #0
}
   10f50:	bd08      	pop	{r3, pc}
		return NULL;
   10f52:	2000      	movs	r0, #0
}
   10f54:	4770      	bx	lr
   10f56:	bf00      	nop
   10f58:	20001020 	.word	0x20001020

00010f5c <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   10f5c:	4801      	ldr	r0, [pc, #4]	; (10f64 <ll_tx_mem_acquire+0x8>)
   10f5e:	f7fa bbdf 	b.w	b720 <mem_acquire>
   10f62:	bf00      	nop
   10f64:	20001f6c 	.word	0x20001f6c

00010f68 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   10f68:	4901      	ldr	r1, [pc, #4]	; (10f70 <ll_tx_mem_release+0x8>)
   10f6a:	f7fa bbf3 	b.w	b754 <mem_release>
   10f6e:	bf00      	nop
   10f70:	20001f6c 	.word	0x20001f6c

00010f74 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10f74:	2800      	cmp	r0, #0
   10f76:	d140      	bne.n	10ffa <ll_tx_mem_enqueue+0x86>
{
   10f78:	b570      	push	{r4, r5, r6, lr}
   10f7a:	4602      	mov	r2, r0
   10f7c:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f7e:	4820      	ldr	r0, [pc, #128]	; (11000 <ll_tx_mem_enqueue+0x8c>)
   10f80:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   10f84:	f7fa fbfe 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   10f88:	8d02      	ldrh	r2, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10f8a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   10f8c:	bb7a      	cbnz	r2, 10fee <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   10f8e:	4c1d      	ldr	r4, [pc, #116]	; (11004 <ll_tx_mem_enqueue+0x90>)
   10f90:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   10f92:	f894 c001 	ldrb.w	ip, [r4, #1]
   10f96:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   10f98:	1c4b      	adds	r3, r1, #1
   10f9a:	b2db      	uxtb	r3, r3
		last = 0U;
   10f9c:	459c      	cmp	ip, r3
   10f9e:	bf08      	it	eq
   10fa0:	2300      	moveq	r3, #0
	if (last == first) {
   10fa2:	4298      	cmp	r0, r3
   10fa4:	d026      	beq.n	10ff4 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   10fa6:	46a4      	mov	ip, r4
   10fa8:	f81c 0b04 	ldrb.w	r0, [ip], #4
   10fac:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   10fb0:	eb1c 0100 	adds.w	r1, ip, r0
   10fb4:	d01e      	beq.n	10ff4 <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   10fb6:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   10fba:	604e      	str	r6, [r1, #4]
	*last = idx; /* Commit: Update write index */
   10fbc:	70e3      	strb	r3, [r4, #3]
   10fbe:	782b      	ldrb	r3, [r5, #0]
	if (ull_ref_get(&conn->ull)) {
   10fc0:	b92b      	cbnz	r3, 10fce <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10fc2:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   10fc6:	2b00      	cmp	r3, #0
   10fc8:	db0b      	blt.n	10fe2 <ll_tx_mem_enqueue+0x6e>
	return 0;
   10fca:	2000      	movs	r0, #0
}
   10fcc:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   10fce:	4b0e      	ldr	r3, [pc, #56]	; (11008 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10fd0:	2101      	movs	r1, #1
   10fd2:	2003      	movs	r0, #3
		mfy.param = conn;
   10fd4:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   10fd6:	f7fa fc7b 	bl	b8d0 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10fda:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
   10fde:	2b00      	cmp	r3, #0
   10fe0:	daf3      	bge.n	10fca <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   10fe2:	4628      	mov	r0, r5
   10fe4:	2100      	movs	r1, #0
   10fe6:	f003 ffdb 	bl	14fa0 <ull_slave_latency_cancel>
	return 0;
   10fea:	2000      	movs	r0, #0
}
   10fec:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10fee:	f06f 0015 	mvn.w	r0, #21
}
   10ff2:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   10ff4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
   10ff8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   10ffa:	f06f 0015 	mvn.w	r0, #21
}
   10ffe:	4770      	bx	lr
   11000:	20001020 	.word	0x20001020
   11004:	200004e0 	.word	0x200004e0
   11008:	20000524 	.word	0x20000524

0001100c <ll_conn_update>:
{
   1100c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11010:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   11014:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   11018:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   1101c:	2800      	cmp	r0, #0
   1101e:	d155      	bne.n	110cc <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11020:	460c      	mov	r4, r1
   11022:	4615      	mov	r5, r2
   11024:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11028:	4602      	mov	r2, r0
   1102a:	4841      	ldr	r0, [pc, #260]	; (11130 <ll_conn_update+0x124>)
   1102c:	461e      	mov	r6, r3
   1102e:	f7fa fba9 	bl	b784 <mem_get>
   11032:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   11034:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   11036:	2800      	cmp	r0, #0
   11038:	d148      	bne.n	110cc <ll_conn_update+0xc0>
	if (!cmd) {
   1103a:	bb3c      	cbnz	r4, 1108c <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   1103c:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
   11040:	06d9      	lsls	r1, r3, #27
   11042:	d44a      	bmi.n	110da <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   11044:	f89c 30d8 	ldrb.w	r3, [ip, #216]	; 0xd8
		if (!conn->llcp_conn_param.disabled &&
   11048:	07da      	lsls	r2, r3, #31
   1104a:	d442      	bmi.n	110d2 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   1104c:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   11050:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   11054:	4293      	cmp	r3, r2
   11056:	d136      	bne.n	110c6 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   11058:	f8bc 2186 	ldrh.w	r2, [ip, #390]	; 0x186
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1105c:	f99c 1039 	ldrsb.w	r1, [ip, #57]	; 0x39
			conn->llcp_conn_param.interval_min = interval_min;
   11060:	f8ac 6188 	strh.w	r6, [ip, #392]	; 0x188
			conn->llcp_conn_param.state = cmd;
   11064:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   11068:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   1106a:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1106e:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   11070:	f8ac 918a 	strh.w	r9, [ip, #394]	; 0x18a
			conn->llcp_conn_param.latency = latency;
   11074:	f8ac 818c 	strh.w	r8, [ip, #396]	; 0x18c
			conn->llcp_conn_param.timeout = timeout;
   11078:	f8ac 718e 	strh.w	r7, [ip, #398]	; 0x18e
			conn->llcp_conn_param.state = cmd;
   1107c:	f8ac 2186 	strh.w	r2, [ip, #390]	; 0x186
			conn->llcp_conn_param.req++;
   11080:	f88c 3184 	strb.w	r3, [ip, #388]	; 0x184
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11084:	db4e      	blt.n	11124 <ll_conn_update+0x118>
	return 0;
   11086:	2000      	movs	r0, #0
}
   11088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   1108c:	3c01      	subs	r4, #1
		if (cmd) {
   1108e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   11092:	d0db      	beq.n	1104c <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   11094:	f89c 2184 	ldrb.w	r2, [ip, #388]	; 0x184
   11098:	f89c 3185 	ldrb.w	r3, [ip, #389]	; 0x185
   1109c:	429a      	cmp	r2, r3
   1109e:	d012      	beq.n	110c6 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   110a0:	f89c 3186 	ldrb.w	r3, [ip, #390]	; 0x186
			     conn->llcp_conn_param.ack) ||
   110a4:	f003 0207 	and.w	r2, r3, #7
   110a8:	2a03      	cmp	r2, #3
   110aa:	d10c      	bne.n	110c6 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   110ac:	f004 0407 	and.w	r4, r4, #7
   110b0:	f023 030f 	bic.w	r3, r3, #15
   110b4:	f044 0408 	orr.w	r4, r4, #8
   110b8:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   110ba:	f88c 5187 	strb.w	r5, [ip, #391]	; 0x187
			conn->llcp_conn_param.state = cmd;
   110be:	f88c 4186 	strb.w	r4, [ip, #390]	; 0x186
}
   110c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   110c6:	200c      	movs	r0, #12
}
   110c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   110cc:	2002      	movs	r0, #2
}
   110ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   110d2:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   110d6:	079b      	lsls	r3, r3, #30
   110d8:	d4b8      	bmi.n	1104c <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   110da:	f99c 3039 	ldrsb.w	r3, [ip, #57]	; 0x39
   110de:	2b00      	cmp	r3, #0
   110e0:	db1e      	blt.n	11120 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   110e2:	f89c 210c 	ldrb.w	r2, [ip, #268]	; 0x10c
   110e6:	f89c 310d 	ldrb.w	r3, [ip, #269]	; 0x10d
   110ea:	4293      	cmp	r3, r2
   110ec:	d1eb      	bne.n	110c6 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   110ee:	f89c 210e 	ldrb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.interval = interval_max;
   110f2:	f8ac 9110 	strh.w	r9, [ip, #272]	; 0x110
		conn->llcp_cu.req++;
   110f6:	3301      	adds	r3, #1
   110f8:	f88c 310c 	strb.w	r3, [ip, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   110fc:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   11100:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11102:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   11106:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   11108:	f88c 311c 	strb.w	r3, [ip, #284]	; 0x11c
		conn->llcp_cu.latency = latency;
   1110c:	f8ac 8112 	strh.w	r8, [ip, #274]	; 0x112
		conn->llcp_cu.timeout = timeout;
   11110:	f8ac 7114 	strh.w	r7, [ip, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11114:	f88c 210e 	strb.w	r2, [ip, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   11118:	f8cc 0118 	str.w	r0, [ip, #280]	; 0x118
}
   1111c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11120:	201a      	movs	r0, #26
   11122:	e7d1      	b.n	110c8 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   11124:	4660      	mov	r0, ip
   11126:	2100      	movs	r1, #0
   11128:	f003 ff3a 	bl	14fa0 <ull_slave_latency_cancel>
	return 0;
   1112c:	2000      	movs	r0, #0
   1112e:	e7cb      	b.n	110c8 <ll_conn_update+0xbc>
   11130:	20001020 	.word	0x20001020

00011134 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   11134:	b9d0      	cbnz	r0, 1116c <ll_chm_get+0x38>
{
   11136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11138:	4602      	mov	r2, r0
   1113a:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1113c:	480c      	ldr	r0, [pc, #48]	; (11170 <ll_chm_get+0x3c>)
   1113e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11142:	f7fa fb1f 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   11146:	8d06      	ldrh	r6, [r0, #40]	; 0x28
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11148:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1114a:	b96e      	cbnz	r6, 11168 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   1114c:	f100 0734 	add.w	r7, r0, #52	; 0x34
		conn->chm_updated = 0U;
   11150:	f884 61d8 	strb.w	r6, [r4, #472]	; 0x1d8
		memcpy(chm, conn->lll.data_chan_map,
   11154:	2205      	movs	r2, #5
   11156:	4639      	mov	r1, r7
   11158:	4628      	mov	r0, r5
   1115a:	f00c fc57 	bl	1da0c <memcpy>
	} while (conn->chm_updated);
   1115e:	f894 01d8 	ldrb.w	r0, [r4, #472]	; 0x1d8
   11162:	2800      	cmp	r0, #0
   11164:	d1f4      	bne.n	11150 <ll_chm_get+0x1c>
}
   11166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11168:	2002      	movs	r0, #2
}
   1116a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1116c:	2002      	movs	r0, #2
}
   1116e:	4770      	bx	lr
   11170:	20001020 	.word	0x20001020

00011174 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   11174:	2800      	cmp	r0, #0
   11176:	d13e      	bne.n	111f6 <ll_terminate_ind_send+0x82>
{
   11178:	b510      	push	{r4, lr}
   1117a:	4602      	mov	r2, r0
   1117c:	460c      	mov	r4, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1117e:	4821      	ldr	r0, [pc, #132]	; (11204 <ll_terminate_ind_send+0x90>)
   11180:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11184:	f7fa fafe 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   11188:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   1118a:	bb93      	cbnz	r3, 111f2 <ll_terminate_ind_send+0x7e>
	if (conn->llcp_terminate.req != conn->llcp_terminate.ack) {
   1118c:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
   11190:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   11194:	429a      	cmp	r2, r3
   11196:	d12a      	bne.n	111ee <ll_terminate_ind_send+0x7a>
	switch (reason) {
   11198:	2c29      	cmp	r4, #41	; 0x29
   1119a:	d819      	bhi.n	111d0 <ll_terminate_ind_send+0x5c>
   1119c:	2c04      	cmp	r4, #4
   1119e:	d919      	bls.n	111d4 <ll_terminate_ind_send+0x60>
   111a0:	1f62      	subs	r2, r4, #5
   111a2:	2a24      	cmp	r2, #36	; 0x24
   111a4:	d816      	bhi.n	111d4 <ll_terminate_ind_send+0x60>
   111a6:	e8df f002 	tbb	[pc, r2]
   111aa:	1517      	.short	0x1517
   111ac:	15151515 	.word	0x15151515
   111b0:	15151515 	.word	0x15151515
   111b4:	15151515 	.word	0x15151515
   111b8:	15171717 	.word	0x15171717
   111bc:	17151515 	.word	0x17151515
   111c0:	15151515 	.word	0x15151515
   111c4:	15151515 	.word	0x15151515
   111c8:	15151515 	.word	0x15151515
   111cc:	1515      	.short	0x1515
   111ce:	17          	.byte	0x17
   111cf:	00          	.byte	0x00
   111d0:	2c3b      	cmp	r4, #59	; 0x3b
   111d2:	d001      	beq.n	111d8 <ll_terminate_ind_send+0x64>
   111d4:	2012      	movs	r0, #18
}
   111d6:	bd10      	pop	{r4, pc}
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   111d8:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_terminate.reason_own = reason;
   111dc:	f880 4142 	strb.w	r4, [r0, #322]	; 0x142
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   111e0:	3301      	adds	r3, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   111e2:	2a00      	cmp	r2, #0
	conn->llcp_terminate.req++; /* (req - ack) == 1, TERM_REQ */
   111e4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   111e8:	db07      	blt.n	111fa <ll_terminate_ind_send+0x86>
	return 0;
   111ea:	2000      	movs	r0, #0
}
   111ec:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   111ee:	200c      	movs	r0, #12
}
   111f0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   111f2:	2002      	movs	r0, #2
}
   111f4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   111f6:	2002      	movs	r0, #2
}
   111f8:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   111fa:	2100      	movs	r1, #0
   111fc:	f003 fed0 	bl	14fa0 <ull_slave_latency_cancel>
	return 0;
   11200:	2000      	movs	r0, #0
}
   11202:	bd10      	pop	{r4, pc}
   11204:	20001020 	.word	0x20001020

00011208 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   11208:	bb00      	cbnz	r0, 1124c <ll_feature_req_send+0x44>
{
   1120a:	b510      	push	{r4, lr}
   1120c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1120e:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11212:	480f      	ldr	r0, [pc, #60]	; (11250 <ll_feature_req_send+0x48>)
   11214:	f7fa fab6 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   11218:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   1121a:	b984      	cbnz	r4, 1123e <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   1121c:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   11220:	f890 2121 	ldrb.w	r2, [r0, #289]	; 0x121
   11224:	428a      	cmp	r2, r1
   11226:	d108      	bne.n	1123a <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11228:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_feature.req++;
   1122c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1122e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   11230:	f880 2120 	strb.w	r2, [r0, #288]	; 0x120
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   11234:	db05      	blt.n	11242 <ll_feature_req_send+0x3a>
	return 0;
   11236:	4620      	mov	r0, r4
}
   11238:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1123a:	200c      	movs	r0, #12
}
   1123c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1123e:	2002      	movs	r0, #2
}
   11240:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   11242:	4621      	mov	r1, r4
   11244:	f003 feac 	bl	14fa0 <ull_slave_latency_cancel>
	return 0;
   11248:	4620      	mov	r0, r4
}
   1124a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1124c:	2002      	movs	r0, #2
}
   1124e:	4770      	bx	lr
   11250:	20001020 	.word	0x20001020

00011254 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   11254:	bb00      	cbnz	r0, 11298 <ll_version_ind_send+0x44>
{
   11256:	b510      	push	{r4, lr}
   11258:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1125a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1125e:	480f      	ldr	r0, [pc, #60]	; (1129c <ll_version_ind_send+0x48>)
   11260:	f7fa fa90 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   11264:	8d04      	ldrh	r4, [r0, #40]	; 0x28
   11266:	b984      	cbnz	r4, 1128a <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   11268:	f890 1138 	ldrb.w	r1, [r0, #312]	; 0x138
   1126c:	f890 2139 	ldrb.w	r2, [r0, #313]	; 0x139
   11270:	428a      	cmp	r2, r1
   11272:	d108      	bne.n	11286 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11274:	f990 1039 	ldrsb.w	r1, [r0, #57]	; 0x39
	conn->llcp_version.req++;
   11278:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1127a:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   1127c:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11280:	db05      	blt.n	1128e <ll_version_ind_send+0x3a>
	return 0;
   11282:	4620      	mov	r0, r4
}
   11284:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   11286:	200c      	movs	r0, #12
}
   11288:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1128a:	2002      	movs	r0, #2
}
   1128c:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   1128e:	4621      	mov	r1, r4
   11290:	f003 fe86 	bl	14fa0 <ull_slave_latency_cancel>
	return 0;
   11294:	4620      	mov	r0, r4
}
   11296:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11298:	2002      	movs	r0, #2
}
   1129a:	4770      	bx	lr
   1129c:	20001020 	.word	0x20001020

000112a0 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   112a0:	2800      	cmp	r0, #0
   112a2:	d14c      	bne.n	1133e <ll_length_req_send+0x9e>
{
   112a4:	b538      	push	{r3, r4, r5, lr}
   112a6:	460d      	mov	r5, r1
   112a8:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   112aa:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   112ae:	4602      	mov	r2, r0
   112b0:	4824      	ldr	r0, [pc, #144]	; (11344 <ll_length_req_send+0xa4>)
   112b2:	f7fa fa67 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   112b6:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   112b8:	bbc3      	cbnz	r3, 1132c <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   112ba:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
   112be:	071a      	lsls	r2, r3, #28
   112c0:	d432      	bmi.n	11328 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   112c2:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
	if (conn->llcp_length.disabled ||
   112c6:	07d1      	lsls	r1, r2, #31
   112c8:	d503      	bpl.n	112d2 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_DLE)))) {
   112ca:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   112ce:	0692      	lsls	r2, r2, #26
   112d0:	d52a      	bpl.n	11328 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   112d2:	f890 11ac 	ldrb.w	r1, [r0, #428]	; 0x1ac
   112d6:	f890 21ad 	ldrb.w	r2, [r0, #429]	; 0x1ad
   112da:	428a      	cmp	r2, r1
   112dc:	d011      	beq.n	11302 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   112de:	f003 0307 	and.w	r3, r3, #7
   112e2:	2b03      	cmp	r3, #3
   112e4:	d004      	beq.n	112f0 <ll_length_req_send+0x50>
   112e6:	3303      	adds	r3, #3
   112e8:	f003 0307 	and.w	r3, r3, #7
   112ec:	2b01      	cmp	r3, #1
   112ee:	d824      	bhi.n	1133a <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   112f0:	f8b0 31b8 	ldrh.w	r3, [r0, #440]	; 0x1b8
   112f4:	bb0b      	cbnz	r3, 1133a <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   112f6:	f8a0 51b8 	strh.w	r5, [r0, #440]	; 0x1b8
				conn->llcp_length.cache.tx_time = tx_time;
   112fa:	f8a0 41ba 	strh.w	r4, [r0, #442]	; 0x1ba
				return 0;
   112fe:	4618      	mov	r0, r3
}
   11300:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   11302:	f890 31ae 	ldrb.w	r3, [r0, #430]	; 0x1ae
	conn->llcp_length.tx_octets = tx_octets;
   11306:	f8a0 51b2 	strh.w	r5, [r0, #434]	; 0x1b2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   1130a:	f36f 0302 	bfc	r3, #0, #3
   1130e:	f880 31ae 	strb.w	r3, [r0, #430]	; 0x1ae
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11312:	f990 3039 	ldrsb.w	r3, [r0, #57]	; 0x39
	conn->llcp_length.tx_time = tx_time;
   11316:	f8a0 41b6 	strh.w	r4, [r0, #438]	; 0x1b6
	conn->llcp_length.req++;
   1131a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1131c:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   1131e:	f880 21ac 	strb.w	r2, [r0, #428]	; 0x1ac
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11322:	db05      	blt.n	11330 <ll_length_req_send+0x90>
	return 0;
   11324:	2000      	movs	r0, #0
}
   11326:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11328:	201a      	movs	r0, #26
}
   1132a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1132c:	2002      	movs	r0, #2
}
   1132e:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   11330:	2100      	movs	r1, #0
   11332:	f003 fe35 	bl	14fa0 <ull_slave_latency_cancel>
	return 0;
   11336:	2000      	movs	r0, #0
}
   11338:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   1133a:	200c      	movs	r0, #12
}
   1133c:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1133e:	2002      	movs	r0, #2
}
   11340:	4770      	bx	lr
   11342:	bf00      	nop
   11344:	20001020 	.word	0x20001020

00011348 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   11348:	4a03      	ldr	r2, [pc, #12]	; (11358 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   1134a:	4b04      	ldr	r3, [pc, #16]	; (1135c <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   1134c:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   1134e:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   11350:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   11352:	800b      	strh	r3, [r1, #0]
}
   11354:	4770      	bx	lr
   11356:	bf00      	nop
   11358:	20002906 	.word	0x20002906
   1135c:	20002908 	.word	0x20002908

00011360 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   11360:	4a02      	ldr	r2, [pc, #8]	; (1136c <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   11362:	4b03      	ldr	r3, [pc, #12]	; (11370 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   11364:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   11366:	8019      	strh	r1, [r3, #0]
}
   11368:	2000      	movs	r0, #0
   1136a:	4770      	bx	lr
   1136c:	20002906 	.word	0x20002906
   11370:	20002908 	.word	0x20002908

00011374 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   11374:	f04f 0c1b 	mov.w	ip, #27
   11378:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1137c:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   11380:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   11384:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   11386:	8018      	strh	r0, [r3, #0]
}
   11388:	4770      	bx	lr
   1138a:	bf00      	nop

0001138c <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1138c:	b9c0      	cbnz	r0, 113c0 <ll_phy_get+0x34>
{
   1138e:	b538      	push	{r3, r4, r5, lr}
   11390:	460d      	mov	r5, r1
   11392:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11394:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11398:	4602      	mov	r2, r0
   1139a:	480a      	ldr	r0, [pc, #40]	; (113c4 <ll_phy_get+0x38>)
   1139c:	f7fa f9f2 	bl	b784 <mem_get>
   113a0:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   113a2:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   113a4:	b950      	cbnz	r0, 113bc <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   113a6:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
   113aa:	f3c2 0202 	ubfx	r2, r2, #0, #3
   113ae:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   113b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
   113b4:	f3c3 0302 	ubfx	r3, r3, #0, #3
   113b8:	7023      	strb	r3, [r4, #0]
}
   113ba:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   113bc:	2002      	movs	r0, #2
}
   113be:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   113c0:	2002      	movs	r0, #2
}
   113c2:	4770      	bx	lr
   113c4:	20001020 	.word	0x20001020

000113c8 <ll_phy_default_set>:
	default_phy_tx = tx;
   113c8:	4a02      	ldr	r2, [pc, #8]	; (113d4 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   113ca:	4b03      	ldr	r3, [pc, #12]	; (113d8 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   113cc:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   113ce:	7019      	strb	r1, [r3, #0]
}
   113d0:	2000      	movs	r0, #0
   113d2:	4770      	bx	lr
   113d4:	20002a7c 	.word	0x20002a7c
   113d8:	20002a7b 	.word	0x20002a7b

000113dc <ll_phy_req_send>:
{
   113dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   113de:	2800      	cmp	r0, #0
   113e0:	d143      	bne.n	1146a <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   113e2:	460c      	mov	r4, r1
   113e4:	4616      	mov	r6, r2
   113e6:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   113ea:	4602      	mov	r2, r0
   113ec:	4823      	ldr	r0, [pc, #140]	; (1147c <ll_phy_req_send+0xa0>)
   113ee:	461f      	mov	r7, r3
   113f0:	f7fa f9c8 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   113f4:	8d03      	ldrh	r3, [r0, #40]	; 0x28
   113f6:	bbc3      	cbnz	r3, 1146a <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   113f8:	f890 51bf 	ldrb.w	r5, [r0, #447]	; 0x1bf
   113fc:	f015 0508 	ands.w	r5, r5, #8
   11400:	d130      	bne.n	11464 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   11402:	f890 30d8 	ldrb.w	r3, [r0, #216]	; 0xd8
	if (conn->llcp_phy.disabled ||
   11406:	07db      	lsls	r3, r3, #31
   11408:	d504      	bpl.n	11414 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT64(BT_LE_FEAT_BIT_PHY_2M)) &&
   1140a:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   1140e:	f413 6f10 	tst.w	r3, #2304	; 0x900
   11412:	d027      	beq.n	11464 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   11414:	f890 31bc 	ldrb.w	r3, [r0, #444]	; 0x1bc
   11418:	f890 11bd 	ldrb.w	r1, [r0, #445]	; 0x1bd
   1141c:	4299      	cmp	r1, r3
   1141e:	d11e      	bne.n	1145e <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   11420:	f004 0407 	and.w	r4, r4, #7
   11424:	f8b0 21be 	ldrh.w	r2, [r0, #446]	; 0x1be
   11428:	00a4      	lsls	r4, r4, #2
   1142a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   1142e:	f007 0307 	and.w	r3, r7, #7
   11432:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   11436:	f006 0601 	and.w	r6, r6, #1
   1143a:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   1143e:	f022 0207 	bic.w	r2, r2, #7
   11442:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   11446:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11448:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1144c:	f8a0 31be 	strh.w	r3, [r0, #446]	; 0x1be
	conn->llcp_phy.req++;
   11450:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11452:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   11454:	f880 11bc 	strb.w	r1, [r0, #444]	; 0x1bc
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   11458:	db0a      	blt.n	11470 <ll_phy_req_send+0x94>
}
   1145a:	4628      	mov	r0, r5
   1145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1145e:	250c      	movs	r5, #12
}
   11460:	4628      	mov	r0, r5
   11462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   11464:	251a      	movs	r5, #26
}
   11466:	4628      	mov	r0, r5
   11468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1146a:	2502      	movs	r5, #2
}
   1146c:	4628      	mov	r0, r5
   1146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   11470:	2100      	movs	r1, #0
   11472:	f003 fd95 	bl	14fa0 <ull_slave_latency_cancel>
}
   11476:	4628      	mov	r0, r5
   11478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1147a:	bf00      	nop
   1147c:	20001020 	.word	0x20001020

00011480 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   11480:	b9d8      	cbnz	r0, 114ba <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11482:	4602      	mov	r2, r0
{
   11484:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11486:	480e      	ldr	r0, [pc, #56]	; (114c0 <ll_apto_get+0x40>)
   11488:	460c      	mov	r4, r1
   1148a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1148e:	f7fa f979 	bl	b784 <mem_get>
   11492:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   11494:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   11496:	b970      	cbnz	r0, 114b6 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   11498:	f8b2 30ce 	ldrh.w	r3, [r2, #206]	; 0xce
   1149c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
   1149e:	fb02 f303 	mul.w	r3, r2, r3
   114a2:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   114a6:	4a07      	ldr	r2, [pc, #28]	; (114c4 <ll_apto_get+0x44>)
   114a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   114ac:	fba2 2303 	umull	r2, r3, r2, r3
   114b0:	099b      	lsrs	r3, r3, #6
   114b2:	8023      	strh	r3, [r4, #0]
}
   114b4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   114b6:	2002      	movs	r0, #2
}
   114b8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   114ba:	2002      	movs	r0, #2
}
   114bc:	4770      	bx	lr
   114be:	bf00      	nop
   114c0:	20001020 	.word	0x20001020
   114c4:	10624dd3 	.word	0x10624dd3

000114c8 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   114c8:	b9e0      	cbnz	r0, 11504 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   114ca:	4602      	mov	r2, r0
{
   114cc:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   114ce:	480e      	ldr	r0, [pc, #56]	; (11508 <ll_apto_set+0x40>)
   114d0:	460c      	mov	r4, r1
   114d2:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   114d6:	f7fa f955 	bl	b784 <mem_get>
   114da:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   114dc:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   114de:	b978      	cbnz	r0, 11500 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   114e0:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	; 0x2a
   114e4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   114e8:	fb03 fc0c 	mul.w	ip, r3, ip
   114ec:	f242 7310 	movw	r3, #10000	; 0x2710
   114f0:	fb03 c304 	mla	r3, r3, r4, ip
   114f4:	3b01      	subs	r3, #1
   114f6:	fbb3 f3fc 	udiv	r3, r3, ip
   114fa:	f8a2 30ce 	strh.w	r3, [r2, #206]	; 0xce
}
   114fe:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11500:	2002      	movs	r0, #2
}
   11502:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11504:	2002      	movs	r0, #2
}
   11506:	4770      	bx	lr
   11508:	20001020 	.word	0x20001020

0001150c <ull_conn_init>:
	err = init_reset();
   1150c:	f7fe bee4 	b.w	102d8 <init_reset>

00011510 <ull_conn_reset>:
{
   11510:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11512:	2200      	movs	r2, #0
   11514:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   11518:	4813      	ldr	r0, [pc, #76]	; (11568 <ull_conn_reset+0x58>)
   1151a:	f7fa f933 	bl	b784 <mem_get>
   1151e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   11520:	f100 021c 	add.w	r2, r0, #28
   11524:	4601      	mov	r1, r0
   11526:	2003      	movs	r0, #3
   11528:	f7fd ffe0 	bl	f4ec <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1152c:	b108      	cbz	r0, 11532 <ull_conn_reset+0x22>
   1152e:	3078      	adds	r0, #120	; 0x78
   11530:	d10b      	bne.n	1154a <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   11532:	480e      	ldr	r0, [pc, #56]	; (1156c <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   11534:	490e      	ldr	r1, [pc, #56]	; (11570 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   11536:	4a0f      	ldr	r2, [pc, #60]	; (11574 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   11538:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   1153a:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   1153c:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   1153e:	6763      	str	r3, [r4, #116]	; 0x74
}
   11540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   11544:	6013      	str	r3, [r2, #0]
	err = init_reset();
   11546:	f7fe bec7 	b.w	102d8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1154a:	4a0b      	ldr	r2, [pc, #44]	; (11578 <ull_conn_reset+0x68>)
   1154c:	490b      	ldr	r1, [pc, #44]	; (1157c <ull_conn_reset+0x6c>)
   1154e:	480c      	ldr	r0, [pc, #48]	; (11580 <ull_conn_reset+0x70>)
   11550:	f240 7386 	movw	r3, #1926	; 0x786
   11554:	f00a f90e 	bl	1b774 <printk>
   11558:	4040      	eors	r0, r0
   1155a:	f380 8811 	msr	BASEPRI, r0
   1155e:	f04f 0003 	mov.w	r0, #3
   11562:	df02      	svc	2
   11564:	e7e5      	b.n	11532 <ull_conn_reset+0x22>
   11566:	bf00      	nop
   11568:	20001020 	.word	0x20001020
   1156c:	200004e0 	.word	0x200004e0
   11570:	2000049c 	.word	0x2000049c
   11574:	20001f50 	.word	0x20001f50
   11578:	00021da4 	.word	0x00021da4
   1157c:	00021eb4 	.word	0x00021eb4
   11580:	0002180c 	.word	0x0002180c

00011584 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   11584:	4b01      	ldr	r3, [pc, #4]	; (1158c <ull_conn_default_tx_octets_get+0x8>)
}
   11586:	8818      	ldrh	r0, [r3, #0]
   11588:	4770      	bx	lr
   1158a:	bf00      	nop
   1158c:	20002906 	.word	0x20002906

00011590 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   11590:	4b01      	ldr	r3, [pc, #4]	; (11598 <ull_conn_default_tx_time_get+0x8>)
}
   11592:	8818      	ldrh	r0, [r3, #0]
   11594:	4770      	bx	lr
   11596:	bf00      	nop
   11598:	20002908 	.word	0x20002908

0001159c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   1159c:	4b01      	ldr	r3, [pc, #4]	; (115a4 <ull_conn_default_phy_tx_get+0x8>)
}
   1159e:	7818      	ldrb	r0, [r3, #0]
   115a0:	4770      	bx	lr
   115a2:	bf00      	nop
   115a4:	20002a7c 	.word	0x20002a7c

000115a8 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   115a8:	4b01      	ldr	r3, [pc, #4]	; (115b0 <ull_conn_default_phy_rx_get+0x8>)
}
   115aa:	7818      	ldrb	r0, [r3, #0]
   115ac:	4770      	bx	lr
   115ae:	bf00      	nop
   115b0:	20002a7b 	.word	0x20002a7b

000115b4 <ull_conn_setup>:
{
   115b4:	b538      	push	{r3, r4, r5, lr}
	hdr = HDR_LLL2ULL(ftr->param);
   115b6:	688b      	ldr	r3, [r1, #8]
	rx->link = rx_link;
   115b8:	6008      	str	r0, [r1, #0]
	hdr = HDR_LLL2ULL(ftr->param);
   115ba:	681d      	ldr	r5, [r3, #0]
   115bc:	782b      	ldrb	r3, [r5, #0]
{
   115be:	460c      	mov	r4, r1
	if (ull_ref_get(hdr)) {
   115c0:	b193      	cbz	r3, 115e8 <ull_conn_setup+0x34>
		LL_ASSERT(!hdr->disabled_cb);
   115c2:	696b      	ldr	r3, [r5, #20]
   115c4:	b163      	cbz	r3, 115e0 <ull_conn_setup+0x2c>
   115c6:	4a0b      	ldr	r2, [pc, #44]	; (115f4 <ull_conn_setup+0x40>)
   115c8:	490b      	ldr	r1, [pc, #44]	; (115f8 <ull_conn_setup+0x44>)
   115ca:	480c      	ldr	r0, [pc, #48]	; (115fc <ull_conn_setup+0x48>)
   115cc:	f240 3359 	movw	r3, #857	; 0x359
   115d0:	f00a f8d0 	bl	1b774 <printk>
   115d4:	4040      	eors	r0, r0
   115d6:	f380 8811 	msr	BASEPRI, r0
   115da:	f04f 0003 	mov.w	r0, #3
   115de:	df02      	svc	2
		hdr->disabled_cb = conn_setup_adv_scan_disabled_cb;
   115e0:	4b07      	ldr	r3, [pc, #28]	; (11600 <ull_conn_setup+0x4c>)
   115e2:	e9c5 3405 	strd	r3, r4, [r5, #20]
}
   115e6:	bd38      	pop	{r3, r4, r5, pc}
   115e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		conn_setup_adv_scan_disabled_cb(rx);
   115ec:	4608      	mov	r0, r1
   115ee:	f7ff b86f 	b.w	106d0 <conn_setup_adv_scan_disabled_cb>
   115f2:	bf00      	nop
   115f4:	00021da4 	.word	0x00021da4
   115f8:	00021cf0 	.word	0x00021cf0
   115fc:	0002180c 	.word	0x0002180c
   11600:	000106d1 	.word	0x000106d1

00011604 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   11604:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   11606:	88da      	ldrh	r2, [r3, #6]
   11608:	2a00      	cmp	r2, #0
   1160a:	f040 80cc 	bne.w	117a6 <ull_conn_rx+0x1a2>
{
   1160e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11612:	460e      	mov	r6, r1
   11614:	b085      	sub	sp, #20
   11616:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   11618:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   1161c:	48ba      	ldr	r0, [pc, #744]	; (11908 <ull_conn_rx+0x304>)
   1161e:	f7fa f8b1 	bl	b784 <mem_get>
   11622:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   11624:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   11626:	2800      	cmp	r0, #0
   11628:	f040 80b6 	bne.w	11798 <ull_conn_rx+0x194>
	pdu_rx = (void *)(*rx)->pdu;
   1162c:	6835      	ldr	r5, [r6, #0]
	switch (pdu_rx->ll_id) {
   1162e:	7f2a      	ldrb	r2, [r5, #28]
   11630:	f002 0203 	and.w	r2, r2, #3
   11634:	2a03      	cmp	r2, #3
   11636:	d127      	bne.n	11688 <ull_conn_rx+0x84>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   11638:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	opcode = pdu_rx->llctrl.opcode;
   1163c:	f895 801f 	ldrb.w	r8, [r5, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   11640:	07d3      	lsls	r3, r2, #31
   11642:	d53b      	bpl.n	116bc <ull_conn_rx+0xb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   11644:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11648:	2b00      	cmp	r3, #0
   1164a:	f2c0 80b0 	blt.w	117ae <ull_conn_rx+0x1aa>
	return (!conn->lll.role &&
   1164e:	0750      	lsls	r0, r2, #29
   11650:	f100 8101 	bmi.w	11856 <ull_conn_rx+0x252>
		((!conn->llcp_enc.refresh &&
   11654:	f1b8 0f02 	cmp.w	r8, #2
   11658:	f000 8111 	beq.w	1187e <ull_conn_rx+0x27a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1165c:	f1b8 0f05 	cmp.w	r8, #5
   11660:	d04e      	beq.n	11700 <ull_conn_rx+0xfc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   11662:	f1b8 0f06 	cmp.w	r8, #6
   11666:	f000 8369 	beq.w	11d3c <ull_conn_rx+0x738>
   1166a:	f1b8 0f0d 	cmp.w	r8, #13
   1166e:	f000 81dd 	beq.w	11a2c <ull_conn_rx+0x428>
   11672:	f1b8 0f11 	cmp.w	r8, #17
   11676:	f000 826f 	beq.w	11b58 <ull_conn_rx+0x554>
		conn->llcp_terminate.reason_final =
   1167a:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1167c:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_final =
   1167e:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143

		return 0;
   11682:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11684:	712b      	strb	r3, [r5, #4]
		return 0;
   11686:	e00a      	b.n	1169e <ull_conn_rx+0x9a>
	switch (pdu_rx->ll_id) {
   11688:	b962      	cbnz	r2, 116a4 <ull_conn_rx+0xa0>
		if (conn->llcp_enc.pause_rx) {
   1168a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   1168e:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_final =
   11690:	bf44      	itt	mi
   11692:	233d      	movmi	r3, #61	; 0x3d
   11694:	f884 3143 	strbmi.w	r3, [r4, #323]	; 0x143
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11698:	2301      	movs	r3, #1
   1169a:	712b      	strb	r3, [r5, #4]
	return 0;
   1169c:	2000      	movs	r0, #0
}
   1169e:	b005      	add	sp, #20
   116a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   116a4:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
   116a8:	07d2      	lsls	r2, r2, #31
   116aa:	d5f7      	bpl.n	1169c <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_final =
   116ac:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   116ae:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_final =
   116b0:	f884 1143 	strb.w	r1, [r4, #323]	; 0x143
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   116b4:	712a      	strb	r2, [r5, #4]
}
   116b6:	b005      	add	sp, #20
   116b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   116bc:	f1b8 0f18 	cmp.w	r8, #24
   116c0:	d81e      	bhi.n	11700 <ull_conn_rx+0xfc>
   116c2:	e8df f018 	tbh	[pc, r8, lsl #1]
   116c6:	0125      	.short	0x0125
   116c8:	00dc027f 	.word	0x00dc027f
   116cc:	001d0019 	.word	0x001d0019
   116d0:	033b001d 	.word	0x033b001d
   116d4:	036603e2 	.word	0x036603e2
   116d8:	02b90302 	.word	0x02b90302
   116dc:	01f60475 	.word	0x01f60475
   116e0:	001d01b3 	.word	0x001d01b3
   116e4:	001d019e 	.word	0x001d019e
   116e8:	02250249 	.word	0x02250249
   116ec:	00e80194 	.word	0x00e80194
   116f0:	044500e8 	.word	0x044500e8
   116f4:	0408001d 	.word	0x0408001d
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   116f8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   116fc:	2b00      	cmp	r3, #0
   116fe:	db63      	blt.n	117c8 <ull_conn_rx+0x1c4>
	if (conn->common.txn_lock) {
   11700:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11704:	079f      	lsls	r7, r3, #30
   11706:	d4c7      	bmi.n	11698 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11708:	4880      	ldr	r0, [pc, #512]	; (1190c <ull_conn_rx+0x308>)
   1170a:	f7fa f809 	bl	b720 <mem_acquire>
	if (!tx) {
   1170e:	2800      	cmp	r0, #0
   11710:	f000 8514 	beq.w	1213c <ull_conn_rx+0xb38>
	conn->common.txn_lock = 1U;
   11714:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11718:	f043 0302 	orr.w	r3, r3, #2
   1171c:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11720:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   11722:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   11726:	f043 0303 	orr.w	r3, r3, #3
   1172a:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1172c:	2302      	movs	r3, #2
   1172e:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   11730:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11734:	2307      	movs	r3, #7
   11736:	71c3      	strb	r3, [r0, #7]
	if (
   11738:	b1f2      	cbz	r2, 11778 <ull_conn_rx+0x174>
	    !conn->llcp_enc.pause_tx &&
   1173a:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1173e:	079e      	lsls	r6, r3, #30
   11740:	d41a      	bmi.n	11778 <ull_conn_rx+0x174>
	    !conn->llcp_phy.pause_tx &&
   11742:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   11746:	07d9      	lsls	r1, r3, #31
   11748:	d416      	bmi.n	11778 <ull_conn_rx+0x174>
		if (conn->tx_head == conn->tx_data) {
   1174a:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   1174e:	429a      	cmp	r2, r3
   11750:	f000 84fd 	beq.w	1214e <ull_conn_rx+0xb4a>
		} else if (!conn->tx_ctrl) {
   11754:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   11758:	2b00      	cmp	r3, #0
   1175a:	f000 854a 	beq.w	121f2 <ull_conn_rx+0xbee>
	tx->next = conn->tx_ctrl_last->next;
   1175e:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   11762:	6813      	ldr	r3, [r2, #0]
   11764:	6003      	str	r3, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   11766:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   11768:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1176a:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1176e:	2a00      	cmp	r2, #0
   11770:	d192      	bne.n	11698 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   11772:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11776:	e78f      	b.n	11698 <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   11778:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1177c:	2b00      	cmp	r3, #0
   1177e:	f000 84d3 	beq.w	12128 <ull_conn_rx+0xb24>
	tx->next = conn->tx_ctrl_last->next;
   11782:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11786:	681a      	ldr	r2, [r3, #0]
   11788:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1178a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1178c:	6802      	ldr	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   1178e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11792:	2a00      	cmp	r2, #0
   11794:	d180      	bne.n	11698 <ull_conn_rx+0x94>
   11796:	e7ec      	b.n	11772 <ull_conn_rx+0x16e>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11798:	6833      	ldr	r3, [r6, #0]
   1179a:	2201      	movs	r2, #1
		return 0;
   1179c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1179e:	711a      	strb	r2, [r3, #4]
}
   117a0:	b005      	add	sp, #20
   117a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   117a6:	2201      	movs	r2, #1
   117a8:	711a      	strb	r2, [r3, #4]
		return 0;
   117aa:	2000      	movs	r0, #0
}
   117ac:	4770      	bx	lr
	       (conn->lll.role &&
   117ae:	0751      	lsls	r1, r2, #29
   117b0:	d55d      	bpl.n	1186e <ull_conn_rx+0x26a>
		 (conn->llcp_enc.refresh &&
   117b2:	f1b8 0f02 	cmp.w	r8, #2
   117b6:	d062      	beq.n	1187e <ull_conn_rx+0x27a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   117b8:	f1b8 0f0b 	cmp.w	r8, #11
   117bc:	f000 84da 	beq.w	12174 <ull_conn_rx+0xb70>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   117c0:	f1b8 0f03 	cmp.w	r8, #3
   117c4:	f47f af4d 	bne.w	11662 <ull_conn_rx+0x5e>
		if (!conn->lll.role ||
   117c8:	7f6b      	ldrb	r3, [r5, #29]
   117ca:	2b17      	cmp	r3, #23
   117cc:	d198      	bne.n	11700 <ull_conn_rx+0xfc>

#if defined(CONFIG_BT_CTLR_PHY)
		/* LL_ENC_REQ was received while local peripheral initiated
		 * procedure is in progress.
		 */
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   117ce:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   117d2:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   117d6:	1a9b      	subs	r3, r3, r2
   117d8:	f003 0303 	and.w	r3, r3, #3
   117dc:	2b02      	cmp	r3, #2
   117de:	f001 8165 	beq.w	12aac <ull_conn_rx+0x14a8>

		/* Start Enc Req to be scheduled by LL api */
		conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
#else /* CONFIG_BT_CTLR_FAST_ENC */
		/* back up rand and ediv for deferred generation of Enc Req */
		memcpy(&conn->llcp_enc.rand[0],
   117e2:	2208      	movs	r2, #8
   117e4:	f105 0120 	add.w	r1, r5, #32
   117e8:	f204 1069 	addw	r0, r4, #361	; 0x169
   117ec:	f00c f90e 	bl	1da0c <memcpy>
		       &pdu_rx->llctrl.enc_req.rand[0],
		       sizeof(conn->llcp_enc.rand));
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   117f0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
   117f4:	f884 3167 	strb.w	r3, [r4, #359]	; 0x167
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   117f8:	f895 3029 	ldrb.w	r3, [r5, #41]	; 0x29

		/* Enc rsp to be scheduled in master prepare */
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   117fc:	f894 20f4 	ldrb.w	r2, [r4, #244]	; 0xf4
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   11800:	f884 3168 	strb.w	r3, [r4, #360]	; 0x168

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11804:	6831      	ldr	r1, [r6, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   11806:	2301      	movs	r3, #1
   11808:	f363 0201 	bfi	r2, r3, #0, #2
   1180c:	f884 20f4 	strb.w	r2, [r4, #244]	; 0xf4
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11810:	710b      	strb	r3, [r1, #4]
#endif /* CONFIG_BT_CTLR_FAST_ENC */

		/* Enc Setup state machine active */
		conn->llcp_type = LLCP_ENCRYPTION;
		conn->llcp_ack -= 2U;
   11812:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
		conn->llcp_type = LLCP_ENCRYPTION;
   11816:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   11818:	3b02      	subs	r3, #2
   1181a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5

		/* things from master stored for session key calculation */
		memcpy(&conn->llcp.encryption.skd[0],
   1181e:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   11820:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
		memcpy(&conn->llcp.encryption.skd[0],
   11824:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   11828:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   1182c:	f00c f8ee 	bl	1da0c <memcpy>
		       &pdu_rx->llctrl.enc_req.skdm[0], 8);
		memcpy(&conn->lll.ccm_rx.iv[0],
   11830:	2204      	movs	r2, #4
   11832:	f105 0132 	add.w	r1, r5, #50	; 0x32
   11836:	f104 0094 	add.w	r0, r4, #148	; 0x94
   1183a:	f00c f8e7 	bl	1da0c <memcpy>
		       &pdu_rx->llctrl.enc_req.ivm[0], 4);

		/* pause rx data packets */
		conn->llcp_enc.pause_rx = 1U;
   1183e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166

		/* Start Procedure Timeout (TODO: this shall not replace
		 * terminate procedure).
		 */
		conn->procedure_expire = conn->procedure_reload;
   11842:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   11846:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->llcp_enc.pause_rx = 1U;
   1184a:	f043 0301 	orr.w	r3, r3, #1
   1184e:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	int nack = 0;
   11852:	2000      	movs	r0, #0

		break;
   11854:	e723      	b.n	1169e <ull_conn_rx+0x9a>
		 (conn->llcp_enc.refresh &&
   11856:	f1b8 0f02 	cmp.w	r8, #2
   1185a:	d010      	beq.n	1187e <ull_conn_rx+0x27a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1185c:	f1b8 0f0b 	cmp.w	r8, #11
   11860:	f000 8470 	beq.w	12144 <ull_conn_rx+0xb40>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   11864:	f1b8 0f04 	cmp.w	r8, #4
   11868:	f47f aef8 	bne.w	1165c <ull_conn_rx+0x58>
   1186c:	e748      	b.n	11700 <ull_conn_rx+0xfc>
		((!conn->llcp_enc.refresh &&
   1186e:	f1b8 0f07 	cmp.w	r8, #7
   11872:	f000 830a 	beq.w	11e8a <ull_conn_rx+0x886>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   11876:	f1b8 0f02 	cmp.w	r8, #2
   1187a:	f47f aef2 	bne.w	11662 <ull_conn_rx+0x5e>
		if (PDU_DATA_LLCTRL_LEN(terminate_ind) != pdu_rx->len) {
   1187e:	7f6b      	ldrb	r3, [r5, #29]
   11880:	2b02      	cmp	r3, #2
   11882:	f47f af3d 	bne.w	11700 <ull_conn_rx+0xfc>
	conn->llcp_terminate.reason_final =
   11886:	f895 2020 	ldrb.w	r2, [r5, #32]
   1188a:	f884 2143 	strb.w	r2, [r4, #323]	; 0x143
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1188e:	2301      	movs	r3, #1
	int nack = 0;
   11890:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11892:	712b      	strb	r3, [r5, #4]
}
   11894:	e703      	b.n	1169e <ull_conn_rx+0x9a>
		break;

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (PDU_DATA_LLCTRL_LEN(length_req) != pdu_rx->len) {
   11896:	7f6b      	ldrb	r3, [r5, #29]
   11898:	2b09      	cmp	r3, #9
   1189a:	f47f af31 	bne.w	11700 <ull_conn_rx+0xfc>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1189e:	f1b8 0f14 	cmp.w	r8, #20
   118a2:	f000 84b0 	beq.w	12206 <ull_conn_rx+0xc02>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   118a6:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   118aa:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   118ae:	4293      	cmp	r3, r2
   118b0:	f001 804e 	beq.w	12950 <ull_conn_rx+0x134c>
	eff_rx_octets = conn->lll.max_rx_octets;
   118b4:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   118b8:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   118bc:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   118c0:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   118c4:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	struct node_tx *tx = NULL;
   118c8:	2300      	movs	r3, #0
	       tx) ||
   118ca:	f001 0107 	and.w	r1, r1, #7
   118ce:	2902      	cmp	r1, #2
   118d0:	f000 84b9 	beq.w	12246 <ull_conn_rx+0xc42>
   118d4:	f895 801f 	ldrb.w	r8, [r5, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   118d8:	f1b8 0f15 	cmp.w	r8, #21
   118dc:	f43f aede 	beq.w	1169c <ull_conn_rx+0x98>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   118e0:	4618      	mov	r0, r3
   118e2:	490a      	ldr	r1, [pc, #40]	; (1190c <ull_conn_rx+0x308>)
   118e4:	f7f9 ff36 	bl	b754 <mem_release>
			if (conn->llcp_length.state ==
   118e8:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->common.txn_lock = 0U;
   118ec:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   118f0:	f003 0307 	and.w	r3, r3, #7
			conn->common.txn_lock = 0U;
   118f4:	f36f 0241 	bfc	r2, #1, #1
			if (conn->llcp_length.state ==
   118f8:	2b04      	cmp	r3, #4
			conn->common.txn_lock = 0U;
   118fa:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
			if (conn->llcp_length.state ==
   118fe:	f47f aecd 	bne.w	1169c <ull_conn_rx+0x98>
				return -EBUSY;
   11902:	f06f 000f 	mvn.w	r0, #15
   11906:	e6ca      	b.n	1169e <ull_conn_rx+0x9a>
   11908:	20001020 	.word	0x20001020
   1190c:	20001fdc 	.word	0x20001fdc
		if (!conn->lll.role ||
   11910:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11914:	2b00      	cmp	r3, #0
   11916:	f6bf aef3 	bge.w	11700 <ull_conn_rx+0xfc>
   1191a:	7f6b      	ldrb	r3, [r5, #29]
   1191c:	2b0c      	cmp	r3, #12
   1191e:	f47f aeef 	bne.w	11700 <ull_conn_rx+0xfc>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   11922:	f8b5 2029 	ldrh.w	r2, [r5, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   11926:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11928:	1ad3      	subs	r3, r2, r3
   1192a:	041b      	lsls	r3, r3, #16
   1192c:	f100 8734 	bmi.w	12798 <ull_conn_rx+0x1194>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11930:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11934:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   11938:	1a5b      	subs	r3, r3, r1
   1193a:	f003 0303 	and.w	r3, r3, #3
   1193e:	2b02      	cmp	r3, #2
   11940:	f000 87b2 	beq.w	128a8 <ull_conn_rx+0x12a4>
	if (!conn_upd_curr) {
   11944:	4bba      	ldr	r3, [pc, #744]	; (11c30 <ull_conn_rx+0x62c>)
   11946:	6819      	ldr	r1, [r3, #0]
   11948:	2900      	cmp	r1, #0
   1194a:	f000 87e7 	beq.w	1291c <ull_conn_rx+0x1318>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1194e:	f895 3020 	ldrb.w	r3, [r5, #32]
   11952:	f884 311c 	strb.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   11956:	f8b5 3021 	ldrh.w	r3, [r5, #33]	; 0x21
   1195a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1195e:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   11962:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   11966:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
   1196a:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
   1196e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   11972:	f8a4 3110 	strh.w	r3, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   11976:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   1197a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
   1197e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   11982:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11986:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1198a:	f895 1027 	ldrb.w	r1, [r5, #39]	; 0x27
   1198e:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   11992:	f8a4 20e8 	strh.w	r2, [r4, #232]	; 0xe8
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   11996:	f023 030f 	bic.w	r3, r3, #15
   1199a:	f043 0308 	orr.w	r3, r3, #8
   1199e:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
	conn->llcp_cu.ack--;
   119a2:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   119a6:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   119aa:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
	conn->llcp_cu.ack--;
   119ae:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   119b0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
	conn->llcp_cu.ack--;
   119b4:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
	link->mem = conn->llcp_rx;
   119b8:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   119ba:	6832      	ldr	r2, [r6, #0]
   119bc:	6017      	str	r7, [r2, #0]
	conn->llcp_rx = *rx;
   119be:	6832      	ldr	r2, [r6, #0]
   119c0:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   119c4:	2300      	movs	r3, #0
   119c6:	6033      	str	r3, [r6, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   119c8:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   119cc:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   119d0:	4293      	cmp	r3, r2
   119d2:	d007      	beq.n	119e4 <ull_conn_rx+0x3e0>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   119d4:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   119d8:	f003 0307 	and.w	r3, r3, #7
   119dc:	2b04      	cmp	r3, #4
   119de:	d101      	bne.n	119e4 <ull_conn_rx+0x3e0>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   119e0:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
		conn->procedure_expire = 0U;
   119e4:	2300      	movs	r3, #0
   119e6:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   119ea:	4618      	mov	r0, r3
		break;
   119ec:	e657      	b.n	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(ping_rsp) != pdu_rx->len) {
   119ee:	7f6a      	ldrb	r2, [r5, #29]
   119f0:	2a01      	cmp	r2, #1
   119f2:	f47f ae85 	bne.w	11700 <ull_conn_rx+0xfc>
		conn->procedure_expire = 0U;
   119f6:	2300      	movs	r3, #0
   119f8:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   119fc:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   119fe:	712a      	strb	r2, [r5, #4]
		break;
   11a00:	e64d      	b.n	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(conn_param_req) != pdu_rx->len) {
   11a02:	7f6b      	ldrb	r3, [r5, #29]
   11a04:	2b18      	cmp	r3, #24
   11a06:	f47f ae7b 	bne.w	11700 <ull_conn_rx+0xfc>
	return conn_upd_curr && (conn_upd_curr != conn);
   11a0a:	4989      	ldr	r1, [pc, #548]	; (11c30 <ull_conn_rx+0x62c>)
   11a0c:	680b      	ldr	r3, [r1, #0]
   11a0e:	2b00      	cmp	r3, #0
   11a10:	f000 83bc 	beq.w	1218c <ull_conn_rx+0xb88>
   11a14:	429c      	cmp	r4, r3
   11a16:	f000 83b9 	beq.w	1218c <ull_conn_rx+0xb88>
			nack = reject_ext_ind_send(conn, *rx,
   11a1a:	2320      	movs	r3, #32
   11a1c:	220f      	movs	r2, #15
   11a1e:	4629      	mov	r1, r5
   11a20:	4620      	mov	r0, r4
}
   11a22:	b005      	add	sp, #20
   11a24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			nack = reject_ext_ind_send(conn, *rx,
   11a28:	f7fe bf28 	b.w	1087c <reject_ext_ind_send>
		if (PDU_DATA_LLCTRL_LEN(reject_ind) != pdu_rx->len) {
   11a2c:	7f6b      	ldrb	r3, [r5, #29]
   11a2e:	2b02      	cmp	r3, #2
   11a30:	f47f ae66 	bne.w	11700 <ull_conn_rx+0xfc>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   11a34:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   11a38:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   11a3c:	4293      	cmp	r3, r2
   11a3e:	d004      	beq.n	11a4a <ull_conn_rx+0x446>
   11a40:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   11a44:	2b03      	cmp	r3, #3
   11a46:	f000 866d 	beq.w	12724 <ull_conn_rx+0x1120>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11a4a:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   11a4e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   11a52:	4293      	cmp	r3, r2
   11a54:	f000 84e7 	beq.w	12426 <ull_conn_rx+0xe22>
		rej_ext_ind->error_code = rej_ind->error_code;
   11a58:	f895 1020 	ldrb.w	r1, [r5, #32]
   11a5c:	f885 1021 	strb.w	r1, [r5, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   11a60:	2923      	cmp	r1, #35	; 0x23
   11a62:	d012      	beq.n	11a8a <ull_conn_rx+0x486>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11a64:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   11a68:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11a6c:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   11a70:	f36f 0200 	bfc	r2, #0, #1
   11a74:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   11a78:	2200      	movs	r2, #0
   11a7a:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11a7e:	f3c3 0202 	ubfx	r2, r3, #0, #3
   11a82:	f362 1306 	bfi	r3, r2, #4, #3
   11a86:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   11a8a:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   11a8e:	075e      	lsls	r6, r3, #29
   11a90:	f57f ae02 	bpl.w	11698 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11a94:	231a      	movs	r3, #26
   11a96:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   11a98:	7729      	strb	r1, [r5, #28]
	p->tx = conn->lll.phy_tx;
   11a9a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
   11a9e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11aa2:	776b      	strb	r3, [r5, #29]
	p->rx = conn->lll.phy_rx;
   11aa4:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   11aa8:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   11aac:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   11aae:	77ab      	strb	r3, [r5, #30]
	if (err) {
   11ab0:	e5f5      	b.n	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(version_ind) != pdu_rx->len) {
   11ab2:	7f6e      	ldrb	r6, [r5, #29]
   11ab4:	2e06      	cmp	r6, #6
   11ab6:	f47f ae23 	bne.w	11700 <ull_conn_rx+0xfc>
	if (!conn->llcp_version.tx) {
   11aba:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   11abe:	07df      	lsls	r7, r3, #31
   11ac0:	f140 8597 	bpl.w	125f2 <ull_conn_rx+0xfee>
	} else if (!conn->llcp_version.rx) {
   11ac4:	f013 0302 	ands.w	r3, r3, #2
   11ac8:	f47f ade6 	bne.w	11698 <ull_conn_rx+0x94>
		conn->llcp_version.ack = conn->llcp_version.req;
   11acc:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
   11ad0:	f884 2139 	strb.w	r2, [r4, #313]	; 0x139
		conn->procedure_expire = 0U;
   11ad4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp_version.version_number = v->version_number;
   11ad8:	f895 3020 	ldrb.w	r3, [r5, #32]
   11adc:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   11ae0:	f895 1022 	ldrb.w	r1, [r5, #34]	; 0x22
   11ae4:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   11ae8:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   11aec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   11af0:	f8a4 213c 	strh.w	r2, [r4, #316]	; 0x13c
		sys_le16_to_cpu(v->sub_version_number);
   11af4:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
   11af8:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   11afc:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   11b00:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   11b04:	f8a4 213e 	strh.w	r2, [r4, #318]	; 0x13e
	conn->llcp_version.rx = 1U;
   11b08:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
	return 0;
   11b0c:	2000      	movs	r0, #0
   11b0e:	e5c6      	b.n	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(ping_req) != pdu_rx->len) {
   11b10:	7f6f      	ldrb	r7, [r5, #29]
   11b12:	2f01      	cmp	r7, #1
   11b14:	f47f adf4 	bne.w	11700 <ull_conn_rx+0xfc>
	if (conn->common.txn_lock) {
   11b18:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11b1c:	f013 0602 	ands.w	r6, r3, #2
   11b20:	f040 858d 	bne.w	1263e <ull_conn_rx+0x103a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11b24:	4843      	ldr	r0, [pc, #268]	; (11c34 <ull_conn_rx+0x630>)
   11b26:	f7f9 fdfb 	bl	b720 <mem_acquire>
	if (!tx) {
   11b2a:	4601      	mov	r1, r0
   11b2c:	2800      	cmp	r0, #0
   11b2e:	f000 8305 	beq.w	1213c <ull_conn_rx+0xb38>
	conn->common.txn_lock = 1U;
   11b32:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11b36:	f043 0302 	orr.w	r3, r3, #2
   11b3a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b3e:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   11b40:	714f      	strb	r7, [r1, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11b42:	f043 0303 	orr.w	r3, r3, #3
   11b46:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11b48:	2313      	movs	r3, #19
	ctrl_tx_sec_enqueue(conn, tx);
   11b4a:	4620      	mov	r0, r4
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11b4c:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11b4e:	f7fe fd5d 	bl	1060c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11b52:	712f      	strb	r7, [r5, #4]
	return 0;
   11b54:	4630      	mov	r0, r6
   11b56:	e5a2      	b.n	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(reject_ext_ind) != pdu_rx->len) {
   11b58:	7f6b      	ldrb	r3, [r5, #29]
   11b5a:	2b03      	cmp	r3, #3
   11b5c:	f47f add0 	bne.w	11700 <ull_conn_rx+0xfc>
	switch (rej_ext_ind->reject_opcode) {
   11b60:	f895 3020 	ldrb.w	r3, [r5, #32]
   11b64:	3b03      	subs	r3, #3
   11b66:	2b13      	cmp	r3, #19
   11b68:	f63f ad96 	bhi.w	11698 <ull_conn_rx+0x94>
   11b6c:	a201      	add	r2, pc, #4	; (adr r2, 11b74 <ull_conn_rx+0x570>)
   11b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   11b72:	bf00      	nop
   11b74:	0001209b 	.word	0x0001209b
   11b78:	00011699 	.word	0x00011699
   11b7c:	00011699 	.word	0x00011699
   11b80:	00011699 	.word	0x00011699
   11b84:	00011699 	.word	0x00011699
   11b88:	00011699 	.word	0x00011699
   11b8c:	00011699 	.word	0x00011699
   11b90:	00011699 	.word	0x00011699
   11b94:	00011699 	.word	0x00011699
   11b98:	00011699 	.word	0x00011699
   11b9c:	00011699 	.word	0x00011699
   11ba0:	00011699 	.word	0x00011699
   11ba4:	0001202d 	.word	0x0001202d
   11ba8:	00011699 	.word	0x00011699
   11bac:	00011699 	.word	0x00011699
   11bb0:	00011699 	.word	0x00011699
   11bb4:	00011699 	.word	0x00011699
   11bb8:	00011fef 	.word	0x00011fef
   11bbc:	00011699 	.word	0x00011699
   11bc0:	000120db 	.word	0x000120db
		if (!conn->lll.role ||
   11bc4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11bc8:	2b00      	cmp	r3, #0
   11bca:	f6bf ad99 	bge.w	11700 <ull_conn_rx+0xfc>
   11bce:	7f6b      	ldrb	r3, [r5, #29]
   11bd0:	2b08      	cmp	r3, #8
   11bd2:	f47f ad95 	bne.w	11700 <ull_conn_rx+0xfc>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   11bd6:	f8b5 6025 	ldrh.w	r6, [r5, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   11bda:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   11bdc:	1af3      	subs	r3, r6, r3
   11bde:	041f      	lsls	r7, r3, #16
   11be0:	f100 85da 	bmi.w	12798 <ull_conn_rx+0x1194>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11be4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11be8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   11bec:	1a9b      	subs	r3, r3, r2
   11bee:	f003 0303 	and.w	r3, r3, #3
   11bf2:	2b02      	cmp	r3, #2
   11bf4:	f000 8658 	beq.w	128a8 <ull_conn_rx+0x12a4>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   11bf8:	2205      	movs	r2, #5
   11bfa:	f105 0120 	add.w	r1, r5, #32
   11bfe:	f104 00e9 	add.w	r0, r4, #233	; 0xe9
   11c02:	f00b ff03 	bl	1da0c <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   11c06:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_ack -= 2U;
   11c0a:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
	conn->llcp.chan_map.instant = instant;
   11c0e:	f8a4 60ee 	strh.w	r6, [r4, #238]	; 0xee
	conn->llcp.chan_map.initiate = 0U;
   11c12:	f36f 0200 	bfc	r2, #0, #1
   11c16:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_CHAN_MAP;
   11c1a:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   11c1c:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11c1e:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   11c20:	f884 10e6 	strb.w	r1, [r4, #230]	; 0xe6
	conn->llcp_ack -= 2U;
   11c24:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	int nack = 0;
   11c28:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11c2a:	712a      	strb	r2, [r5, #4]
		if (err) {
   11c2c:	e537      	b.n	1169e <ull_conn_rx+0x9a>
   11c2e:	bf00      	nop
   11c30:	20001f50 	.word	0x20001f50
   11c34:	20001fdc 	.word	0x20001fdc
		if (!conn->lll.role ||
   11c38:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11c3c:	2b00      	cmp	r3, #0
   11c3e:	f6bf ad5f 	bge.w	11700 <ull_conn_rx+0xfc>
   11c42:	7f6e      	ldrb	r6, [r5, #29]
   11c44:	2e01      	cmp	r6, #1
   11c46:	f47f ad5b 	bne.w	11700 <ull_conn_rx+0xfc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11c4a:	48d7      	ldr	r0, [pc, #860]	; (11fa8 <ull_conn_rx+0x9a4>)
   11c4c:	f7f9 fd68 	bl	b720 <mem_acquire>
		if (!tx) {
   11c50:	2800      	cmp	r0, #0
   11c52:	f000 8273 	beq.w	1213c <ull_conn_rx+0xb38>
	conn->llcp_enc.pause_rx = 1U;
   11c56:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   11c5a:	f023 0305 	bic.w	r3, r3, #5
   11c5e:	f043 0305 	orr.w	r3, r3, #5
   11c62:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   11c66:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   11c6a:	f36f 03c3 	bfc	r3, #3, #1
   11c6e:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c72:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11c74:	7146      	strb	r6, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c76:	f043 0303 	orr.w	r3, r3, #3
   11c7a:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   11c7c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   11c80:	220b      	movs	r2, #11
   11c82:	71c2      	strb	r2, [r0, #7]
	if (
   11c84:	2b00      	cmp	r3, #0
   11c86:	f000 82a9 	beq.w	121dc <ull_conn_rx+0xbd8>
	    !conn->llcp_enc.pause_tx &&
   11c8a:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   11c8e:	0791      	lsls	r1, r2, #30
   11c90:	f100 82a4 	bmi.w	121dc <ull_conn_rx+0xbd8>
	    !conn->llcp_phy.pause_tx &&
   11c94:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   11c98:	07d2      	lsls	r2, r2, #31
   11c9a:	f100 829f 	bmi.w	121dc <ull_conn_rx+0xbd8>
		if (conn->tx_head == conn->tx_data) {
   11c9e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   11ca2:	4293      	cmp	r3, r2
   11ca4:	f000 871c 	beq.w	12ae0 <ull_conn_rx+0x14dc>
		} else if (!conn->tx_ctrl) {
   11ca8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   11cac:	2a00      	cmp	r2, #0
   11cae:	f000 8744 	beq.w	12b3a <ull_conn_rx+0x1536>
	tx->next = conn->tx_ctrl_last->next;
   11cb2:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   11cb6:	681a      	ldr	r2, [r3, #0]
   11cb8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   11cba:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   11cbc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   11cc0:	6803      	ldr	r3, [r0, #0]
   11cc2:	2b00      	cmp	r3, #0
   11cc4:	f47f ace8 	bne.w	11698 <ull_conn_rx+0x94>
   11cc8:	e553      	b.n	11772 <ull_conn_rx+0x16e>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   11cca:	7f6b      	ldrb	r3, [r5, #29]
   11ccc:	2b09      	cmp	r3, #9
   11cce:	f47f ad17 	bne.w	11700 <ull_conn_rx+0xfc>
   11cd2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11cd4:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   11cd6:	49b5      	ldr	r1, [pc, #724]	; (11fac <ull_conn_rx+0x9a8>)
   11cd8:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11cdc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   11ce0:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11ce2:	400b      	ands	r3, r1
   11ce4:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11ce8:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   11cec:	4013      	ands	r3, r2
   11cee:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   11cf2:	6a2e      	ldr	r6, [r5, #32]
   11cf4:	6a6d      	ldr	r5, [r5, #36]	; 0x24
		feat_land_octet0(feat_get(&rsp->features[0]), ll_feat_get());
   11cf6:	f7fc fc05 	bl	e504 <ll_feat_get>
	feat &= LL_FEAT_BIT_MASK;
   11cfa:	4aac      	ldr	r2, [pc, #688]	; (11fac <ull_conn_rx+0x9a8>)
	conn->llcp_feature.ack = conn->llcp_feature.req;
   11cfc:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   11d00:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
	feat &= LL_FEAT_BIT_MASK;
   11d04:	4332      	orrs	r2, r6
	feat_result = feat_to_keep & feat_octet0;
   11d06:	4002      	ands	r2, r0
   11d08:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
	feat_result &= 0xFF;
   11d0c:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	conn->common.fex_valid = 1U;
   11d10:	f894 10d8 	ldrb.w	r1, [r4, #216]	; 0xd8
   11d14:	431a      	orrs	r2, r3
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11d16:	f042 6207 	orr.w	r2, r2, #141557760	; 0x8700000
	feat_result &= 0xFF;
   11d1a:	2300      	movs	r3, #0
   11d1c:	f005 050f 	and.w	r5, r5, #15
	conn->common.fex_valid = 1U;
   11d20:	f041 0101 	orr.w	r1, r1, #1
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11d24:	f442 2203 	orr.w	r2, r2, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   11d28:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
	conn->common.fex_valid = 1U;
   11d2c:	f884 10d8 	strb.w	r1, [r4, #216]	; 0xd8
	conn->llcp_feature.features_peer =
   11d30:	f8c4 2130 	str.w	r2, [r4, #304]	; 0x130
	conn->procedure_expire = 0U;
   11d34:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   11d38:	4618      	mov	r0, r3
}
   11d3a:	e4b0      	b.n	1169e <ull_conn_rx+0x9a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   11d3c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11d40:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   11d44:	4299      	cmp	r1, r3
   11d46:	f43f acdb 	beq.w	11700 <ull_conn_rx+0xfc>
   11d4a:	f894 10e6 	ldrb.w	r1, [r4, #230]	; 0xe6
   11d4e:	2903      	cmp	r1, #3
   11d50:	f47f acd6 	bne.w	11700 <ull_conn_rx+0xfc>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   11d54:	7f69      	ldrb	r1, [r5, #29]
   11d56:	2901      	cmp	r1, #1
   11d58:	f47f acd2 	bne.w	11700 <ull_conn_rx+0xfc>
		if (conn->lll.role) {
   11d5c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   11d60:	2900      	cmp	r1, #0
   11d62:	f2c0 84d7 	blt.w	12714 <ull_conn_rx+0x1110>
			conn->llcp_enc.pause_rx = 0U;
   11d66:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
			conn->llcp_ack = conn->llcp_req;
   11d6a:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
			conn->procedure_expire = 0U;
   11d6e:	2100      	movs	r1, #0
			conn->llcp_enc.pause_rx = 0U;
   11d70:	f022 0203 	bic.w	r2, r2, #3
   11d74:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
			conn->procedure_expire = 0U;
   11d78:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		if (conn->llcp_enc.refresh) {
   11d7c:	0750      	lsls	r0, r2, #29
   11d7e:	f57f ac8d 	bpl.w	1169c <ull_conn_rx+0x98>
			conn->llcp_enc.refresh = 0U;
   11d82:	f36f 0282 	bfc	r2, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   11d86:	2317      	movs	r3, #23
			conn->llcp_enc.refresh = 0U;
   11d88:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	int nack = 0;
   11d8c:	2000      	movs	r0, #0
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   11d8e:	712b      	strb	r3, [r5, #4]
   11d90:	e485      	b.n	1169e <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   11d92:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11d96:	2b00      	cmp	r3, #0
   11d98:	f6bf acb2 	bge.w	11700 <ull_conn_rx+0xfc>
   11d9c:	f895 901d 	ldrb.w	r9, [r5, #29]
   11da0:	f1b9 0f09 	cmp.w	r9, #9
   11da4:	f47f acac 	bne.w	11700 <ull_conn_rx+0xfc>
	if (conn->common.txn_lock) {
   11da8:	f894 00d8 	ldrb.w	r0, [r4, #216]	; 0xd8
   11dac:	f010 0602 	ands.w	r6, r0, #2
   11db0:	f47f ac72 	bne.w	11698 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11db4:	487c      	ldr	r0, [pc, #496]	; (11fa8 <ull_conn_rx+0x9a4>)
   11db6:	f7f9 fcb3 	bl	b720 <mem_acquire>
	if (!tx) {
   11dba:	4607      	mov	r7, r0
   11dbc:	2800      	cmp	r0, #0
   11dbe:	f000 81bd 	beq.w	1213c <ull_conn_rx+0xb38>
	conn->common.txn_lock = 1U;
   11dc2:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	feat &= LL_FEAT_BIT_MASK;
   11dc6:	4979      	ldr	r1, [pc, #484]	; (11fac <ull_conn_rx+0x9a8>)
	conn->common.txn_lock = 1U;
   11dc8:	f043 0302 	orr.w	r3, r3, #2
   11dcc:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
   11dd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   11dd2:	6a28      	ldr	r0, [r5, #32]
	feat &= LL_FEAT_BIT_MASK;
   11dd4:	f003 020f 	and.w	r2, r3, #15
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   11dd8:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	feat &= LL_FEAT_BIT_MASK;
   11ddc:	4301      	orrs	r1, r0
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   11dde:	400b      	ands	r3, r1
   11de0:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
   11de4:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   11de8:	4013      	ands	r3, r2
   11dea:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
   11dee:	f8d5 a024 	ldr.w	sl, [r5, #36]	; 0x24
   11df2:	f8d5 8020 	ldr.w	r8, [r5, #32]
		feat_land_octet0(feat_get(&req->features[0]), ll_feat_get());
   11df6:	f7fc fb85 	bl	e504 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   11dfa:	f00a 030f 	and.w	r3, sl, #15
	conn->llcp_feature.features_peer =
   11dfe:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
	feat &= LL_FEAT_BIT_MASK;
   11e02:	4b6a      	ldr	r3, [pc, #424]	; (11fac <ull_conn_rx+0x9a8>)
   11e04:	ea48 0303 	orr.w	r3, r8, r3
	feat_result = feat_to_keep & feat_octet0;
   11e08:	4003      	ands	r3, r0
	feat_result &= 0xFF;
   11e0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   11e0e:	f028 08ff 	bic.w	r8, r8, #255	; 0xff
   11e12:	ea43 0308 	orr.w	r3, r3, r8
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11e16:	f043 6307 	orr.w	r3, r3, #141557760	; 0x8700000
   11e1a:	f443 2303 	orr.w	r3, r3, #536576	; 0x83000
	conn->llcp_feature.features_peer =
   11e1e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
	conn->common.fex_valid = 1U;
   11e22:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   11e26:	f043 0301 	orr.w	r3, r3, #1
   11e2a:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e2e:	793b      	ldrb	r3, [r7, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   11e30:	f887 9005 	strb.w	r9, [r7, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e34:	f043 0303 	orr.w	r3, r3, #3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   11e38:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e3a:	713b      	strb	r3, [r7, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   11e3c:	18b8      	adds	r0, r7, r2
   11e3e:	4631      	mov	r1, r6
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11e40:	f887 9007 	strb.w	r9, [r7, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   11e44:	f00b fded 	bl	1da22 <memset>
	feat = feat_land_octet0(ll_feat_get(),
   11e48:	f7fc fb5c 	bl	e504 <ll_feat_get>
	feat_result = feat_to_keep & feat_octet0;
   11e4c:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	dst[1] = val >> 8;
   11e50:	737e      	strb	r6, [r7, #13]
	feat = feat_land_octet0(ll_feat_get(),
   11e52:	4603      	mov	r3, r0
	feat_result = feat_to_keep & feat_octet0;
   11e54:	401a      	ands	r2, r3
	feat_result &= 0xFF;
   11e56:	f002 02ff 	and.w	r2, r2, #255	; 0xff
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   11e5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   11e5e:	4313      	orrs	r3, r2
	sys_put_le16(val >> 16, &dst[2]);
   11e60:	0c1a      	lsrs	r2, r3, #16
   11e62:	f001 010f 	and.w	r1, r1, #15
	dst[0] = val;
   11e66:	723b      	strb	r3, [r7, #8]
   11e68:	72ba      	strb	r2, [r7, #10]
	dst[1] = val >> 8;
   11e6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
   11e6e:	0a12      	lsrs	r2, r2, #8
	dst[0] = val;
   11e70:	7339      	strb	r1, [r7, #12]
	ctrl_tx_sec_enqueue(conn, tx);
   11e72:	4620      	mov	r0, r4
	dst[1] = val >> 8;
   11e74:	727b      	strb	r3, [r7, #9]
	dst[0] = val;
   11e76:	73be      	strb	r6, [r7, #14]
	dst[1] = val >> 8;
   11e78:	73fe      	strb	r6, [r7, #15]
   11e7a:	72fa      	strb	r2, [r7, #11]
   11e7c:	4639      	mov	r1, r7
   11e7e:	f7fe fbc5 	bl	1060c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   11e82:	2301      	movs	r3, #1
   11e84:	712b      	strb	r3, [r5, #4]
	return 0;
   11e86:	4630      	mov	r0, r6
   11e88:	e409      	b.n	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(unknown_rsp) != pdu_rx->len) {
   11e8a:	7f6b      	ldrb	r3, [r5, #29]
   11e8c:	2b02      	cmp	r3, #2
   11e8e:	f47f ac37 	bne.w	11700 <ull_conn_rx+0xfc>
		} else if ((conn->llcp_conn_param.ack !=
   11e92:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
			    conn->llcp_conn_param.req) &&
   11e96:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
		} else if ((conn->llcp_conn_param.ack !=
   11e9a:	4293      	cmp	r3, r2
			   (llctrl->unknown_rsp.type ==
   11e9c:	f895 3020 	ldrb.w	r3, [r5, #32]
		} else if ((conn->llcp_conn_param.ack !=
   11ea0:	d002      	beq.n	11ea8 <ull_conn_rx+0x8a4>
			    conn->llcp_conn_param.req) &&
   11ea2:	2b0f      	cmp	r3, #15
   11ea4:	f000 835b 	beq.w	1255e <ull_conn_rx+0xf5a>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   11ea8:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   11eac:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   11eb0:	4291      	cmp	r1, r2
   11eb2:	d002      	beq.n	11eba <ull_conn_rx+0x8b6>
   11eb4:	2b14      	cmp	r3, #20
   11eb6:	f000 83cc 	beq.w	12652 <ull_conn_rx+0x104e>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   11eba:	f894 21bc 	ldrb.w	r2, [r4, #444]	; 0x1bc
   11ebe:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
   11ec2:	4291      	cmp	r1, r2
   11ec4:	d002      	beq.n	11ecc <ull_conn_rx+0x8c8>
   11ec6:	2b16      	cmp	r3, #22
   11ec8:	f000 843a 	beq.w	12740 <ull_conn_rx+0x113c>
			switch (llctrl->unknown_rsp.type) {
   11ecc:	2b12      	cmp	r3, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11ece:	bf04      	itt	eq
   11ed0:	2301      	moveq	r3, #1
   11ed2:	712b      	strbeq	r3, [r5, #4]
				break;
   11ed4:	e586      	b.n	119e4 <ull_conn_rx+0x3e0>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   11ed6:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11eda:	2b00      	cmp	r3, #0
   11edc:	f6bf ac10 	bge.w	11700 <ull_conn_rx+0xfc>
   11ee0:	7f6b      	ldrb	r3, [r5, #29]
   11ee2:	2b05      	cmp	r3, #5
   11ee4:	f47f ac0c 	bne.w	11700 <ull_conn_rx+0xfc>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   11ee8:	f895 2020 	ldrb.w	r2, [r5, #32]
   11eec:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   11ef0:	4313      	orrs	r3, r2
   11ef2:	f013 0307 	ands.w	r3, r3, #7
   11ef6:	f040 845f 	bne.w	127b8 <ull_conn_rx+0x11b4>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11efa:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   11efe:	f894 21bd 	ldrb.w	r2, [r4, #445]	; 0x1bd
   11f02:	428a      	cmp	r2, r1
   11f04:	f43f abc8 	beq.w	11698 <ull_conn_rx+0x94>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   11f08:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   11f0c:	f002 0203 	and.w	r2, r2, #3
   11f10:	2a02      	cmp	r2, #2
   11f12:	f47f abc1 	bne.w	11698 <ull_conn_rx+0x94>
		conn->llcp_phy.pause_tx = 0U;
   11f16:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11f1a:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11f1e:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
		conn->procedure_expire = 0U;
   11f22:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
		conn->llcp_phy.pause_tx = 0U;
   11f26:	f363 0200 	bfi	r2, r3, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11f2a:	4608      	mov	r0, r1
   11f2c:	f361 1006 	bfi	r0, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11f30:	f884 21bf 	strb.w	r2, [r4, #447]	; 0x1bf
		if (!conn->llcp_phy.cmd) {
   11f34:	f012 0204 	ands.w	r2, r2, #4
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11f38:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
   11f3c:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   11f40:	f040 85c1 	bne.w	12ac6 <ull_conn_rx+0x14c2>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   11f44:	6833      	ldr	r3, [r6, #0]
   11f46:	2101      	movs	r1, #1
   11f48:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   11f4a:	4610      	mov	r0, r2
   11f4c:	f7ff bba7 	b.w	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(phy_req) != pdu_rx->len) {
   11f50:	7f6b      	ldrb	r3, [r5, #29]
   11f52:	2b03      	cmp	r3, #3
   11f54:	f47f abd4 	bne.w	11700 <ull_conn_rx+0xfc>
		if (!conn->lll.role) {
   11f58:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11f5c:	2b00      	cmp	r3, #0
   11f5e:	f2c0 827d 	blt.w	1245c <ull_conn_rx+0xe58>
			if ((conn->llcp_phy.ack !=
   11f62:	f894 11bd 	ldrb.w	r1, [r4, #445]	; 0x1bd
			     conn->llcp_phy.req) &&
   11f66:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
			if ((conn->llcp_phy.ack !=
   11f6a:	4281      	cmp	r1, r0
   11f6c:	d007      	beq.n	11f7e <ull_conn_rx+0x97a>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   11f6e:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   11f72:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   11f76:	3a01      	subs	r2, #1
   11f78:	2a02      	cmp	r2, #2
   11f7a:	f240 83c5 	bls.w	12708 <ull_conn_rx+0x1104>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   11f7e:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   11f82:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   11f86:	1a9b      	subs	r3, r3, r2
   11f88:	f003 0303 	and.w	r3, r3, #3
   11f8c:	2b02      	cmp	r3, #2
   11f8e:	f000 835a 	beq.w	12646 <ull_conn_rx+0x1042>
				     LLCP_ENCRYPTION)) ||
   11f92:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   11f96:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   11f9a:	429a      	cmp	r2, r3
   11f9c:	f000 8371 	beq.w	12682 <ull_conn_rx+0x107e>
				nack = reject_ext_ind_send(conn, *rx,
   11fa0:	232a      	movs	r3, #42	; 0x2a
   11fa2:	2216      	movs	r2, #22
   11fa4:	e53b      	b.n	11a1e <ull_conn_rx+0x41a>
   11fa6:	bf00      	nop
   11fa8:	20001fdc 	.word	0x20001fdc
   11fac:	087830d0 	.word	0x087830d0
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   11fb0:	7f6b      	ldrb	r3, [r5, #29]
   11fb2:	2b01      	cmp	r3, #1
   11fb4:	f47f aba4 	bne.w	11700 <ull_conn_rx+0xfc>
	} else if (!conn->lll.role) {
   11fb8:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   11fbc:	2b00      	cmp	r3, #0
   11fbe:	f2c0 80dd 	blt.w	1217c <ull_conn_rx+0xb78>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11fc2:	48cd      	ldr	r0, [pc, #820]	; (122f8 <ull_conn_rx+0xcf4>)
   11fc4:	f7f9 fbac 	bl	b720 <mem_acquire>
		if (!tx) {
   11fc8:	2800      	cmp	r0, #0
   11fca:	f000 80b7 	beq.w	1213c <ull_conn_rx+0xb38>
	conn->llcp_enc.pause_rx = 1U;
   11fce:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->lll.enc_rx = 0;
   11fd2:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
	conn->llcp_enc.pause_rx = 1U;
   11fd6:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   11fda:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   11fde:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11fe2:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   11fe4:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11fe8:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11fea:	7142      	strb	r2, [r0, #5]
   11fec:	e643      	b.n	11c76 <ull_conn_rx+0x672>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   11fee:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
   11ff2:	f894 31ad 	ldrb.w	r3, [r4, #429]	; 0x1ad
   11ff6:	4293      	cmp	r3, r2
   11ff8:	f43f ab4e 	beq.w	11698 <ull_conn_rx+0x94>
	conn->procedure_expire = 0U;
   11ffc:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11ffe:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   12000:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
	conn->procedure_expire = 0U;
   12004:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   12008:	7769      	strb	r1, [r5, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   1200a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1200e:	f8b4 0058 	ldrh.w	r0, [r4, #88]	; 0x58
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   12012:	842a      	strh	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   12014:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   12016:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1201a:	77e9      	strb	r1, [r5, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1201c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
   12020:	8469      	strh	r1, [r5, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   12022:	84a8      	strh	r0, [r5, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   12024:	84ea      	strh	r2, [r5, #38]	; 0x26
	int nack = 0;
   12026:	4618      	mov	r0, r3
   12028:	f7ff bb39 	b.w	1169e <ull_conn_rx+0x9a>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   1202c:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   12030:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   12034:	4293      	cmp	r3, r2
   12036:	f43f ab2f 	beq.w	11698 <ull_conn_rx+0x94>
	if (!lll->role && (rej_ext_ind->error_code ==
   1203a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1203e:	2b00      	cmp	r3, #0
   12040:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   12044:	f2c0 81ff 	blt.w	12446 <ull_conn_rx+0xe42>
   12048:	2b1a      	cmp	r3, #26
   1204a:	f000 85a3 	beq.w	12b94 <ull_conn_rx+0x1590>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   1204e:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   12052:	f001 0007 	and.w	r0, r1, #7
   12056:	2804      	cmp	r0, #4
   12058:	d106      	bne.n	12068 <ull_conn_rx+0xa64>
	conn_upd_curr = NULL;
   1205a:	48a8      	ldr	r0, [pc, #672]	; (122fc <ull_conn_rx+0xcf8>)
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1205c:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   12060:	2200      	movs	r2, #0
   12062:	6002      	str	r2, [r0, #0]
		conn->procedure_expire = 0U;
   12064:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	if (!conn->llcp_conn_param.cmd) {
   12068:	070a      	lsls	r2, r1, #28
   1206a:	f57f ab15 	bpl.w	11698 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1206e:	2216      	movs	r2, #22
   12070:	712a      	strb	r2, [r5, #4]
	cu->status = rej_ext_ind->error_code;
   12072:	772b      	strb	r3, [r5, #28]
	cu->interval = lll->interval;
   12074:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
	cu->timeout = conn->supervision_reload *
   12076:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
	cu->latency = lll->latency;
   1207a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
   1207c:	8429      	strh	r1, [r5, #32]
		      lll->interval * 125U / 1000;
   1207e:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   12080:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   12084:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   12088:	83ea      	strh	r2, [r5, #30]
		      lll->interval * 125U / 1000;
   1208a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1208e:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   12092:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   12094:	846b      	strh	r3, [r5, #34]	; 0x22
	if (err) {
   12096:	f7ff bb02 	b.w	1169e <ull_conn_rx+0x9a>
		if ((conn->llcp_ack != conn->llcp_req) &&
   1209a:	f894 10e4 	ldrb.w	r1, [r4, #228]	; 0xe4
   1209e:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   120a2:	428b      	cmp	r3, r1
   120a4:	f43f aaf8 	beq.w	11698 <ull_conn_rx+0x94>
   120a8:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   120ac:	2b03      	cmp	r3, #3
   120ae:	f47f aaf3 	bne.w	11698 <ull_conn_rx+0x94>
	conn->llcp_enc.pause_rx = 0U;
   120b2:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   120b6:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   120ba:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   120bc:	f022 0203 	bic.w	r2, r2, #3
   120c0:	f884 2166 	strb.w	r2, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   120c4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   120c8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   120cc:	f885 2020 	strb.w	r2, [r5, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   120d0:	210d      	movs	r1, #13
   120d2:	77e9      	strb	r1, [r5, #31]
	int nack = 0;
   120d4:	4618      	mov	r0, r3
   120d6:	f7ff bae2 	b.w	1169e <ull_conn_rx+0x9a>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   120da:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   120de:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   120e2:	428b      	cmp	r3, r1
   120e4:	f43f aad8 	beq.w	11698 <ull_conn_rx+0x94>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   120e8:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
   120ec:	2a23      	cmp	r2, #35	; 0x23
   120ee:	d012      	beq.n	12116 <ull_conn_rx+0xb12>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   120f0:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   120f4:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   120f8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		conn->llcp_phy.pause_tx = 0U;
   120fc:	f36f 0100 	bfc	r1, #0, #1
   12100:	f884 11bf 	strb.w	r1, [r4, #447]	; 0x1bf
		conn->procedure_expire = 0U;
   12104:	2100      	movs	r1, #0
   12106:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1210a:	f3c3 0102 	ubfx	r1, r3, #0, #3
   1210e:	f361 1306 	bfi	r3, r1, #4, #3
   12112:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
	if (!conn->llcp_phy.cmd) {
   12116:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1211a:	0759      	lsls	r1, r3, #29
   1211c:	f57f aabc 	bpl.w	11698 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12120:	231a      	movs	r3, #26
   12122:	712b      	strb	r3, [r5, #4]
	p->status = rej_ext_ind->error_code;
   12124:	772a      	strb	r2, [r5, #28]
   12126:	e4b8      	b.n	11a9a <ull_conn_rx+0x496>
			tx->next = conn->tx_head;
   12128:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1212a:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1212e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12132:	2a00      	cmp	r2, #0
   12134:	f47f aab0 	bne.w	11698 <ull_conn_rx+0x94>
   12138:	f7ff bb1b 	b.w	11772 <ull_conn_rx+0x16e>
		*err = -ENOBUFS;
   1213c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   12140:	f7ff baad 	b.w	1169e <ull_conn_rx+0x9a>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   12144:	7f6b      	ldrb	r3, [r5, #29]
   12146:	2b01      	cmp	r3, #1
   12148:	f47f aada 	bne.w	11700 <ull_conn_rx+0xfc>
   1214c:	e739      	b.n	11fc2 <ull_conn_rx+0x9be>
			conn->tx_data = conn->tx_data->next;
   1214e:	6813      	ldr	r3, [r2, #0]
   12150:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12154:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   12158:	2b00      	cmp	r3, #0
   1215a:	f47f ab00 	bne.w	1175e <ull_conn_rx+0x15a>
			tx->next = conn->tx_head->next;
   1215e:	6813      	ldr	r3, [r2, #0]
   12160:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   12162:	6010      	str	r0, [r2, #0]
	if (!tx->next) {
   12164:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   12166:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   1216a:	2a00      	cmp	r2, #0
   1216c:	f47f aa94 	bne.w	11698 <ull_conn_rx+0x94>
   12170:	f7ff baff 	b.w	11772 <ull_conn_rx+0x16e>
		if (PDU_DATA_LLCTRL_LEN(pause_enc_rsp) != pdu_rx->len) {
   12174:	7f6b      	ldrb	r3, [r5, #29]
   12176:	2b01      	cmp	r3, #1
   12178:	f47f aac2 	bne.w	11700 <ull_conn_rx+0xfc>
		conn->lll.enc_tx = 0;
   1217c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   12180:	f36f 1304 	bfc	r3, #4, #1
   12184:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
		goto pause_enc_rsp_send_exit;
   12188:	f7ff ba86 	b.w	11698 <ull_conn_rx+0x94>
		if (!conn->lll.role) {
   1218c:	f994 0039 	ldrsb.w	r0, [r4, #57]	; 0x39
   12190:	2800      	cmp	r0, #0
   12192:	f2c0 80b5 	blt.w	12300 <ull_conn_rx+0xcfc>
					conn->llcp_conn_param.ack) &&
   12196:	f894 c185 	ldrb.w	ip, [r4, #389]	; 0x185
			if ((conn->llcp_conn_param.req !=
   1219a:	f894 0184 	ldrb.w	r0, [r4, #388]	; 0x184
   1219e:	4560      	cmp	r0, ip
   121a0:	d009      	beq.n	121b6 <ull_conn_rx+0xbb2>
			    ((conn->llcp_conn_param.state ==
   121a2:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
					conn->llcp_conn_param.ack) &&
   121a6:	f010 0007 	ands.w	r0, r0, #7
   121aa:	f000 8267 	beq.w	1267c <ull_conn_rx+0x1078>
			      LLCP_CPR_STATE_REQ) ||
   121ae:	3804      	subs	r0, #4
   121b0:	2801      	cmp	r0, #1
   121b2:	f240 8263 	bls.w	1267c <ull_conn_rx+0x1078>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   121b6:	f894 00e4 	ldrb.w	r0, [r4, #228]	; 0xe4
   121ba:	f894 60e5 	ldrb.w	r6, [r4, #229]	; 0xe5
   121be:	1b80      	subs	r0, r0, r6
   121c0:	f000 0003 	and.w	r0, r0, #3
   121c4:	2802      	cmp	r0, #2
   121c6:	f000 83bd 	beq.w	12944 <ull_conn_rx+0x1340>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   121ca:	f894 61bc 	ldrb.w	r6, [r4, #444]	; 0x1bc
   121ce:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   121d2:	4286      	cmp	r6, r0
   121d4:	f000 83c3 	beq.w	1295e <ull_conn_rx+0x135a>
				nack = reject_ext_ind_send(conn, *rx,
   121d8:	232a      	movs	r3, #42	; 0x2a
   121da:	e41f      	b.n	11a1c <ull_conn_rx+0x418>
		if (!conn->tx_ctrl) {
   121dc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   121e0:	2a00      	cmp	r2, #0
   121e2:	f47f ad66 	bne.w	11cb2 <ull_conn_rx+0x6ae>
			tx->next = conn->tx_head;
   121e6:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   121e8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   121ec:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   121f0:	e566      	b.n	11cc0 <ull_conn_rx+0x6bc>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   121f2:	7913      	ldrb	r3, [r2, #4]
   121f4:	f003 0303 	and.w	r3, r3, #3
   121f8:	2b03      	cmp	r3, #3
   121fa:	f000 82c5 	beq.w	12788 <ull_conn_rx+0x1184>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   121fe:	f8c4 21c8 	str.w	r2, [r4, #456]	; 0x1c8
   12202:	f7ff baae 	b.w	11762 <ull_conn_rx+0x15e>
	if (conn->common.txn_lock) {
   12206:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   1220a:	079b      	lsls	r3, r3, #30
   1220c:	f53f aa44 	bmi.w	11698 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12210:	4839      	ldr	r0, [pc, #228]	; (122f8 <ull_conn_rx+0xcf4>)
   12212:	f7f9 fa85 	bl	b720 <mem_acquire>
	if (!tx) {
   12216:	4603      	mov	r3, r0
   12218:	2800      	cmp	r0, #0
   1221a:	d08f      	beq.n	1213c <ull_conn_rx+0xb38>
	conn->common.txn_lock = 1U;
   1221c:	f894 20d8 	ldrb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   12220:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
	eff_rx_octets = conn->lll.max_rx_octets;
   12224:	f8b4 805a 	ldrh.w	r8, [r4, #90]	; 0x5a
	eff_tx_octets = conn->lll.max_tx_octets;
   12228:	f8b4 9058 	ldrh.w	r9, [r4, #88]	; 0x58
	eff_rx_time = conn->lll.max_rx_time;
   1222c:	f8b4 a05e 	ldrh.w	sl, [r4, #94]	; 0x5e
	eff_tx_time = conn->lll.max_tx_time;
   12230:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	conn->common.txn_lock = 1U;
   12234:	f042 0202 	orr.w	r2, r2, #2
   12238:	f884 20d8 	strb.w	r2, [r4, #216]	; 0xd8
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1223c:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
	if (/* Local idle, and Peer request then complete the Peer procedure
   12240:	428a      	cmp	r2, r1
   12242:	f040 8497 	bne.w	12b74 <ull_conn_rx+0x1570>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   12246:	8c29      	ldrh	r1, [r5, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   12248:	291a      	cmp	r1, #26
   1224a:	f240 8261 	bls.w	12710 <ull_conn_rx+0x110c>
			eff_tx_octets = MIN(max_rx_octets,
   1224e:	f8b4 00d2 	ldrh.w	r0, [r4, #210]	; 0xd2
   12252:	4281      	cmp	r1, r0
   12254:	bf28      	it	cs
   12256:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   12258:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   1225a:	f8b5 c026 	ldrh.w	ip, [r5, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   1225e:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   12260:	8c68      	ldrh	r0, [r5, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   12262:	bf34      	ite	cc
   12264:	46c6      	movcc	lr, r8
   12266:	f04f 0e1b 	movcs.w	lr, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1226a:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1226e:	bf34      	ite	cc
   12270:	4658      	movcc	r0, fp
   12272:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   12276:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
   1227a:	bf34      	ite	cc
   1227c:	46d4      	movcc	ip, sl
   1227e:	f44f 7ca4 	movcs.w	ip, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   12282:	45c6      	cmp	lr, r8
   12284:	f000 8314 	beq.w	128b0 <ull_conn_rx+0x12ac>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   12288:	3a01      	subs	r2, #1
   1228a:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.rx_octets = eff_rx_octets;
   1228e:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
			conn->llcp_length.tx_octets = eff_tx_octets;
   12292:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
			conn->llcp_length.rx_time = eff_rx_time;
   12296:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
			conn->llcp_length.tx_time = eff_tx_time;
   1229a:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
			if (tx) {
   1229e:	2b00      	cmp	r3, #0
   122a0:	f000 833f 	beq.w	12922 <ull_conn_rx+0x131e>
				conn->llcp_length.state =
   122a4:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
   122a8:	2505      	movs	r5, #5
   122aa:	f365 0202 	bfi	r2, r5, #0, #3
   122ae:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			link->mem = conn->llcp_rx;
   122b2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   122b6:	607a      	str	r2, [r7, #4]
			(*rx)->hdr.link = link;
   122b8:	6832      	ldr	r2, [r6, #0]
   122ba:	6017      	str	r7, [r2, #0]
			conn->llcp_rx = *rx;
   122bc:	6832      	ldr	r2, [r6, #0]
   122be:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
			*rx = NULL;
   122c2:	2200      	movs	r2, #0
   122c4:	6032      	str	r2, [r6, #0]
	if (tx) {
   122c6:	2b00      	cmp	r3, #0
   122c8:	f43f a9e8 	beq.w	1169c <ull_conn_rx+0x98>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   122cc:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   122ce:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   122d0:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   122d4:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   122d6:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   122d8:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   122da:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   122dc:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   122de:	f8a3 e008 	strh.w	lr, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   122e2:	f8a3 c00a 	strh.w	ip, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   122e6:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   122e8:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   122ea:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   122ec:	f7fe f98e 	bl	1060c <ctrl_tx_sec_enqueue>
	return 0;
   122f0:	2000      	movs	r0, #0
}
   122f2:	f7ff b9d4 	b.w	1169e <ull_conn_rx+0x9a>
   122f6:	bf00      	nop
   122f8:	20001fdc 	.word	0x20001fdc
   122fc:	20001f50 	.word	0x20001f50
			    conn->llcp_conn_param.ack) ||
   12300:	f894 6185 	ldrb.w	r6, [r4, #389]	; 0x185
		} else if ((conn->llcp_conn_param.req ==
   12304:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   12308:	42b2      	cmp	r2, r6
   1230a:	d004      	beq.n	12316 <ull_conn_rx+0xd12>
			    conn->llcp_conn_param.ack) ||
   1230c:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   12310:	0790      	lsls	r0, r2, #30
   12312:	f47f a9c1 	bne.w	11698 <ull_conn_rx+0x94>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   12316:	f8b5 a020 	ldrh.w	sl, [r5, #32]
   1231a:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1231e:	2a05      	cmp	r2, #5
   12320:	f240 8099 	bls.w	12456 <ull_conn_rx+0xe52>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   12324:	f8b5 9022 	ldrh.w	r9, [r5, #34]	; 0x22
   12328:	fa1f f089 	uxth.w	r0, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1232c:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12330:	f200 8091 	bhi.w	12456 <ull_conn_rx+0xe52>
			    (interval_max > 3200) ||
   12334:	4282      	cmp	r2, r0
   12336:	f200 808e 	bhi.w	12456 <ull_conn_rx+0xe52>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1233a:	f8b5 8024 	ldrh.w	r8, [r5, #36]	; 0x24
   1233e:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   12342:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   12346:	f080 8086 	bcs.w	12456 <ull_conn_rx+0xe52>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   1234a:	f8b5 e026 	ldrh.w	lr, [r5, #38]	; 0x26
   1234e:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   12352:	f1a2 070a 	sub.w	r7, r2, #10
   12356:	f640 4b76 	movw	fp, #3190	; 0xc76
   1235a:	b2bf      	uxth	r7, r7
   1235c:	455f      	cmp	r7, fp
   1235e:	d87a      	bhi.n	12456 <ull_conn_rx+0xe52>
			     ((latency + 1) * interval_max)) ||
   12360:	f10c 0701 	add.w	r7, ip, #1
   12364:	b2bf      	uxth	r7, r7
   12366:	fb00 f707 	mul.w	r7, r0, r7
			    (timeout < 10) || (timeout > 3200) ||
   1236a:	ebb7 0f82 	cmp.w	r7, r2, lsl #2
   1236e:	d272      	bcs.n	12456 <ull_conn_rx+0xe52>
			     ((latency + 1) * interval_max)) ||
   12370:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   12374:	4558      	cmp	r0, fp
   12376:	d36e      	bcc.n	12456 <ull_conn_rx+0xe52>
			conn->llcp_conn_param.interval_min = interval_min;
   12378:	f8a4 a188 	strh.w	sl, [r4, #392]	; 0x188
			conn->llcp_conn_param.interval_max = interval_max;
   1237c:	f8a4 918a 	strh.w	r9, [r4, #394]	; 0x18a
			conn->llcp_conn_param.latency =	latency;
   12380:	f8a4 818c 	strh.w	r8, [r4, #396]	; 0x18c
			conn->llcp_conn_param.timeout =	timeout;
   12384:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
			conn->llcp_conn_param.preferred_periodicity =
   12388:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   1238c:	f895 e02a 	ldrb.w	lr, [r5, #42]	; 0x2a
   12390:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   12394:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   12398:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset0);
   1239c:	f895 e02c 	ldrb.w	lr, [r5, #44]	; 0x2c
   123a0:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   123a4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   123a8:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset1);
   123ac:	f895 e02e 	ldrb.w	lr, [r5, #46]	; 0x2e
   123b0:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   123b4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   123b8:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
				sys_le16_to_cpu(cpr->offset2);
   123bc:	f895 e030 	ldrb.w	lr, [r5, #48]	; 0x30
   123c0:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   123c4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   123c8:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
				sys_le16_to_cpu(cpr->offset3);
   123cc:	f895 e032 	ldrb.w	lr, [r5, #50]	; 0x32
   123d0:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   123d4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   123d8:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
				sys_le16_to_cpu(cpr->offset4);
   123dc:	f895 e034 	ldrb.w	lr, [r5, #52]	; 0x34
   123e0:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   123e4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   123e8:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
				sys_le16_to_cpu(cpr->offset5);
   123ec:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   123f0:	f895 e036 	ldrb.w	lr, [r5, #54]	; 0x36
   123f4:	ea47 270e 	orr.w	r7, r7, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   123f8:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
			     lll->interval) ||
   123fc:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
			if ((conn->llcp_conn_param.interval_max !=
   123fe:	42b8      	cmp	r0, r7
   12400:	f000 8405 	beq.w	12c0e <ull_conn_rx+0x160a>
				conn->llcp_conn_param.state =
   12404:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   12408:	2003      	movs	r0, #3
   1240a:	f360 0202 	bfi	r2, r0, #0, #3
   1240e:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
			conn->llcp_conn_param.ack--;
   12412:	3e01      	subs	r6, #1
   12414:	f884 6185 	strb.w	r6, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   12418:	2b00      	cmp	r3, #0
   1241a:	f47f a93f 	bne.w	1169c <ull_conn_rx+0x98>
		conn_upd_curr = conn;
   1241e:	600c      	str	r4, [r1, #0]
	int nack = 0;
   12420:	4618      	mov	r0, r3
   12422:	f7ff b93c 	b.w	1169e <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   12426:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
   1242a:	f894 3185 	ldrb.w	r3, [r4, #389]	; 0x185
   1242e:	4293      	cmp	r3, r2
   12430:	f43f addd 	beq.w	11fee <ull_conn_rx+0x9ea>
		rej_ext_ind->error_code = rej_ind->error_code;
   12434:	f895 3020 	ldrb.w	r3, [r5, #32]
   12438:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   1243c:	f994 1039 	ldrsb.w	r1, [r4, #57]	; 0x39
   12440:	2900      	cmp	r1, #0
   12442:	f6bf ae01 	bge.w	12048 <ull_conn_rx+0xa44>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   12446:	2b23      	cmp	r3, #35	; 0x23
   12448:	f43f ae01 	beq.w	1204e <ull_conn_rx+0xa4a>
			conn->slave.ticks_to_offset =
   1244c:	f8d4 11a8 	ldr.w	r1, [r4, #424]	; 0x1a8
   12450:	f8c4 10e0 	str.w	r1, [r4, #224]	; 0xe0
   12454:	e5fb      	b.n	1204e <ull_conn_rx+0xa4a>
				nack = reject_ext_ind_send(conn, *rx,
   12456:	231e      	movs	r3, #30
   12458:	f7ff bae0 	b.w	11a1c <ull_conn_rx+0x418>
	if (conn->common.txn_lock) {
   1245c:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   12460:	079e      	lsls	r6, r3, #30
   12462:	f53f a919 	bmi.w	11698 <ull_conn_rx+0x94>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12466:	48d0      	ldr	r0, [pc, #832]	; (127a8 <ull_conn_rx+0x11a4>)
   12468:	f7f9 f95a 	bl	b720 <mem_acquire>
	if (!tx) {
   1246c:	4602      	mov	r2, r0
   1246e:	2800      	cmp	r0, #0
   12470:	f43f ae64 	beq.w	1213c <ull_conn_rx+0xb38>
	conn->common.txn_lock = 1U;
   12474:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12478:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   1247c:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
	conn->common.txn_lock = 1U;
   12480:	f043 0302 	orr.w	r3, r3, #2
   12484:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12488:	2302      	movs	r3, #2
   1248a:	f363 0101 	bfi	r1, r3, #0, #2
	if (conn->llcp_phy.ack ==
   1248e:	f894 31bc 	ldrb.w	r3, [r4, #444]	; 0x1bc
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12492:	f884 11be 	strb.w	r1, [r4, #446]	; 0x1be
	if (conn->llcp_phy.ack ==
   12496:	4283      	cmp	r3, r0
   12498:	d115      	bne.n	124c6 <ull_conn_rx+0xec2>
		conn->llcp_phy.ack--;
   1249a:	3b01      	subs	r3, #1
   1249c:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
		conn->llcp_phy.tx =
   124a0:	f8b4 31be 	ldrh.w	r3, [r4, #446]	; 0x1be
			conn->phy_pref_rx;
   124a4:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
		conn->llcp_phy.tx =
   124a8:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   124ac:	f240 43fc 	movw	r3, #1276	; 0x4fc
   124b0:	f021 0104 	bic.w	r1, r1, #4
   124b4:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   124b8:	430b      	orrs	r3, r1
		conn->procedure_expire =
   124ba:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		conn->llcp_phy.tx =
   124be:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
		conn->procedure_expire =
   124c2:	f8a4 10c8 	strh.w	r1, [r4, #200]	; 0xc8
	conn->llcp_phy.rx &= p->tx_phys;
   124c6:	f894 11be 	ldrb.w	r1, [r4, #446]	; 0x1be
   124ca:	f895 3020 	ldrb.w	r3, [r5, #32]
   124ce:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   124d2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   124d6:	f3c1 0682 	ubfx	r6, r1, #2, #3
   124da:	4033      	ands	r3, r6
   124dc:	009b      	lsls	r3, r3, #2
   124de:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   124e2:	f001 0103 	and.w	r1, r1, #3
   124e6:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   124e8:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   124ea:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   124ee:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   124f0:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   124f4:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   124f6:	4603      	mov	r3, r0
   124f8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   124fc:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   124fe:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12502:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   12506:	2617      	movs	r6, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   12508:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   1250c:	71d6      	strb	r6, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   1250e:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12510:	7111      	strb	r1, [r2, #4]
	if (
   12512:	2b00      	cmp	r3, #0
   12514:	f000 80a7 	beq.w	12666 <ull_conn_rx+0x1062>
	    !conn->llcp_enc.pause_tx &&
   12518:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1251c:	0788      	lsls	r0, r1, #30
   1251e:	f100 80a2 	bmi.w	12666 <ull_conn_rx+0x1062>
	    !conn->llcp_phy.pause_tx &&
   12522:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   12526:	07c9      	lsls	r1, r1, #31
   12528:	f100 809d 	bmi.w	12666 <ull_conn_rx+0x1062>
		if (conn->tx_head == conn->tx_data) {
   1252c:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   12530:	428b      	cmp	r3, r1
   12532:	f000 82f4 	beq.w	12b1e <ull_conn_rx+0x151a>
		} else if (!conn->tx_ctrl) {
   12536:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1253a:	2900      	cmp	r1, #0
   1253c:	f000 8322 	beq.w	12b84 <ull_conn_rx+0x1580>
	tx->next = conn->tx_ctrl_last->next;
   12540:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12544:	6819      	ldr	r1, [r3, #0]
   12546:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   12548:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   1254a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1254e:	6813      	ldr	r3, [r2, #0]
   12550:	2b00      	cmp	r3, #0
   12552:	f47f a8a1 	bne.w	11698 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   12556:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1255a:	f7ff b89d 	b.w	11698 <ull_conn_rx+0x94>
			conn->llcp_conn_param.disabled = 1U;
   1255e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   12562:	f043 0310 	orr.w	r3, r3, #16
   12566:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
			if (!conn->lll.role) {
   1256a:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1256e:	2b00      	cmp	r3, #0
   12570:	f2c0 81c4 	blt.w	128fc <ull_conn_rx+0x12f8>
				LL_ASSERT(conn->llcp_cu.req ==
   12574:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   12578:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   1257c:	429a      	cmp	r2, r3
   1257e:	d00e      	beq.n	1259e <ull_conn_rx+0xf9a>
   12580:	4a8a      	ldr	r2, [pc, #552]	; (127ac <ull_conn_rx+0x11a8>)
   12582:	498b      	ldr	r1, [pc, #556]	; (127b0 <ull_conn_rx+0x11ac>)
   12584:	488b      	ldr	r0, [pc, #556]	; (127b4 <ull_conn_rx+0x11b0>)
   12586:	f641 13fe 	movw	r3, #6654	; 0x19fe
   1258a:	f009 f8f3 	bl	1b774 <printk>
   1258e:	4040      	eors	r0, r0
   12590:	f380 8811 	msr	BASEPRI, r0
   12594:	f04f 0003 	mov.w	r0, #3
   12598:	df02      	svc	2
   1259a:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_conn_param.state =
   1259e:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   125a2:	2105      	movs	r1, #5
   125a4:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   125a8:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   125aa:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   125ac:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
				conn->llcp_cu.win_size = 1U;
   125b0:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   125b4:	6835      	ldr	r5, [r6, #0]
				conn->llcp_conn_param.state =
   125b6:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   125ba:	f002 0308 	and.w	r3, r2, #8
   125be:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
   125c2:	430b      	orrs	r3, r1
   125c4:	f022 020f 	bic.w	r2, r2, #15
   125c8:	4313      	orrs	r3, r2
   125ca:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
				conn->llcp_cu.latency =
   125ce:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
				conn->llcp_cu.interval =
   125d2:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
				conn->llcp_cu.latency =
   125d6:	f8a4 3112 	strh.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.win_offset_us = 0U;
   125da:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   125dc:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
				conn->llcp_cu.interval =
   125e0:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   125e4:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
				conn->llcp_cu.win_offset_us = 0U;
   125e8:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   125ec:	7129      	strb	r1, [r5, #4]
				break;
   125ee:	f7ff b856 	b.w	1169e <ull_conn_rx+0x9a>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   125f2:	486d      	ldr	r0, [pc, #436]	; (127a8 <ull_conn_rx+0x11a4>)
   125f4:	f7f9 f894 	bl	b720 <mem_acquire>
		if (!tx) {
   125f8:	4601      	mov	r1, r0
   125fa:	2800      	cmp	r0, #0
   125fc:	f43f ad9e 	beq.w	1213c <ull_conn_rx+0xb38>
		conn->llcp_version.tx = 1U;
   12600:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   12604:	f043 0301 	orr.w	r3, r3, #1
   12608:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1260c:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1260e:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   12610:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   12612:	220b      	movs	r2, #11
   12614:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12616:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1261a:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1261e:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   12620:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   12622:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   12626:	2205      	movs	r2, #5
		v->sub_version_number =
   12628:	72c3      	strb	r3, [r0, #11]
   1262a:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   1262c:	7146      	strb	r6, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1262e:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   12630:	4620      	mov	r0, r4
   12632:	f7fd ffeb 	bl	1060c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12636:	2301      	movs	r3, #1
   12638:	712b      	strb	r3, [r5, #4]
   1263a:	f7ff ba4d 	b.w	11ad8 <ull_conn_rx+0x4d4>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1263e:	712f      	strb	r7, [r5, #4]
		*err = 0U;
   12640:	2000      	movs	r0, #0
   12642:	f7ff b82c 	b.w	1169e <ull_conn_rx+0x9a>
				      0x03) == 0x02) &&
   12646:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   1264a:	2b03      	cmp	r3, #3
   1264c:	f47f aca8 	bne.w	11fa0 <ull_conn_rx+0x99c>
   12650:	e49f      	b.n	11f92 <ull_conn_rx+0x98e>
			conn->llcp_length.disabled = 1U;
   12652:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   12656:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->llcp_length.disabled = 1U;
   1265a:	f043 0308 	orr.w	r3, r3, #8
   1265e:	f884 31ae 	strb.w	r3, [r4, #430]	; 0x1ae
			conn->llcp_length.ack = conn->llcp_length.req;
   12662:	f7ff b9bf 	b.w	119e4 <ull_conn_rx+0x3e0>
		if (!conn->tx_ctrl) {
   12666:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1266a:	2900      	cmp	r1, #0
   1266c:	f47f af68 	bne.w	12540 <ull_conn_rx+0xf3c>
			tx->next = conn->tx_head;
   12670:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   12672:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   12676:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   1267a:	e768      	b.n	1254e <ull_conn_rx+0xf4a>
				nack = reject_ext_ind_send(conn, *rx,
   1267c:	2323      	movs	r3, #35	; 0x23
   1267e:	f7ff b9cd 	b.w	11a1c <ull_conn_rx+0x418>
				conn->llcp_phy.state =
   12682:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   12686:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   12688:	f043 0303 	orr.w	r3, r3, #3
   1268c:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (conn->llcp_phy.ack ==
   12690:	d111      	bne.n	126b6 <ull_conn_rx+0x10b2>
					conn->llcp_phy.tx =
   12692:	f8b4 21be 	ldrh.w	r2, [r4, #446]	; 0x1be
						conn->phy_pref_rx;
   12696:	f894 01c0 	ldrb.w	r0, [r4, #448]	; 0x1c0
					conn->llcp_phy.ack--;
   1269a:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   1269c:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   126a0:	f884 31bd 	strb.w	r3, [r4, #445]	; 0x1bd
					conn->llcp_phy.tx =
   126a4:	f240 43fc 	movw	r3, #1276	; 0x4fc
   126a8:	f022 0204 	bic.w	r2, r2, #4
   126ac:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   126b0:	4313      	orrs	r3, r2
   126b2:	f8a4 31be 	strh.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.rx &= p->tx_phys;
   126b6:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   126ba:	f895 1020 	ldrb.w	r1, [r5, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   126be:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   126c2:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   126c6:	f003 0203 	and.w	r2, r3, #3
   126ca:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   126ce:	4003      	ands	r3, r0
   126d0:	009b      	lsls	r3, r3, #2
   126d2:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   126d6:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   126d8:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   126dc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   126e0:	d002      	beq.n	126e8 <ull_conn_rx+0x10e4>
   126e2:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   126e6:	d105      	bne.n	126f4 <ull_conn_rx+0x10f0>
					conn->llcp_phy.tx = 0;
   126e8:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   126ec:	f003 0303 	and.w	r3, r3, #3
   126f0:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
				conn->llcp_phy.pause_tx = 1U;
   126f4:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   126f8:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   126fa:	4313      	orrs	r3, r2
   126fc:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
	int nack = 0;
   12700:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12702:	712a      	strb	r2, [r5, #4]
   12704:	f7fe bfcb 	b.w	1169e <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   12708:	2323      	movs	r3, #35	; 0x23
   1270a:	2216      	movs	r2, #22
   1270c:	f7ff b987 	b.w	11a1e <ull_conn_rx+0x41a>
   12710:	4649      	mov	r1, r9
   12712:	e5a1      	b.n	12258 <ull_conn_rx+0xc54>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   12714:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12718:	f36f 0301 	bfc	r3, #0, #2
   1271c:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   12720:	f7ff bb2c 	b.w	11d7c <ull_conn_rx+0x778>
	conn->llcp_enc.pause_rx = 0U;
   12724:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	conn->llcp_ack = conn->llcp_req;
   12728:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
	conn->procedure_expire = 0U;
   1272c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1272e:	f021 0103 	bic.w	r1, r1, #3
   12732:	f884 1166 	strb.w	r1, [r4, #358]	; 0x166
	conn->procedure_expire = 0U;
   12736:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	int nack = 0;
   1273a:	4618      	mov	r0, r3
   1273c:	f7fe bfaf 	b.w	1169e <ull_conn_rx+0x9a>
			lll->phy_tx_time = lll->phy_tx;
   12740:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
			conn->llcp_phy.pause_tx = 0U;
   12744:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
			conn->llcp_phy.ack = conn->llcp_phy.req;
   12748:	f884 21bd 	strb.w	r2, [r4, #445]	; 0x1bd
			conn->llcp_phy.pause_tx = 0U;
   1274c:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   12750:	460a      	mov	r2, r1
			conn->llcp_phy.pause_tx = 0U;
   12752:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   12756:	f361 1206 	bfi	r2, r1, #4, #3
   1275a:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
			if (conn->llcp_phy.cmd) {
   1275e:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   12762:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
			lll->phy_tx_time = lll->phy_tx;
   12766:	f3c1 0102 	ubfx	r1, r1, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1276a:	6833      	ldr	r3, [r6, #0]
			if (conn->llcp_phy.cmd) {
   1276c:	f000 80f3 	beq.w	12956 <ull_conn_rx+0x1352>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12770:	221a      	movs	r2, #26
   12772:	711a      	strb	r2, [r3, #4]
				p->status = 0U;
   12774:	2300      	movs	r3, #0
   12776:	772b      	strb	r3, [r5, #28]
				p->tx = lll->phy_tx;
   12778:	7769      	strb	r1, [r5, #29]
				p->rx = lll->phy_rx;
   1277a:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
   1277e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12782:	77ab      	strb	r3, [r5, #30]
   12784:	f7ff b92e 	b.w	119e4 <ull_conn_rx+0x3e0>
	    ((pdu_data_tx->llctrl.opcode !=
   12788:	79d3      	ldrb	r3, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1278a:	2b03      	cmp	r3, #3
   1278c:	f43f ace7 	beq.w	1215e <ull_conn_rx+0xb5a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12790:	2b0a      	cmp	r3, #10
   12792:	f47f ad34 	bne.w	121fe <ull_conn_rx+0xbfa>
   12796:	e4e2      	b.n	1215e <ull_conn_rx+0xb5a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   12798:	2301      	movs	r3, #1
   1279a:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_INSTANT_PASSED;
   1279c:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_final = err;
   1279e:	f884 3143 	strb.w	r3, [r4, #323]	; 0x143
	int nack = 0;
   127a2:	2000      	movs	r0, #0
   127a4:	f7fe bf7b 	b.w	1169e <ull_conn_rx+0x9a>
   127a8:	20001fdc 	.word	0x20001fdc
   127ac:	00021da4 	.word	0x00021da4
   127b0:	00021ef0 	.word	0x00021ef0
   127b4:	0002180c 	.word	0x0002180c
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   127b8:	2101      	movs	r1, #1
   127ba:	f10d 000f 	add.w	r0, sp, #15
	phy = ind->m_to_s_phy;
   127be:	f88d 200f 	strb.w	r2, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   127c2:	f7f9 f97d 	bl	bac0 <util_ones_count_get>
   127c6:	2801      	cmp	r0, #1
   127c8:	f200 80b7 	bhi.w	1293a <ull_conn_rx+0x1336>
	phy = ind->s_to_m_phy;
   127cc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   127d0:	f88d 300f 	strb.w	r3, [sp, #15]
	if (util_ones_count_get(&phy, sizeof(phy)) > 1U) {
   127d4:	f10d 000f 	add.w	r0, sp, #15
   127d8:	2101      	movs	r1, #1
   127da:	f7f9 f971 	bl	bac0 <util_ones_count_get>
   127de:	2801      	cmp	r0, #1
   127e0:	f200 80ab 	bhi.w	1293a <ull_conn_rx+0x1336>
	instant = sys_le16_to_cpu(ind->instant);
   127e4:	8c6a      	ldrh	r2, [r5, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   127e6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   127e8:	1ad3      	subs	r3, r2, r3
   127ea:	041b      	lsls	r3, r3, #16
   127ec:	f100 81bd 	bmi.w	12b6a <ull_conn_rx+0x1566>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   127f0:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   127f4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   127f8:	1a5b      	subs	r3, r3, r1
   127fa:	f003 0303 	and.w	r3, r3, #3
   127fe:	2b02      	cmp	r3, #2
   12800:	f000 825e 	beq.w	12cc0 <ull_conn_rx+0x16bc>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   12804:	f894 01bc 	ldrb.w	r0, [r4, #444]	; 0x1bc
   12808:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   1280c:	4283      	cmp	r3, r0
   1280e:	d018      	beq.n	12842 <ull_conn_rx+0x123e>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   12810:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   12814:	f003 0303 	and.w	r3, r3, #3
   12818:	2b02      	cmp	r3, #2
   1281a:	d112      	bne.n	12842 <ull_conn_rx+0x123e>
		conn->llcp_phy.pause_tx = 0U;
   1281c:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp_phy.ack = conn->llcp_phy.req;
   12820:	f884 01bd 	strb.w	r0, [r4, #445]	; 0x1bd
		conn->llcp_phy.pause_tx = 0U;
   12824:	f36f 0300 	bfc	r3, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12828:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
		conn->llcp_phy.pause_tx = 0U;
   1282c:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   12830:	f3c3 0380 	ubfx	r3, r3, #2, #1
   12834:	f363 0041 	bfi	r0, r3, #1, #1
		conn->procedure_expire = 0U;
   12838:	2300      	movs	r3, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1283a:	f884 00e8 	strb.w	r0, [r4, #232]	; 0xe8
		conn->procedure_expire = 0U;
   1283e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	conn->llcp.phy_upd_ind.tx = ind->s_to_m_phy;
   12842:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
	conn->llcp.phy_upd_ind.rx = ind->m_to_s_phy;
   12846:	f895 0020 	ldrb.w	r0, [r5, #32]
	conn->llcp.phy_upd_ind.instant = instant;
   1284a:	f8a4 20ea 	strh.w	r2, [r4, #234]	; 0xea
	conn->llcp.phy_upd_ind.initiate = 0U;
   1284e:	009b      	lsls	r3, r3, #2
   12850:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   12854:	f003 031c 	and.w	r3, r3, #28
   12858:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   1285c:	f002 0202 	and.w	r2, r2, #2
   12860:	4313      	orrs	r3, r2
   12862:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
	link->mem = conn->llcp_rx;
   12866:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1286a:	607b      	str	r3, [r7, #4]
	(*rx)->hdr.link = link;
   1286c:	6833      	ldr	r3, [r6, #0]
   1286e:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   12870:	6832      	ldr	r2, [r6, #0]
   12872:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
	*rx = NULL;
   12876:	2300      	movs	r3, #0
   12878:	6033      	str	r3, [r6, #0]
	if (conn->llcp.phy_upd_ind.tx) {
   1287a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
	conn->llcp_type = LLCP_PHY_UPD;
   1287e:	2006      	movs	r0, #6
	conn->llcp_ack -= 2U;
   12880:	3902      	subs	r1, #2
	conn->llcp_type = LLCP_PHY_UPD;
   12882:	f884 00e6 	strb.w	r0, [r4, #230]	; 0xe6
	if (conn->llcp.phy_upd_ind.tx) {
   12886:	f012 001c 	ands.w	r0, r2, #28
	conn->llcp_ack -= 2U;
   1288a:	f884 10e5 	strb.w	r1, [r4, #229]	; 0xe5
	if (conn->llcp.phy_upd_ind.tx) {
   1288e:	f43e af06 	beq.w	1169e <ull_conn_rx+0x9a>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   12892:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
   12896:	f3c2 0282 	ubfx	r2, r2, #2, #3
   1289a:	f362 1106 	bfi	r1, r2, #4, #3
   1289e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
	int nack = 0;
   128a2:	4618      	mov	r0, r3
   128a4:	f7fe befb 	b.w	1169e <ull_conn_rx+0x9a>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   128a8:	2301      	movs	r3, #1
   128aa:	712b      	strb	r3, [r5, #4]
		err = BT_HCI_ERR_DIFF_TRANS_COLLISION;
   128ac:	232a      	movs	r3, #42	; 0x2a
   128ae:	e776      	b.n	1279e <ull_conn_rx+0x119a>
			conn->procedure_expire = 0U;
   128b0:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   128b2:	4549      	cmp	r1, r9
			conn->llcp_length.ack = conn->llcp_length.req;
   128b4:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
			conn->procedure_expire = 0U;
   128b8:	f8a4 70c8 	strh.w	r7, [r4, #200]	; 0xc8
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   128bc:	f000 8124 	beq.w	12b08 <ull_conn_rx+0x1504>
			conn->lll.max_rx_time = eff_rx_time;
   128c0:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
			if (tx) {
   128c4:	2b00      	cmp	r3, #0
   128c6:	f000 811a 	beq.w	12afe <ull_conn_rx+0x14fa>
					(conn->llcp_length.req - 1);
   128ca:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   128cc:	f884 21ad 	strb.w	r2, [r4, #429]	; 0x1ad
				conn->llcp_length.state =
   128d0:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->llcp_length.rx_octets = eff_rx_octets;
   128d4:	f8a4 e1b0 	strh.w	lr, [r4, #432]	; 0x1b0
				conn->llcp_length.state =
   128d8:	2603      	movs	r6, #3
   128da:	f366 0202 	bfi	r2, r6, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   128de:	f8a4 11b2 	strh.w	r1, [r4, #434]	; 0x1b2
				conn->llcp_length.rx_time = eff_rx_time;
   128e2:	f8a4 c1b4 	strh.w	ip, [r4, #436]	; 0x1b4
				conn->llcp_length.tx_time = eff_tx_time;
   128e6:	f8a4 01b6 	strh.w	r0, [r4, #438]	; 0x1b6
				conn->llcp_length.state =
   128ea:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   128ee:	f8a5 e020 	strh.w	lr, [r5, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   128f2:	84a9      	strh	r1, [r5, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   128f4:	f8a5 c022 	strh.w	ip, [r5, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   128f8:	84e8      	strh	r0, [r5, #38]	; 0x26
   128fa:	e4e4      	b.n	122c6 <ull_conn_rx+0xcc2>
	conn_upd_curr = NULL;
   128fc:	4bd4      	ldr	r3, [pc, #848]	; (12c50 <ull_conn_rx+0x164c>)
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   128fe:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   12902:	2100      	movs	r1, #0
   12904:	6019      	str	r1, [r3, #0]
			if (!conn->llcp_conn_param.cmd) {
   12906:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   1290a:	f013 0308 	ands.w	r3, r3, #8
   1290e:	f040 80b7 	bne.w	12a80 <ull_conn_rx+0x147c>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12912:	2201      	movs	r2, #1
   12914:	712a      	strb	r2, [r5, #4]
	int nack = 0;
   12916:	4618      	mov	r0, r3
				break;
   12918:	f7fe bec1 	b.w	1169e <ull_conn_rx+0x9a>
		conn_upd_curr = conn;
   1291c:	601c      	str	r4, [r3, #0]
   1291e:	f7ff b816 	b.w	1194e <ull_conn_rx+0x34a>
				conn->llcp_length.state =
   12922:	f894 21ae 	ldrb.w	r2, [r4, #430]	; 0x1ae
				conn->lll.max_tx_octets = eff_tx_octets;
   12926:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->llcp_length.state =
   1292a:	2504      	movs	r5, #4
   1292c:	f365 0202 	bfi	r2, r5, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   12930:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   12934:	f884 21ae 	strb.w	r2, [r4, #430]	; 0x1ae
   12938:	e4bb      	b.n	122b2 <ull_conn_rx+0xcae>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1293a:	6833      	ldr	r3, [r6, #0]
   1293c:	2201      	movs	r2, #1
   1293e:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INVALID_LL_PARAM;
   12940:	231e      	movs	r3, #30
   12942:	e72c      	b.n	1279e <ull_conn_rx+0x119a>
				      0x03) == 0x02) &&
   12944:	f894 00e6 	ldrb.w	r0, [r4, #230]	; 0xe6
   12948:	2803      	cmp	r0, #3
   1294a:	f47f ac45 	bne.w	121d8 <ull_conn_rx+0xbd4>
   1294e:	e43c      	b.n	121ca <ull_conn_rx+0xbc6>
	struct node_tx *tx = NULL;
   12950:	2300      	movs	r3, #0
   12952:	f7fe bfc1 	b.w	118d8 <ull_conn_rx+0x2d4>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12956:	2201      	movs	r2, #1
   12958:	711a      	strb	r2, [r3, #4]
   1295a:	f7ff b843 	b.w	119e4 <ull_conn_rx+0x3e0>
				uint16_t interval_min =
   1295e:	f8b5 9020 	ldrh.w	r9, [r5, #32]
   12962:	fa1f f089 	uxth.w	r0, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12966:	2805      	cmp	r0, #5
   12968:	f67f ad75 	bls.w	12456 <ull_conn_rx+0xe52>
				uint16_t interval_max =
   1296c:	f8b5 8022 	ldrh.w	r8, [r5, #34]	; 0x22
   12970:	fa1f fe88 	uxth.w	lr, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   12974:	f5be 6f48 	cmp.w	lr, #3200	; 0xc80
   12978:	f63f ad6d 	bhi.w	12456 <ull_conn_rx+0xe52>
				    (interval_max > 3200) ||
   1297c:	4570      	cmp	r0, lr
   1297e:	f63f ad6a 	bhi.w	12456 <ull_conn_rx+0xe52>
				uint16_t latency =
   12982:	8caf      	ldrh	r7, [r5, #36]	; 0x24
   12984:	b2be      	uxth	r6, r7
				    (interval_min > interval_max) ||
   12986:	f5b6 7ffa 	cmp.w	r6, #500	; 0x1f4
   1298a:	f4bf ad64 	bcs.w	12456 <ull_conn_rx+0xe52>
				uint16_t timeout =
   1298e:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
   12990:	f8ad 0006 	strh.w	r0, [sp, #6]
   12994:	b280      	uxth	r0, r0
				    (latency > 499) ||
   12996:	f1a0 0a0a 	sub.w	sl, r0, #10
   1299a:	f640 4b76 	movw	fp, #3190	; 0xc76
   1299e:	fa1f fa8a 	uxth.w	sl, sl
   129a2:	45da      	cmp	sl, fp
   129a4:	f63f ad57 	bhi.w	12456 <ull_conn_rx+0xe52>
				     ((latency + 1) * interval_max)) ||
   129a8:	f106 0a01 	add.w	sl, r6, #1
   129ac:	fa1f fa8a 	uxth.w	sl, sl
   129b0:	fb0e fa0a 	mul.w	sl, lr, sl
				    (timeout > 3200) ||
   129b4:	ebba 0f80 	cmp.w	sl, r0, lsl #2
   129b8:	f4bf ad4d 	bcs.w	12456 <ull_conn_rx+0xe52>
				     ((latency + 1) * interval_max)) ||
   129bc:	f895 b028 	ldrb.w	fp, [r5, #40]	; 0x28
   129c0:	45de      	cmp	lr, fp
   129c2:	f4ff ad48 	bcc.w	12456 <ull_conn_rx+0xe52>
				conn->llcp_conn_param.latency =	latency;
   129c6:	f8a4 718c 	strh.w	r7, [r4, #396]	; 0x18c
				conn->llcp_conn_param.timeout =	timeout;
   129ca:	f8bd 7006 	ldrh.w	r7, [sp, #6]
				conn->llcp_conn_param.interval_min =
   129ce:	f8a4 9188 	strh.w	r9, [r4, #392]	; 0x188
				conn->llcp_conn_param.interval_max =
   129d2:	f8a4 818a 	strh.w	r8, [r4, #394]	; 0x18a
				conn->llcp_conn_param.timeout =	timeout;
   129d6:	f8a4 718e 	strh.w	r7, [r4, #398]	; 0x18e
				conn->llcp_conn_param.preferred_periodicity =
   129da:	f884 b190 	strb.w	fp, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   129de:	f895 802a 	ldrb.w	r8, [r5, #42]	; 0x2a
   129e2:	f895 7029 	ldrb.w	r7, [r5, #41]	; 0x29
   129e6:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   129ea:	f8a4 7192 	strh.w	r7, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset0);
   129ee:	f895 802c 	ldrb.w	r8, [r5, #44]	; 0x2c
   129f2:	f895 702b 	ldrb.w	r7, [r5, #43]	; 0x2b
   129f6:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   129fa:	f8a4 7194 	strh.w	r7, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset1);
   129fe:	f895 802e 	ldrb.w	r8, [r5, #46]	; 0x2e
   12a02:	f895 702d 	ldrb.w	r7, [r5, #45]	; 0x2d
   12a06:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   12a0a:	f8a4 7196 	strh.w	r7, [r4, #406]	; 0x196
					sys_le16_to_cpu(cpr->offset2);
   12a0e:	f895 8030 	ldrb.w	r8, [r5, #48]	; 0x30
   12a12:	f895 702f 	ldrb.w	r7, [r5, #47]	; 0x2f
   12a16:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   12a1a:	f8a4 7198 	strh.w	r7, [r4, #408]	; 0x198
					sys_le16_to_cpu(cpr->offset3);
   12a1e:	f895 8032 	ldrb.w	r8, [r5, #50]	; 0x32
   12a22:	f895 7031 	ldrb.w	r7, [r5, #49]	; 0x31
   12a26:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   12a2a:	f8a4 719a 	strh.w	r7, [r4, #410]	; 0x19a
					sys_le16_to_cpu(cpr->offset4);
   12a2e:	f895 8034 	ldrb.w	r8, [r5, #52]	; 0x34
   12a32:	f895 7033 	ldrb.w	r7, [r5, #51]	; 0x33
   12a36:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   12a3a:	f8a4 719c 	strh.w	r7, [r4, #412]	; 0x19c
					sys_le16_to_cpu(cpr->offset5);
   12a3e:	f895 7035 	ldrb.w	r7, [r5, #53]	; 0x35
   12a42:	f895 8036 	ldrb.w	r8, [r5, #54]	; 0x36
   12a46:	ea47 2708 	orr.w	r7, r7, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   12a4a:	f8a4 719e 	strh.w	r7, [r4, #414]	; 0x19e
				     lll->interval) ||
   12a4e:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
				if ((conn->llcp_conn_param.interval_max !=
   12a50:	45be      	cmp	lr, r7
   12a52:	f000 8114 	beq.w	12c7e <ull_conn_rx+0x167a>
					if (conn->llcp_enc.pause_tx) {
   12a56:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   12a5a:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
					if (conn->llcp_enc.pause_tx) {
   12a5e:	f000 8108 	beq.w	12c72 <ull_conn_rx+0x166e>
						conn->llcp_conn_param.state =
   12a62:	2002      	movs	r0, #2
   12a64:	f360 0202 	bfi	r2, r0, #0, #3
   12a68:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
						(*rx)->hdr.type =
   12a6c:	2201      	movs	r2, #1
   12a6e:	712a      	strb	r2, [r5, #4]
				conn->llcp_conn_param.ack--;
   12a70:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   12a74:	f884 c185 	strb.w	ip, [r4, #389]	; 0x185
	if (!conn_upd_curr) {
   12a78:	2b00      	cmp	r3, #0
   12a7a:	f47e ae0f 	bne.w	1169c <ull_conn_rx+0x98>
   12a7e:	e4ce      	b.n	1241e <ull_conn_rx+0xe1a>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12a80:	2216      	movs	r2, #22
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12a82:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12a84:	712a      	strb	r2, [r5, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12a86:	772b      	strb	r3, [r5, #28]
			cu->interval = lll->interval;
   12a88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
			cu->timeout = conn->supervision_reload *
   12a8a:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			cu->latency = lll->latency;
   12a8e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
			cu->interval = lll->interval;
   12a90:	83ea      	strh	r2, [r5, #30]
			cu->timeout = conn->supervision_reload *
   12a92:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   12a96:	227d      	movs	r2, #125	; 0x7d
   12a98:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   12a9c:	8429      	strh	r1, [r5, #32]
				      lll->interval * 125U / 1000;
   12a9e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12aa2:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12aa6:	846b      	strh	r3, [r5, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12aa8:	f7fe bf9c 	b.w	119e4 <ull_conn_rx+0x3e0>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12aac:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
			conn->llcp_ack += 2U;
   12ab0:	3202      	adds	r2, #2
   12ab2:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12ab6:	2b00      	cmp	r3, #0
   12ab8:	d149      	bne.n	12b4e <ull_conn_rx+0x154a>
			conn->slave.llcp_type = conn->llcp_type;
   12aba:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   12abe:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
   12ac2:	f7fe be8e 	b.w	117e2 <ull_conn_rx+0x1de>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12ac6:	6832      	ldr	r2, [r6, #0]
   12ac8:	201a      	movs	r0, #26
   12aca:	7110      	strb	r0, [r2, #4]
		p->status = 0U;
   12acc:	772b      	strb	r3, [r5, #28]
		p->tx = conn->lll.phy_tx;
   12ace:	7769      	strb	r1, [r5, #29]
		p->rx = conn->lll.phy_rx;
   12ad0:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
	int nack = 0;
   12ad4:	4618      	mov	r0, r3
		p->rx = conn->lll.phy_rx;
   12ad6:	f3c2 0302 	ubfx	r3, r2, #0, #3
   12ada:	77ab      	strb	r3, [r5, #30]
		if (err) {
   12adc:	f7fe bddf 	b.w	1169e <ull_conn_rx+0x9a>
			conn->tx_data = conn->tx_data->next;
   12ae0:	681a      	ldr	r2, [r3, #0]
   12ae2:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12ae6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12aea:	2a00      	cmp	r2, #0
   12aec:	f47f a8e1 	bne.w	11cb2 <ull_conn_rx+0x6ae>
			tx->next = conn->tx_head->next;
   12af0:	681a      	ldr	r2, [r3, #0]
   12af2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   12af4:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   12af6:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   12afa:	f7ff b8e1 	b.w	11cc0 <ull_conn_rx+0x6bc>
				conn->lll.max_tx_octets = eff_tx_octets;
   12afe:	f8a4 1058 	strh.w	r1, [r4, #88]	; 0x58
				conn->lll.max_tx_time = eff_tx_time;
   12b02:	f8a4 005c 	strh.w	r0, [r4, #92]	; 0x5c
   12b06:	e6f2      	b.n	128ee <ull_conn_rx+0x12ea>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   12b08:	4558      	cmp	r0, fp
   12b0a:	f47f aed9 	bne.w	128c0 <ull_conn_rx+0x12bc>
			    eff_rx_time == conn->lll.max_rx_time &&
   12b0e:	45d4      	cmp	ip, sl
   12b10:	f47f aed6 	bne.w	128c0 <ull_conn_rx+0x12bc>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12b14:	6832      	ldr	r2, [r6, #0]
   12b16:	2501      	movs	r5, #1
   12b18:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   12b1a:	f7ff bbd4 	b.w	122c6 <ull_conn_rx+0xcc2>
			conn->tx_data = conn->tx_data->next;
   12b1e:	6819      	ldr	r1, [r3, #0]
   12b20:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   12b24:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   12b28:	2900      	cmp	r1, #0
   12b2a:	f47f ad09 	bne.w	12540 <ull_conn_rx+0xf3c>
			tx->next = conn->tx_head->next;
   12b2e:	6819      	ldr	r1, [r3, #0]
   12b30:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   12b32:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   12b34:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   12b38:	e509      	b.n	1254e <ull_conn_rx+0xf4a>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12b3a:	791a      	ldrb	r2, [r3, #4]
   12b3c:	f002 0203 	and.w	r2, r2, #3
   12b40:	2a03      	cmp	r2, #3
   12b42:	f000 80c2 	beq.w	12cca <ull_conn_rx+0x16c6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12b46:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   12b4a:	f7ff b8b2 	b.w	11cb2 <ull_conn_rx+0x6ae>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   12b4e:	4a41      	ldr	r2, [pc, #260]	; (12c54 <ull_conn_rx+0x1650>)
   12b50:	4941      	ldr	r1, [pc, #260]	; (12c58 <ull_conn_rx+0x1654>)
   12b52:	4842      	ldr	r0, [pc, #264]	; (12c5c <ull_conn_rx+0x1658>)
   12b54:	f241 73b7 	movw	r3, #6071	; 0x17b7
   12b58:	f008 fe0c 	bl	1b774 <printk>
   12b5c:	4040      	eors	r0, r0
   12b5e:	f380 8811 	msr	BASEPRI, r0
   12b62:	f04f 0003 	mov.w	r0, #3
   12b66:	df02      	svc	2
   12b68:	e7a7      	b.n	12aba <ull_conn_rx+0x14b6>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12b6a:	6833      	ldr	r3, [r6, #0]
   12b6c:	2201      	movs	r2, #1
   12b6e:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   12b70:	2328      	movs	r3, #40	; 0x28
   12b72:	e614      	b.n	1279e <ull_conn_rx+0x119a>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   12b74:	f894 11ae 	ldrb.w	r1, [r4, #430]	; 0x1ae
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   12b78:	f011 0f06 	tst.w	r1, #6
   12b7c:	f43f ab63 	beq.w	12246 <ull_conn_rx+0xc42>
   12b80:	f7fe bea3 	b.w	118ca <ull_conn_rx+0x2c6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12b84:	7919      	ldrb	r1, [r3, #4]
   12b86:	f001 0103 	and.w	r1, r1, #3
   12b8a:	2903      	cmp	r1, #3
   12b8c:	d06a      	beq.n	12c64 <ull_conn_rx+0x1660>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12b8e:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   12b92:	e4d5      	b.n	12540 <ull_conn_rx+0xf3c>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   12b94:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   12b98:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   12b9c:	429a      	cmp	r2, r3
   12b9e:	d00e      	beq.n	12bbe <ull_conn_rx+0x15ba>
   12ba0:	4a2c      	ldr	r2, [pc, #176]	; (12c54 <ull_conn_rx+0x1650>)
   12ba2:	492f      	ldr	r1, [pc, #188]	; (12c60 <ull_conn_rx+0x165c>)
   12ba4:	482d      	ldr	r0, [pc, #180]	; (12c5c <ull_conn_rx+0x1658>)
   12ba6:	f241 23dc 	movw	r3, #4828	; 0x12dc
   12baa:	f008 fde3 	bl	1b774 <printk>
   12bae:	4040      	eors	r0, r0
   12bb0:	f380 8811 	msr	BASEPRI, r0
   12bb4:	f04f 0003 	mov.w	r0, #3
   12bb8:	df02      	svc	2
   12bba:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12bbe:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
   12bc2:	2105      	movs	r1, #5
   12bc4:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   12bc8:	3b01      	subs	r3, #1
   12bca:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12bce:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12bd2:	f002 0308 	and.w	r3, r2, #8
   12bd6:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.win_size = 1U;
   12bda:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12bdc:	430b      	orrs	r3, r1
   12bde:	f022 020f 	bic.w	r2, r2, #15
   12be2:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   12be4:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   12be8:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   12bec:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12bf0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.win_offset_us = 0U;
   12bf4:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12bf6:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
		conn->llcp_cu.win_offset_us = 0U;
   12bfa:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   12bfe:	f8a4 1110 	strh.w	r1, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   12c02:	f8a4 2112 	strh.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12c06:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
	if (err) {
   12c0a:	f7fe bd45 	b.w	11698 <ull_conn_rx+0x94>
			     lll->interval) ||
   12c0e:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
   12c10:	4567      	cmp	r7, ip
   12c12:	f47f abf7 	bne.w	12404 <ull_conn_rx+0xe00>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12c16:	f240 47e2 	movw	r7, #1250	; 0x4e2
   12c1a:	fb07 f000 	mul.w	r0, r7, r0
   12c1e:	f242 7710 	movw	r7, #10000	; 0x2710
   12c22:	fb07 0202 	mla	r2, r7, r2, r0
   12c26:	3a01      	subs	r2, #1
   12c28:	fbb2 f2f0 	udiv	r2, r2, r0
			    (conn->llcp_conn_param.latency != lll->latency) ||
   12c2c:	f8b4 00c2 	ldrh.w	r0, [r4, #194]	; 0xc2
   12c30:	b292      	uxth	r2, r2
   12c32:	4290      	cmp	r0, r2
   12c34:	f47f abe6 	bne.w	12404 <ull_conn_rx+0xe00>
				conn->llcp_conn_param.state =
   12c38:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   12c3c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   12c40:	f042 0201 	orr.w	r2, r2, #1
   12c44:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12c48:	2201      	movs	r2, #1
   12c4a:	712a      	strb	r2, [r5, #4]
   12c4c:	f7ff bbe1 	b.w	12412 <ull_conn_rx+0xe0e>
   12c50:	20001f50 	.word	0x20001f50
   12c54:	00021da4 	.word	0x00021da4
   12c58:	00021ecc 	.word	0x00021ecc
   12c5c:	0002180c 	.word	0x0002180c
   12c60:	00021ef0 	.word	0x00021ef0
	    ((pdu_data_tx->llctrl.opcode !=
   12c64:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12c66:	2903      	cmp	r1, #3
   12c68:	f43f af61 	beq.w	12b2e <ull_conn_rx+0x152a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12c6c:	290a      	cmp	r1, #10
   12c6e:	d18e      	bne.n	12b8e <ull_conn_rx+0x158a>
   12c70:	e75d      	b.n	12b2e <ull_conn_rx+0x152a>
						conn->llcp_conn_param.state =
   12c72:	2003      	movs	r0, #3
   12c74:	f360 0202 	bfi	r2, r0, #0, #3
   12c78:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
   12c7c:	e6f8      	b.n	12a70 <ull_conn_rx+0x146c>
				     lll->interval) ||
   12c7e:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
   12c82:	45b6      	cmp	lr, r6
   12c84:	f47f aee7 	bne.w	12a56 <ull_conn_rx+0x1452>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12c88:	f240 46e2 	movw	r6, #1250	; 0x4e2
   12c8c:	fb07 f606 	mul.w	r6, r7, r6
   12c90:	f242 7710 	movw	r7, #10000	; 0x2710
   12c94:	fb07 6000 	mla	r0, r7, r0, r6
   12c98:	3801      	subs	r0, #1
   12c9a:	fbb0 f0f6 	udiv	r0, r0, r6
				     lll->latency) ||
   12c9e:	f8b4 60c2 	ldrh.w	r6, [r4, #194]	; 0xc2
   12ca2:	b280      	uxth	r0, r0
   12ca4:	4286      	cmp	r6, r0
   12ca6:	f47f aed6 	bne.w	12a56 <ull_conn_rx+0x1452>
					conn->llcp_conn_param.state =
   12caa:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   12cae:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   12cb2:	f042 0201 	orr.w	r2, r2, #1
   12cb6:	f8a4 2186 	strh.w	r2, [r4, #390]	; 0x186
					(*rx)->hdr.type =
   12cba:	2201      	movs	r2, #1
   12cbc:	712a      	strb	r2, [r5, #4]
   12cbe:	e6d7      	b.n	12a70 <ull_conn_rx+0x146c>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   12cc0:	6833      	ldr	r3, [r6, #0]
   12cc2:	2201      	movs	r2, #1
   12cc4:	711a      	strb	r2, [r3, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   12cc6:	232a      	movs	r3, #42	; 0x2a
   12cc8:	e569      	b.n	1279e <ull_conn_rx+0x119a>
	    ((pdu_data_tx->llctrl.opcode !=
   12cca:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12ccc:	2a03      	cmp	r2, #3
   12cce:	f43f af0f 	beq.w	12af0 <ull_conn_rx+0x14ec>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   12cd2:	2a0a      	cmp	r2, #10
   12cd4:	f47f af37 	bne.w	12b46 <ull_conn_rx+0x1542>
   12cd8:	e70a      	b.n	12af0 <ull_conn_rx+0x14ec>
   12cda:	bf00      	nop

00012cdc <ull_conn_llcp>:
{
   12cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12ce0:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   12ce2:	f890 00e5 	ldrb.w	r0, [r0, #229]	; 0xe5
   12ce6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12cea:	4298      	cmp	r0, r3
{
   12cec:	460d      	mov	r5, r1
   12cee:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   12cf0:	d030      	beq.n	12d54 <ull_conn_llcp+0x78>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   12cf2:	1a1b      	subs	r3, r3, r0
   12cf4:	f003 0303 	and.w	r3, r3, #3
   12cf8:	2b02      	cmp	r3, #2
   12cfa:	d010      	beq.n	12d1e <ull_conn_llcp+0x42>
   12cfc:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
   12d00:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12d02:	f1bc 0f00 	cmp.w	ip, #0
   12d06:	db4e      	blt.n	12da6 <ull_conn_llcp+0xca>
	if (((conn->llcp_terminate.req - conn->llcp_terminate.ack) & 0xFF) ==
   12d08:	f894 3140 	ldrb.w	r3, [r4, #320]	; 0x140
   12d0c:	f894 2141 	ldrb.w	r2, [r4, #321]	; 0x141
   12d10:	1a9b      	subs	r3, r3, r2
   12d12:	b2db      	uxtb	r3, r3
   12d14:	2b01      	cmp	r3, #1
   12d16:	d05f      	beq.n	12dd8 <ull_conn_llcp+0xfc>
	return 0;
   12d18:	2000      	movs	r0, #0
}
   12d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   12d1e:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   12d22:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   12d26:	429a      	cmp	r2, r3
   12d28:	d006      	beq.n	12d38 <ull_conn_llcp+0x5c>
			     LLCP_LENGTH_STATE_RESIZE) ||
   12d2a:	f894 31ae 	ldrb.w	r3, [r4, #430]	; 0x1ae
			if ((conn->llcp_length.state ==
   12d2e:	f003 0306 	and.w	r3, r3, #6
   12d32:	2b04      	cmp	r3, #4
   12d34:	f000 81f9 	beq.w	1312a <ull_conn_llcp+0x44e>
		switch (conn->llcp_type) {
   12d38:	f894 70e6 	ldrb.w	r7, [r4, #230]	; 0xe6
   12d3c:	1e7b      	subs	r3, r7, #1
   12d3e:	2b05      	cmp	r3, #5
   12d40:	f200 81dd 	bhi.w	130fe <ull_conn_llcp+0x422>
   12d44:	e8df f013 	tbh	[pc, r3, lsl #1]
   12d48:	01790024 	.word	0x01790024
   12d4c:	01db00ef 	.word	0x01db00ef
   12d50:	00a700b2 	.word	0x00a700b2
   12d54:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
	if ((conn->llcp_ack == conn->llcp_req) &&
   12d58:	2a00      	cmp	r2, #0
   12d5a:	4694      	mov	ip, r2
   12d5c:	f2c0 81df 	blt.w	1311e <ull_conn_llcp+0x442>
	    !conn->llcp_enc.pause_rx) {
   12d60:	f894 7166 	ldrb.w	r7, [r4, #358]	; 0x166
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   12d64:	f017 0801 	ands.w	r8, r7, #1
   12d68:	d1cb      	bne.n	12d02 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   12d6a:	f894 910d 	ldrb.w	r9, [r4, #269]	; 0x10d
   12d6e:	f894 e10c 	ldrb.w	lr, [r4, #268]	; 0x10c
   12d72:	45ce      	cmp	lr, r9
   12d74:	f000 8309 	beq.w	1338a <ull_conn_llcp+0x6ae>
			conn->llcp_type = LLCP_CONN_UPD;
   12d78:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   12d7a:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   12d7c:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   12d80:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   12d84:	f894 21ad 	ldrb.w	r2, [r4, #429]	; 0x1ad
   12d88:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   12d8c:	429a      	cmp	r2, r3
   12d8e:	d1cc      	bne.n	12d2a <ull_conn_llcp+0x4e>
			if (event_conn_upd_prep(conn, lazy,
   12d90:	462a      	mov	r2, r5
   12d92:	4631      	mov	r1, r6
   12d94:	4620      	mov	r0, r4
   12d96:	f7ee f84f 	bl	e38 <event_conn_upd_prep>
   12d9a:	2800      	cmp	r0, #0
   12d9c:	f040 81bc 	bne.w	13118 <ull_conn_llcp+0x43c>
				return -ECANCELED;
   12da0:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   12da4:	e7b9      	b.n	12d1a <ull_conn_llcp+0x3e>
   12da6:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   12daa:	2900      	cmp	r1, #0
   12dac:	d0ac      	beq.n	12d08 <ull_conn_llcp+0x2c>
		switch (conn->slave.llcp_type) {
   12dae:	2902      	cmp	r1, #2
   12db0:	f000 817c 	beq.w	130ac <ull_conn_llcp+0x3d0>
   12db4:	2906      	cmp	r1, #6
   12db6:	d05c      	beq.n	12e72 <ull_conn_llcp+0x196>
   12db8:	2901      	cmp	r1, #1
   12dba:	d063      	beq.n	12e84 <ull_conn_llcp+0x1a8>
			LL_ASSERT(0);
   12dbc:	4ab7      	ldr	r2, [pc, #732]	; (1309c <ull_conn_llcp+0x3c0>)
   12dbe:	49b8      	ldr	r1, [pc, #736]	; (130a0 <ull_conn_llcp+0x3c4>)
   12dc0:	48b8      	ldr	r0, [pc, #736]	; (130a4 <ull_conn_llcp+0x3c8>)
   12dc2:	f240 436a 	movw	r3, #1130	; 0x46a
   12dc6:	f008 fcd5 	bl	1b774 <printk>
   12dca:	4040      	eors	r0, r0
   12dcc:	f380 8811 	msr	BASEPRI, r0
   12dd0:	f04f 0003 	mov.w	r0, #3
   12dd4:	df02      	svc	2
			break;
   12dd6:	e797      	b.n	12d08 <ull_conn_llcp+0x2c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12dd8:	48b3      	ldr	r0, [pc, #716]	; (130a8 <ull_conn_llcp+0x3cc>)
   12dda:	f7f8 fca1 	bl	b720 <mem_acquire>
		if (tx) {
   12dde:	2800      	cmp	r0, #0
   12de0:	d03a      	beq.n	12e58 <ull_conn_llcp+0x17c>
			conn->llcp_terminate.ack--;
   12de2:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   12de6:	3b01      	subs	r3, #1
   12de8:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12dec:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   12dee:	2202      	movs	r2, #2
   12df0:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   12df2:	f043 0303 	orr.w	r3, r3, #3
   12df6:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   12df8:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   12dfa:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_tx->llctrl.terminate_ind.error_code =
   12dfe:	f894 2142 	ldrb.w	r2, [r4, #322]	; 0x142
   12e02:	7202      	strb	r2, [r0, #8]
	if (
   12e04:	b1c3      	cbz	r3, 12e38 <ull_conn_llcp+0x15c>
	    !conn->llcp_enc.pause_tx &&
   12e06:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12e0a:	0791      	lsls	r1, r2, #30
   12e0c:	d414      	bmi.n	12e38 <ull_conn_llcp+0x15c>
	    !conn->llcp_phy.pause_tx &&
   12e0e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12e12:	07d2      	lsls	r2, r2, #31
   12e14:	d410      	bmi.n	12e38 <ull_conn_llcp+0x15c>
		if (conn->tx_head == conn->tx_data) {
   12e16:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12e1a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12e1c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12e20:	f000 8573 	beq.w	1390a <ull_conn_llcp+0xc2e>
		} else if (!conn->tx_ctrl) {
   12e24:	b96a      	cbnz	r2, 12e42 <ull_conn_llcp+0x166>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   12e26:	791a      	ldrb	r2, [r3, #4]
   12e28:	f002 0203 	and.w	r2, r2, #3
   12e2c:	2a03      	cmp	r2, #3
   12e2e:	f000 876e 	beq.w	13d0e <ull_conn_llcp+0x1032>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   12e32:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
   12e36:	e006      	b.n	12e46 <ull_conn_llcp+0x16a>
		if (!conn->tx_ctrl) {
   12e38:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   12e3c:	2a00      	cmp	r2, #0
   12e3e:	f000 82f8 	beq.w	13432 <ull_conn_llcp+0x756>
	tx->next = conn->tx_ctrl_last->next;
   12e42:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12e46:	681a      	ldr	r2, [r3, #0]
   12e48:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12e4a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   12e4c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   12e4e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12e52:	2b00      	cmp	r3, #0
   12e54:	f000 816d 	beq.w	13132 <ull_conn_llcp+0x456>
		if (!conn->procedure_expire) {
   12e58:	f8b4 00c8 	ldrh.w	r0, [r4, #200]	; 0xc8
   12e5c:	2800      	cmp	r0, #0
   12e5e:	f47f af5b 	bne.w	12d18 <ull_conn_llcp+0x3c>
			conn->procedure_expire = conn->supervision_reload;
   12e62:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
			if (conn->procedure_expire <= 1U) {
   12e66:	2b01      	cmp	r3, #1
   12e68:	f240 82df 	bls.w	1342a <ull_conn_llcp+0x74e>
			conn->procedure_expire = conn->supervision_reload;
   12e6c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   12e70:	e752      	b.n	12d18 <ull_conn_llcp+0x3c>
			event_counter = lll->event_counter +
   12e72:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
   12e74:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   12e76:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   12e78:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12e7a:	4620      	mov	r0, r4
   12e7c:	b291      	uxth	r1, r2
   12e7e:	f7fd fe5f 	bl	10b40 <event_phy_upd_ind_prep>
		break;
   12e82:	e741      	b.n	12d08 <ull_conn_llcp+0x2c>
			if (event_conn_upd_prep(conn, lazy,
   12e84:	462a      	mov	r2, r5
   12e86:	4631      	mov	r1, r6
   12e88:	4620      	mov	r0, r4
   12e8a:	f7ed ffd5 	bl	e38 <event_conn_upd_prep>
   12e8e:	2800      	cmp	r0, #0
   12e90:	f47f af3a 	bne.w	12d08 <ull_conn_llcp+0x2c>
   12e94:	e784      	b.n	12da0 <ull_conn_llcp+0xc4>
			event_counter = lll->event_counter +
   12e96:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   12e98:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
   12e9a:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   12e9c:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   12e9e:	b289      	uxth	r1, r1
   12ea0:	4620      	mov	r0, r4
   12ea2:	f7fd fe4d 	bl	10b40 <event_phy_upd_ind_prep>
		break;
   12ea6:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12eaa:	e72a      	b.n	12d02 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12eac:	487e      	ldr	r0, [pc, #504]	; (130a8 <ull_conn_llcp+0x3cc>)
   12eae:	f7f8 fc37 	bl	b720 <mem_acquire>
	if (tx) {
   12eb2:	2800      	cmp	r0, #0
   12eb4:	f000 8130 	beq.w	13118 <ull_conn_llcp+0x43c>
		conn->llcp_ack = conn->llcp_req;
   12eb8:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   12ebc:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12ec0:	7903      	ldrb	r3, [r0, #4]
   12ec2:	f043 0303 	orr.w	r3, r3, #3
   12ec6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   12ec8:	2301      	movs	r3, #1
   12eca:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   12ecc:	2312      	movs	r3, #18
   12ece:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   12ed0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12ed4:	2b00      	cmp	r3, #0
   12ed6:	f000 82b5 	beq.w	13444 <ull_conn_llcp+0x768>
	    !conn->llcp_enc.pause_tx &&
   12eda:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12ede:	0791      	lsls	r1, r2, #30
   12ee0:	f100 82b0 	bmi.w	13444 <ull_conn_llcp+0x768>
	    !conn->llcp_phy.pause_tx &&
   12ee4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12ee8:	07d2      	lsls	r2, r2, #31
   12eea:	f100 82ab 	bmi.w	13444 <ull_conn_llcp+0x768>
		if (conn->tx_head == conn->tx_data) {
   12eee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12ef2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12ef4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12ef8:	f000 8688 	beq.w	13c0c <ull_conn_llcp+0xf30>
		} else if (!conn->tx_ctrl) {
   12efc:	2a00      	cmp	r2, #0
   12efe:	f000 8716 	beq.w	13d2e <ull_conn_llcp+0x1052>
	tx->next = conn->tx_ctrl_last->next;
   12f02:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12f06:	681a      	ldr	r2, [r3, #0]
   12f08:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   12f0a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   12f0c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   12f0e:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12f12:	2b00      	cmp	r3, #0
   12f14:	f000 83e4 	beq.w	136e0 <ull_conn_llcp+0xa04>
		conn->procedure_expire = conn->procedure_reload;
   12f18:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   12f1c:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   12f20:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   12f24:	e6ed      	b.n	12d02 <ull_conn_llcp+0x26>
	if (conn->llcp.encryption.state) {
   12f26:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   12f2a:	f013 0803 	ands.w	r8, r3, #3
   12f2e:	f000 8152 	beq.w	131d6 <ull_conn_llcp+0x4fa>
		if (lll->role &&
   12f32:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   12f36:	2b00      	cmp	r3, #0
   12f38:	f6bf aee6 	bge.w	12d08 <ull_conn_llcp+0x2c>
   12f3c:	f1b8 0f01 	cmp.w	r8, #1
   12f40:	f47f af31 	bne.w	12da6 <ull_conn_llcp+0xca>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   12f44:	4858      	ldr	r0, [pc, #352]	; (130a8 <ull_conn_llcp+0x3cc>)
   12f46:	f7f8 fbeb 	bl	b720 <mem_acquire>
	if (!tx) {
   12f4a:	4680      	mov	r8, r0
   12f4c:	2800      	cmp	r0, #0
   12f4e:	f000 80e3 	beq.w	13118 <ull_conn_llcp+0x43c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12f52:	7903      	ldrb	r3, [r0, #4]
   12f54:	f043 0303 	orr.w	r3, r3, #3
   12f58:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12f5a:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   12f5e:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12f60:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   12f64:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12f66:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   12f6a:	210c      	movs	r1, #12
   12f6c:	4638      	mov	r0, r7
   12f6e:	f003 fab7 	bl	164e0 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   12f72:	4639      	mov	r1, r7
   12f74:	2208      	movs	r2, #8
   12f76:	f104 00fe 	add.w	r0, r4, #254	; 0xfe
   12f7a:	f00a fd47 	bl	1da0c <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   12f7e:	464a      	mov	r2, r9
   12f80:	f108 0110 	add.w	r1, r8, #16
   12f84:	f104 0098 	add.w	r0, r4, #152	; 0x98
   12f88:	f00a fd40 	bl	1da0c <memcpy>
	    conn->tx_head &&
   12f8c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   12f90:	2b00      	cmp	r3, #0
   12f92:	f000 84ad 	beq.w	138f0 <ull_conn_llcp+0xc14>
	    !conn->llcp_enc.pause_tx &&
   12f96:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   12f9a:	0791      	lsls	r1, r2, #30
   12f9c:	f100 84a8 	bmi.w	138f0 <ull_conn_llcp+0xc14>
	    !conn->llcp_phy.pause_tx &&
   12fa0:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   12fa4:	07d2      	lsls	r2, r2, #31
   12fa6:	f100 84a3 	bmi.w	138f0 <ull_conn_llcp+0xc14>
		if (conn->tx_head == conn->tx_data) {
   12faa:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   12fae:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   12fb0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   12fb4:	f000 873c 	beq.w	13e30 <ull_conn_llcp+0x1154>
		} else if (!conn->tx_ctrl) {
   12fb8:	2a00      	cmp	r2, #0
   12fba:	f000 87ee 	beq.w	13f9a <ull_conn_llcp+0x12be>
	tx->next = conn->tx_ctrl_last->next;
   12fbe:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   12fc2:	681a      	ldr	r2, [r3, #0]
   12fc4:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   12fc8:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   12fcc:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   12fd0:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   12fd4:	2b00      	cmp	r3, #0
   12fd6:	f000 85a7 	beq.w	13b28 <ull_conn_llcp+0xe4c>
			rx = ll_pdu_rx_alloc();
   12fda:	f7fc f99d 	bl	f318 <ll_pdu_rx_alloc>
			if (!rx) {
   12fde:	4607      	mov	r7, r0
   12fe0:	2800      	cmp	r0, #0
   12fe2:	f000 8099 	beq.w	13118 <ull_conn_llcp+0x43c>
			rx->hdr.handle = conn->lll.handle;
   12fe6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   12fe8:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   12fea:	2303      	movs	r3, #3
   12fec:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12fee:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   12ff0:	7f3b      	ldrb	r3, [r7, #28]
   12ff2:	f043 0303 	orr.w	r3, r3, #3
   12ff6:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12ff8:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   12ffa:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12ffc:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   12ffe:	f204 1169 	addw	r1, r4, #361	; 0x169
   13002:	f107 0020 	add.w	r0, r7, #32
   13006:	f00a fd01 	bl	1da0c <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   1300a:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
   1300e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   13012:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
   13016:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   1301a:	6838      	ldr	r0, [r7, #0]
   1301c:	4639      	mov	r1, r7
   1301e:	f7fc f94d 	bl	f2bc <ll_rx_put>
			ll_rx_sched();
   13022:	f7fc f955 	bl	f2d0 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   13026:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   1302a:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1302e:	2202      	movs	r2, #2
   13030:	f362 0301 	bfi	r3, r2, #0, #2
   13034:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   13038:	e663      	b.n	12d02 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   1303a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   1303c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   1303e:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   13040:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
					lll->latency_prepare + lazy;
   13044:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   13046:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   1304a:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   1304c:	d174      	bne.n	13138 <ull_conn_llcp+0x45c>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   1304e:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   13052:	1afb      	subs	r3, r7, r3
   13054:	0418      	lsls	r0, r3, #16
   13056:	d45f      	bmi.n	13118 <ull_conn_llcp+0x43c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   13058:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   1305c:	2b00      	cmp	r3, #0
   1305e:	f2c0 8337 	blt.w	136d0 <ull_conn_llcp+0x9f4>
			conn->llcp_ack = conn->llcp_req;
   13062:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13066:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		memcpy(&lll->data_chan_map[0],
   1306a:	f104 0734 	add.w	r7, r4, #52	; 0x34
   1306e:	2205      	movs	r2, #5
   13070:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   13074:	4638      	mov	r0, r7
   13076:	f00a fcc9 	bl	1da0c <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   1307a:	2105      	movs	r1, #5
   1307c:	4638      	mov	r0, r7
   1307e:	f7f8 fd1f 	bl	bac0 <util_ones_count_get>
		lll->data_chan_count =
   13082:	f894 c039 	ldrb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   13086:	2301      	movs	r3, #1
		lll->data_chan_count =
   13088:	f360 0c05 	bfi	ip, r0, #0, #6
   1308c:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   13090:	f884 31d8 	strb.w	r3, [r4, #472]	; 0x1d8
   13094:	fa4f fc8c 	sxtb.w	ip, ip
   13098:	e633      	b.n	12d02 <ull_conn_llcp+0x26>
   1309a:	bf00      	nop
   1309c:	00021da4 	.word	0x00021da4
   130a0:	000218a4 	.word	0x000218a4
   130a4:	0002180c 	.word	0x0002180c
   130a8:	20001fdc 	.word	0x20001fdc
			event_counter = lll->event_counter +
   130ac:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   130ae:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
	if (conn->llcp.chan_map.initiate) {
   130b0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			event_counter = lll->event_counter +
   130b4:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   130b6:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   130b8:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   130bc:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   130be:	f040 8119 	bne.w	132f4 <ull_conn_llcp+0x618>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   130c2:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   130c6:	1ab6      	subs	r6, r6, r2
   130c8:	0430      	lsls	r0, r6, #16
   130ca:	f53f ae1d 	bmi.w	12d08 <ull_conn_llcp+0x2c>
		memcpy(&lll->data_chan_map[0],
   130ce:	f104 0534 	add.w	r5, r4, #52	; 0x34
   130d2:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   130d4:	f884 30d9 	strb.w	r3, [r4, #217]	; 0xd9
		memcpy(&lll->data_chan_map[0],
   130d8:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   130dc:	4628      	mov	r0, r5
   130de:	f00a fc95 	bl	1da0c <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   130e2:	2105      	movs	r1, #5
   130e4:	4628      	mov	r0, r5
   130e6:	f7f8 fceb 	bl	bac0 <util_ones_count_get>
		lll->data_chan_count =
   130ea:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   130ee:	2201      	movs	r2, #1
		lll->data_chan_count =
   130f0:	f360 0305 	bfi	r3, r0, #0, #6
   130f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		conn->chm_updated = 1U;
   130f8:	f884 21d8 	strb.w	r2, [r4, #472]	; 0x1d8
   130fc:	e604      	b.n	12d08 <ull_conn_llcp+0x2c>
			LL_ASSERT(0);
   130fe:	4ad7      	ldr	r2, [pc, #860]	; (1345c <ull_conn_llcp+0x780>)
   13100:	49d7      	ldr	r1, [pc, #860]	; (13460 <ull_conn_llcp+0x784>)
   13102:	48d8      	ldr	r0, [pc, #864]	; (13464 <ull_conn_llcp+0x788>)
   13104:	f240 4339 	movw	r3, #1081	; 0x439
   13108:	f008 fb34 	bl	1b774 <printk>
   1310c:	4040      	eors	r0, r0
   1310e:	f380 8811 	msr	BASEPRI, r0
   13112:	f04f 0003 	mov.w	r0, #3
   13116:	df02      	svc	2
			break;
   13118:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   1311c:	e5f1      	b.n	12d02 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   1311e:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   13122:	2900      	cmp	r1, #0
   13124:	f47f ae43 	bne.w	12dae <ull_conn_llcp+0xd2>
   13128:	e61a      	b.n	12d60 <ull_conn_llcp+0x84>
				event_len_prep(conn);
   1312a:	4620      	mov	r0, r4
   1312c:	f7fd fc10 	bl	10950 <event_len_prep>
   13130:	e602      	b.n	12d38 <ull_conn_llcp+0x5c>
		conn->tx_data_last = tx;
   13132:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   13136:	e68f      	b.n	12e58 <ull_conn_llcp+0x17c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13138:	48cb      	ldr	r0, [pc, #812]	; (13468 <ull_conn_llcp+0x78c>)
   1313a:	f7f8 faf1 	bl	b720 <mem_acquire>
		if (tx) {
   1313e:	4680      	mov	r8, r0
   13140:	2800      	cmp	r0, #0
   13142:	d0e9      	beq.n	13118 <ull_conn_llcp+0x43c>
			conn->llcp.chan_map.instant = event_counter +
   13144:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   13146:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   1314a:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   1314c:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   1314e:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13152:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   13154:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13158:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   1315c:	f884 20e8 	strb.w	r2, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13160:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   13162:	2308      	movs	r3, #8
   13164:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   13166:	2301      	movs	r3, #1
   13168:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   1316a:	2205      	movs	r2, #5
   1316c:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   13170:	3008      	adds	r0, #8
   13172:	f00a fc4b 	bl	1da0c <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   13176:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   1317a:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   1317e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13182:	2b00      	cmp	r3, #0
   13184:	f000 82af 	beq.w	136e6 <ull_conn_llcp+0xa0a>
	    !conn->llcp_enc.pause_tx &&
   13188:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1318c:	0792      	lsls	r2, r2, #30
   1318e:	f100 82aa 	bmi.w	136e6 <ull_conn_llcp+0xa0a>
	    !conn->llcp_phy.pause_tx &&
   13192:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13196:	07d7      	lsls	r7, r2, #31
   13198:	f100 82a5 	bmi.w	136e6 <ull_conn_llcp+0xa0a>
		if (conn->tx_head == conn->tx_data) {
   1319c:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   131a0:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   131a2:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   131a6:	f000 85cf 	beq.w	13d48 <ull_conn_llcp+0x106c>
		} else if (!conn->tx_ctrl) {
   131aa:	2a00      	cmp	r2, #0
   131ac:	f000 8709 	beq.w	13fc2 <ull_conn_llcp+0x12e6>
	tx->next = conn->tx_ctrl_last->next;
   131b0:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   131b4:	681a      	ldr	r2, [r3, #0]
   131b6:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   131ba:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   131be:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   131c2:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   131c6:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   131ca:	2b00      	cmp	r3, #0
   131cc:	f47f ad99 	bne.w	12d02 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   131d0:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   131d4:	e595      	b.n	12d02 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   131d6:	48a4      	ldr	r0, [pc, #656]	; (13468 <ull_conn_llcp+0x78c>)
   131d8:	f7f8 faa2 	bl	b720 <mem_acquire>
	if (!tx) {
   131dc:	4681      	mov	r9, r0
   131de:	2800      	cmp	r0, #0
   131e0:	d09a      	beq.n	13118 <ull_conn_llcp+0x43c>
	if (!lll->role) {
   131e2:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   131e6:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   131e8:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   131ec:	f280 8300 	bge.w	137f0 <ull_conn_llcp+0xb14>
	else if (!lll->enc_rx) {
   131f0:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   131f4:	0719      	lsls	r1, r3, #28
   131f6:	f100 8406 	bmi.w	13a06 <ull_conn_llcp+0xd2a>
		if (conn->llcp.encryption.error_code) {
   131fa:	f894 80f5 	ldrb.w	r8, [r4, #245]	; 0xf5
   131fe:	f1b8 0f00 	cmp.w	r8, #0
   13202:	f040 8495 	bne.w	13b30 <ull_conn_llcp+0xe54>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   13206:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   1320a:	463b      	mov	r3, r7
   1320c:	4642      	mov	r2, r8
   1320e:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   13212:	f204 1071 	addw	r0, r4, #369	; 0x171
   13216:	f004 ff17 	bl	18048 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   1321a:	4639      	mov	r1, r7
   1321c:	2210      	movs	r2, #16
   1321e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   13222:	f00a fbf3 	bl	1da0c <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   13226:	2208      	movs	r2, #8
   13228:	f104 0194 	add.w	r1, r4, #148	; 0x94
   1322c:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   13230:	f00a fbec 	bl	1da0c <memcpy>
			lll->ccm_rx.direction = 1U;
   13234:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
			lll->ccm_rx.counter = 0U;
   13238:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
			lll->ccm_rx.direction = 1U;
   1323c:	f043 0301 	orr.w	r3, r3, #1
   13240:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
			lll->ccm_tx.direction = 0U;
   13244:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
			lll->ccm_rx.counter = 0U;
   13248:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
			lll->ccm_tx.direction = 0U;
   1324c:	f368 0300 	bfi	r3, r8, #0, #1
   13250:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
			lll->enc_rx = 1U;
   13254:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
			lll->ccm_rx.counter = 0U;
   13258:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
			lll->enc_rx = 1U;
   1325c:	f043 0308 	orr.w	r3, r3, #8
   13260:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13264:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   13268:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1326c:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   13270:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
			lll->ccm_rx.counter = 0U;
   13274:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   13278:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1327c:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   13280:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13284:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   13288:	2301      	movs	r3, #1
   1328a:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1328e:	2305      	movs	r3, #5
   13290:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   13294:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13298:	2b00      	cmp	r3, #0
   1329a:	f000 8362 	beq.w	13962 <ull_conn_llcp+0xc86>
	    !conn->llcp_enc.pause_tx &&
   1329e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   132a2:	0792      	lsls	r2, r2, #30
   132a4:	f100 835d 	bmi.w	13962 <ull_conn_llcp+0xc86>
	    !conn->llcp_phy.pause_tx &&
   132a8:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   132ac:	07d7      	lsls	r7, r2, #31
   132ae:	f100 8358 	bmi.w	13962 <ull_conn_llcp+0xc86>
		if (conn->tx_head == conn->tx_data) {
   132b2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   132b6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   132b8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   132bc:	f000 8631 	beq.w	13f22 <ull_conn_llcp+0x1246>
		} else if (!conn->tx_ctrl) {
   132c0:	2a00      	cmp	r2, #0
   132c2:	f000 86ed 	beq.w	140a0 <ull_conn_llcp+0x13c4>
	tx->next = conn->tx_ctrl_last->next;
   132c6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   132ca:	681a      	ldr	r2, [r3, #0]
   132cc:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   132d0:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   132d4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   132d8:	f8d9 3000 	ldr.w	r3, [r9]
   132dc:	2b00      	cmp	r3, #0
   132de:	f000 82fa 	beq.w	138d6 <ull_conn_llcp+0xbfa>
	conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   132e2:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   132e6:	f994 c039 	ldrsb.w	ip, [r4, #57]	; 0x39
   132ea:	f043 0303 	orr.w	r3, r3, #3
   132ee:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
   132f2:	e506      	b.n	12d02 <ull_conn_llcp+0x26>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   132f4:	485c      	ldr	r0, [pc, #368]	; (13468 <ull_conn_llcp+0x78c>)
   132f6:	f7f8 fa13 	bl	b720 <mem_acquire>
		if (tx) {
   132fa:	4605      	mov	r5, r0
   132fc:	2800      	cmp	r0, #0
   132fe:	f43f ad03 	beq.w	12d08 <ull_conn_llcp+0x2c>
			conn->llcp.chan_map.instant = event_counter +
   13302:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			conn->llcp.chan_map.initiate = 0U;
   13304:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13308:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   1330a:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   1330c:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   13310:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   13312:	f884 10e8 	strb.w	r1, [r4, #232]	; 0xe8
			conn->llcp.chan_map.instant = event_counter +
   13316:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1331a:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   1331e:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   13320:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13322:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   13324:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   13326:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   13328:	2205      	movs	r2, #5
   1332a:	f104 01e9 	add.w	r1, r4, #233	; 0xe9
   1332e:	3008      	adds	r0, #8
   13330:	f00a fb6c 	bl	1da0c <memcpy>
	    conn->tx_head &&
   13334:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   13338:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
   1333c:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   13340:	2b00      	cmp	r3, #0
   13342:	f000 81dc 	beq.w	136fe <ull_conn_llcp+0xa22>
	    !conn->llcp_enc.pause_tx &&
   13346:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   1334a:	0797      	lsls	r7, r2, #30
   1334c:	f100 81d7 	bmi.w	136fe <ull_conn_llcp+0xa22>
	    !conn->llcp_phy.pause_tx &&
   13350:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13354:	07d6      	lsls	r6, r2, #31
   13356:	f100 81d2 	bmi.w	136fe <ull_conn_llcp+0xa22>
		if (conn->tx_head == conn->tx_data) {
   1335a:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   1335e:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   13360:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13364:	f000 8501 	beq.w	13d6a <ull_conn_llcp+0x108e>
		} else if (!conn->tx_ctrl) {
   13368:	2a00      	cmp	r2, #0
   1336a:	f000 8620 	beq.w	13fae <ull_conn_llcp+0x12d2>
	tx->next = conn->tx_ctrl_last->next;
   1336e:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13372:	681a      	ldr	r2, [r3, #0]
   13374:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   13376:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   13378:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1337a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1337e:	2b00      	cmp	r3, #0
   13380:	f47f acc2 	bne.w	12d08 <ull_conn_llcp+0x2c>
		conn->tx_data_last = tx;
   13384:	f8c4 51d4 	str.w	r5, [r4, #468]	; 0x1d4
   13388:	e4be      	b.n	12d08 <ull_conn_llcp+0x2c>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   1338a:	f894 1121 	ldrb.w	r1, [r4, #289]	; 0x121
   1338e:	f894 e120 	ldrb.w	lr, [r4, #288]	; 0x120
   13392:	4571      	cmp	r1, lr
   13394:	d06a      	beq.n	1346c <ull_conn_llcp+0x790>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   13396:	eba1 010e 	sub.w	r1, r1, lr
   1339a:	07c8      	lsls	r0, r1, #31
   1339c:	f57f acb1 	bpl.w	12d02 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   133a0:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   133a4:	f013 0701 	ands.w	r7, r3, #1
   133a8:	f000 81b4 	beq.w	13714 <ull_conn_llcp+0xa38>
		rx = ll_pdu_rx_alloc();
   133ac:	f7fb ffb4 	bl	f318 <ll_pdu_rx_alloc>
		if (!rx) {
   133b0:	4607      	mov	r7, r0
   133b2:	2800      	cmp	r0, #0
   133b4:	f000 8186 	beq.w	136c4 <ull_conn_llcp+0x9e8>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   133b8:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
   133bc:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   133c0:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   133c2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   133c4:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   133c6:	f043 0303 	orr.w	r3, r3, #3
   133ca:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   133cc:	2309      	movs	r3, #9
   133ce:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   133d0:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   133d2:	2303      	movs	r3, #3
   133d4:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   133d6:	4641      	mov	r1, r8
   133d8:	2208      	movs	r2, #8
   133da:	3020      	adds	r0, #32
   133dc:	f00a fb21 	bl	1da22 <memset>
		sys_put_le64(conn->llcp_feature.features_peer,
   133e0:	e9d4 234c 	ldrd	r2, r3, [r4, #304]	; 0x130
	sys_put_le16(val >> 16, &dst[2]);
   133e4:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   133e6:	f887 2020 	strb.w	r2, [r7, #32]
	dst[1] = val >> 8;
   133ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
   133ee:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	sys_put_le16(val >> 16, &dst[2]);
   133f2:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   133f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
   133f8:	f887 1022 	strb.w	r1, [r7, #34]	; 0x22
	dst[1] = val >> 8;
   133fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
   13400:	0a09      	lsrs	r1, r1, #8
	dst[0] = val;
   13402:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
	dst[1] = val >> 8;
   13406:	0a12      	lsrs	r2, r2, #8
   13408:	f887 1023 	strb.w	r1, [r7, #35]	; 0x23
   1340c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
   13410:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
		ll_rx_put(rx->hdr.link, rx);
   13414:	4639      	mov	r1, r7
	ll_rx_put(rx->hdr.link, rx);
   13416:	6808      	ldr	r0, [r1, #0]
   13418:	f7fb ff50 	bl	f2bc <ll_rx_put>
	ll_rx_sched();
   1341c:	f7fb ff58 	bl	f2d0 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13420:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13424:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
   13428:	e463      	b.n	12cf2 <ull_conn_llcp+0x16>
				conn->procedure_expire++;
   1342a:	3301      	adds	r3, #1
   1342c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   13430:	e473      	b.n	12d1a <ull_conn_llcp+0x3e>
			tx->next = conn->tx_head;
   13432:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13434:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13438:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1343c:	2b00      	cmp	r3, #0
   1343e:	f47f ad0b 	bne.w	12e58 <ull_conn_llcp+0x17c>
   13442:	e676      	b.n	13132 <ull_conn_llcp+0x456>
		if (!conn->tx_ctrl) {
   13444:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13448:	2a00      	cmp	r2, #0
   1344a:	f47f ad5a 	bne.w	12f02 <ull_conn_llcp+0x226>
			tx->next = conn->tx_head;
   1344e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13450:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13454:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13458:	e55b      	b.n	12f12 <ull_conn_llcp+0x236>
   1345a:	bf00      	nop
   1345c:	00021da4 	.word	0x00021da4
   13460:	000218a4 	.word	0x000218a4
   13464:	0002180c 	.word	0x0002180c
   13468:	20001fdc 	.word	0x20001fdc
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   1346c:	f894 1139 	ldrb.w	r1, [r4, #313]	; 0x139
   13470:	f894 e138 	ldrb.w	lr, [r4, #312]	; 0x138
   13474:	4571      	cmp	r1, lr
   13476:	d02f      	beq.n	134d8 <ull_conn_llcp+0x7fc>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   13478:	eba1 010e 	sub.w	r1, r1, lr
   1347c:	07cf      	lsls	r7, r1, #31
   1347e:	f57f ac40 	bpl.w	12d02 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   13482:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   13486:	07d8      	lsls	r0, r3, #31
   13488:	f140 82fe 	bpl.w	13a88 <ull_conn_llcp+0xdac>
	} else if (conn->llcp_version.rx) {
   1348c:	079b      	lsls	r3, r3, #30
   1348e:	f140 82e8 	bpl.w	13a62 <ull_conn_llcp+0xd86>
		rx = ll_pdu_rx_alloc();
   13492:	f7fb ff41 	bl	f318 <ll_pdu_rx_alloc>
		if (!rx) {
   13496:	4601      	mov	r1, r0
   13498:	2800      	cmp	r0, #0
   1349a:	f000 8113 	beq.w	136c4 <ull_conn_llcp+0x9e8>
		conn->llcp_version.ack = conn->llcp_version.req;
   1349e:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   134a2:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
		rx->hdr.handle = conn->lll.handle;
   134a6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   134a8:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   134aa:	2303      	movs	r3, #3
   134ac:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   134ae:	7f03      	ldrb	r3, [r0, #28]
   134b0:	f043 0303 	orr.w	r3, r3, #3
   134b4:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   134b6:	2306      	movs	r3, #6
   134b8:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   134ba:	230c      	movs	r3, #12
   134bc:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   134be:	f894 313b 	ldrb.w	r3, [r4, #315]	; 0x13b
   134c2:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   134c6:	f8b4 313c 	ldrh.w	r3, [r4, #316]	; 0x13c
   134ca:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   134ce:	f8b4 313e 	ldrh.w	r3, [r4, #318]	; 0x13e
   134d2:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
		ll_rx_put(rx->hdr.link, rx);
   134d6:	e79e      	b.n	13416 <ull_conn_llcp+0x73a>
		} else if (conn->llcp_conn_param.ack !=
   134d8:	f894 e185 	ldrb.w	lr, [r4, #389]	; 0x185
   134dc:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   134e0:	458e      	cmp	lr, r1
   134e2:	f000 81fb 	beq.w	138dc <ull_conn_llcp+0xc00>
	return conn_upd_curr && (conn_upd_curr != conn);
   134e6:	f8df 8300 	ldr.w	r8, [pc, #768]	; 137e8 <ull_conn_llcp+0xb0c>
   134ea:	f8d8 1000 	ldr.w	r1, [r8]
   134ee:	2900      	cmp	r1, #0
   134f0:	f000 8364 	beq.w	13bbc <ull_conn_llcp+0xee0>
   134f4:	428c      	cmp	r4, r1
   134f6:	f47f ac04 	bne.w	12d02 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   134fa:	f894 1186 	ldrb.w	r1, [r4, #390]	; 0x186
   134fe:	f001 0107 	and.w	r1, r1, #7
   13502:	2905      	cmp	r1, #5
   13504:	f200 875c 	bhi.w	143c0 <ull_conn_llcp+0x16e4>
   13508:	f20f 0e04 	addw	lr, pc, #4
   1350c:	f85e f021 	ldr.w	pc, [lr, r1, lsl #2]
   13510:	000135ff 	.word	0x000135ff
   13514:	00013579 	.word	0x00013579
   13518:	00013529 	.word	0x00013529
   1351c:	00012cf3 	.word	0x00012cf3
   13520:	00012cf3 	.word	0x00012cf3
   13524:	00012cf3 	.word	0x00012cf3
	if (conn->llcp_enc.pause_tx) {
   13528:	07bb      	lsls	r3, r7, #30
   1352a:	f53f abea 	bmi.w	12d02 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   1352e:	f7fb fef3 	bl	f318 <ll_pdu_rx_alloc>
	if (!rx) {
   13532:	4601      	mov	r1, r0
   13534:	2800      	cmp	r0, #0
   13536:	f000 80c5 	beq.w	136c4 <ull_conn_llcp+0x9e8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1353a:	f894 0186 	ldrb.w	r0, [r4, #390]	; 0x186
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1353e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   13540:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13542:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   13546:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1354a:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   1354c:	f884 0186 	strb.w	r0, [r4, #390]	; 0x186
	rx->hdr.handle = conn->lll.handle;
   13550:	8d20      	ldrh	r0, [r4, #40]	; 0x28
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13552:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13554:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   13556:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   13558:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   1355c:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   1355e:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
   13562:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   13564:	f8b4 318c 	ldrh.w	r3, [r4, #396]	; 0x18c
   13568:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1356a:	f8b4 318e 	ldrh.w	r3, [r4, #398]	; 0x18e
   1356e:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13570:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   13572:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13574:	77cb      	strb	r3, [r1, #31]
   13576:	e74e      	b.n	13416 <ull_conn_llcp+0x73a>
	if (conn->llcp_conn_param.status) {
   13578:	f894 3187 	ldrb.w	r3, [r4, #391]	; 0x187
   1357c:	2b00      	cmp	r3, #0
   1357e:	f040 8470 	bne.w	13e62 <ull_conn_llcp+0x1186>
	if (!conn->lll.role) {
   13582:	2a00      	cmp	r2, #0
   13584:	f2c0 85ef 	blt.w	14166 <ull_conn_llcp+0x148a>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13588:	f894 2186 	ldrb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   1358c:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13590:	2105      	movs	r1, #5
   13592:	f361 0202 	bfi	r2, r1, #0, #3
		preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   13596:	f894 1190 	ldrb.w	r1, [r4, #400]	; 0x190
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1359a:	f884 2186 	strb.w	r2, [r4, #390]	; 0x186
		conn->llcp_cu.win_size = 1U;
   1359e:	2001      	movs	r0, #1
		interval_max = conn->llcp_conn_param.interval_max;
   135a0:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
		conn->llcp_cu.win_size = 1U;
   135a4:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c
		if (preferred_periodicity) {
   135a8:	2900      	cmp	r1, #0
   135aa:	f000 859b 	beq.w	140e4 <ull_conn_llcp+0x1408>
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   135ae:	fbb2 f3f1 	udiv	r3, r2, r1
   135b2:	fb13 f301 	smulbb	r3, r3, r1
			if (conn->llcp_cu.interval < conn->llcp_conn_param.interval_min) {
   135b6:	f8b4 1188 	ldrh.w	r1, [r4, #392]	; 0x188
			conn->llcp_cu.interval = (interval_max / preferred_periodicity) *
   135ba:	b29b      	uxth	r3, r3
				conn->llcp_cu.interval = interval_max;
   135bc:	4299      	cmp	r1, r3
   135be:	bf98      	it	ls
   135c0:	461a      	movls	r2, r3
   135c2:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   135c6:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   135ca:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   135ce:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   135d2:	f8a4 1112 	strh.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   135d6:	f3c3 03c0 	ubfx	r3, r3, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   135da:	00db      	lsls	r3, r3, #3
   135dc:	f022 020f 	bic.w	r2, r2, #15
   135e0:	f043 0302 	orr.w	r3, r3, #2
   135e4:	4313      	orrs	r3, r2
		conn->llcp_cu.ack--;
   135e6:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   135ea:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   135ee:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   135f2:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
		conn->llcp_cu.ack--;
   135f6:	f884 910d 	strb.w	r9, [r4, #269]	; 0x10d
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   135fa:	f7ff bb85 	b.w	12d08 <ull_conn_llcp+0x2c>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   135fe:	487b      	ldr	r0, [pc, #492]	; (137ec <ull_conn_llcp+0xb10>)
			event_counter = lll->event_counter +
   13600:	8e67      	ldrh	r7, [r4, #50]	; 0x32
					lll->latency_prepare + lazy;
   13602:	f8b4 902e 	ldrh.w	r9, [r4, #46]	; 0x2e
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13606:	f7f8 f88b 	bl	b720 <mem_acquire>
	if (!tx) {
   1360a:	4602      	mov	r2, r0
   1360c:	2800      	cmp	r0, #0
   1360e:	d059      	beq.n	136c4 <ull_conn_llcp+0x9e8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13610:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   13612:	f8c8 4000 	str.w	r4, [r8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13616:	f043 0303 	orr.w	r3, r3, #3
   1361a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   1361c:	2318      	movs	r3, #24
   1361e:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   13620:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
   13624:	8110      	strh	r0, [r2, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   13626:	f8b4 018a 	ldrh.w	r0, [r4, #394]	; 0x18a
   1362a:	8150      	strh	r0, [r2, #10]
	p->preferred_periodicity = 0U;
   1362c:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   1362e:	f8b4 018c 	ldrh.w	r0, [r4, #396]	; 0x18c
   13632:	8190      	strh	r0, [r2, #12]
			event_counter = lll->event_counter +
   13634:	eb07 0109 	add.w	r1, r7, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   13638:	f8b4 018e 	ldrh.w	r0, [r4, #398]	; 0x18e
	p->preferred_periodicity = 0U;
   1363c:	7413      	strb	r3, [r2, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   1363e:	74d3      	strb	r3, [r2, #19]
   13640:	7513      	strb	r3, [r2, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   13642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   13646:	81d0      	strh	r0, [r2, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   13648:	7553      	strb	r3, [r2, #21]
   1364a:	7593      	strb	r3, [r2, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   1364c:	75d3      	strb	r3, [r2, #23]
   1364e:	7613      	strb	r3, [r2, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   13650:	7653      	strb	r3, [r2, #25]
   13652:	7693      	strb	r3, [r2, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   13654:	76d3      	strb	r3, [r2, #27]
   13656:	7713      	strb	r3, [r2, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   13658:	7753      	strb	r3, [r2, #29]
   1365a:	7793      	strb	r3, [r2, #30]
					lll->latency_prepare + lazy;
   1365c:	4431      	add	r1, r6
	conn->procedure_expire = conn->procedure_reload;
   1365e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13662:	200f      	movs	r0, #15
   13664:	71d0      	strb	r0, [r2, #7]
	conn->procedure_expire = conn->procedure_reload;
   13666:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1366a:	f8a2 1011 	strh.w	r1, [r2, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   1366e:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   13672:	2104      	movs	r1, #4
   13674:	f361 0302 	bfi	r3, r1, #0, #3
   13678:	f884 3186 	strb.w	r3, [r4, #390]	; 0x186
	    conn->tx_head &&
   1367c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13680:	2b00      	cmp	r3, #0
   13682:	f000 83ca 	beq.w	13e1a <ull_conn_llcp+0x113e>
	    !conn->llcp_enc.pause_tx &&
   13686:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   1368a:	078f      	lsls	r7, r1, #30
   1368c:	f100 83c5 	bmi.w	13e1a <ull_conn_llcp+0x113e>
	    !conn->llcp_phy.pause_tx &&
   13690:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   13694:	07c8      	lsls	r0, r1, #31
   13696:	f100 83c0 	bmi.w	13e1a <ull_conn_llcp+0x113e>
		if (conn->tx_head == conn->tx_data) {
   1369a:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   1369e:	428b      	cmp	r3, r1
		if (!conn->tx_ctrl) {
   136a0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   136a4:	f000 85fe 	beq.w	142a4 <ull_conn_llcp+0x15c8>
		} else if (!conn->tx_ctrl) {
   136a8:	2900      	cmp	r1, #0
   136aa:	f000 862a 	beq.w	14302 <ull_conn_llcp+0x1626>
	tx->next = conn->tx_ctrl_last->next;
   136ae:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   136b2:	6819      	ldr	r1, [r3, #0]
   136b4:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   136b6:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   136b8:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   136bc:	6813      	ldr	r3, [r2, #0]
   136be:	2b00      	cmp	r3, #0
   136c0:	f000 845b 	beq.w	13f7a <ull_conn_llcp+0x129e>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   136c4:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   136c8:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		return;
   136cc:	f7ff bb11 	b.w	12cf2 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   136d0:	f894 30d9 	ldrb.w	r3, [r4, #217]	; 0xd9
   136d4:	2b00      	cmp	r3, #0
   136d6:	f43f acc4 	beq.w	13062 <ull_conn_llcp+0x386>
			conn->slave.llcp_type = LLCP_NONE;
   136da:	f884 20d9 	strb.w	r2, [r4, #217]	; 0xd9
   136de:	e4c4      	b.n	1306a <ull_conn_llcp+0x38e>
		conn->tx_data_last = tx;
   136e0:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   136e4:	e418      	b.n	12f18 <ull_conn_llcp+0x23c>
		if (!conn->tx_ctrl) {
   136e6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   136ea:	2a00      	cmp	r2, #0
   136ec:	f47f ad60 	bne.w	131b0 <ull_conn_llcp+0x4d4>
			tx->next = conn->tx_head;
   136f0:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   136f4:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   136f8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   136fc:	e563      	b.n	131c6 <ull_conn_llcp+0x4ea>
		if (!conn->tx_ctrl) {
   136fe:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13702:	2a00      	cmp	r2, #0
   13704:	f47f ae33 	bne.w	1336e <ull_conn_llcp+0x692>
			tx->next = conn->tx_head;
   13708:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   1370a:	e9c4 5571 	strd	r5, r5, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1370e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   13712:	e634      	b.n	1337e <ull_conn_llcp+0x6a2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13714:	4835      	ldr	r0, [pc, #212]	; (137ec <ull_conn_llcp+0xb10>)
   13716:	f7f8 f803 	bl	b720 <mem_acquire>
	if (tx) {
   1371a:	4680      	mov	r8, r0
   1371c:	2800      	cmp	r0, #0
   1371e:	d0d1      	beq.n	136c4 <ull_conn_llcp+0x9e8>
		conn->llcp_feature.ack--;
   13720:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
   13724:	3b01      	subs	r3, #1
   13726:	f884 3121 	strb.w	r3, [r4, #289]	; 0x121
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   1372a:	2309      	movs	r3, #9
   1372c:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   1372e:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   13732:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   13734:	7903      	ldrb	r3, [r0, #4]
   13736:	f043 0303 	orr.w	r3, r3, #3
   1373a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   1373c:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   13740:	bfac      	ite	ge
   13742:	2308      	movge	r3, #8
   13744:	230e      	movlt	r3, #14
   13746:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   13748:	4639      	mov	r1, r7
   1374a:	4410      	add	r0, r2
   1374c:	f00a f969 	bl	1da22 <memset>
		sys_put_le64(conn->llcp_feature.features_conn,
   13750:	e9d4 234a 	ldrd	r2, r3, [r4, #296]	; 0x128
	sys_put_le16(val >> 16, &dst[2]);
   13754:	0c11      	lsrs	r1, r2, #16
	dst[0] = val;
   13756:	f888 2008 	strb.w	r2, [r8, #8]
	dst[1] = val >> 8;
   1375a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1375e:	f888 2009 	strb.w	r2, [r8, #9]
	sys_put_le16(val >> 16, &dst[2]);
   13762:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val;
   13764:	f888 300c 	strb.w	r3, [r8, #12]
   13768:	f888 100a 	strb.w	r1, [r8, #10]
	dst[1] = val >> 8;
   1376c:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   13770:	f888 200e 	strb.w	r2, [r8, #14]
	dst[1] = val >> 8;
   13774:	0a09      	lsrs	r1, r1, #8
   13776:	0a12      	lsrs	r2, r2, #8
   13778:	f888 100b 	strb.w	r1, [r8, #11]
   1377c:	f888 300d 	strb.w	r3, [r8, #13]
   13780:	f888 200f 	strb.w	r2, [r8, #15]
	    conn->tx_head &&
   13784:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13788:	2b00      	cmp	r3, #0
   1378a:	f000 80de 	beq.w	1394a <ull_conn_llcp+0xc6e>
	    !conn->llcp_enc.pause_tx &&
   1378e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13792:	0791      	lsls	r1, r2, #30
   13794:	f100 80d9 	bmi.w	1394a <ull_conn_llcp+0xc6e>
	    !conn->llcp_phy.pause_tx &&
   13798:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   1379c:	07d2      	lsls	r2, r2, #31
   1379e:	f100 80d4 	bmi.w	1394a <ull_conn_llcp+0xc6e>
		if (conn->tx_head == conn->tx_data) {
   137a2:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   137a6:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   137a8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   137ac:	f000 8399 	beq.w	13ee2 <ull_conn_llcp+0x1206>
		} else if (!conn->tx_ctrl) {
   137b0:	2a00      	cmp	r2, #0
   137b2:	f000 8536 	beq.w	14222 <ull_conn_llcp+0x1546>
	tx->next = conn->tx_ctrl_last->next;
   137b6:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   137ba:	681a      	ldr	r2, [r3, #0]
   137bc:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   137c0:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   137c4:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   137c8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
	if (!tx->next) {
   137cc:	2b00      	cmp	r3, #0
   137ce:	f000 822b 	beq.w	13c28 <ull_conn_llcp+0xf4c>
		conn->procedure_expire = conn->procedure_reload;
   137d2:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   137d6:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   137da:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->procedure_expire = conn->procedure_reload;
   137de:	f8a4 20c8 	strh.w	r2, [r4, #200]	; 0xc8
	break;
   137e2:	f7ff ba86 	b.w	12cf2 <ull_conn_llcp+0x16>
   137e6:	bf00      	nop
   137e8:	20001f50 	.word	0x20001f50
   137ec:	20001fdc 	.word	0x20001fdc
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   137f0:	f104 077b 	add.w	r7, r4, #123	; 0x7b
   137f4:	463b      	mov	r3, r7
   137f6:	4642      	mov	r2, r8
   137f8:	f104 01f6 	add.w	r1, r4, #246	; 0xf6
   137fc:	f204 1071 	addw	r0, r4, #369	; 0x171
   13800:	f004 fc22 	bl	18048 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   13804:	4639      	mov	r1, r7
   13806:	2210      	movs	r2, #16
   13808:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1380c:	f00a f8fe 	bl	1da0c <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   13810:	2208      	movs	r2, #8
   13812:	f104 0194 	add.w	r1, r4, #148	; 0x94
   13816:	f104 00b5 	add.w	r0, r4, #181	; 0xb5
   1381a:	f00a f8f7 	bl	1da0c <memcpy>
		lll->ccm_rx.direction = 0;
   1381e:	f894 3093 	ldrb.w	r3, [r4, #147]	; 0x93
		lll->ccm_rx.counter = 0;
   13822:	f884 808b 	strb.w	r8, [r4, #139]	; 0x8b
		lll->ccm_rx.direction = 0;
   13826:	f368 0300 	bfi	r3, r8, #0, #1
   1382a:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		lll->ccm_tx.direction = 1;
   1382e:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
		lll->ccm_rx.counter = 0;
   13832:	f884 808c 	strb.w	r8, [r4, #140]	; 0x8c
		lll->ccm_tx.direction = 1;
   13836:	f043 0301 	orr.w	r3, r3, #1
   1383a:	f884 30b4 	strb.w	r3, [r4, #180]	; 0xb4
		lll->enc_rx = 1;
   1383e:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
		lll->ccm_rx.counter = 0;
   13842:	f884 808d 	strb.w	r8, [r4, #141]	; 0x8d
		lll->enc_rx = 1;
   13846:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   1384a:	e9c4 882b 	strd	r8, r8, [r4, #172]	; 0xac
		lll->ccm_rx.counter = 0;
   1384e:	f884 808e 	strb.w	r8, [r4, #142]	; 0x8e
   13852:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
   13856:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
   1385a:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
   1385e:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
		lll->enc_rx = 1;
   13862:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	if (!pdu_ctrl_tx) {
   13866:	f1ba 0f00 	cmp.w	sl, #0
   1386a:	f000 81e7 	beq.w	13c3c <ull_conn_llcp+0xf60>
	conn->lll.enc_tx = 1;
   1386e:	b2db      	uxtb	r3, r3
   13870:	f043 0310 	orr.w	r3, r3, #16
   13874:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13878:	f899 3004 	ldrb.w	r3, [r9, #4]
   1387c:	f043 0303 	orr.w	r3, r3, #3
   13880:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13884:	2301      	movs	r3, #1
   13886:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   1388a:	e9d4 1e71 	ldrd	r1, lr, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1388e:	2306      	movs	r3, #6
   13890:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   13894:	2900      	cmp	r1, #0
   13896:	d048      	beq.n	1392a <ull_conn_llcp+0xc4e>
	    !conn->llcp_enc.pause_tx &&
   13898:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   1389c:	079f      	lsls	r7, r3, #30
   1389e:	d444      	bmi.n	1392a <ull_conn_llcp+0xc4e>
	    !conn->llcp_phy.pause_tx &&
   138a0:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   138a4:	07d8      	lsls	r0, r3, #31
   138a6:	d440      	bmi.n	1392a <ull_conn_llcp+0xc4e>
		if (conn->tx_head == conn->tx_data) {
   138a8:	f8d4 31d0 	ldr.w	r3, [r4, #464]	; 0x1d0
   138ac:	428b      	cmp	r3, r1
   138ae:	f000 8328 	beq.w	13f02 <ull_conn_llcp+0x1226>
		} else if (!conn->tx_ctrl) {
   138b2:	f1be 0f00 	cmp.w	lr, #0
   138b6:	f000 83e8 	beq.w	1408a <ull_conn_llcp+0x13ae>
	tx->next = conn->tx_ctrl_last->next;
   138ba:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   138be:	681a      	ldr	r2, [r3, #0]
   138c0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   138c4:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   138c8:	f8d9 1000 	ldr.w	r1, [r9]
	conn->tx_ctrl_last = tx;
   138cc:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   138d0:	2900      	cmp	r1, #0
   138d2:	f47f ad06 	bne.w	132e2 <ull_conn_llcp+0x606>
		conn->tx_data_last = tx;
   138d6:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   138da:	e502      	b.n	132e2 <ull_conn_llcp+0x606>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   138dc:	f894 11ad 	ldrb.w	r1, [r4, #429]	; 0x1ad
   138e0:	f894 31ac 	ldrb.w	r3, [r4, #428]	; 0x1ac
   138e4:	4299      	cmp	r1, r3
   138e6:	d048      	beq.n	1397a <ull_conn_llcp+0xc9e>
			event_len_prep(conn);
   138e8:	4620      	mov	r0, r4
   138ea:	f7fd f831 	bl	10950 <event_len_prep>
   138ee:	e6e9      	b.n	136c4 <ull_conn_llcp+0x9e8>
		if (!conn->tx_ctrl) {
   138f0:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   138f4:	2a00      	cmp	r2, #0
   138f6:	f47f ab62 	bne.w	12fbe <ull_conn_llcp+0x2e2>
			tx->next = conn->tx_head;
   138fa:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   138fe:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13902:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   13906:	f7ff bb65 	b.w	12fd4 <ull_conn_llcp+0x2f8>
			conn->tx_data = conn->tx_data->next;
   1390a:	6819      	ldr	r1, [r3, #0]
   1390c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13910:	2a00      	cmp	r2, #0
   13912:	f47f aa96 	bne.w	12e42 <ull_conn_llcp+0x166>
			tx->next = conn->tx_head->next;
   13916:	681a      	ldr	r2, [r3, #0]
   13918:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1391a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1391c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1391e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
	if (!tx->next) {
   13922:	2b00      	cmp	r3, #0
   13924:	f47f aa98 	bne.w	12e58 <ull_conn_llcp+0x17c>
   13928:	e403      	b.n	13132 <ull_conn_llcp+0x456>
		if (!conn->tx_ctrl) {
   1392a:	f1be 0f00 	cmp.w	lr, #0
   1392e:	f000 8166 	beq.w	13bfe <ull_conn_llcp+0xf22>
   13932:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
	tx->next = conn->tx_ctrl_last->next;
   13936:	6803      	ldr	r3, [r0, #0]
   13938:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   1393c:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   13940:	f8d9 1000 	ldr.w	r1, [r9]
	conn->tx_ctrl_last = tx;
   13944:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
}
   13948:	e7c2      	b.n	138d0 <ull_conn_llcp+0xbf4>
		if (!conn->tx_ctrl) {
   1394a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1394e:	2a00      	cmp	r2, #0
   13950:	f47f af31 	bne.w	137b6 <ull_conn_llcp+0xada>
			tx->next = conn->tx_head;
   13954:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   13958:	e9c4 8871 	strd	r8, r8, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   1395c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   13960:	e734      	b.n	137cc <ull_conn_llcp+0xaf0>
		if (!conn->tx_ctrl) {
   13962:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13966:	2a00      	cmp	r2, #0
   13968:	f47f acad 	bne.w	132c6 <ull_conn_llcp+0x5ea>
			tx->next = conn->tx_head;
   1396c:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13970:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13974:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13978:	e4ae      	b.n	132d8 <ull_conn_llcp+0x5fc>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   1397a:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   1397e:	f894 31bd 	ldrb.w	r3, [r4, #445]	; 0x1bd
   13982:	428b      	cmp	r3, r1
   13984:	f43f a9bd 	beq.w	12d02 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   13988:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   1398c:	f003 0703 	and.w	r7, r3, #3
   13990:	2f03      	cmp	r7, #3
   13992:	f000 8320 	beq.w	13fd6 <ull_conn_llcp+0x12fa>
   13996:	2f00      	cmp	r7, #0
   13998:	f47f a9b2 	bne.w	12d00 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1399c:	48c3      	ldr	r0, [pc, #780]	; (13cac <ull_conn_llcp+0xfd0>)
   1399e:	f7f7 febf 	bl	b720 <mem_acquire>
		if (!tx) {
   139a2:	4601      	mov	r1, r0
   139a4:	2800      	cmp	r0, #0
   139a6:	f43f ae8d 	beq.w	136c4 <ull_conn_llcp+0x9e8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   139aa:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		conn->lll.phy_flags = conn->llcp_phy.flags;
   139ae:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   139b2:	2201      	movs	r2, #1
   139b4:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   139b8:	f894 21c0 	ldrb.w	r2, [r4, #448]	; 0x1c0
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   139bc:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->phy_pref_tx = conn->llcp_phy.tx;
   139c0:	f3c3 0782 	ubfx	r7, r3, #2, #3
   139c4:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   139c8:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
   139cc:	f3c0 0040 	ubfx	r0, r0, #1, #1
   139d0:	f360 07c3 	bfi	r7, r0, #3, #1
   139d4:	f884 7060 	strb.w	r7, [r4, #96]	; 0x60
		conn->phy_pref_rx = conn->llcp_phy.rx;
   139d8:	f3c3 1742 	ubfx	r7, r3, #5, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139dc:	7908      	ldrb	r0, [r1, #4]
		conn->phy_pref_rx = conn->llcp_phy.rx;
   139de:	f367 02c5 	bfi	r2, r7, #3, #3
   139e2:	f884 21c0 	strb.w	r2, [r4, #448]	; 0x1c0
		conn->phy_pref_tx = conn->llcp_phy.tx;
   139e6:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   139ea:	2303      	movs	r3, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139ec:	f040 0003 	orr.w	r0, r0, #3
		pdu_ctrl_tx->len =
   139f0:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   139f2:	2316      	movs	r3, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   139f4:	7108      	strb	r0, [r1, #4]
		pr->tx_phys = conn->llcp_phy.tx;
   139f6:	720a      	strb	r2, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   139f8:	724f      	strb	r7, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
   139fa:	2200      	movs	r2, #0
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   139fc:	71cb      	strb	r3, [r1, #7]
	ctrl_tx_pause_enqueue(conn, tx, false);
   139fe:	4620      	mov	r0, r4
   13a00:	f7fc fca8 	bl	10354 <ctrl_tx_pause_enqueue>
   13a04:	e6e5      	b.n	137d2 <ull_conn_llcp+0xaf6>
	if (!pdu_ctrl_tx) {
   13a06:	f1ba 0f00 	cmp.w	sl, #0
   13a0a:	f000 81bc 	beq.w	13d86 <ull_conn_llcp+0x10aa>
	conn->lll.enc_tx = 1;
   13a0e:	f043 0310 	orr.w	r3, r3, #16
   13a12:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13a16:	7903      	ldrb	r3, [r0, #4]
   13a18:	f043 0303 	orr.w	r3, r3, #3
   13a1c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13a1e:	2301      	movs	r3, #1
   13a20:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13a22:	2306      	movs	r3, #6
   13a24:	71c3      	strb	r3, [r0, #7]
	if (tx) {
   13a26:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
	if (
   13a2a:	2b00      	cmp	r3, #0
   13a2c:	d077      	beq.n	13b1e <ull_conn_llcp+0xe42>
	    !conn->llcp_enc.pause_tx &&
   13a2e:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13a32:	0797      	lsls	r7, r2, #30
   13a34:	d473      	bmi.n	13b1e <ull_conn_llcp+0xe42>
	    !conn->llcp_phy.pause_tx &&
   13a36:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13a3a:	07d0      	lsls	r0, r2, #31
   13a3c:	d46f      	bmi.n	13b1e <ull_conn_llcp+0xe42>
		if (conn->tx_head == conn->tx_data) {
   13a3e:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13a42:	429a      	cmp	r2, r3
   13a44:	f000 828a 	beq.w	13f5c <ull_conn_llcp+0x1280>
		} else if (!conn->tx_ctrl) {
   13a48:	f1bc 0f00 	cmp.w	ip, #0
   13a4c:	f47f ac3b 	bne.w	132c6 <ull_conn_llcp+0x5ea>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13a50:	791a      	ldrb	r2, [r3, #4]
   13a52:	f002 0203 	and.w	r2, r2, #3
   13a56:	2a03      	cmp	r2, #3
   13a58:	f000 846d 	beq.w	14336 <ull_conn_llcp+0x165a>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13a5c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13a60:	e431      	b.n	132c6 <ull_conn_llcp+0x5ea>
		LL_ASSERT(0);
   13a62:	4a93      	ldr	r2, [pc, #588]	; (13cb0 <ull_conn_llcp+0xfd4>)
   13a64:	4993      	ldr	r1, [pc, #588]	; (13cb4 <ull_conn_llcp+0xfd8>)
   13a66:	f640 530b 	movw	r3, #3339	; 0xd0b
		LL_ASSERT(0);
   13a6a:	4893      	ldr	r0, [pc, #588]	; (13cb8 <ull_conn_llcp+0xfdc>)
   13a6c:	f007 fe82 	bl	1b774 <printk>
   13a70:	4040      	eors	r0, r0
   13a72:	f380 8811 	msr	BASEPRI, r0
   13a76:	f04f 0003 	mov.w	r0, #3
   13a7a:	df02      	svc	2
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13a7c:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13a80:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		break;
   13a84:	f7ff b935 	b.w	12cf2 <ull_conn_llcp+0x16>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13a88:	4888      	ldr	r0, [pc, #544]	; (13cac <ull_conn_llcp+0xfd0>)
   13a8a:	f7f7 fe49 	bl	b720 <mem_acquire>
		if (tx) {
   13a8e:	2800      	cmp	r0, #0
   13a90:	f43f ae18 	beq.w	136c4 <ull_conn_llcp+0x9e8>
			conn->llcp_version.ack--;
   13a94:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   13a98:	3b01      	subs	r3, #1
   13a9a:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			conn->llcp_version.tx = 1U;
   13a9e:	f894 313a 	ldrb.w	r3, [r4, #314]	; 0x13a
   13aa2:	f043 0301 	orr.w	r3, r3, #1
   13aa6:	f884 313a 	strb.w	r3, [r4, #314]	; 0x13a
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   13aaa:	7903      	ldrb	r3, [r0, #4]
   13aac:	f043 0303 	orr.w	r3, r3, #3
   13ab0:	7103      	strb	r3, [r0, #4]
			pdu->len =
   13ab2:	2306      	movs	r3, #6
   13ab4:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   13ab6:	230c      	movs	r3, #12
   13ab8:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   13aba:	230b      	movs	r3, #11
   13abc:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   13abe:	f06f 030e 	mvn.w	r3, #14
   13ac2:	7243      	strb	r3, [r0, #9]
   13ac4:	2305      	movs	r3, #5
   13ac6:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   13ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13acc:	72c3      	strb	r3, [r0, #11]
   13ace:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   13ad0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13ad4:	2b00      	cmp	r3, #0
   13ad6:	f000 810a 	beq.w	13cee <ull_conn_llcp+0x1012>
	    !conn->llcp_enc.pause_tx &&
   13ada:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13ade:	0791      	lsls	r1, r2, #30
   13ae0:	f100 8105 	bmi.w	13cee <ull_conn_llcp+0x1012>
	    !conn->llcp_phy.pause_tx &&
   13ae4:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13ae8:	07d2      	lsls	r2, r2, #31
   13aea:	f100 8100 	bmi.w	13cee <ull_conn_llcp+0x1012>
		if (conn->tx_head == conn->tx_data) {
   13aee:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13af2:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   13af4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13af8:	f000 8303 	beq.w	14102 <ull_conn_llcp+0x1426>
		} else if (!conn->tx_ctrl) {
   13afc:	2a00      	cmp	r2, #0
   13afe:	f000 843e 	beq.w	1437e <ull_conn_llcp+0x16a2>
	tx->next = conn->tx_ctrl_last->next;
   13b02:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13b06:	681a      	ldr	r2, [r3, #0]
   13b08:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13b0a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   13b0c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13b10:	6803      	ldr	r3, [r0, #0]
   13b12:	2b00      	cmp	r3, #0
   13b14:	f47f ae5d 	bne.w	137d2 <ull_conn_llcp+0xaf6>
		conn->tx_data_last = tx;
   13b18:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
			conn->procedure_expire = conn->procedure_reload;
   13b1c:	e659      	b.n	137d2 <ull_conn_llcp+0xaf6>
		if (!conn->tx_ctrl) {
   13b1e:	f1bc 0f00 	cmp.w	ip, #0
   13b22:	f47f abd0 	bne.w	132c6 <ull_conn_llcp+0x5ea>
   13b26:	e721      	b.n	1396c <ull_conn_llcp+0xc90>
		conn->tx_data_last = tx;
   13b28:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
   13b2c:	f7ff ba55 	b.w	12fda <ull_conn_llcp+0x2fe>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   13b30:	7903      	ldrb	r3, [r0, #4]
   13b32:	f043 0303 	orr.w	r3, r3, #3
   13b36:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   13b38:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   13b3c:	07da      	lsls	r2, r3, #31
   13b3e:	d576      	bpl.n	13c2e <ull_conn_llcp+0xf52>
	    (conn->llcp_feature.features_conn &
   13b40:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   13b44:	075b      	lsls	r3, r3, #29
   13b46:	d572      	bpl.n	13c2e <ull_conn_llcp+0xf52>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   13b48:	2311      	movs	r3, #17
   13b4a:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   13b4c:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   13b4e:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   13b52:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   13b54:	f889 7005 	strb.w	r7, [r9, #5]
	conn->llcp.encryption.error_code = 0U;
   13b58:	2300      	movs	r3, #0
   13b5a:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
	    conn->tx_head &&
   13b5e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	if (
   13b62:	2b00      	cmp	r3, #0
   13b64:	d040      	beq.n	13be8 <ull_conn_llcp+0xf0c>
	    !conn->llcp_enc.pause_tx &&
   13b66:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13b6a:	0790      	lsls	r0, r2, #30
   13b6c:	d43c      	bmi.n	13be8 <ull_conn_llcp+0xf0c>
	    !conn->llcp_phy.pause_tx &&
   13b6e:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13b72:	07d1      	lsls	r1, r2, #31
   13b74:	d438      	bmi.n	13be8 <ull_conn_llcp+0xf0c>
		if (conn->tx_head == conn->tx_data) {
   13b76:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13b7a:	4293      	cmp	r3, r2
		if (!conn->tx_ctrl) {
   13b7c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13b80:	f000 82e3 	beq.w	1414a <ull_conn_llcp+0x146e>
		} else if (!conn->tx_ctrl) {
   13b84:	2a00      	cmp	r2, #0
   13b86:	f000 83b4 	beq.w	142f2 <ull_conn_llcp+0x1616>
	tx->next = conn->tx_ctrl_last->next;
   13b8a:	f8d4 31cc 	ldr.w	r3, [r4, #460]	; 0x1cc
   13b8e:	681a      	ldr	r2, [r3, #0]
   13b90:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   13b94:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   13b98:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13b9c:	f8d9 3000 	ldr.w	r3, [r9]
   13ba0:	2b00      	cmp	r3, #0
   13ba2:	f000 80ce 	beq.w	13d42 <ull_conn_llcp+0x1066>
			conn->llcp_ack = conn->llcp_req;
   13ba6:	f894 10d9 	ldrb.w	r1, [r4, #217]	; 0xd9
   13baa:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13bae:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   13bb2:	2900      	cmp	r1, #0
   13bb4:	f43f a8a8 	beq.w	12d08 <ull_conn_llcp+0x2c>
   13bb8:	f7ff b8f9 	b.w	12dae <ull_conn_llcp+0xd2>
	switch (conn->llcp_conn_param.state) {
   13bbc:	f894 3186 	ldrb.w	r3, [r4, #390]	; 0x186
   13bc0:	f003 0307 	and.w	r3, r3, #7
   13bc4:	2b05      	cmp	r3, #5
   13bc6:	f200 83fb 	bhi.w	143c0 <ull_conn_llcp+0x16e4>
   13bca:	a101      	add	r1, pc, #4	; (adr r1, 13bd0 <ull_conn_llcp+0xef4>)
   13bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   13bd0:	000135ff 	.word	0x000135ff
   13bd4:	00013579 	.word	0x00013579
   13bd8:	00013529 	.word	0x00013529
   13bdc:	00012d03 	.word	0x00012d03
   13be0:	00012d03 	.word	0x00012d03
   13be4:	00012d03 	.word	0x00012d03
		if (!conn->tx_ctrl) {
   13be8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13bec:	2a00      	cmp	r2, #0
   13bee:	d1cc      	bne.n	13b8a <ull_conn_llcp+0xeae>
			tx->next = conn->tx_head;
   13bf0:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   13bf4:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13bf8:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13bfc:	e7ce      	b.n	13b9c <ull_conn_llcp+0xec0>
			tx->next = conn->tx_head;
   13bfe:	f8c9 1000 	str.w	r1, [r9]
				conn->tx_ctrl = tx;
   13c02:	e9c4 9971 	strd	r9, r9, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13c06:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   13c0a:	e661      	b.n	138d0 <ull_conn_llcp+0xbf4>
			conn->tx_data = conn->tx_data->next;
   13c0c:	6819      	ldr	r1, [r3, #0]
   13c0e:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13c12:	2a00      	cmp	r2, #0
   13c14:	f47f a975 	bne.w	12f02 <ull_conn_llcp+0x226>
			tx->next = conn->tx_head->next;
   13c18:	681a      	ldr	r2, [r3, #0]
   13c1a:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   13c1c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   13c1e:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   13c20:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   13c24:	f7ff b975 	b.w	12f12 <ull_conn_llcp+0x236>
		conn->tx_data_last = tx;
   13c28:	f8c4 81d4 	str.w	r8, [r4, #468]	; 0x1d4
		conn->procedure_expire = conn->procedure_reload;
   13c2c:	e5d1      	b.n	137d2 <ull_conn_llcp+0xaf6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13c2e:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   13c30:	f889 8008 	strb.w	r8, [r9, #8]
   13c34:	2702      	movs	r7, #2
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   13c36:	f889 3007 	strb.w	r3, [r9, #7]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   13c3a:	e78b      	b.n	13b54 <ull_conn_llcp+0xe78>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13c3c:	481b      	ldr	r0, [pc, #108]	; (13cac <ull_conn_llcp+0xfd0>)
   13c3e:	f7f7 fd6f 	bl	b720 <mem_acquire>
		if (!tx) {
   13c42:	4602      	mov	r2, r0
   13c44:	2800      	cmp	r0, #0
   13c46:	f000 8396 	beq.w	14376 <ull_conn_llcp+0x169a>
	conn->lll.enc_tx = 1;
   13c4a:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   13c4e:	f043 0310 	orr.w	r3, r3, #16
   13c52:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13c56:	2301      	movs	r3, #1
   13c58:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13c5a:	7903      	ldrb	r3, [r0, #4]
   13c5c:	f043 0303 	orr.w	r3, r3, #3
   13c60:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   13c62:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13c66:	2106      	movs	r1, #6
   13c68:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   13c6a:	4619      	mov	r1, r3
	if (
   13c6c:	b333      	cbz	r3, 13cbc <ull_conn_llcp+0xfe0>
	    !conn->llcp_enc.pause_tx &&
   13c6e:	f894 0166 	ldrb.w	r0, [r4, #358]	; 0x166
	    conn->tx_head &&
   13c72:	0787      	lsls	r7, r0, #30
   13c74:	d422      	bmi.n	13cbc <ull_conn_llcp+0xfe0>
	    !conn->llcp_phy.pause_tx &&
   13c76:	f894 01bf 	ldrb.w	r0, [r4, #447]	; 0x1bf
   13c7a:	07c0      	lsls	r0, r0, #31
   13c7c:	d41e      	bmi.n	13cbc <ull_conn_llcp+0xfe0>
		if (conn->tx_head == conn->tx_data) {
   13c7e:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13c82:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13c86:	428b      	cmp	r3, r1
   13c88:	f000 815a 	beq.w	13f40 <ull_conn_llcp+0x1264>
		} else if (!conn->tx_ctrl) {
   13c8c:	f1bc 0f00 	cmp.w	ip, #0
   13c90:	f000 81e1 	beq.w	14056 <ull_conn_llcp+0x137a>
	tx->next = conn->tx_ctrl_last->next;
   13c94:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   13c98:	6801      	ldr	r1, [r0, #0]
   13c9a:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   13c9c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last = tx;
   13c9e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13ca2:	6811      	ldr	r1, [r2, #0]
   13ca4:	b371      	cbz	r1, 13d04 <ull_conn_llcp+0x1028>
	    conn->tx_head &&
   13ca6:	4619      	mov	r1, r3
		if (!conn->tx_ctrl) {
   13ca8:	46e6      	mov	lr, ip
   13caa:	e5f5      	b.n	13898 <ull_conn_llcp+0xbbc>
   13cac:	20001fdc 	.word	0x20001fdc
   13cb0:	00021da4 	.word	0x00021da4
   13cb4:	000218a4 	.word	0x000218a4
   13cb8:	0002180c 	.word	0x0002180c
		if (!conn->tx_ctrl) {
   13cbc:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   13cc0:	46e6      	mov	lr, ip
   13cc2:	f1bc 0f00 	cmp.w	ip, #0
   13cc6:	d02a      	beq.n	13d1e <ull_conn_llcp+0x1042>
	tx->next = conn->tx_ctrl_last->next;
   13cc8:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   13ccc:	6807      	ldr	r7, [r0, #0]
   13cce:	6017      	str	r7, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   13cd0:	6002      	str	r2, [r0, #0]
	if (!tx->next) {
   13cd2:	6817      	ldr	r7, [r2, #0]
	conn->tx_ctrl_last = tx;
   13cd4:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   13cd8:	4610      	mov	r0, r2
	if (!tx->next) {
   13cda:	b19f      	cbz	r7, 13d04 <ull_conn_llcp+0x1028>
	if (
   13cdc:	2b00      	cmp	r3, #0
   13cde:	f43f ae2a 	beq.w	13936 <ull_conn_llcp+0xc5a>
	    !conn->llcp_enc.pause_tx &&
   13ce2:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
	    conn->tx_head &&
   13ce6:	079b      	lsls	r3, r3, #30
   13ce8:	f57f adda 	bpl.w	138a0 <ull_conn_llcp+0xbc4>
   13cec:	e623      	b.n	13936 <ull_conn_llcp+0xc5a>
		if (!conn->tx_ctrl) {
   13cee:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   13cf2:	2a00      	cmp	r2, #0
   13cf4:	f47f af05 	bne.w	13b02 <ull_conn_llcp+0xe26>
			tx->next = conn->tx_head;
   13cf8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   13cfa:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13cfe:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   13d02:	e705      	b.n	13b10 <ull_conn_llcp+0xe34>
		conn->tx_data_last = tx;
   13d04:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
	    conn->tx_head &&
   13d08:	4619      	mov	r1, r3
		if (!conn->tx_ctrl) {
   13d0a:	46e6      	mov	lr, ip
   13d0c:	e5c2      	b.n	13894 <ull_conn_llcp+0xbb8>
	    ((pdu_data_tx->llctrl.opcode !=
   13d0e:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13d10:	2a03      	cmp	r2, #3
   13d12:	f43f ae00 	beq.w	13916 <ull_conn_llcp+0xc3a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13d16:	2a0a      	cmp	r2, #10
   13d18:	f47f a88b 	bne.w	12e32 <ull_conn_llcp+0x156>
   13d1c:	e5fb      	b.n	13916 <ull_conn_llcp+0xc3a>
			tx->next = conn->tx_head;
   13d1e:	6013      	str	r3, [r2, #0]
			conn->tx_head = tx;
   13d20:	4694      	mov	ip, r2
				conn->tx_ctrl = tx;
   13d22:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13d26:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   13d2a:	4613      	mov	r3, r2
   13d2c:	e7b9      	b.n	13ca2 <ull_conn_llcp+0xfc6>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13d2e:	791a      	ldrb	r2, [r3, #4]
   13d30:	f002 0203 	and.w	r2, r2, #3
   13d34:	2a03      	cmp	r2, #3
   13d36:	f000 8128 	beq.w	13f8a <ull_conn_llcp+0x12ae>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13d3a:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13d3e:	f7ff b8e0 	b.w	12f02 <ull_conn_llcp+0x226>
		conn->tx_data_last = tx;
   13d42:	f8c4 91d4 	str.w	r9, [r4, #468]	; 0x1d4
   13d46:	e72e      	b.n	13ba6 <ull_conn_llcp+0xeca>
			conn->tx_data = conn->tx_data->next;
   13d48:	6819      	ldr	r1, [r3, #0]
   13d4a:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13d4e:	2a00      	cmp	r2, #0
   13d50:	f47f aa2e 	bne.w	131b0 <ull_conn_llcp+0x4d4>
			tx->next = conn->tx_head->next;
   13d54:	681a      	ldr	r2, [r3, #0]
   13d56:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   13d5a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13d5e:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13d62:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   13d66:	f7ff ba2e 	b.w	131c6 <ull_conn_llcp+0x4ea>
			conn->tx_data = conn->tx_data->next;
   13d6a:	6819      	ldr	r1, [r3, #0]
   13d6c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13d70:	2a00      	cmp	r2, #0
   13d72:	f47f aafc 	bne.w	1336e <ull_conn_llcp+0x692>
			tx->next = conn->tx_head->next;
   13d76:	681a      	ldr	r2, [r3, #0]
   13d78:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   13d7a:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   13d7c:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   13d7e:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
   13d82:	f7ff bafc 	b.w	1337e <ull_conn_llcp+0x6a2>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13d86:	48c5      	ldr	r0, [pc, #788]	; (1409c <ull_conn_llcp+0x13c0>)
   13d88:	f7f7 fcca 	bl	b720 <mem_acquire>
		if (!tx) {
   13d8c:	4601      	mov	r1, r0
   13d8e:	2800      	cmp	r0, #0
   13d90:	f000 82cd 	beq.w	1432e <ull_conn_llcp+0x1652>
	conn->lll.enc_tx = 1;
   13d94:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   13d98:	f043 0310 	orr.w	r3, r3, #16
   13d9c:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   13da0:	2301      	movs	r3, #1
   13da2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13da4:	7903      	ldrb	r3, [r0, #4]
   13da6:	f043 0303 	orr.w	r3, r3, #3
   13daa:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   13dac:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   13db0:	2206      	movs	r2, #6
   13db2:	71c2      	strb	r2, [r0, #7]
	if (
   13db4:	b303      	cbz	r3, 13df8 <ull_conn_llcp+0x111c>
	    !conn->llcp_enc.pause_tx &&
   13db6:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
	    conn->tx_head &&
   13dba:	0790      	lsls	r0, r2, #30
   13dbc:	d41c      	bmi.n	13df8 <ull_conn_llcp+0x111c>
	    !conn->llcp_phy.pause_tx &&
   13dbe:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
   13dc2:	07d2      	lsls	r2, r2, #31
   13dc4:	d418      	bmi.n	13df8 <ull_conn_llcp+0x111c>
		if (conn->tx_head == conn->tx_data) {
   13dc6:	f8d4 21d0 	ldr.w	r2, [r4, #464]	; 0x1d0
   13dca:	4293      	cmp	r3, r2
   13dcc:	f000 814d 	beq.w	1406a <ull_conn_llcp+0x138e>
		} else if (!conn->tx_ctrl) {
   13dd0:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   13dd4:	f1bc 0f00 	cmp.w	ip, #0
   13dd8:	f000 82b5 	beq.w	14346 <ull_conn_llcp+0x166a>
	tx->next = conn->tx_ctrl_last->next;
   13ddc:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   13de0:	6802      	ldr	r2, [r0, #0]
   13de2:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   13de4:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   13de6:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13dea:	680a      	ldr	r2, [r1, #0]
   13dec:	2a00      	cmp	r2, #0
   13dee:	f47f ae1e 	bne.w	13a2e <ull_conn_llcp+0xd52>
		conn->tx_data_last = tx;
   13df2:	f8c4 11d4 	str.w	r1, [r4, #468]	; 0x1d4
   13df6:	e618      	b.n	13a2a <ull_conn_llcp+0xd4e>
		if (!conn->tx_ctrl) {
   13df8:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
   13dfc:	f1bc 0f00 	cmp.w	ip, #0
   13e00:	d027      	beq.n	13e52 <ull_conn_llcp+0x1176>
	tx->next = conn->tx_ctrl_last->next;
   13e02:	f8d4 01cc 	ldr.w	r0, [r4, #460]	; 0x1cc
   13e06:	6802      	ldr	r2, [r0, #0]
   13e08:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   13e0a:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   13e0c:	680a      	ldr	r2, [r1, #0]
	conn->tx_ctrl_last = tx;
   13e0e:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13e12:	2a00      	cmp	r2, #0
   13e14:	f47f ae09 	bne.w	13a2a <ull_conn_llcp+0xd4e>
   13e18:	e7eb      	b.n	13df2 <ull_conn_llcp+0x1116>
		if (!conn->tx_ctrl) {
   13e1a:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   13e1e:	2900      	cmp	r1, #0
   13e20:	f47f ac45 	bne.w	136ae <ull_conn_llcp+0x9d2>
			tx->next = conn->tx_head;
   13e24:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   13e26:	e9c4 2271 	strd	r2, r2, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13e2a:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
   13e2e:	e445      	b.n	136bc <ull_conn_llcp+0x9e0>
			conn->tx_data = conn->tx_data->next;
   13e30:	6819      	ldr	r1, [r3, #0]
   13e32:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13e36:	2a00      	cmp	r2, #0
   13e38:	f47f a8c1 	bne.w	12fbe <ull_conn_llcp+0x2e2>
			tx->next = conn->tx_head->next;
   13e3c:	681a      	ldr	r2, [r3, #0]
   13e3e:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   13e42:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13e46:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13e4a:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   13e4e:	f7ff b8c1 	b.w	12fd4 <ull_conn_llcp+0x2f8>
			tx->next = conn->tx_head;
   13e52:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   13e54:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   13e56:	e9c4 1171 	strd	r1, r1, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   13e5a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   13e5e:	460b      	mov	r3, r1
   13e60:	e7c3      	b.n	13dea <ull_conn_llcp+0x110e>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   13e62:	488e      	ldr	r0, [pc, #568]	; (1409c <ull_conn_llcp+0x13c0>)
   13e64:	f7f7 fc5c 	bl	b720 <mem_acquire>
		if (!tx) {
   13e68:	2800      	cmp	r0, #0
   13e6a:	f43f ac2b 	beq.w	136c4 <ull_conn_llcp+0x9e8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   13e6e:	7902      	ldrb	r2, [r0, #4]
   13e70:	f042 0203 	orr.w	r2, r2, #3
   13e74:	7102      	strb	r2, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   13e76:	2211      	movs	r2, #17
   13e78:	71c2      	strb	r2, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   13e7a:	2203      	movs	r2, #3
   13e7c:	7142      	strb	r2, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   13e7e:	220f      	movs	r2, #15
   13e80:	7202      	strb	r2, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   13e82:	f894 2187 	ldrb.w	r2, [r4, #391]	; 0x187
   13e86:	7242      	strb	r2, [r0, #9]
	    conn->tx_head &&
   13e88:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   13e8c:	2a00      	cmp	r2, #0
   13e8e:	f000 812d 	beq.w	140ec <ull_conn_llcp+0x1410>
	    !conn->llcp_enc.pause_tx &&
   13e92:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   13e96:	0789      	lsls	r1, r1, #30
   13e98:	f100 8128 	bmi.w	140ec <ull_conn_llcp+0x1410>
	    !conn->llcp_phy.pause_tx &&
   13e9c:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   13ea0:	07cb      	lsls	r3, r1, #31
   13ea2:	f100 8123 	bmi.w	140ec <ull_conn_llcp+0x1410>
		if (conn->tx_head == conn->tx_data) {
   13ea6:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   13eaa:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   13eac:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   13eb0:	f000 8219 	beq.w	142e6 <ull_conn_llcp+0x160a>
		} else if (!conn->tx_ctrl) {
   13eb4:	2900      	cmp	r1, #0
   13eb6:	f000 81ed 	beq.w	14294 <ull_conn_llcp+0x15b8>
	tx->next = conn->tx_ctrl_last->next;
   13eba:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   13ebe:	6811      	ldr	r1, [r2, #0]
   13ec0:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   13ec2:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   13ec4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   13ec8:	6802      	ldr	r2, [r0, #0]
   13eca:	2a00      	cmp	r2, #0
   13ecc:	f000 81df 	beq.w	1428e <ull_conn_llcp+0x15b2>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   13ed0:	f894 3184 	ldrb.w	r3, [r4, #388]	; 0x184
   13ed4:	f884 3185 	strb.w	r3, [r4, #389]	; 0x185
	conn_upd_curr = NULL;
   13ed8:	2300      	movs	r3, #0
   13eda:	f8c8 3000 	str.w	r3, [r8]
   13ede:	f7ff bbf1 	b.w	136c4 <ull_conn_llcp+0x9e8>
			conn->tx_data = conn->tx_data->next;
   13ee2:	6819      	ldr	r1, [r3, #0]
   13ee4:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13ee8:	2a00      	cmp	r2, #0
   13eea:	f47f ac64 	bne.w	137b6 <ull_conn_llcp+0xada>
			tx->next = conn->tx_head->next;
   13eee:	681a      	ldr	r2, [r3, #0]
   13ef0:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   13ef4:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   13ef8:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   13efc:	e9c4 8872 	strd	r8, r8, [r4, #456]	; 0x1c8
   13f00:	e464      	b.n	137cc <ull_conn_llcp+0xaf0>
			conn->tx_data = conn->tx_data->next;
   13f02:	680b      	ldr	r3, [r1, #0]
   13f04:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13f08:	f1be 0f00 	cmp.w	lr, #0
   13f0c:	f47f acd5 	bne.w	138ba <ull_conn_llcp+0xbde>
			tx->next = conn->tx_head->next;
   13f10:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   13f14:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   13f18:	f8d9 1000 	ldr.w	r1, [r9]
				conn->tx_ctrl_last = tx;
   13f1c:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13f20:	e4d6      	b.n	138d0 <ull_conn_llcp+0xbf4>
			conn->tx_data = conn->tx_data->next;
   13f22:	6819      	ldr	r1, [r3, #0]
   13f24:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13f28:	2a00      	cmp	r2, #0
   13f2a:	f47f a9cc 	bne.w	132c6 <ull_conn_llcp+0x5ea>
			tx->next = conn->tx_head->next;
   13f2e:	681a      	ldr	r2, [r3, #0]
   13f30:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   13f34:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13f38:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13f3c:	f7ff b9cc 	b.w	132d8 <ull_conn_llcp+0x5fc>
			conn->tx_data = conn->tx_data->next;
   13f40:	6819      	ldr	r1, [r3, #0]
   13f42:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13f46:	f1bc 0f00 	cmp.w	ip, #0
   13f4a:	f47f aea3 	bne.w	13c94 <ull_conn_llcp+0xfb8>
			tx->next = conn->tx_head->next;
   13f4e:	6819      	ldr	r1, [r3, #0]
   13f50:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   13f52:	4694      	mov	ip, r2
   13f54:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   13f56:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   13f5a:	e6a2      	b.n	13ca2 <ull_conn_llcp+0xfc6>
			conn->tx_data = conn->tx_data->next;
   13f5c:	681a      	ldr	r2, [r3, #0]
   13f5e:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   13f62:	f1bc 0f00 	cmp.w	ip, #0
   13f66:	f47f a9ae 	bne.w	132c6 <ull_conn_llcp+0x5ea>
			tx->next = conn->tx_head->next;
   13f6a:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   13f6e:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   13f72:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   13f76:	f7ff b9af 	b.w	132d8 <ull_conn_llcp+0x5fc>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   13f7a:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   13f7e:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
		conn->tx_data_last = tx;
   13f82:	f8c4 21d4 	str.w	r2, [r4, #468]	; 0x1d4
   13f86:	f7fe beb4 	b.w	12cf2 <ull_conn_llcp+0x16>
	    ((pdu_data_tx->llctrl.opcode !=
   13f8a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13f8c:	2a03      	cmp	r2, #3
   13f8e:	f43f ae43 	beq.w	13c18 <ull_conn_llcp+0xf3c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   13f92:	2a0a      	cmp	r2, #10
   13f94:	f47f aed1 	bne.w	13d3a <ull_conn_llcp+0x105e>
   13f98:	e63e      	b.n	13c18 <ull_conn_llcp+0xf3c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13f9a:	791a      	ldrb	r2, [r3, #4]
   13f9c:	f002 0203 	and.w	r2, r2, #3
   13fa0:	2a03      	cmp	r2, #3
   13fa2:	f000 80ba 	beq.w	1411a <ull_conn_llcp+0x143e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13fa6:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13faa:	f7ff b808 	b.w	12fbe <ull_conn_llcp+0x2e2>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13fae:	791a      	ldrb	r2, [r3, #4]
   13fb0:	f002 0203 	and.w	r2, r2, #3
   13fb4:	2a03      	cmp	r2, #3
   13fb6:	f000 80b8 	beq.w	1412a <ull_conn_llcp+0x144e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13fba:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13fbe:	f7ff b9d6 	b.w	1336e <ull_conn_llcp+0x692>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   13fc2:	791a      	ldrb	r2, [r3, #4]
   13fc4:	f002 0203 	and.w	r2, r2, #3
   13fc8:	2a03      	cmp	r2, #3
   13fca:	f000 80b6 	beq.w	1413a <ull_conn_llcp+0x145e>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   13fce:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   13fd2:	f7ff b8ed 	b.w	131b0 <ull_conn_llcp+0x4d4>
		if (conn->llcp_phy.tx & PHY_2M) {
   13fd6:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13fd8:	f884 11bd 	strb.w	r1, [r4, #445]	; 0x1bd
		if (conn->llcp_phy.tx & PHY_2M) {
   13fdc:	f3c3 0282 	ubfx	r2, r3, #2, #3
   13fe0:	d575      	bpl.n	140ce <ull_conn_llcp+0x13f2>
			conn->llcp_phy.tx = PHY_2M;
   13fe2:	2202      	movs	r2, #2
   13fe4:	f362 0384 	bfi	r3, r2, #2, #3
   13fe8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		if (conn->llcp_phy.rx & PHY_2M) {
   13fec:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
   13ff0:	065f      	lsls	r7, r3, #25
   13ff2:	ea4f 1253 	mov.w	r2, r3, lsr #5
   13ff6:	d561      	bpl.n	140bc <ull_conn_llcp+0x13e0>
			conn->llcp_phy.rx = PHY_2M;
   13ff8:	2202      	movs	r2, #2
   13ffa:	f362 1347 	bfi	r3, r2, #5, #3
   13ffe:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
		conn->llcp_ack -= 2U;
   14002:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   14004:	f894 21be 	ldrb.w	r2, [r4, #446]	; 0x1be
   14008:	f894 7060 	ldrb.w	r7, [r4, #96]	; 0x60
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1400c:	f894 0061 	ldrb.w	r0, [r4, #97]	; 0x61
		conn->llcp_ack -= 2U;
   14010:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14014:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   14018:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1401c:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   14020:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14024:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   14028:	428f      	cmp	r7, r1
   1402a:	bf08      	it	eq
   1402c:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   1402e:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   14030:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   14034:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   14038:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   1403c:	bf08      	it	eq
   1403e:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   14040:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   14044:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   14048:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   1404a:	f884 30e8 	strb.w	r3, [r4, #232]	; 0xe8
		conn->llcp_type = LLCP_PHY_UPD;
   1404e:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   14052:	f7fe be71 	b.w	12d38 <ull_conn_llcp+0x5c>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14056:	7919      	ldrb	r1, [r3, #4]
   14058:	f001 0103 	and.w	r1, r1, #3
   1405c:	2903      	cmp	r1, #3
   1405e:	f000 817b 	beq.w	14358 <ull_conn_llcp+0x167c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14062:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14066:	469c      	mov	ip, r3
   14068:	e614      	b.n	13c94 <ull_conn_llcp+0xfb8>
		if (!conn->tx_ctrl) {
   1406a:	f8d4 c1c8 	ldr.w	ip, [r4, #456]	; 0x1c8
			conn->tx_data = conn->tx_data->next;
   1406e:	6812      	ldr	r2, [r2, #0]
   14070:	f8c4 21d0 	str.w	r2, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14074:	f1bc 0f00 	cmp.w	ip, #0
   14078:	f47f aeb0 	bne.w	13ddc <ull_conn_llcp+0x1100>
			tx->next = conn->tx_head->next;
   1407c:	681a      	ldr	r2, [r3, #0]
   1407e:	600a      	str	r2, [r1, #0]
			conn->tx_head->next = tx;
   14080:	468c      	mov	ip, r1
   14082:	6019      	str	r1, [r3, #0]
				conn->tx_ctrl_last = tx;
   14084:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   14088:	e6af      	b.n	13dea <ull_conn_llcp+0x110e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1408a:	790b      	ldrb	r3, [r1, #4]
   1408c:	f003 0303 	and.w	r3, r3, #3
   14090:	2b03      	cmp	r3, #3
   14092:	f000 817d 	beq.w	14390 <ull_conn_llcp+0x16b4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14096:	e9c4 1172 	strd	r1, r1, [r4, #456]	; 0x1c8
   1409a:	e40e      	b.n	138ba <ull_conn_llcp+0xbde>
   1409c:	20001fdc 	.word	0x20001fdc
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   140a0:	791a      	ldrb	r2, [r3, #4]
   140a2:	f002 0203 	and.w	r2, r2, #3
   140a6:	2a03      	cmp	r2, #3
   140a8:	f47f acd8 	bne.w	13a5c <ull_conn_llcp+0xd80>
	    ((pdu_data_tx->llctrl.opcode !=
   140ac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   140ae:	2a03      	cmp	r2, #3
   140b0:	f43f af3d 	beq.w	13f2e <ull_conn_llcp+0x1252>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   140b4:	2a0a      	cmp	r2, #10
   140b6:	f47f acd1 	bne.w	13a5c <ull_conn_llcp+0xd80>
   140ba:	e738      	b.n	13f2e <ull_conn_llcp+0x1252>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   140bc:	07d1      	lsls	r1, r2, #31
   140be:	f140 816f 	bpl.w	143a0 <ull_conn_llcp+0x16c4>
			conn->llcp_phy.rx = PHY_1M;
   140c2:	2201      	movs	r2, #1
   140c4:	f362 1347 	bfi	r3, r2, #5, #3
   140c8:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   140cc:	e799      	b.n	14002 <ull_conn_llcp+0x1326>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   140ce:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   140d0:	f894 31be 	ldrb.w	r3, [r4, #446]	; 0x1be
		} else if (conn->llcp_phy.tx & PHY_1M) {
   140d4:	f140 80f3 	bpl.w	142be <ull_conn_llcp+0x15e2>
			conn->llcp_phy.tx = PHY_1M;
   140d8:	2201      	movs	r2, #1
   140da:	f362 0384 	bfi	r3, r2, #2, #3
   140de:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   140e2:	e783      	b.n	13fec <ull_conn_llcp+0x1310>
			conn->llcp_cu.interval = interval_max;
   140e4:	f8a4 2110 	strh.w	r2, [r4, #272]	; 0x110
   140e8:	f7ff ba6d 	b.w	135c6 <ull_conn_llcp+0x8ea>
		if (!conn->tx_ctrl) {
   140ec:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   140f0:	2900      	cmp	r1, #0
   140f2:	f47f aee2 	bne.w	13eba <ull_conn_llcp+0x11de>
			tx->next = conn->tx_head;
   140f6:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   140f8:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   140fc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14100:	e6e2      	b.n	13ec8 <ull_conn_llcp+0x11ec>
			conn->tx_data = conn->tx_data->next;
   14102:	6819      	ldr	r1, [r3, #0]
   14104:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14108:	2a00      	cmp	r2, #0
   1410a:	f47f acfa 	bne.w	13b02 <ull_conn_llcp+0xe26>
			tx->next = conn->tx_head->next;
   1410e:	681a      	ldr	r2, [r3, #0]
   14110:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   14112:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   14114:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   14118:	e4fa      	b.n	13b10 <ull_conn_llcp+0xe34>
	    ((pdu_data_tx->llctrl.opcode !=
   1411a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1411c:	2a03      	cmp	r2, #3
   1411e:	f43f ae8d 	beq.w	13e3c <ull_conn_llcp+0x1160>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14122:	2a0a      	cmp	r2, #10
   14124:	f47f af3f 	bne.w	13fa6 <ull_conn_llcp+0x12ca>
   14128:	e688      	b.n	13e3c <ull_conn_llcp+0x1160>
	    ((pdu_data_tx->llctrl.opcode !=
   1412a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1412c:	2a03      	cmp	r2, #3
   1412e:	f43f ae22 	beq.w	13d76 <ull_conn_llcp+0x109a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14132:	2a0a      	cmp	r2, #10
   14134:	f47f af41 	bne.w	13fba <ull_conn_llcp+0x12de>
   14138:	e61d      	b.n	13d76 <ull_conn_llcp+0x109a>
	    ((pdu_data_tx->llctrl.opcode !=
   1413a:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1413c:	2a03      	cmp	r2, #3
   1413e:	f43f ae09 	beq.w	13d54 <ull_conn_llcp+0x1078>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14142:	2a0a      	cmp	r2, #10
   14144:	f47f af43 	bne.w	13fce <ull_conn_llcp+0x12f2>
   14148:	e604      	b.n	13d54 <ull_conn_llcp+0x1078>
			conn->tx_data = conn->tx_data->next;
   1414a:	6819      	ldr	r1, [r3, #0]
   1414c:	f8c4 11d0 	str.w	r1, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14150:	2a00      	cmp	r2, #0
   14152:	f47f ad1a 	bne.w	13b8a <ull_conn_llcp+0xeae>
			tx->next = conn->tx_head->next;
   14156:	681a      	ldr	r2, [r3, #0]
   14158:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   1415c:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   14160:	e9c4 9972 	strd	r9, r9, [r4, #456]	; 0x1c8
   14164:	e51a      	b.n	13b9c <ull_conn_llcp+0xec0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   14166:	4899      	ldr	r0, [pc, #612]	; (143cc <ull_conn_llcp+0x16f0>)
   14168:	f7f7 fada 	bl	b720 <mem_acquire>
	if (!tx) {
   1416c:	2800      	cmp	r0, #0
   1416e:	f43f aaa9 	beq.w	136c4 <ull_conn_llcp+0x9e8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14172:	7902      	ldrb	r2, [r0, #4]
   14174:	f042 0203 	orr.w	r2, r2, #3
   14178:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   1417a:	2218      	movs	r2, #24
   1417c:	7142      	strb	r2, [r0, #5]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   1417e:	2210      	movs	r2, #16
   14180:	71c2      	strb	r2, [r0, #7]
	rsp->interval_min =
   14182:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   14186:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   14188:	f8b4 218a 	ldrh.w	r2, [r4, #394]	; 0x18a
   1418c:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   1418e:	f8b4 218c 	ldrh.w	r2, [r4, #396]	; 0x18c
   14192:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   14194:	f8b4 218e 	ldrh.w	r2, [r4, #398]	; 0x18e
   14198:	81c2      	strh	r2, [r0, #14]
	rsp->preferred_periodicity =
   1419a:	f894 2190 	ldrb.w	r2, [r4, #400]	; 0x190
   1419e:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   141a0:	f8b4 2192 	ldrh.w	r2, [r4, #402]	; 0x192
   141a4:	f8a0 2011 	strh.w	r2, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   141a8:	f8b4 2194 	ldrh.w	r2, [r4, #404]	; 0x194
   141ac:	f8a0 2013 	strh.w	r2, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   141b0:	f8b4 2196 	ldrh.w	r2, [r4, #406]	; 0x196
   141b4:	f8a0 2015 	strh.w	r2, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   141b8:	f8b4 2198 	ldrh.w	r2, [r4, #408]	; 0x198
   141bc:	f8a0 2017 	strh.w	r2, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   141c0:	f8b4 219a 	ldrh.w	r2, [r4, #410]	; 0x19a
   141c4:	f8a0 2019 	strh.w	r2, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   141c8:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
   141cc:	f8a0 201b 	strh.w	r2, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   141d0:	f8b4 219e 	ldrh.w	r2, [r4, #414]	; 0x19e
   141d4:	f8a0 201d 	strh.w	r2, [r0, #29]
	    conn->tx_head &&
   141d8:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
	if (
   141dc:	b352      	cbz	r2, 14234 <ull_conn_llcp+0x1558>
	    !conn->llcp_enc.pause_tx &&
   141de:	f894 1166 	ldrb.w	r1, [r4, #358]	; 0x166
	    conn->tx_head &&
   141e2:	078f      	lsls	r7, r1, #30
   141e4:	d426      	bmi.n	14234 <ull_conn_llcp+0x1558>
	    !conn->llcp_phy.pause_tx &&
   141e6:	f894 11bf 	ldrb.w	r1, [r4, #447]	; 0x1bf
   141ea:	07c9      	lsls	r1, r1, #31
   141ec:	d422      	bmi.n	14234 <ull_conn_llcp+0x1558>
		if (conn->tx_head == conn->tx_data) {
   141ee:	f8d4 11d0 	ldr.w	r1, [r4, #464]	; 0x1d0
   141f2:	428a      	cmp	r2, r1
		if (!conn->tx_ctrl) {
   141f4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   141f8:	d031      	beq.n	1425e <ull_conn_llcp+0x1582>
		} else if (!conn->tx_ctrl) {
   141fa:	b341      	cbz	r1, 1424e <ull_conn_llcp+0x1572>
	tx->next = conn->tx_ctrl_last->next;
   141fc:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
   14200:	6811      	ldr	r1, [r2, #0]
   14202:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   14204:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   14206:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (!tx->next) {
   1420a:	6802      	ldr	r2, [r0, #0]
   1420c:	b1e2      	cbz	r2, 14248 <ull_conn_llcp+0x156c>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1420e:	f894 2184 	ldrb.w	r2, [r4, #388]	; 0x184
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   14212:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14216:	f894 00e5 	ldrb.w	r0, [r4, #229]	; 0xe5
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1421a:	f884 2185 	strb.w	r2, [r4, #389]	; 0x185
   1421e:	f7fe bd68 	b.w	12cf2 <ull_conn_llcp+0x16>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14222:	791a      	ldrb	r2, [r3, #4]
   14224:	f002 0203 	and.w	r2, r2, #3
   14228:	2a03      	cmp	r2, #3
   1422a:	d023      	beq.n	14274 <ull_conn_llcp+0x1598>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1422c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14230:	f7ff bac1 	b.w	137b6 <ull_conn_llcp+0xada>
		if (!conn->tx_ctrl) {
   14234:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   14238:	2900      	cmp	r1, #0
   1423a:	d1df      	bne.n	141fc <ull_conn_llcp+0x1520>
			tx->next = conn->tx_head;
   1423c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1423e:	e9c4 0071 	strd	r0, r0, [r4, #452]	; 0x1c4
				conn->tx_ctrl_last = tx;
   14242:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   14246:	e7e0      	b.n	1420a <ull_conn_llcp+0x152e>
		conn->tx_data_last = tx;
   14248:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   1424c:	e7df      	b.n	1420e <ull_conn_llcp+0x1532>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1424e:	7911      	ldrb	r1, [r2, #4]
   14250:	f001 0103 	and.w	r1, r1, #3
   14254:	2903      	cmp	r1, #3
   14256:	d014      	beq.n	14282 <ull_conn_llcp+0x15a6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14258:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   1425c:	e7ce      	b.n	141fc <ull_conn_llcp+0x1520>
			conn->tx_data = conn->tx_data->next;
   1425e:	6813      	ldr	r3, [r2, #0]
   14260:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   14264:	2900      	cmp	r1, #0
   14266:	d1c9      	bne.n	141fc <ull_conn_llcp+0x1520>
			tx->next = conn->tx_head->next;
   14268:	6811      	ldr	r1, [r2, #0]
   1426a:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   1426c:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   1426e:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   14272:	e7ca      	b.n	1420a <ull_conn_llcp+0x152e>
	    ((pdu_data_tx->llctrl.opcode !=
   14274:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14276:	2a03      	cmp	r2, #3
   14278:	f43f ae39 	beq.w	13eee <ull_conn_llcp+0x1212>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1427c:	2a0a      	cmp	r2, #10
   1427e:	d1d5      	bne.n	1422c <ull_conn_llcp+0x1550>
   14280:	e635      	b.n	13eee <ull_conn_llcp+0x1212>
	    ((pdu_data_tx->llctrl.opcode !=
   14282:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14284:	2903      	cmp	r1, #3
   14286:	d0ef      	beq.n	14268 <ull_conn_llcp+0x158c>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14288:	290a      	cmp	r1, #10
   1428a:	d1e5      	bne.n	14258 <ull_conn_llcp+0x157c>
   1428c:	e7ec      	b.n	14268 <ull_conn_llcp+0x158c>
		conn->tx_data_last = tx;
   1428e:	f8c4 01d4 	str.w	r0, [r4, #468]	; 0x1d4
   14292:	e61d      	b.n	13ed0 <ull_conn_llcp+0x11f4>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14294:	7911      	ldrb	r1, [r2, #4]
   14296:	f001 0103 	and.w	r1, r1, #3
   1429a:	2903      	cmp	r1, #3
   1429c:	d018      	beq.n	142d0 <ull_conn_llcp+0x15f4>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1429e:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   142a2:	e60a      	b.n	13eba <ull_conn_llcp+0x11de>
			conn->tx_data = conn->tx_data->next;
   142a4:	6818      	ldr	r0, [r3, #0]
   142a6:	f8c4 01d0 	str.w	r0, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   142aa:	2900      	cmp	r1, #0
   142ac:	f47f a9ff 	bne.w	136ae <ull_conn_llcp+0x9d2>
			tx->next = conn->tx_head->next;
   142b0:	6819      	ldr	r1, [r3, #0]
   142b2:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   142b4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   142b6:	e9c4 2272 	strd	r2, r2, [r4, #456]	; 0x1c8
   142ba:	f7ff b9ff 	b.w	136bc <ull_conn_llcp+0x9e0>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   142be:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   142c2:	bf18      	it	ne
   142c4:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   142c6:	f362 0384 	bfi	r3, r2, #2, #3
   142ca:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   142ce:	e68d      	b.n	13fec <ull_conn_llcp+0x1310>
	    ((pdu_data_tx->llctrl.opcode !=
   142d0:	79d1      	ldrb	r1, [r2, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   142d2:	2903      	cmp	r1, #3
   142d4:	d001      	beq.n	142da <ull_conn_llcp+0x15fe>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   142d6:	290a      	cmp	r1, #10
   142d8:	d1e1      	bne.n	1429e <ull_conn_llcp+0x15c2>
			tx->next = conn->tx_head->next;
   142da:	6811      	ldr	r1, [r2, #0]
   142dc:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   142de:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   142e0:	e9c4 0072 	strd	r0, r0, [r4, #456]	; 0x1c8
   142e4:	e5f0      	b.n	13ec8 <ull_conn_llcp+0x11ec>
			conn->tx_data = conn->tx_data->next;
   142e6:	6813      	ldr	r3, [r2, #0]
   142e8:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		if (!conn->tx_ctrl) {
   142ec:	2900      	cmp	r1, #0
   142ee:	d0f4      	beq.n	142da <ull_conn_llcp+0x15fe>
   142f0:	e5e3      	b.n	13eba <ull_conn_llcp+0x11de>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   142f2:	791a      	ldrb	r2, [r3, #4]
   142f4:	f002 0203 	and.w	r2, r2, #3
   142f8:	2a03      	cmp	r2, #3
   142fa:	d00b      	beq.n	14314 <ull_conn_llcp+0x1638>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   142fc:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14300:	e443      	b.n	13b8a <ull_conn_llcp+0xeae>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14302:	7919      	ldrb	r1, [r3, #4]
   14304:	f001 0103 	and.w	r1, r1, #3
   14308:	2903      	cmp	r1, #3
   1430a:	d00a      	beq.n	14322 <ull_conn_llcp+0x1646>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   1430c:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14310:	f7ff b9cd 	b.w	136ae <ull_conn_llcp+0x9d2>
	    ((pdu_data_tx->llctrl.opcode !=
   14314:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14316:	2a03      	cmp	r2, #3
   14318:	f43f af1d 	beq.w	14156 <ull_conn_llcp+0x147a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1431c:	2a0a      	cmp	r2, #10
   1431e:	d1ed      	bne.n	142fc <ull_conn_llcp+0x1620>
   14320:	e719      	b.n	14156 <ull_conn_llcp+0x147a>
	    ((pdu_data_tx->llctrl.opcode !=
   14322:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14324:	2903      	cmp	r1, #3
   14326:	d0c3      	beq.n	142b0 <ull_conn_llcp+0x15d4>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14328:	290a      	cmp	r1, #10
   1432a:	d1ef      	bne.n	1430c <ull_conn_llcp+0x1630>
   1432c:	e7c0      	b.n	142b0 <ull_conn_llcp+0x15d4>
   1432e:	e9d4 3c71 	ldrd	r3, ip, [r4, #452]	; 0x1c4
   14332:	f7ff bb7a 	b.w	13a2a <ull_conn_llcp+0xd4e>
	    ((pdu_data_tx->llctrl.opcode !=
   14336:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14338:	2a03      	cmp	r2, #3
   1433a:	d002      	beq.n	14342 <ull_conn_llcp+0x1666>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   1433c:	2a0a      	cmp	r2, #10
   1433e:	f47f ab8d 	bne.w	13a5c <ull_conn_llcp+0xd80>
   14342:	681a      	ldr	r2, [r3, #0]
   14344:	e611      	b.n	13f6a <ull_conn_llcp+0x128e>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14346:	791a      	ldrb	r2, [r3, #4]
   14348:	f002 0203 	and.w	r2, r2, #3
   1434c:	2a03      	cmp	r2, #3
   1434e:	d00b      	beq.n	14368 <ull_conn_llcp+0x168c>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14350:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   14354:	469c      	mov	ip, r3
   14356:	e541      	b.n	13ddc <ull_conn_llcp+0x1100>
	    ((pdu_data_tx->llctrl.opcode !=
   14358:	79d9      	ldrb	r1, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1435a:	2903      	cmp	r1, #3
   1435c:	f43f adf7 	beq.w	13f4e <ull_conn_llcp+0x1272>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14360:	290a      	cmp	r1, #10
   14362:	f47f ae7e 	bne.w	14062 <ull_conn_llcp+0x1386>
   14366:	e5f2      	b.n	13f4e <ull_conn_llcp+0x1272>
	    ((pdu_data_tx->llctrl.opcode !=
   14368:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1436a:	2a03      	cmp	r2, #3
   1436c:	f43f ae86 	beq.w	1407c <ull_conn_llcp+0x13a0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14370:	2a0a      	cmp	r2, #10
   14372:	d1ed      	bne.n	14350 <ull_conn_llcp+0x1674>
   14374:	e682      	b.n	1407c <ull_conn_llcp+0x13a0>
		if (!conn->tx_ctrl) {
   14376:	e9d4 1e71 	ldrd	r1, lr, [r4, #452]	; 0x1c4
   1437a:	f7ff ba8b 	b.w	13894 <ull_conn_llcp+0xbb8>
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   1437e:	791a      	ldrb	r2, [r3, #4]
   14380:	f002 0203 	and.w	r2, r2, #3
   14384:	2a03      	cmp	r2, #3
   14386:	d014      	beq.n	143b2 <ull_conn_llcp+0x16d6>
		conn->tx_ctrl = conn->tx_ctrl_last = conn->tx_head;
   14388:	e9c4 3372 	strd	r3, r3, [r4, #456]	; 0x1c8
   1438c:	f7ff bbb9 	b.w	13b02 <ull_conn_llcp+0xe26>
	    ((pdu_data_tx->llctrl.opcode !=
   14390:	79cb      	ldrb	r3, [r1, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14392:	2b03      	cmp	r3, #3
   14394:	d002      	beq.n	1439c <ull_conn_llcp+0x16c0>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14396:	2b0a      	cmp	r3, #10
   14398:	f47f ae7d 	bne.w	14096 <ull_conn_llcp+0x13ba>
   1439c:	680b      	ldr	r3, [r1, #0]
   1439e:	e5b7      	b.n	13f10 <ull_conn_llcp+0x1234>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   143a0:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   143a4:	bf18      	it	ne
   143a6:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   143a8:	f362 1347 	bfi	r3, r2, #5, #3
   143ac:	f884 31be 	strb.w	r3, [r4, #446]	; 0x1be
   143b0:	e627      	b.n	14002 <ull_conn_llcp+0x1326>
	    ((pdu_data_tx->llctrl.opcode !=
   143b2:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   143b4:	2a03      	cmp	r2, #3
   143b6:	f43f aeaa 	beq.w	1410e <ull_conn_llcp+0x1432>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   143ba:	2a0a      	cmp	r2, #10
   143bc:	d1e4      	bne.n	14388 <ull_conn_llcp+0x16ac>
   143be:	e6a6      	b.n	1410e <ull_conn_llcp+0x1432>
		LL_ASSERT(0);
   143c0:	4a03      	ldr	r2, [pc, #12]	; (143d0 <ull_conn_llcp+0x16f4>)
   143c2:	4904      	ldr	r1, [pc, #16]	; (143d4 <ull_conn_llcp+0x16f8>)
   143c4:	f640 6339 	movw	r3, #3641	; 0xe39
   143c8:	f7ff bb4f 	b.w	13a6a <ull_conn_llcp+0xd8e>
   143cc:	20001fdc 	.word	0x20001fdc
   143d0:	00021da4 	.word	0x00021da4
   143d4:	000218a4 	.word	0x000218a4

000143d8 <ull_conn_tx_demux>:
{
   143d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   143dc:	4f24      	ldr	r7, [pc, #144]	; (14470 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   143de:	4e25      	ldr	r6, [pc, #148]	; (14474 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   143e0:	78fa      	ldrb	r2, [r7, #3]
{
   143e2:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   143e4:	1d3d      	adds	r5, r7, #4
   143e6:	e021      	b.n	1442c <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   143e8:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   143ec:	4630      	mov	r0, r6
   143ee:	f7f7 f9c9 	bl	b784 <mem_get>
	if (conn->lll.handle != handle) {
   143f2:	8d02      	ldrh	r2, [r0, #40]	; 0x28
   143f4:	bb32      	cbnz	r2, 14444 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   143f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   143fa:	f8d0 11d0 	ldr.w	r1, [r0, #464]	; 0x1d0
			tx->next = NULL;
   143fe:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   14400:	b359      	cbz	r1, 1445a <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   14402:	f8d0 21d4 	ldr.w	r2, [r0, #468]	; 0x1d4
   14406:	b102      	cbz	r2, 1440a <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   14408:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1440a:	f8c0 31d4 	str.w	r3, [r0, #468]	; 0x1d4
		MFIFO_DEQUEUE(conn_tx);
   1440e:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   14410:	78bb      	ldrb	r3, [r7, #2]
   14412:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   14414:	429a      	cmp	r2, r3
   14416:	d005      	beq.n	14424 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   14418:	3301      	adds	r3, #1
   1441a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1441c:	4299      	cmp	r1, r3
   1441e:	bf08      	it	eq
   14420:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   14422:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   14424:	3c01      	subs	r4, #1
   14426:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   1442a:	d01f      	beq.n	1446c <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   1442c:	78bb      	ldrb	r3, [r7, #2]
   1442e:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   14430:	4293      	cmp	r3, r2
   14432:	d01b      	beq.n	1446c <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   14434:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   14438:	eb15 0803 	adds.w	r8, r5, r3
   1443c:	d016      	beq.n	1446c <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   1443e:	5aea      	ldrh	r2, [r5, r3]
   14440:	2a00      	cmp	r2, #0
   14442:	d0d1      	beq.n	143e8 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   14444:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   14448:	790b      	ldrb	r3, [r1, #4]
   1444a:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   1444e:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   14452:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   14454:	f7fa ff76 	bl	f344 <ll_tx_ack_put>
   14458:	e7d9      	b.n	1440e <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   1445a:	f8d0 21c4 	ldr.w	r2, [r0, #452]	; 0x1c4
				conn->tx_data = tx;
   1445e:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
				if (!conn->tx_head) {
   14462:	2a00      	cmp	r2, #0
   14464:	d1cd      	bne.n	14402 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   14466:	f8c0 31c4 	str.w	r3, [r0, #452]	; 0x1c4
			if (conn->tx_data_last) {
   1446a:	e7ce      	b.n	1440a <ull_conn_tx_demux+0x32>
}
   1446c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14470:	200004e0 	.word	0x200004e0
   14474:	20001020 	.word	0x20001020

00014478 <conn_cleanup_finalize>:
{
   14478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = conn->llcp_rx;
   1447c:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
{
   14480:	b082      	sub	sp, #8
   14482:	4606      	mov	r6, r0
	while (rx) {
   14484:	b144      	cbz	r4, 14498 <conn_cleanup_finalize+0x20>
		hdr->type = NODE_RX_TYPE_RELEASE;
   14486:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   14488:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   1448a:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   1448c:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   1448e:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   14490:	f7fa ff14 	bl	f2bc <ll_rx_put>
	while (rx) {
   14494:	2c00      	cmp	r4, #0
   14496:	d1f7      	bne.n	14488 <conn_cleanup_finalize+0x10>
	while (conn->tx_head) {
   14498:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   1449c:	b381      	cbz	r1, 14500 <conn_cleanup_finalize+0x88>
		link = mem_acquire(&mem_link_tx.free);
   1449e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 14544 <conn_cleanup_finalize+0xcc>
		LL_ASSERT(link);
   144a2:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 14548 <conn_cleanup_finalize+0xd0>
   144a6:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 1454c <conn_cleanup_finalize+0xd4>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   144aa:	f106 0768 	add.w	r7, r6, #104	; 0x68
   144ae:	e007      	b.n	144c0 <conn_cleanup_finalize+0x48>
   144b0:	4629      	mov	r1, r5
   144b2:	463a      	mov	r2, r7
   144b4:	4620      	mov	r0, r4
   144b6:	f7f7 f997 	bl	b7e8 <memq_enqueue>
	while (conn->tx_head) {
   144ba:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   144be:	b1f9      	cbz	r1, 14500 <conn_cleanup_finalize+0x88>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   144c0:	4630      	mov	r0, r6
   144c2:	f7fc f99d 	bl	10800 <tx_ull_dequeue>
   144c6:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   144c8:	4640      	mov	r0, r8
   144ca:	f7f7 f929 	bl	b720 <mem_acquire>
		LL_ASSERT(link);
   144ce:	4604      	mov	r4, r0
   144d0:	2800      	cmp	r0, #0
   144d2:	d1ed      	bne.n	144b0 <conn_cleanup_finalize+0x38>
   144d4:	481e      	ldr	r0, [pc, #120]	; (14550 <conn_cleanup_finalize+0xd8>)
   144d6:	f44f 63fe 	mov.w	r3, #2032	; 0x7f0
   144da:	4652      	mov	r2, sl
   144dc:	4649      	mov	r1, r9
   144de:	f007 f949 	bl	1b774 <printk>
   144e2:	4040      	eors	r0, r0
   144e4:	f380 8811 	msr	BASEPRI, r0
   144e8:	f04f 0003 	mov.w	r0, #3
   144ec:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   144ee:	4629      	mov	r1, r5
   144f0:	463a      	mov	r2, r7
   144f2:	4620      	mov	r0, r4
   144f4:	f7f7 f978 	bl	b7e8 <memq_enqueue>
	while (conn->tx_head) {
   144f8:	f8d6 11c4 	ldr.w	r1, [r6, #452]	; 0x1c4
   144fc:	2900      	cmp	r1, #0
   144fe:	d1df      	bne.n	144c0 <conn_cleanup_finalize+0x48>
				    TICKER_ID_CONN_BASE + lll->handle,
   14500:	8d32      	ldrh	r2, [r6, #40]	; 0x28
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14502:	4b14      	ldr	r3, [pc, #80]	; (14554 <conn_cleanup_finalize+0xdc>)
   14504:	9600      	str	r6, [sp, #0]
				    TICKER_ID_CONN_BASE + lll->handle,
   14506:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14508:	b2d2      	uxtb	r2, r2
   1450a:	2101      	movs	r1, #1
   1450c:	2000      	movs	r0, #0
   1450e:	f7f8 fba3 	bl	cc58 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14512:	f030 0302 	bics.w	r3, r0, #2
   14516:	d00c      	beq.n	14532 <conn_cleanup_finalize+0xba>
   14518:	4a0b      	ldr	r2, [pc, #44]	; (14548 <conn_cleanup_finalize+0xd0>)
   1451a:	490f      	ldr	r1, [pc, #60]	; (14558 <conn_cleanup_finalize+0xe0>)
   1451c:	480c      	ldr	r0, [pc, #48]	; (14550 <conn_cleanup_finalize+0xd8>)
   1451e:	f240 73b9 	movw	r3, #1977	; 0x7b9
   14522:	f007 f927 	bl	1b774 <printk>
   14526:	4040      	eors	r0, r0
   14528:	f380 8811 	msr	BASEPRI, r0
   1452c:	f04f 0003 	mov.w	r0, #3
   14530:	df02      	svc	2
	lll->handle = 0xFFFF;
   14532:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   14536:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   14538:	8533      	strh	r3, [r6, #40]	; 0x28
}
   1453a:	b002      	add	sp, #8
   1453c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ull_conn_tx_demux(UINT8_MAX);
   14540:	f7ff bf4a 	b.w	143d8 <ull_conn_tx_demux>
   14544:	20002090 	.word	0x20002090
   14548:	00021da4 	.word	0x00021da4
   1454c:	00021e08 	.word	0x00021e08
   14550:	0002180c 	.word	0x0002180c
   14554:	0001043d 	.word	0x0001043d
   14558:	00021e84 	.word	0x00021e84

0001455c <ull_conn_done>:
{
   1455c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	conn = CONTAINER_OF(done->param, struct ll_conn, ull);
   14560:	69c4      	ldr	r4, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   14562:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14564:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14568:	429a      	cmp	r2, r3
{
   1456a:	b08a      	sub	sp, #40	; 0x28
	if (unlikely(lll->handle == 0xFFFF)) {
   1456c:	d069      	beq.n	14642 <ull_conn_done+0xe6>
	switch (done->extra.mic_state) {
   1456e:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   14572:	2b01      	cmp	r3, #1
   14574:	4605      	mov	r5, r0
   14576:	f000 8101 	beq.w	1477c <ull_conn_done+0x220>
   1457a:	2b02      	cmp	r3, #2
   1457c:	f000 80e8 	beq.w	14750 <ull_conn_done+0x1f4>
   14580:	2b00      	cmp	r3, #0
   14582:	f000 80cb 	beq.w	1471c <ull_conn_done+0x1c0>
	reason_final = conn->llcp_terminate.reason_final;
   14586:	f894 6143 	ldrb.w	r6, [r4, #323]	; 0x143
	if (reason_final && (
   1458a:	2e00      	cmp	r6, #0
   1458c:	f040 80e3 	bne.w	14756 <ull_conn_done+0x1fa>
	latency_event = lll->latency_event;
   14590:	f8b4 8030 	ldrh.w	r8, [r4, #48]	; 0x30
	if (done->extra.trx_cnt) {
   14594:	8cab      	ldrh	r3, [r5, #36]	; 0x24
	elapsed_event = latency_event + 1;
   14596:	f108 0701 	add.w	r7, r8, #1
	ticks_drift_minus = 0U;
   1459a:	e9cd 6608 	strd	r6, r6, [sp, #32]
	elapsed_event = latency_event + 1;
   1459e:	b2bf      	uxth	r7, r7
	if (done->extra.trx_cnt) {
   145a0:	2b00      	cmp	r3, #0
   145a2:	d051      	beq.n	14648 <ull_conn_done+0xec>
		} else if (lll->role) {
   145a4:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   145a8:	2b00      	cmp	r3, #0
   145aa:	f2c0 8130 	blt.w	1480e <ull_conn_done+0x2b2>
	if (done->extra.crc_valid) {
   145ae:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
		conn->connect_expire = 0U;
   145b2:	2200      	movs	r2, #0
   145b4:	f8a4 20c0 	strh.w	r2, [r4, #192]	; 0xc0
	if (done->extra.crc_valid) {
   145b8:	2b00      	cmp	r3, #0
   145ba:	f000 80e5 	beq.w	14788 <ull_conn_done+0x22c>
		conn->supervision_expire = 0U;
   145be:	2300      	movs	r3, #0
   145c0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->procedure_expire != 0U) {
   145c4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   145c8:	b12b      	cbz	r3, 145d6 <ull_conn_done+0x7a>
		if (conn->procedure_expire > elapsed_event) {
   145ca:	42bb      	cmp	r3, r7
   145cc:	f240 8131 	bls.w	14832 <ull_conn_done+0x2d6>
			conn->procedure_expire -= elapsed_event;
   145d0:	1bdb      	subs	r3, r3, r7
   145d2:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->apto_expire != 0U) {
   145d6:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   145da:	b12b      	cbz	r3, 145e8 <ull_conn_done+0x8c>
		if (conn->apto_expire > elapsed_event) {
   145dc:	42bb      	cmp	r3, r7
   145de:	f240 8103 	bls.w	147e8 <ull_conn_done+0x28c>
			conn->apto_expire -= elapsed_event;
   145e2:	1bdb      	subs	r3, r3, r7
   145e4:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
	if (conn->appto_expire != 0U) {
   145e8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   145ec:	2b00      	cmp	r3, #0
   145ee:	d052      	beq.n	14696 <ull_conn_done+0x13a>
		if (conn->appto_expire > elapsed_event) {
   145f0:	42bb      	cmp	r3, r7
   145f2:	f200 80d8 	bhi.w	147a6 <ull_conn_done+0x24a>
			if ((conn->procedure_expire == 0U) &&
   145f6:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
			conn->appto_expire = 0U;
   145fa:	2200      	movs	r2, #0
   145fc:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
			if ((conn->procedure_expire == 0U) &&
   14600:	2b00      	cmp	r3, #0
   14602:	d148      	bne.n	14696 <ull_conn_done+0x13a>
			    (conn->llcp_req == conn->llcp_ack)) {
   14604:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   14608:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
			if ((conn->procedure_expire == 0U) &&
   1460c:	4293      	cmp	r3, r2
   1460e:	d146      	bne.n	1469e <ull_conn_done+0x142>
				conn->llcp_type = LLCP_PING;
   14610:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   14612:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   14614:	f884 20e6 	strb.w	r2, [r4, #230]	; 0xe6
				conn->llcp_ack -= 2U;
   14618:	f884 30e5 	strb.w	r3, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1461c:	e045      	b.n	146aa <ull_conn_done+0x14e>
	if (conn == conn_upd_curr) {
   1461e:	4ba6      	ldr	r3, [pc, #664]	; (148b8 <ull_conn_done+0x35c>)
	rx->hdr.handle = conn->lll.handle;
   14620:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   14622:	681a      	ldr	r2, [r3, #0]
   14624:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   14626:	bf04      	itt	eq
   14628:	2200      	moveq	r2, #0
   1462a:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1462c:	2215      	movs	r2, #21
	*((uint8_t *)rx->pdu) = reason;
   1462e:	2308      	movs	r3, #8
	rx->hdr.handle = conn->lll.handle;
   14630:	f8a4 114a 	strh.w	r1, [r4, #330]	; 0x14a
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14634:	f884 2148 	strb.w	r2, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   14638:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   1463c:	4620      	mov	r0, r4
   1463e:	f7ff ff1b 	bl	14478 <conn_cleanup_finalize>
}
   14642:	b00a      	add	sp, #40	; 0x28
   14644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (done->extra.crc_valid) {
   14648:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
   1464c:	2900      	cmp	r1, #0
   1464e:	d1b6      	bne.n	145be <ull_conn_done+0x62>
	else if (conn->connect_expire) {
   14650:	f8b4 30c0 	ldrh.w	r3, [r4, #192]	; 0xc0
   14654:	2b00      	cmp	r3, #0
   14656:	f000 8097 	beq.w	14788 <ull_conn_done+0x22c>
		if (conn->connect_expire > elapsed_event) {
   1465a:	42bb      	cmp	r3, r7
   1465c:	f240 8105 	bls.w	1486a <ull_conn_done+0x30e>
			conn->connect_expire -= elapsed_event;
   14660:	1bdb      	subs	r3, r3, r7
   14662:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
	if (conn->supervision_expire) {
   14666:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1466a:	2b00      	cmp	r3, #0
   1466c:	d0aa      	beq.n	145c4 <ull_conn_done+0x68>
		if (conn->supervision_expire > elapsed_event) {
   1466e:	429f      	cmp	r7, r3
   14670:	d2d5      	bcs.n	1461e <ull_conn_done+0xc2>
			conn->supervision_expire -= elapsed_event;
   14672:	1bdb      	subs	r3, r3, r7
   14674:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   14676:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   14678:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1467a:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
			lll->latency_event = 0U;
   1467e:	8622      	strh	r2, [r4, #48]	; 0x30
			if (conn->supervision_expire <= 6U) {
   14680:	d907      	bls.n	14692 <ull_conn_done+0x136>
			else if (lll->role) {
   14682:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   14686:	4293      	cmp	r3, r2
   14688:	da9c      	bge.n	145c4 <ull_conn_done+0x68>
				if (latency_event) {
   1468a:	f1b8 0f00 	cmp.w	r8, #0
   1468e:	f000 80de 	beq.w	1484e <ull_conn_done+0x2f2>
				force = 1U;
   14692:	2601      	movs	r6, #1
   14694:	e796      	b.n	145c4 <ull_conn_done+0x68>
			    (conn->llcp_req == conn->llcp_ack)) {
   14696:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
   1469a:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1469e:	1a9b      	subs	r3, r3, r2
   146a0:	f003 0303 	and.w	r3, r3, #3
   146a4:	2b02      	cmp	r3, #2
   146a6:	f000 808b 	beq.w	147c0 <ull_conn_done+0x264>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   146aa:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
   146ae:	f894 310d 	ldrb.w	r3, [r4, #269]	; 0x10d
   146b2:	429a      	cmp	r2, r3
   146b4:	f000 80a9 	beq.w	1480a <ull_conn_done+0x2ae>
		lll->latency_event = 0U;
   146b8:	2200      	movs	r2, #0
   146ba:	8622      	strh	r2, [r4, #48]	; 0x30
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   146bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   146be:	b916      	cbnz	r6, 146c6 <ull_conn_done+0x16a>
   146c0:	4590      	cmp	r8, r2
   146c2:	f000 808a 	beq.w	147da <ull_conn_done+0x27e>
		lazy = lll->latency_event + 1U;
   146c6:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   146c8:	9d08      	ldr	r5, [sp, #32]
		lazy = lll->latency_event + 1U;
   146ca:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   146cc:	b90b      	cbnz	r3, 146d2 <ull_conn_done+0x176>
   146ce:	2d00      	cmp	r5, #0
   146d0:	d064      	beq.n	1479c <ull_conn_done+0x240>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   146d2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
		struct ll_conn *conn = lll->hdr.parent;
   146d4:	69e4      	ldr	r4, [r4, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   146d6:	9500      	str	r5, [sp, #0]
   146d8:	2000      	movs	r0, #0
   146da:	4d78      	ldr	r5, [pc, #480]	; (148bc <ull_conn_done+0x360>)
   146dc:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   146de:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   146e0:	e9cd 0001 	strd	r0, r0, [sp, #4]
   146e4:	9604      	str	r6, [sp, #16]
   146e6:	9406      	str	r4, [sp, #24]
   146e8:	b2d2      	uxtb	r2, r2
   146ea:	2101      	movs	r1, #1
   146ec:	9505      	str	r5, [sp, #20]
   146ee:	f7f8 fa9b 	bl	cc28 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   146f2:	f030 0302 	bics.w	r3, r0, #2
   146f6:	d0a4      	beq.n	14642 <ull_conn_done+0xe6>
   146f8:	f7fa fe96 	bl	f428 <ull_disable_mark_get>
   146fc:	4284      	cmp	r4, r0
   146fe:	d0a0      	beq.n	14642 <ull_conn_done+0xe6>
   14700:	4a6f      	ldr	r2, [pc, #444]	; (148c0 <ull_conn_done+0x364>)
   14702:	4970      	ldr	r1, [pc, #448]	; (148c4 <ull_conn_done+0x368>)
   14704:	4870      	ldr	r0, [pc, #448]	; (148c8 <ull_conn_done+0x36c>)
   14706:	f240 53d6 	movw	r3, #1494	; 0x5d6
   1470a:	f007 f833 	bl	1b774 <printk>
   1470e:	4040      	eors	r0, r0
   14710:	f380 8811 	msr	BASEPRI, r0
   14714:	f04f 0003 	mov.w	r0, #3
   14718:	df02      	svc	2
   1471a:	e792      	b.n	14642 <ull_conn_done+0xe6>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   1471c:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
   14720:	0718      	lsls	r0, r3, #28
   14722:	d554      	bpl.n	147ce <ull_conn_done+0x272>
					    (lll->latency + 6)) ?
   14724:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
			appto_reload_new = (conn->apto_reload >
   14726:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
					    (lll->latency + 6)) ?
   1472a:	1d98      	adds	r0, r3, #6
			appto_reload_new = (conn->apto_reload >
   1472c:	4281      	cmp	r1, r0
					   (conn->apto_reload -
   1472e:	bfc4      	itt	gt
   14730:	1acb      	subgt	r3, r1, r3
   14732:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   14734:	f8b4 00ca 	ldrh.w	r0, [r4, #202]	; 0xca
			appto_reload_new = (conn->apto_reload >
   14738:	bfcc      	ite	gt
   1473a:	b29b      	uxthgt	r3, r3
   1473c:	460b      	movle	r3, r1
			if (conn->appto_reload != appto_reload_new) {
   1473e:	4298      	cmp	r0, r3
   14740:	d071      	beq.n	14826 <ull_conn_done+0x2ca>
				conn->appto_reload = appto_reload_new;
   14742:	f8a4 30ca 	strh.w	r3, [r4, #202]	; 0xca
				conn->appto_expire = conn->appto_reload;
   14746:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				conn->apto_expire = conn->apto_reload;
   1474a:	f8a4 10d0 	strh.w	r1, [r4, #208]	; 0xd0
   1474e:	e71a      	b.n	14586 <ull_conn_done+0x2a>
		conn->llcp_terminate.reason_final =
   14750:	263d      	movs	r6, #61	; 0x3d
   14752:	f884 6143 	strb.w	r6, [r4, #323]	; 0x143
	if (conn == conn_upd_curr) {
   14756:	4b58      	ldr	r3, [pc, #352]	; (148b8 <ull_conn_done+0x35c>)
	rx->hdr.handle = conn->lll.handle;
   14758:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   1475c:	6819      	ldr	r1, [r3, #0]
	*((uint8_t *)rx->pdu) = reason;
   1475e:	f884 6160 	strb.w	r6, [r4, #352]	; 0x160
	if (conn == conn_upd_curr) {
   14762:	428c      	cmp	r4, r1
		conn_upd_curr = NULL;
   14764:	bf04      	itt	eq
   14766:	2100      	moveq	r1, #0
   14768:	6019      	streq	r1, [r3, #0]
	conn_cleanup_finalize(conn);
   1476a:	4620      	mov	r0, r4
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1476c:	2315      	movs	r3, #21
   1476e:	f884 3148 	strb.w	r3, [r4, #328]	; 0x148
}
   14772:	b00a      	add	sp, #40	; 0x28
   14774:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	conn_cleanup_finalize(conn);
   14778:	f7ff be7e 	b.w	14478 <conn_cleanup_finalize>
		conn->appto_expire = conn->apto_expire = 0U;
   1477c:	2300      	movs	r3, #0
   1477e:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   14782:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		break;
   14786:	e6fe      	b.n	14586 <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   14788:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1478c:	2b00      	cmp	r3, #0
   1478e:	f47f af6e 	bne.w	1466e <ull_conn_done+0x112>
			conn->supervision_expire = conn->supervision_reload;
   14792:	f8b4 30c2 	ldrh.w	r3, [r4, #194]	; 0xc2
   14796:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   1479a:	e766      	b.n	1466a <ull_conn_done+0x10e>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1479c:	2900      	cmp	r1, #0
   1479e:	d198      	bne.n	146d2 <ull_conn_done+0x176>
   147a0:	2e00      	cmp	r6, #0
   147a2:	d196      	bne.n	146d2 <ull_conn_done+0x176>
   147a4:	e74d      	b.n	14642 <ull_conn_done+0xe6>
			conn->appto_expire -= elapsed_event;
   147a6:	1bdf      	subs	r7, r3, r7
			    (conn->llcp_req == conn->llcp_ack)) {
   147a8:	f894 20e5 	ldrb.w	r2, [r4, #229]	; 0xe5
   147ac:	f894 30e4 	ldrb.w	r3, [r4, #228]	; 0xe4
			conn->appto_expire -= elapsed_event;
   147b0:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   147b4:	1a9b      	subs	r3, r3, r2
   147b6:	f003 0303 	and.w	r3, r3, #3
   147ba:	2b02      	cmp	r3, #2
   147bc:	f47f af75 	bne.w	146aa <ull_conn_done+0x14e>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   147c0:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   147c4:	3b01      	subs	r3, #1
   147c6:	2b01      	cmp	r3, #1
   147c8:	f63f af6f 	bhi.w	146aa <ull_conn_done+0x14e>
   147cc:	e774      	b.n	146b8 <ull_conn_done+0x15c>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   147ce:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   147d2:	07d9      	lsls	r1, r3, #31
   147d4:	f57f aed7 	bpl.w	14586 <ull_conn_done+0x2a>
   147d8:	e7a4      	b.n	14724 <ull_conn_done+0x1c8>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   147da:	9d08      	ldr	r5, [sp, #32]
   147dc:	b913      	cbnz	r3, 147e4 <ull_conn_done+0x288>
   147de:	2d00      	cmp	r5, #0
   147e0:	f43f af2f 	beq.w	14642 <ull_conn_done+0xe6>
	lazy = 0U;
   147e4:	4631      	mov	r1, r6
   147e6:	e774      	b.n	146d2 <ull_conn_done+0x176>
			rx = ll_pdu_rx_alloc();
   147e8:	f7fa fd96 	bl	f318 <ll_pdu_rx_alloc>
			if (rx) {
   147ec:	4601      	mov	r1, r0
   147ee:	b350      	cbz	r0, 14846 <ull_conn_done+0x2ea>
				rx->handle = lll->handle;
   147f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
				conn->apto_expire = 0U;
   147f2:	2200      	movs	r2, #0
   147f4:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
				rx->handle = lll->handle;
   147f8:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   147fa:	2318      	movs	r3, #24
   147fc:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   147fe:	6800      	ldr	r0, [r0, #0]
   14800:	f7fa fd5c 	bl	f2bc <ll_rx_put>
				ll_rx_sched();
   14804:	f7fa fd64 	bl	f2d0 <ll_rx_sched>
   14808:	e6ee      	b.n	145e8 <ull_conn_done+0x8c>
	if ((force) || (latency_event != lll->latency_event)) {
   1480a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   1480c:	e756      	b.n	146bc <ull_conn_done+0x160>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   1480e:	aa08      	add	r2, sp, #32
   14810:	a909      	add	r1, sp, #36	; 0x24
   14812:	4628      	mov	r0, r5
   14814:	f7ec f844 	bl	8a0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   14818:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1481c:	2b00      	cmp	r3, #0
   1481e:	d035      	beq.n	1488c <ull_conn_done+0x330>
				lll->latency_event = 0;
   14820:	2300      	movs	r3, #0
   14822:	8623      	strh	r3, [r4, #48]	; 0x30
   14824:	e6c3      	b.n	145ae <ull_conn_done+0x52>
			if (conn->apto_expire == 0U) {
   14826:	f8b4 00d0 	ldrh.w	r0, [r4, #208]	; 0xd0
   1482a:	2800      	cmp	r0, #0
   1482c:	f47f aeab 	bne.w	14586 <ull_conn_done+0x2a>
   14830:	e789      	b.n	14746 <ull_conn_done+0x1ea>
	if (conn == conn_upd_curr) {
   14832:	4b21      	ldr	r3, [pc, #132]	; (148b8 <ull_conn_done+0x35c>)
	rx->hdr.handle = conn->lll.handle;
   14834:	8d21      	ldrh	r1, [r4, #40]	; 0x28
	if (conn == conn_upd_curr) {
   14836:	681a      	ldr	r2, [r3, #0]
   14838:	4294      	cmp	r4, r2
		conn_upd_curr = NULL;
   1483a:	bf04      	itt	eq
   1483c:	2200      	moveq	r2, #0
   1483e:	601a      	streq	r2, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14840:	2215      	movs	r2, #21
	*((uint8_t *)rx->pdu) = reason;
   14842:	2322      	movs	r3, #34	; 0x22
   14844:	e6f4      	b.n	14630 <ull_conn_done+0xd4>
				conn->apto_expire = 1U;
   14846:	2301      	movs	r3, #1
   14848:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
   1484c:	e6cc      	b.n	145e8 <ull_conn_done+0x8c>
					force = conn->slave.force & 0x01;
   1484e:	f8d4 30dc 	ldr.w	r3, [r4, #220]	; 0xdc
					conn->slave.force >>= 1U;
   14852:	085a      	lsrs	r2, r3, #1
					if (force) {
   14854:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   14858:	bf17      	itett	ne
   1485a:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   1485e:	f8c4 20dc 	streq.w	r2, [r4, #220]	; 0xdc
						conn->slave.force |= BIT(31);
   14862:	f8c4 20dc 	strne.w	r2, [r4, #220]	; 0xdc
					force = conn->slave.force & 0x01;
   14866:	461e      	movne	r6, r3
   14868:	e6ac      	b.n	145c4 <ull_conn_done+0x68>
	if (conn == conn_upd_curr) {
   1486a:	4b13      	ldr	r3, [pc, #76]	; (148b8 <ull_conn_done+0x35c>)
	rx->hdr.handle = conn->lll.handle;
   1486c:	f8a4 214a 	strh.w	r2, [r4, #330]	; 0x14a
	if (conn == conn_upd_curr) {
   14870:	6818      	ldr	r0, [r3, #0]
   14872:	4284      	cmp	r4, r0
		conn_upd_curr = NULL;
   14874:	bf08      	it	eq
   14876:	6019      	streq	r1, [r3, #0]
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14878:	2115      	movs	r1, #21
	*((uint8_t *)rx->pdu) = reason;
   1487a:	233e      	movs	r3, #62	; 0x3e
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1487c:	f884 1148 	strb.w	r1, [r4, #328]	; 0x148
	*((uint8_t *)rx->pdu) = reason;
   14880:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
	conn_cleanup_finalize(conn);
   14884:	4620      	mov	r0, r4
   14886:	f7ff fdf7 	bl	14478 <conn_cleanup_finalize>
}
   1488a:	e6da      	b.n	14642 <ull_conn_done+0xe6>
				ull_conn_tx_demux(UINT8_MAX);
   1488c:	20ff      	movs	r0, #255	; 0xff
   1488e:	f7ff fda3 	bl	143d8 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   14892:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   14896:	2b00      	cmp	r3, #0
   14898:	d1c2      	bne.n	14820 <ull_conn_done+0x2c4>
   1489a:	e9d4 0119 	ldrd	r0, r1, [r4, #100]	; 0x64
   1489e:	4632      	mov	r2, r6
   148a0:	f7f6 ffac 	bl	b7fc <memq_peek>
   148a4:	2800      	cmp	r0, #0
   148a6:	d1bb      	bne.n	14820 <ull_conn_done+0x2c4>
			} else if (lll->slave.latency_enabled) {
   148a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   148ac:	075b      	lsls	r3, r3, #29
				lll->latency_event = lll->latency;
   148ae:	bf44      	itt	mi
   148b0:	8da3      	ldrhmi	r3, [r4, #44]	; 0x2c
   148b2:	8623      	strhmi	r3, [r4, #48]	; 0x30
   148b4:	e67b      	b.n	145ae <ull_conn_done+0x52>
   148b6:	bf00      	nop
   148b8:	20001f50 	.word	0x20001f50
   148bc:	000107c1 	.word	0x000107c1
   148c0:	00021da4 	.word	0x00021da4
   148c4:	00021f18 	.word	0x00021f18
   148c8:	0002180c 	.word	0x0002180c

000148cc <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   148cc:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   148d0:	2b00      	cmp	r3, #0
   148d2:	f000 80be 	beq.w	14a52 <ull_conn_tx_lll_enqueue+0x186>
   148d6:	3901      	subs	r1, #1
{
   148d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   148dc:	f8df 8174 	ldr.w	r8, [pc, #372]	; 14a54 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   148e0:	f8df a174 	ldr.w	sl, [pc, #372]	; 14a58 <ull_conn_tx_lll_enqueue+0x18c>
   148e4:	f8df 9174 	ldr.w	r9, [pc, #372]	; 14a5c <ull_conn_tx_lll_enqueue+0x190>
   148e8:	4604      	mov	r4, r0
   148ea:	b2cd      	uxtb	r5, r1
   148ec:	e010      	b.n	14910 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   148ee:	4640      	mov	r0, r8
   148f0:	f7f6 ff16 	bl	b720 <mem_acquire>
		LL_ASSERT(link);
   148f4:	4607      	mov	r7, r0
   148f6:	b3b0      	cbz	r0, 14966 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   148f8:	f104 0268 	add.w	r2, r4, #104	; 0x68
   148fc:	4631      	mov	r1, r6
   148fe:	4638      	mov	r0, r7
   14900:	f7f6 ff72 	bl	b7e8 <memq_enqueue>
	while (conn->tx_head &&
   14904:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   14908:	3d01      	subs	r5, #1
   1490a:	b2ed      	uxtb	r5, r5
   1490c:	2b00      	cmp	r3, #0
   1490e:	d05c      	beq.n	149ca <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   14910:	f894 21bf 	ldrb.w	r2, [r4, #447]	; 0x1bf
	while (conn->tx_head &&
   14914:	07d1      	lsls	r1, r2, #31
   14916:	d403      	bmi.n	14920 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   14918:	f894 2166 	ldrb.w	r2, [r4, #358]	; 0x166
		 !conn->llcp_phy.pause_tx &&
   1491c:	0792      	lsls	r2, r2, #30
   1491e:	d53a      	bpl.n	14996 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   14920:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   14924:	4293      	cmp	r3, r2
   14926:	d150      	bne.n	149ca <ull_conn_tx_lll_enqueue+0xfe>
   14928:	2dff      	cmp	r5, #255	; 0xff
   1492a:	d04e      	beq.n	149ca <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1492c:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   14930:	4620      	mov	r0, r4
   14932:	f7fb ff65 	bl	10800 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14936:	7903      	ldrb	r3, [r0, #4]
   14938:	f003 0303 	and.w	r3, r3, #3
   1493c:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1493e:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14940:	d1d5      	bne.n	148ee <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   14942:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   14944:	2b0b      	cmp	r3, #11
   14946:	d042      	beq.n	149ce <ull_conn_tx_lll_enqueue+0x102>
   14948:	d81b      	bhi.n	14982 <ull_conn_tx_lll_enqueue+0xb6>
   1494a:	2b04      	cmp	r3, #4
   1494c:	d1cf      	bne.n	148ee <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1494e:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
   14952:	f043 0302 	orr.w	r3, r3, #2
   14956:	f884 3166 	strb.w	r3, [r4, #358]	; 0x166
		link = mem_acquire(&mem_link_tx.free);
   1495a:	4640      	mov	r0, r8
   1495c:	f7f6 fee0 	bl	b720 <mem_acquire>
		LL_ASSERT(link);
   14960:	4607      	mov	r7, r0
   14962:	2800      	cmp	r0, #0
   14964:	d1c8      	bne.n	148f8 <ull_conn_tx_lll_enqueue+0x2c>
   14966:	483e      	ldr	r0, [pc, #248]	; (14a60 <ull_conn_tx_lll_enqueue+0x194>)
   14968:	f240 632a 	movw	r3, #1578	; 0x62a
   1496c:	4652      	mov	r2, sl
   1496e:	4649      	mov	r1, r9
   14970:	f006 ff00 	bl	1b774 <printk>
   14974:	4040      	eors	r0, r0
   14976:	f380 8811 	msr	BASEPRI, r0
   1497a:	f04f 0003 	mov.w	r0, #3
   1497e:	df02      	svc	2
   14980:	e7ba      	b.n	148f8 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   14982:	3b16      	subs	r3, #22
   14984:	2b01      	cmp	r3, #1
   14986:	d8b2      	bhi.n	148ee <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   14988:	f894 31bf 	ldrb.w	r3, [r4, #447]	; 0x1bf
   1498c:	f043 0301 	orr.w	r3, r3, #1
   14990:	f884 31bf 	strb.w	r3, [r4, #447]	; 0x1bf
		break;
   14994:	e7ab      	b.n	148ee <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   14996:	791a      	ldrb	r2, [r3, #4]
   14998:	f002 0203 	and.w	r2, r2, #3
   1499c:	2a03      	cmp	r2, #3
   1499e:	d1c3      	bne.n	14928 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   149a0:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   149a2:	2a03      	cmp	r2, #3
   149a4:	d001      	beq.n	149aa <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   149a6:	2a0a      	cmp	r2, #10
   149a8:	d1be      	bne.n	14928 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   149aa:	f894 10e5 	ldrb.w	r1, [r4, #229]	; 0xe5
   149ae:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   149b2:	428a      	cmp	r2, r1
   149b4:	d010      	beq.n	149d8 <ull_conn_tx_lll_enqueue+0x10c>
   149b6:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
   149ba:	2a03      	cmp	r2, #3
   149bc:	d0b4      	beq.n	14928 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   149be:	681a      	ldr	r2, [r3, #0]
   149c0:	b11a      	cbz	r2, 149ca <ull_conn_tx_lll_enqueue+0xfe>
   149c2:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   149c6:	428a      	cmp	r2, r1
   149c8:	d032      	beq.n	14a30 <ull_conn_tx_lll_enqueue+0x164>
}
   149ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   149ce:	f994 3039 	ldrsb.w	r3, [r4, #57]	; 0x39
   149d2:	2b00      	cmp	r3, #0
   149d4:	da8b      	bge.n	148ee <ull_conn_tx_lll_enqueue+0x22>
   149d6:	e7ba      	b.n	1494e <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   149d8:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
   149dc:	f894 1120 	ldrb.w	r1, [r4, #288]	; 0x120
   149e0:	4288      	cmp	r0, r1
   149e2:	d1ec      	bne.n	149be <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   149e4:	f894 0139 	ldrb.w	r0, [r4, #313]	; 0x139
   149e8:	f894 1138 	ldrb.w	r1, [r4, #312]	; 0x138
   149ec:	4288      	cmp	r0, r1
   149ee:	d1e6      	bne.n	149be <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   149f0:	f894 0185 	ldrb.w	r0, [r4, #389]	; 0x185
   149f4:	f894 1184 	ldrb.w	r1, [r4, #388]	; 0x184
   149f8:	4288      	cmp	r0, r1
   149fa:	d1e0      	bne.n	149be <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   149fc:	f894 01ad 	ldrb.w	r0, [r4, #429]	; 0x1ad
   14a00:	f894 11ac 	ldrb.w	r1, [r4, #428]	; 0x1ac
   14a04:	4288      	cmp	r0, r1
   14a06:	d1da      	bne.n	149be <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   14a08:	f894 01bd 	ldrb.w	r0, [r4, #445]	; 0x1bd
   14a0c:	f894 11bc 	ldrb.w	r1, [r4, #444]	; 0x1bc
   14a10:	4288      	cmp	r0, r1
   14a12:	d1d4      	bne.n	149be <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14a14:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_ack -= 2U;
   14a18:	3a02      	subs	r2, #2
   14a1a:	f884 20e5 	strb.w	r2, [r4, #229]	; 0xe5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   14a1e:	2201      	movs	r2, #1
   14a20:	f362 0301 	bfi	r3, r2, #0, #2
   14a24:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
			conn->llcp_type = LLCP_ENCRYPTION;
   14a28:	2303      	movs	r3, #3
   14a2a:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
			conn->llcp_ack -= 2U;
   14a2e:	e77b      	b.n	14928 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   14a30:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
				tx->next = conn->tx_ctrl_last->next;
   14a34:	f8d4 21cc 	ldr.w	r2, [r4, #460]	; 0x1cc
				if (!conn->tx_data_last) {
   14a38:	f8d4 11d4 	ldr.w	r1, [r4, #468]	; 0x1d4
				tx->next = conn->tx_ctrl_last->next;
   14a3c:	6810      	ldr	r0, [r2, #0]
   14a3e:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   14a40:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   14a42:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
				if (!conn->tx_data_last) {
   14a46:	2900      	cmp	r1, #0
   14a48:	f47f af6e 	bne.w	14928 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   14a4c:	f8c4 31d4 	str.w	r3, [r4, #468]	; 0x1d4
   14a50:	e76a      	b.n	14928 <ull_conn_tx_lll_enqueue+0x5c>
   14a52:	4770      	bx	lr
   14a54:	20002090 	.word	0x20002090
   14a58:	00021da4 	.word	0x00021da4
   14a5c:	00021e08 	.word	0x00021e08
   14a60:	0002180c 	.word	0x0002180c

00014a64 <tx_demux>:
{
   14a64:	b510      	push	{r4, lr}
   14a66:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   14a68:	2001      	movs	r0, #1
   14a6a:	f7ff fcb5 	bl	143d8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   14a6e:	4620      	mov	r0, r4
   14a70:	2101      	movs	r1, #1
}
   14a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   14a76:	f7ff bf29 	b.w	148cc <ull_conn_tx_lll_enqueue>
   14a7a:	bf00      	nop

00014a7c <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   14a7c:	4901      	ldr	r1, [pc, #4]	; (14a84 <ull_conn_link_tx_release+0x8>)
   14a7e:	f7f6 be69 	b.w	b754 <mem_release>
   14a82:	bf00      	nop
   14a84:	20002090 	.word	0x20002090

00014a88 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   14a88:	4b01      	ldr	r3, [pc, #4]	; (14a90 <ull_conn_ack_last_idx_get+0x8>)
}
   14a8a:	78d8      	ldrb	r0, [r3, #3]
   14a8c:	4770      	bx	lr
   14a8e:	bf00      	nop
   14a90:	2000049c 	.word	0x2000049c

00014a94 <ull_conn_ack_peek>:
{
   14a94:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   14a96:	4b0c      	ldr	r3, [pc, #48]	; (14ac8 <ull_conn_ack_peek+0x34>)
   14a98:	f893 c002 	ldrb.w	ip, [r3, #2]
   14a9c:	78dc      	ldrb	r4, [r3, #3]
   14a9e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   14aa0:	45a4      	cmp	ip, r4
   14aa2:	d00f      	beq.n	14ac4 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   14aa4:	fb1c fc05 	smulbb	ip, ip, r5
   14aa8:	3304      	adds	r3, #4
	if (!lll_tx) {
   14aaa:	4686      	mov	lr, r0
   14aac:	eb13 000c 	adds.w	r0, r3, ip
   14ab0:	d007      	beq.n	14ac2 <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   14ab2:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   14ab6:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   14aba:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   14abc:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   14abe:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   14ac0:	6818      	ldr	r0, [r3, #0]
}
   14ac2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   14ac4:	2000      	movs	r0, #0
}
   14ac6:	bd30      	pop	{r4, r5, pc}
   14ac8:	2000049c 	.word	0x2000049c

00014acc <ull_conn_ack_by_last_peek>:
{
   14acc:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   14ace:	4b0c      	ldr	r3, [pc, #48]	; (14b00 <ull_conn_ack_by_last_peek+0x34>)
   14ad0:	f893 c002 	ldrb.w	ip, [r3, #2]
   14ad4:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   14ad8:	4584      	cmp	ip, r0
   14ada:	d00e      	beq.n	14afa <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   14adc:	3304      	adds	r3, #4
   14ade:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   14ae2:	eb13 000c 	adds.w	r0, r3, ip
   14ae6:	d006      	beq.n	14af6 <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   14ae8:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   14aec:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   14aee:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   14af2:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   14af4:	6818      	ldr	r0, [r3, #0]
}
   14af6:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   14afa:	2000      	movs	r0, #0
   14afc:	e7fb      	b.n	14af6 <ull_conn_ack_by_last_peek+0x2a>
   14afe:	bf00      	nop
   14b00:	2000049c 	.word	0x2000049c

00014b04 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   14b04:	4b09      	ldr	r3, [pc, #36]	; (14b2c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14b06:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14b08:	78da      	ldrb	r2, [r3, #3]
   14b0a:	7818      	ldrb	r0, [r3, #0]
   14b0c:	f893 c001 	ldrb.w	ip, [r3, #1]
   14b10:	428a      	cmp	r2, r1
   14b12:	d009      	beq.n	14b28 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   14b14:	1c4a      	adds	r2, r1, #1
   14b16:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14b18:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14b1c:	4594      	cmp	ip, r2
   14b1e:	bf08      	it	eq
   14b20:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14b22:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14b24:	709a      	strb	r2, [r3, #2]
	return mem;
   14b26:	4770      	bx	lr
		return NULL;
   14b28:	2000      	movs	r0, #0
}
   14b2a:	4770      	bx	lr
   14b2c:	2000049c 	.word	0x2000049c

00014b30 <ull_conn_lll_ack_enqueue>:
{
   14b30:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   14b32:	4a15      	ldr	r2, [pc, #84]	; (14b88 <ull_conn_lll_ack_enqueue+0x58>)
   14b34:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   14b36:	f892 e001 	ldrb.w	lr, [r2, #1]
   14b3a:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   14b3e:	1c63      	adds	r3, r4, #1
   14b40:	b2db      	uxtb	r3, r3
		last = 0U;
   14b42:	459e      	cmp	lr, r3
   14b44:	bf08      	it	eq
   14b46:	2300      	moveq	r3, #0
	if (last == first) {
   14b48:	459c      	cmp	ip, r3
   14b4a:	d00c      	beq.n	14b66 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   14b4c:	4696      	mov	lr, r2
   14b4e:	f81e cb04 	ldrb.w	ip, [lr], #4
   14b52:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   14b56:	eb1e 040c 	adds.w	r4, lr, ip
   14b5a:	d004      	beq.n	14b66 <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   14b5c:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   14b60:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   14b62:	70d3      	strb	r3, [r2, #3]
}
   14b64:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   14b66:	4a09      	ldr	r2, [pc, #36]	; (14b8c <ull_conn_lll_ack_enqueue+0x5c>)
   14b68:	4909      	ldr	r1, [pc, #36]	; (14b90 <ull_conn_lll_ack_enqueue+0x60>)
   14b6a:	480a      	ldr	r0, [pc, #40]	; (14b94 <ull_conn_lll_ack_enqueue+0x64>)
   14b6c:	f44f 63cd 	mov.w	r3, #1640	; 0x668
   14b70:	f006 fe00 	bl	1b774 <printk>
   14b74:	4040      	eors	r0, r0
   14b76:	f380 8811 	msr	BASEPRI, r0
   14b7a:	f04f 0003 	mov.w	r0, #3
   14b7e:	df02      	svc	2
	lll_tx->handle = handle;
   14b80:	2300      	movs	r3, #0
   14b82:	801b      	strh	r3, [r3, #0]
   14b84:	deff      	udf	#255	; 0xff
   14b86:	bf00      	nop
   14b88:	2000049c 	.word	0x2000049c
   14b8c:	00021da4 	.word	0x00021da4
   14b90:	00021df8 	.word	0x00021df8
   14b94:	0002180c 	.word	0x0002180c

00014b98 <ull_conn_tx_ack>:
{
   14b98:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   14b9a:	7953      	ldrb	r3, [r2, #5]
{
   14b9c:	b082      	sub	sp, #8
   14b9e:	4614      	mov	r4, r2
   14ba0:	4605      	mov	r5, r0
   14ba2:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   14ba4:	b37b      	cbz	r3, 14c06 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   14ba6:	7923      	ldrb	r3, [r4, #4]
   14ba8:	f003 0203 	and.w	r2, r3, #3
   14bac:	2a03      	cmp	r2, #3
   14bae:	d00d      	beq.n	14bcc <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   14bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   14bb4:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   14bb6:	bf04      	itt	eq
   14bb8:	f36f 0301 	bfceq	r3, #0, #2
   14bbc:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   14bbe:	4621      	mov	r1, r4
   14bc0:	4628      	mov	r0, r5
}
   14bc2:	b002      	add	sp, #8
   14bc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   14bc8:	f7fa bbbc 	b.w	f344 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   14bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14bd0:	429d      	cmp	r5, r3
   14bd2:	d126      	bne.n	14c22 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   14bd4:	6833      	ldr	r3, [r6, #0]
   14bd6:	429c      	cmp	r4, r3
   14bd8:	d03e      	beq.n	14c58 <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   14bda:	2b00      	cmp	r3, #0
   14bdc:	d0ef      	beq.n	14bbe <ull_conn_tx_ack+0x26>
   14bde:	4a83      	ldr	r2, [pc, #524]	; (14dec <ull_conn_tx_ack+0x254>)
   14be0:	4983      	ldr	r1, [pc, #524]	; (14df0 <ull_conn_tx_ack+0x258>)
   14be2:	4884      	ldr	r0, [pc, #528]	; (14df4 <ull_conn_tx_ack+0x25c>)
   14be4:	f44f 63d1 	mov.w	r3, #1672	; 0x688
   14be8:	f006 fdc4 	bl	1b774 <printk>
   14bec:	4040      	eors	r0, r0
   14bee:	f380 8811 	msr	BASEPRI, r0
   14bf2:	f04f 0003 	mov.w	r0, #3
   14bf6:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   14bf8:	4621      	mov	r1, r4
   14bfa:	4628      	mov	r0, r5
}
   14bfc:	b002      	add	sp, #8
   14bfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   14c02:	f7fa bb9f 	b.w	f344 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   14c06:	4a79      	ldr	r2, [pc, #484]	; (14dec <ull_conn_tx_ack+0x254>)
   14c08:	497b      	ldr	r1, [pc, #492]	; (14df8 <ull_conn_tx_ack+0x260>)
   14c0a:	487a      	ldr	r0, [pc, #488]	; (14df4 <ull_conn_tx_ack+0x25c>)
   14c0c:	f240 6375 	movw	r3, #1653	; 0x675
   14c10:	f006 fdb0 	bl	1b774 <printk>
   14c14:	4040      	eors	r0, r0
   14c16:	f380 8811 	msr	BASEPRI, r0
   14c1a:	f04f 0003 	mov.w	r0, #3
   14c1e:	df02      	svc	2
   14c20:	e7c1      	b.n	14ba6 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   14c22:	462a      	mov	r2, r5
   14c24:	4875      	ldr	r0, [pc, #468]	; (14dfc <ull_conn_tx_ack+0x264>)
   14c26:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
   14c2a:	f7f6 fdab 	bl	b784 <mem_get>
   14c2e:	79e2      	ldrb	r2, [r4, #7]
   14c30:	3a02      	subs	r2, #2
   14c32:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   14c34:	2a15      	cmp	r2, #21
   14c36:	d80c      	bhi.n	14c52 <ull_conn_tx_ack+0xba>
   14c38:	e8df f002 	tbb	[pc, r2]
   14c3c:	261f0b4a 	.word	0x261f0b4a
   14c40:	180b1856 	.word	0x180b1856
   14c44:	2d0b1f0b 	.word	0x2d0b1f0b
   14c48:	150b0b0b 	.word	0x150b0b0b
   14c4c:	8a42180b 	.word	0x8a42180b
   14c50:	3768      	.short	0x3768
		if (link->next == (void *)tx) {
   14c52:	6833      	ldr	r3, [r6, #0]
   14c54:	42a3      	cmp	r3, r4
   14c56:	d1c0      	bne.n	14bda <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14c58:	4969      	ldr	r1, [pc, #420]	; (14e00 <ull_conn_tx_ack+0x268>)
   14c5a:	4620      	mov	r0, r4
}
   14c5c:	b002      	add	sp, #8
   14c5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   14c62:	f7f6 bd77 	b.w	b754 <mem_release>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   14c66:	7a22      	ldrb	r2, [r4, #8]
   14c68:	2a03      	cmp	r2, #3
   14c6a:	d014      	beq.n	14c96 <ull_conn_tx_ack+0xfe>
			conn->common.txn_lock = 0U;
   14c6c:	f893 20d8 	ldrb.w	r2, [r3, #216]	; 0xd8
   14c70:	f36f 0241 	bfc	r2, #1, #1
   14c74:	f883 20d8 	strb.w	r2, [r3, #216]	; 0xd8
			break;
   14c78:	e7ac      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   14c7a:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   14c7e:	f042 0202 	orr.w	r2, r2, #2
   14c82:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
		break;
   14c86:	e7a5      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
			conn->llcp.encryption.state = LLCP_ENC_STATE_ENC_WAIT;
   14c88:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
   14c8c:	f042 0203 	orr.w	r2, r2, #3
   14c90:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
   14c94:	e79e      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   14c96:	f893 2166 	ldrb.w	r2, [r3, #358]	; 0x166
   14c9a:	f022 0203 	bic.w	r2, r2, #3
   14c9e:	f883 2166 	strb.w	r2, [r3, #358]	; 0x166
		conn->procedure_expire = 0U;
   14ca2:	2200      	movs	r2, #0
   14ca4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
		break;
   14ca8:	e794      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   14caa:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   14cae:	2a00      	cmp	r2, #0
   14cb0:	db7b      	blt.n	14daa <ull_conn_tx_ack+0x212>
		conn->llcp_phy.pause_tx = 0U;
   14cb2:	f893 21bf 	ldrb.w	r2, [r3, #447]	; 0x1bf
   14cb6:	f36f 0200 	bfc	r2, #0, #1
   14cba:	f883 21bf 	strb.w	r2, [r3, #447]	; 0x1bf
		break;
   14cbe:	e789      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   14cc0:	f890 21ae 	ldrb.w	r2, [r0, #430]	; 0x1ae
   14cc4:	2102      	movs	r1, #2
   14cc6:	f361 0202 	bfi	r2, r1, #0, #3
   14cca:	f880 21ae 	strb.w	r2, [r0, #430]	; 0x1ae
		break;
   14cce:	e781      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.terminate_ind.error_code ==
   14cd0:	7a22      	ldrb	r2, [r4, #8]
			conn->llcp_terminate.reason_final =
   14cd2:	2a13      	cmp	r2, #19
   14cd4:	bf08      	it	eq
   14cd6:	2216      	moveq	r2, #22
   14cd8:	f880 2143 	strb.w	r2, [r0, #323]	; 0x143
		conn->llcp_terminate.ack--;
   14cdc:	f890 2141 	ldrb.w	r2, [r0, #321]	; 0x141
   14ce0:	3a01      	subs	r2, #1
   14ce2:	f880 2141 	strb.w	r2, [r0, #321]	; 0x141
	break;
   14ce6:	e775      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
		if (conn->lll.role) {
   14ce8:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   14cec:	2a00      	cmp	r2, #0
   14cee:	dacb      	bge.n	14c88 <ull_conn_tx_ack+0xf0>
			conn->llcp_enc.pause_rx = 0U;
   14cf0:	f890 2166 	ldrb.w	r2, [r0, #358]	; 0x166
   14cf4:	f022 0203 	bic.w	r2, r2, #3
   14cf8:	f880 2166 	strb.w	r2, [r0, #358]	; 0x166
			conn->procedure_expire = 0U;
   14cfc:	2200      	movs	r2, #0
   14cfe:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
			conn->llcp_ack = conn->llcp_req;
   14d02:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   14d06:	f880 20e5 	strb.w	r2, [r0, #229]	; 0xe5
   14d0a:	e763      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14d0c:	f890 21be 	ldrb.w	r2, [r0, #446]	; 0x1be
   14d10:	2102      	movs	r1, #2
   14d12:	f361 0201 	bfi	r2, r1, #0, #2
   14d16:	f880 21be 	strb.w	r2, [r0, #446]	; 0x1be
		if (conn->lll.role) {
   14d1a:	f990 2039 	ldrsb.w	r2, [r0, #57]	; 0x39
   14d1e:	2a00      	cmp	r2, #0
   14d20:	dac7      	bge.n	14cb2 <ull_conn_tx_ack+0x11a>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14d22:	4a38      	ldr	r2, [pc, #224]	; (14e04 <ull_conn_tx_ack+0x26c>)
   14d24:	e892 0003 	ldmia.w	r2, {r0, r1}
   14d28:	aa02      	add	r2, sp, #8
   14d2a:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   14d2e:	f893 1060 	ldrb.w	r1, [r3, #96]	; 0x60
   14d32:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
   14d36:	ea41 0292 	orr.w	r2, r1, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   14d3a:	f002 0207 	and.w	r2, r2, #7
   14d3e:	a802      	add	r0, sp, #8
   14d40:	4402      	add	r2, r0
   14d42:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   14d46:	f362 1106 	bfi	r1, r2, #4, #3
   14d4a:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
   14d4e:	e7b0      	b.n	14cb2 <ull_conn_tx_ack+0x11a>
		conn->common.txn_lock = 0U;
   14d50:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   14d54:	f36f 0241 	bfc	r2, #1, #1
   14d58:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   14d5c:	f893 21ad 	ldrb.w	r2, [r3, #429]	; 0x1ad
   14d60:	f890 01ac 	ldrb.w	r0, [r0, #428]	; 0x1ac
   14d64:	4282      	cmp	r2, r0
   14d66:	f43f af35 	beq.w	14bd4 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   14d6a:	f893 11ae 	ldrb.w	r1, [r3, #430]	; 0x1ae
   14d6e:	f001 0207 	and.w	r2, r1, #7
   14d72:	2a03      	cmp	r2, #3
   14d74:	d005      	beq.n	14d82 <ull_conn_tx_ack+0x1ea>
   14d76:	3203      	adds	r2, #3
   14d78:	f002 0207 	and.w	r2, r2, #7
   14d7c:	2a01      	cmp	r2, #1
   14d7e:	f63f af68 	bhi.w	14c52 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   14d82:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
   14d86:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
				conn->lll.max_tx_time =
   14d8a:	f8b3 21b6 	ldrh.w	r2, [r3, #438]	; 0x1b6
   14d8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				if (conn->llcp_length.state ==
   14d92:	f001 0207 	and.w	r2, r1, #7
   14d96:	2a05      	cmp	r2, #5
   14d98:	d022      	beq.n	14de0 <ull_conn_tx_ack+0x248>
				if (!conn->llcp_length.cache.tx_octets) {
   14d9a:	f8b3 21b8 	ldrh.w	r2, [r3, #440]	; 0x1b8
   14d9e:	b98a      	cbnz	r2, 14dc4 <ull_conn_tx_ack+0x22c>
					conn->llcp_length.ack =
   14da0:	f883 01ad 	strb.w	r0, [r3, #429]	; 0x1ad
					conn->procedure_expire = 0U;
   14da4:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
					break;
   14da8:	e714      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
				conn->common.txn_lock = 0U;
   14daa:	f890 10d8 	ldrb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14dae:	4a15      	ldr	r2, [pc, #84]	; (14e04 <ull_conn_tx_ack+0x26c>)
				conn->common.txn_lock = 0U;
   14db0:	f36f 0141 	bfc	r1, #1, #1
   14db4:	f880 10d8 	strb.w	r1, [r0, #216]	; 0xd8
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   14db8:	e892 0003 	ldmia.w	r2, {r0, r1}
   14dbc:	aa02      	add	r2, sp, #8
   14dbe:	e902 0003 	stmdb	r2, {r0, r1}
				conn->common.txn_lock = 0U;
   14dc2:	e7b4      	b.n	14d2e <ull_conn_tx_ack+0x196>
				conn->llcp_length.tx_octets =
   14dc4:	f8a3 21b2 	strh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   14dc8:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14dca:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   14dce:	f8a3 21b8 	strh.w	r2, [r3, #440]	; 0x1b8
				conn->llcp_length.tx_time =
   14dd2:	f8b3 21ba 	ldrh.w	r2, [r3, #442]	; 0x1ba
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   14dd6:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
				conn->llcp_length.tx_time =
   14dda:	f8a3 21b6 	strh.w	r2, [r3, #438]	; 0x1b6
				break;
   14dde:	e6f9      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   14de0:	2204      	movs	r2, #4
   14de2:	f362 0102 	bfi	r1, r2, #0, #3
   14de6:	f883 11ae 	strb.w	r1, [r3, #430]	; 0x1ae
					break;
   14dea:	e6f3      	b.n	14bd4 <ull_conn_tx_ack+0x3c>
   14dec:	00021da4 	.word	0x00021da4
   14df0:	00021f80 	.word	0x00021f80
   14df4:	0002180c 	.word	0x0002180c
   14df8:	00021f74 	.word	0x00021f74
   14dfc:	20001020 	.word	0x20001020
   14e00:	20001fdc 	.word	0x20001fdc
   14e04:	00021f8c 	.word	0x00021f8c

00014e08 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   14e08:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
	if (lll->enc_tx) {
   14e0c:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
	switch (lll->phy_tx_time) {
   14e10:	f3c3 1302 	ubfx	r3, r3, #4, #3
   14e14:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   14e16:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
	return max_tx_octets;
   14e1a:	8f80      	ldrh	r0, [r0, #60]	; 0x3c
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   14e1c:	bf15      	itete	ne
   14e1e:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   14e20:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   14e22:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   14e24:	3b0b      	subeq	r3, #11
   14e26:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   14e28:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   14e2a:	bf44      	itt	mi
   14e2c:	3b04      	submi	r3, #4
   14e2e:	b29b      	uxthmi	r3, r3
}
   14e30:	4298      	cmp	r0, r3
   14e32:	bf28      	it	cs
   14e34:	4618      	movcs	r0, r3
   14e36:	4770      	bx	lr

00014e38 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *param)
{
   14e38:	b510      	push	{r4, lr}
   14e3a:	460c      	mov	r4, r1
	struct ll_conn *conn = param;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14e3c:	b930      	cbnz	r0, 14e4c <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   14e3e:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14e42:	f36f 0382 	bfc	r3, #2, #1
   14e46:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   14e4a:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   14e4c:	4a09      	ldr	r2, [pc, #36]	; (14e74 <ticker_update_latency_cancel_op_cb+0x3c>)
   14e4e:	490a      	ldr	r1, [pc, #40]	; (14e78 <ticker_update_latency_cancel_op_cb+0x40>)
   14e50:	480a      	ldr	r0, [pc, #40]	; (14e7c <ticker_update_latency_cancel_op_cb+0x44>)
   14e52:	f240 236f 	movw	r3, #623	; 0x26f
   14e56:	f006 fc8d 	bl	1b774 <printk>
   14e5a:	4040      	eors	r0, r0
   14e5c:	f380 8811 	msr	BASEPRI, r0
   14e60:	f04f 0003 	mov.w	r0, #3
   14e64:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   14e66:	f894 30d8 	ldrb.w	r3, [r4, #216]	; 0xd8
   14e6a:	f36f 0382 	bfc	r3, #2, #1
   14e6e:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
}
   14e72:	bd10      	pop	{r4, pc}
   14e74:	00021fac 	.word	0x00021fac
   14e78:	00021ff0 	.word	0x00021ff0
   14e7c:	0002180c 	.word	0x0002180c

00014e80 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e80:	b900      	cbnz	r0, 14e84 <ticker_op_cb+0x4>
   14e82:	4770      	bx	lr
{
   14e84:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   14e86:	4a07      	ldr	r2, [pc, #28]	; (14ea4 <ticker_op_cb+0x24>)
   14e88:	4907      	ldr	r1, [pc, #28]	; (14ea8 <ticker_op_cb+0x28>)
   14e8a:	4808      	ldr	r0, [pc, #32]	; (14eac <ticker_op_cb+0x2c>)
   14e8c:	f240 2367 	movw	r3, #615	; 0x267
   14e90:	f006 fc70 	bl	1b774 <printk>
   14e94:	4040      	eors	r0, r0
   14e96:	f380 8811 	msr	BASEPRI, r0
   14e9a:	f04f 0003 	mov.w	r0, #3
   14e9e:	df02      	svc	2
}
   14ea0:	bd08      	pop	{r3, pc}
   14ea2:	bf00      	nop
   14ea4:	00021fac 	.word	0x00021fac
   14ea8:	00021dec 	.word	0x00021dec
   14eac:	0002180c 	.word	0x0002180c

00014eb0 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14eb0:	2801      	cmp	r0, #1
   14eb2:	d000      	beq.n	14eb6 <ticker_op_stop_adv_cb+0x6>
   14eb4:	4770      	bx	lr
{
   14eb6:	b510      	push	{r4, lr}
   14eb8:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   14eba:	f7fa fab5 	bl	f428 <ull_disable_mark_get>
   14ebe:	4284      	cmp	r4, r0
   14ec0:	d00c      	beq.n	14edc <ticker_op_stop_adv_cb+0x2c>
   14ec2:	4a07      	ldr	r2, [pc, #28]	; (14ee0 <ticker_op_stop_adv_cb+0x30>)
   14ec4:	4907      	ldr	r1, [pc, #28]	; (14ee4 <ticker_op_stop_adv_cb+0x34>)
   14ec6:	4808      	ldr	r0, [pc, #32]	; (14ee8 <ticker_op_stop_adv_cb+0x38>)
   14ec8:	f240 235f 	movw	r3, #607	; 0x25f
   14ecc:	f006 fc52 	bl	1b774 <printk>
   14ed0:	4040      	eors	r0, r0
   14ed2:	f380 8811 	msr	BASEPRI, r0
   14ed6:	f04f 0003 	mov.w	r0, #3
   14eda:	df02      	svc	2
}
   14edc:	bd10      	pop	{r4, pc}
   14ede:	bf00      	nop
   14ee0:	00021fac 	.word	0x00021fac
   14ee4:	00022004 	.word	0x00022004
   14ee8:	0002180c 	.word	0x0002180c

00014eec <ull_slave_ticker_cb>:
{
   14eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ef0:	9c06      	ldr	r4, [sp, #24]
   14ef2:	4688      	mov	r8, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14ef4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
{
   14ef6:	461e      	mov	r6, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   14ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14efc:	4299      	cmp	r1, r3
   14efe:	d024      	beq.n	14f4a <ull_slave_ticker_cb+0x5e>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   14f00:	4605      	mov	r5, r0
   14f02:	4601      	mov	r1, r0
   14f04:	4620      	mov	r0, r4
   14f06:	4617      	mov	r7, r2
   14f08:	f7fd fee8 	bl	12cdc <ull_conn_llcp>
		if (ret) {
   14f0c:	b9e8      	cbnz	r0, 14f4a <ull_slave_ticker_cb+0x5e>
	return ++hdr->ref;
   14f0e:	7820      	ldrb	r0, [r4, #0]
   14f10:	3001      	adds	r0, #1
   14f12:	b2c0      	uxtb	r0, r0
   14f14:	7020      	strb	r0, [r4, #0]
	LL_ASSERT(ref);
   14f16:	b340      	cbz	r0, 14f6a <ull_slave_ticker_cb+0x7e>
	p.ticks_at_expire = ticks_at_expire;
   14f18:	481b      	ldr	r0, [pc, #108]	; (14f88 <ull_slave_ticker_cb+0x9c>)
	mfy.param = &p;
   14f1a:	4b1c      	ldr	r3, [pc, #112]	; (14f8c <ull_slave_ticker_cb+0xa0>)
	p.lazy = lazy;
   14f1c:	8107      	strh	r7, [r0, #8]
	p.param = &conn->lll;
   14f1e:	f104 011c 	add.w	r1, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14f22:	2200      	movs	r2, #0
	p.param = &conn->lll;
   14f24:	60c1      	str	r1, [r0, #12]
	p.remainder = remainder;
   14f26:	e9c0 5800 	strd	r5, r8, [r0]
	p.force = force;
   14f2a:	7286      	strb	r6, [r0, #10]
	mfy.param = &p;
   14f2c:	6098      	str	r0, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14f2e:	4611      	mov	r1, r2
   14f30:	2001      	movs	r0, #1
   14f32:	f7f6 fccd 	bl	b8d0 <mayfly_enqueue>
	LL_ASSERT(!err);
   14f36:	b950      	cbnz	r0, 14f4e <ull_slave_ticker_cb+0x62>
	ull_conn_tx_demux(UINT8_MAX);
   14f38:	20ff      	movs	r0, #255	; 0xff
   14f3a:	f7ff fa4d 	bl	143d8 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14f3e:	4620      	mov	r0, r4
   14f40:	21ff      	movs	r1, #255	; 0xff
}
   14f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   14f46:	f7ff bcc1 	b.w	148cc <ull_conn_tx_lll_enqueue>
}
   14f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(!err);
   14f4e:	4a10      	ldr	r2, [pc, #64]	; (14f90 <ull_slave_ticker_cb+0xa4>)
   14f50:	4910      	ldr	r1, [pc, #64]	; (14f94 <ull_slave_ticker_cb+0xa8>)
   14f52:	4811      	ldr	r0, [pc, #68]	; (14f98 <ull_slave_ticker_cb+0xac>)
   14f54:	f240 2323 	movw	r3, #547	; 0x223
   14f58:	f006 fc0c 	bl	1b774 <printk>
   14f5c:	4040      	eors	r0, r0
   14f5e:	f380 8811 	msr	BASEPRI, r0
   14f62:	f04f 0003 	mov.w	r0, #3
   14f66:	df02      	svc	2
   14f68:	e7e6      	b.n	14f38 <ull_slave_ticker_cb+0x4c>
	LL_ASSERT(ref);
   14f6a:	4a09      	ldr	r2, [pc, #36]	; (14f90 <ull_slave_ticker_cb+0xa4>)
   14f6c:	490b      	ldr	r1, [pc, #44]	; (14f9c <ull_slave_ticker_cb+0xb0>)
   14f6e:	480a      	ldr	r0, [pc, #40]	; (14f98 <ull_slave_ticker_cb+0xac>)
   14f70:	f240 2316 	movw	r3, #534	; 0x216
   14f74:	f006 fbfe 	bl	1b774 <printk>
   14f78:	4040      	eors	r0, r0
   14f7a:	f380 8811 	msr	BASEPRI, r0
   14f7e:	f04f 0003 	mov.w	r0, #3
   14f82:	df02      	svc	2
   14f84:	e7c8      	b.n	14f18 <ull_slave_ticker_cb+0x2c>
   14f86:	bf00      	nop
   14f88:	200020d4 	.word	0x200020d4
   14f8c:	20000534 	.word	0x20000534
   14f90:	00021fac 	.word	0x00021fac
   14f94:	00021ab4 	.word	0x00021ab4
   14f98:	0002180c 	.word	0x0002180c
   14f9c:	00021cec 	.word	0x00021cec

00014fa0 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   14fa0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   14fa2:	b123      	cbz	r3, 14fae <ull_slave_latency_cancel+0xe>
   14fa4:	f890 20d8 	ldrb.w	r2, [r0, #216]	; 0xd8
   14fa8:	f012 0304 	ands.w	r3, r2, #4
   14fac:	d000      	beq.n	14fb0 <ull_slave_latency_cancel+0x10>
   14fae:	4770      	bx	lr
{
   14fb0:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   14fb2:	f042 0204 	orr.w	r2, r2, #4
{
   14fb6:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   14fb8:	4c11      	ldr	r4, [pc, #68]	; (15000 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   14fba:	f880 20d8 	strb.w	r2, [r0, #216]	; 0xd8
				      (TICKER_ID_CONN_BASE + handle),
   14fbe:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   14fc0:	2201      	movs	r2, #1
   14fc2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   14fc6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   14fca:	e9cd 3300 	strd	r3, r3, [sp]
   14fce:	9006      	str	r0, [sp, #24]
   14fd0:	b2ca      	uxtb	r2, r1
   14fd2:	4618      	mov	r0, r3
   14fd4:	2103      	movs	r1, #3
   14fd6:	f7f7 fe27 	bl	cc28 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fda:	f030 0302 	bics.w	r3, r0, #2
   14fde:	d00c      	beq.n	14ffa <ull_slave_latency_cancel+0x5a>
   14fe0:	4a08      	ldr	r2, [pc, #32]	; (15004 <ull_slave_latency_cancel+0x64>)
   14fe2:	4909      	ldr	r1, [pc, #36]	; (15008 <ull_slave_latency_cancel+0x68>)
   14fe4:	4809      	ldr	r0, [pc, #36]	; (1500c <ull_slave_latency_cancel+0x6c>)
   14fe6:	f240 13dd 	movw	r3, #477	; 0x1dd
   14fea:	f006 fbc3 	bl	1b774 <printk>
   14fee:	4040      	eors	r0, r0
   14ff0:	f380 8811 	msr	BASEPRI, r0
   14ff4:	f04f 0003 	mov.w	r0, #3
   14ff8:	df02      	svc	2
}
   14ffa:	b008      	add	sp, #32
   14ffc:	bd10      	pop	{r4, pc}
   14ffe:	bf00      	nop
   15000:	00014e39 	.word	0x00014e39
   15004:	00021fac 	.word	0x00021fac
   15008:	00021e84 	.word	0x00021e84
   1500c:	0002180c 	.word	0x0002180c

00015010 <ll_start_enc_req_send>:
{
   15010:	b570      	push	{r4, r5, r6, lr}
   15012:	460e      	mov	r6, r1
   15014:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   15016:	f7fb ff8f 	bl	10f38 <ll_connected_get>
	if (!conn) {
   1501a:	2800      	cmp	r0, #0
   1501c:	d040      	beq.n	150a0 <ll_start_enc_req_send+0x90>
	if (error_code) {
   1501e:	4604      	mov	r4, r0
   15020:	b95e      	cbnz	r6, 1503a <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   15022:	f890 20e4 	ldrb.w	r2, [r0, #228]	; 0xe4
   15026:	f890 30e5 	ldrb.w	r3, [r0, #229]	; 0xe5
   1502a:	429a      	cmp	r2, r3
   1502c:	d003      	beq.n	15036 <ll_start_enc_req_send+0x26>
   1502e:	f890 30e6 	ldrb.w	r3, [r0, #230]	; 0xe6
   15032:	2b03      	cmp	r3, #3
   15034:	d026      	beq.n	15084 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   15036:	200c      	movs	r0, #12
}
   15038:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1503a:	f890 0166 	ldrb.w	r0, [r0, #358]	; 0x166
   1503e:	f010 0004 	ands.w	r0, r0, #4
   15042:	d112      	bne.n	1506a <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   15044:	f894 20e4 	ldrb.w	r2, [r4, #228]	; 0xe4
   15048:	f894 30e5 	ldrb.w	r3, [r4, #229]	; 0xe5
   1504c:	429a      	cmp	r2, r3
   1504e:	d0f2      	beq.n	15036 <ll_start_enc_req_send+0x26>
   15050:	f894 30e6 	ldrb.w	r3, [r4, #230]	; 0xe6
   15054:	2b03      	cmp	r3, #3
   15056:	d1ee      	bne.n	15036 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15058:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
			conn->llcp.encryption.error_code = error_code;
   1505c:	f884 60f5 	strb.w	r6, [r4, #245]	; 0xf5
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15060:	f360 0301 	bfi	r3, r0, #0, #2
   15064:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
}
   15068:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1506a:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
			if (conn->llcp_terminate.ack !=
   1506e:	f894 3141 	ldrb.w	r3, [r4, #321]	; 0x141
   15072:	4293      	cmp	r3, r2
   15074:	d1df      	bne.n	15036 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   15076:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   15078:	f884 6142 	strb.w	r6, [r4, #322]	; 0x142
			conn->llcp_terminate.req++;
   1507c:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
	return 0;
   15080:	2000      	movs	r0, #0
}
   15082:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   15084:	2210      	movs	r2, #16
   15086:	4629      	mov	r1, r5
   15088:	f200 1071 	addw	r0, r0, #369	; 0x171
   1508c:	f008 fcbe 	bl	1da0c <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   15090:	f8b4 30f4 	ldrh.w	r3, [r4, #244]	; 0xf4
   15094:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   15098:	f8a4 30f4 	strh.w	r3, [r4, #244]	; 0xf4
	return 0;
   1509c:	4630      	mov	r0, r6
}
   1509e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   150a0:	2002      	movs	r0, #2
}
   150a2:	bd70      	pop	{r4, r5, r6, pc}

000150a4 <lll_chan_sel_1>:
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.2
 * Channel Selection algorithm #1
 */
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   150a4:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   150a6:	fb02 1c01 	mla	ip, r2, r1, r1
   150aa:	7802      	ldrb	r2, [r0, #0]
   150ac:	491c      	ldr	r1, [pc, #112]	; (15120 <lll_chan_sel_1+0x7c>)
{
   150ae:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   150b2:	4494      	add	ip, r2
   150b4:	fb81 210c 	smull	r2, r1, r1, ip
   150b8:	4461      	add	r1, ip
   150ba:	1149      	asrs	r1, r1, #5
   150bc:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   150c0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   150c4:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   150c6:	ebac 0101 	sub.w	r1, ip, r1
   150ca:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   150cc:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   150ce:	08c4      	lsrs	r4, r0, #3
   150d0:	f001 0107 	and.w	r1, r1, #7
   150d4:	f813 c004 	ldrb.w	ip, [r3, r4]
   150d8:	fa4c f101 	asr.w	r1, ip, r1
   150dc:	f011 0101 	ands.w	r1, r1, #1
   150e0:	d11d      	bne.n	1511e <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   150e2:	fbb0 f2f5 	udiv	r2, r0, r5
   150e6:	fb05 0212 	mls	r2, r5, r2, r0
   150ea:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   150ec:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
   150f0:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   150f2:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   150f4:	f100 0c08 	add.w	ip, r0, #8
   150f8:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   150fc:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   15100:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   15104:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   15108:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   1510c:	d002      	beq.n	15114 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1510e:	b132      	cbz	r2, 1511e <lll_chan_sel_1+0x7a>
				chan_index--;
   15110:	3a01      	subs	r2, #1
   15112:	b2d2      	uxtb	r2, r2
			chan_next++;
   15114:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   15116:	4584      	cmp	ip, r0
   15118:	d1f2      	bne.n	15100 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1511a:	45a6      	cmp	lr, r4
   1511c:	d1ea      	bne.n	150f4 <lll_chan_sel_1+0x50>
}
   1511e:	bd30      	pop	{r4, r5, pc}
   15120:	dd67c8a7 	.word	0xdd67c8a7

00015124 <lll_chan_id>:
	return aa_ms ^ aa_ls;
   15124:	8842      	ldrh	r2, [r0, #2]
   15126:	8800      	ldrh	r0, [r0, #0]
}
   15128:	4050      	eors	r0, r2
   1512a:	4770      	bx	lr

0001512c <lll_chan_sel_2>:
{
   1512c:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Refer to Bluetooth Specification v5.2 Vol 6, Part B, Section 4.5.8.3.2
 * Inputs and basic components, for below operations
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1512e:	4d2f      	ldr	r5, [pc, #188]	; (151ec <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   15130:	4c2f      	ldr	r4, [pc, #188]	; (151f0 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn_s(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_s;

	prn_s = counter ^ chan_id;
   15132:	4048      	eors	r0, r1
   15134:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   15138:	0a07      	lsrs	r7, r0, #8
   1513a:	b2c0      	uxtb	r0, r0
   1513c:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   15140:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   15144:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   15148:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1514c:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   15150:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   15154:	433e      	orrs	r6, r7
   15156:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   1515a:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   1515e:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   15162:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   15166:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   1516a:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1516c:	f3c0 4007 	ubfx	r0, r0, #16, #8
   15170:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15174:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   15178:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1517c:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   1517e:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   15182:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   15184:	d1d8      	bne.n	15138 <lll_chan_sel_2+0xc>
static uint16_t chan_prn_e(uint16_t counter, uint16_t chan_id)
{
	uint16_t prn_e;

	prn_e = chan_prn_s(counter, chan_id);
	prn_e ^= chan_id;
   15186:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   15188:	481a      	ldr	r0, [pc, #104]	; (151f4 <lll_chan_sel_2+0xc8>)
   1518a:	fba0 4001 	umull	r4, r0, r0, r1
   1518e:	1a0c      	subs	r4, r1, r0
   15190:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   15194:	0940      	lsrs	r0, r0, #5
   15196:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1519a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   1519e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   151a0:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   151a4:	f000 0507 	and.w	r5, r0, #7
   151a8:	5d14      	ldrb	r4, [r2, r4]
   151aa:	412c      	asrs	r4, r5
   151ac:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   151ae:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   151b0:	d41a      	bmi.n	151e8 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   151b2:	fb01 f303 	mul.w	r3, r1, r3
   151b6:	1e56      	subs	r6, r2, #1
   151b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   151bc:	3204      	adds	r2, #4
	chan_next = 0U;
   151be:	4660      	mov	r0, ip
		bite = *chan_map;
   151c0:	f100 0508 	add.w	r5, r0, #8
   151c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   151c8:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   151ca:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   151ce:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   151d2:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   151d6:	d002      	beq.n	151de <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   151d8:	b133      	cbz	r3, 151e8 <lll_chan_sel_2+0xbc>
				chan_index--;
   151da:	3b01      	subs	r3, #1
   151dc:	b2db      	uxtb	r3, r3
			chan_next++;
   151de:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   151e0:	42a8      	cmp	r0, r5
   151e2:	d1f2      	bne.n	151ca <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   151e4:	42b2      	cmp	r2, r6
   151e6:	d1eb      	bne.n	151c0 <lll_chan_sel_2+0x94>
}
   151e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   151ea:	bf00      	nop
   151ec:	00022110 	.word	0x00022110
   151f0:	00088440 	.word	0x00088440
   151f4:	bacf914d 	.word	0xbacf914d

000151f8 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   151f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   151fc:	4d18      	ldr	r5, [pc, #96]	; (15260 <rl_update+0x68>)
   151fe:	4e19      	ldr	r6, [pc, #100]	; (15264 <rl_update+0x6c>)
   15200:	2400      	movs	r4, #0
   15202:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   15206:	1eaf      	subs	r7, r5, #2
   15208:	f04f 0801 	mov.w	r8, #1
   1520c:	e006      	b.n	1521c <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1520e:	3401      	adds	r4, #1
   15210:	2c08      	cmp	r4, #8
   15212:	f105 0506 	add.w	r5, r5, #6
   15216:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1521a:	d01e      	beq.n	1525a <rl_update+0x62>
		if (rl[i].taken) {
   1521c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15220:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   15224:	07da      	lsls	r2, r3, #31
   15226:	d5f2      	bpl.n	1520e <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   15228:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1522a:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   1522c:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   15230:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   15234:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   15236:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1523a:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1523c:	4631      	mov	r1, r6
   1523e:	4628      	mov	r0, r5
   15240:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15242:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   15244:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   15248:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1524a:	f008 fbdf 	bl	1da0c <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1524e:	2c08      	cmp	r4, #8
   15250:	f105 0506 	add.w	r5, r5, #6
   15254:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15258:	d1e0      	bne.n	1521c <rl_update+0x24>
}
   1525a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1525e:	bf00      	nop
   15260:	200022de 	.word	0x200022de
   15264:	2000219d 	.word	0x2000219d

00015268 <wl_update>:
{
   15268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1526c:	4e20      	ldr	r6, [pc, #128]	; (152f0 <wl_update+0x88>)
   1526e:	4d21      	ldr	r5, [pc, #132]	; (152f4 <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   15270:	f8df 8084 	ldr.w	r8, [pc, #132]	; 152f8 <wl_update+0x90>
   15274:	f8df 9084 	ldr.w	r9, [pc, #132]	; 152fc <wl_update+0x94>
{
   15278:	2400      	movs	r4, #0
   1527a:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   1527e:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   15280:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   15284:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   15288:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1528c:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   1528e:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15292:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   15294:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   15298:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   1529c:	d021      	beq.n	152e2 <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1529e:	f898 3000 	ldrb.w	r3, [r8]
   152a2:	b163      	cbz	r3, 152be <wl_update+0x56>
		j = wl[i].rl_idx;
   152a4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   152a8:	2b07      	cmp	r3, #7
   152aa:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   152ae:	d806      	bhi.n	152be <wl_update+0x56>
   152b0:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   152b4:	f013 0f04 	tst.w	r3, #4
   152b8:	d001      	beq.n	152be <wl_update+0x56>
   152ba:	06db      	lsls	r3, r3, #27
   152bc:	d511      	bpl.n	152e2 <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   152be:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   152c2:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   152c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   152ca:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   152ce:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   152d2:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   152d6:	40a3      	lsls	r3, r4
   152d8:	ea4e 0303 	orr.w	r3, lr, r3
   152dc:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   152de:	f008 fb95 	bl	1da0c <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   152e2:	3401      	adds	r4, #1
   152e4:	2c08      	cmp	r4, #8
   152e6:	f105 0508 	add.w	r5, r5, #8
   152ea:	d1c9      	bne.n	15280 <wl_update+0x18>
}
   152ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   152f0:	20002356 	.word	0x20002356
   152f4:	20002316 	.word	0x20002316
   152f8:	20002a7e 	.word	0x20002a7e
   152fc:	2000219c 	.word	0x2000219c

00015300 <ll_wl_size_get>:
}
   15300:	2008      	movs	r0, #8
   15302:	4770      	bx	lr

00015304 <ll_wl_clear>:
{
   15304:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   15306:	2000      	movs	r0, #0
   15308:	f7fa fef8 	bl	100fc <ull_adv_filter_pol_get>
   1530c:	b9d8      	cbnz	r0, 15346 <ll_wl_clear+0x42>
   1530e:	4a0f      	ldr	r2, [pc, #60]	; (1534c <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   15310:	4c0f      	ldr	r4, [pc, #60]	; (15350 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   15312:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   15316:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   15318:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   1531a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1531e:	d805      	bhi.n	1532c <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   15320:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   15324:	f36f 1345 	bfc	r3, #5, #1
   15328:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   1532c:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   15330:	f36f 0300 	bfc	r3, #0, #1
   15334:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   15338:	3001      	adds	r0, #1
   1533a:	2808      	cmp	r0, #8
   1533c:	d1e9      	bne.n	15312 <ll_wl_clear+0xe>
	wl_anon = 0U;
   1533e:	4b05      	ldr	r3, [pc, #20]	; (15354 <ll_wl_clear+0x50>)
   15340:	2000      	movs	r0, #0
   15342:	7018      	strb	r0, [r3, #0]
}
   15344:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15346:	200c      	movs	r0, #12
}
   15348:	bd10      	pop	{r4, pc}
   1534a:	bf00      	nop
   1534c:	20002314 	.word	0x20002314
   15350:	2000219c 	.word	0x2000219c
   15354:	20002a7f 	.word	0x20002a7f

00015358 <ll_wl_add>:
{
   15358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1535c:	4681      	mov	r9, r0
   1535e:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   15360:	2000      	movs	r0, #0
   15362:	f7fa fecb 	bl	100fc <ull_adv_filter_pol_get>
   15366:	2800      	cmp	r0, #0
   15368:	d173      	bne.n	15452 <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   1536a:	f899 a000 	ldrb.w	sl, [r9]
   1536e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   15372:	4605      	mov	r5, r0
   15374:	d067      	beq.n	15446 <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   15376:	4e45      	ldr	r6, [pc, #276]	; (1548c <ll_wl_add+0x134>)
   15378:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1537c:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   15380:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   15384:	4604      	mov	r4, r0
   15386:	1eb7      	subs	r7, r6, #2
   15388:	e009      	b.n	1539e <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   1538a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1538e:	d101      	bne.n	15394 <ll_wl_add+0x3c>
			*free = i;
   15390:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   15394:	3401      	adds	r4, #1
   15396:	2c08      	cmp	r4, #8
   15398:	f106 0608 	add.w	r6, r6, #8
   1539c:	d017      	beq.n	153ce <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1539e:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   153a2:	07d8      	lsls	r0, r3, #31
   153a4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   153a8:	d5ef      	bpl.n	1538a <ll_wl_add+0x32>
   153aa:	4552      	cmp	r2, sl
   153ac:	d1f2      	bne.n	15394 <ll_wl_add+0x3c>
   153ae:	2206      	movs	r2, #6
   153b0:	4630      	mov	r0, r6
   153b2:	4659      	mov	r1, fp
   153b4:	f008 fb19 	bl	1d9ea <memcmp>
   153b8:	2800      	cmp	r0, #0
   153ba:	d041      	beq.n	15440 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   153bc:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   153c0:	07d9      	lsls	r1, r3, #31
   153c2:	d5e2      	bpl.n	1538a <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   153c4:	3401      	adds	r4, #1
   153c6:	2c08      	cmp	r4, #8
   153c8:	f106 0608 	add.w	r6, r6, #8
   153cc:	d1e7      	bne.n	1539e <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   153ce:	f1b8 0f07 	cmp.w	r8, #7
   153d2:	d856      	bhi.n	15482 <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   153d4:	f899 2000 	ldrb.w	r2, [r9]
   153d8:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   153dc:	4e2c      	ldr	r6, [pc, #176]	; (15490 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   153de:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   153e0:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   153e4:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   153e8:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   153ec:	4438      	add	r0, r7
   153ee:	2206      	movs	r2, #6
   153f0:	4659      	mov	r1, fp
   153f2:	f008 fb0b 	bl	1da0c <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   153f6:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   153fa:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   153fe:	f003 0301 	and.w	r3, r3, #1
   15402:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   15406:	fa5f fa85 	uxtb.w	sl, r5
   1540a:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   1540e:	f3c2 1180 	ubfx	r1, r2, #6, #1
   15412:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15414:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15418:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   1541c:	d501      	bpl.n	15422 <ll_wl_add+0xca>
   1541e:	4299      	cmp	r1, r3
   15420:	d01b      	beq.n	1545a <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15422:	2d08      	cmp	r5, #8
   15424:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15428:	d1eb      	bne.n	15402 <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   1542a:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1542e:	22ff      	movs	r2, #255	; 0xff
   15430:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   15432:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   15436:	f043 0301 	orr.w	r3, r3, #1
   1543a:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   1543e:	2000      	movs	r0, #0
}
   15440:	b003      	add	sp, #12
   15442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   15446:	4b13      	ldr	r3, [pc, #76]	; (15494 <ll_wl_add+0x13c>)
   15448:	2201      	movs	r2, #1
   1544a:	701a      	strb	r2, [r3, #0]
}
   1544c:	b003      	add	sp, #12
   1544e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15452:	200c      	movs	r0, #12
}
   15454:	b003      	add	sp, #12
   15456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1545a:	4630      	mov	r0, r6
   1545c:	2206      	movs	r2, #6
   1545e:	4659      	mov	r1, fp
   15460:	9301      	str	r3, [sp, #4]
   15462:	f008 fac2 	bl	1d9ea <memcmp>
   15466:	9b01      	ldr	r3, [sp, #4]
   15468:	2800      	cmp	r0, #0
   1546a:	d1da      	bne.n	15422 <ll_wl_add+0xca>
		rl[j].wl = 1U;
   1546c:	f819 3004 	ldrb.w	r3, [r9, r4]
   15470:	f043 0320 	orr.w	r3, r3, #32
   15474:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   15478:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   1547c:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   15480:	e7d7      	b.n	15432 <ll_wl_add+0xda>
   15482:	2007      	movs	r0, #7
}
   15484:	b003      	add	sp, #12
   15486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1548a:	bf00      	nop
   1548c:	20002316 	.word	0x20002316
   15490:	2000219d 	.word	0x2000219d
   15494:	20002a7f 	.word	0x20002a7f

00015498 <ll_wl_remove>:
{
   15498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1549c:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   1549e:	2000      	movs	r0, #0
   154a0:	f7fa fe2c 	bl	100fc <ull_adv_filter_pol_get>
   154a4:	2800      	cmp	r0, #0
   154a6:	d13b      	bne.n	15520 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   154a8:	783e      	ldrb	r6, [r7, #0]
   154aa:	2eff      	cmp	r6, #255	; 0xff
   154ac:	4604      	mov	r4, r0
   154ae:	d033      	beq.n	15518 <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   154b0:	4d1d      	ldr	r5, [pc, #116]	; (15528 <ll_wl_remove+0x90>)
   154b2:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   154b4:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   154b8:	f006 0601 	and.w	r6, r6, #1
   154bc:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   154c0:	f3c3 0240 	ubfx	r2, r3, #1, #1
   154c4:	07db      	lsls	r3, r3, #31
   154c6:	d501      	bpl.n	154cc <ll_wl_remove+0x34>
   154c8:	42b2      	cmp	r2, r6
   154ca:	d007      	beq.n	154dc <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   154cc:	3401      	adds	r4, #1
   154ce:	2c08      	cmp	r4, #8
   154d0:	f105 0508 	add.w	r5, r5, #8
   154d4:	d1f2      	bne.n	154bc <ll_wl_remove+0x24>
   154d6:	2002      	movs	r0, #2
}
   154d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   154dc:	2206      	movs	r2, #6
   154de:	4628      	mov	r0, r5
   154e0:	4639      	mov	r1, r7
   154e2:	f008 fa82 	bl	1d9ea <memcmp>
   154e6:	2800      	cmp	r0, #0
   154e8:	d1f0      	bne.n	154cc <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   154ea:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   154ee:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   154f0:	2b07      	cmp	r3, #7
   154f2:	d808      	bhi.n	15506 <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   154f4:	4a0d      	ldr	r2, [pc, #52]	; (1552c <ll_wl_remove+0x94>)
   154f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   154fa:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   154fe:	f360 1145 	bfi	r1, r0, #5, #1
   15502:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   15506:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   1550a:	f36f 0300 	bfc	r3, #0, #1
   1550e:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   15512:	2000      	movs	r0, #0
}
   15514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   15518:	4b05      	ldr	r3, [pc, #20]	; (15530 <ll_wl_remove+0x98>)
   1551a:	7018      	strb	r0, [r3, #0]
}
   1551c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15520:	200c      	movs	r0, #12
}
   15522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   15526:	bf00      	nop
   15528:	20002316 	.word	0x20002316
   1552c:	2000219c 	.word	0x2000219c
   15530:	20002a7f 	.word	0x20002a7f

00015534 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15534:	2807      	cmp	r0, #7
{
   15536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1553a:	4604      	mov	r4, r0
   1553c:	460e      	mov	r6, r1
   1553e:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15540:	d817      	bhi.n	15572 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   15542:	4d19      	ldr	r5, [pc, #100]	; (155a8 <ll_rl_id_addr_get+0x74>)
   15544:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15548:	00a7      	lsls	r7, r4, #2
   1554a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1554e:	07db      	lsls	r3, r3, #31
   15550:	d51c      	bpl.n	1558c <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   15552:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15554:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   15556:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   1555a:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1555e:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   15562:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   15564:	4640      	mov	r0, r8
   15566:	2206      	movs	r2, #6
}
   15568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1556c:	3101      	adds	r1, #1
   1556e:	f008 ba4d 	b.w	1da0c <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   15572:	4a0e      	ldr	r2, [pc, #56]	; (155ac <ll_rl_id_addr_get+0x78>)
   15574:	490e      	ldr	r1, [pc, #56]	; (155b0 <ll_rl_id_addr_get+0x7c>)
   15576:	480f      	ldr	r0, [pc, #60]	; (155b4 <ll_rl_id_addr_get+0x80>)
   15578:	23f3      	movs	r3, #243	; 0xf3
   1557a:	f006 f8fb 	bl	1b774 <printk>
   1557e:	4040      	eors	r0, r0
   15580:	f380 8811 	msr	BASEPRI, r0
   15584:	f04f 0003 	mov.w	r0, #3
   15588:	df02      	svc	2
   1558a:	e7da      	b.n	15542 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1558c:	4a07      	ldr	r2, [pc, #28]	; (155ac <ll_rl_id_addr_get+0x78>)
   1558e:	490a      	ldr	r1, [pc, #40]	; (155b8 <ll_rl_id_addr_get+0x84>)
   15590:	4808      	ldr	r0, [pc, #32]	; (155b4 <ll_rl_id_addr_get+0x80>)
   15592:	23f4      	movs	r3, #244	; 0xf4
   15594:	f006 f8ee 	bl	1b774 <printk>
   15598:	4040      	eors	r0, r0
   1559a:	f380 8811 	msr	BASEPRI, r0
   1559e:	f04f 0003 	mov.w	r0, #3
   155a2:	df02      	svc	2
   155a4:	e7d5      	b.n	15552 <ll_rl_id_addr_get+0x1e>
   155a6:	bf00      	nop
   155a8:	2000219c 	.word	0x2000219c
   155ac:	0002205c 	.word	0x0002205c
   155b0:	000220a0 	.word	0x000220a0
   155b4:	0002180c 	.word	0x0002180c
   155b8:	000220ac 	.word	0x000220ac

000155bc <ll_rl_size_get>:
   155bc:	2008      	movs	r0, #8
   155be:	4770      	bx	lr

000155c0 <ll_rl_clear>:
{
   155c0:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   155c2:	2000      	movs	r0, #0
   155c4:	f7fa fd8e 	bl	100e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   155c8:	bb88      	cbnz	r0, 1562e <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   155ca:	4b1a      	ldr	r3, [pc, #104]	; (15634 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   155cc:	4c1a      	ldr	r4, [pc, #104]	; (15638 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   155ce:	7819      	ldrb	r1, [r3, #0]
   155d0:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   155d4:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   155d6:	f360 0100 	bfi	r1, r0, #0, #1
   155da:	f360 0200 	bfi	r2, r0, #0, #1
   155de:	7019      	strb	r1, [r3, #0]
   155e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   155e4:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   155e8:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   155ec:	f360 0100 	bfi	r1, r0, #0, #1
   155f0:	f360 0200 	bfi	r2, r0, #0, #1
   155f4:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   155f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   155fc:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   15600:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   15604:	f360 0100 	bfi	r1, r0, #0, #1
   15608:	f360 0200 	bfi	r2, r0, #0, #1
   1560c:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   15610:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   15614:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   15618:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   1561c:	f360 0100 	bfi	r1, r0, #0, #1
   15620:	f360 0200 	bfi	r2, r0, #0, #1
   15624:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   15628:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   1562c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1562e:	200c      	movs	r0, #12
}
   15630:	bd10      	pop	{r4, pc}
   15632:	bf00      	nop
   15634:	2000219c 	.word	0x2000219c
   15638:	20002a7d 	.word	0x20002a7d

0001563c <ll_rl_remove>:
{
   1563c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15640:	4681      	mov	r9, r0
   15642:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15644:	2000      	movs	r0, #0
   15646:	f7fa fd4d 	bl	100e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1564a:	2800      	cmp	r0, #0
   1564c:	d149      	bne.n	156e2 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1564e:	46ca      	mov	sl, r9
   15650:	4e4d      	ldr	r6, [pc, #308]	; (15788 <ll_rl_remove+0x14c>)
   15652:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15656:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15658:	f008 0801 	and.w	r8, r8, #1
   1565c:	1e75      	subs	r5, r6, #1
   1565e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15662:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   15666:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1566a:	f3c2 1380 	ubfx	r3, r2, #6, #1
   1566e:	07d2      	lsls	r2, r2, #31
   15670:	ea4f 0784 	mov.w	r7, r4, lsl #2
   15674:	d501      	bpl.n	1567a <ll_rl_remove+0x3e>
   15676:	4543      	cmp	r3, r8
   15678:	d008      	beq.n	1568c <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1567a:	3401      	adds	r4, #1
   1567c:	2c08      	cmp	r4, #8
   1567e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15682:	d1ec      	bne.n	1565e <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15684:	2002      	movs	r0, #2
}
   15686:	b003      	add	sp, #12
   15688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1568c:	4630      	mov	r0, r6
   1568e:	2206      	movs	r2, #6
   15690:	4651      	mov	r1, sl
   15692:	f008 f9aa 	bl	1d9ea <memcmp>
   15696:	4603      	mov	r3, r0
   15698:	2800      	cmp	r0, #0
   1569a:	d1ee      	bne.n	1567a <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   1569c:	f89b 2000 	ldrb.w	r2, [fp]
   156a0:	0752      	lsls	r2, r2, #29
   156a2:	d430      	bmi.n	15706 <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   156a4:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   156a8:	4e38      	ldr	r6, [pc, #224]	; (1578c <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   156aa:	f009 0901 	and.w	r9, r9, #1
   156ae:	f1a6 0802 	sub.w	r8, r6, #2
   156b2:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   156b6:	07d0      	lsls	r0, r2, #31
   156b8:	f3c2 0140 	ubfx	r1, r2, #1, #1
   156bc:	d501      	bpl.n	156c2 <ll_rl_remove+0x86>
   156be:	4549      	cmp	r1, r9
   156c0:	d013      	beq.n	156ea <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   156c2:	3301      	adds	r3, #1
   156c4:	2b08      	cmp	r3, #8
   156c6:	f106 0608 	add.w	r6, r6, #8
   156ca:	d1f2      	bne.n	156b2 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   156cc:	443c      	add	r4, r7
		return 0;
   156ce:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   156d0:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   156d4:	f36f 0300 	bfc	r3, #0, #1
   156d8:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   156dc:	b003      	add	sp, #12
   156de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   156e2:	200c      	movs	r0, #12
}
   156e4:	b003      	add	sp, #12
   156e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   156ea:	2206      	movs	r2, #6
   156ec:	4630      	mov	r0, r6
   156ee:	4651      	mov	r1, sl
   156f0:	9301      	str	r3, [sp, #4]
   156f2:	f008 f97a 	bl	1d9ea <memcmp>
   156f6:	9b01      	ldr	r3, [sp, #4]
   156f8:	2800      	cmp	r0, #0
   156fa:	d1e2      	bne.n	156c2 <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   156fc:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   15700:	22ff      	movs	r2, #255	; 0xff
   15702:	705a      	strb	r2, [r3, #1]
   15704:	e7e2      	b.n	156cc <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15706:	4e22      	ldr	r6, [pc, #136]	; (15790 <ll_rl_remove+0x154>)
   15708:	7832      	ldrb	r2, [r6, #0]
   1570a:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   1570c:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   15710:	d005      	beq.n	1571e <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   15712:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   15716:	45c3      	cmp	fp, r8
   15718:	d104      	bne.n	15724 <ll_rl_remove+0xe8>
			peer_irk_count--;
   1571a:	7032      	strb	r2, [r6, #0]
   1571c:	e7c2      	b.n	156a4 <ll_rl_remove+0x68>
   1571e:	461a      	mov	r2, r3
   15720:	7032      	strb	r2, [r6, #0]
   15722:	e7bf      	b.n	156a4 <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   15724:	481b      	ldr	r0, [pc, #108]	; (15794 <ll_rl_remove+0x158>)
   15726:	9301      	str	r3, [sp, #4]
   15728:	2210      	movs	r2, #16
   1572a:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1572e:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   15732:	f008 f96b 	bl	1da0c <memcpy>
   15736:	9b01      	ldr	r3, [sp, #4]
   15738:	f8df c05c 	ldr.w	ip, [pc, #92]	; 15798 <ll_rl_remove+0x15c>
   1573c:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   1573e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   15742:	fa5f fe82 	uxtb.w	lr, r2
   15746:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   1574a:	f010 0f01 	tst.w	r0, #1
   1574e:	f102 0201 	add.w	r2, r2, #1
   15752:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   15756:	d005      	beq.n	15764 <ll_rl_remove+0x128>
   15758:	0740      	lsls	r0, r0, #29
   1575a:	d503      	bpl.n	15764 <ll_rl_remove+0x128>
   1575c:	f89c 0017 	ldrb.w	r0, [ip, #23]
   15760:	4540      	cmp	r0, r8
   15762:	d007      	beq.n	15774 <ll_rl_remove+0x138>
				for (k = 0U;
   15764:	2a08      	cmp	r2, #8
   15766:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   1576a:	d1e8      	bne.n	1573e <ll_rl_remove+0x102>
			peer_irk_count--;
   1576c:	7832      	ldrb	r2, [r6, #0]
   1576e:	3a01      	subs	r2, #1
   15770:	7032      	strb	r2, [r6, #0]
   15772:	e797      	b.n	156a4 <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   15774:	4a09      	ldr	r2, [pc, #36]	; (1579c <ll_rl_remove+0x160>)
						rl[k].pirk_idx = pi;
   15776:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   1577a:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   1577e:	7832      	ldrb	r2, [r6, #0]
   15780:	3a01      	subs	r2, #1
   15782:	7032      	strb	r2, [r6, #0]
   15784:	e78e      	b.n	156a4 <ll_rl_remove+0x68>
   15786:	bf00      	nop
   15788:	2000219d 	.word	0x2000219d
   1578c:	20002316 	.word	0x20002316
   15790:	20002a7d 	.word	0x20002a7d
   15794:	2000211c 	.word	0x2000211c
   15798:	2000219c 	.word	0x2000219c
   1579c:	20002114 	.word	0x20002114

000157a0 <ll_rl_crpa_set>:
{
   157a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   157a4:	795c      	ldrb	r4, [r3, #5]
   157a6:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   157aa:	2c40      	cmp	r4, #64	; 0x40
   157ac:	d001      	beq.n	157b2 <ll_rl_crpa_set+0x12>
}
   157ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   157b2:	461e      	mov	r6, r3
   157b4:	460f      	mov	r7, r1
   157b6:	b301      	cbz	r1, 157fa <ll_rl_crpa_set+0x5a>
   157b8:	f8df 9068 	ldr.w	r9, [pc, #104]	; 15824 <ll_rl_crpa_set+0x84>
   157bc:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   157be:	f000 0a01 	and.w	sl, r0, #1
   157c2:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   157c6:	e003      	b.n	157d0 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   157c8:	2c08      	cmp	r4, #8
   157ca:	f109 0928 	add.w	r9, r9, #40	; 0x28
   157ce:	d0ee      	beq.n	157ae <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   157d0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   157d4:	4625      	mov	r5, r4
   157d6:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   157da:	f3c2 1380 	ubfx	r3, r2, #6, #1
   157de:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   157e0:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   157e4:	d5f0      	bpl.n	157c8 <ll_rl_crpa_set+0x28>
   157e6:	4553      	cmp	r3, sl
   157e8:	d1ee      	bne.n	157c8 <ll_rl_crpa_set+0x28>
   157ea:	4648      	mov	r0, r9
   157ec:	2206      	movs	r2, #6
   157ee:	4639      	mov	r1, r7
   157f0:	f008 f8fb 	bl	1d9ea <memcmp>
   157f4:	2800      	cmp	r0, #0
   157f6:	d1e7      	bne.n	157c8 <ll_rl_crpa_set+0x28>
   157f8:	e004      	b.n	15804 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   157fa:	2a07      	cmp	r2, #7
   157fc:	d8d7      	bhi.n	157ae <ll_rl_crpa_set+0xe>
   157fe:	f8df 8028 	ldr.w	r8, [pc, #40]	; 15828 <ll_rl_crpa_set+0x88>
   15802:	4615      	mov	r5, r2
   15804:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   15808:	00e8      	lsls	r0, r5, #3
   1580a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   1580e:	07db      	lsls	r3, r3, #31
   15810:	d5cd      	bpl.n	157ae <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   15812:	3018      	adds	r0, #24
   15814:	4631      	mov	r1, r6
   15816:	4440      	add	r0, r8
   15818:	2206      	movs	r2, #6
}
   1581a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1581e:	f008 b8f5 	b.w	1da0c <memcpy>
   15822:	bf00      	nop
   15824:	2000219d 	.word	0x2000219d
   15828:	2000219c 	.word	0x2000219c

0001582c <ll_rl_crpa_get>:
{
   1582c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15830:	4682      	mov	sl, r0
   15832:	4e1a      	ldr	r6, [pc, #104]	; (1589c <ll_rl_crpa_get+0x70>)
   15834:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   15838:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1583a:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1583c:	f008 0801 	and.w	r8, r8, #1
   15840:	1e77      	subs	r7, r6, #1
   15842:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15846:	00d5      	lsls	r5, r2, #3
   15848:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1584c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15850:	07db      	lsls	r3, r3, #31
   15852:	f104 0401 	add.w	r4, r4, #1
   15856:	d501      	bpl.n	1585c <ll_rl_crpa_get+0x30>
   15858:	4542      	cmp	r2, r8
   1585a:	d006      	beq.n	1586a <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1585c:	2c08      	cmp	r4, #8
   1585e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15862:	d1ee      	bne.n	15842 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15864:	2002      	movs	r0, #2
}
   15866:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1586a:	4630      	mov	r0, r6
   1586c:	2206      	movs	r2, #6
   1586e:	4651      	mov	r1, sl
   15870:	f008 f8bb 	bl	1d9ea <memcmp>
   15874:	4683      	mov	fp, r0
   15876:	2800      	cmp	r0, #0
   15878:	d1f0      	bne.n	1585c <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1587a:	f105 0218 	add.w	r2, r5, #24
   1587e:	4417      	add	r7, r2
   15880:	2106      	movs	r1, #6
   15882:	4638      	mov	r0, r7
   15884:	f7f5 ff96 	bl	b7b4 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   15888:	2800      	cmp	r0, #0
   1588a:	d0eb      	beq.n	15864 <ll_rl_crpa_get+0x38>
   1588c:	2206      	movs	r2, #6
   1588e:	4639      	mov	r1, r7
   15890:	4648      	mov	r0, r9
   15892:	f008 f8bb 	bl	1da0c <memcpy>
		return 0;
   15896:	4658      	mov	r0, fp
}
   15898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1589c:	2000219d 	.word	0x2000219d

000158a0 <ll_rl_lrpa_get>:
{
   158a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   158a4:	4681      	mov	r9, r0
   158a6:	4e16      	ldr	r6, [pc, #88]	; (15900 <ll_rl_lrpa_get+0x60>)
   158a8:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   158ac:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   158ae:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   158b0:	f008 0801 	and.w	r8, r8, #1
   158b4:	1e77      	subs	r7, r6, #1
   158b6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   158ba:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   158be:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   158c2:	f3c3 1280 	ubfx	r2, r3, #6, #1
   158c6:	07db      	lsls	r3, r3, #31
   158c8:	f104 0401 	add.w	r4, r4, #1
   158cc:	d501      	bpl.n	158d2 <ll_rl_lrpa_get+0x32>
   158ce:	4542      	cmp	r2, r8
   158d0:	d006      	beq.n	158e0 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   158d2:	2c08      	cmp	r4, #8
   158d4:	f106 0628 	add.w	r6, r6, #40	; 0x28
   158d8:	d1ed      	bne.n	158b6 <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   158da:	2002      	movs	r0, #2
}
   158dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   158e0:	4630      	mov	r0, r6
   158e2:	2206      	movs	r2, #6
   158e4:	4649      	mov	r1, r9
   158e6:	f008 f880 	bl	1d9ea <memcmp>
   158ea:	4683      	mov	fp, r0
   158ec:	2800      	cmp	r0, #0
   158ee:	d1f0      	bne.n	158d2 <ll_rl_lrpa_get+0x32>
   158f0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   158f2:	2206      	movs	r2, #6
   158f4:	4650      	mov	r0, sl
   158f6:	f008 f889 	bl	1da0c <memcpy>
		return 0;
   158fa:	4658      	mov	r0, fp
}
   158fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15900:	2000219d 	.word	0x2000219d

00015904 <ll_rl_enable>:
{
   15904:	b510      	push	{r4, lr}
   15906:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15908:	2000      	movs	r0, #0
   1590a:	f7fa fbeb 	bl	100e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1590e:	b958      	cbnz	r0, 15928 <ll_rl_enable+0x24>
	switch (enable) {
   15910:	b134      	cbz	r4, 15920 <ll_rl_enable+0x1c>
   15912:	2c01      	cmp	r4, #1
   15914:	d001      	beq.n	1591a <ll_rl_enable+0x16>
   15916:	2012      	movs	r0, #18
}
   15918:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1591a:	4b04      	ldr	r3, [pc, #16]	; (1592c <ll_rl_enable+0x28>)
   1591c:	701c      	strb	r4, [r3, #0]
}
   1591e:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   15920:	4b02      	ldr	r3, [pc, #8]	; (1592c <ll_rl_enable+0x28>)
   15922:	701c      	strb	r4, [r3, #0]
	return 0;
   15924:	4620      	mov	r0, r4
}
   15926:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15928:	200c      	movs	r0, #12
}
   1592a:	bd10      	pop	{r4, pc}
   1592c:	20002a7e 	.word	0x20002a7e

00015930 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   15930:	4b03      	ldr	r3, [pc, #12]	; (15940 <ll_rl_timeout_set+0x10>)
   15932:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15936:	fb02 f000 	mul.w	r0, r2, r0
   1593a:	6018      	str	r0, [r3, #0]
}
   1593c:	4770      	bx	lr
   1593e:	bf00      	nop
   15940:	20002310 	.word	0x20002310

00015944 <ll_priv_mode_set>:
{
   15944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15948:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1594a:	2000      	movs	r0, #0
{
   1594c:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1594e:	f7fa fbc9 	bl	100e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   15952:	bb68      	cbnz	r0, 159b0 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   15954:	4e1d      	ldr	r6, [pc, #116]	; (159cc <ll_priv_mode_set+0x88>)
   15956:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1595a:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1595c:	f009 0901 	and.w	r9, r9, #1
   15960:	1e77      	subs	r7, r6, #1
   15962:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   15966:	00d5      	lsls	r5, r2, #3
   15968:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1596c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15970:	07db      	lsls	r3, r3, #31
   15972:	f104 0401 	add.w	r4, r4, #1
   15976:	d501      	bpl.n	1597c <ll_priv_mode_set+0x38>
   15978:	454a      	cmp	r2, r9
   1597a:	d006      	beq.n	1598a <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1597c:	2c08      	cmp	r4, #8
   1597e:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15982:	d1ee      	bne.n	15962 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15984:	2002      	movs	r0, #2
}
   15986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1598a:	4630      	mov	r0, r6
   1598c:	2206      	movs	r2, #6
   1598e:	4651      	mov	r1, sl
   15990:	f008 f82b 	bl	1d9ea <memcmp>
   15994:	2800      	cmp	r0, #0
   15996:	d1f1      	bne.n	1597c <ll_priv_mode_set+0x38>
		switch (mode) {
   15998:	f1b8 0f00 	cmp.w	r8, #0
   1599c:	d00e      	beq.n	159bc <ll_priv_mode_set+0x78>
   1599e:	f1b8 0f01 	cmp.w	r8, #1
   159a2:	d108      	bne.n	159b6 <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   159a4:	5d7b      	ldrb	r3, [r7, r5]
   159a6:	f043 0310 	orr.w	r3, r3, #16
   159aa:	557b      	strb	r3, [r7, r5]
}
   159ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   159b0:	200c      	movs	r0, #12
}
   159b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   159b6:	2012      	movs	r0, #18
}
   159b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   159bc:	5d7b      	ldrb	r3, [r7, r5]
   159be:	f368 1304 	bfi	r3, r8, #4, #1
   159c2:	557b      	strb	r3, [r7, r5]
	return 0;
   159c4:	4640      	mov	r0, r8
}
   159c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   159ca:	bf00      	nop
   159cc:	2000219d 	.word	0x2000219d

000159d0 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   159d0:	b1a8      	cbz	r0, 159fe <ull_filter_adv_scan_state_cb+0x2e>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   159d2:	4a0c      	ldr	r2, [pc, #48]	; (15a04 <ull_filter_adv_scan_state_cb+0x34>)
		} else {
			return (t * to_hz + off) / from_hz;
   159d4:	6812      	ldr	r2, [r2, #0]
{
   159d6:	b510      	push	{r4, lr}
   159d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   159dc:	f240 30e7 	movw	r0, #999	; 0x3e7
   159e0:	2100      	movs	r1, #0
   159e2:	fbe2 0103 	umlal	r0, r1, r2, r3
   159e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   159ea:	2300      	movs	r3, #0
   159ec:	f7ea fb88 	bl	100 <__aeabi_uldivmod>
}
   159f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   159f4:	4602      	mov	r2, r0
   159f6:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   159f8:	4803      	ldr	r0, [pc, #12]	; (15a08 <ull_filter_adv_scan_state_cb+0x38>)
   159fa:	f005 b839 	b.w	1aa70 <k_work_schedule>
	k_work_cancel_delayable(&rpa_work);
   159fe:	4802      	ldr	r0, [pc, #8]	; (15a08 <ull_filter_adv_scan_state_cb+0x38>)
   15a00:	f00a bd3c 	b.w	2047c <k_work_cancel_delayable>
   15a04:	20002310 	.word	0x20002310
   15a08:	20001208 	.word	0x20001208

00015a0c <ull_filter_adv_update>:
{
   15a0c:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   15a0e:	4b09      	ldr	r3, [pc, #36]	; (15a34 <ull_filter_adv_update+0x28>)
   15a10:	2200      	movs	r2, #0
   15a12:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   15a14:	b930      	cbnz	r0, 15a24 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   15a16:	4b08      	ldr	r3, [pc, #32]	; (15a38 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   15a18:	4a08      	ldr	r2, [pc, #32]	; (15a3c <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   15a1a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   15a1c:	2100      	movs	r1, #0
   15a1e:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   15a20:	b91b      	cbnz	r3, 15a2a <ull_filter_adv_update+0x1e>
}
   15a22:	bd08      	pop	{r3, pc}
		wl_update();
   15a24:	f7ff fc20 	bl	15268 <wl_update>
   15a28:	e7f5      	b.n	15a16 <ull_filter_adv_update+0xa>
}
   15a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   15a2e:	f7ff bbe3 	b.w	151f8 <rl_update>
   15a32:	bf00      	nop
   15a34:	20002354 	.word	0x20002354
   15a38:	20002a7e 	.word	0x20002a7e
   15a3c:	200022dc 	.word	0x200022dc

00015a40 <ull_filter_rpa_update>:
{
   15a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a44:	4683      	mov	fp, r0
   15a46:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   15a48:	f00a feb1 	bl	207ae <z_impl_k_uptime_ticks>
   15a4c:	014b      	lsls	r3, r1, #5
   15a4e:	0142      	lsls	r2, r0, #5
   15a50:	1a12      	subs	r2, r2, r0
   15a52:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   15a56:	eb63 0301 	sbc.w	r3, r3, r1
   15a5a:	009b      	lsls	r3, r3, #2
   15a5c:	ea4f 0982 	mov.w	r9, r2, lsl #2
   15a60:	eb19 0900 	adds.w	r9, r9, r0
   15a64:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   15a68:	eb41 0103 	adc.w	r1, r1, r3
   15a6c:	00cb      	lsls	r3, r1, #3
   15a6e:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   15a72:	0bd9      	lsrs	r1, r3, #15
   15a74:	f3c9 3910 	ubfx	r9, r9, #12, #17
   15a78:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   15a7c:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   15a7e:	f1bb 0f00 	cmp.w	fp, #0
   15a82:	d117      	bne.n	15ab4 <ull_filter_rpa_update+0x74>
   15a84:	4a5d      	ldr	r2, [pc, #372]	; (15bfc <ull_filter_rpa_update+0x1bc>)
   15a86:	e9d2 3200 	ldrd	r3, r2, [r2]
   15a8a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   15a8e:	bf08      	it	eq
   15a90:	f1b3 3fff 	cmpeq.w	r3, #4294967295	; 0xffffffff
   15a94:	d00e      	beq.n	15ab4 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   15a96:	ebb9 0303 	subs.w	r3, r9, r3
   15a9a:	eb61 0202 	sbc.w	r2, r1, r2
   15a9e:	4958      	ldr	r1, [pc, #352]	; (15c00 <ull_filter_rpa_update+0x1c0>)
   15aa0:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   15aa2:	428b      	cmp	r3, r1
   15aa4:	f172 0300 	sbcs.w	r3, r2, #0
   15aa8:	bfac      	ite	ge
   15aaa:	f04f 0a01 	movge.w	sl, #1
   15aae:	f04f 0a00 	movlt.w	sl, #0
   15ab2:	e001      	b.n	15ab8 <ull_filter_rpa_update+0x78>
   15ab4:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15ab8:	4e52      	ldr	r6, [pc, #328]	; (15c04 <ull_filter_rpa_update+0x1c4>)
   15aba:	f8df 814c 	ldr.w	r8, [pc, #332]	; 15c08 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   15abe:	2400      	movs	r4, #0
   15ac0:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   15ac4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15ac8:	00a5      	lsls	r5, r4, #2
   15aca:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15ace:	07da      	lsls	r2, r3, #31
   15ad0:	d515      	bpl.n	15afe <ull_filter_rpa_update+0xbe>
   15ad2:	f1ba 0f00 	cmp.w	sl, #0
   15ad6:	d101      	bne.n	15adc <ull_filter_rpa_update+0x9c>
   15ad8:	0798      	lsls	r0, r3, #30
   15ada:	d410      	bmi.n	15afe <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   15adc:	192b      	adds	r3, r5, r4
   15ade:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15ae2:	0759      	lsls	r1, r3, #29
   15ae4:	d432      	bmi.n	15b4c <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   15ae6:	192b      	adds	r3, r5, r4
   15ae8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   15aec:	071a      	lsls	r2, r3, #28
   15aee:	d41b      	bmi.n	15b28 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   15af0:	4425      	add	r5, r4
   15af2:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   15af6:	f043 0302 	orr.w	r3, r3, #2
   15afa:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15afe:	3401      	adds	r4, #1
   15b00:	2c08      	cmp	r4, #8
   15b02:	f108 0806 	add.w	r8, r8, #6
   15b06:	f106 0628 	add.w	r6, r6, #40	; 0x28
   15b0a:	d1db      	bne.n	15ac4 <ull_filter_rpa_update+0x84>
	if (all) {
   15b0c:	f1ba 0f00 	cmp.w	sl, #0
   15b10:	d004      	beq.n	15b1c <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   15b12:	4b3a      	ldr	r3, [pc, #232]	; (15bfc <ull_filter_rpa_update+0x1bc>)
   15b14:	9a01      	ldr	r2, [sp, #4]
   15b16:	f8c3 9000 	str.w	r9, [r3]
   15b1a:	605a      	str	r2, [r3, #4]
	if (timeout) {
   15b1c:	f1bb 0f00 	cmp.w	fp, #0
   15b20:	d138      	bne.n	15b94 <ull_filter_rpa_update+0x154>
}
   15b22:	b007      	add	sp, #28
   15b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   15b28:	a902      	add	r1, sp, #8
   15b2a:	f1a6 0017 	sub.w	r0, r6, #23
   15b2e:	f007 ffd2 	bl	1dad6 <bt_rpa_create>
				LL_ASSERT(!err);
   15b32:	2800      	cmp	r0, #0
   15b34:	d154      	bne.n	15be0 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   15b36:	ab02      	add	r3, sp, #8
   15b38:	f8c6 3006 	str.w	r3, [r6, #6]
   15b3c:	4619      	mov	r1, r3
   15b3e:	2206      	movs	r2, #6
   15b40:	4640      	mov	r0, r8
   15b42:	f007 ff63 	bl	1da0c <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   15b46:	f8c6 8006 	str.w	r8, [r6, #6]
   15b4a:	e7d1      	b.n	15af0 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   15b4c:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   15b50:	4a2e      	ldr	r2, [pc, #184]	; (15c0c <ull_filter_rpa_update+0x1cc>)
   15b52:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   15b56:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   15b58:	f10d 0307 	add.w	r3, sp, #7
   15b5c:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   15b60:	f812 1901 	ldrb.w	r1, [r2], #-1
   15b64:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   15b68:	4283      	cmp	r3, r0
   15b6a:	d1f9      	bne.n	15b60 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   15b6c:	4631      	mov	r1, r6
   15b6e:	a802      	add	r0, sp, #8
   15b70:	f007 ffb1 	bl	1dad6 <bt_rpa_create>
				LL_ASSERT(!err);
   15b74:	2800      	cmp	r0, #0
   15b76:	d0b6      	beq.n	15ae6 <ull_filter_rpa_update+0xa6>
   15b78:	4a25      	ldr	r2, [pc, #148]	; (15c10 <ull_filter_rpa_update+0x1d0>)
   15b7a:	4926      	ldr	r1, [pc, #152]	; (15c14 <ull_filter_rpa_update+0x1d4>)
   15b7c:	4826      	ldr	r0, [pc, #152]	; (15c18 <ull_filter_rpa_update+0x1d8>)
   15b7e:	f240 2323 	movw	r3, #547	; 0x223
   15b82:	f005 fdf7 	bl	1b774 <printk>
   15b86:	4040      	eors	r0, r0
   15b88:	f380 8811 	msr	BASEPRI, r0
   15b8c:	f04f 0003 	mov.w	r0, #3
   15b90:	df02      	svc	2
   15b92:	e7a8      	b.n	15ae6 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   15b94:	2000      	movs	r0, #0
   15b96:	f7fa fa97 	bl	100c8 <ull_adv_is_enabled_get>
		if (adv) {
   15b9a:	4604      	mov	r4, r0
   15b9c:	2800      	cmp	r0, #0
   15b9e:	d0c0      	beq.n	15b22 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   15ba0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
   15ba4:	075b      	lsls	r3, r3, #29
   15ba6:	d5bc      	bpl.n	15b22 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   15ba8:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
   15bac:	2b07      	cmp	r3, #7
   15bae:	d8b8      	bhi.n	15b22 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15bb0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   15bb4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15bb8:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   15bba:	6ade      	ldr	r6, [r3, #44]	; 0x2c
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   15bbc:	3028      	adds	r0, #40	; 0x28
   15bbe:	f001 f947 	bl	16e50 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   15bc2:	7872      	ldrb	r2, [r6, #1]
   15bc4:	4605      	mov	r5, r0
   15bc6:	3202      	adds	r2, #2
   15bc8:	4631      	mov	r1, r6
   15bca:	f007 ff1f 	bl	1da0c <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   15bce:	4629      	mov	r1, r5
   15bd0:	4620      	mov	r0, r4
   15bd2:	f7fa faa3 	bl	1011c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   15bd6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   15bda:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
   15bde:	e7a0      	b.n	15b22 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   15be0:	4a0b      	ldr	r2, [pc, #44]	; (15c10 <ull_filter_rpa_update+0x1d0>)
   15be2:	490c      	ldr	r1, [pc, #48]	; (15c14 <ull_filter_rpa_update+0x1d4>)
   15be4:	480c      	ldr	r0, [pc, #48]	; (15c18 <ull_filter_rpa_update+0x1d8>)
   15be6:	f44f 730c 	mov.w	r3, #560	; 0x230
   15bea:	f005 fdc3 	bl	1b774 <printk>
   15bee:	4040      	eors	r0, r0
   15bf0:	f380 8811 	msr	BASEPRI, r0
   15bf4:	f04f 0003 	mov.w	r0, #3
   15bf8:	df02      	svc	2
   15bfa:	e79c      	b.n	15b36 <ull_filter_rpa_update+0xf6>
   15bfc:	20001200 	.word	0x20001200
   15c00:	20002310 	.word	0x20002310
   15c04:	200021ba 	.word	0x200021ba
   15c08:	200020e4 	.word	0x200020e4
   15c0c:	2000211c 	.word	0x2000211c
   15c10:	0002205c 	.word	0x0002205c
   15c14:	00021ab4 	.word	0x00021ab4
   15c18:	0002180c 	.word	0x0002180c

00015c1c <rpa_timeout>:
{
   15c1c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   15c1e:	2001      	movs	r0, #1
   15c20:	f7ff ff0e 	bl	15a40 <ull_filter_rpa_update>
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15c24:	4a0a      	ldr	r2, [pc, #40]	; (15c50 <rpa_timeout+0x34>)
   15c26:	6812      	ldr	r2, [r2, #0]
   15c28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   15c2c:	f240 30e7 	movw	r0, #999	; 0x3e7
   15c30:	2100      	movs	r1, #0
   15c32:	fbe2 0103 	umlal	r0, r1, r2, r3
   15c36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15c3a:	2300      	movs	r3, #0
   15c3c:	f7ea fa60 	bl	100 <__aeabi_uldivmod>
}
   15c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15c44:	4602      	mov	r2, r0
   15c46:	460b      	mov	r3, r1
	k_work_schedule(&rpa_work, K_MSEC(rpa_timeout_ms));
   15c48:	4802      	ldr	r0, [pc, #8]	; (15c54 <rpa_timeout+0x38>)
   15c4a:	f004 bf11 	b.w	1aa70 <k_work_schedule>
   15c4e:	bf00      	nop
   15c50:	20002310 	.word	0x20002310
   15c54:	20001208 	.word	0x20001208

00015c58 <ull_filter_adva_get>:
{
   15c58:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   15c5a:	f890 4026 	ldrb.w	r4, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   15c5e:	2c07      	cmp	r4, #7
   15c60:	d810      	bhi.n	15c84 <ull_filter_adva_get+0x2c>
   15c62:	4d10      	ldr	r5, [pc, #64]	; (15ca4 <ull_filter_adva_get+0x4c>)
   15c64:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15c68:	00a6      	lsls	r6, r4, #2
   15c6a:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   15c6e:	071a      	lsls	r2, r3, #28
   15c70:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   15c74:	d505      	bpl.n	15c82 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   15c76:	079b      	lsls	r3, r3, #30
   15c78:	d506      	bpl.n	15c88 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   15c7a:	4434      	add	r4, r6
   15c7c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   15c80:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   15c82:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   15c84:	2000      	movs	r0, #0
}
   15c86:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   15c88:	4a07      	ldr	r2, [pc, #28]	; (15ca8 <ull_filter_adva_get+0x50>)
   15c8a:	4908      	ldr	r1, [pc, #32]	; (15cac <ull_filter_adva_get+0x54>)
   15c8c:	4808      	ldr	r0, [pc, #32]	; (15cb0 <ull_filter_adva_get+0x58>)
   15c8e:	f240 2356 	movw	r3, #598	; 0x256
   15c92:	f005 fd6f 	bl	1b774 <printk>
   15c96:	4040      	eors	r0, r0
   15c98:	f380 8811 	msr	BASEPRI, r0
   15c9c:	f04f 0003 	mov.w	r0, #3
   15ca0:	df02      	svc	2
   15ca2:	e7ea      	b.n	15c7a <ull_filter_adva_get+0x22>
   15ca4:	2000219c 	.word	0x2000219c
   15ca8:	0002205c 	.word	0x0002205c
   15cac:	000220c0 	.word	0x000220c0
   15cb0:	0002180c 	.word	0x0002180c

00015cb4 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   15cb4:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   15cb8:	2b07      	cmp	r3, #7
   15cba:	d80d      	bhi.n	15cd8 <ull_filter_tgta_get+0x24>
   15cbc:	4a07      	ldr	r2, [pc, #28]	; (15cdc <ull_filter_tgta_get+0x28>)
   15cbe:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   15cc2:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   15cc6:	f3c1 0080 	ubfx	r0, r1, #2, #1
   15cca:	0749      	lsls	r1, r1, #29
   15ccc:	d505      	bpl.n	15cda <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   15cce:	2028      	movs	r0, #40	; 0x28
   15cd0:	fb00 2003 	mla	r0, r0, r3, r2
   15cd4:	301e      	adds	r0, #30
   15cd6:	4770      	bx	lr
	return NULL;
   15cd8:	2000      	movs	r0, #0
}
   15cda:	4770      	bx	lr
   15cdc:	2000219c 	.word	0x2000219c

00015ce0 <ull_filter_rl_find>:
{
   15ce0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ce4:	468b      	mov	fp, r1
	if (free) {
   15ce6:	4617      	mov	r7, r2
   15ce8:	b10a      	cbz	r2, 15cee <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   15cea:	23ff      	movs	r3, #255	; 0xff
   15cec:	7013      	strb	r3, [r2, #0]
   15cee:	4d1b      	ldr	r5, [pc, #108]	; (15d5c <ull_filter_rl_find+0x7c>)
{
   15cf0:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15cf2:	f000 0a01 	and.w	sl, r0, #1
   15cf6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
   15cfa:	e006      	b.n	15d0a <ull_filter_rl_find+0x2a>
   15cfc:	4552      	cmp	r2, sl
   15cfe:	d01f      	beq.n	15d40 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15d00:	3401      	adds	r4, #1
   15d02:	2c08      	cmp	r4, #8
   15d04:	f105 0528 	add.w	r5, r5, #40	; 0x28
   15d08:	d015      	beq.n	15d36 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15d0a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   15d0e:	fa5f f884 	uxtb.w	r8, r4
   15d12:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   15d16:	07d9      	lsls	r1, r3, #31
   15d18:	f3c3 1280 	ubfx	r2, r3, #6, #1
   15d1c:	d4ee      	bmi.n	15cfc <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15d1e:	2f00      	cmp	r7, #0
   15d20:	d0ee      	beq.n	15d00 <ull_filter_rl_find+0x20>
   15d22:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15d24:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15d26:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   15d28:	bf08      	it	eq
   15d2a:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   15d2e:	2c08      	cmp	r4, #8
   15d30:	f105 0528 	add.w	r5, r5, #40	; 0x28
   15d34:	d1e9      	bne.n	15d0a <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   15d36:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   15d3a:	4640      	mov	r0, r8
   15d3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   15d40:	4628      	mov	r0, r5
   15d42:	2206      	movs	r2, #6
   15d44:	4659      	mov	r1, fp
   15d46:	f007 fe50 	bl	1d9ea <memcmp>
   15d4a:	2800      	cmp	r0, #0
   15d4c:	d0f5      	beq.n	15d3a <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   15d4e:	2f00      	cmp	r7, #0
   15d50:	d0d6      	beq.n	15d00 <ull_filter_rl_find+0x20>
   15d52:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   15d56:	07db      	lsls	r3, r3, #31
   15d58:	d4d2      	bmi.n	15d00 <ull_filter_rl_find+0x20>
   15d5a:	e7e2      	b.n	15d22 <ull_filter_rl_find+0x42>
   15d5c:	2000219d 	.word	0x2000219d

00015d60 <ll_rl_add>:
{
   15d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d64:	4680      	mov	r8, r0
   15d66:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15d68:	2000      	movs	r0, #0
{
   15d6a:	460e      	mov	r6, r1
   15d6c:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   15d6e:	f7fa f9b9 	bl	100e4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   15d72:	2800      	cmp	r0, #0
   15d74:	d17d      	bne.n	15e72 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   15d76:	46c2      	mov	sl, r8
   15d78:	4604      	mov	r4, r0
   15d7a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   15d7e:	f10d 020f 	add.w	r2, sp, #15
   15d82:	4651      	mov	r1, sl
   15d84:	f7ff ffac 	bl	15ce0 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   15d88:	2807      	cmp	r0, #7
   15d8a:	f240 80b5 	bls.w	15ef8 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   15d8e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   15d92:	2f07      	cmp	r7, #7
   15d94:	f200 8084 	bhi.w	15ea0 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   15d98:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   15d9c:	4d58      	ldr	r5, [pc, #352]	; (15f00 <ll_rl_add+0x1a0>)
   15d9e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   15da2:	1c58      	adds	r0, r3, #1
   15da4:	2206      	movs	r2, #6
   15da6:	4651      	mov	r1, sl
   15da8:	4428      	add	r0, r5
   15daa:	9300      	str	r3, [sp, #0]
   15dac:	f007 fe2e 	bl	1da0c <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   15db0:	f898 3000 	ldrb.w	r3, [r8]
   15db4:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   15db8:	465a      	mov	r2, fp
   15dba:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   15dbe:	f363 1186 	bfi	r1, r3, #6, #1
   15dc2:	f805 100b 	strb.w	r1, [r5, fp]
   15dc6:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15dca:	2110      	movs	r1, #16
   15dcc:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   15dce:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15dd0:	f7f5 fcf0 	bl	b7b4 <mem_nz>
   15dd4:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15dd8:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15dda:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15dde:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   15de0:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   15de4:	f7f5 fce6 	bl	b7b4 <mem_nz>
   15de8:	f815 200b 	ldrb.w	r2, [r5, fp]
   15dec:	f000 0001 	and.w	r0, r0, #1
   15df0:	f360 02c3 	bfi	r2, r0, #3, #1
   15df4:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   15df8:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   15dfa:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   15dfe:	d453      	bmi.n	15ea8 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   15e00:	2800      	cmp	r0, #0
   15e02:	d16b      	bne.n	15edc <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   15e04:	9800      	ldr	r0, [sp, #0]
   15e06:	4e3f      	ldr	r6, [pc, #252]	; (15f04 <ll_rl_add+0x1a4>)
   15e08:	3018      	adds	r0, #24
   15e0a:	2206      	movs	r2, #6
   15e0c:	2100      	movs	r1, #0
   15e0e:	4428      	add	r0, r5
   15e10:	f007 fe07 	bl	1da22 <memset>
	rl[i].dev = 0U;
   15e14:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   15e18:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   15e1c:	f021 0112 	bic.w	r1, r1, #18
   15e20:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   15e24:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   15e28:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15e2c:	f009 0901 	and.w	r9, r9, #1
   15e30:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   15e34:	07d3      	lsls	r3, r2, #31
   15e36:	f3c2 0140 	ubfx	r1, r2, #1, #1
   15e3a:	d501      	bpl.n	15e40 <ll_rl_add+0xe0>
   15e3c:	4549      	cmp	r1, r9
   15e3e:	d01c      	beq.n	15e7a <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   15e40:	3401      	adds	r4, #1
   15e42:	2c08      	cmp	r4, #8
   15e44:	f106 0608 	add.w	r6, r6, #8
   15e48:	d1f2      	bne.n	15e30 <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   15e4a:	eb0b 0207 	add.w	r2, fp, r7
   15e4e:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   15e52:	f36f 1145 	bfc	r1, #5, #1
   15e56:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   15e5a:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   15e5e:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   15e60:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   15e64:	f042 0201 	orr.w	r2, r2, #1
   15e68:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   15e6c:	b005      	add	sp, #20
   15e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15e72:	200c      	movs	r0, #12
}
   15e74:	b005      	add	sp, #20
   15e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   15e7a:	2206      	movs	r2, #6
   15e7c:	4630      	mov	r0, r6
   15e7e:	4651      	mov	r1, sl
   15e80:	f007 fdb3 	bl	1d9ea <memcmp>
   15e84:	2800      	cmp	r0, #0
   15e86:	d1db      	bne.n	15e40 <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   15e88:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   15e8c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   15e90:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   15e94:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   15e96:	f041 0120 	orr.w	r1, r1, #32
   15e9a:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   15e9e:	e7dc      	b.n	15e5a <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   15ea0:	2007      	movs	r0, #7
}
   15ea2:	b005      	add	sp, #20
   15ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   15ea8:	4b17      	ldr	r3, [pc, #92]	; (15f08 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   15eaa:	4a18      	ldr	r2, [pc, #96]	; (15f0c <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   15eac:	7819      	ldrb	r1, [r3, #0]
   15eae:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   15eb2:	5457      	strb	r7, [r2, r1]
   15eb4:	4a16      	ldr	r2, [pc, #88]	; (15f10 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   15eb6:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   15eba:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   15ebe:	3101      	adds	r1, #1
	psrc += length - 1;
   15ec0:	f106 020f 	add.w	r2, r6, #15
   15ec4:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   15ec6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   15eca:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   15ecc:	f812 1901 	ldrb.w	r1, [r2], #-1
   15ed0:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   15ed4:	42b2      	cmp	r2, r6
   15ed6:	d1f9      	bne.n	15ecc <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   15ed8:	2800      	cmp	r0, #0
   15eda:	d093      	beq.n	15e04 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   15edc:	9b00      	ldr	r3, [sp, #0]
   15ede:	1dd8      	adds	r0, r3, #7
   15ee0:	4649      	mov	r1, r9
   15ee2:	2210      	movs	r2, #16
   15ee4:	4428      	add	r0, r5
   15ee6:	f007 fd91 	bl	1da0c <memcpy>
		rl[i].local_rpa = NULL;
   15eea:	eb0b 0207 	add.w	r2, fp, r7
   15eee:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   15ef2:	2100      	movs	r1, #0
   15ef4:	6251      	str	r1, [r2, #36]	; 0x24
   15ef6:	e785      	b.n	15e04 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   15ef8:	2012      	movs	r0, #18
}
   15efa:	b005      	add	sp, #20
   15efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f00:	2000219c 	.word	0x2000219c
   15f04:	20002316 	.word	0x20002316
   15f08:	20002a7d 	.word	0x20002a7d
   15f0c:	20002114 	.word	0x20002114
   15f10:	2000211c 	.word	0x2000211c

00015f14 <ull_filter_reset>:
	wl_anon = 0U;
   15f14:	4a31      	ldr	r2, [pc, #196]	; (15fdc <ull_filter_reset+0xc8>)
   15f16:	4932      	ldr	r1, [pc, #200]	; (15fe0 <ull_filter_reset+0xcc>)
{
   15f18:	b4d0      	push	{r4, r6, r7}
	wl_anon = 0U;
   15f1a:	2300      	movs	r3, #0
   15f1c:	4c31      	ldr	r4, [pc, #196]	; (15fe4 <ull_filter_reset+0xd0>)
   15f1e:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   15f20:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   15f24:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   15f26:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   15f28:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   15f2c:	d805      	bhi.n	15f3a <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   15f2e:	f811 203c 	ldrb.w	r2, [r1, ip, lsl #3]
   15f32:	f36f 1245 	bfc	r2, #5, #1
   15f36:	f801 203c 	strb.w	r2, [r1, ip, lsl #3]
		wl[i].taken = 0U;
   15f3a:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   15f3e:	f36f 0200 	bfc	r2, #0, #1
   15f42:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   15f46:	3301      	adds	r3, #1
   15f48:	2b08      	cmp	r3, #8
   15f4a:	d1e9      	bne.n	15f20 <ull_filter_reset+0xc>
	rl_enable = 0U;
   15f4c:	4a26      	ldr	r2, [pc, #152]	; (15fe8 <ull_filter_reset+0xd4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15f4e:	4c27      	ldr	r4, [pc, #156]	; (15fec <ull_filter_reset+0xd8>)
	rl_enable = 0U;
   15f50:	2300      	movs	r3, #0
   15f52:	7013      	strb	r3, [r2, #0]
		rl[i].taken = 0U;
   15f54:	780a      	ldrb	r2, [r1, #0]
   15f56:	f363 0200 	bfi	r2, r3, #0, #1
   15f5a:	700a      	strb	r2, [r1, #0]
   15f5c:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
   15f60:	f363 0200 	bfi	r2, r3, #0, #1
   15f64:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
   15f68:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
   15f6c:	f363 0200 	bfi	r2, r3, #0, #1
   15f70:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
   15f74:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   15f78:	f363 0200 	bfi	r2, r3, #0, #1
   15f7c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   15f80:	f891 20a0 	ldrb.w	r2, [r1, #160]	; 0xa0
   15f84:	f363 0200 	bfi	r2, r3, #0, #1
   15f88:	f881 20a0 	strb.w	r2, [r1, #160]	; 0xa0
   15f8c:	f891 20c8 	ldrb.w	r2, [r1, #200]	; 0xc8
   15f90:	f363 0200 	bfi	r2, r3, #0, #1
   15f94:	f881 20c8 	strb.w	r2, [r1, #200]	; 0xc8
   15f98:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
   15f9c:	f363 0200 	bfi	r2, r3, #0, #1
   15fa0:	f881 20f0 	strb.w	r2, [r1, #240]	; 0xf0
   15fa4:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
   15fa8:	f363 0200 	bfi	r2, r3, #0, #1
   15fac:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   15fb0:	4a0f      	ldr	r2, [pc, #60]	; (15ff0 <ull_filter_reset+0xdc>)
   15fb2:	7013      	strb	r3, [r2, #0]
	rpa_last_ms = -1;
   15fb4:	4b0f      	ldr	r3, [pc, #60]	; (15ff4 <ull_filter_reset+0xe0>)
   15fb6:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   15fba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   15fbe:	e9c3 6700 	strd	r6, r7, [r3]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   15fc2:	4b0d      	ldr	r3, [pc, #52]	; (15ff8 <ull_filter_reset+0xe4>)
   15fc4:	6023      	str	r3, [r4, #0]
	if (init) {
   15fc6:	b120      	cbz	r0, 15fd2 <ull_filter_reset+0xbe>
}
   15fc8:	bcd0      	pop	{r4, r6, r7}
		k_work_init_delayable(&rpa_work, rpa_timeout);
   15fca:	490c      	ldr	r1, [pc, #48]	; (15ffc <ull_filter_reset+0xe8>)
   15fcc:	480c      	ldr	r0, [pc, #48]	; (16000 <ull_filter_reset+0xec>)
   15fce:	f00a ba49 	b.w	20464 <k_work_init_delayable>
}
   15fd2:	bcd0      	pop	{r4, r6, r7}
		k_work_cancel_delayable(&rpa_work);
   15fd4:	480a      	ldr	r0, [pc, #40]	; (16000 <ull_filter_reset+0xec>)
   15fd6:	f00a ba51 	b.w	2047c <k_work_cancel_delayable>
   15fda:	bf00      	nop
   15fdc:	20002a7f 	.word	0x20002a7f
   15fe0:	2000219c 	.word	0x2000219c
   15fe4:	20002314 	.word	0x20002314
   15fe8:	20002a7e 	.word	0x20002a7e
   15fec:	20002310 	.word	0x20002310
   15ff0:	20002a7d 	.word	0x20002a7d
   15ff4:	20001200 	.word	0x20001200
   15ff8:	000dbba0 	.word	0x000dbba0
   15ffc:	00015c1d 	.word	0x00015c1d
   16000:	20001208 	.word	0x20001208

00016004 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   16004:	2807      	cmp	r0, #7
   16006:	d807      	bhi.n	16018 <ull_filter_lll_lrpa_used+0x14>
   16008:	4b04      	ldr	r3, [pc, #16]	; (1601c <ull_filter_lll_lrpa_used+0x18>)
   1600a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1600e:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   16012:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   16016:	4770      	bx	lr
   16018:	2000      	movs	r0, #0
}
   1601a:	4770      	bx	lr
   1601c:	2000219c 	.word	0x2000219c

00016020 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   16020:	4b02      	ldr	r3, [pc, #8]	; (1602c <ull_filter_lll_irks_get+0xc>)
   16022:	781b      	ldrb	r3, [r3, #0]
   16024:	7003      	strb	r3, [r0, #0]
}
   16026:	4802      	ldr	r0, [pc, #8]	; (16030 <ull_filter_lll_irks_get+0x10>)
   16028:	4770      	bx	lr
   1602a:	bf00      	nop
   1602c:	20002a7d 	.word	0x20002a7d
   16030:	2000211c 	.word	0x2000211c

00016034 <ull_filter_lll_rl_irk_idx>:
{
   16034:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   16036:	4b20      	ldr	r3, [pc, #128]	; (160b8 <ull_filter_lll_rl_irk_idx+0x84>)
   16038:	781b      	ldrb	r3, [r3, #0]
   1603a:	4283      	cmp	r3, r0
{
   1603c:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1603e:	d90c      	bls.n	1605a <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   16040:	4b1e      	ldr	r3, [pc, #120]	; (160bc <ull_filter_lll_rl_irk_idx+0x88>)
   16042:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   16044:	2c07      	cmp	r4, #7
   16046:	d819      	bhi.n	1607c <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   16048:	4b1d      	ldr	r3, [pc, #116]	; (160c0 <ull_filter_lll_rl_irk_idx+0x8c>)
   1604a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1604e:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   16052:	07db      	lsls	r3, r3, #31
   16054:	d520      	bpl.n	16098 <ull_filter_lll_rl_irk_idx+0x64>
}
   16056:	4620      	mov	r0, r4
   16058:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1605a:	4a1a      	ldr	r2, [pc, #104]	; (160c4 <ull_filter_lll_rl_irk_idx+0x90>)
   1605c:	491a      	ldr	r1, [pc, #104]	; (160c8 <ull_filter_lll_rl_irk_idx+0x94>)
   1605e:	481b      	ldr	r0, [pc, #108]	; (160cc <ull_filter_lll_rl_irk_idx+0x98>)
   16060:	f240 23c6 	movw	r3, #710	; 0x2c6
   16064:	f005 fb86 	bl	1b774 <printk>
   16068:	4040      	eors	r0, r0
   1606a:	f380 8811 	msr	BASEPRI, r0
   1606e:	f04f 0003 	mov.w	r0, #3
   16072:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   16074:	4b11      	ldr	r3, [pc, #68]	; (160bc <ull_filter_lll_rl_irk_idx+0x88>)
   16076:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   16078:	2c07      	cmp	r4, #7
   1607a:	d9e5      	bls.n	16048 <ull_filter_lll_rl_irk_idx+0x14>
   1607c:	4a11      	ldr	r2, [pc, #68]	; (160c4 <ull_filter_lll_rl_irk_idx+0x90>)
   1607e:	4914      	ldr	r1, [pc, #80]	; (160d0 <ull_filter_lll_rl_irk_idx+0x9c>)
   16080:	4812      	ldr	r0, [pc, #72]	; (160cc <ull_filter_lll_rl_irk_idx+0x98>)
   16082:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   16086:	f005 fb75 	bl	1b774 <printk>
   1608a:	4040      	eors	r0, r0
   1608c:	f380 8811 	msr	BASEPRI, r0
   16090:	f04f 0003 	mov.w	r0, #3
   16094:	df02      	svc	2
   16096:	e7d7      	b.n	16048 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   16098:	4a0a      	ldr	r2, [pc, #40]	; (160c4 <ull_filter_lll_rl_irk_idx+0x90>)
   1609a:	490e      	ldr	r1, [pc, #56]	; (160d4 <ull_filter_lll_rl_irk_idx+0xa0>)
   1609c:	480b      	ldr	r0, [pc, #44]	; (160cc <ull_filter_lll_rl_irk_idx+0x98>)
   1609e:	f240 23c9 	movw	r3, #713	; 0x2c9
   160a2:	f005 fb67 	bl	1b774 <printk>
   160a6:	4040      	eors	r0, r0
   160a8:	f380 8811 	msr	BASEPRI, r0
   160ac:	f04f 0003 	mov.w	r0, #3
   160b0:	df02      	svc	2
}
   160b2:	4620      	mov	r0, r4
   160b4:	bd10      	pop	{r4, pc}
   160b6:	bf00      	nop
   160b8:	20002a7d 	.word	0x20002a7d
   160bc:	20002114 	.word	0x20002114
   160c0:	2000219c 	.word	0x2000219c
   160c4:	0002205c 	.word	0x0002205c
   160c8:	00022240 	.word	0x00022240
   160cc:	0002180c 	.word	0x0002180c
   160d0:	00022260 	.word	0x00022260
   160d4:	00022234 	.word	0x00022234

000160d8 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   160d8:	2807      	cmp	r0, #7
   160da:	d823      	bhi.n	16124 <ull_filter_lll_irk_whitelisted+0x4c>
{
   160dc:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   160de:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   160e2:	4e11      	ldr	r6, [pc, #68]	; (16128 <ull_filter_lll_irk_whitelisted+0x50>)
   160e4:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   160e8:	07db      	lsls	r3, r3, #31
   160ea:	4604      	mov	r4, r0
   160ec:	ea4f 0580 	mov.w	r5, r0, lsl #2
   160f0:	d505      	bpl.n	160fe <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   160f2:	442c      	add	r4, r5
   160f4:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   160f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   160fc:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   160fe:	4a0b      	ldr	r2, [pc, #44]	; (1612c <ull_filter_lll_irk_whitelisted+0x54>)
   16100:	490b      	ldr	r1, [pc, #44]	; (16130 <ull_filter_lll_irk_whitelisted+0x58>)
   16102:	480c      	ldr	r0, [pc, #48]	; (16134 <ull_filter_lll_irk_whitelisted+0x5c>)
   16104:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   16108:	f005 fb34 	bl	1b774 <printk>
   1610c:	4040      	eors	r0, r0
   1610e:	f380 8811 	msr	BASEPRI, r0
   16112:	f04f 0003 	mov.w	r0, #3
   16116:	df02      	svc	2
	return rl[rl_idx].wl;
   16118:	442c      	add	r4, r5
   1611a:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1611e:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   16122:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   16124:	2000      	movs	r0, #0
}
   16126:	4770      	bx	lr
   16128:	2000219c 	.word	0x2000219c
   1612c:	0002205c 	.word	0x0002205c
   16130:	000220ac 	.word	0x000220ac
   16134:	0002180c 	.word	0x0002180c

00016138 <ull_filter_lll_get>:
		return &wl_filter;
   16138:	4a03      	ldr	r2, [pc, #12]	; (16148 <ull_filter_lll_get+0x10>)
   1613a:	4b04      	ldr	r3, [pc, #16]	; (1614c <ull_filter_lll_get+0x14>)
}
   1613c:	2800      	cmp	r0, #0
   1613e:	bf0c      	ite	eq
   16140:	4610      	moveq	r0, r2
   16142:	4618      	movne	r0, r3
   16144:	4770      	bx	lr
   16146:	bf00      	nop
   16148:	200022dc 	.word	0x200022dc
   1614c:	20002354 	.word	0x20002354

00016150 <ull_filter_lll_rl_addr_allowed>:
	if (*rl_idx != FILTER_IDX_NONE) {
   16150:	7813      	ldrb	r3, [r2, #0]
   16152:	2bff      	cmp	r3, #255	; 0xff
   16154:	d11b      	bne.n	1618e <ull_filter_lll_rl_addr_allowed+0x3e>
{
   16156:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1615a:	4d19      	ldr	r5, [pc, #100]	; (161c0 <ull_filter_lll_rl_addr_allowed+0x70>)
   1615c:	4604      	mov	r4, r0
   1615e:	46ae      	mov	lr, r5
	if (*rl_idx != FILTER_IDX_NONE) {
   16160:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   16162:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   16166:	b2df      	uxtb	r7, r3
   16168:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1616c:	f01c 0001 	ands.w	r0, ip, #1
   16170:	ea4f 0683 	mov.w	r6, r3, lsl #2
   16174:	d003      	beq.n	1617e <ull_filter_lll_rl_addr_allowed+0x2e>
   16176:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1617a:	45a4      	cmp	ip, r4
   1617c:	d009      	beq.n	16192 <ull_filter_lll_rl_addr_allowed+0x42>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1617e:	3301      	adds	r3, #1
   16180:	2b08      	cmp	r3, #8
   16182:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   16186:	d1ec      	bne.n	16162 <ull_filter_lll_rl_addr_allowed+0x12>
		return true;
   16188:	2001      	movs	r0, #1
}
   1618a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1618e:	2001      	movs	r0, #1
}
   16190:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   16192:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   16196:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   16198:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1619c:	f81c af01 	ldrb.w	sl, [ip, #1]!
   161a0:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   161a4:	45ca      	cmp	sl, r9
   161a6:	d1ea      	bne.n	1617e <ull_filter_lll_rl_addr_allowed+0x2e>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   161a8:	45dc      	cmp	ip, fp
   161aa:	d1f7      	bne.n	1619c <ull_filter_lll_rl_addr_allowed+0x4c>
				return !rl[i].pirk || rl[i].dev;
   161ac:	4433      	add	r3, r6
				*rl_idx = i;
   161ae:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   161b0:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   161b4:	075a      	lsls	r2, r3, #29
   161b6:	d5e8      	bpl.n	1618a <ull_filter_lll_rl_addr_allowed+0x3a>
   161b8:	f3c3 1000 	ubfx	r0, r3, #4, #1
   161bc:	e7e5      	b.n	1618a <ull_filter_lll_rl_addr_allowed+0x3a>
   161be:	bf00      	nop
   161c0:	2000219c 	.word	0x2000219c

000161c4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   161c4:	4b02      	ldr	r3, [pc, #8]	; (161d0 <ull_filter_lll_rl_enabled+0xc>)
   161c6:	7818      	ldrb	r0, [r3, #0]
}
   161c8:	3800      	subs	r0, #0
   161ca:	bf18      	it	ne
   161cc:	2001      	movne	r0, #1
   161ce:	4770      	bx	lr
   161d0:	20002a7e 	.word	0x20002a7e

000161d4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   161d4:	4668      	mov	r0, sp
   161d6:	f020 0107 	bic.w	r1, r0, #7
   161da:	468d      	mov	sp, r1
   161dc:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   161de:	f001 ff55 	bl	1808c <isr_radio>

	ISR_DIRECT_PM();
   161e2:	f7ed fca9 	bl	3b38 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   161e6:	f7ed fd97 	bl	3d18 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   161ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   161ee:	4685      	mov	sp, r0
   161f0:	4770      	bx	lr
   161f2:	bf00      	nop

000161f4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   161f4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   161f6:	4b09      	ldr	r3, [pc, #36]	; (1621c <rtc0_nrf5_isr+0x28>)
   161f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   161fc:	b93a      	cbnz	r2, 1620e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   161fe:	2001      	movs	r0, #1
   16200:	f7f5 fbba 	bl	b978 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   16204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   16208:	2002      	movs	r0, #2
   1620a:	f7f5 bbb5 	b.w	b978 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1620e:	2000      	movs	r0, #0
   16210:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   16214:	f7f6 fc28 	bl	ca68 <ticker_trigger>
   16218:	e7f1      	b.n	161fe <rtc0_nrf5_isr+0xa>
   1621a:	bf00      	nop
   1621c:	4000b000 	.word	0x4000b000

00016220 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   16220:	2000      	movs	r0, #0
   16222:	f7f5 bba9 	b.w	b978 <mayfly_run>
   16226:	bf00      	nop

00016228 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   16228:	f002 b84a 	b.w	182c0 <radio_status_reset>

0001622c <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1622c:	2801      	cmp	r0, #1
   1622e:	d800      	bhi.n	16232 <ticker_stop_op_cb+0x6>
   16230:	4770      	bx	lr
{
   16232:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   16234:	4a06      	ldr	r2, [pc, #24]	; (16250 <ticker_stop_op_cb+0x24>)
   16236:	4907      	ldr	r1, [pc, #28]	; (16254 <ticker_stop_op_cb+0x28>)
   16238:	4807      	ldr	r0, [pc, #28]	; (16258 <ticker_stop_op_cb+0x2c>)
   1623a:	f240 23eb 	movw	r3, #747	; 0x2eb
   1623e:	f005 fa99 	bl	1b774 <printk>
   16242:	4040      	eors	r0, r0
   16244:	f380 8811 	msr	BASEPRI, r0
   16248:	f04f 0003 	mov.w	r0, #3
   1624c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1624e:	bd08      	pop	{r3, pc}
   16250:	0002227c 	.word	0x0002227c
   16254:	000222c4 	.word	0x000222c4
   16258:	0002180c 	.word	0x0002180c

0001625c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1625c:	2801      	cmp	r0, #1
   1625e:	d800      	bhi.n	16262 <ticker_start_op_cb+0x6>
   16260:	4770      	bx	lr
{
   16262:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   16264:	4a06      	ldr	r2, [pc, #24]	; (16280 <ticker_start_op_cb+0x24>)
   16266:	4907      	ldr	r1, [pc, #28]	; (16284 <ticker_start_op_cb+0x28>)
   16268:	4807      	ldr	r0, [pc, #28]	; (16288 <ticker_start_op_cb+0x2c>)
   1626a:	f240 23f6 	movw	r3, #758	; 0x2f6
   1626e:	f005 fa81 	bl	1b774 <printk>
   16272:	4040      	eors	r0, r0
   16274:	f380 8811 	msr	BASEPRI, r0
   16278:	f04f 0003 	mov.w	r0, #3
   1627c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1627e:	bd08      	pop	{r3, pc}
   16280:	0002227c 	.word	0x0002227c
   16284:	000222c4 	.word	0x000222c4
   16288:	0002180c 	.word	0x0002180c

0001628c <preempt_ticker_cb>:
	return ret;
}

static void preempt_ticker_cb(uint32_t ticks_at_expire, uint32_t remainder,
			       uint16_t lazy, uint8_t force, void *param)
{
   1628c:	b508      	push	{r3, lr}
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	mfy.param = param;
   1628e:	4b0c      	ldr	r3, [pc, #48]	; (162c0 <preempt_ticker_cb+0x34>)
{
   16290:	9802      	ldr	r0, [sp, #8]
	mfy.param = param;
   16292:	6098      	str	r0, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   16294:	2200      	movs	r2, #0
   16296:	4611      	mov	r1, r2
   16298:	2001      	movs	r0, #1
   1629a:	f7f5 fb19 	bl	b8d0 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1629e:	b900      	cbnz	r0, 162a2 <preempt_ticker_cb+0x16>
}
   162a0:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   162a2:	4a08      	ldr	r2, [pc, #32]	; (162c4 <preempt_ticker_cb+0x38>)
   162a4:	4908      	ldr	r1, [pc, #32]	; (162c8 <preempt_ticker_cb+0x3c>)
   162a6:	4809      	ldr	r0, [pc, #36]	; (162cc <preempt_ticker_cb+0x40>)
   162a8:	f240 3325 	movw	r3, #805	; 0x325
   162ac:	f005 fa62 	bl	1b774 <printk>
   162b0:	4040      	eors	r0, r0
   162b2:	f380 8811 	msr	BASEPRI, r0
   162b6:	f04f 0003 	mov.w	r0, #3
   162ba:	df02      	svc	2
}
   162bc:	bd08      	pop	{r3, pc}
   162be:	bf00      	nop
   162c0:	20000544 	.word	0x20000544
   162c4:	0002227c 	.word	0x0002227c
   162c8:	00021bb8 	.word	0x00021bb8
   162cc:	0002180c 	.word	0x0002180c

000162d0 <preempt_ticker_start.constprop.0>:
static uint32_t preempt_ticker_start(struct lll_event *event,
   162d0:	b530      	push	{r4, r5, lr}
	ull = HDR_LLL2ULL(p->param);
   162d2:	68c3      	ldr	r3, [r0, #12]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   162d4:	4c0e      	ldr	r4, [pc, #56]	; (16310 <preempt_ticker_start.constprop.0+0x40>)
   162d6:	490f      	ldr	r1, [pc, #60]	; (16314 <preempt_ticker_start.constprop.0+0x44>)
	ull = HDR_LLL2ULL(p->param);
   162d8:	681b      	ldr	r3, [r3, #0]
static uint32_t preempt_ticker_start(struct lll_event *event,
   162da:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   162dc:	2200      	movs	r2, #0
   162de:	e9cd 4007 	strd	r4, r0, [sp, #28]
   162e2:	e9cd 1005 	strd	r1, r0, [sp, #20]
   162e6:	e9cd 2203 	strd	r2, r2, [sp, #12]
   162ea:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(ull->ticks_active_to_start,
   162ee:	e9d3 4501 	ldrd	r4, r5, [r3, #4]
   162f2:	68d9      	ldr	r1, [r3, #12]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   162f4:	6803      	ldr	r3, [r0, #0]
	preempt_to = MAX(ull->ticks_active_to_start,
   162f6:	42a5      	cmp	r5, r4
   162f8:	bf2c      	ite	cs
   162fa:	ebc1 0105 	rsbcs	r1, r1, r5
   162fe:	ebc1 0104 	rsbcc	r1, r1, r4
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   16302:	9100      	str	r1, [sp, #0]
   16304:	4610      	mov	r0, r2
   16306:	4611      	mov	r1, r2
   16308:	f7f6 fc1c 	bl	cb44 <ticker_start>
}
   1630c:	b00b      	add	sp, #44	; 0x2c
   1630e:	bd30      	pop	{r4, r5, pc}
   16310:	0001625d 	.word	0x0001625d
   16314:	0001628d 	.word	0x0001628d

00016318 <preempt>:

static void preempt(void *param)
{
   16318:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	uint8_t idx;
	int err;

	/* No event to abort */
	if (!event.curr.abort_cb || !event.curr.param) {
   1631a:	4e4a      	ldr	r6, [pc, #296]	; (16444 <preempt+0x12c>)
   1631c:	68b3      	ldr	r3, [r6, #8]
{
   1631e:	b089      	sub	sp, #36	; 0x24
	if (!event.curr.abort_cb || !event.curr.param) {
   16320:	b1b3      	cbz	r3, 16350 <preempt+0x38>
   16322:	6833      	ldr	r3, [r6, #0]
   16324:	b1a3      	cbz	r3, 16350 <preempt+0x38>
		return;
	}

	/* Check if any prepare in pipeline */
	idx = UINT8_MAX;
   16326:	23ff      	movs	r3, #255	; 0xff
   16328:	4605      	mov	r5, r0
	next = ull_prepare_dequeue_iter(&idx);
   1632a:	f10d 000a 	add.w	r0, sp, #10
	idx = UINT8_MAX;
   1632e:	f88d 300a 	strb.w	r3, [sp, #10]
	next = ull_prepare_dequeue_iter(&idx);
   16332:	f7f9 f9a7 	bl	f684 <ull_prepare_dequeue_iter>
	if (!next) {
   16336:	4603      	mov	r3, r0
   16338:	b150      	cbz	r0, 16350 <preempt+0x38>
		return;
	}

	/* Find a prepare that is ready and not a resume */
	while (next && (next->is_aborted || next->is_resume)) {
   1633a:	7f1a      	ldrb	r2, [r3, #28]
   1633c:	f012 0403 	ands.w	r4, r2, #3
		next = ull_prepare_dequeue_iter(&idx);
   16340:	f10d 000a 	add.w	r0, sp, #10
	while (next && (next->is_aborted || next->is_resume)) {
   16344:	d006      	beq.n	16354 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   16346:	f7f9 f99d 	bl	f684 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1634a:	4603      	mov	r3, r0
   1634c:	2800      	cmp	r0, #0
   1634e:	d1f4      	bne.n	1633a <preempt+0x22>
		iter = resume_enqueue(resume_cb);
		LL_ASSERT(iter);
	} else {
		LL_ASSERT(err == -ECANCELED);
	}
}
   16350:	b009      	add	sp, #36	; 0x24
   16352:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (next != param) {
   16354:	429d      	cmp	r5, r3
   16356:	d126      	bne.n	163a6 <preempt+0x8e>
	err = event.curr.is_abort_cb(next->prepare_param.param,
   16358:	6873      	ldr	r3, [r6, #4]
   1635a:	6831      	ldr	r1, [r6, #0]
   1635c:	68e8      	ldr	r0, [r5, #12]
   1635e:	aa03      	add	r2, sp, #12
   16360:	4798      	blx	r3
	if (!err) {
   16362:	4607      	mov	r7, r0
   16364:	b1b0      	cbz	r0, 16394 <preempt+0x7c>
	event.curr.abort_cb(NULL, event.curr.param);
   16366:	68b3      	ldr	r3, [r6, #8]
   16368:	6831      	ldr	r1, [r6, #0]
   1636a:	4620      	mov	r0, r4
   1636c:	4798      	blx	r3
	if (err == -EAGAIN) {
   1636e:	f117 0f0b 	cmn.w	r7, #11
   16372:	d02b      	beq.n	163cc <preempt+0xb4>
		LL_ASSERT(err == -ECANCELED);
   16374:	378c      	adds	r7, #140	; 0x8c
   16376:	d0eb      	beq.n	16350 <preempt+0x38>
   16378:	4a33      	ldr	r2, [pc, #204]	; (16448 <preempt+0x130>)
   1637a:	4934      	ldr	r1, [pc, #208]	; (1644c <preempt+0x134>)
   1637c:	4834      	ldr	r0, [pc, #208]	; (16450 <preempt+0x138>)
   1637e:	f44f 7360 	mov.w	r3, #896	; 0x380
   16382:	f005 f9f7 	bl	1b774 <printk>
   16386:	4040      	eors	r0, r0
   16388:	f380 8811 	msr	BASEPRI, r0
   1638c:	f04f 0003 	mov.w	r0, #3
   16390:	df02      	svc	2
   16392:	e7dd      	b.n	16350 <preempt+0x38>
		next->is_aborted = 1;
   16394:	7f2b      	ldrb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   16396:	69aa      	ldr	r2, [r5, #24]
   16398:	68e9      	ldr	r1, [r5, #12]
		next->is_aborted = 1;
   1639a:	f043 0302 	orr.w	r3, r3, #2
   1639e:	772b      	strb	r3, [r5, #28]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   163a0:	4628      	mov	r0, r5
   163a2:	4790      	blx	r2
		return;
   163a4:	e7d4      	b.n	16350 <preempt+0x38>
		ret = preempt_ticker_start(next, ticker_start_op_cb);
   163a6:	4618      	mov	r0, r3
   163a8:	f7ff ff92 	bl	162d0 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   163ac:	2802      	cmp	r0, #2
   163ae:	d9cf      	bls.n	16350 <preempt+0x38>
   163b0:	4a25      	ldr	r2, [pc, #148]	; (16448 <preempt+0x130>)
   163b2:	4928      	ldr	r1, [pc, #160]	; (16454 <preempt+0x13c>)
   163b4:	4826      	ldr	r0, [pc, #152]	; (16450 <preempt+0x138>)
   163b6:	f240 334b 	movw	r3, #843	; 0x34b
   163ba:	f005 f9db 	bl	1b774 <printk>
   163be:	4040      	eors	r0, r0
   163c0:	f380 8811 	msr	BASEPRI, r0
   163c4:	f04f 0003 	mov.w	r0, #3
   163c8:	df02      	svc	2
   163ca:	e7c1      	b.n	16350 <preempt+0x38>
		iter_idx = UINT8_MAX;
   163cc:	24ff      	movs	r4, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   163ce:	f10d 000b 	add.w	r0, sp, #11
		iter_idx = UINT8_MAX;
   163d2:	f88d 400b 	strb.w	r4, [sp, #11]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   163d6:	f7f9 f955 	bl	f684 <ull_prepare_dequeue_iter>
		while (iter) {
   163da:	b928      	cbnz	r0, 163e8 <preempt+0xd0>
   163dc:	e013      	b.n	16406 <preempt+0xee>
			iter = ull_prepare_dequeue_iter(&iter_idx);
   163de:	f10d 000b 	add.w	r0, sp, #11
   163e2:	f7f9 f94f 	bl	f684 <ull_prepare_dequeue_iter>
		while (iter) {
   163e6:	b170      	cbz	r0, 16406 <preempt+0xee>
			if (!iter->is_aborted &&
   163e8:	7f03      	ldrb	r3, [r0, #28]
   163ea:	079a      	lsls	r2, r3, #30
   163ec:	d4f7      	bmi.n	163de <preempt+0xc6>
			    event.curr.param == iter->prepare_param.param) {
   163ee:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   163f0:	6831      	ldr	r1, [r6, #0]
   163f2:	4291      	cmp	r1, r2
   163f4:	d1f3      	bne.n	163de <preempt+0xc6>
				iter->is_aborted = 1;
   163f6:	f043 0302 	orr.w	r3, r3, #2
   163fa:	7703      	strb	r3, [r0, #28]
				iter->abort_cb(&iter->prepare_param,
   163fc:	6983      	ldr	r3, [r0, #24]
   163fe:	4798      	blx	r3
				idx = UINT8_MAX;
   16400:	f88d 400a 	strb.w	r4, [sp, #10]
   16404:	e7eb      	b.n	163de <preempt+0xc6>
	struct lll_prepare_param prepare_param = {0};
   16406:	2100      	movs	r1, #0
	prepare_param.param = event.curr.param;
   16408:	6830      	ldr	r0, [r6, #0]
	struct lll_prepare_param prepare_param = {0};
   1640a:	9106      	str	r1, [sp, #24]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1640c:	2301      	movs	r3, #1
	struct lll_prepare_param prepare_param = {0};
   1640e:	e9cd 1104 	strd	r1, r1, [sp, #16]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16412:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   16414:	9007      	str	r0, [sp, #28]
	event.curr.param = NULL;
   16416:	6031      	str	r1, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   16418:	9b03      	ldr	r3, [sp, #12]
   1641a:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1641e:	aa04      	add	r2, sp, #16
   16420:	f7f9 f8f0 	bl	f604 <ull_prepare_enqueue>
		LL_ASSERT(iter);
   16424:	2800      	cmp	r0, #0
   16426:	d193      	bne.n	16350 <preempt+0x38>
   16428:	4a07      	ldr	r2, [pc, #28]	; (16448 <preempt+0x130>)
   1642a:	490b      	ldr	r1, [pc, #44]	; (16458 <preempt+0x140>)
   1642c:	4808      	ldr	r0, [pc, #32]	; (16450 <preempt+0x138>)
   1642e:	f240 337e 	movw	r3, #894	; 0x37e
   16432:	f005 f99f 	bl	1b774 <printk>
   16436:	4040      	eors	r0, r0
   16438:	f380 8811 	msr	BASEPRI, r0
   1643c:	f04f 0003 	mov.w	r0, #3
   16440:	df02      	svc	2
   16442:	e785      	b.n	16350 <preempt+0x38>
   16444:	2000238c 	.word	0x2000238c
   16448:	0002227c 	.word	0x0002227c
   1644c:	00022314 	.word	0x00022314
   16450:	0002180c 	.word	0x0002180c
   16454:	000222e4 	.word	0x000222e4
   16458:	0002230c 	.word	0x0002230c

0001645c <lll_init>:
{
   1645c:	b510      	push	{r4, lr}
   1645e:	4816      	ldr	r0, [pc, #88]	; (164b8 <lll_init+0x5c>)
   16460:	f003 fdc0 	bl	19fe4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   16464:	4b15      	ldr	r3, [pc, #84]	; (164bc <lll_init+0x60>)
   16466:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   16468:	b310      	cbz	r0, 164b0 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1646a:	4b15      	ldr	r3, [pc, #84]	; (164c0 <lll_init+0x64>)
   1646c:	2400      	movs	r4, #0
   1646e:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   16470:	f000 faf8 	bl	16a64 <lll_clock_init>
	if (err < 0) {
   16474:	2800      	cmp	r0, #0
   16476:	db1a      	blt.n	164ae <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   16478:	4621      	mov	r1, r4
   1647a:	2001      	movs	r0, #1
   1647c:	4622      	mov	r2, r4
   1647e:	f7ed fb43 	bl	3b08 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   16482:	4622      	mov	r2, r4
   16484:	200b      	movs	r0, #11
   16486:	2101      	movs	r1, #1
   16488:	f7ed fb3e 	bl	3b08 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1648c:	4622      	mov	r2, r4
   1648e:	4621      	mov	r1, r4
   16490:	2018      	movs	r0, #24
   16492:	f7ed fb39 	bl	3b08 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   16496:	2001      	movs	r0, #1
   16498:	f7ed fb04 	bl	3aa4 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1649c:	200b      	movs	r0, #11
   1649e:	f7ed fb01 	bl	3aa4 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   164a2:	2018      	movs	r0, #24
   164a4:	f7ed fafe 	bl	3aa4 <arch_irq_enable>
	radio_setup();
   164a8:	f001 fe20 	bl	180ec <radio_setup>
	return 0;
   164ac:	4620      	mov	r0, r4
}
   164ae:	bd10      	pop	{r4, pc}
		return -ENODEV;
   164b0:	f06f 0012 	mvn.w	r0, #18
}
   164b4:	bd10      	pop	{r4, pc}
   164b6:	bf00      	nop
   164b8:	00022320 	.word	0x00022320
   164bc:	20002388 	.word	0x20002388
   164c0:	2000238c 	.word	0x2000238c

000164c4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   164c4:	4a05      	ldr	r2, [pc, #20]	; (164dc <lll_csrand_get+0x18>)
{
   164c6:	b410      	push	{r4}
   164c8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   164ca:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   164cc:	6884      	ldr	r4, [r0, #8]
   164ce:	6824      	ldr	r4, [r4, #0]
   164d0:	b28a      	uxth	r2, r1
   164d2:	4619      	mov	r1, r3
   164d4:	4623      	mov	r3, r4
}
   164d6:	bc10      	pop	{r4}
   164d8:	4718      	bx	r3
   164da:	bf00      	nop
   164dc:	20002388 	.word	0x20002388

000164e0 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   164e0:	4b08      	ldr	r3, [pc, #32]	; (16504 <lll_csrand_isr_get+0x24>)
{
   164e2:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   164e4:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   164e6:	68ab      	ldr	r3, [r5, #8]
   164e8:	685c      	ldr	r4, [r3, #4]
   164ea:	b13c      	cbz	r4, 164fc <lll_csrand_isr_get+0x1c>
   164ec:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   164ee:	46a4      	mov	ip, r4
   164f0:	4601      	mov	r1, r0
   164f2:	b292      	uxth	r2, r2
   164f4:	4628      	mov	r0, r5
   164f6:	2300      	movs	r3, #0
}
   164f8:	bc30      	pop	{r4, r5}
   164fa:	4760      	bx	ip
   164fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16500:	bc30      	pop	{r4, r5}
   16502:	4770      	bx	lr
   16504:	20002388 	.word	0x20002388

00016508 <lll_rand_isr_get>:
   16508:	4b08      	ldr	r3, [pc, #32]	; (1652c <lll_rand_isr_get+0x24>)
   1650a:	b430      	push	{r4, r5}
   1650c:	681d      	ldr	r5, [r3, #0]
   1650e:	68ab      	ldr	r3, [r5, #8]
   16510:	685c      	ldr	r4, [r3, #4]
   16512:	b13c      	cbz	r4, 16524 <lll_rand_isr_get+0x1c>
   16514:	460a      	mov	r2, r1
   16516:	46a4      	mov	ip, r4
   16518:	4601      	mov	r1, r0
   1651a:	b292      	uxth	r2, r2
   1651c:	4628      	mov	r0, r5
   1651e:	2300      	movs	r3, #0
   16520:	bc30      	pop	{r4, r5}
   16522:	4760      	bx	ip
   16524:	f06f 0085 	mvn.w	r0, #133	; 0x85
   16528:	bc30      	pop	{r4, r5}
   1652a:	4770      	bx	lr
   1652c:	20002388 	.word	0x20002388

00016530 <lll_reset>:
}
   16530:	2000      	movs	r0, #0
   16532:	4770      	bx	lr

00016534 <lll_disable>:
{
   16534:	b530      	push	{r4, r5, lr}
	if (!param || (param == event.curr.param)) {
   16536:	4604      	mov	r4, r0
{
   16538:	b083      	sub	sp, #12
	if (!param || (param == event.curr.param)) {
   1653a:	2800      	cmp	r0, #0
   1653c:	d032      	beq.n	165a4 <lll_disable+0x70>
   1653e:	4b25      	ldr	r3, [pc, #148]	; (165d4 <lll_disable+0xa0>)
   16540:	681a      	ldr	r2, [r3, #0]
   16542:	4282      	cmp	r2, r0
   16544:	d028      	beq.n	16598 <lll_disable+0x64>
		idx = UINT8_MAX;
   16546:	25ff      	movs	r5, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   16548:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1654c:	f88d 5007 	strb.w	r5, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   16550:	f7f9 f898 	bl	f684 <ull_prepare_dequeue_iter>
		while (next) {
   16554:	b940      	cbnz	r0, 16568 <lll_disable+0x34>
   16556:	e01b      	b.n	16590 <lll_disable+0x5c>
			    (!param || (param == next->prepare_param.param))) {
   16558:	68c3      	ldr	r3, [r0, #12]
   1655a:	42a3      	cmp	r3, r4
   1655c:	d01a      	beq.n	16594 <lll_disable+0x60>
			next = ull_prepare_dequeue_iter(&idx);
   1655e:	f10d 0007 	add.w	r0, sp, #7
   16562:	f7f9 f88f 	bl	f684 <ull_prepare_dequeue_iter>
		while (next) {
   16566:	b198      	cbz	r0, 16590 <lll_disable+0x5c>
			if (!next->is_aborted &&
   16568:	7f03      	ldrb	r3, [r0, #28]
   1656a:	079b      	lsls	r3, r3, #30
   1656c:	d4f7      	bmi.n	1655e <lll_disable+0x2a>
   1656e:	2c00      	cmp	r4, #0
   16570:	d1f2      	bne.n	16558 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   16572:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   16574:	7f03      	ldrb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   16576:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   16578:	f043 0302 	orr.w	r3, r3, #2
   1657c:	7703      	strb	r3, [r0, #28]
				next->abort_cb(&next->prepare_param,
   1657e:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   16580:	f10d 0007 	add.w	r0, sp, #7
				idx = UINT8_MAX;
   16584:	f88d 5007 	strb.w	r5, [sp, #7]
			next = ull_prepare_dequeue_iter(&idx);
   16588:	f7f9 f87c 	bl	f684 <ull_prepare_dequeue_iter>
		while (next) {
   1658c:	2800      	cmp	r0, #0
   1658e:	d1eb      	bne.n	16568 <lll_disable+0x34>
}
   16590:	b003      	add	sp, #12
   16592:	bd30      	pop	{r4, r5, pc}
   16594:	4621      	mov	r1, r4
   16596:	e7ed      	b.n	16574 <lll_disable+0x40>
		if (event.curr.abort_cb && event.curr.param) {
   16598:	689b      	ldr	r3, [r3, #8]
   1659a:	b16b      	cbz	r3, 165b8 <lll_disable+0x84>
   1659c:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1659e:	2000      	movs	r0, #0
   165a0:	4798      	blx	r3
   165a2:	e7d0      	b.n	16546 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   165a4:	4a0b      	ldr	r2, [pc, #44]	; (165d4 <lll_disable+0xa0>)
   165a6:	6893      	ldr	r3, [r2, #8]
   165a8:	2b00      	cmp	r3, #0
   165aa:	d0cc      	beq.n	16546 <lll_disable+0x12>
   165ac:	6811      	ldr	r1, [r2, #0]
   165ae:	2900      	cmp	r1, #0
   165b0:	d0c9      	beq.n	16546 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   165b2:	2000      	movs	r0, #0
   165b4:	4798      	blx	r3
   165b6:	e7c6      	b.n	16546 <lll_disable+0x12>
			LL_ASSERT(!param);
   165b8:	4a07      	ldr	r2, [pc, #28]	; (165d8 <lll_disable+0xa4>)
   165ba:	4908      	ldr	r1, [pc, #32]	; (165dc <lll_disable+0xa8>)
   165bc:	4808      	ldr	r0, [pc, #32]	; (165e0 <lll_disable+0xac>)
   165be:	23fd      	movs	r3, #253	; 0xfd
   165c0:	f005 f8d8 	bl	1b774 <printk>
   165c4:	4040      	eors	r0, r0
   165c6:	f380 8811 	msr	BASEPRI, r0
   165ca:	f04f 0003 	mov.w	r0, #3
   165ce:	df02      	svc	2
   165d0:	e7b9      	b.n	16546 <lll_disable+0x12>
   165d2:	bf00      	nop
   165d4:	2000238c 	.word	0x2000238c
   165d8:	0002227c 	.word	0x0002227c
   165dc:	00022324 	.word	0x00022324
   165e0:	0002180c 	.word	0x0002180c

000165e4 <lll_prepare_done>:
}
   165e4:	2000      	movs	r0, #0
   165e6:	4770      	bx	lr

000165e8 <lll_done>:
{
   165e8:	b538      	push	{r3, r4, r5, lr}
   165ea:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   165ec:	f7f9 f83c 	bl	f668 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   165f0:	b154      	cbz	r4, 16608 <lll_done+0x20>
   165f2:	b310      	cbz	r0, 1663a <lll_done+0x52>
			ull = HDR_LLL2ULL(param);
   165f4:	6824      	ldr	r4, [r4, #0]
	ull_prepare_dequeue(TICKER_USER_ID_LLL);
   165f6:	2000      	movs	r0, #0
   165f8:	f7f9 f864 	bl	f6c4 <ull_prepare_dequeue>
	evdone = ull_event_done(ull);
   165fc:	4620      	mov	r0, r4
   165fe:	f7f9 f8cd 	bl	f79c <ull_event_done>
	LL_ASSERT(evdone);
   16602:	b158      	cbz	r0, 1661c <lll_done+0x34>
}
   16604:	2000      	movs	r0, #0
   16606:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(event.curr.abort_cb);
   16608:	4d1a      	ldr	r5, [pc, #104]	; (16674 <lll_done+0x8c>)
   1660a:	68ab      	ldr	r3, [r5, #8]
   1660c:	b31b      	cbz	r3, 16656 <lll_done+0x6e>
		param = event.curr.param;
   1660e:	682c      	ldr	r4, [r5, #0]
		event.curr.abort_cb = NULL;
   16610:	2300      	movs	r3, #0
   16612:	60ab      	str	r3, [r5, #8]
		event.curr.param = NULL;
   16614:	602b      	str	r3, [r5, #0]
		if (param) {
   16616:	2c00      	cmp	r4, #0
   16618:	d1ec      	bne.n	165f4 <lll_done+0xc>
   1661a:	e7ec      	b.n	165f6 <lll_done+0xe>
	LL_ASSERT(evdone);
   1661c:	4a16      	ldr	r2, [pc, #88]	; (16678 <lll_done+0x90>)
   1661e:	4917      	ldr	r1, [pc, #92]	; (1667c <lll_done+0x94>)
   16620:	4817      	ldr	r0, [pc, #92]	; (16680 <lll_done+0x98>)
   16622:	f240 1361 	movw	r3, #353	; 0x161
   16626:	f005 f8a5 	bl	1b774 <printk>
   1662a:	4040      	eors	r0, r0
   1662c:	f380 8811 	msr	BASEPRI, r0
   16630:	f04f 0003 	mov.w	r0, #3
   16634:	df02      	svc	2
}
   16636:	2000      	movs	r0, #0
   16638:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(!param || next);
   1663a:	4a0f      	ldr	r2, [pc, #60]	; (16678 <lll_done+0x90>)
   1663c:	4911      	ldr	r1, [pc, #68]	; (16684 <lll_done+0x9c>)
   1663e:	4810      	ldr	r0, [pc, #64]	; (16680 <lll_done+0x98>)
   16640:	f240 1337 	movw	r3, #311	; 0x137
   16644:	f005 f896 	bl	1b774 <printk>
   16648:	4040      	eors	r0, r0
   1664a:	f380 8811 	msr	BASEPRI, r0
   1664e:	f04f 0003 	mov.w	r0, #3
   16652:	df02      	svc	2
   16654:	e7ce      	b.n	165f4 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   16656:	4a08      	ldr	r2, [pc, #32]	; (16678 <lll_done+0x90>)
   16658:	490b      	ldr	r1, [pc, #44]	; (16688 <lll_done+0xa0>)
   1665a:	4809      	ldr	r0, [pc, #36]	; (16680 <lll_done+0x98>)
   1665c:	f240 133d 	movw	r3, #317	; 0x13d
   16660:	f005 f888 	bl	1b774 <printk>
   16664:	4040      	eors	r0, r0
   16666:	f380 8811 	msr	BASEPRI, r0
   1666a:	f04f 0003 	mov.w	r0, #3
   1666e:	df02      	svc	2
   16670:	e7cd      	b.n	1660e <lll_done+0x26>
   16672:	bf00      	nop
   16674:	2000238c 	.word	0x2000238c
   16678:	0002227c 	.word	0x0002227c
   1667c:	00022350 	.word	0x00022350
   16680:	0002180c 	.word	0x0002180c
   16684:	0002232c 	.word	0x0002232c
   16688:	0002233c 	.word	0x0002233c

0001668c <lll_is_abort_cb>:
}
   1668c:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   16690:	4770      	bx	lr
   16692:	bf00      	nop

00016694 <lll_event_offset_get>:
	} else if (ull->ticks_prepare_to_start & XON_BITMASK) {
   16694:	6883      	ldr	r3, [r0, #8]
   16696:	2b00      	cmp	r3, #0
		return MAX(ull->ticks_active_to_start,
   16698:	bfb8      	it	lt
   1669a:	68c3      	ldrlt	r3, [r0, #12]
		return MAX(ull->ticks_active_to_start,
   1669c:	6840      	ldr	r0, [r0, #4]
   1669e:	4298      	cmp	r0, r3
   166a0:	bf38      	it	cc
   166a2:	4618      	movcc	r0, r3
}
   166a4:	4770      	bx	lr
   166a6:	bf00      	nop

000166a8 <lll_preempt_calc>:
{
   166a8:	b510      	push	{r4, lr}
   166aa:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   166ac:	f7f6 fb16 	bl	ccdc <ticker_ticks_now_get>
	diff = ticks_now - ticks_at_event;
   166b0:	1b00      	subs	r0, r0, r4
	if (diff & BIT(HAL_TICKER_CNTR_MSBIT)) {
   166b2:	0203      	lsls	r3, r0, #8
   166b4:	d405      	bmi.n	166c2 <lll_preempt_calc+0x1a>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   166b6:	3003      	adds	r0, #3
	if (diff > HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US)) {
   166b8:	2809      	cmp	r0, #9
   166ba:	bf94      	ite	ls
   166bc:	2000      	movls	r0, #0
   166be:	2001      	movhi	r0, #1
}
   166c0:	bd10      	pop	{r4, pc}
		return 0;
   166c2:	2000      	movs	r0, #0
}
   166c4:	bd10      	pop	{r4, pc}
   166c6:	bf00      	nop

000166c8 <lll_chan_set>:
	switch (chan) {
   166c8:	2826      	cmp	r0, #38	; 0x26
{
   166ca:	b510      	push	{r4, lr}
   166cc:	4604      	mov	r4, r0
	switch (chan) {
   166ce:	d01c      	beq.n	1670a <lll_chan_set+0x42>
   166d0:	2827      	cmp	r0, #39	; 0x27
   166d2:	d012      	beq.n	166fa <lll_chan_set+0x32>
   166d4:	2825      	cmp	r0, #37	; 0x25
   166d6:	d008      	beq.n	166ea <lll_chan_set+0x22>
		if (chan < 11) {
   166d8:	280a      	cmp	r0, #10
   166da:	d91e      	bls.n	1671a <lll_chan_set+0x52>
		} else if (chan < 40) {
   166dc:	2827      	cmp	r0, #39	; 0x27
   166de:	d821      	bhi.n	16724 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   166e0:	3003      	adds	r0, #3
   166e2:	0040      	lsls	r0, r0, #1
   166e4:	f001 fd5e 	bl	181a4 <radio_freq_chan_set>
   166e8:	e002      	b.n	166f0 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   166ea:	2002      	movs	r0, #2
   166ec:	f001 fd5a 	bl	181a4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   166f0:	4620      	mov	r0, r4
}
   166f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   166f6:	f001 bd5b 	b.w	181b0 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   166fa:	2050      	movs	r0, #80	; 0x50
   166fc:	f001 fd52 	bl	181a4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16700:	4620      	mov	r0, r4
}
   16702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16706:	f001 bd53 	b.w	181b0 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1670a:	201a      	movs	r0, #26
   1670c:	f001 fd4a 	bl	181a4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   16710:	4620      	mov	r0, r4
}
   16712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   16716:	f001 bd4b 	b.w	181b0 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1671a:	3002      	adds	r0, #2
   1671c:	0040      	lsls	r0, r0, #1
   1671e:	f001 fd41 	bl	181a4 <radio_freq_chan_set>
   16722:	e7e5      	b.n	166f0 <lll_chan_set+0x28>
			LL_ASSERT(0);
   16724:	4a06      	ldr	r2, [pc, #24]	; (16740 <lll_chan_set+0x78>)
   16726:	4907      	ldr	r1, [pc, #28]	; (16744 <lll_chan_set+0x7c>)
   16728:	4807      	ldr	r0, [pc, #28]	; (16748 <lll_chan_set+0x80>)
   1672a:	f240 13cd 	movw	r3, #461	; 0x1cd
   1672e:	f005 f821 	bl	1b774 <printk>
   16732:	4040      	eors	r0, r0
   16734:	f380 8811 	msr	BASEPRI, r0
   16738:	f04f 0003 	mov.w	r0, #3
   1673c:	df02      	svc	2
   1673e:	e7d7      	b.n	166f0 <lll_chan_set+0x28>
   16740:	0002227c 	.word	0x0002227c
   16744:	000218a4 	.word	0x000218a4
   16748:	0002180c 	.word	0x0002180c

0001674c <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1674c:	f001 bd96 	b.w	1827c <radio_rx_ready_delay_get>

00016750 <lll_isr_tx_status_reset>:
{
   16750:	b508      	push	{r3, lr}
	radio_status_reset();
   16752:	f001 fdb5 	bl	182c0 <radio_status_reset>
}
   16756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1675a:	f001 bf03 	b.w	18564 <radio_tmr_status_reset>
   1675e:	bf00      	nop

00016760 <lll_isr_rx_status_reset>:
{
   16760:	b508      	push	{r3, lr}
	radio_status_reset();
   16762:	f001 fdad 	bl	182c0 <radio_status_reset>
	radio_tmr_status_reset();
   16766:	f001 fefd 	bl	18564 <radio_tmr_status_reset>
}
   1676a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1676e:	f001 bea5 	b.w	184bc <radio_rssi_status_reset>
   16772:	bf00      	nop

00016774 <lll_isr_status_reset>:
{
   16774:	b508      	push	{r3, lr}
	radio_status_reset();
   16776:	f001 fda3 	bl	182c0 <radio_status_reset>
	radio_tmr_status_reset();
   1677a:	f001 fef3 	bl	18564 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1677e:	f001 fed9 	bl	18534 <radio_filter_status_reset>
	radio_ar_status_reset();
   16782:	f002 f8b9 	bl	188f8 <radio_ar_status_reset>
}
   16786:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1678a:	f001 be97 	b.w	184bc <radio_rssi_status_reset>
   1678e:	bf00      	nop

00016790 <lll_isr_cleanup>:
{
   16790:	b508      	push	{r3, lr}
   16792:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   16794:	4815      	ldr	r0, [pc, #84]	; (167ec <lll_isr_cleanup+0x5c>)
   16796:	f001 fc89 	bl	180ac <radio_isr_set>
	if (!radio_is_idle()) {
   1679a:	f001 fdb1 	bl	18300 <radio_is_idle>
   1679e:	b150      	cbz	r0, 167b6 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   167a0:	f001 ff84 	bl	186ac <radio_tmr_stop>
	err = lll_hfclock_off();
   167a4:	f000 f9a2 	bl	16aec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   167a8:	2800      	cmp	r0, #0
   167aa:	db0c      	blt.n	167c6 <lll_isr_cleanup+0x36>
}
   167ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   167b0:	2000      	movs	r0, #0
   167b2:	f7ff bf19 	b.w	165e8 <lll_done>
		radio_disable();
   167b6:	f001 fd6f 	bl	18298 <radio_disable>
	radio_tmr_stop();
   167ba:	f001 ff77 	bl	186ac <radio_tmr_stop>
	err = lll_hfclock_off();
   167be:	f000 f995 	bl	16aec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   167c2:	2800      	cmp	r0, #0
   167c4:	daf2      	bge.n	167ac <lll_isr_cleanup+0x1c>
   167c6:	4a0a      	ldr	r2, [pc, #40]	; (167f0 <lll_isr_cleanup+0x60>)
   167c8:	490a      	ldr	r1, [pc, #40]	; (167f4 <lll_isr_cleanup+0x64>)
   167ca:	480b      	ldr	r0, [pc, #44]	; (167f8 <lll_isr_cleanup+0x68>)
   167cc:	f44f 730c 	mov.w	r3, #560	; 0x230
   167d0:	f004 ffd0 	bl	1b774 <printk>
   167d4:	4040      	eors	r0, r0
   167d6:	f380 8811 	msr	BASEPRI, r0
   167da:	f04f 0003 	mov.w	r0, #3
   167de:	df02      	svc	2
	lll_done(NULL);
   167e0:	2000      	movs	r0, #0
}
   167e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   167e6:	f7ff beff 	b.w	165e8 <lll_done>
   167ea:	bf00      	nop
   167ec:	00016229 	.word	0x00016229
   167f0:	0002227c 	.word	0x0002227c
   167f4:	00022358 	.word	0x00022358
   167f8:	0002180c 	.word	0x0002180c

000167fc <lll_isr_abort>:
{
   167fc:	b510      	push	{r4, lr}
   167fe:	4604      	mov	r4, r0
	radio_status_reset();
   16800:	f001 fd5e 	bl	182c0 <radio_status_reset>
	radio_tmr_status_reset();
   16804:	f001 feae 	bl	18564 <radio_tmr_status_reset>
	radio_filter_status_reset();
   16808:	f001 fe94 	bl	18534 <radio_filter_status_reset>
	radio_ar_status_reset();
   1680c:	f002 f874 	bl	188f8 <radio_ar_status_reset>
	radio_rssi_status_reset();
   16810:	f001 fe54 	bl	184bc <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   16814:	4620      	mov	r0, r4
}
   16816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1681a:	f7ff bfb9 	b.w	16790 <lll_isr_cleanup>
   1681e:	bf00      	nop

00016820 <lll_isr_early_abort>:
{
   16820:	b508      	push	{r3, lr}
   16822:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   16824:	4813      	ldr	r0, [pc, #76]	; (16874 <lll_isr_early_abort+0x54>)
   16826:	f001 fc41 	bl	180ac <radio_isr_set>
	if (!radio_is_idle()) {
   1682a:	f001 fd69 	bl	18300 <radio_is_idle>
   1682e:	b140      	cbz	r0, 16842 <lll_isr_early_abort+0x22>
	err = lll_hfclock_off();
   16830:	f000 f95c 	bl	16aec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16834:	2800      	cmp	r0, #0
   16836:	db0a      	blt.n	1684e <lll_isr_early_abort+0x2e>
}
   16838:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1683c:	2000      	movs	r0, #0
   1683e:	f7ff bed3 	b.w	165e8 <lll_done>
		radio_disable();
   16842:	f001 fd29 	bl	18298 <radio_disable>
	err = lll_hfclock_off();
   16846:	f000 f951 	bl	16aec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1684a:	2800      	cmp	r0, #0
   1684c:	daf4      	bge.n	16838 <lll_isr_early_abort+0x18>
   1684e:	4a0a      	ldr	r2, [pc, #40]	; (16878 <lll_isr_early_abort+0x58>)
   16850:	490a      	ldr	r1, [pc, #40]	; (1687c <lll_isr_early_abort+0x5c>)
   16852:	480b      	ldr	r0, [pc, #44]	; (16880 <lll_isr_early_abort+0x60>)
   16854:	f240 233f 	movw	r3, #575	; 0x23f
   16858:	f004 ff8c 	bl	1b774 <printk>
   1685c:	4040      	eors	r0, r0
   1685e:	f380 8811 	msr	BASEPRI, r0
   16862:	f04f 0003 	mov.w	r0, #3
   16866:	df02      	svc	2
	lll_done(NULL);
   16868:	2000      	movs	r0, #0
}
   1686a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1686e:	f7ff bebb 	b.w	165e8 <lll_done>
   16872:	bf00      	nop
   16874:	00016229 	.word	0x00016229
   16878:	0002227c 	.word	0x0002227c
   1687c:	00022358 	.word	0x00022358
   16880:	0002180c 	.word	0x0002180c

00016884 <lll_prepare_resolve>:
{
   16884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16888:	b085      	sub	sp, #20
   1688a:	4605      	mov	r5, r0
   1688c:	461c      	mov	r4, r3
	p = ull_prepare_dequeue_iter(&idx);
   1688e:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   16892:	23ff      	movs	r3, #255	; 0xff
{
   16894:	f89d 8030 	ldrb.w	r8, [sp, #48]	; 0x30
	idx = UINT8_MAX;
   16898:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1689c:	460e      	mov	r6, r1
   1689e:	4617      	mov	r7, r2
	p = ull_prepare_dequeue_iter(&idx);
   168a0:	f7f8 fef0 	bl	f684 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   168a4:	4684      	mov	ip, r0
   168a6:	b920      	cbnz	r0, 168b2 <lll_prepare_resolve+0x2e>
   168a8:	e021      	b.n	168ee <lll_prepare_resolve+0x6a>
		p = ull_prepare_dequeue_iter(&idx);
   168aa:	f7f8 feeb 	bl	f684 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   168ae:	4684      	mov	ip, r0
   168b0:	b1e8      	cbz	r0, 168ee <lll_prepare_resolve+0x6a>
   168b2:	f89c 301c 	ldrb.w	r3, [ip, #28]
   168b6:	079a      	lsls	r2, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   168b8:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   168bc:	d1f5      	bne.n	168aa <lll_prepare_resolve+0x26>
	    event.curr.abort_cb ||
   168be:	f8df 912c 	ldr.w	r9, [pc, #300]	; 169ec <lll_prepare_resolve+0x168>
	if ((!is_dequeue && !is_done_sync()) ||
   168c2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   168c6:	b9bb      	cbnz	r3, 168f8 <lll_prepare_resolve+0x74>
	    (p && is_resume)) {
   168c8:	f1b8 0f00 	cmp.w	r8, #0
   168cc:	d033      	beq.n	16936 <lll_prepare_resolve+0xb2>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   168ce:	f8cd 8000 	str.w	r8, [sp]
   168d2:	463b      	mov	r3, r7
   168d4:	4622      	mov	r2, r4
   168d6:	4631      	mov	r1, r6
   168d8:	4628      	mov	r0, r5
   168da:	f7f8 fe93 	bl	f604 <ull_prepare_enqueue>
		LL_ASSERT(next);
   168de:	2800      	cmp	r0, #0
   168e0:	d064      	beq.n	169ac <lll_prepare_resolve+0x128>
		return -EINPROGRESS;
   168e2:	f06f 0476 	mvn.w	r4, #118	; 0x76
}
   168e6:	4620      	mov	r0, r4
   168e8:	b005      	add	sp, #20
   168ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    event.curr.abort_cb ||
   168ee:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 169ec <lll_prepare_resolve+0x168>
	if ((!is_dequeue && !is_done_sync()) ||
   168f2:	f8d9 3008 	ldr.w	r3, [r9, #8]
   168f6:	b36b      	cbz	r3, 16954 <lll_prepare_resolve+0xd0>
		next = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   168f8:	f8cd 8000 	str.w	r8, [sp]
   168fc:	463b      	mov	r3, r7
   168fe:	4622      	mov	r2, r4
   16900:	4631      	mov	r1, r6
   16902:	4628      	mov	r0, r5
   16904:	f7f8 fe7e 	bl	f604 <ull_prepare_enqueue>
		LL_ASSERT(next);
   16908:	2800      	cmp	r0, #0
   1690a:	d04f      	beq.n	169ac <lll_prepare_resolve+0x128>
		if (is_resume) {
   1690c:	f1b8 0f00 	cmp.w	r8, #0
   16910:	d1e7      	bne.n	168e2 <lll_prepare_resolve+0x5e>
		ret  = preempt_ticker_start(next, ticker_start_op_cb);
   16912:	f7ff fcdd 	bl	162d0 <preempt_ticker_start.constprop.0>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16916:	2802      	cmp	r0, #2
   16918:	d9e3      	bls.n	168e2 <lll_prepare_resolve+0x5e>
   1691a:	4a35      	ldr	r2, [pc, #212]	; (169f0 <lll_prepare_resolve+0x16c>)
   1691c:	4935      	ldr	r1, [pc, #212]	; (169f4 <lll_prepare_resolve+0x170>)
   1691e:	4836      	ldr	r0, [pc, #216]	; (169f8 <lll_prepare_resolve+0x174>)
   16920:	f240 2385 	movw	r3, #645	; 0x285
   16924:	f004 ff26 	bl	1b774 <printk>
   16928:	4040      	eors	r0, r0
   1692a:	f380 8811 	msr	BASEPRI, r0
   1692e:	f04f 0003 	mov.w	r0, #3
   16932:	df02      	svc	2
   16934:	e7d5      	b.n	168e2 <lll_prepare_resolve+0x5e>
	LL_ASSERT(!p || &p->prepare_param == prepare_param);
   16936:	45a4      	cmp	ip, r4
   16938:	d00c      	beq.n	16954 <lll_prepare_resolve+0xd0>
   1693a:	4a2d      	ldr	r2, [pc, #180]	; (169f0 <lll_prepare_resolve+0x16c>)
   1693c:	492f      	ldr	r1, [pc, #188]	; (169fc <lll_prepare_resolve+0x178>)
   1693e:	482e      	ldr	r0, [pc, #184]	; (169f8 <lll_prepare_resolve+0x174>)
   16940:	f44f 732b 	mov.w	r3, #684	; 0x2ac
   16944:	f004 ff16 	bl	1b774 <printk>
   16948:	4040      	eors	r0, r0
   1694a:	f380 8811 	msr	BASEPRI, r0
   1694e:	f04f 0003 	mov.w	r0, #3
   16952:	df02      	svc	2
	event.curr.param = prepare_param->param;
   16954:	68e3      	ldr	r3, [r4, #12]
   16956:	f8c9 3000 	str.w	r3, [r9]
	err = prepare_cb(prepare_param);
   1695a:	4620      	mov	r0, r4
	event.curr.abort_cb = abort_cb;
   1695c:	e9c9 5601 	strd	r5, r6, [r9, #4]
	err = prepare_cb(prepare_param);
   16960:	47b8      	blx	r7
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   16962:	2200      	movs	r2, #0
   16964:	4b26      	ldr	r3, [pc, #152]	; (16a00 <lll_prepare_resolve+0x17c>)
   16966:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   16968:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1696a:	4611      	mov	r1, r2
   1696c:	4610      	mov	r0, r2
   1696e:	f7f6 f973 	bl	cc58 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   16972:	2802      	cmp	r0, #2
   16974:	d82c      	bhi.n	169d0 <lll_prepare_resolve+0x14c>
		p = ull_prepare_dequeue_iter(&idx);
   16976:	f10d 000f 	add.w	r0, sp, #15
   1697a:	f7f8 fe83 	bl	f684 <ull_prepare_dequeue_iter>
		if (!p) {
   1697e:	2800      	cmp	r0, #0
   16980:	d0b1      	beq.n	168e6 <lll_prepare_resolve+0x62>
	} while (p->is_aborted || p->is_resume);
   16982:	7f03      	ldrb	r3, [r0, #28]
   16984:	079b      	lsls	r3, r3, #30
   16986:	d1f6      	bne.n	16976 <lll_prepare_resolve+0xf2>
	ret = preempt_ticker_start(p, ticker_start_op_cb);
   16988:	f7ff fca2 	bl	162d0 <preempt_ticker_start.constprop.0>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1698c:	2802      	cmp	r0, #2
   1698e:	d9aa      	bls.n	168e6 <lll_prepare_resolve+0x62>
   16990:	4a17      	ldr	r2, [pc, #92]	; (169f0 <lll_prepare_resolve+0x16c>)
   16992:	4918      	ldr	r1, [pc, #96]	; (169f4 <lll_prepare_resolve+0x170>)
   16994:	4818      	ldr	r0, [pc, #96]	; (169f8 <lll_prepare_resolve+0x174>)
   16996:	f240 23ca 	movw	r3, #714	; 0x2ca
   1699a:	f004 feeb 	bl	1b774 <printk>
   1699e:	4040      	eors	r0, r0
   169a0:	f380 8811 	msr	BASEPRI, r0
   169a4:	f04f 0003 	mov.w	r0, #3
   169a8:	df02      	svc	2
   169aa:	e79c      	b.n	168e6 <lll_prepare_resolve+0x62>
		LL_ASSERT(next);
   169ac:	4a10      	ldr	r2, [pc, #64]	; (169f0 <lll_prepare_resolve+0x16c>)
   169ae:	4915      	ldr	r1, [pc, #84]	; (16a04 <lll_prepare_resolve+0x180>)
   169b0:	4811      	ldr	r0, [pc, #68]	; (169f8 <lll_prepare_resolve+0x174>)
   169b2:	f240 237a 	movw	r3, #634	; 0x27a
   169b6:	f004 fedd 	bl	1b774 <printk>
   169ba:	4040      	eors	r0, r0
   169bc:	f380 8811 	msr	BASEPRI, r0
   169c0:	f04f 0003 	mov.w	r0, #3
   169c4:	df02      	svc	2
   169c6:	2000      	movs	r0, #0
		if (is_resume) {
   169c8:	f1b8 0f00 	cmp.w	r8, #0
   169cc:	d189      	bne.n	168e2 <lll_prepare_resolve+0x5e>
   169ce:	e7a0      	b.n	16912 <lll_prepare_resolve+0x8e>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   169d0:	4a07      	ldr	r2, [pc, #28]	; (169f0 <lll_prepare_resolve+0x16c>)
   169d2:	4908      	ldr	r1, [pc, #32]	; (169f4 <lll_prepare_resolve+0x170>)
   169d4:	4808      	ldr	r0, [pc, #32]	; (169f8 <lll_prepare_resolve+0x174>)
   169d6:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   169da:	f004 fecb 	bl	1b774 <printk>
   169de:	4040      	eors	r0, r0
   169e0:	f380 8811 	msr	BASEPRI, r0
   169e4:	f04f 0003 	mov.w	r0, #3
   169e8:	df02      	svc	2
   169ea:	e7c4      	b.n	16976 <lll_prepare_resolve+0xf2>
   169ec:	2000238c 	.word	0x2000238c
   169f0:	0002227c 	.word	0x0002227c
   169f4:	000222e4 	.word	0x000222e4
   169f8:	0002180c 	.word	0x0002180c
   169fc:	0002236c 	.word	0x0002236c
   16a00:	0001622d 	.word	0x0001622d
   16a04:	00022364 	.word	0x00022364

00016a08 <clock_ready>:
	z_impl_k_sem_give(sem);
   16a08:	f101 0010 	add.w	r0, r1, #16
   16a0c:	f003 be5c 	b.w	1a6c8 <z_impl_k_sem_give>

00016a10 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   16a10:	b570      	push	{r4, r5, r6, lr}
   16a12:	4605      	mov	r5, r0
   16a14:	b08a      	sub	sp, #40	; 0x28
   16a16:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   16a18:	2201      	movs	r2, #1
   16a1a:	2100      	movs	r1, #0
   16a1c:	a804      	add	r0, sp, #16
   16a1e:	f009 fc7b 	bl	20318 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   16a22:	4b0f      	ldr	r3, [pc, #60]	; (16a60 <blocking_on+0x50>)
   16a24:	9301      	str	r3, [sp, #4]
   16a26:	2600      	movs	r6, #0
   16a28:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   16a2a:	4669      	mov	r1, sp
   16a2c:	4628      	mov	r0, r5
   16a2e:	9603      	str	r6, [sp, #12]
   16a30:	9302      	str	r3, [sp, #8]
   16a32:	f004 ff1b 	bl	1b86c <onoff_request>
	if (err < 0) {
   16a36:	2800      	cmp	r0, #0
   16a38:	db10      	blt.n	16a5c <blocking_on+0x4c>
   16a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   16a3e:	4631      	mov	r1, r6
   16a40:	f240 30e7 	movw	r0, #999	; 0x3e7
   16a44:	fbe4 0103 	umlal	r0, r1, r4, r3
   16a48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16a4c:	2300      	movs	r3, #0
   16a4e:	f7e9 fb57 	bl	100 <__aeabi_uldivmod>
   16a52:	4602      	mov	r2, r0
   16a54:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   16a56:	a804      	add	r0, sp, #16
   16a58:	f003 fe5c 	bl	1a714 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   16a5c:	b00a      	add	sp, #40	; 0x28
   16a5e:	bd70      	pop	{r4, r5, r6, pc}
   16a60:	00016a09 	.word	0x00016a09

00016a64 <lll_clock_init>:

int lll_clock_init(void)
{
   16a64:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16a66:	2001      	movs	r0, #1
   16a68:	f7ec fce4 	bl	3434 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   16a6c:	4904      	ldr	r1, [pc, #16]	; (16a80 <lll_clock_init+0x1c>)
   16a6e:	2300      	movs	r3, #0
   16a70:	2401      	movs	r4, #1
   16a72:	608c      	str	r4, [r1, #8]
   16a74:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   16a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16a7a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   16a7c:	f004 bef6 	b.w	1b86c <onoff_request>
   16a80:	200023a4 	.word	0x200023a4

00016a84 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   16a84:	4b0c      	ldr	r3, [pc, #48]	; (16ab8 <lll_clock_wait+0x34>)
   16a86:	781a      	ldrb	r2, [r3, #0]
   16a88:	b10a      	cbz	r2, 16a8e <lll_clock_wait+0xa>
		return 0;
   16a8a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   16a8c:	4770      	bx	lr
{
   16a8e:	b510      	push	{r4, lr}
	done = true;
   16a90:	2001      	movs	r0, #1
   16a92:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16a94:	f7ec fcce 	bl	3434 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   16a98:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   16a9c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   16a9e:	f7ff ffb7 	bl	16a10 <blocking_on>
	if (err) {
   16aa2:	b938      	cbnz	r0, 16ab4 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   16aa4:	4620      	mov	r0, r4
   16aa6:	f004 ff2a 	bl	1b8fe <onoff_release>
	if (err != ONOFF_STATE_ON) {
   16aaa:	2802      	cmp	r0, #2
		return 0;
   16aac:	bf0c      	ite	eq
   16aae:	2000      	moveq	r0, #0
		return -EIO;
   16ab0:	f06f 0004 	mvnne.w	r0, #4
}
   16ab4:	bd10      	pop	{r4, pc}
   16ab6:	bf00      	nop
   16ab8:	20002a80 	.word	0x20002a80

00016abc <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   16abc:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   16abe:	4b0a      	ldr	r3, [pc, #40]	; (16ae8 <lll_hfclock_on+0x2c>)
   16ac0:	f3bf 8f5b 	dmb	ish
   16ac4:	e853 2f00 	ldrex	r2, [r3]
   16ac8:	1c51      	adds	r1, r2, #1
   16aca:	e843 1000 	strex	r0, r1, [r3]
   16ace:	2800      	cmp	r0, #0
   16ad0:	d1f8      	bne.n	16ac4 <lll_hfclock_on+0x8>
   16ad2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   16ad6:	2a00      	cmp	r2, #0
   16ad8:	dd01      	ble.n	16ade <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   16ada:	2000      	movs	r0, #0
   16adc:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   16ade:	f7ec fcb1 	bl	3444 <z_nrf_clock_bt_ctlr_hf_request>
}
   16ae2:	2000      	movs	r0, #0
   16ae4:	bd08      	pop	{r3, pc}
   16ae6:	bf00      	nop
   16ae8:	200023a0 	.word	0x200023a0

00016aec <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   16aec:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   16aee:	4b0d      	ldr	r3, [pc, #52]	; (16b24 <lll_hfclock_off+0x38>)
   16af0:	681a      	ldr	r2, [r3, #0]
   16af2:	2a00      	cmp	r2, #0
   16af4:	dd12      	ble.n	16b1c <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   16af6:	f3bf 8f5b 	dmb	ish
   16afa:	e853 2f00 	ldrex	r2, [r3]
   16afe:	1e51      	subs	r1, r2, #1
   16b00:	e843 1000 	strex	r0, r1, [r3]
   16b04:	2800      	cmp	r0, #0
   16b06:	d1f8      	bne.n	16afa <lll_hfclock_off+0xe>
   16b08:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   16b0c:	2a01      	cmp	r2, #1
   16b0e:	dd01      	ble.n	16b14 <lll_hfclock_off+0x28>
		return 0;
   16b10:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   16b12:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   16b14:	f7ec fcac 	bl	3470 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   16b18:	2000      	movs	r0, #0
}
   16b1a:	bd08      	pop	{r3, pc}
		return -EALREADY;
   16b1c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
   16b20:	bd08      	pop	{r3, pc}
   16b22:	bf00      	nop
   16b24:	200023a0 	.word	0x200023a0

00016b28 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   16b28:	2032      	movs	r0, #50	; 0x32
   16b2a:	4770      	bx	lr

00016b2c <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   16b2c:	4b01      	ldr	r3, [pc, #4]	; (16b34 <lll_clock_ppm_get+0x8>)
}
   16b2e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   16b32:	4770      	bx	lr
   16b34:	000223b8 	.word	0x000223b8

00016b38 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   16b38:	b510      	push	{r4, lr}
   16b3a:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   16b3c:	f7ff fe1a 	bl	16774 <lll_isr_status_reset>

	radio_filter_disable();
   16b40:	f001 fcee 	bl	18520 <radio_filter_disable>

	lll_isr_cleanup(param);
   16b44:	4620      	mov	r0, r4
}
   16b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   16b4a:	f7ff be21 	b.w	16790 <lll_isr_cleanup>
   16b4e:	bf00      	nop

00016b50 <isr_tx>:
{
   16b50:	b530      	push	{r4, r5, lr}
   16b52:	b083      	sub	sp, #12
   16b54:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   16b56:	f7ff fdfb 	bl	16750 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   16b5a:	2096      	movs	r0, #150	; 0x96
   16b5c:	f001 fd12 	bl	18584 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   16b60:	2300      	movs	r3, #0
   16b62:	461a      	mov	r2, r3
   16b64:	4619      	mov	r1, r3
   16b66:	4618      	mov	r0, r3
   16b68:	f001 fc3a 	bl	183e0 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   16b6c:	f001 fbec 	bl	18348 <radio_pkt_scratch_get>
   16b70:	f001 fb76 	bl	18260 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   16b74:	f001 fbb0 	bl	182d8 <radio_is_ready>
   16b78:	b9e0      	cbnz	r0, 16bb4 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   16b7a:	481e      	ldr	r0, [pc, #120]	; (16bf4 <isr_tx+0xa4>)
   16b7c:	4621      	mov	r1, r4
   16b7e:	f001 fa95 	bl	180ac <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   16b82:	f7ff fb1f 	bl	161c4 <ull_filter_lll_rl_enabled>
   16b86:	bb50      	cbnz	r0, 16bde <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   16b88:	f001 fde4 	bl	18754 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16b8c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   16b8e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16b90:	4608      	mov	r0, r1
   16b92:	f001 fb75 	bl	18280 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   16b96:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   16b98:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   16b9a:	4608      	mov	r0, r1
   16b9c:	f001 fb6c 	bl	18278 <radio_tx_chain_delay_get>
   16ba0:	442c      	add	r4, r5
   16ba2:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   16ba4:	1a20      	subs	r0, r4, r0
   16ba6:	f001 fd8d 	bl	186c4 <radio_tmr_hcto_configure>
}
   16baa:	b003      	add	sp, #12
   16bac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   16bb0:	f001 bdc2 	b.w	18738 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   16bb4:	4a10      	ldr	r2, [pc, #64]	; (16bf8 <isr_tx+0xa8>)
   16bb6:	4911      	ldr	r1, [pc, #68]	; (16bfc <isr_tx+0xac>)
   16bb8:	4811      	ldr	r0, [pc, #68]	; (16c00 <isr_tx+0xb0>)
   16bba:	f240 33cb 	movw	r3, #971	; 0x3cb
   16bbe:	f004 fdd9 	bl	1b774 <printk>
   16bc2:	4040      	eors	r0, r0
   16bc4:	f380 8811 	msr	BASEPRI, r0
   16bc8:	f04f 0003 	mov.w	r0, #3
   16bcc:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   16bce:	4809      	ldr	r0, [pc, #36]	; (16bf4 <isr_tx+0xa4>)
   16bd0:	4621      	mov	r1, r4
   16bd2:	f001 fa6b 	bl	180ac <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   16bd6:	f7ff faf5 	bl	161c4 <ull_filter_lll_rl_enabled>
   16bda:	2800      	cmp	r0, #0
   16bdc:	d0d4      	beq.n	16b88 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   16bde:	f10d 0007 	add.w	r0, sp, #7
   16be2:	f7ff fa1d 	bl	16020 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   16be6:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   16be8:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   16bea:	f89d 0007 	ldrb.w	r0, [sp, #7]
   16bee:	f001 fe49 	bl	18884 <radio_ar_configure>
   16bf2:	e7c9      	b.n	16b88 <isr_tx+0x38>
   16bf4:	00017369 	.word	0x00017369
   16bf8:	000223c8 	.word	0x000223c8
   16bfc:	00022414 	.word	0x00022414
   16c00:	0002180c 	.word	0x0002180c

00016c04 <is_abort_cb>:
	if (next != curr) {
   16c04:	4281      	cmp	r1, r0
{
   16c06:	b508      	push	{r3, lr}
	if (next != curr) {
   16c08:	d00e      	beq.n	16c28 <is_abort_cb+0x24>
		} else if (lll->is_hdcd) {
   16c0a:	7a0b      	ldrb	r3, [r1, #8]
   16c0c:	07db      	lsls	r3, r3, #31
   16c0e:	d402      	bmi.n	16c16 <is_abort_cb+0x12>
			return -ECANCELED;
   16c10:	f06f 008b 	mvn.w	r0, #139	; 0x8b
}
   16c14:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   16c16:	4b13      	ldr	r3, [pc, #76]	; (16c64 <is_abort_cb+0x60>)
   16c18:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   16c1a:	f7ff ff4f 	bl	16abc <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   16c1e:	2800      	cmp	r0, #0
   16c20:	db0f      	blt.n	16c42 <is_abort_cb+0x3e>
   16c22:	f06f 000a 	mvn.w	r0, #10
}
   16c26:	bd08      	pop	{r3, pc}
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   16c28:	7b0b      	ldrb	r3, [r1, #12]
   16c2a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   16c2e:	690b      	ldr	r3, [r1, #16]
   16c30:	781b      	ldrb	r3, [r3, #0]
   16c32:	f003 030f 	and.w	r3, r3, #15
		return 0;
   16c36:	2b01      	cmp	r3, #1
   16c38:	bf14      	ite	ne
   16c3a:	f06f 008b 	mvnne.w	r0, #139	; 0x8b
   16c3e:	2000      	moveq	r0, #0
}
   16c40:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   16c42:	4a09      	ldr	r2, [pc, #36]	; (16c68 <is_abort_cb+0x64>)
   16c44:	4909      	ldr	r1, [pc, #36]	; (16c6c <is_abort_cb+0x68>)
   16c46:	480a      	ldr	r0, [pc, #40]	; (16c70 <is_abort_cb+0x6c>)
   16c48:	f240 3389 	movw	r3, #905	; 0x389
   16c4c:	f004 fd92 	bl	1b774 <printk>
   16c50:	4040      	eors	r0, r0
   16c52:	f380 8811 	msr	BASEPRI, r0
   16c56:	f04f 0003 	mov.w	r0, #3
   16c5a:	df02      	svc	2
   16c5c:	f06f 000a 	mvn.w	r0, #10
}
   16c60:	bd08      	pop	{r3, pc}
   16c62:	bf00      	nop
   16c64:	00017185 	.word	0x00017185
   16c68:	000223c8 	.word	0x000223c8
   16c6c:	00022358 	.word	0x00022358
   16c70:	0002180c 	.word	0x0002180c

00016c74 <abort_cb>:
{
   16c74:	b510      	push	{r4, lr}
	if (!prepare_param) {
   16c76:	b1d8      	cbz	r0, 16cb0 <abort_cb+0x3c>
	err = lll_hfclock_off();
   16c78:	460c      	mov	r4, r1
   16c7a:	f7ff ff37 	bl	16aec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   16c7e:	2800      	cmp	r0, #0
   16c80:	db04      	blt.n	16c8c <abort_cb+0x18>
	lll_done(param);
   16c82:	4620      	mov	r0, r4
}
   16c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16c88:	f7ff bcae 	b.w	165e8 <lll_done>
	LL_ASSERT(err >= 0);
   16c8c:	4a0c      	ldr	r2, [pc, #48]	; (16cc0 <abort_cb+0x4c>)
   16c8e:	490d      	ldr	r1, [pc, #52]	; (16cc4 <abort_cb+0x50>)
   16c90:	480d      	ldr	r0, [pc, #52]	; (16cc8 <abort_cb+0x54>)
   16c92:	f240 33af 	movw	r3, #943	; 0x3af
   16c96:	f004 fd6d 	bl	1b774 <printk>
   16c9a:	4040      	eors	r0, r0
   16c9c:	f380 8811 	msr	BASEPRI, r0
   16ca0:	f04f 0003 	mov.w	r0, #3
   16ca4:	df02      	svc	2
	lll_done(param);
   16ca6:	4620      	mov	r0, r4
}
   16ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   16cac:	f7ff bc9c 	b.w	165e8 <lll_done>
		radio_isr_set(isr_abort, param);
   16cb0:	4806      	ldr	r0, [pc, #24]	; (16ccc <abort_cb+0x58>)
   16cb2:	f001 f9fb 	bl	180ac <radio_isr_set>
}
   16cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   16cba:	f001 baed 	b.w	18298 <radio_disable>
   16cbe:	bf00      	nop
   16cc0:	000223c8 	.word	0x000223c8
   16cc4:	00022358 	.word	0x00022358
   16cc8:	0002180c 	.word	0x0002180c
   16ccc:	00016b39 	.word	0x00016b39

00016cd0 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   16cd0:	4b08      	ldr	r3, [pc, #32]	; (16cf4 <lll_adv_init+0x24>)
{
   16cd2:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   16cd4:	1d18      	adds	r0, r3, #4
   16cd6:	2205      	movs	r2, #5
   16cd8:	2128      	movs	r1, #40	; 0x28
   16cda:	f7f4 fcf1 	bl	b6c0 <mem_init>
	MFIFO_INIT(pdu_free);
   16cde:	4b06      	ldr	r3, [pc, #24]	; (16cf8 <lll_adv_init+0x28>)
   16ce0:	2400      	movs	r4, #0
   16ce2:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   16ce4:	2203      	movs	r2, #3
   16ce6:	4621      	mov	r1, r4
   16ce8:	4804      	ldr	r0, [pc, #16]	; (16cfc <lll_adv_init+0x2c>)
   16cea:	f009 fb15 	bl	20318 <z_impl_k_sem_init>
}
   16cee:	4620      	mov	r0, r4
   16cf0:	bd10      	pop	{r4, pc}
   16cf2:	bf00      	nop
   16cf4:	200023b4 	.word	0x200023b4
   16cf8:	20000554 	.word	0x20000554
   16cfc:	20002480 	.word	0x20002480

00016d00 <lll_adv_reset>:
   16d00:	4b08      	ldr	r3, [pc, #32]	; (16d24 <lll_adv_reset+0x24>)
   16d02:	b510      	push	{r4, lr}
   16d04:	1d18      	adds	r0, r3, #4
   16d06:	2205      	movs	r2, #5
   16d08:	2128      	movs	r1, #40	; 0x28
   16d0a:	f7f4 fcd9 	bl	b6c0 <mem_init>
   16d0e:	4b06      	ldr	r3, [pc, #24]	; (16d28 <lll_adv_reset+0x28>)
   16d10:	2400      	movs	r4, #0
   16d12:	805c      	strh	r4, [r3, #2]
   16d14:	2203      	movs	r2, #3
   16d16:	4621      	mov	r1, r4
   16d18:	4804      	ldr	r0, [pc, #16]	; (16d2c <lll_adv_reset+0x2c>)
   16d1a:	f009 fafd 	bl	20318 <z_impl_k_sem_init>
   16d1e:	4620      	mov	r0, r4
   16d20:	bd10      	pop	{r4, pc}
   16d22:	bf00      	nop
   16d24:	200023b4 	.word	0x200023b4
   16d28:	20000554 	.word	0x20000554
   16d2c:	20002480 	.word	0x20002480

00016d30 <lll_adv_data_init>:
{
   16d30:	b510      	push	{r4, lr}
   16d32:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   16d34:	4805      	ldr	r0, [pc, #20]	; (16d4c <lll_adv_data_init+0x1c>)
   16d36:	f7f4 fcf3 	bl	b720 <mem_acquire>
	if (!p) {
   16d3a:	b120      	cbz	r0, 16d46 <lll_adv_data_init+0x16>
   16d3c:	4603      	mov	r3, r0
	p->len = 0U;
   16d3e:	2000      	movs	r0, #0
   16d40:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   16d42:	6063      	str	r3, [r4, #4]
}
   16d44:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   16d46:	f06f 000b 	mvn.w	r0, #11
}
   16d4a:	bd10      	pop	{r4, pc}
   16d4c:	200023b4 	.word	0x200023b4

00016d50 <lll_adv_data_reset>:
{
   16d50:	4603      	mov	r3, r0
	pdu->first = 0U;
   16d52:	2000      	movs	r0, #0
   16d54:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   16d56:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   16d58:	6098      	str	r0, [r3, #8]
}
   16d5a:	4770      	bx	lr

00016d5c <lll_adv_pdu_alloc_pdu_adv>:
{
   16d5c:	b538      	push	{r3, r4, r5, lr}
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   16d5e:	4c35      	ldr	r4, [pc, #212]	; (16e34 <lll_adv_pdu_alloc_pdu_adv+0xd8>)
   16d60:	78a2      	ldrb	r2, [r4, #2]
	if (first == last) {
   16d62:	78e1      	ldrb	r1, [r4, #3]
   16d64:	7823      	ldrb	r3, [r4, #0]
   16d66:	4291      	cmp	r1, r2
   16d68:	d003      	beq.n	16d72 <lll_adv_pdu_alloc_pdu_adv+0x16>
	return *((void **)(fifo + first * size));
   16d6a:	fb02 4303 	mla	r3, r2, r3, r4
   16d6e:	685d      	ldr	r5, [r3, #4]
	if (p) {
   16d70:	b935      	cbnz	r5, 16d80 <lll_adv_pdu_alloc_pdu_adv+0x24>
	p = mem_acquire(&mem_pdu.free);
   16d72:	4831      	ldr	r0, [pc, #196]	; (16e38 <lll_adv_pdu_alloc_pdu_adv+0xdc>)
   16d74:	f7f4 fcd4 	bl	b720 <mem_acquire>
	if (p) {
   16d78:	4605      	mov	r5, r0
   16d7a:	b1a0      	cbz	r0, 16da6 <lll_adv_pdu_alloc_pdu_adv+0x4a>
}
   16d7c:	4628      	mov	r0, r5
   16d7e:	bd38      	pop	{r3, r4, r5, pc}
	return z_impl_k_sem_take(sem, timeout);
   16d80:	482e      	ldr	r0, [pc, #184]	; (16e3c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   16d82:	2200      	movs	r2, #0
   16d84:	2300      	movs	r3, #0
   16d86:	f003 fcc5 	bl	1a714 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   16d8a:	bb40      	cbnz	r0, 16dde <lll_adv_pdu_alloc_pdu_adv+0x82>
	uint8_t _first = *first; /* Copy read-index */
   16d8c:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   16d8e:	78e2      	ldrb	r2, [r4, #3]
		MFIFO_DEQUEUE(pdu_free);
   16d90:	7861      	ldrb	r1, [r4, #1]
   16d92:	429a      	cmp	r2, r3
   16d94:	d0f2      	beq.n	16d7c <lll_adv_pdu_alloc_pdu_adv+0x20>
	_first += 1U;
   16d96:	3301      	adds	r3, #1
   16d98:	b2db      	uxtb	r3, r3
		_first = 0U;
   16d9a:	4299      	cmp	r1, r3
   16d9c:	bf08      	it	eq
   16d9e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   16da0:	70a3      	strb	r3, [r4, #2]
}
   16da2:	4628      	mov	r0, r5
   16da4:	bd38      	pop	{r3, r4, r5, pc}
   16da6:	4825      	ldr	r0, [pc, #148]	; (16e3c <lll_adv_pdu_alloc_pdu_adv+0xe0>)
   16da8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   16dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16db0:	f003 fcb0 	bl	1a714 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   16db4:	2800      	cmp	r0, #0
   16db6:	d12e      	bne.n	16e16 <lll_adv_pdu_alloc_pdu_adv+0xba>
	uint8_t _first = *first; /* Copy read-index */
   16db8:	78a3      	ldrb	r3, [r4, #2]
	if (_first == last) {
   16dba:	78e1      	ldrb	r1, [r4, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   16dbc:	7822      	ldrb	r2, [r4, #0]
   16dbe:	7860      	ldrb	r0, [r4, #1]
   16dc0:	4299      	cmp	r1, r3
   16dc2:	d01a      	beq.n	16dfa <lll_adv_pdu_alloc_pdu_adv+0x9e>
	mem = *((void **)(fifo + _first * size));
   16dc4:	fb03 4202 	mla	r2, r3, r2, r4
	_first += 1U;
   16dc8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   16dca:	6852      	ldr	r2, [r2, #4]
	_first += 1U;
   16dcc:	b2db      	uxtb	r3, r3
		_first = 0U;
   16dce:	4298      	cmp	r0, r3
   16dd0:	bf08      	it	eq
   16dd2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   16dd4:	70a3      	strb	r3, [r4, #2]
	LL_ASSERT(p);
   16dd6:	b182      	cbz	r2, 16dfa <lll_adv_pdu_alloc_pdu_adv+0x9e>
   16dd8:	4615      	mov	r5, r2
}
   16dda:	4628      	mov	r0, r5
   16ddc:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT(!err);
   16dde:	4a18      	ldr	r2, [pc, #96]	; (16e40 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   16de0:	4918      	ldr	r1, [pc, #96]	; (16e44 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   16de2:	4819      	ldr	r0, [pc, #100]	; (16e48 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   16de4:	f240 132f 	movw	r3, #303	; 0x12f
   16de8:	f004 fcc4 	bl	1b774 <printk>
   16dec:	4040      	eors	r0, r0
   16dee:	f380 8811 	msr	BASEPRI, r0
   16df2:	f04f 0003 	mov.w	r0, #3
   16df6:	df02      	svc	2
   16df8:	e7c8      	b.n	16d8c <lll_adv_pdu_alloc_pdu_adv+0x30>
	LL_ASSERT(p);
   16dfa:	4a11      	ldr	r2, [pc, #68]	; (16e40 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   16dfc:	4913      	ldr	r1, [pc, #76]	; (16e4c <lll_adv_pdu_alloc_pdu_adv+0xf0>)
   16dfe:	4812      	ldr	r0, [pc, #72]	; (16e48 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   16e00:	f240 1345 	movw	r3, #325	; 0x145
   16e04:	f004 fcb6 	bl	1b774 <printk>
   16e08:	4040      	eors	r0, r0
   16e0a:	f380 8811 	msr	BASEPRI, r0
   16e0e:	f04f 0003 	mov.w	r0, #3
   16e12:	df02      	svc	2
   16e14:	e7b2      	b.n	16d7c <lll_adv_pdu_alloc_pdu_adv+0x20>
	LL_ASSERT(!err);
   16e16:	4a0a      	ldr	r2, [pc, #40]	; (16e40 <lll_adv_pdu_alloc_pdu_adv+0xe4>)
   16e18:	490a      	ldr	r1, [pc, #40]	; (16e44 <lll_adv_pdu_alloc_pdu_adv+0xe8>)
   16e1a:	480b      	ldr	r0, [pc, #44]	; (16e48 <lll_adv_pdu_alloc_pdu_adv+0xec>)
   16e1c:	f44f 73a1 	mov.w	r3, #322	; 0x142
   16e20:	f004 fca8 	bl	1b774 <printk>
   16e24:	4040      	eors	r0, r0
   16e26:	f380 8811 	msr	BASEPRI, r0
   16e2a:	f04f 0003 	mov.w	r0, #3
   16e2e:	df02      	svc	2
   16e30:	e7c2      	b.n	16db8 <lll_adv_pdu_alloc_pdu_adv+0x5c>
   16e32:	bf00      	nop
   16e34:	20000554 	.word	0x20000554
   16e38:	200023b4 	.word	0x200023b4
   16e3c:	20002480 	.word	0x20002480
   16e40:	000223c8 	.word	0x000223c8
   16e44:	00021ab4 	.word	0x00021ab4
   16e48:	0002180c 	.word	0x0002180c
   16e4c:	00022428 	.word	0x00022428

00016e50 <lll_adv_pdu_alloc>:
{
   16e50:	b510      	push	{r4, lr}
	first = pdu->first;
   16e52:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   16e54:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   16e56:	429a      	cmp	r2, r3
   16e58:	d004      	beq.n	16e64 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   16e5a:	b2d4      	uxtb	r4, r2
   16e5c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   16e5e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   16e60:	4294      	cmp	r4, r2
   16e62:	d003      	beq.n	16e6c <lll_adv_pdu_alloc+0x1c>
		last++;
   16e64:	3301      	adds	r3, #1
   16e66:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   16e68:	2b02      	cmp	r3, #2
   16e6a:	d00a      	beq.n	16e82 <lll_adv_pdu_alloc+0x32>
	p = (void *)pdu->pdu[last];
   16e6c:	461c      	mov	r4, r3
	*idx = last;
   16e6e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   16e72:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   16e74:	6860      	ldr	r0, [r4, #4]
	if (p) {
   16e76:	b100      	cbz	r0, 16e7a <lll_adv_pdu_alloc+0x2a>
}
   16e78:	bd10      	pop	{r4, pc}
	p = lll_adv_pdu_alloc_pdu_adv();
   16e7a:	f7ff ff6f 	bl	16d5c <lll_adv_pdu_alloc_pdu_adv>
	pdu->pdu[last] = (void *)p;
   16e7e:	6060      	str	r0, [r4, #4]
}
   16e80:	bd10      	pop	{r4, pc}
{
   16e82:	2400      	movs	r4, #0
			last = 0U;
   16e84:	4623      	mov	r3, r4
   16e86:	e7f2      	b.n	16e6e <lll_adv_pdu_alloc+0x1e>

00016e88 <lll_adv_pdu_latest_get>:
{
   16e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   16e8a:	4604      	mov	r4, r0
	first = pdu->first;
   16e8c:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   16e8e:	7840      	ldrb	r0, [r0, #1]
   16e90:	4298      	cmp	r0, r3
   16e92:	d027      	beq.n	16ee4 <lll_adv_pdu_latest_get+0x5c>
			if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   16e94:	4a16      	ldr	r2, [pc, #88]	; (16ef0 <lll_adv_pdu_latest_get+0x68>)
   16e96:	460e      	mov	r6, r1
   16e98:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
   16e9a:	7857      	ldrb	r7, [r2, #1]
   16e9c:	7890      	ldrb	r0, [r2, #2]
   16e9e:	b2dd      	uxtb	r5, r3
	last = last + 1;
   16ea0:	1c4b      	adds	r3, r1, #1
   16ea2:	b2db      	uxtb	r3, r3
		last = 0U;
   16ea4:	429f      	cmp	r7, r3
   16ea6:	bf08      	it	eq
   16ea8:	2300      	moveq	r3, #0
	if (last == first) {
   16eaa:	4298      	cmp	r0, r3
   16eac:	d01e      	beq.n	16eec <lll_adv_pdu_latest_get+0x64>
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   16eae:	7810      	ldrb	r0, [r2, #0]
   16eb0:	eb04 0785 	add.w	r7, r4, r5, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   16eb4:	fb00 2101 	mla	r1, r0, r1, r2
		p = pdu->pdu[pdu_idx];
   16eb8:	6878      	ldr	r0, [r7, #4]
   16eba:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   16ebc:	70d3      	strb	r3, [r2, #3]
	z_impl_k_sem_give(sem);
   16ebe:	480d      	ldr	r0, [pc, #52]	; (16ef4 <lll_adv_pdu_latest_get+0x6c>)
		first += 1U;
   16ec0:	3501      	adds	r5, #1
   16ec2:	f003 fc01 	bl	1a6c8 <z_impl_k_sem_give>
   16ec6:	b2ed      	uxtb	r5, r5
		if (first == DOUBLE_BUFFER_SIZE) {
   16ec8:	2d02      	cmp	r5, #2
   16eca:	bf08      	it	eq
   16ecc:	2000      	moveq	r0, #0
		*is_modified = 1U;
   16ece:	f04f 0301 	mov.w	r3, #1
			first = 0U;
   16ed2:	bf08      	it	eq
   16ed4:	4605      	moveq	r5, r0
		pdu->first = first;
   16ed6:	7025      	strb	r5, [r4, #0]
		*is_modified = 1U;
   16ed8:	7033      	strb	r3, [r6, #0]
		pdu->pdu[pdu_idx] = NULL;
   16eda:	f04f 0300 	mov.w	r3, #0
	return (void *)pdu->pdu[first];
   16ede:	bf18      	it	ne
   16ee0:	4628      	movne	r0, r5
		pdu->pdu[pdu_idx] = NULL;
   16ee2:	607b      	str	r3, [r7, #4]
	return (void *)pdu->pdu[first];
   16ee4:	eb04 0480 	add.w	r4, r4, r0, lsl #2
   16ee8:	6860      	ldr	r0, [r4, #4]
}
   16eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				return NULL;
   16eec:	2000      	movs	r0, #0
}
   16eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   16ef0:	20000554 	.word	0x20000554
   16ef4:	20002480 	.word	0x20002480

00016ef8 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   16ef8:	7a03      	ldrb	r3, [r0, #8]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   16efa:	b570      	push	{r4, r5, r6, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   16efc:	f3c3 1302 	ubfx	r3, r3, #4, #3
   16f00:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   16f02:	4604      	mov	r4, r0
   16f04:	fa93 f0a3 	rbit	r0, r3
   16f08:	fab0 f080 	clz	r0, r0
   16f0c:	bf08      	it	eq
   16f0e:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   16f12:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   16f14:	b082      	sub	sp, #8
	LL_ASSERT(chan);
   16f16:	d043      	beq.n	16fa0 <chan_prepare.isra.0+0xa8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   16f18:	7a22      	ldrb	r2, [r4, #8]
   16f1a:	1e59      	subs	r1, r3, #1
   16f1c:	400b      	ands	r3, r1
   16f1e:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   16f22:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   16f26:	7222      	strb	r2, [r4, #8]
	lll_chan_set(36 + chan);
   16f28:	f7ff fbce 	bl	166c8 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   16f2c:	2300      	movs	r3, #0
#endif /* CONFIG_BT_CTLR_ADV_EXT_PDU_EXTRA_DATA_MEMORY */

static inline struct pdu_adv *lll_adv_data_latest_get(struct lll_adv *lll,
						      uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   16f2e:	f10d 0107 	add.w	r1, sp, #7
   16f32:	f104 000c 	add.w	r0, r4, #12
   16f36:	f88d 3007 	strb.w	r3, [sp, #7]
   16f3a:	f7ff ffa5 	bl	16e88 <lll_adv_pdu_latest_get>
	pdu = lll_adv_data_latest_get(lll, &upd);
	LL_ASSERT(pdu);
   16f3e:	4605      	mov	r5, r0
   16f40:	2800      	cmp	r0, #0
   16f42:	d03e      	beq.n	16fc2 <chan_prepare.isra.0+0xca>

	radio_pkt_tx_set(pdu);
   16f44:	4628      	mov	r0, r5
   16f46:	f001 f991 	bl	1826c <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   16f4a:	782b      	ldrb	r3, [r5, #0]
   16f4c:	f003 030f 	and.w	r3, r3, #15
   16f50:	2b02      	cmp	r3, #2
   16f52:	d01d      	beq.n	16f90 <chan_prepare.isra.0+0x98>
}

static inline struct pdu_adv *lll_adv_scan_rsp_latest_get(struct lll_adv *lll,
							  uint8_t *is_modified)
{
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   16f54:	f10d 0107 	add.w	r1, sp, #7
   16f58:	f104 0018 	add.w	r0, r4, #24
   16f5c:	f7ff ff94 	bl	16e88 <lll_adv_pdu_latest_get>
	    (!IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) ||
	     (pdu->type != PDU_ADV_TYPE_EXT_IND))) {
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);
		LL_ASSERT(scan_pdu);
   16f60:	4606      	mov	r6, r0
   16f62:	2800      	cmp	r0, #0
   16f64:	d03b      	beq.n	16fde <chan_prepare.isra.0+0xe6>

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   16f66:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16f6a:	b95b      	cbnz	r3, 16f84 <chan_prepare.isra.0+0x8c>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   16f6c:	4621      	mov	r1, r4
   16f6e:	4823      	ldr	r0, [pc, #140]	; (16ffc <chan_prepare.isra.0+0x104>)
   16f70:	f001 f89c 	bl	180ac <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   16f74:	2096      	movs	r0, #150	; 0x96
   16f76:	f001 fb05 	bl	18584 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16f7a:	2000      	movs	r0, #0
   16f7c:	f001 f9e8 	bl	18350 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   16f80:	b002      	add	sp, #8
   16f82:	bd70      	pop	{r4, r5, r6, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   16f84:	2206      	movs	r2, #6
   16f86:	1ca9      	adds	r1, r5, #2
   16f88:	1cb0      	adds	r0, r6, #2
   16f8a:	f006 fd3f 	bl	1da0c <memcpy>
   16f8e:	e7ed      	b.n	16f6c <chan_prepare.isra.0+0x74>
		radio_isr_set(isr_done, lll);
   16f90:	481b      	ldr	r0, [pc, #108]	; (17000 <chan_prepare.isra.0+0x108>)
   16f92:	4621      	mov	r1, r4
   16f94:	f001 f88a 	bl	180ac <radio_isr_set>
		radio_switch_complete_and_disable();
   16f98:	f001 fa82 	bl	184a0 <radio_switch_complete_and_disable>
}
   16f9c:	b002      	add	sp, #8
   16f9e:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(chan);
   16fa0:	4a18      	ldr	r2, [pc, #96]	; (17004 <chan_prepare.isra.0+0x10c>)
   16fa2:	4919      	ldr	r1, [pc, #100]	; (17008 <chan_prepare.isra.0+0x110>)
   16fa4:	4819      	ldr	r0, [pc, #100]	; (1700c <chan_prepare.isra.0+0x114>)
   16fa6:	f44f 6397 	mov.w	r3, #1208	; 0x4b8
   16faa:	f004 fbe3 	bl	1b774 <printk>
   16fae:	4040      	eors	r0, r0
   16fb0:	f380 8811 	msr	BASEPRI, r0
   16fb4:	f04f 0003 	mov.w	r0, #3
   16fb8:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   16fba:	7a23      	ldrb	r3, [r4, #8]
   16fbc:	f3c3 1302 	ubfx	r3, r3, #4, #3
   16fc0:	e7aa      	b.n	16f18 <chan_prepare.isra.0+0x20>
	LL_ASSERT(pdu);
   16fc2:	4a10      	ldr	r2, [pc, #64]	; (17004 <chan_prepare.isra.0+0x10c>)
   16fc4:	4912      	ldr	r1, [pc, #72]	; (17010 <chan_prepare.isra.0+0x118>)
   16fc6:	4811      	ldr	r0, [pc, #68]	; (1700c <chan_prepare.isra.0+0x114>)
   16fc8:	f240 43c1 	movw	r3, #1217	; 0x4c1
   16fcc:	f004 fbd2 	bl	1b774 <printk>
   16fd0:	4040      	eors	r0, r0
   16fd2:	f380 8811 	msr	BASEPRI, r0
   16fd6:	f04f 0003 	mov.w	r0, #3
   16fda:	df02      	svc	2
   16fdc:	e7b2      	b.n	16f44 <chan_prepare.isra.0+0x4c>
		LL_ASSERT(scan_pdu);
   16fde:	4a09      	ldr	r2, [pc, #36]	; (17004 <chan_prepare.isra.0+0x10c>)
   16fe0:	490c      	ldr	r1, [pc, #48]	; (17014 <chan_prepare.isra.0+0x11c>)
   16fe2:	480a      	ldr	r0, [pc, #40]	; (1700c <chan_prepare.isra.0+0x114>)
   16fe4:	f240 43cb 	movw	r3, #1227	; 0x4cb
   16fe8:	f004 fbc4 	bl	1b774 <printk>
   16fec:	4040      	eors	r0, r0
   16fee:	f380 8811 	msr	BASEPRI, r0
   16ff2:	f04f 0003 	mov.w	r0, #3
   16ff6:	df02      	svc	2
   16ff8:	e7b5      	b.n	16f66 <chan_prepare.isra.0+0x6e>
   16ffa:	bf00      	nop
   16ffc:	00016b51 	.word	0x00016b51
   17000:	00017019 	.word	0x00017019
   17004:	000223c8 	.word	0x000223c8
   17008:	00022054 	.word	0x00022054
   1700c:	0002180c 	.word	0x0002180c
   17010:	0002242c 	.word	0x0002242c
   17014:	00022430 	.word	0x00022430

00017018 <isr_done>:
{
   17018:	b510      	push	{r4, lr}
   1701a:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1701c:	f7ff fbaa 	bl	16774 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   17020:	7a23      	ldrb	r3, [r4, #8]
   17022:	f003 0271 	and.w	r2, r3, #113	; 0x71
   17026:	2a01      	cmp	r2, #1
   17028:	d105      	bne.n	17036 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1702a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1702e:	f362 1306 	bfi	r3, r2, #4, #3
   17032:	7223      	strb	r3, [r4, #8]
	if (lll->chan_map_curr &&
   17034:	b2db      	uxtb	r3, r3
   17036:	f013 0f70 	tst.w	r3, #112	; 0x70
   1703a:	d005      	beq.n	17048 <isr_done+0x30>
	    (!lll->conn || !lll->conn->slave.cancelled) &&
   1703c:	6863      	ldr	r3, [r4, #4]
   1703e:	b153      	cbz	r3, 17056 <isr_done+0x3e>
   17040:	f893 3020 	ldrb.w	r3, [r3, #32]
   17044:	079b      	lsls	r3, r3, #30
   17046:	d506      	bpl.n	17056 <isr_done+0x3e>
	radio_filter_disable();
   17048:	f001 fa6a 	bl	18520 <radio_filter_disable>
	lll_isr_cleanup(param);
   1704c:	4620      	mov	r0, r4
}
   1704e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   17052:	f7ff bb9d 	b.w	16790 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   17056:	4620      	mov	r0, r4
   17058:	f7ff ff4e 	bl	16ef8 <chan_prepare.isra.0>
		radio_tx_enable();
   1705c:	f001 f916 	bl	1828c <radio_tx_enable>
}
   17060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   17064:	f001 bb68 	b.w	18738 <radio_tmr_end_capture>

00017068 <prepare_cb>:
{
   17068:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1706a:	68c4      	ldr	r4, [r0, #12]
	if (unlikely(lll->conn &&
   1706c:	6863      	ldr	r3, [r4, #4]
{
   1706e:	b083      	sub	sp, #12
   17070:	4605      	mov	r5, r0
	if (unlikely(lll->conn &&
   17072:	2b00      	cmp	r3, #0
   17074:	d16d      	bne.n	17152 <prepare_cb+0xea>
	radio_reset();
   17076:	f001 f85b 	bl	18130 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1707a:	2000      	movs	r0, #0
   1707c:	f001 f88c 	bl	18198 <radio_tx_power_set>
	radio_phy_set(0, 0);
   17080:	2100      	movs	r1, #0
   17082:	4608      	mov	r0, r1
   17084:	f001 f878 	bl	18178 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   17088:	2200      	movs	r2, #0
   1708a:	2125      	movs	r1, #37	; 0x25
   1708c:	2008      	movs	r0, #8
   1708e:	f001 f8b9 	bl	18204 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   17092:	4b35      	ldr	r3, [pc, #212]	; (17168 <prepare_cb+0x100>)
   17094:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   17096:	a801      	add	r0, sp, #4
   17098:	f001 f89c 	bl	181d4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1709c:	4933      	ldr	r1, [pc, #204]	; (1716c <prepare_cb+0x104>)
   1709e:	f240 605b 	movw	r0, #1627	; 0x65b
   170a2:	f001 f937 	bl	18314 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   170a6:	7a23      	ldrb	r3, [r4, #8]
   170a8:	f3c3 0242 	ubfx	r2, r3, #1, #3
   170ac:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   170b0:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   170b2:	7223      	strb	r3, [r4, #8]
	pdu = chan_prepare(lll);
   170b4:	f7ff ff20 	bl	16ef8 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   170b8:	f7ff f884 	bl	161c4 <ull_filter_lll_rl_enabled>
   170bc:	bb98      	cbnz	r0, 17126 <prepare_cb+0xbe>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   170be:	7a63      	ldrb	r3, [r4, #9]
   170c0:	079b      	lsls	r3, r3, #30
   170c2:	d127      	bne.n	17114 <prepare_cb+0xac>
	ull = HDR_LLL2ULL(lll);
   170c4:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   170c6:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   170c8:	4638      	mov	r0, r7
   170ca:	f7ff fae3 	bl	16694 <lll_event_offset_get>
   170ce:	4406      	add	r6, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   170d0:	686a      	ldr	r2, [r5, #4]
   170d2:	f106 0109 	add.w	r1, r6, #9
   170d6:	2001      	movs	r0, #1
   170d8:	f001 fa60 	bl	1859c <radio_tmr_start>
	radio_tmr_end_capture();
   170dc:	f001 fb2c 	bl	18738 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   170e0:	4620      	mov	r0, r4
   170e2:	f7f8 ffe3 	bl	100ac <ull_adv_lll_handle_get>
	if (lll_preempt_calc(ull, (TICKER_ID_ADV_BASE +
   170e6:	1c81      	adds	r1, r0, #2
   170e8:	4632      	mov	r2, r6
   170ea:	b2c9      	uxtb	r1, r1
   170ec:	4638      	mov	r0, r7
   170ee:	f7ff fadb 	bl	166a8 <lll_preempt_calc>
   170f2:	b930      	cbnz	r0, 17102 <prepare_cb+0x9a>
		ret = lll_prepare_done(lll);
   170f4:	4620      	mov	r0, r4
   170f6:	f7ff fa75 	bl	165e4 <lll_prepare_done>
		LL_ASSERT(!ret);
   170fa:	b9d0      	cbnz	r0, 17132 <prepare_cb+0xca>
}
   170fc:	2000      	movs	r0, #0
   170fe:	b003      	add	sp, #12
   17100:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   17102:	481b      	ldr	r0, [pc, #108]	; (17170 <prepare_cb+0x108>)
   17104:	4621      	mov	r1, r4
   17106:	f000 ffd1 	bl	180ac <radio_isr_set>
		radio_disable();
   1710a:	f001 f8c5 	bl	18298 <radio_disable>
}
   1710e:	2000      	movs	r0, #0
   17110:	b003      	add	sp, #12
   17112:	bdf0      	pop	{r4, r5, r6, r7, pc}
		struct lll_filter *wl = ull_filter_lll_get(true);
   17114:	2001      	movs	r0, #1
   17116:	f7ff f80f 	bl	16138 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1711a:	7841      	ldrb	r1, [r0, #1]
   1711c:	1c82      	adds	r2, r0, #2
   1711e:	7800      	ldrb	r0, [r0, #0]
   17120:	f001 f9de 	bl	184e0 <radio_filter_configure>
   17124:	e7ce      	b.n	170c4 <prepare_cb+0x5c>
			ull_filter_lll_get(!!(lll->filter_policy));
   17126:	7a60      	ldrb	r0, [r4, #9]
   17128:	f010 0003 	ands.w	r0, r0, #3
   1712c:	bf18      	it	ne
   1712e:	2001      	movne	r0, #1
   17130:	e7f1      	b.n	17116 <prepare_cb+0xae>
		LL_ASSERT(!ret);
   17132:	4a10      	ldr	r2, [pc, #64]	; (17174 <prepare_cb+0x10c>)
   17134:	4910      	ldr	r1, [pc, #64]	; (17178 <prepare_cb+0x110>)
   17136:	4811      	ldr	r0, [pc, #68]	; (1717c <prepare_cb+0x114>)
   17138:	f44f 7358 	mov.w	r3, #864	; 0x360
   1713c:	f004 fb1a 	bl	1b774 <printk>
   17140:	4040      	eors	r0, r0
   17142:	f380 8811 	msr	BASEPRI, r0
   17146:	f04f 0003 	mov.w	r0, #3
   1714a:	df02      	svc	2
}
   1714c:	2000      	movs	r0, #0
   1714e:	b003      	add	sp, #12
   17150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (unlikely(lll->conn &&
   17152:	f893 3020 	ldrb.w	r3, [r3, #32]
   17156:	079a      	lsls	r2, r3, #30
   17158:	d08d      	beq.n	17076 <prepare_cb+0xe>
		radio_isr_set(lll_isr_early_abort, lll);
   1715a:	4809      	ldr	r0, [pc, #36]	; (17180 <prepare_cb+0x118>)
   1715c:	4621      	mov	r1, r4
   1715e:	f000 ffa5 	bl	180ac <radio_isr_set>
		radio_disable();
   17162:	f001 f899 	bl	18298 <radio_disable>
		return 0;
   17166:	e7c9      	b.n	170fc <prepare_cb+0x94>
   17168:	8e89bed6 	.word	0x8e89bed6
   1716c:	00555555 	.word	0x00555555
   17170:	00016b39 	.word	0x00016b39
   17174:	000223c8 	.word	0x000223c8
   17178:	00021bb8 	.word	0x00021bb8
   1717c:	0002180c 	.word	0x0002180c
   17180:	00016821 	.word	0x00016821

00017184 <resume_prepare_cb>:
	ull = HDR_LLL2ULL(p->param);
   17184:	68c3      	ldr	r3, [r0, #12]
{
   17186:	b570      	push	{r4, r5, r6, lr}
	ull = HDR_LLL2ULL(p->param);
   17188:	681e      	ldr	r6, [r3, #0]
{
   1718a:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1718c:	f7f5 fda6 	bl	ccdc <ticker_ticks_now_get>
   17190:	4605      	mov	r5, r0
   17192:	4630      	mov	r0, r6
   17194:	f7ff fa7e 	bl	16694 <lll_event_offset_get>
	p->remainder = 0;
   17198:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_event_offset_get(ull);
   1719a:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1719c:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   171a0:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   171a2:	4620      	mov	r0, r4
}
   171a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   171a8:	f7ff bf5e 	b.w	17068 <prepare_cb>

000171ac <lll_adv_prepare>:
{
   171ac:	b510      	push	{r4, lr}
   171ae:	b082      	sub	sp, #8
   171b0:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   171b2:	f7ff fc83 	bl	16abc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   171b6:	2800      	cmp	r0, #0
   171b8:	db1a      	blt.n	171f0 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   171ba:	4a14      	ldr	r2, [pc, #80]	; (1720c <lll_adv_prepare+0x60>)
   171bc:	4914      	ldr	r1, [pc, #80]	; (17210 <lll_adv_prepare+0x64>)
   171be:	4815      	ldr	r0, [pc, #84]	; (17214 <lll_adv_prepare+0x68>)
   171c0:	9400      	str	r4, [sp, #0]
   171c2:	2300      	movs	r3, #0
   171c4:	f7f8 fb18 	bl	f7f8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   171c8:	b108      	cbz	r0, 171ce <lll_adv_prepare+0x22>
   171ca:	3077      	adds	r0, #119	; 0x77
   171cc:	d101      	bne.n	171d2 <lll_adv_prepare+0x26>
}
   171ce:	b002      	add	sp, #8
   171d0:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   171d2:	4a11      	ldr	r2, [pc, #68]	; (17218 <lll_adv_prepare+0x6c>)
   171d4:	4911      	ldr	r1, [pc, #68]	; (1721c <lll_adv_prepare+0x70>)
   171d6:	4812      	ldr	r0, [pc, #72]	; (17220 <lll_adv_prepare+0x74>)
   171d8:	f240 2325 	movw	r3, #549	; 0x225
   171dc:	f004 faca 	bl	1b774 <printk>
   171e0:	4040      	eors	r0, r0
   171e2:	f380 8811 	msr	BASEPRI, r0
   171e6:	f04f 0003 	mov.w	r0, #3
   171ea:	df02      	svc	2
}
   171ec:	b002      	add	sp, #8
   171ee:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   171f0:	4a09      	ldr	r2, [pc, #36]	; (17218 <lll_adv_prepare+0x6c>)
   171f2:	490c      	ldr	r1, [pc, #48]	; (17224 <lll_adv_prepare+0x78>)
   171f4:	480a      	ldr	r0, [pc, #40]	; (17220 <lll_adv_prepare+0x74>)
   171f6:	f240 2322 	movw	r3, #546	; 0x222
   171fa:	f004 fabb 	bl	1b774 <printk>
   171fe:	4040      	eors	r0, r0
   17200:	f380 8811 	msr	BASEPRI, r0
   17204:	f04f 0003 	mov.w	r0, #3
   17208:	df02      	svc	2
   1720a:	e7d6      	b.n	171ba <lll_adv_prepare+0xe>
   1720c:	00017069 	.word	0x00017069
   17210:	00016c75 	.word	0x00016c75
   17214:	00016c05 	.word	0x00016c05
   17218:	000223c8 	.word	0x000223c8
   1721c:	0002243c 	.word	0x0002243c
   17220:	0002180c 	.word	0x0002180c
   17224:	00022358 	.word	0x00022358

00017228 <lll_adv_scan_req_check>:
{
   17228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1722c:	f890 c009 	ldrb.w	ip, [r0, #9]
{
   17230:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   17234:	f01c 0f01 	tst.w	ip, #1
{
   17238:	460f      	mov	r7, r1
   1723a:	4616      	mov	r6, r2
   1723c:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1723e:	d009      	beq.n	17254 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   17240:	f1b8 0f00 	cmp.w	r8, #0
   17244:	d016      	beq.n	17274 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   17246:	783b      	ldrb	r3, [r7, #0]
   17248:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1724c:	d019      	beq.n	17282 <lll_adv_scan_req_check+0x5a>
{
   1724e:	2000      	movs	r0, #0
}
   17250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   17254:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   17256:	f811 0b02 	ldrb.w	r0, [r1], #2
   1725a:	9a07      	ldr	r2, [sp, #28]
   1725c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17260:	f7fe ff76 	bl	16150 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   17264:	2800      	cmp	r0, #0
   17266:	d1ee      	bne.n	17246 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   17268:	7a63      	ldrb	r3, [r4, #9]
						rl_idx)) ||
   1726a:	07db      	lsls	r3, r3, #31
   1726c:	d5ef      	bpl.n	1724e <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   1726e:	f1b8 0f00 	cmp.w	r8, #0
   17272:	d1e8      	bne.n	17246 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   17274:	9b07      	ldr	r3, [sp, #28]
   17276:	7818      	ldrb	r0, [r3, #0]
   17278:	f7fe ff2e 	bl	160d8 <ull_filter_lll_irk_whitelisted>
   1727c:	2800      	cmp	r0, #0
   1727e:	d1e2      	bne.n	17246 <lll_adv_scan_req_check+0x1e>
   17280:	e7e5      	b.n	1724e <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   17282:	2206      	movs	r2, #6
   17284:	f107 0108 	add.w	r1, r7, #8
   17288:	4628      	mov	r0, r5
   1728a:	f006 fbae 	bl	1d9ea <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1728e:	fab0 f080 	clz	r0, r0
   17292:	0940      	lsrs	r0, r0, #5
}
   17294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017298 <lll_adv_connect_ind_check>:
{
   17298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1729c:	461f      	mov	r7, r3
	if (tgt_addr) {
   1729e:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   172a0:	f89d 9020 	ldrb.w	r9, [sp, #32]
   172a4:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   172a8:	4605      	mov	r5, r0
   172aa:	460c      	mov	r4, r1
   172ac:	4690      	mov	r8, r2
	if (tgt_addr) {
   172ae:	b9fb      	cbnz	r3, 172f0 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   172b0:	7a43      	ldrb	r3, [r0, #9]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   172b2:	079a      	lsls	r2, r3, #30
   172b4:	d507      	bpl.n	172c6 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   172b6:	b1a6      	cbz	r6, 172e2 <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   172b8:	7823      	ldrb	r3, [r4, #0]
   172ba:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   172be:	d03a      	beq.n	17336 <lll_adv_connect_ind_check+0x9e>
   172c0:	2000      	movs	r0, #0
}
   172c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   172c6:	f811 0b02 	ldrb.w	r0, [r1], #2
   172ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   172cc:	f3c0 1080 	ubfx	r0, r0, #6, #1
   172d0:	f7fe ff3e 	bl	16150 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   172d4:	2800      	cmp	r0, #0
   172d6:	d1ef      	bne.n	172b8 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   172d8:	7a6b      	ldrb	r3, [r5, #9]
						rl_idx)) ||
   172da:	079b      	lsls	r3, r3, #30
   172dc:	d5f0      	bpl.n	172c0 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   172de:	2e00      	cmp	r6, #0
   172e0:	d1ea      	bne.n	172b8 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   172e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   172e4:	7818      	ldrb	r0, [r3, #0]
   172e6:	f7fe fef7 	bl	160d8 <ull_filter_lll_irk_whitelisted>
   172ea:	2800      	cmp	r0, #0
   172ec:	d1e4      	bne.n	172b8 <lll_adv_connect_ind_check+0x20>
   172ee:	e7e7      	b.n	172c0 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   172f0:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   172f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   172f4:	f81a 0b02 	ldrb.w	r0, [sl], #2
   172f8:	f3c0 1080 	ubfx	r0, r0, #6, #1
   172fc:	4651      	mov	r1, sl
   172fe:	f7fe ff27 	bl	16150 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   17302:	2800      	cmp	r0, #0
   17304:	d0dc      	beq.n	172c0 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   17306:	7823      	ldrb	r3, [r4, #0]
   17308:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1730c:	d1d8      	bne.n	172c0 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1730e:	4638      	mov	r0, r7
   17310:	2206      	movs	r2, #6
   17312:	f104 0108 	add.w	r1, r4, #8
   17316:	f006 fb68 	bl	1d9ea <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1731a:	2800      	cmp	r0, #0
   1731c:	d1d0      	bne.n	172c0 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1731e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17320:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   17322:	28ff      	cmp	r0, #255	; 0xff
   17324:	d011      	beq.n	1734a <lll_adv_connect_ind_check+0xb2>
   17326:	7aab      	ldrb	r3, [r5, #10]
   17328:	2bff      	cmp	r3, #255	; 0xff
   1732a:	d00e      	beq.n	1734a <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1732c:	1ac0      	subs	r0, r0, r3
   1732e:	fab0 f080 	clz	r0, r0
   17332:	0940      	lsrs	r0, r0, #5
   17334:	e7c5      	b.n	172c2 <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   17336:	2206      	movs	r2, #6
   17338:	f104 0108 	add.w	r1, r4, #8
   1733c:	4638      	mov	r0, r7
   1733e:	f006 fb54 	bl	1d9ea <memcmp>
	return (tx_addr == ci->rx_addr) &&
   17342:	fab0 f080 	clz	r0, r0
   17346:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   17348:	e7bb      	b.n	172c2 <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1734a:	7823      	ldrb	r3, [r4, #0]
   1734c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17350:	454b      	cmp	r3, r9
   17352:	d1b5      	bne.n	172c0 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   17354:	9809      	ldr	r0, [sp, #36]	; 0x24
   17356:	2206      	movs	r2, #6
   17358:	4651      	mov	r1, sl
   1735a:	f006 fb46 	bl	1d9ea <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1735e:	fab0 f080 	clz	r0, r0
   17362:	0940      	lsrs	r0, r0, #5
   17364:	e7ad      	b.n	172c2 <lll_adv_connect_ind_check+0x2a>
   17366:	bf00      	nop

00017368 <isr_rx>:
{
   17368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1736c:	b089      	sub	sp, #36	; 0x24
   1736e:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   17370:	f000 ffbc 	bl	182ec <radio_is_done>
	if (trx_done) {
   17374:	b2c0      	uxtb	r0, r0
   17376:	b950      	cbnz	r0, 1738e <isr_rx+0x26>
	lll_isr_status_reset();
   17378:	f7ff f9fc 	bl	16774 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1737c:	4874      	ldr	r0, [pc, #464]	; (17550 <isr_rx+0x1e8>)
   1737e:	4621      	mov	r1, r4
   17380:	f000 fe94 	bl	180ac <radio_isr_set>
}
   17384:	b009      	add	sp, #36	; 0x24
   17386:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1738a:	f000 bf85 	b.w	18298 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1738e:	f000 ffcd 	bl	1832c <radio_crc_is_valid>
   17392:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   17394:	f001 f8d6 	bl	18544 <radio_filter_has_match>
   17398:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1739a:	f001 f8dd 	bl	18558 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1739e:	f001 fac1 	bl	18924 <radio_ar_has_match>
   173a2:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   173a4:	f001 faa2 	bl	188ec <radio_ar_match_get>
	if (crc_ok) {
   173a8:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   173aa:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   173ac:	f001 f88e 	bl	184cc <radio_rssi_is_ready>
	lll_isr_status_reset();
   173b0:	f7ff f9e0 	bl	16774 <lll_isr_status_reset>
	if (crc_ok) {
   173b4:	2d00      	cmp	r5, #0
   173b6:	d0e1      	beq.n	1737c <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   173b8:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   173bc:	d17a      	bne.n	174b4 <isr_rx+0x14c>
   173be:	20ff      	movs	r0, #255	; 0xff
   173c0:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   173c4:	f000 ffc0 	bl	18348 <radio_pkt_scratch_get>
   173c8:	7b23      	ldrb	r3, [r4, #12]
   173ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   173ce:	4680      	mov	r8, r0
   173d0:	6919      	ldr	r1, [r3, #16]
	addr = pdu_adv->adv_ind.addr;
   173d2:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   173d4:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   173d6:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   173da:	f005 000f 	and.w	r0, r5, #15
   173de:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   173e0:	bf08      	it	eq
   173e2:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   173e6:	f898 1000 	ldrb.w	r1, [r8]
   173ea:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   173ee:	bf18      	it	ne
   173f0:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   173f4:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   173f6:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   173fa:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   173fe:	d060      	beq.n	174c2 <isr_rx+0x15a>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   17400:	2905      	cmp	r1, #5
   17402:	d1bb      	bne.n	1737c <isr_rx+0x14>
   17404:	f898 1001 	ldrb.w	r1, [r8, #1]
   17408:	2922      	cmp	r1, #34	; 0x22
   1740a:	d1b7      	bne.n	1737c <isr_rx+0x14>
		   lll->conn && !lll->conn->slave.cancelled &&
   1740c:	6861      	ldr	r1, [r4, #4]
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1740e:	2900      	cmp	r1, #0
   17410:	d0b4      	beq.n	1737c <isr_rx+0x14>
		   lll->conn && !lll->conn->slave.cancelled &&
   17412:	f891 1020 	ldrb.w	r1, [r1, #32]
   17416:	0789      	lsls	r1, r1, #30
   17418:	d4b0      	bmi.n	1737c <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1741a:	f10d 011f 	add.w	r1, sp, #31
   1741e:	9103      	str	r1, [sp, #12]
   17420:	e9cd 9701 	strd	r9, r7, [sp, #4]
   17424:	9500      	str	r5, [sp, #0]
   17426:	4641      	mov	r1, r8
   17428:	4620      	mov	r0, r4
   1742a:	f7ff ff35 	bl	17298 <lll_adv_connect_ind_check>
		   lll->conn && !lll->conn->slave.cancelled &&
   1742e:	2800      	cmp	r0, #0
   17430:	d0a4      	beq.n	1737c <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   17432:	2004      	movs	r0, #4
   17434:	f7f8 f89a 	bl	f56c <ull_pdu_rx_alloc_peek>
		if (!rx) {
   17438:	2800      	cmp	r0, #0
   1743a:	d09f      	beq.n	1737c <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1743c:	4845      	ldr	r0, [pc, #276]	; (17554 <isr_rx+0x1ec>)
   1743e:	4621      	mov	r1, r4
   17440:	f000 fe34 	bl	180ac <radio_isr_set>
		radio_disable();
   17444:	f000 ff28 	bl	18298 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   17448:	f000 ff46 	bl	182d8 <radio_is_ready>
   1744c:	2800      	cmp	r0, #0
   1744e:	d153      	bne.n	174f8 <isr_rx+0x190>
		lll->conn->slave.initiated = 1;
   17450:	6862      	ldr	r2, [r4, #4]
   17452:	f892 3020 	ldrb.w	r3, [r2, #32]
   17456:	f043 0301 	orr.w	r3, r3, #1
   1745a:	f882 3020 	strb.w	r3, [r2, #32]
		rx = ull_pdu_rx_alloc();
   1745e:	f7f8 f8a3 	bl	f5a8 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17462:	2314      	movs	r3, #20
		rx = ull_pdu_rx_alloc();
   17464:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17466:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   17468:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1746c:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1746e:	4641      	mov	r1, r8
   17470:	2224      	movs	r2, #36	; 0x24
   17472:	301c      	adds	r0, #28
   17474:	f006 faca 	bl	1da0c <memcpy>
		ftr->param = lll;
   17478:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1747a:	f001 f911 	bl	186a0 <radio_tmr_start_get>
   1747e:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   17480:	f001 f962 	bl	18748 <radio_tmr_end_get>
				    radio_rx_chain_delay_get(0, 0);
   17484:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   17486:	4604      	mov	r4, r0
				    radio_rx_chain_delay_get(0, 0);
   17488:	4608      	mov	r0, r1
   1748a:	f000 fef9 	bl	18280 <radio_rx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1748e:	1a24      	subs	r4, r4, r0
   17490:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   17492:	b1a6      	cbz	r6, 174be <isr_rx+0x156>
   17494:	f89d 301f 	ldrb.w	r3, [sp, #31]
   17498:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1749a:	f7f8 f885 	bl	f5a8 <ull_pdu_rx_alloc>
   1749e:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   174a0:	4629      	mov	r1, r5
   174a2:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   174a4:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   174a6:	f7f8 f895 	bl	f5d4 <ull_rx_put>
		ull_rx_sched();
   174aa:	f7f8 f8a3 	bl	f5f4 <ull_rx_sched>
}
   174ae:	b009      	add	sp, #36	; 0x24
   174b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   174b4:	fa5f f088 	uxtb.w	r0, r8
   174b8:	f7fe fdbc 	bl	16034 <ull_filter_lll_rl_irk_idx>
   174bc:	e780      	b.n	173c0 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   174be:	23ff      	movs	r3, #255	; 0xff
   174c0:	e7ea      	b.n	17498 <isr_rx+0x130>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   174c2:	f898 1001 	ldrb.w	r1, [r8, #1]
   174c6:	290c      	cmp	r1, #12
   174c8:	f47f af58 	bne.w	1737c <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   174cc:	f1b9 0f00 	cmp.w	r9, #0
   174d0:	f47f af54 	bne.w	1737c <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   174d4:	f10d 011f 	add.w	r1, sp, #31
   174d8:	9101      	str	r1, [sp, #4]
   174da:	9700      	str	r7, [sp, #0]
   174dc:	4641      	mov	r1, r8
   174de:	4620      	mov	r0, r4
   174e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   174e4:	f7ff fea0 	bl	17228 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   174e8:	b9a0      	cbnz	r0, 17514 <isr_rx+0x1ac>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   174ea:	f898 1000 	ldrb.w	r1, [r8]
   174ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   174f2:	f001 010f 	and.w	r1, r1, #15
   174f6:	e783      	b.n	17400 <isr_rx+0x98>
		LL_ASSERT(!radio_is_ready());
   174f8:	4a17      	ldr	r2, [pc, #92]	; (17558 <isr_rx+0x1f0>)
   174fa:	4918      	ldr	r1, [pc, #96]	; (1755c <isr_rx+0x1f4>)
   174fc:	4818      	ldr	r0, [pc, #96]	; (17560 <isr_rx+0x1f8>)
   174fe:	f240 5357 	movw	r3, #1367	; 0x557
   17502:	f004 f937 	bl	1b774 <printk>
   17506:	4040      	eors	r0, r0
   17508:	f380 8811 	msr	BASEPRI, r0
   1750c:	f04f 0003 	mov.w	r0, #3
   17510:	df02      	svc	2
   17512:	e79d      	b.n	17450 <isr_rx+0xe8>
		radio_isr_set(isr_done, lll);
   17514:	4621      	mov	r1, r4
   17516:	480e      	ldr	r0, [pc, #56]	; (17550 <isr_rx+0x1e8>)
   17518:	f000 fdc8 	bl	180ac <radio_isr_set>
		radio_switch_complete_and_disable();
   1751c:	f000 ffc0 	bl	184a0 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   17520:	7e23      	ldrb	r3, [r4, #24]
   17522:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   17526:	69e0      	ldr	r0, [r4, #28]
   17528:	f000 fea0 	bl	1826c <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1752c:	f000 fed4 	bl	182d8 <radio_is_ready>
   17530:	2800      	cmp	r0, #0
   17532:	d0bc      	beq.n	174ae <isr_rx+0x146>
   17534:	4a08      	ldr	r2, [pc, #32]	; (17558 <isr_rx+0x1f0>)
   17536:	4909      	ldr	r1, [pc, #36]	; (1755c <isr_rx+0x1f4>)
   17538:	4809      	ldr	r0, [pc, #36]	; (17560 <isr_rx+0x1f8>)
   1753a:	f44f 63a2 	mov.w	r3, #1296	; 0x510
   1753e:	f004 f919 	bl	1b774 <printk>
   17542:	4040      	eors	r0, r0
   17544:	f380 8811 	msr	BASEPRI, r0
   17548:	f04f 0003 	mov.w	r0, #3
   1754c:	df02      	svc	2
		if (!err) {
   1754e:	e7ae      	b.n	174ae <isr_rx+0x146>
   17550:	00017019 	.word	0x00017019
   17554:	00016b39 	.word	0x00016b39
   17558:	000223c8 	.word	0x000223c8
   1755c:	00022414 	.word	0x00022414
   17560:	0002180c 	.word	0x0002180c

00017564 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   17564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17566:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   17568:	f7ff f904 	bl	16774 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1756c:	f7f8 f906 	bl	f77c <ull_event_done_extra_get>
	LL_ASSERT(e);
   17570:	4604      	mov	r4, r0
   17572:	2800      	cmp	r0, #0
   17574:	d033      	beq.n	175de <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   17576:	4b21      	ldr	r3, [pc, #132]	; (175fc <isr_done+0x98>)
	e->crc_valid = crc_valid;
   17578:	4921      	ldr	r1, [pc, #132]	; (17600 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1757a:	4a22      	ldr	r2, [pc, #136]	; (17604 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1757c:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1757e:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   17580:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   17582:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   17584:	2001      	movs	r0, #1
   17586:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   17588:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1758a:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1758c:	b11b      	cbz	r3, 17596 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1758e:	f995 301d 	ldrsb.w	r3, [r5, #29]
   17592:	2b00      	cmp	r3, #0
   17594:	db04      	blt.n	175a0 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   17596:	4628      	mov	r0, r5
}
   17598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1759c:	f7ff b8f8 	b.w	16790 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   175a0:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
   175a4:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   175a8:	2b02      	cmp	r3, #2
   175aa:	d016      	beq.n	175da <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   175ac:	2b04      	cmp	r3, #4
   175ae:	bf14      	ite	ne
   175b0:	2728      	movne	r7, #40	; 0x28
   175b2:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   175b6:	f001 f8b3 	bl	18720 <radio_tmr_aa_restore>
   175ba:	4606      	mov	r6, r0
   175bc:	f001 f8b6 	bl	1872c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   175c0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   175c2:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   175c4:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   175c6:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   175ca:	2300      	movs	r3, #0
   175cc:	632b      	str	r3, [r5, #48]	; 0x30
			lll->slave.window_size_event_us = 0;
   175ce:	63ab      	str	r3, [r5, #56]	; 0x38
	lll_isr_cleanup(param);
   175d0:	4628      	mov	r0, r5
}
   175d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   175d6:	f7ff b8db 	b.w	16790 <lll_isr_cleanup>
	switch (phy) {
   175da:	2718      	movs	r7, #24
   175dc:	e7eb      	b.n	175b6 <isr_done+0x52>
	LL_ASSERT(e);
   175de:	4a0a      	ldr	r2, [pc, #40]	; (17608 <isr_done+0xa4>)
   175e0:	490a      	ldr	r1, [pc, #40]	; (1760c <isr_done+0xa8>)
   175e2:	480b      	ldr	r0, [pc, #44]	; (17610 <isr_done+0xac>)
   175e4:	f240 2379 	movw	r3, #633	; 0x279
   175e8:	f004 f8c4 	bl	1b774 <printk>
   175ec:	4040      	eors	r0, r0
   175ee:	f380 8811 	msr	BASEPRI, r0
   175f2:	f04f 0003 	mov.w	r0, #3
   175f6:	df02      	svc	2
   175f8:	e7bd      	b.n	17576 <isr_done+0x12>
   175fa:	bf00      	nop
   175fc:	2000290a 	.word	0x2000290a
   17600:	20002a82 	.word	0x20002a82
   17604:	20002a83 	.word	0x20002a83
   17608:	00022460 	.word	0x00022460
   1760c:	00021cd0 	.word	0x00021cd0
   17610:	0002180c 	.word	0x0002180c

00017614 <lll_conn_init>:
{
   17614:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   17616:	f000 fe93 	bl	18340 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1761a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1761c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1761e:	2101      	movs	r1, #1
   17620:	f361 0201 	bfi	r2, r1, #0, #2
}
   17624:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   17626:	701a      	strb	r2, [r3, #0]
}
   17628:	bd08      	pop	{r3, pc}
   1762a:	bf00      	nop

0001762c <lll_conn_reset>:
}
   1762c:	2000      	movs	r0, #0
   1762e:	4770      	bx	lr

00017630 <lll_conn_flush>:
}
   17630:	4770      	bx	lr
   17632:	bf00      	nop

00017634 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   17634:	4805      	ldr	r0, [pc, #20]	; (1764c <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   17636:	4906      	ldr	r1, [pc, #24]	; (17650 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   17638:	4a06      	ldr	r2, [pc, #24]	; (17654 <lll_conn_prepare_reset+0x20>)
{
   1763a:	b410      	push	{r4}
	trx_cnt = 0U;
   1763c:	2300      	movs	r3, #0
   1763e:	4c06      	ldr	r4, [pc, #24]	; (17658 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   17640:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   17642:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   17644:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   17646:	8023      	strh	r3, [r4, #0]
}
   17648:	bc10      	pop	{r4}
   1764a:	4770      	bx	lr
   1764c:	20002a82 	.word	0x20002a82
   17650:	20002a81 	.word	0x20002a81
   17654:	20002a83 	.word	0x20002a83
   17658:	2000290a 	.word	0x2000290a

0001765c <lll_conn_abort_cb>:
{
   1765c:	b538      	push	{r3, r4, r5, lr}
	if (!prepare_param) {
   1765e:	b1e8      	cbz	r0, 1769c <lll_conn_abort_cb+0x40>
	err = lll_hfclock_off();
   17660:	460d      	mov	r5, r1
   17662:	4604      	mov	r4, r0
   17664:	f7ff fa42 	bl	16aec <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   17668:	2800      	cmp	r0, #0
   1766a:	db0a      	blt.n	17682 <lll_conn_abort_cb+0x26>
	lll = prepare_param->param;
   1766c:	68e2      	ldr	r2, [r4, #12]
	lll->latency_prepare += (prepare_param->lazy + 1);
   1766e:	8921      	ldrh	r1, [r4, #8]
   17670:	8a53      	ldrh	r3, [r2, #18]
   17672:	440b      	add	r3, r1
   17674:	3301      	adds	r3, #1
	lll_done(param);
   17676:	4628      	mov	r0, r5
	lll->latency_prepare += (prepare_param->lazy + 1);
   17678:	8253      	strh	r3, [r2, #18]
}
   1767a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	lll_done(param);
   1767e:	f7fe bfb3 	b.w	165e8 <lll_done>
	LL_ASSERT(err >= 0);
   17682:	4a0a      	ldr	r2, [pc, #40]	; (176ac <lll_conn_abort_cb+0x50>)
   17684:	490a      	ldr	r1, [pc, #40]	; (176b0 <lll_conn_abort_cb+0x54>)
   17686:	480b      	ldr	r0, [pc, #44]	; (176b4 <lll_conn_abort_cb+0x58>)
   17688:	239d      	movs	r3, #157	; 0x9d
   1768a:	f004 f873 	bl	1b774 <printk>
   1768e:	4040      	eors	r0, r0
   17690:	f380 8811 	msr	BASEPRI, r0
   17694:	f04f 0003 	mov.w	r0, #3
   17698:	df02      	svc	2
   1769a:	e7e7      	b.n	1766c <lll_conn_abort_cb+0x10>
		radio_isr_set(isr_done, param);
   1769c:	4806      	ldr	r0, [pc, #24]	; (176b8 <lll_conn_abort_cb+0x5c>)
   1769e:	f000 fd05 	bl	180ac <radio_isr_set>
}
   176a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		radio_disable();
   176a6:	f000 bdf7 	b.w	18298 <radio_disable>
   176aa:	bf00      	nop
   176ac:	00022460 	.word	0x00022460
   176b0:	00022358 	.word	0x00022358
   176b4:	0002180c 	.word	0x0002180c
   176b8:	00017565 	.word	0x00017565

000176bc <lll_conn_rx_pkt_set>:
{
   176bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   176be:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   176c0:	2001      	movs	r0, #1
   176c2:	f7f7 ff53 	bl	f56c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   176c6:	4606      	mov	r6, r0
   176c8:	b360      	cbz	r0, 17724 <lll_conn_rx_pkt_set+0x68>
	phy = lll->phy_rx;
   176ca:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
	max_rx_octets = lll->max_rx_octets;
   176ce:	8fef      	ldrh	r7, [r5, #62]	; 0x3e
	phy = lll->phy_rx;
   176d0:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   176d4:	2100      	movs	r1, #0
   176d6:	4620      	mov	r0, r4
   176d8:	f000 fd4e 	bl	18178 <radio_phy_set>
	} else if (lll->enc_rx) {
   176dc:	f895 305e 	ldrb.w	r3, [r5, #94]	; 0x5e
   176e0:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   176e2:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   176e6:	d511      	bpl.n	1770c <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   176e8:	1d39      	adds	r1, r7, #4
   176ea:	f042 0201 	orr.w	r2, r2, #1
   176ee:	b2c9      	uxtb	r1, r1
   176f0:	2008      	movs	r0, #8
   176f2:	f000 fd87 	bl	18204 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   176f6:	f106 021c 	add.w	r2, r6, #28
   176fa:	4621      	mov	r1, r4
   176fc:	f105 005f 	add.w	r0, r5, #95	; 0x5f
   17700:	f001 f82e 	bl	18760 <radio_ccm_rx_pkt_set>
}
   17704:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   17708:	f000 bdaa 	b.w	18260 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1770c:	2008      	movs	r0, #8
   1770e:	b2f9      	uxtb	r1, r7
   17710:	f042 0201 	orr.w	r2, r2, #1
   17714:	f000 fd76 	bl	18204 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   17718:	f106 001c 	add.w	r0, r6, #28
}
   1771c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   17720:	f000 bd9e 	b.w	18260 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   17724:	4a06      	ldr	r2, [pc, #24]	; (17740 <lll_conn_rx_pkt_set+0x84>)
   17726:	4907      	ldr	r1, [pc, #28]	; (17744 <lll_conn_rx_pkt_set+0x88>)
   17728:	4807      	ldr	r0, [pc, #28]	; (17748 <lll_conn_rx_pkt_set+0x8c>)
   1772a:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   1772e:	f004 f821 	bl	1b774 <printk>
   17732:	4040      	eors	r0, r0
   17734:	f380 8811 	msr	BASEPRI, r0
   17738:	f04f 0003 	mov.w	r0, #3
   1773c:	df02      	svc	2
   1773e:	e7c4      	b.n	176ca <lll_conn_rx_pkt_set+0xe>
   17740:	00022460 	.word	0x00022460
   17744:	000224ac 	.word	0x000224ac
   17748:	0002180c 	.word	0x0002180c

0001774c <lll_conn_isr_tx>:
{
   1774c:	b538      	push	{r3, r4, r5, lr}
   1774e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   17750:	f7fe fffe 	bl	16750 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   17754:	2096      	movs	r0, #150	; 0x96
   17756:	f000 ff15 	bl	18584 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1775a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1775e:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   17762:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   17766:	f000 0007 	and.w	r0, r0, #7
   1776a:	f002 0207 	and.w	r2, r2, #7
   1776e:	2100      	movs	r1, #0
   17770:	f000 fe36 	bl	183e0 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   17774:	4620      	mov	r0, r4
   17776:	f7ff ffa1 	bl	176bc <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1777a:	f000 fdad 	bl	182d8 <radio_is_ready>
   1777e:	bb58      	cbnz	r0, 177d8 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   17780:	f000 ffe8 	bl	18754 <radio_tmr_tifs_base_get>
   17784:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   17786:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   1778a:	2101      	movs	r1, #1
   1778c:	f000 0007 	and.w	r0, r0, #7
   17790:	f000 fd76 	bl	18280 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   17794:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
   17798:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1779c:	4405      	add	r5, r0
   1779e:	2b02      	cmp	r3, #2
   177a0:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   177a4:	d016      	beq.n	177d4 <lll_conn_isr_tx+0x88>
		return 376;
   177a6:	2b04      	cmp	r3, #4
   177a8:	bf14      	ite	ne
   177aa:	2328      	movne	r3, #40	; 0x28
   177ac:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   177b0:	f894 0044 	ldrb.w	r0, [r4, #68]	; 0x44
   177b4:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   177b8:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   177bc:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   177be:	f000 fd5b 	bl	18278 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   177c2:	1a28      	subs	r0, r5, r0
   177c4:	f000 ff7e 	bl	186c4 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   177c8:	4621      	mov	r1, r4
   177ca:	480a      	ldr	r0, [pc, #40]	; (177f4 <lll_conn_isr_tx+0xa8>)
}
   177cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   177d0:	f000 bc6c 	b.w	180ac <radio_isr_set>
	switch (phy) {
   177d4:	2318      	movs	r3, #24
   177d6:	e7eb      	b.n	177b0 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   177d8:	4a07      	ldr	r2, [pc, #28]	; (177f8 <lll_conn_isr_tx+0xac>)
   177da:	4908      	ldr	r1, [pc, #32]	; (177fc <lll_conn_isr_tx+0xb0>)
   177dc:	4808      	ldr	r0, [pc, #32]	; (17800 <lll_conn_isr_tx+0xb4>)
   177de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
   177e2:	f003 ffc7 	bl	1b774 <printk>
   177e6:	4040      	eors	r0, r0
   177e8:	f380 8811 	msr	BASEPRI, r0
   177ec:	f04f 0003 	mov.w	r0, #3
   177f0:	df02      	svc	2
   177f2:	e7c5      	b.n	17780 <lll_conn_isr_tx+0x34>
   177f4:	00017941 	.word	0x00017941
   177f8:	00022460 	.word	0x00022460
   177fc:	00022414 	.word	0x00022414
   17800:	0002180c 	.word	0x0002180c

00017804 <lll_conn_tx_pkt_set>:
{
   17804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17806:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   17808:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
	max_tx_octets = lll->max_tx_octets;
   1780c:	8f87      	ldrh	r7, [r0, #60]	; 0x3c
	phy = lll->phy_tx;
   1780e:	f001 0507 	and.w	r5, r1, #7
{
   17812:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   17814:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   17818:	4628      	mov	r0, r5
   1781a:	f000 fcad 	bl	18178 <radio_phy_set>
	} else if (lll->enc_tx) {
   1781e:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17822:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   17824:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   17828:	d50f      	bpl.n	1784a <lll_conn_tx_pkt_set+0x46>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1782a:	1d39      	adds	r1, r7, #4
   1782c:	f042 0201 	orr.w	r2, r2, #1
   17830:	b2c9      	uxtb	r1, r1
   17832:	2008      	movs	r0, #8
   17834:	f000 fce6 	bl	18204 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   17838:	4631      	mov	r1, r6
   1783a:	f104 0080 	add.w	r0, r4, #128	; 0x80
   1783e:	f000 ffcd 	bl	187dc <radio_ccm_tx_pkt_set>
}
   17842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   17846:	f000 bd11 	b.w	1826c <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1784a:	b2f9      	uxtb	r1, r7
   1784c:	2008      	movs	r0, #8
   1784e:	f042 0201 	orr.w	r2, r2, #1
   17852:	f000 fcd7 	bl	18204 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   17856:	4630      	mov	r0, r6
}
   17858:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1785c:	f000 bd06 	b.w	1826c <radio_pkt_tx_set>

00017860 <lll_conn_pdu_tx_prep>:
{
   17860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17864:	4604      	mov	r4, r0
   17866:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   17868:	aa01      	add	r2, sp, #4
   1786a:	6c80      	ldr	r0, [r0, #72]	; 0x48
{
   1786c:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1786e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   17870:	f7f3 ffc4 	bl	b7fc <memq_peek>
	if (lll->empty || !link) {
   17874:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17878:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1787a:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1787c:	d432      	bmi.n	178e4 <lll_conn_pdu_tx_prep+0x84>
   1787e:	2800      	cmp	r0, #0
   17880:	d04e      	beq.n	17920 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   17882:	9b01      	ldr	r3, [sp, #4]
   17884:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   17888:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1788c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   17890:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   17894:	b913      	cbnz	r3, 1789c <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   17896:	786b      	ldrb	r3, [r5, #1]
   17898:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
		if (lll->packet_tx_head_offset) {
   1789c:	b137      	cbz	r7, 178ac <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1789e:	f818 2007 	ldrb.w	r2, [r8, r7]
   178a2:	2101      	movs	r1, #1
   178a4:	f361 0201 	bfi	r2, r1, #0, #2
   178a8:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   178ac:	1bdb      	subs	r3, r3, r7
   178ae:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   178b0:	4620      	mov	r0, r4
   178b2:	f7fd faa9 	bl	14e08 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   178b6:	786b      	ldrb	r3, [r5, #1]
   178b8:	4283      	cmp	r3, r0
   178ba:	d924      	bls.n	17906 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   178bc:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   178be:	f818 3007 	ldrb.w	r3, [r8, r7]
   178c2:	f043 0310 	orr.w	r3, r3, #16
   178c6:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   178ca:	f818 3007 	ldrb.w	r3, [r8, r7]
   178ce:	f36f 1347 	bfc	r3, #5, #3
   178d2:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   178d6:	2300      	movs	r3, #0
   178d8:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   178da:	f8c9 5000 	str.w	r5, [r9]
}
   178de:	b003      	add	sp, #12
   178e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   178e4:	f043 0304 	orr.w	r3, r3, #4
   178e8:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   178ec:	f000 fd28 	bl	18340 <radio_pkt_empty_get>
   178f0:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   178f2:	b1e6      	cbz	r6, 1792e <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   178f4:	7803      	ldrb	r3, [r0, #0]
   178f6:	f043 0310 	orr.w	r3, r3, #16
   178fa:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   178fc:	f8c9 5000 	str.w	r5, [r9]
}
   17900:	b003      	add	sp, #12
   17902:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   17906:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   17908:	6832      	ldr	r2, [r6, #0]
   1790a:	429a      	cmp	r2, r3
			p->md = 1U;
   1790c:	f818 3007 	ldrb.w	r3, [r8, r7]
   17910:	bf14      	ite	ne
   17912:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   17916:	f36f 1304 	bfceq	r3, #4, #1
   1791a:	f808 3007 	strb.w	r3, [r8, r7]
   1791e:	e7d4      	b.n	178ca <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   17920:	f043 0304 	orr.w	r3, r3, #4
   17924:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		p = (void *)radio_pkt_empty_get();
   17928:	f000 fd0a 	bl	18340 <radio_pkt_empty_get>
   1792c:	4605      	mov	r5, r0
			p->md = 0U;
   1792e:	782b      	ldrb	r3, [r5, #0]
   17930:	f36f 1304 	bfc	r3, #4, #1
   17934:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   17936:	f8c9 5000 	str.w	r5, [r9]
}
   1793a:	b003      	add	sp, #12
   1793c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00017940 <lll_conn_isr_rx>:
{
   17940:	b5f0      	push	{r4, r5, r6, r7, lr}
   17942:	b083      	sub	sp, #12
   17944:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   17946:	f000 fcd1 	bl	182ec <radio_is_done>
	if (trx_done) {
   1794a:	b2c0      	uxtb	r0, r0
   1794c:	b950      	cbnz	r0, 17964 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1794e:	f7fe ff07 	bl	16760 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   17952:	48ae      	ldr	r0, [pc, #696]	; (17c0c <lll_conn_isr_rx+0x2cc>)
   17954:	4621      	mov	r1, r4
   17956:	f000 fba9 	bl	180ac <radio_isr_set>
}
   1795a:	b003      	add	sp, #12
   1795c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   17960:	f000 bc9a 	b.w	18298 <radio_disable>
		crc_ok = radio_crc_is_valid();
   17964:	f000 fce2 	bl	1832c <radio_crc_is_valid>
   17968:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1796a:	f000 fdaf 	bl	184cc <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1796e:	f7fe fef7 	bl	16760 <lll_isr_rx_status_reset>
	trx_cnt++;
   17972:	4aa7      	ldr	r2, [pc, #668]	; (17c10 <lll_conn_isr_rx+0x2d0>)
   17974:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   17976:	2001      	movs	r0, #1
	trx_cnt++;
   17978:	4403      	add	r3, r0
   1797a:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1797c:	f7f7 fdf6 	bl	f56c <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   17980:	4606      	mov	r6, r0
   17982:	2800      	cmp	r0, #0
   17984:	f000 80bf 	beq.w	17b06 <lll_conn_isr_rx+0x1c6>
	if (crc_ok) {
   17988:	2d00      	cmp	r5, #0
   1798a:	d155      	bne.n	17a38 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1798c:	4ba1      	ldr	r3, [pc, #644]	; (17c14 <lll_conn_isr_rx+0x2d4>)
   1798e:	781f      	ldrb	r7, [r3, #0]
   17990:	2f00      	cmp	r7, #0
   17992:	f040 80a7 	bne.w	17ae4 <lll_conn_isr_rx+0x1a4>
		crc_expire--;
   17996:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17998:	a901      	add	r1, sp, #4
   1799a:	4620      	mov	r0, r4
		crc_expire--;
   1799c:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1799e:	f7ff ff5f 	bl	17860 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   179a2:	2096      	movs	r0, #150	; 0x96
   179a4:	f000 fdee 	bl	18584 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   179a8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   179ac:	f000 0007 	and.w	r0, r0, #7
   179b0:	f000 fcce 	bl	18350 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   179b4:	4898      	ldr	r0, [pc, #608]	; (17c18 <lll_conn_isr_rx+0x2d8>)
   179b6:	4621      	mov	r1, r4
   179b8:	f000 fb78 	bl	180ac <radio_isr_set>
		radio_tmr_end_capture();
   179bc:	f000 febc 	bl	18738 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   179c0:	9901      	ldr	r1, [sp, #4]
   179c2:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
	pdu_data_tx->nesn = lll->nesn;
   179c6:	780b      	ldrb	r3, [r1, #0]
   179c8:	f023 000c 	bic.w	r0, r3, #12
   179cc:	f3c2 0340 	ubfx	r3, r2, #1, #1
   179d0:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   179d2:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   179d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   179da:	4303      	orrs	r3, r0
   179dc:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   179de:	4620      	mov	r0, r4
   179e0:	f7ff ff10 	bl	17804 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   179e4:	f000 fc78 	bl	182d8 <radio_is_ready>
   179e8:	2800      	cmp	r0, #0
   179ea:	f040 80bb 	bne.w	17b64 <lll_conn_isr_rx+0x224>
	if (!radio_tmr_aa_restore()) {
   179ee:	f000 fe97 	bl	18720 <radio_tmr_aa_restore>
   179f2:	b170      	cbz	r0, 17a12 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   179f4:	b19d      	cbz	r5, 17a1e <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   179f6:	89a0      	ldrh	r0, [r4, #12]
   179f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   179fc:	4298      	cmp	r0, r3
   179fe:	f000 80bf 	beq.w	17b80 <lll_conn_isr_rx+0x240>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   17a02:	4629      	mov	r1, r5
   17a04:	f7fd f894 	bl	14b30 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   17a08:	b95f      	cbnz	r7, 17a22 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   17a0a:	f7f7 fdf3 	bl	f5f4 <ull_rx_sched>
}
   17a0e:	b003      	add	sp, #12
   17a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   17a12:	f000 fe79 	bl	18708 <radio_tmr_aa_get>
   17a16:	f000 fe7d 	bl	18714 <radio_tmr_aa_save>
	if (tx_release) {
   17a1a:	2d00      	cmp	r5, #0
   17a1c:	d1eb      	bne.n	179f6 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   17a1e:	2f00      	cmp	r7, #0
   17a20:	d0f5      	beq.n	17a0e <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   17a22:	f7f7 fdc1 	bl	f5a8 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17a26:	2303      	movs	r3, #3
   17a28:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   17a2a:	89a3      	ldrh	r3, [r4, #12]
		ull_rx_put(node_rx->hdr.link, node_rx);
   17a2c:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   17a2e:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   17a30:	4631      	mov	r1, r6
   17a32:	f7f7 fdcf 	bl	f5d4 <ull_rx_put>
	if (is_ull_rx) {
   17a36:	e7e8      	b.n	17a0a <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   17a38:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17a3c:	7f32      	ldrb	r2, [r6, #28]
   17a3e:	f003 0101 	and.w	r1, r3, #1
   17a42:	f3c2 0080 	ubfx	r0, r2, #2, #1
   17a46:	4288      	cmp	r0, r1
   17a48:	d06d      	beq.n	17b26 <lll_conn_isr_rx+0x1e6>
		if (lll->role) {
   17a4a:	f994 201d 	ldrsb.w	r2, [r4, #29]
		lll->sn++;
   17a4e:	f081 0101 	eor.w	r1, r1, #1
   17a52:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   17a56:	2a00      	cmp	r2, #0
		lll->sn++;
   17a58:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (lll->role) {
   17a5c:	da05      	bge.n	17a6a <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   17a5e:	f894 3020 	ldrb.w	r3, [r4, #32]
   17a62:	f043 0304 	orr.w	r3, r3, #4
   17a66:	f884 3020 	strb.w	r3, [r4, #32]
		if (!lll->empty) {
   17a6a:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17a6e:	075a      	lsls	r2, r3, #29
   17a70:	f100 8095 	bmi.w	17b9e <lll_conn_isr_rx+0x25e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   17a74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   17a78:	aa01      	add	r2, sp, #4
   17a7a:	f7f3 febf 	bl	b7fc <memq_peek>
		if (link) {
   17a7e:	4605      	mov	r5, r0
   17a80:	2800      	cmp	r0, #0
   17a82:	f000 80bf 	beq.w	17c04 <lll_conn_isr_rx+0x2c4>
					       lll->packet_tx_head_offset);
   17a86:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
			pdu_data_tx_len = pdu_data_tx->len;
   17a8a:	9b01      	ldr	r3, [sp, #4]
   17a8c:	4413      	add	r3, r2
   17a8e:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   17a90:	b171      	cbz	r1, 17ab0 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   17a92:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17a96:	06df      	lsls	r7, r3, #27
   17a98:	d50a      	bpl.n	17ab0 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   17a9a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
   17a9e:	3301      	adds	r3, #1
   17aa0:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
   17aa4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   17aa8:	f143 0300 	adc.w	r3, r3, #0
   17aac:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   17ab0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   17ab4:	440a      	add	r2, r1
   17ab6:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   17ab8:	429a      	cmp	r2, r3
   17aba:	d37b      	bcc.n	17bb4 <lll_conn_isr_rx+0x274>
			} else if (offset == lll->packet_tx_head_len) {
   17abc:	f000 8095 	beq.w	17bea <lll_conn_isr_rx+0x2aa>
				LL_ASSERT(0);
   17ac0:	4a56      	ldr	r2, [pc, #344]	; (17c1c <lll_conn_isr_rx+0x2dc>)
   17ac2:	4957      	ldr	r1, [pc, #348]	; (17c20 <lll_conn_isr_rx+0x2e0>)
   17ac4:	4857      	ldr	r0, [pc, #348]	; (17c24 <lll_conn_isr_rx+0x2e4>)
   17ac6:	f240 3305 	movw	r3, #773	; 0x305
   17aca:	f003 fe53 	bl	1b774 <printk>
   17ace:	4040      	eors	r0, r0
   17ad0:	f380 8811 	msr	BASEPRI, r0
   17ad4:	f04f 0003 	mov.w	r0, #3
   17ad8:	df02      	svc	2
	tx_release = NULL;
   17ada:	2500      	movs	r5, #0
   17adc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17ae0:	7f32      	ldrb	r2, [r6, #28]
   17ae2:	e021      	b.n	17b28 <lll_conn_isr_rx+0x1e8>
		crc_expire--;
   17ae4:	3f01      	subs	r7, #1
   17ae6:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17ae8:	a901      	add	r1, sp, #4
   17aea:	4620      	mov	r0, r4
		crc_expire--;
   17aec:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17aee:	f7ff feb7 	bl	17860 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   17af2:	2f00      	cmp	r7, #0
   17af4:	f040 80eb 	bne.w	17cce <lll_conn_isr_rx+0x38e>
		radio_isr_set(isr_done, param);
   17af8:	4844      	ldr	r0, [pc, #272]	; (17c0c <lll_conn_isr_rx+0x2cc>)
   17afa:	4621      	mov	r1, r4
   17afc:	f000 fad6 	bl	180ac <radio_isr_set>
			radio_switch_complete_and_disable();
   17b00:	f000 fcce 	bl	184a0 <radio_switch_complete_and_disable>
   17b04:	e75c      	b.n	179c0 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   17b06:	4a45      	ldr	r2, [pc, #276]	; (17c1c <lll_conn_isr_rx+0x2dc>)
   17b08:	4947      	ldr	r1, [pc, #284]	; (17c28 <lll_conn_isr_rx+0x2e8>)
   17b0a:	4846      	ldr	r0, [pc, #280]	; (17c24 <lll_conn_isr_rx+0x2e4>)
   17b0c:	23d6      	movs	r3, #214	; 0xd6
   17b0e:	f003 fe31 	bl	1b774 <printk>
   17b12:	4040      	eors	r0, r0
   17b14:	f380 8811 	msr	BASEPRI, r0
   17b18:	f04f 0003 	mov.w	r0, #3
   17b1c:	df02      	svc	2
	if (crc_ok) {
   17b1e:	2d00      	cmp	r5, #0
   17b20:	f43f af34 	beq.w	1798c <lll_conn_isr_rx+0x4c>
   17b24:	e788      	b.n	17a38 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   17b26:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   17b28:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   17b2c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   17b30:	429a      	cmp	r2, r3
   17b32:	d046      	beq.n	17bc2 <lll_conn_isr_rx+0x282>
	is_rx_enqueue = 0U;
   17b34:	2700      	movs	r7, #0
		crc_expire = 0U;
   17b36:	4a37      	ldr	r2, [pc, #220]	; (17c14 <lll_conn_isr_rx+0x2d4>)
		crc_valid = 1U;
   17b38:	4b3c      	ldr	r3, [pc, #240]	; (17c2c <lll_conn_isr_rx+0x2ec>)
		crc_expire = 0U;
   17b3a:	2100      	movs	r1, #0
   17b3c:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17b3e:	4620      	mov	r0, r4
		crc_valid = 1U;
   17b40:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17b42:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   17b44:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   17b46:	f7ff fe8b 	bl	17860 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   17b4a:	7f33      	ldrb	r3, [r6, #28]
   17b4c:	06d9      	lsls	r1, r3, #27
   17b4e:	f53f af28 	bmi.w	179a2 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   17b52:	9b01      	ldr	r3, [sp, #4]
   17b54:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   17b56:	06d2      	lsls	r2, r2, #27
   17b58:	f53f af23 	bmi.w	179a2 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   17b5c:	785b      	ldrb	r3, [r3, #1]
   17b5e:	2b00      	cmp	r3, #0
   17b60:	d0ca      	beq.n	17af8 <lll_conn_isr_rx+0x1b8>
   17b62:	e71e      	b.n	179a2 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   17b64:	4a2d      	ldr	r2, [pc, #180]	; (17c1c <lll_conn_isr_rx+0x2dc>)
   17b66:	4932      	ldr	r1, [pc, #200]	; (17c30 <lll_conn_isr_rx+0x2f0>)
   17b68:	482e      	ldr	r0, [pc, #184]	; (17c24 <lll_conn_isr_rx+0x2e4>)
   17b6a:	f44f 73a1 	mov.w	r3, #322	; 0x142
   17b6e:	f003 fe01 	bl	1b774 <printk>
   17b72:	4040      	eors	r0, r0
   17b74:	f380 8811 	msr	BASEPRI, r0
   17b78:	f04f 0003 	mov.w	r0, #3
   17b7c:	df02      	svc	2
   17b7e:	e736      	b.n	179ee <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   17b80:	4a26      	ldr	r2, [pc, #152]	; (17c1c <lll_conn_isr_rx+0x2dc>)
   17b82:	492c      	ldr	r1, [pc, #176]	; (17c34 <lll_conn_isr_rx+0x2f4>)
   17b84:	4827      	ldr	r0, [pc, #156]	; (17c24 <lll_conn_isr_rx+0x2e4>)
   17b86:	f240 1351 	movw	r3, #337	; 0x151
   17b8a:	f003 fdf3 	bl	1b774 <printk>
   17b8e:	4040      	eors	r0, r0
   17b90:	f380 8811 	msr	BASEPRI, r0
   17b94:	f04f 0003 	mov.w	r0, #3
   17b98:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   17b9a:	89a0      	ldrh	r0, [r4, #12]
   17b9c:	e731      	b.n	17a02 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   17b9e:	f36f 0382 	bfc	r3, #2, #1
   17ba2:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
			pdu_data_tx = (void *)radio_pkt_empty_get();
   17ba6:	f000 fbcb 	bl	18340 <radio_pkt_empty_get>
	tx_release = NULL;
   17baa:	2500      	movs	r5, #0
   17bac:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17bb0:	7f32      	ldrb	r2, [r6, #28]
   17bb2:	e7b9      	b.n	17b28 <lll_conn_isr_rx+0x1e8>
				lll->packet_tx_head_offset = offset;
   17bb4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
   17bb8:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17bbc:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   17bbe:	2500      	movs	r5, #0
   17bc0:	e7b2      	b.n	17b28 <lll_conn_isr_rx+0x1e8>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   17bc2:	2003      	movs	r0, #3
   17bc4:	f7f7 fcd2 	bl	f56c <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   17bc8:	2800      	cmp	r0, #0
   17bca:	d0b3      	beq.n	17b34 <lll_conn_isr_rx+0x1f4>
		lll->nesn++;
   17bcc:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17bd0:	f083 0302 	eor.w	r3, r3, #2
   17bd4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		if (pdu_data_rx->len != 0) {
   17bd8:	7f73      	ldrb	r3, [r6, #29]
   17bda:	2b00      	cmp	r3, #0
   17bdc:	d0aa      	beq.n	17b34 <lll_conn_isr_rx+0x1f4>
			if (lll->enc_rx) {
   17bde:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17be2:	0718      	lsls	r0, r3, #28
   17be4:	d428      	bmi.n	17c38 <lll_conn_isr_rx+0x2f8>
			*is_rx_enqueue = 1U;
   17be6:	2701      	movs	r7, #1
   17be8:	e7a5      	b.n	17b36 <lll_conn_isr_rx+0x1f6>
				lll->packet_tx_head_len = 0;
   17bea:	2200      	movs	r2, #0
   17bec:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				memq_dequeue(lll->memq_tx.tail,
   17bf0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   17bf2:	f104 0148 	add.w	r1, r4, #72	; 0x48
   17bf6:	f7f3 fe09 	bl	b80c <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   17bfa:	9b01      	ldr	r3, [sp, #4]
   17bfc:	681a      	ldr	r2, [r3, #0]
   17bfe:	602a      	str	r2, [r5, #0]
				tx->next = link;
   17c00:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   17c02:	9d01      	ldr	r5, [sp, #4]
				FORCE_MD_CNT_SET();
   17c04:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17c08:	7f32      	ldrb	r2, [r6, #28]
   17c0a:	e78d      	b.n	17b28 <lll_conn_isr_rx+0x1e8>
   17c0c:	00017565 	.word	0x00017565
   17c10:	2000290a 	.word	0x2000290a
   17c14:	20002a81 	.word	0x20002a81
   17c18:	0001774d 	.word	0x0001774d
   17c1c:	00022460 	.word	0x00022460
   17c20:	000218a4 	.word	0x000218a4
   17c24:	0002180c 	.word	0x0002180c
   17c28:	000224ac 	.word	0x000224ac
   17c2c:	20002a82 	.word	0x20002a82
   17c30:	00022414 	.word	0x00022414
   17c34:	000224bc 	.word	0x000224bc
				done = radio_ccm_is_done();
   17c38:	f000 fdf8 	bl	1882c <radio_ccm_is_done>
				LL_ASSERT(done);
   17c3c:	b3c8      	cbz	r0, 17cb2 <lll_conn_isr_rx+0x372>
				bool mic_failure = !radio_ccm_mic_is_valid();
   17c3e:	f000 fe17 	bl	18870 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   17c42:	bb30      	cbnz	r0, 17c92 <lll_conn_isr_rx+0x352>
				    lll->ccm_rx.counter == 0 &&
   17c44:	f8d4 206f 	ldr.w	r2, [r4, #111]	; 0x6f
   17c48:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				if (mic_failure &&
   17c4c:	4313      	orrs	r3, r2
   17c4e:	d104      	bne.n	17c5a <lll_conn_isr_rx+0x31a>
				    (pdu_data_rx->ll_id ==
   17c50:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   17c52:	f003 0303 	and.w	r3, r3, #3
   17c56:	2b03      	cmp	r3, #3
   17c58:	d004      	beq.n	17c64 <lll_conn_isr_rx+0x324>
					mic_state = LLL_CONN_MIC_FAIL;
   17c5a:	4b1e      	ldr	r3, [pc, #120]	; (17cd4 <lll_conn_isr_rx+0x394>)
   17c5c:	2202      	movs	r2, #2
   17c5e:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   17c60:	2700      	movs	r7, #0
   17c62:	e6c4      	b.n	179ee <lll_conn_isr_rx+0xae>
						radio_pkt_scratch_get();
   17c64:	f000 fb70 	bl	18348 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   17c68:	7843      	ldrb	r3, [r0, #1]
   17c6a:	2b27      	cmp	r3, #39	; 0x27
						radio_pkt_scratch_get();
   17c6c:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   17c6e:	d8f4      	bhi.n	17c5a <lll_conn_isr_rx+0x31a>
						memcpy(pdu_data_rx,
   17c70:	3303      	adds	r3, #3
   17c72:	b2da      	uxtb	r2, r3
   17c74:	f106 001c 	add.w	r0, r6, #28
   17c78:	f005 fec8 	bl	1da0c <memcpy>
						lll->ccm_rx.counter--;
   17c7c:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
   17c80:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   17c84:	3b01      	subs	r3, #1
   17c86:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   17c8a:	f142 33ff 	adc.w	r3, r2, #4294967295	; 0xffffffff
   17c8e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				lll->ccm_rx.counter++;
   17c92:	f8d4 306f 	ldr.w	r3, [r4, #111]	; 0x6f
				mic_state = LLL_CONN_MIC_PASS;
   17c96:	4a0f      	ldr	r2, [pc, #60]	; (17cd4 <lll_conn_isr_rx+0x394>)
				lll->ccm_rx.counter++;
   17c98:	3301      	adds	r3, #1
   17c9a:	f8c4 306f 	str.w	r3, [r4, #111]	; 0x6f
   17c9e:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
						lll->ccm_rx.counter--;
   17ca2:	f104 016f 	add.w	r1, r4, #111	; 0x6f
				lll->ccm_rx.counter++;
   17ca6:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   17caa:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   17cac:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   17cae:	7017      	strb	r7, [r2, #0]
		if (err) {
   17cb0:	e741      	b.n	17b36 <lll_conn_isr_rx+0x1f6>
				LL_ASSERT(done);
   17cb2:	4a09      	ldr	r2, [pc, #36]	; (17cd8 <lll_conn_isr_rx+0x398>)
   17cb4:	4909      	ldr	r1, [pc, #36]	; (17cdc <lll_conn_isr_rx+0x39c>)
   17cb6:	480a      	ldr	r0, [pc, #40]	; (17ce0 <lll_conn_isr_rx+0x3a0>)
   17cb8:	f44f 7348 	mov.w	r3, #800	; 0x320
   17cbc:	f003 fd5a 	bl	1b774 <printk>
   17cc0:	4040      	eors	r0, r0
   17cc2:	f380 8811 	msr	BASEPRI, r0
   17cc6:	f04f 0003 	mov.w	r0, #3
   17cca:	df02      	svc	2
   17ccc:	e7b7      	b.n	17c3e <lll_conn_isr_rx+0x2fe>
	is_rx_enqueue = 0U;
   17cce:	462f      	mov	r7, r5
   17cd0:	e667      	b.n	179a2 <lll_conn_isr_rx+0x62>
   17cd2:	bf00      	nop
   17cd4:	20002a83 	.word	0x20002a83
   17cd8:	00022460 	.word	0x00022460
   17cdc:	000224b4 	.word	0x000224b4
   17ce0:	0002180c 	.word	0x0002180c

00017ce4 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   17ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   17ce6:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   17ce8:	89a2      	ldrh	r2, [r4, #12]
   17cea:	f64f 73ff 	movw	r3, #65535	; 0xffff
   17cee:	429a      	cmp	r2, r3
{
   17cf0:	b083      	sub	sp, #12
	if (unlikely(lll->handle == 0xFFFF)) {
   17cf2:	f000 80d2 	beq.w	17e9a <prepare_cb+0x1b6>

		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   17cf6:	4605      	mov	r5, r0
   17cf8:	f7ff fc9c 	bl	17634 <lll_conn_prepare_reset>

	/* Calculate the current event latency */
	lll->latency_event = lll->latency_prepare + p->lazy;
   17cfc:	892b      	ldrh	r3, [r5, #8]
   17cfe:	8a62      	ldrh	r2, [r4, #18]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   17d00:	8ae0      	ldrh	r0, [r4, #22]
	lll->latency_event = lll->latency_prepare + p->lazy;
   17d02:	441a      	add	r2, r3
   17d04:	b292      	uxth	r2, r2
	event_counter = lll->event_counter + lll->latency_event;
   17d06:	4410      	add	r0, r2
   17d08:	b280      	uxth	r0, r0

	/* Update event counter to next value */
	lll->event_counter = (event_counter + 1);
   17d0a:	1c41      	adds	r1, r0, #1

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   17d0c:	7f63      	ldrb	r3, [r4, #29]
	lll->event_counter = (event_counter + 1);
   17d0e:	82e1      	strh	r1, [r4, #22]
	lll->latency_prepare = 0;
   17d10:	2100      	movs	r1, #0
   17d12:	8261      	strh	r1, [r4, #18]
	if (lll->data_chan_sel) {
   17d14:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare + p->lazy;
   17d16:	82a2      	strh	r2, [r4, #20]
	if (lll->data_chan_sel) {
   17d18:	f100 8091 	bmi.w	17e3e <prepare_cb+0x15a>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   17d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17d20:	7fa1      	ldrb	r1, [r4, #30]
   17d22:	9300      	str	r3, [sp, #0]
   17d24:	f104 001f 	add.w	r0, r4, #31
   17d28:	f104 0318 	add.w	r3, r4, #24
   17d2c:	f7fd f9ba 	bl	150a4 <lll_chan_sel_1>
   17d30:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   17d32:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	; 0x2c
   17d36:	4419      	add	r1, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   17d38:	e9d4 030d 	ldrd	r0, r3, [r4, #52]	; 0x34
   17d3c:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   17d3e:	2200      	movs	r2, #0
	lll->slave.window_size_event_us +=
   17d40:	63a3      	str	r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   17d42:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	lll->slave.window_widening_prepare_us = 0;
   17d44:	62e2      	str	r2, [r4, #44]	; 0x2c
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   17d46:	6362      	str	r2, [r4, #52]	; 0x34
	/* Ensure that empty flag reflects the state of the Tx queue, as a
	 * peripheral if this is the first connection event and as no prior PDU
	 * is transmitted, an incorrect acknowledgment by peer should not
	 * dequeue a PDU that has not been transmitted on air.
	 */
	if (!lll->empty) {
   17d48:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
		lll->slave.window_widening_event_us =
   17d4c:	428b      	cmp	r3, r1
   17d4e:	bf28      	it	cs
   17d50:	460b      	movcs	r3, r1
	if (!lll->empty) {
   17d52:	f012 0204 	ands.w	r2, r2, #4
		lll->slave.window_widening_event_us =
   17d56:	6323      	str	r3, [r4, #48]	; 0x30
	if (!lll->empty) {
   17d58:	f000 8091 	beq.w	17e7e <prepare_cb+0x19a>
			lll->empty = 1U;
		}
	}

	/* Start setting up Radio h/w */
	radio_reset();
   17d5c:	f000 f9e8 	bl	18130 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   17d60:	2000      	movs	r0, #0
   17d62:	f000 fa19 	bl	18198 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   17d66:	4620      	mov	r0, r4
   17d68:	f7ff fca8 	bl	176bc <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   17d6c:	1d20      	adds	r0, r4, #4
   17d6e:	f000 fa31 	bl	181d4 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   17d72:	7a63      	ldrb	r3, [r4, #9]
			    (((uint32_t)lll->crc_init[2] << 16) |
   17d74:	7aa1      	ldrb	r1, [r4, #10]
			     ((uint32_t)lll->crc_init[1] << 8) |
   17d76:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   17d78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   17d7c:	7a21      	ldrb	r1, [r4, #8]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   17d7e:	f240 605b 	movw	r0, #1627	; 0x65b
   17d82:	4319      	orrs	r1, r3
   17d84:	f000 fac6 	bl	18314 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   17d88:	4630      	mov	r0, r6
   17d8a:	f7fe fc9d 	bl	166c8 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   17d8e:	4621      	mov	r1, r4
   17d90:	4846      	ldr	r0, [pc, #280]	; (17eac <prepare_cb+0x1c8>)
   17d92:	f000 f98b 	bl	180ac <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   17d96:	2096      	movs	r0, #150	; 0x96
   17d98:	f000 fbf4 	bl	18584 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   17d9c:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   17da0:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   17da4:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   17da8:	2100      	movs	r1, #0
   17daa:	f002 0207 	and.w	r2, r2, #7
   17dae:	f000 0007 	and.w	r0, r0, #7
   17db2:	f000 fb15 	bl	183e0 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	ull = HDR_LLL2ULL(lll);
   17db6:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   17db8:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_event_offset_get(ull);
   17dba:	4638      	mov	r0, r7
   17dbc:	f7fe fc6a 	bl	16694 <lll_event_offset_get>
   17dc0:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   17dc2:	686a      	ldr	r2, [r5, #4]
   17dc4:	f106 0109 	add.w	r1, r6, #9
   17dc8:	2000      	movs	r0, #0
   17dca:	f000 fbe7 	bl	1859c <radio_tmr_start>
   17dce:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   17dd0:	f000 fc86 	bl	186e0 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   17dd4:	2000      	movs	r0, #0
   17dd6:	f000 fc9d 	bl	18714 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   17dda:	6b23      	ldr	r3, [r4, #48]	; 0x30
   17ddc:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   17de0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   17de2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   17de6:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   17dea:	2101      	movs	r1, #1
   17dec:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   17df0:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   17df2:	f000 fa43 	bl	1827c <radio_rx_ready_delay_get>
   17df6:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   17df8:	f894 0045 	ldrb.w	r0, [r4, #69]	; 0x45
   17dfc:	f000 0007 	and.w	r0, r0, #7
   17e00:	2802      	cmp	r0, #2
   17e02:	d03a      	beq.n	17e7a <prepare_cb+0x196>
		return 40;
   17e04:	2804      	cmp	r0, #4
   17e06:	bf0c      	ite	eq
   17e08:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   17e0c:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   17e0e:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   17e10:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   17e12:	f000 fa35 	bl	18280 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   17e16:	4428      	add	r0, r5
   17e18:	f000 fc54 	bl	186c4 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(ull, (TICKER_ID_CONN_BASE + lll->handle),
   17e1c:	89a1      	ldrh	r1, [r4, #12]
   17e1e:	3103      	adds	r1, #3
   17e20:	4632      	mov	r2, r6
   17e22:	b2c9      	uxtb	r1, r1
   17e24:	4638      	mov	r0, r7
   17e26:	f7fe fc3f 	bl	166a8 <lll_preempt_calc>
   17e2a:	b188      	cbz	r0, 17e50 <prepare_cb+0x16c>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   17e2c:	4820      	ldr	r0, [pc, #128]	; (17eb0 <prepare_cb+0x1cc>)
   17e2e:	4621      	mov	r1, r4
   17e30:	f000 f93c 	bl	180ac <radio_isr_set>
		radio_disable();
   17e34:	f000 fa30 	bl	18298 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   17e38:	2000      	movs	r0, #0
   17e3a:	b003      	add	sp, #12
   17e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   17e3e:	8be1      	ldrh	r1, [r4, #30]
   17e40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   17e44:	f104 0218 	add.w	r2, r4, #24
   17e48:	f7fd f970 	bl	1512c <lll_chan_sel_2>
   17e4c:	4606      	mov	r6, r0
   17e4e:	e770      	b.n	17d32 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   17e50:	4620      	mov	r0, r4
   17e52:	f7fe fbc7 	bl	165e4 <lll_prepare_done>
		LL_ASSERT(!ret);
   17e56:	2800      	cmp	r0, #0
   17e58:	d0ee      	beq.n	17e38 <prepare_cb+0x154>
   17e5a:	4a16      	ldr	r2, [pc, #88]	; (17eb4 <prepare_cb+0x1d0>)
   17e5c:	4916      	ldr	r1, [pc, #88]	; (17eb8 <prepare_cb+0x1d4>)
   17e5e:	4817      	ldr	r0, [pc, #92]	; (17ebc <prepare_cb+0x1d8>)
   17e60:	f240 1319 	movw	r3, #281	; 0x119
   17e64:	f003 fc86 	bl	1b774 <printk>
   17e68:	4040      	eors	r0, r0
   17e6a:	f380 8811 	msr	BASEPRI, r0
   17e6e:	f04f 0003 	mov.w	r0, #3
   17e72:	df02      	svc	2
}
   17e74:	2000      	movs	r0, #0
   17e76:	b003      	add	sp, #12
   17e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (phy) {
   17e7a:	2318      	movs	r3, #24
   17e7c:	e7c7      	b.n	17e0e <prepare_cb+0x12a>
		link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, NULL);
   17e7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
   17e82:	f7f3 fcbb 	bl	b7fc <memq_peek>
		if (!link) {
   17e86:	2800      	cmp	r0, #0
   17e88:	f47f af68 	bne.w	17d5c <prepare_cb+0x78>
			lll->empty = 1U;
   17e8c:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
   17e90:	f043 0304 	orr.w	r3, r3, #4
   17e94:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
   17e98:	e760      	b.n	17d5c <prepare_cb+0x78>
		radio_isr_set(lll_isr_early_abort, lll);
   17e9a:	4809      	ldr	r0, [pc, #36]	; (17ec0 <prepare_cb+0x1dc>)
   17e9c:	4621      	mov	r1, r4
   17e9e:	f000 f905 	bl	180ac <radio_isr_set>
		radio_disable();
   17ea2:	f000 f9f9 	bl	18298 <radio_disable>
}
   17ea6:	2000      	movs	r0, #0
   17ea8:	b003      	add	sp, #12
   17eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17eac:	00017941 	.word	0x00017941
   17eb0:	000167fd 	.word	0x000167fd
   17eb4:	000224e8 	.word	0x000224e8
   17eb8:	00021bb8 	.word	0x00021bb8
   17ebc:	0002180c 	.word	0x0002180c
   17ec0:	00016821 	.word	0x00016821

00017ec4 <lll_slave_prepare>:
{
   17ec4:	b510      	push	{r4, lr}
   17ec6:	b082      	sub	sp, #8
   17ec8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   17eca:	f7fe fdf7 	bl	16abc <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   17ece:	2800      	cmp	r0, #0
   17ed0:	db25      	blt.n	17f1e <lll_slave_prepare+0x5a>
	lll = p->param;
   17ed2:	68e1      	ldr	r1, [r4, #12]
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   17ed4:	8920      	ldrh	r0, [r4, #8]
   17ed6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
	lll->slave.window_widening_prepare_us +=
   17ed8:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	    lll->slave.window_widening_periodic_us * (p->lazy + 1);
   17eda:	fb00 3303 	mla	r3, r0, r3, r3
	    lll->slave.window_widening_max_us) {
   17ede:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   17ee0:	4413      	add	r3, r2
		lll->slave.window_widening_prepare_us =
   17ee2:	4283      	cmp	r3, r0
   17ee4:	bf28      	it	cs
   17ee6:	4603      	movcs	r3, r0
   17ee8:	62cb      	str	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   17eea:	4a13      	ldr	r2, [pc, #76]	; (17f38 <lll_slave_prepare+0x74>)
   17eec:	4913      	ldr	r1, [pc, #76]	; (17f3c <lll_slave_prepare+0x78>)
   17eee:	4814      	ldr	r0, [pc, #80]	; (17f40 <lll_slave_prepare+0x7c>)
   17ef0:	9400      	str	r4, [sp, #0]
   17ef2:	2300      	movs	r3, #0
   17ef4:	f7f7 fc80 	bl	f7f8 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   17ef8:	b108      	cbz	r0, 17efe <lll_slave_prepare+0x3a>
   17efa:	3077      	adds	r0, #119	; 0x77
   17efc:	d101      	bne.n	17f02 <lll_slave_prepare+0x3e>
}
   17efe:	b002      	add	sp, #8
   17f00:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   17f02:	4a10      	ldr	r2, [pc, #64]	; (17f44 <lll_slave_prepare+0x80>)
   17f04:	4910      	ldr	r1, [pc, #64]	; (17f48 <lll_slave_prepare+0x84>)
   17f06:	4811      	ldr	r0, [pc, #68]	; (17f4c <lll_slave_prepare+0x88>)
   17f08:	2358      	movs	r3, #88	; 0x58
   17f0a:	f003 fc33 	bl	1b774 <printk>
   17f0e:	4040      	eors	r0, r0
   17f10:	f380 8811 	msr	BASEPRI, r0
   17f14:	f04f 0003 	mov.w	r0, #3
   17f18:	df02      	svc	2
}
   17f1a:	b002      	add	sp, #8
   17f1c:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   17f1e:	4a09      	ldr	r2, [pc, #36]	; (17f44 <lll_slave_prepare+0x80>)
   17f20:	490b      	ldr	r1, [pc, #44]	; (17f50 <lll_slave_prepare+0x8c>)
   17f22:	480a      	ldr	r0, [pc, #40]	; (17f4c <lll_slave_prepare+0x88>)
   17f24:	2347      	movs	r3, #71	; 0x47
   17f26:	f003 fc25 	bl	1b774 <printk>
   17f2a:	4040      	eors	r0, r0
   17f2c:	f380 8811 	msr	BASEPRI, r0
   17f30:	f04f 0003 	mov.w	r0, #3
   17f34:	df02      	svc	2
   17f36:	e7cc      	b.n	17ed2 <lll_slave_prepare+0xe>
   17f38:	00017ce5 	.word	0x00017ce5
   17f3c:	0001765d 	.word	0x0001765d
   17f40:	0001668d 	.word	0x0001668d
   17f44:	000224e8 	.word	0x000224e8
   17f48:	0002243c 	.word	0x0002243c
   17f4c:	0002180c 	.word	0x0002180c
   17f50:	00022358 	.word	0x00022358

00017f54 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   17f54:	4b05      	ldr	r3, [pc, #20]	; (17f6c <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   17f56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   17f5a:	2100      	movs	r1, #0
   17f5c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   17f60:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   17f64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   17f68:	4770      	bx	lr
   17f6a:	bf00      	nop
   17f6c:	4000b000 	.word	0x4000b000

00017f70 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   17f70:	4b05      	ldr	r3, [pc, #20]	; (17f88 <cntr_start+0x18>)
   17f72:	7818      	ldrb	r0, [r3, #0]
   17f74:	1c42      	adds	r2, r0, #1
   17f76:	701a      	strb	r2, [r3, #0]
   17f78:	b918      	cbnz	r0, 17f82 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   17f7a:	4b04      	ldr	r3, [pc, #16]	; (17f8c <cntr_start+0x1c>)
   17f7c:	2201      	movs	r2, #1
   17f7e:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   17f80:	4770      	bx	lr
		return 1;
   17f82:	2001      	movs	r0, #1
}
   17f84:	4770      	bx	lr
   17f86:	bf00      	nop
   17f88:	20002a84 	.word	0x20002a84
   17f8c:	4000b000 	.word	0x4000b000

00017f90 <cntr_stop>:

uint32_t cntr_stop(void)
{
   17f90:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   17f92:	4c0d      	ldr	r4, [pc, #52]	; (17fc8 <cntr_stop+0x38>)
   17f94:	7820      	ldrb	r0, [r4, #0]
   17f96:	b148      	cbz	r0, 17fac <cntr_stop+0x1c>

	if (--_refcount) {
   17f98:	3801      	subs	r0, #1
   17f9a:	b2c0      	uxtb	r0, r0
   17f9c:	7020      	strb	r0, [r4, #0]
   17f9e:	b918      	cbnz	r0, 17fa8 <cntr_stop+0x18>
   17fa0:	4b0a      	ldr	r3, [pc, #40]	; (17fcc <cntr_stop+0x3c>)
   17fa2:	2201      	movs	r2, #1
   17fa4:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   17fa6:	bd10      	pop	{r4, pc}
		return 1;
   17fa8:	2001      	movs	r0, #1
}
   17faa:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   17fac:	4a08      	ldr	r2, [pc, #32]	; (17fd0 <cntr_stop+0x40>)
   17fae:	4909      	ldr	r1, [pc, #36]	; (17fd4 <cntr_stop+0x44>)
   17fb0:	4809      	ldr	r0, [pc, #36]	; (17fd8 <cntr_stop+0x48>)
   17fb2:	232d      	movs	r3, #45	; 0x2d
   17fb4:	f003 fbde 	bl	1b774 <printk>
   17fb8:	4040      	eors	r0, r0
   17fba:	f380 8811 	msr	BASEPRI, r0
   17fbe:	f04f 0003 	mov.w	r0, #3
   17fc2:	df02      	svc	2
	if (--_refcount) {
   17fc4:	7820      	ldrb	r0, [r4, #0]
   17fc6:	e7e7      	b.n	17f98 <cntr_stop+0x8>
   17fc8:	20002a84 	.word	0x20002a84
   17fcc:	4000b000 	.word	0x4000b000
   17fd0:	00022548 	.word	0x00022548
   17fd4:	00022594 	.word	0x00022594
   17fd8:	0002180c 	.word	0x0002180c

00017fdc <cntr_cnt_get>:
     return p_reg->COUNTER;
   17fdc:	4b01      	ldr	r3, [pc, #4]	; (17fe4 <cntr_cnt_get+0x8>)
   17fde:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   17fe2:	4770      	bx	lr
   17fe4:	4000b000 	.word	0x4000b000

00017fe8 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   17fe8:	4b02      	ldr	r3, [pc, #8]	; (17ff4 <cntr_cmp_set+0xc>)
   17fea:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   17fee:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   17ff2:	4770      	bx	lr
   17ff4:	4000b000 	.word	0x4000b000

00017ff8 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17ff8:	4b12      	ldr	r3, [pc, #72]	; (18044 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   17ffa:	b430      	push	{r4, r5}
   17ffc:	2101      	movs	r1, #1
   17ffe:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   18000:	2000      	movs	r0, #0
   18002:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   18004:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   18008:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1800c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   18010:	6019      	str	r1, [r3, #0]
}
   18012:	e005      	b.n	18020 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   18014:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   18018:	b932      	cbnz	r2, 18028 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1801a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1801e:	b11a      	cbz	r2, 18028 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   18020:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   18024:	2a00      	cmp	r2, #0
   18026:	d0f5      	beq.n	18014 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18028:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1802a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1802e:	2a00      	cmp	r2, #0
   18030:	d1e7      	bne.n	18002 <do_ecb+0xa>
   18032:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   18036:	2d00      	cmp	r5, #0
   18038:	d0e3      	beq.n	18002 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1803a:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1803c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   18040:	4770      	bx	lr
   18042:	bf00      	nop
   18044:	4000e000 	.word	0x4000e000

00018048 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   18048:	b570      	push	{r4, r5, r6, lr}
   1804a:	b08c      	sub	sp, #48	; 0x30
   1804c:	460e      	mov	r6, r1
   1804e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   18050:	4601      	mov	r1, r0
   18052:	2210      	movs	r2, #16
   18054:	4668      	mov	r0, sp
{
   18056:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   18058:	f7f3 fb9e 	bl	b798 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1805c:	2210      	movs	r2, #16
   1805e:	eb0d 0002 	add.w	r0, sp, r2
   18062:	4631      	mov	r1, r6
   18064:	f7f3 fb98 	bl	b798 <mem_rcopy>

	do_ecb(&ecb);
   18068:	4668      	mov	r0, sp
   1806a:	f7ff ffc5 	bl	17ff8 <do_ecb>

	if (cipher_text_le) {
   1806e:	b125      	cbz	r5, 1807a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   18070:	2210      	movs	r2, #16
   18072:	a908      	add	r1, sp, #32
   18074:	4628      	mov	r0, r5
   18076:	f7f3 fb8f 	bl	b798 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1807a:	b124      	cbz	r4, 18086 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1807c:	2210      	movs	r2, #16
   1807e:	a908      	add	r1, sp, #32
   18080:	4620      	mov	r0, r4
   18082:	f005 fcc3 	bl	1da0c <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   18086:	b00c      	add	sp, #48	; 0x30
   18088:	bd70      	pop	{r4, r5, r6, pc}
   1808a:	bf00      	nop

0001808c <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1808c:	4b04      	ldr	r3, [pc, #16]	; (180a0 <isr_radio+0x14>)
   1808e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   18092:	b123      	cbz	r3, 1809e <isr_radio+0x12>
		isr_cb(isr_cb_param);
   18094:	4a03      	ldr	r2, [pc, #12]	; (180a4 <isr_radio+0x18>)
   18096:	4b04      	ldr	r3, [pc, #16]	; (180a8 <isr_radio+0x1c>)
   18098:	6810      	ldr	r0, [r2, #0]
   1809a:	681b      	ldr	r3, [r3, #0]
   1809c:	4718      	bx	r3
}
   1809e:	4770      	bx	lr
   180a0:	40001000 	.word	0x40001000
   180a4:	200026b4 	.word	0x200026b4
   180a8:	200026b0 	.word	0x200026b0

000180ac <radio_isr_set>:
{
   180ac:	b538      	push	{r3, r4, r5, lr}
   180ae:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   180b0:	2001      	movs	r0, #1
{
   180b2:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   180b4:	f7eb fd06 	bl	3ac4 <arch_irq_disable>
	isr_cb = cb;
   180b8:	4b08      	ldr	r3, [pc, #32]	; (180dc <radio_isr_set+0x30>)
	isr_cb_param = param;
   180ba:	4a09      	ldr	r2, [pc, #36]	; (180e0 <radio_isr_set+0x34>)
	isr_cb = cb;
   180bc:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   180be:	4909      	ldr	r1, [pc, #36]	; (180e4 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   180c0:	4b09      	ldr	r3, [pc, #36]	; (180e8 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   180c2:	6015      	str	r5, [r2, #0]
   180c4:	2010      	movs	r0, #16
   180c6:	2202      	movs	r2, #2
   180c8:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   180cc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   180d0:	2001      	movs	r0, #1
}
   180d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   180d6:	f7eb bce5 	b.w	3aa4 <arch_irq_enable>
   180da:	bf00      	nop
   180dc:	200026b0 	.word	0x200026b0
   180e0:	200026b4 	.word	0x200026b4
   180e4:	40001000 	.word	0x40001000
   180e8:	e000e100 	.word	0xe000e100

000180ec <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   180ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   180f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   180f4:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   180f6:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   180fa:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   180fe:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   18102:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   18106:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1810a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1810e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   18112:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   18116:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1811a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1811e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   18122:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   18126:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1812a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1812e:	4770      	bx	lr

00018130 <radio_reset>:
{
   18130:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   18132:	2001      	movs	r0, #1
   18134:	f7eb fcc6 	bl	3ac4 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (radio_power ? RADIO_POWER_POWER_Enabled : RADIO_POWER_POWER_Disabled)
   18138:	4a0d      	ldr	r2, [pc, #52]	; (18170 <radio_reset+0x40>)
   1813a:	2100      	movs	r1, #0
   1813c:	2301      	movs	r3, #1
   1813e:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   18142:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   18146:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1814a:	490a      	ldr	r1, [pc, #40]	; (18174 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1814c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   18150:	f023 0301 	bic.w	r3, r3, #1
   18154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   18158:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1815c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   18160:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   18164:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   18168:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1816c:	bd10      	pop	{r4, pc}
   1816e:	bf00      	nop
   18170:	40001000 	.word	0x40001000
   18174:	4001f000 	.word	0x4001f000

00018178 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   18178:	4b06      	ldr	r3, [pc, #24]	; (18194 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1817a:	2802      	cmp	r0, #2
   1817c:	bf14      	ite	ne
   1817e:	2203      	movne	r2, #3
   18180:	2204      	moveq	r2, #4
   18182:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   18186:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1818a:	f042 0201 	orr.w	r2, r2, #1
   1818e:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   18192:	4770      	bx	lr
   18194:	40001000 	.word	0x40001000

00018198 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   18198:	4b01      	ldr	r3, [pc, #4]	; (181a0 <radio_tx_power_set+0x8>)
   1819a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1819e:	4770      	bx	lr
   181a0:	40001000 	.word	0x40001000

000181a4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   181a4:	4b01      	ldr	r3, [pc, #4]	; (181ac <radio_freq_chan_set+0x8>)
   181a6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   181aa:	4770      	bx	lr
   181ac:	40001000 	.word	0x40001000

000181b0 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   181b0:	4b07      	ldr	r3, [pc, #28]	; (181d0 <radio_whiten_iv_set+0x20>)
   181b2:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   181b6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   181ba:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   181be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   181c2:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   181c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   181ca:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   181ce:	4770      	bx	lr
   181d0:	40001000 	.word	0x40001000

000181d4 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   181d4:	4a0a      	ldr	r2, [pc, #40]	; (18200 <radio_aa_set+0x2c>)
   181d6:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   181d8:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   181da:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   181de:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   181e2:	78c3      	ldrb	r3, [r0, #3]
   181e4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   181e8:	7843      	ldrb	r3, [r0, #1]
   181ea:	f890 c002 	ldrb.w	ip, [r0, #2]
   181ee:	7801      	ldrb	r1, [r0, #0]
   181f0:	041b      	lsls	r3, r3, #16
   181f2:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   181f6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   181fa:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   181fe:	4770      	bx	lr
   18200:	40001000 	.word	0x40001000

00018204 <radio_pkt_configure>:
	switch (phy) {
   18204:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   18208:	2b02      	cmp	r3, #2
   1820a:	bf14      	ite	ne
   1820c:	f04f 0c00 	movne.w	ip, #0
   18210:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   18214:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   18216:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1821a:	bf48      	it	mi
   1821c:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   18220:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   18222:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   18226:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1822a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1822e:	4a0a      	ldr	r2, [pc, #40]	; (18258 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   18230:	4303      	orrs	r3, r0
   18232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   18236:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1823a:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1823e:	4b07      	ldr	r3, [pc, #28]	; (1825c <radio_pkt_configure+0x58>)
   18240:	4003      	ands	r3, r0
   18242:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   18246:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1824a:	4319      	orrs	r1, r3
   1824c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   18250:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   18254:	4770      	bx	lr
   18256:	bf00      	nop
   18258:	40001000 	.word	0x40001000
   1825c:	fef80000 	.word	0xfef80000

00018260 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   18260:	4b01      	ldr	r3, [pc, #4]	; (18268 <radio_pkt_rx_set+0x8>)
   18262:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   18266:	4770      	bx	lr
   18268:	40001000 	.word	0x40001000

0001826c <radio_pkt_tx_set>:
   1826c:	4b01      	ldr	r3, [pc, #4]	; (18274 <radio_pkt_tx_set+0x8>)
   1826e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   18272:	4770      	bx	lr
   18274:	40001000 	.word	0x40001000

00018278 <radio_tx_chain_delay_get>:
}
   18278:	2001      	movs	r0, #1
   1827a:	4770      	bx	lr

0001827c <radio_rx_ready_delay_get>:
}
   1827c:	2029      	movs	r0, #41	; 0x29
   1827e:	4770      	bx	lr

00018280 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   18280:	2802      	cmp	r0, #2
}
   18282:	bf14      	ite	ne
   18284:	200a      	movne	r0, #10
   18286:	2005      	moveq	r0, #5
   18288:	4770      	bx	lr
   1828a:	bf00      	nop

0001828c <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1828c:	4b01      	ldr	r3, [pc, #4]	; (18294 <radio_tx_enable+0x8>)
   1828e:	2201      	movs	r2, #1
   18290:	601a      	str	r2, [r3, #0]
}
   18292:	4770      	bx	lr
   18294:	40001000 	.word	0x40001000

00018298 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   18298:	4a07      	ldr	r2, [pc, #28]	; (182b8 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1829a:	4908      	ldr	r1, [pc, #32]	; (182bc <radio_disable+0x24>)
{
   1829c:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1829e:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   182a0:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   182a4:	2000      	movs	r0, #0
   182a6:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   182aa:	6053      	str	r3, [r2, #4]
}
   182ac:	bc10      	pop	{r4}
   182ae:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   182b0:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   182b4:	610b      	str	r3, [r1, #16]
}
   182b6:	4770      	bx	lr
   182b8:	4001f000 	.word	0x4001f000
   182bc:	40001000 	.word	0x40001000

000182c0 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   182c0:	4b04      	ldr	r3, [pc, #16]	; (182d4 <radio_status_reset+0x14>)
   182c2:	2200      	movs	r2, #0
   182c4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   182c8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   182cc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   182d0:	4770      	bx	lr
   182d2:	bf00      	nop
   182d4:	40001000 	.word	0x40001000

000182d8 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   182d8:	4b03      	ldr	r3, [pc, #12]	; (182e8 <radio_is_ready+0x10>)
   182da:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   182de:	3800      	subs	r0, #0
   182e0:	bf18      	it	ne
   182e2:	2001      	movne	r0, #1
   182e4:	4770      	bx	lr
   182e6:	bf00      	nop
   182e8:	40001000 	.word	0x40001000

000182ec <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   182ec:	4b03      	ldr	r3, [pc, #12]	; (182fc <radio_is_done+0x10>)
   182ee:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   182f2:	3800      	subs	r0, #0
   182f4:	bf18      	it	ne
   182f6:	2001      	movne	r0, #1
   182f8:	4770      	bx	lr
   182fa:	bf00      	nop
   182fc:	40001000 	.word	0x40001000

00018300 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   18300:	4b03      	ldr	r3, [pc, #12]	; (18310 <radio_is_idle+0x10>)
   18302:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   18306:	fab0 f080 	clz	r0, r0
   1830a:	0940      	lsrs	r0, r0, #5
   1830c:	4770      	bx	lr
   1830e:	bf00      	nop
   18310:	40001000 	.word	0x40001000

00018314 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   18314:	4b04      	ldr	r3, [pc, #16]	; (18328 <radio_crc_configure+0x14>)
   18316:	f240 1203 	movw	r2, #259	; 0x103
   1831a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1831e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   18322:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   18326:	4770      	bx	lr
   18328:	40001000 	.word	0x40001000

0001832c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1832c:	4b03      	ldr	r3, [pc, #12]	; (1833c <radio_crc_is_valid+0x10>)
   1832e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18332:	3800      	subs	r0, #0
   18334:	bf18      	it	ne
   18336:	2001      	movne	r0, #1
   18338:	4770      	bx	lr
   1833a:	bf00      	nop
   1833c:	40001000 	.word	0x40001000

00018340 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   18340:	4800      	ldr	r0, [pc, #0]	; (18344 <radio_pkt_empty_get+0x4>)
   18342:	4770      	bx	lr
   18344:	200025a8 	.word	0x200025a8

00018348 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   18348:	4800      	ldr	r0, [pc, #0]	; (1834c <radio_pkt_scratch_get+0x4>)
   1834a:	4770      	bx	lr
   1834c:	200025ac 	.word	0x200025ac

00018350 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18350:	4b1d      	ldr	r3, [pc, #116]	; (183c8 <radio_switch_complete_and_rx+0x78>)
{
   18352:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18354:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   18356:	4d1d      	ldr	r5, [pc, #116]	; (183cc <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   18358:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1835c:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1835e:	4e1c      	ldr	r6, [pc, #112]	; (183d0 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18360:	4c1c      	ldr	r4, [pc, #112]	; (183d4 <radio_switch_complete_and_rx+0x84>)
   18362:	4f1d      	ldr	r7, [pc, #116]	; (183d8 <radio_switch_complete_and_rx+0x88>)
   18364:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   18368:	f102 030c 	add.w	r3, r2, #12
   1836c:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1836e:	00d0      	lsls	r0, r2, #3
   18370:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18372:	0091      	lsls	r1, r2, #2
   18374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18378:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1837c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   18380:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18384:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   18388:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1838c:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18390:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18394:	4811      	ldr	r0, [pc, #68]	; (183dc <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18396:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1839a:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   1839e:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
   183a2:	2b2d      	cmp	r3, #45	; 0x2d
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   183a4:	bf8a      	itet	hi
   183a6:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   183aa:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   183ac:	3b2d      	subhi	r3, #45	; 0x2d
   183ae:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   183b2:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   183b4:	4b06      	ldr	r3, [pc, #24]	; (183d0 <radio_switch_complete_and_rx+0x80>)
   183b6:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   183ba:	f002 0201 	and.w	r2, r2, #1
   183be:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   183c2:	702a      	strb	r2, [r5, #0]
	 */
	sw_switch(SW_SWITCH_PREV_TX, SW_SWITCH_NEXT_RX,
		  SW_SWITCH_PREV_PHY_1M, SW_SWITCH_PREV_FLAGS_DONTCARE,
		  phy_rx, SW_SWITCH_NEXT_FLAGS_DONTCARE);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   183c4:	bcf0      	pop	{r4, r5, r6, r7}
   183c6:	4770      	bx	lr
   183c8:	40001000 	.word	0x40001000
   183cc:	20002a85 	.word	0x20002a85
   183d0:	4001f000 	.word	0x4001f000
   183d4:	40009140 	.word	0x40009140
   183d8:	4000110c 	.word	0x4000110c
   183dc:	40001004 	.word	0x40001004

000183e0 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx,
				  uint8_t phy_tx, uint8_t flags_tx)
{
   183e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   183e4:	4e28      	ldr	r6, [pc, #160]	; (18488 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   183e6:	4c29      	ldr	r4, [pc, #164]	; (1848c <radio_switch_complete_and_tx+0xac>)
   183e8:	4f29      	ldr	r7, [pc, #164]	; (18490 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   183ea:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 18494 <radio_switch_complete_and_tx+0xb4>
   183ee:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 18498 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   183f2:	2303      	movs	r3, #3
   183f4:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   183f8:	7821      	ldrb	r1, [r4, #0]
   183fa:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   183fe:	f101 030c 	add.w	r3, r1, #12
   18402:	b2db      	uxtb	r3, r3
   18404:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18406:	00cd      	lsls	r5, r1, #3
   18408:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1840c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   18410:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18414:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   18418:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1841c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18420:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   18424:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18428:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1842c:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   18430:	2a02      	cmp	r2, #2
   18432:	bf08      	it	eq
   18434:	462b      	moveq	r3, r5
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   18436:	ea4f 0c81 	mov.w	ip, r1, lsl #2
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1843a:	f242 42b8 	movw	r2, #9400	; 0x24b8
   1843e:	f241 3588 	movw	r5, #5000	; 0x1388
   18442:	2802      	cmp	r0, #2
   18444:	bf08      	it	eq
   18446:	462a      	moveq	r2, r5
   18448:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
   1844c:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
			delay = HAL_RADIO_NS2US_ROUND(
   18450:	4413      	add	r3, r2
   18452:	4a12      	ldr	r2, [pc, #72]	; (1849c <radio_switch_complete_and_tx+0xbc>)
   18454:	fba2 2303 	umull	r2, r3, r2, r3
	if (delay < SW_SWITCH_TIMER->CC[cc]) {
   18458:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
   1845c:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   18460:	bf85      	ittet	hi
   18462:	0998      	lsrhi	r0, r3, #6
				 (SW_SWITCH_TIMER->CC[cc] - delay));
   18464:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   18468:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1846a:	1a1b      	subhi	r3, r3, r0
   1846c:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   18470:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   18472:	4b08      	ldr	r3, [pc, #32]	; (18494 <radio_switch_complete_and_tx+0xb4>)
   18474:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1U;
   18478:	f001 0101 	and.w	r1, r1, #1
   1847c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   18480:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;

	sw_switch(SW_SWITCH_PREV_RX, SW_SWITCH_NEXT_TX,
		  phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   18482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18486:	bf00      	nop
   18488:	40001000 	.word	0x40001000
   1848c:	20002a85 	.word	0x20002a85
   18490:	40009140 	.word	0x40009140
   18494:	4001f000 	.word	0x4001f000
   18498:	4000110c 	.word	0x4000110c
   1849c:	10624dd3 	.word	0x10624dd3

000184a0 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   184a0:	4904      	ldr	r1, [pc, #16]	; (184b4 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   184a2:	4b05      	ldr	r3, [pc, #20]	; (184b8 <radio_switch_complete_and_disable+0x18>)
   184a4:	2003      	movs	r0, #3
   184a6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   184aa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   184ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   184b2:	4770      	bx	lr
   184b4:	40001000 	.word	0x40001000
   184b8:	4001f000 	.word	0x4001f000

000184bc <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   184bc:	4b02      	ldr	r3, [pc, #8]	; (184c8 <radio_rssi_status_reset+0xc>)
   184be:	2200      	movs	r2, #0
   184c0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   184c4:	4770      	bx	lr
   184c6:	bf00      	nop
   184c8:	40001000 	.word	0x40001000

000184cc <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   184cc:	4b03      	ldr	r3, [pc, #12]	; (184dc <radio_rssi_is_ready+0x10>)
   184ce:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   184d2:	3800      	subs	r0, #0
   184d4:	bf18      	it	ne
   184d6:	2001      	movne	r0, #1
   184d8:	4770      	bx	lr
   184da:	bf00      	nop
   184dc:	40001000 	.word	0x40001000

000184e0 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   184e0:	b410      	push	{r4}
   184e2:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   184e6:	ea4f 038c 	mov.w	r3, ip, lsl #2
   184ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   184ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   184f2:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   184f4:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   184f8:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   184fc:	8894      	ldrh	r4, [r2, #4]
   184fe:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   18502:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   18506:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1850a:	d1ec      	bne.n	184e6 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1850c:	4b03      	ldr	r3, [pc, #12]	; (1851c <radio_filter_configure+0x3c>)
}
   1850e:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   18510:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   18514:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   18518:	4770      	bx	lr
   1851a:	bf00      	nop
   1851c:	40001000 	.word	0x40001000

00018520 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   18520:	4a03      	ldr	r2, [pc, #12]	; (18530 <radio_filter_disable+0x10>)
   18522:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   18526:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1852a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1852e:	4770      	bx	lr
   18530:	40001000 	.word	0x40001000

00018534 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   18534:	4b02      	ldr	r3, [pc, #8]	; (18540 <radio_filter_status_reset+0xc>)
   18536:	2200      	movs	r2, #0
   18538:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1853c:	4770      	bx	lr
   1853e:	bf00      	nop
   18540:	40001000 	.word	0x40001000

00018544 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   18544:	4b03      	ldr	r3, [pc, #12]	; (18554 <radio_filter_has_match+0x10>)
   18546:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1854a:	3800      	subs	r0, #0
   1854c:	bf18      	it	ne
   1854e:	2001      	movne	r0, #1
   18550:	4770      	bx	lr
   18552:	bf00      	nop
   18554:	40001000 	.word	0x40001000

00018558 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   18558:	4b01      	ldr	r3, [pc, #4]	; (18560 <radio_filter_match_get+0x8>)
   1855a:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1855e:	4770      	bx	lr
   18560:	40001000 	.word	0x40001000

00018564 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   18564:	4904      	ldr	r1, [pc, #16]	; (18578 <radio_tmr_status_reset+0x14>)
   18566:	4b05      	ldr	r3, [pc, #20]	; (1857c <radio_tmr_status_reset+0x18>)
   18568:	4a05      	ldr	r2, [pc, #20]	; (18580 <radio_tmr_status_reset+0x1c>)
   1856a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1856e:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   18572:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   18576:	4770      	bx	lr
   18578:	4000b000 	.word	0x4000b000
   1857c:	4001f000 	.word	0x4001f000
   18580:	0e7000c0 	.word	0x0e7000c0

00018584 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   18584:	4b03      	ldr	r3, [pc, #12]	; (18594 <radio_tmr_tifs_set+0x10>)
   18586:	4a04      	ldr	r2, [pc, #16]	; (18598 <radio_tmr_tifs_set+0x14>)
   18588:	781b      	ldrb	r3, [r3, #0]
   1858a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1858e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   18592:	4770      	bx	lr
   18594:	20002a85 	.word	0x20002a85
   18598:	40009000 	.word	0x40009000

0001859c <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1859c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   185a0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   185a4:	4d31      	ldr	r5, [pc, #196]	; (1866c <radio_tmr_start+0xd0>)
   185a6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   185aa:	42ab      	cmp	r3, r5
{
   185ac:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   185ae:	d906      	bls.n	185be <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   185b0:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   185b4:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   185b8:	3901      	subs	r1, #1
		remainder += 30517578UL;
   185ba:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   185be:	4b2c      	ldr	r3, [pc, #176]	; (18670 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   185c0:	482c      	ldr	r0, [pc, #176]	; (18674 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   185c2:	4d2d      	ldr	r5, [pc, #180]	; (18678 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   185c4:	4e2d      	ldr	r6, [pc, #180]	; (1867c <radio_tmr_start+0xe0>)
   185c6:	2701      	movs	r7, #1
   185c8:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   185ca:	2700      	movs	r7, #0
   185cc:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   185d0:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   185d4:	2704      	movs	r7, #4
   185d6:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   185da:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   185dc:	2702      	movs	r7, #2
   185de:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   185e2:	4a27      	ldr	r2, [pc, #156]	; (18680 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   185e4:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   185e8:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   185ec:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   185f0:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   185f4:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   185f6:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   185fa:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   185fe:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   18602:	bb64      	cbnz	r4, 1865e <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   18604:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   18608:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1860c:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   18610:	4b1b      	ldr	r3, [pc, #108]	; (18680 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18612:	4a1c      	ldr	r2, [pc, #112]	; (18684 <radio_tmr_start+0xe8>)
   18614:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   18618:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1861a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1861c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 18688 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18620:	f8df e068 	ldr.w	lr, [pc, #104]	; 1868c <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18624:	f8df c068 	ldr.w	ip, [pc, #104]	; 18690 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18628:	4f1a      	ldr	r7, [pc, #104]	; (18694 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1862a:	4e1b      	ldr	r6, [pc, #108]	; (18698 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1862c:	4d1b      	ldr	r5, [pc, #108]	; (1869c <radio_tmr_start+0x100>)
   1862e:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   18630:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   18634:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   18638:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1863c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   18640:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18642:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18646:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1864a:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1864e:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   18652:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   18656:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1865a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1865e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   18662:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18666:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1866a:	e7d1      	b.n	18610 <radio_tmr_start+0x74>
   1866c:	7ff0bdbf 	.word	0x7ff0bdbf
   18670:	40008000 	.word	0x40008000
   18674:	431bde83 	.word	0x431bde83
   18678:	4000b000 	.word	0x4000b000
   1867c:	4000b148 	.word	0x4000b148
   18680:	4001f000 	.word	0x4001f000
   18684:	40009000 	.word	0x40009000
   18688:	4000110c 	.word	0x4000110c
   1868c:	4000900c 	.word	0x4000900c
   18690:	40009140 	.word	0x40009140
   18694:	4001f004 	.word	0x4001f004
   18698:	40009144 	.word	0x40009144
   1869c:	4001f00c 	.word	0x4001f00c

000186a0 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   186a0:	4b01      	ldr	r3, [pc, #4]	; (186a8 <radio_tmr_start_get+0x8>)
   186a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   186a6:	4770      	bx	lr
   186a8:	4000b000 	.word	0x4000b000

000186ac <radio_tmr_stop>:
   186ac:	4903      	ldr	r1, [pc, #12]	; (186bc <radio_tmr_stop+0x10>)
   186ae:	4a04      	ldr	r2, [pc, #16]	; (186c0 <radio_tmr_stop+0x14>)
   186b0:	2301      	movs	r3, #1
   186b2:	604b      	str	r3, [r1, #4]
   186b4:	610b      	str	r3, [r1, #16]
   186b6:	6053      	str	r3, [r2, #4]
   186b8:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   186ba:	4770      	bx	lr
   186bc:	40008000 	.word	0x40008000
   186c0:	40009000 	.word	0x40009000

000186c4 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   186c4:	4904      	ldr	r1, [pc, #16]	; (186d8 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   186c6:	4b05      	ldr	r3, [pc, #20]	; (186dc <radio_tmr_hcto_configure+0x18>)
   186c8:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   186cc:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   186d0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   186d4:	4770      	bx	lr
   186d6:	bf00      	nop
   186d8:	40008000 	.word	0x40008000
   186dc:	4001f000 	.word	0x4001f000

000186e0 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   186e0:	4b05      	ldr	r3, [pc, #20]	; (186f8 <radio_tmr_aa_capture+0x18>)
   186e2:	4806      	ldr	r0, [pc, #24]	; (186fc <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   186e4:	4906      	ldr	r1, [pc, #24]	; (18700 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   186e6:	4a07      	ldr	r2, [pc, #28]	; (18704 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   186e8:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   186ec:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   186f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   186f4:	4770      	bx	lr
   186f6:	bf00      	nop
   186f8:	4001f000 	.word	0x4001f000
   186fc:	40001100 	.word	0x40001100
   18700:	40008040 	.word	0x40008040
   18704:	04000080 	.word	0x04000080

00018708 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   18708:	4b01      	ldr	r3, [pc, #4]	; (18710 <radio_tmr_aa_get+0x8>)
   1870a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1870e:	4770      	bx	lr
   18710:	40008000 	.word	0x40008000

00018714 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   18714:	4b01      	ldr	r3, [pc, #4]	; (1871c <radio_tmr_aa_save+0x8>)
   18716:	6018      	str	r0, [r3, #0]
}
   18718:	4770      	bx	lr
   1871a:	bf00      	nop
   1871c:	200026b8 	.word	0x200026b8

00018720 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   18720:	4b01      	ldr	r3, [pc, #4]	; (18728 <radio_tmr_aa_restore+0x8>)
}
   18722:	6818      	ldr	r0, [r3, #0]
   18724:	4770      	bx	lr
   18726:	bf00      	nop
   18728:	200026b8 	.word	0x200026b8

0001872c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1872c:	4b01      	ldr	r3, [pc, #4]	; (18734 <radio_tmr_ready_get+0x8>)
   1872e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   18732:	4770      	bx	lr
   18734:	40008000 	.word	0x40008000

00018738 <radio_tmr_end_capture>:
   18738:	4b02      	ldr	r3, [pc, #8]	; (18744 <radio_tmr_end_capture+0xc>)
   1873a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1873e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	 */
#if defined(CONFIG_BT_CTLR_TIFS_HW) || !defined(CONFIG_SOC_SERIES_NRF53X)
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
#endif /* CONFIG_BT_CTLR_TIFS_HW || !CONFIG_SOC_SERIES_NRF53X */
}
   18742:	4770      	bx	lr
   18744:	4001f000 	.word	0x4001f000

00018748 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   18748:	4b01      	ldr	r3, [pc, #4]	; (18750 <radio_tmr_end_get+0x8>)
   1874a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1874e:	4770      	bx	lr
   18750:	40008000 	.word	0x40008000

00018754 <radio_tmr_tifs_base_get>:
   18754:	4b01      	ldr	r3, [pc, #4]	; (1875c <radio_tmr_tifs_base_get+0x8>)
   18756:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1875a:	4770      	bx	lr
   1875c:	40008000 	.word	0x40008000

00018760 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18760:	4b17      	ldr	r3, [pc, #92]	; (187c0 <radio_ccm_rx_pkt_set+0x60>)
{
   18762:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   18764:	2400      	movs	r4, #0
{
   18766:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18768:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1876a:	4816      	ldr	r0, [pc, #88]	; (187c4 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1876c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   18770:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   18774:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   18778:	4e13      	ldr	r6, [pc, #76]	; (187c8 <radio_ccm_rx_pkt_set+0x68>)
   1877a:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1877c:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   18780:	4812      	ldr	r0, [pc, #72]	; (187cc <radio_ccm_rx_pkt_set+0x6c>)
   18782:	2902      	cmp	r1, #2
   18784:	bf08      	it	eq
   18786:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   18788:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1878c:	4810      	ldr	r0, [pc, #64]	; (187d0 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1878e:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   18792:	4910      	ldr	r1, [pc, #64]	; (187d4 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   18794:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   18798:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1879c:	4a0e      	ldr	r2, [pc, #56]	; (187d8 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1879e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   187a2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   187a6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   187aa:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   187ae:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   187b2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   187b6:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   187b8:	bc70      	pop	{r4, r5, r6}
   187ba:	601a      	str	r2, [r3, #0]
   187bc:	4770      	bx	lr
   187be:	bf00      	nop
   187c0:	4000f000 	.word	0x4000f000
   187c4:	40001000 	.word	0x40001000
   187c8:	01010001 	.word	0x01010001
   187cc:	01000001 	.word	0x01000001
   187d0:	200025ac 	.word	0x200025ac
   187d4:	2000249c 	.word	0x2000249c
   187d8:	4001f000 	.word	0x4001f000

000187dc <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   187dc:	4b0f      	ldr	r3, [pc, #60]	; (1881c <radio_ccm_tx_pkt_set+0x40>)
{
   187de:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   187e0:	2200      	movs	r2, #0
{
   187e2:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   187e4:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   187e6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   187ea:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   187ee:	480c      	ldr	r0, [pc, #48]	; (18820 <radio_ccm_tx_pkt_set+0x44>)
   187f0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   187f4:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   187f8:	480a      	ldr	r0, [pc, #40]	; (18824 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   187fa:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   187fe:	4c0a      	ldr	r4, [pc, #40]	; (18828 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   18800:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   18804:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   18806:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1880a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1880e:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   18810:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   18814:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   18818:	6019      	str	r1, [r3, #0]
}
   1881a:	4770      	bx	lr
   1881c:	4000f000 	.word	0x4000f000
   18820:	01010000 	.word	0x01010000
   18824:	200025ac 	.word	0x200025ac
   18828:	2000249c 	.word	0x2000249c

0001882c <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1882c:	4a0e      	ldr	r2, [pc, #56]	; (18868 <radio_ccm_is_done+0x3c>)
   1882e:	2302      	movs	r3, #2
   18830:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   18834:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   18838:	b933      	cbnz	r3, 18848 <radio_ccm_is_done+0x1c>
		__WFE();
   1883a:	bf20      	wfe
		__SEV();
   1883c:	bf40      	sev
		__WFE();
   1883e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   18840:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   18844:	2b00      	cmp	r3, #0
   18846:	d0f8      	beq.n	1883a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   18848:	4b07      	ldr	r3, [pc, #28]	; (18868 <radio_ccm_is_done+0x3c>)
   1884a:	4a08      	ldr	r2, [pc, #32]	; (1886c <radio_ccm_is_done+0x40>)
   1884c:	2002      	movs	r0, #2
   1884e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   18852:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   18856:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1885a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1885e:	fab0 f080 	clz	r0, r0
   18862:	0940      	lsrs	r0, r0, #5
   18864:	4770      	bx	lr
   18866:	bf00      	nop
   18868:	4000f000 	.word	0x4000f000
   1886c:	e000e100 	.word	0xe000e100

00018870 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   18870:	4b03      	ldr	r3, [pc, #12]	; (18880 <radio_ccm_mic_is_valid+0x10>)
   18872:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   18876:	3800      	subs	r0, #0
   18878:	bf18      	it	ne
   1887a:	2001      	movne	r0, #1
   1887c:	4770      	bx	lr
   1887e:	bf00      	nop
   18880:	4000f000 	.word	0x4000f000

00018884 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   18884:	4a15      	ldr	r2, [pc, #84]	; (188dc <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   18886:	4b16      	ldr	r3, [pc, #88]	; (188e0 <radio_ar_configure+0x5c>)
{
   18888:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1888a:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1888e:	4e15      	ldr	r6, [pc, #84]	; (188e4 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   18890:	2703      	movs	r7, #3
   18892:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   18896:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   18898:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1889c:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1889e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   188a2:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   188a4:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   188a8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   188ac:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   188b0:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   188b4:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   188b8:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   188bc:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   188c0:	4909      	ldr	r1, [pc, #36]	; (188e8 <radio_ar_configure+0x64>)
   188c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   188c6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   188ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   188ce:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   188d2:	bcf0      	pop	{r4, r5, r6, r7}
   188d4:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   188d8:	4770      	bx	lr
   188da:	bf00      	nop
   188dc:	40001000 	.word	0x40001000
   188e0:	4000f000 	.word	0x4000f000
   188e4:	20002498 	.word	0x20002498
   188e8:	4001f000 	.word	0x4001f000

000188ec <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   188ec:	4b01      	ldr	r3, [pc, #4]	; (188f4 <radio_ar_match_get+0x8>)
   188ee:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   188f2:	4770      	bx	lr
   188f4:	4000f000 	.word	0x4000f000

000188f8 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   188f8:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   188fa:	4807      	ldr	r0, [pc, #28]	; (18918 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   188fc:	4c07      	ldr	r4, [pc, #28]	; (1891c <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   188fe:	4a08      	ldr	r2, [pc, #32]	; (18920 <radio_ar_status_reset+0x28>)
   18900:	2300      	movs	r3, #0
   18902:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   18906:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1890a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1890e:	bc10      	pop	{r4}
   18910:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   18914:	4770      	bx	lr
   18916:	bf00      	nop
   18918:	4000f000 	.word	0x4000f000
   1891c:	40001000 	.word	0x40001000
   18920:	4001f000 	.word	0x4001f000

00018924 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   18924:	4b08      	ldr	r3, [pc, #32]	; (18948 <radio_ar_has_match+0x24>)
   18926:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1892a:	b160      	cbz	r0, 18946 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1892c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   18930:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   18934:	b138      	cbz	r0, 18946 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   18936:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1893a:	b120      	cbz	r0, 18946 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1893c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   18940:	fab0 f080 	clz	r0, r0
   18944:	0940      	lsrs	r0, r0, #5
}
   18946:	4770      	bx	lr
   18948:	40001000 	.word	0x40001000

0001894c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1894c:	2902      	cmp	r1, #2
{
   1894e:	b510      	push	{r4, lr}
   18950:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   18952:	d00b      	beq.n	1896c <mayfly_enable_cb+0x20>
   18954:	4a0a      	ldr	r2, [pc, #40]	; (18980 <mayfly_enable_cb+0x34>)
   18956:	490b      	ldr	r1, [pc, #44]	; (18984 <mayfly_enable_cb+0x38>)
   18958:	480b      	ldr	r0, [pc, #44]	; (18988 <mayfly_enable_cb+0x3c>)
   1895a:	231e      	movs	r3, #30
   1895c:	f002 ff0a 	bl	1b774 <printk>
   18960:	4040      	eors	r0, r0
   18962:	f380 8811 	msr	BASEPRI, r0
   18966:	f04f 0003 	mov.w	r0, #3
   1896a:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1896c:	200b      	movs	r0, #11
	if (enable) {
   1896e:	b11c      	cbz	r4, 18978 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   18970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   18974:	f7eb b896 	b.w	3aa4 <arch_irq_enable>
}
   18978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1897c:	f7eb b8a2 	b.w	3ac4 <arch_irq_disable>
   18980:	000225c8 	.word	0x000225c8
   18984:	00022618 	.word	0x00022618
   18988:	0002180c 	.word	0x0002180c

0001898c <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1898c:	b129      	cbz	r1, 1899a <mayfly_is_enabled+0xe>
   1898e:	3901      	subs	r1, #1
   18990:	2901      	cmp	r1, #1
   18992:	d805      	bhi.n	189a0 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   18994:	200b      	movs	r0, #11
   18996:	f7eb b8a9 	b.w	3aec <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1899a:	2018      	movs	r0, #24
   1899c:	f7eb b8a6 	b.w	3aec <arch_irq_is_enabled>
{
   189a0:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   189a2:	4a07      	ldr	r2, [pc, #28]	; (189c0 <mayfly_is_enabled+0x34>)
   189a4:	4907      	ldr	r1, [pc, #28]	; (189c4 <mayfly_is_enabled+0x38>)
   189a6:	4808      	ldr	r0, [pc, #32]	; (189c8 <mayfly_is_enabled+0x3c>)
   189a8:	2336      	movs	r3, #54	; 0x36
   189aa:	f002 fee3 	bl	1b774 <printk>
   189ae:	4040      	eors	r0, r0
   189b0:	f380 8811 	msr	BASEPRI, r0
   189b4:	f04f 0003 	mov.w	r0, #3
   189b8:	df02      	svc	2
		break;
	}

	return 0;
}
   189ba:	2000      	movs	r0, #0
   189bc:	bd08      	pop	{r3, pc}
   189be:	bf00      	nop
   189c0:	000225c8 	.word	0x000225c8
   189c4:	000218a4 	.word	0x000218a4
   189c8:	0002180c 	.word	0x0002180c

000189cc <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   189cc:	4288      	cmp	r0, r1
   189ce:	d00b      	beq.n	189e8 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   189d0:	2801      	cmp	r0, #1
   189d2:	d003      	beq.n	189dc <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   189d4:	2802      	cmp	r0, #2
   189d6:	d009      	beq.n	189ec <mayfly_prio_is_equal+0x20>
   189d8:	2000      	movs	r0, #0
#endif
	       0;
}
   189da:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   189dc:	f1a1 0002 	sub.w	r0, r1, #2
   189e0:	fab0 f080 	clz	r0, r0
   189e4:	0940      	lsrs	r0, r0, #5
   189e6:	4770      	bx	lr
   189e8:	2001      	movs	r0, #1
   189ea:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   189ec:	f1a1 0001 	sub.w	r0, r1, #1
   189f0:	fab0 f080 	clz	r0, r0
   189f4:	0940      	lsrs	r0, r0, #5
   189f6:	4770      	bx	lr

000189f8 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   189f8:	2901      	cmp	r1, #1
{
   189fa:	b508      	push	{r3, lr}
	switch (callee_id) {
   189fc:	d00f      	beq.n	18a1e <mayfly_pend+0x26>
   189fe:	2902      	cmp	r1, #2
   18a00:	d00d      	beq.n	18a1e <mayfly_pend+0x26>
   18a02:	b191      	cbz	r1, 18a2a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   18a04:	4a0c      	ldr	r2, [pc, #48]	; (18a38 <mayfly_pend+0x40>)
   18a06:	490d      	ldr	r1, [pc, #52]	; (18a3c <mayfly_pend+0x44>)
   18a08:	480d      	ldr	r0, [pc, #52]	; (18a40 <mayfly_pend+0x48>)
   18a0a:	2367      	movs	r3, #103	; 0x67
   18a0c:	f002 feb2 	bl	1b774 <printk>
   18a10:	4040      	eors	r0, r0
   18a12:	f380 8811 	msr	BASEPRI, r0
   18a16:	f04f 0003 	mov.w	r0, #3
   18a1a:	df02      	svc	2
		break;
	}
}
   18a1c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18a1e:	4b09      	ldr	r3, [pc, #36]	; (18a44 <mayfly_pend+0x4c>)
   18a20:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18a24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18a28:	bd08      	pop	{r3, pc}
   18a2a:	4b06      	ldr	r3, [pc, #24]	; (18a44 <mayfly_pend+0x4c>)
   18a2c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18a30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18a34:	bd08      	pop	{r3, pc}
   18a36:	bf00      	nop
   18a38:	000225c8 	.word	0x000225c8
   18a3c:	000218a4 	.word	0x000218a4
   18a40:	0002180c 	.word	0x0002180c
   18a44:	e000e100 	.word	0xe000e100

00018a48 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   18a48:	2803      	cmp	r0, #3
{
   18a4a:	b510      	push	{r4, lr}
   18a4c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   18a4e:	d804      	bhi.n	18a5a <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   18a50:	4b11      	ldr	r3, [pc, #68]	; (18a98 <hal_ticker_instance0_caller_id_get+0x50>)
   18a52:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   18a54:	b18c      	cbz	r4, 18a7a <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   18a56:	4620      	mov	r0, r4
   18a58:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   18a5a:	4a10      	ldr	r2, [pc, #64]	; (18a9c <hal_ticker_instance0_caller_id_get+0x54>)
   18a5c:	4910      	ldr	r1, [pc, #64]	; (18aa0 <hal_ticker_instance0_caller_id_get+0x58>)
   18a5e:	4811      	ldr	r0, [pc, #68]	; (18aa4 <hal_ticker_instance0_caller_id_get+0x5c>)
   18a60:	232b      	movs	r3, #43	; 0x2b
   18a62:	f002 fe87 	bl	1b774 <printk>
   18a66:	4040      	eors	r0, r0
   18a68:	f380 8811 	msr	BASEPRI, r0
   18a6c:	f04f 0003 	mov.w	r0, #3
   18a70:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   18a72:	4b09      	ldr	r3, [pc, #36]	; (18a98 <hal_ticker_instance0_caller_id_get+0x50>)
   18a74:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   18a76:	2c00      	cmp	r4, #0
   18a78:	d1ed      	bne.n	18a56 <hal_ticker_instance0_caller_id_get+0xe>
   18a7a:	4a08      	ldr	r2, [pc, #32]	; (18a9c <hal_ticker_instance0_caller_id_get+0x54>)
   18a7c:	490a      	ldr	r1, [pc, #40]	; (18aa8 <hal_ticker_instance0_caller_id_get+0x60>)
   18a7e:	4809      	ldr	r0, [pc, #36]	; (18aa4 <hal_ticker_instance0_caller_id_get+0x5c>)
   18a80:	232e      	movs	r3, #46	; 0x2e
   18a82:	f002 fe77 	bl	1b774 <printk>
   18a86:	4040      	eors	r0, r0
   18a88:	f380 8811 	msr	BASEPRI, r0
   18a8c:	f04f 0003 	mov.w	r0, #3
   18a90:	df02      	svc	2
}
   18a92:	4620      	mov	r0, r4
   18a94:	bd10      	pop	{r4, pc}
   18a96:	bf00      	nop
   18a98:	000226d0 	.word	0x000226d0
   18a9c:	0002263c 	.word	0x0002263c
   18aa0:	0002268c 	.word	0x0002268c
   18aa4:	0002180c 	.word	0x0002180c
   18aa8:	000226ac 	.word	0x000226ac

00018aac <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   18aac:	3801      	subs	r0, #1
{
   18aae:	b510      	push	{r4, lr}
   18ab0:	461c      	mov	r4, r3
   18ab2:	2804      	cmp	r0, #4
   18ab4:	f200 8082 	bhi.w	18bbc <hal_ticker_instance0_sched+0x110>
   18ab8:	e8df f000 	tbb	[pc, r0]
   18abc:	3f302112 	.word	0x3f302112
   18ac0:	03          	.byte	0x03
   18ac1:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   18ac2:	2904      	cmp	r1, #4
   18ac4:	d04a      	beq.n	18b5c <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   18ac6:	4a44      	ldr	r2, [pc, #272]	; (18bd8 <hal_ticker_instance0_sched+0x12c>)
   18ac8:	4944      	ldr	r1, [pc, #272]	; (18bdc <hal_ticker_instance0_sched+0x130>)
   18aca:	4845      	ldr	r0, [pc, #276]	; (18be0 <hal_ticker_instance0_sched+0x134>)
   18acc:	23ba      	movs	r3, #186	; 0xba
   18ace:	f002 fe51 	bl	1b774 <printk>
   18ad2:	4040      	eors	r0, r0
   18ad4:	f380 8811 	msr	BASEPRI, r0
   18ad8:	f04f 0003 	mov.w	r0, #3
   18adc:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   18ade:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   18ae0:	2904      	cmp	r1, #4
   18ae2:	d043      	beq.n	18b6c <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   18ae4:	4a3c      	ldr	r2, [pc, #240]	; (18bd8 <hal_ticker_instance0_sched+0x12c>)
   18ae6:	493d      	ldr	r1, [pc, #244]	; (18bdc <hal_ticker_instance0_sched+0x130>)
   18ae8:	483d      	ldr	r0, [pc, #244]	; (18be0 <hal_ticker_instance0_sched+0x134>)
   18aea:	234e      	movs	r3, #78	; 0x4e
   18aec:	f002 fe42 	bl	1b774 <printk>
   18af0:	4040      	eors	r0, r0
   18af2:	f380 8811 	msr	BASEPRI, r0
   18af6:	f04f 0003 	mov.w	r0, #3
   18afa:	df02      	svc	2
}
   18afc:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   18afe:	2903      	cmp	r1, #3
   18b00:	d03c      	beq.n	18b7c <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   18b02:	4a35      	ldr	r2, [pc, #212]	; (18bd8 <hal_ticker_instance0_sched+0x12c>)
   18b04:	4935      	ldr	r1, [pc, #212]	; (18bdc <hal_ticker_instance0_sched+0x130>)
   18b06:	4836      	ldr	r0, [pc, #216]	; (18be0 <hal_ticker_instance0_sched+0x134>)
   18b08:	2365      	movs	r3, #101	; 0x65
   18b0a:	f002 fe33 	bl	1b774 <printk>
   18b0e:	4040      	eors	r0, r0
   18b10:	f380 8811 	msr	BASEPRI, r0
   18b14:	f04f 0003 	mov.w	r0, #3
   18b18:	df02      	svc	2
}
   18b1a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   18b1c:	2904      	cmp	r1, #4
   18b1e:	d035      	beq.n	18b8c <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   18b20:	4a2d      	ldr	r2, [pc, #180]	; (18bd8 <hal_ticker_instance0_sched+0x12c>)
   18b22:	492e      	ldr	r1, [pc, #184]	; (18bdc <hal_ticker_instance0_sched+0x130>)
   18b24:	482e      	ldr	r0, [pc, #184]	; (18be0 <hal_ticker_instance0_sched+0x134>)
   18b26:	237c      	movs	r3, #124	; 0x7c
   18b28:	f002 fe24 	bl	1b774 <printk>
   18b2c:	4040      	eors	r0, r0
   18b2e:	f380 8811 	msr	BASEPRI, r0
   18b32:	f04f 0003 	mov.w	r0, #3
   18b36:	df02      	svc	2
}
   18b38:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   18b3a:	2903      	cmp	r1, #3
   18b3c:	d036      	beq.n	18bac <hal_ticker_instance0_sched+0x100>
   18b3e:	2904      	cmp	r1, #4
   18b40:	d02c      	beq.n	18b9c <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   18b42:	4a25      	ldr	r2, [pc, #148]	; (18bd8 <hal_ticker_instance0_sched+0x12c>)
   18b44:	4925      	ldr	r1, [pc, #148]	; (18bdc <hal_ticker_instance0_sched+0x130>)
   18b46:	4826      	ldr	r0, [pc, #152]	; (18be0 <hal_ticker_instance0_sched+0x134>)
   18b48:	23a2      	movs	r3, #162	; 0xa2
   18b4a:	f002 fe13 	bl	1b774 <printk>
   18b4e:	4040      	eors	r0, r0
   18b50:	f380 8811 	msr	BASEPRI, r0
   18b54:	f04f 0003 	mov.w	r0, #3
   18b58:	df02      	svc	2
}
   18b5a:	bd10      	pop	{r4, pc}
			m.param = instance;
   18b5c:	4b21      	ldr	r3, [pc, #132]	; (18be4 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   18b5e:	2102      	movs	r1, #2
			m.param = instance;
   18b60:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   18b62:	2003      	movs	r0, #3
}
   18b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   18b68:	f7f2 beb2 	b.w	b8d0 <mayfly_enqueue>
			m.param = instance;
   18b6c:	4b1e      	ldr	r3, [pc, #120]	; (18be8 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   18b6e:	2102      	movs	r1, #2
			m.param = instance;
   18b70:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   18b72:	2000      	movs	r0, #0
}
   18b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   18b78:	f7f2 beaa 	b.w	b8d0 <mayfly_enqueue>
			m.param = instance;
   18b7c:	4b1b      	ldr	r3, [pc, #108]	; (18bec <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   18b7e:	2101      	movs	r1, #1
			m.param = instance;
   18b80:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   18b82:	4608      	mov	r0, r1
}
   18b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   18b88:	f7f2 bea2 	b.w	b8d0 <mayfly_enqueue>
			m.param = instance;
   18b8c:	4b18      	ldr	r3, [pc, #96]	; (18bf0 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   18b8e:	2102      	movs	r1, #2
			m.param = instance;
   18b90:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   18b92:	2001      	movs	r0, #1
}
   18b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   18b98:	f7f2 be9a 	b.w	b8d0 <mayfly_enqueue>
			m.param = instance;
   18b9c:	4b15      	ldr	r3, [pc, #84]	; (18bf4 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18b9e:	2102      	movs	r1, #2
			m.param = instance;
   18ba0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18ba2:	4608      	mov	r0, r1
}
   18ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18ba8:	f7f2 be92 	b.w	b8d0 <mayfly_enqueue>
			m.param = instance;
   18bac:	4b12      	ldr	r3, [pc, #72]	; (18bf8 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18bae:	2101      	movs	r1, #1
			m.param = instance;
   18bb0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18bb2:	2002      	movs	r0, #2
}
   18bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   18bb8:	f7f2 be8a 	b.w	b8d0 <mayfly_enqueue>
		LL_ASSERT(0);
   18bbc:	4a06      	ldr	r2, [pc, #24]	; (18bd8 <hal_ticker_instance0_sched+0x12c>)
   18bbe:	4907      	ldr	r1, [pc, #28]	; (18bdc <hal_ticker_instance0_sched+0x130>)
   18bc0:	4807      	ldr	r0, [pc, #28]	; (18be0 <hal_ticker_instance0_sched+0x134>)
   18bc2:	23c0      	movs	r3, #192	; 0xc0
   18bc4:	f002 fdd6 	bl	1b774 <printk>
   18bc8:	4040      	eors	r0, r0
   18bca:	f380 8811 	msr	BASEPRI, r0
   18bce:	f04f 0003 	mov.w	r0, #3
   18bd2:	df02      	svc	2
}
   18bd4:	bd10      	pop	{r4, pc}
   18bd6:	bf00      	nop
   18bd8:	0002263c 	.word	0x0002263c
   18bdc:	000218a4 	.word	0x000218a4
   18be0:	0002180c 	.word	0x0002180c
   18be4:	20000588 	.word	0x20000588
   18be8:	20000578 	.word	0x20000578
   18bec:	20000568 	.word	0x20000568
   18bf0:	200005b8 	.word	0x200005b8
   18bf4:	20000598 	.word	0x20000598
   18bf8:	200005a8 	.word	0x200005a8

00018bfc <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   18bfc:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   18bfe:	2000      	movs	r0, #0
   18c00:	f7ff b9f2 	b.w	17fe8 <cntr_cmp_set>

00018c04 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   18c04:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   18c06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18c0a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   18c0e:	3201      	adds	r2, #1
   18c10:	d008      	beq.n	18c24 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   18c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   18c16:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   18c1a:	f013 0301 	ands.w	r3, r3, #1
   18c1e:	d10a      	bne.n	18c36 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   18c20:	4618      	mov	r0, r3
}
   18c22:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   18c24:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   18c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18c2c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   18c2e:	4293      	cmp	r3, r2
   18c30:	d1ef      	bne.n	18c12 <hci_vendor_read_static_addr+0xe>
	return 0;
   18c32:	2000      	movs	r0, #0
}
   18c34:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   18c36:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   18c3a:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   18c3c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18c3e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   18c42:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18c46:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   18c48:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   18c4a:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   18c4e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   18c52:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   18c54:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   18c58:	f063 033f 	orn	r3, r3, #63	; 0x3f
   18c5c:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   18c5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   18c62:	3301      	adds	r3, #1
   18c64:	d03b      	beq.n	18cde <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   18c66:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   18c6a:	3301      	adds	r3, #1
   18c6c:	d037      	beq.n	18cde <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   18c6e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   18c72:	3301      	adds	r3, #1
   18c74:	d033      	beq.n	18cde <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   18c76:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   18c7a:	3301      	adds	r3, #1
   18c7c:	d02f      	beq.n	18cde <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   18c7e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   18c82:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   18c84:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18c86:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   18c8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18c8e:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   18c90:	f880 c009 	strb.w	ip, [r0, #9]
   18c94:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   18c96:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   18c9a:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   18c9c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18c9e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   18ca2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18ca6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   18ca8:	f880 c00d 	strb.w	ip, [r0, #13]
   18cac:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   18cae:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   18cb2:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   18cb4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   18cb6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   18cba:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   18cbe:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   18cc0:	73c3      	strb	r3, [r0, #15]
   18cc2:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   18cc6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   18cca:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   18ccc:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   18cce:	0a11      	lsrs	r1, r2, #8
   18cd0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18cd4:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   18cd6:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   18cd8:	7541      	strb	r1, [r0, #21]
		return 1;
   18cda:	2001      	movs	r0, #1
}
   18cdc:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   18cde:	2210      	movs	r2, #16
   18ce0:	2100      	movs	r1, #0
   18ce2:	3006      	adds	r0, #6
   18ce4:	f004 fe9d 	bl	1da22 <memset>
		return 1;
   18ce8:	2001      	movs	r0, #1
}
   18cea:	bd08      	pop	{r3, pc}

00018cec <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   18cec:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   18cee:	2210      	movs	r2, #16
{
   18cf0:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   18cf2:	2100      	movs	r1, #0
   18cf4:	f004 fe95 	bl	1da22 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   18cf8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   18cfc:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   18d00:	3201      	adds	r2, #1
   18d02:	d034      	beq.n	18d6e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   18d04:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   18d08:	3201      	adds	r2, #1
   18d0a:	d030      	beq.n	18d6e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   18d0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   18d10:	3201      	adds	r2, #1
   18d12:	d02c      	beq.n	18d6e <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   18d14:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   18d18:	3201      	adds	r2, #1
   18d1a:	d028      	beq.n	18d6e <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   18d1c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   18d20:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   18d22:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   18d24:	0a08      	lsrs	r0, r1, #8
   18d26:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   18d2a:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   18d2c:	70e0      	strb	r0, [r4, #3]
   18d2e:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   18d30:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   18d34:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   18d36:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   18d38:	0a08      	lsrs	r0, r1, #8
   18d3a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   18d3e:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   18d40:	71e0      	strb	r0, [r4, #7]
   18d42:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   18d44:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   18d48:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   18d4a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   18d4c:	0a08      	lsrs	r0, r1, #8
   18d4e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   18d52:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   18d54:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   18d56:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   18d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   18d5c:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   18d5e:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   18d60:	0a11      	lsrs	r1, r2, #8
   18d62:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18d66:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   18d68:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   18d6a:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   18d6c:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   18d6e:	4620      	mov	r0, r4
   18d70:	2210      	movs	r2, #16
}
   18d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   18d76:	2100      	movs	r1, #0
   18d78:	f004 be53 	b.w	1da22 <memset>

00018d7c <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   18d7c:	4b02      	ldr	r3, [pc, #8]	; (18d88 <net_buf_pool_get+0xc>)
   18d7e:	2228      	movs	r2, #40	; 0x28
   18d80:	fb02 3000 	mla	r0, r2, r0, r3
   18d84:	4770      	bx	lr
   18d86:	bf00      	nop
   18d88:	200007cc 	.word	0x200007cc

00018d8c <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18d8c:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   18d8e:	4b05      	ldr	r3, [pc, #20]	; (18da4 <net_buf_id+0x18>)
   18d90:	2128      	movs	r1, #40	; 0x28
   18d92:	fb01 3302 	mla	r3, r1, r2, r3
   18d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   18d98:	1ac0      	subs	r0, r0, r3
}
   18d9a:	4b03      	ldr	r3, [pc, #12]	; (18da8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   18d9c:	10c0      	asrs	r0, r0, #3
}
   18d9e:	4358      	muls	r0, r3
   18da0:	4770      	bx	lr
   18da2:	bf00      	nop
   18da4:	200007cc 	.word	0x200007cc
   18da8:	aaaaaaab 	.word	0xaaaaaaab

00018dac <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   18dac:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18dae:	4b0a      	ldr	r3, [pc, #40]	; (18dd8 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18db0:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18db2:	2428      	movs	r4, #40	; 0x28
   18db4:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   18db8:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   18dba:	6a1b      	ldr	r3, [r3, #32]
   18dbc:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   18dbe:	6823      	ldr	r3, [r4, #0]
   18dc0:	429a      	cmp	r2, r3
   18dc2:	bf94      	ite	ls
   18dc4:	600a      	strls	r2, [r1, #0]
   18dc6:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   18dc8:	f7ff ffe0 	bl	18d8c <net_buf_id>
   18dcc:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   18dd0:	fb02 3000 	mla	r0, r2, r0, r3
   18dd4:	bd10      	pop	{r4, pc}
   18dd6:	bf00      	nop
   18dd8:	200007cc 	.word	0x200007cc

00018ddc <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   18ddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18de0:	4605      	mov	r5, r0
   18de2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18de4:	4610      	mov	r0, r2
   18de6:	4619      	mov	r1, r3
{
   18de8:	4691      	mov	r9, r2
   18dea:	4698      	mov	r8, r3
   18dec:	4617      	mov	r7, r2
   18dee:	461e      	mov	r6, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   18df0:	f007 fce3 	bl	207ba <sys_clock_timeout_end_calc>
   18df4:	4682      	mov	sl, r0
   18df6:	468b      	mov	fp, r1
	__asm__ volatile(
   18df8:	f04f 0320 	mov.w	r3, #32
   18dfc:	f3ef 8111 	mrs	r1, BASEPRI
   18e00:	f383 8812 	msr	BASEPRI_MAX, r3
   18e04:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   18e08:	8b6b      	ldrh	r3, [r5, #26]
   18e0a:	2b00      	cmp	r3, #0
   18e0c:	d055      	beq.n	18eba <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   18e0e:	8b2a      	ldrh	r2, [r5, #24]
   18e10:	429a      	cmp	r2, r3
   18e12:	d93e      	bls.n	18e92 <net_buf_alloc_len+0xb6>
   18e14:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   18e16:	2200      	movs	r2, #0
   18e18:	2300      	movs	r3, #0
   18e1a:	4628      	mov	r0, r5
   18e1c:	f001 fc20 	bl	1a660 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   18e20:	9900      	ldr	r1, [sp, #0]
   18e22:	4604      	mov	r4, r0
   18e24:	2800      	cmp	r0, #0
   18e26:	d034      	beq.n	18e92 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   18e28:	f381 8811 	msr	BASEPRI, r1
   18e2c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   18e30:	9b01      	ldr	r3, [sp, #4]
   18e32:	2b00      	cmp	r3, #0
   18e34:	d051      	beq.n	18eda <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   18e36:	ea58 0309 	orrs.w	r3, r8, r9
   18e3a:	d00f      	beq.n	18e5c <net_buf_alloc_len+0x80>
   18e3c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   18e40:	bf08      	it	eq
   18e42:	f1b9 3fff 	cmpeq.w	r9, #4294967295	; 0xffffffff
   18e46:	d009      	beq.n	18e5c <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   18e48:	f002 faf2 	bl	1b430 <sys_clock_tick_get>
   18e4c:	ebba 0700 	subs.w	r7, sl, r0
   18e50:	eb6b 0601 	sbc.w	r6, fp, r1
   18e54:	2e00      	cmp	r6, #0
   18e56:	bfbc      	itt	lt
   18e58:	2700      	movlt	r7, #0
   18e5a:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18e5c:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   18e5e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 18ef0 <net_buf_alloc_len+0x114>
   18e62:	2228      	movs	r2, #40	; 0x28
   18e64:	fb02 8303 	mla	r3, r2, r3, r8
   18e68:	a901      	add	r1, sp, #4
   18e6a:	6a1b      	ldr	r3, [r3, #32]
   18e6c:	681b      	ldr	r3, [r3, #0]
   18e6e:	463a      	mov	r2, r7
   18e70:	681d      	ldr	r5, [r3, #0]
   18e72:	4620      	mov	r0, r4
   18e74:	4633      	mov	r3, r6
   18e76:	47a8      	blx	r5
   18e78:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   18e7a:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   18e7c:	bb70      	cbnz	r0, 18edc <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   18e7e:	79a0      	ldrb	r0, [r4, #6]
   18e80:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18e84:	4621      	mov	r1, r4
   18e86:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   18e8a:	f007 f9ff 	bl	2028c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   18e8e:	462c      	mov	r4, r5
}
   18e90:	e01f      	b.n	18ed2 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   18e92:	8b6b      	ldrh	r3, [r5, #26]
   18e94:	1e5a      	subs	r2, r3, #1
   18e96:	836a      	strh	r2, [r5, #26]
   18e98:	f381 8811 	msr	BASEPRI, r1
   18e9c:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   18ea0:	8b2c      	ldrh	r4, [r5, #24]
   18ea2:	1ae3      	subs	r3, r4, r3
   18ea4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   18ea6:	2018      	movs	r0, #24
   18ea8:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   18eac:	4810      	ldr	r0, [pc, #64]	; (18ef0 <net_buf_alloc_len+0x114>)
   18eae:	4b11      	ldr	r3, [pc, #68]	; (18ef4 <net_buf_alloc_len+0x118>)
   18eb0:	1a2d      	subs	r5, r5, r0
   18eb2:	10ed      	asrs	r5, r5, #3
   18eb4:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   18eb6:	71a5      	strb	r5, [r4, #6]
		goto success;
   18eb8:	e7ba      	b.n	18e30 <net_buf_alloc_len+0x54>
   18eba:	f381 8811 	msr	BASEPRI, r1
   18ebe:	f3bf 8f6f 	isb	sy
   18ec2:	464a      	mov	r2, r9
   18ec4:	4643      	mov	r3, r8
   18ec6:	4628      	mov	r0, r5
   18ec8:	f001 fbca 	bl	1a660 <z_impl_k_queue_get>
	if (!buf) {
   18ecc:	4604      	mov	r4, r0
   18ece:	2800      	cmp	r0, #0
   18ed0:	d1ae      	bne.n	18e30 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   18ed2:	4620      	mov	r0, r4
   18ed4:	b003      	add	sp, #12
   18ed6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   18eda:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   18edc:	2300      	movs	r3, #0
	buf->ref   = 1U;
   18ede:	2201      	movs	r2, #1
	buf->frags = NULL;
   18ee0:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   18ee2:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   18ee4:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   18ee6:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   18ee8:	6923      	ldr	r3, [r4, #16]
   18eea:	81e2      	strh	r2, [r4, #14]
   18eec:	60a3      	str	r3, [r4, #8]
	return buf;
   18eee:	e7f0      	b.n	18ed2 <net_buf_alloc_len+0xf6>
   18ef0:	200007cc 	.word	0x200007cc
   18ef4:	cccccccd 	.word	0xcccccccd

00018ef8 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   18ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18efc:	4d17      	ldr	r5, [pc, #92]	; (18f5c <net_buf_unref+0x64>)
   18efe:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   18f00:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   18f02:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   18f04:	b90c      	cbnz	r4, 18f0a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   18f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   18f0a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   18f0c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   18f10:	3b01      	subs	r3, #1
   18f12:	b2db      	uxtb	r3, r3
   18f14:	7123      	strb	r3, [r4, #4]
   18f16:	2b00      	cmp	r3, #0
   18f18:	d1f5      	bne.n	18f06 <net_buf_unref+0xe>
		if (buf->__buf) {
   18f1a:	6921      	ldr	r1, [r4, #16]
   18f1c:	b159      	cbz	r1, 18f36 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   18f1e:	7963      	ldrb	r3, [r4, #5]
   18f20:	079b      	lsls	r3, r3, #30
   18f22:	d407      	bmi.n	18f34 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   18f24:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   18f26:	fb07 5303 	mla	r3, r7, r3, r5
   18f2a:	4620      	mov	r0, r4
   18f2c:	6a1b      	ldr	r3, [r3, #32]
   18f2e:	681b      	ldr	r3, [r3, #0]
   18f30:	689b      	ldr	r3, [r3, #8]
   18f32:	4798      	blx	r3
			buf->__buf = NULL;
   18f34:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   18f36:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   18f38:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   18f3a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   18f3e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   18f40:	69db      	ldr	r3, [r3, #28]
   18f42:	b11b      	cbz	r3, 18f4c <net_buf_unref+0x54>
			pool->destroy(buf);
   18f44:	4620      	mov	r0, r4
   18f46:	4798      	blx	r3
{
   18f48:	4644      	mov	r4, r8
   18f4a:	e7db      	b.n	18f04 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   18f4c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18f50:	4621      	mov	r1, r4
   18f52:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   18f56:	f007 f999 	bl	2028c <k_queue_prepend>
}
   18f5a:	e7f5      	b.n	18f48 <net_buf_unref+0x50>
   18f5c:	200007cc 	.word	0x200007cc

00018f60 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   18f60:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   18f62:	4b09      	ldr	r3, [pc, #36]	; (18f88 <gpio_nrfx_init+0x28>)
   18f64:	781a      	ldrb	r2, [r3, #0]
   18f66:	b96a      	cbnz	r2, 18f84 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   18f68:	2101      	movs	r1, #1
   18f6a:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   18f6c:	2006      	movs	r0, #6
   18f6e:	2105      	movs	r1, #5
   18f70:	f7ea fdca 	bl	3b08 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   18f74:	2006      	movs	r0, #6
   18f76:	f7ea fd95 	bl	3aa4 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   18f7a:	4b04      	ldr	r3, [pc, #16]	; (18f8c <gpio_nrfx_init+0x2c>)
   18f7c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   18f80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   18f84:	2000      	movs	r0, #0
   18f86:	bd08      	pop	{r3, pc}
   18f88:	20002a86 	.word	0x20002a86
   18f8c:	40006000 	.word	0x40006000

00018f90 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18f90:	4b2b      	ldr	r3, [pc, #172]	; (19040 <gpio_nrfx_config+0xb0>)
{
   18f92:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   18f94:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18f96:	482b      	ldr	r0, [pc, #172]	; (19044 <gpio_nrfx_config+0xb4>)
   18f98:	4013      	ands	r3, r2
   18f9a:	4283      	cmp	r3, r0
   18f9c:	d041      	beq.n	19022 <gpio_nrfx_config+0x92>
   18f9e:	d80d      	bhi.n	18fbc <gpio_nrfx_config+0x2c>
   18fa0:	2b06      	cmp	r3, #6
   18fa2:	d015      	beq.n	18fd0 <gpio_nrfx_config+0x40>
   18fa4:	d805      	bhi.n	18fb2 <gpio_nrfx_config+0x22>
   18fa6:	b19b      	cbz	r3, 18fd0 <gpio_nrfx_config+0x40>
   18fa8:	2b02      	cmp	r3, #2
   18faa:	d03c      	beq.n	19026 <gpio_nrfx_config+0x96>
   18fac:	f06f 0015 	mvn.w	r0, #21
   18fb0:	e036      	b.n	19020 <gpio_nrfx_config+0x90>
   18fb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   18fb6:	d1f9      	bne.n	18fac <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   18fb8:	2301      	movs	r3, #1
   18fba:	e009      	b.n	18fd0 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   18fbc:	4822      	ldr	r0, [pc, #136]	; (19048 <gpio_nrfx_config+0xb8>)
   18fbe:	4283      	cmp	r3, r0
   18fc0:	d033      	beq.n	1902a <gpio_nrfx_config+0x9a>
   18fc2:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   18fc6:	d032      	beq.n	1902e <gpio_nrfx_config+0x9e>
   18fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   18fcc:	d1ee      	bne.n	18fac <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   18fce:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   18fd0:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   18fd2:	bf54      	ite	pl
   18fd4:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   18fd8:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18fda:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   18fde:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   18fe0:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   18fe4:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   18fe8:	d507      	bpl.n	18ffa <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   18fea:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   18fee:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   18ff0:	d01f      	beq.n	19032 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   18ff2:	2201      	movs	r2, #1
   18ff4:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   18ff6:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   18ffa:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   18ffc:	4c13      	ldr	r4, [pc, #76]	; (1904c <gpio_nrfx_config+0xbc>)
   18ffe:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   19000:	f001 011f 	and.w	r1, r1, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19004:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   19008:	bf18      	it	ne
   1900a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   1900e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
   19012:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   19016:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   1901a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1901e:	2000      	movs	r0, #0
}
   19020:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   19022:	2307      	movs	r3, #7
   19024:	e7d4      	b.n	18fd0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   19026:	2304      	movs	r3, #4
   19028:	e7d2      	b.n	18fd0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1902a:	2305      	movs	r3, #5
   1902c:	e7d0      	b.n	18fd0 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1902e:	2303      	movs	r3, #3
   19030:	e7ce      	b.n	18fd0 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   19032:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   19034:	bf42      	ittt	mi
   19036:	2201      	movmi	r2, #1
   19038:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1903a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1903e:	e7dc      	b.n	18ffa <gpio_nrfx_config+0x6a>
   19040:	00f00006 	.word	0x00f00006
   19044:	00100006 	.word	0x00100006
   19048:	00400002 	.word	0x00400002
   1904c:	50000300 	.word	0x50000300

00019050 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   19050:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   19054:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   19056:	4b08      	ldr	r3, [pc, #32]	; (19078 <nrf_gpio_cfg_sense_set+0x28>)
   19058:	2801      	cmp	r0, #1
   1905a:	bf18      	it	ne
   1905c:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   19060:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   19064:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   19068:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1906c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   19070:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   19074:	4770      	bx	lr
   19076:	bf00      	nop
   19078:	50000300 	.word	0x50000300

0001907c <check_level_trigger_pins>:
{
   1907c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return port->data;
   19080:	6903      	ldr	r3, [r0, #16]
	return port->config;
   19082:	f8d0 a004 	ldr.w	sl, [r0, #4]
	uint32_t out = data->pin_int_en;
   19086:	68de      	ldr	r6, [r3, #12]
        case 1: return NRF_P1;
   19088:	f8df b07c 	ldr.w	fp, [pc, #124]	; 19108 <check_level_trigger_pins+0x8c>
{
   1908c:	4688      	mov	r8, r1
	out &= ~data->trig_edge & ~data->double_edge;
   1908e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
   19092:	430a      	orrs	r2, r1
   19094:	ea26 0602 	bic.w	r6, r6, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   19098:	f8da 2004 	ldr.w	r2, [sl, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1909c:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
   1909e:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
   190a2:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   190a4:	ea26 0505 	bic.w	r5, r6, r5
	uint32_t check_pins = level_pins;
   190a8:	4637      	mov	r7, r6
	uint32_t bit = 1U << pin;
   190aa:	2401      	movs	r4, #1
	uint32_t pin = 0U;
   190ac:	f04f 0900 	mov.w	r9, #0
	while (check_pins) {
   190b0:	b917      	cbnz	r7, 190b8 <check_level_trigger_pins+0x3c>
}
   190b2:	4628      	mov	r0, r5
   190b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (check_pins & bit) {
   190b8:	423c      	tst	r4, r7
   190ba:	d021      	beq.n	19100 <check_level_trigger_pins+0x84>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   190bc:	f89a 3008 	ldrb.w	r3, [sl, #8]
   190c0:	f009 001f 	and.w	r0, r9, #31
			if (!(level_pins & bit)) {
   190c4:	4234      	tst	r4, r6
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   190c6:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
			if (!(level_pins & bit)) {
   190ca:	d114      	bne.n	190f6 <check_level_trigger_pins+0x7a>
    return pin_number >> 5;
   190cc:	0942      	lsrs	r2, r0, #5
        case 1: return NRF_P1;
   190ce:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   190d0:	f000 031f 	and.w	r3, r0, #31
        case 1: return NRF_P1;
   190d4:	bf14      	ite	ne
   190d6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
   190da:	465a      	moveq	r2, fp
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   190dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   190e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   190e4:	f3c3 4301 	ubfx	r3, r3, #16, #2
				if (high) {
   190e8:	2b02      	cmp	r3, #2
					*sense_levels |= bit;
   190ea:	bf02      	ittt	eq
   190ec:	f8d8 3000 	ldreq.w	r3, [r8]
   190f0:	4323      	orreq	r3, r4
   190f2:	f8c8 3000 	streq.w	r3, [r8]
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   190f6:	2100      	movs	r1, #0
   190f8:	f7ff ffaa 	bl	19050 <nrf_gpio_cfg_sense_set>
			check_pins &= ~bit;
   190fc:	ea27 0704 	bic.w	r7, r7, r4
		++pin;
   19100:	f109 0901 	add.w	r9, r9, #1
		bit <<= 1;
   19104:	0064      	lsls	r4, r4, #1
   19106:	e7d3      	b.n	190b0 <check_level_trigger_pins+0x34>
   19108:	50000300 	.word	0x50000300

0001910c <gpiote_event_handler>:
{
   1910c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1910e:	2400      	movs	r4, #0
{
   19110:	b085      	sub	sp, #20
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   19112:	e9cd 4400 	strd	r4, r4, [sp]
	uint32_t sense_levels[GPIO_COUNT] = {0};
   19116:	e9cd 4402 	strd	r4, r4, [sp, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1911a:	4e28      	ldr	r6, [pc, #160]	; (191bc <gpiote_event_handler+0xb0>)
   1911c:	f8d6 517c 	ldr.w	r5, [r6, #380]	; 0x17c
	if (port_event) {
   19120:	b16d      	cbz	r5, 1913e <gpiote_event_handler+0x32>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
   19122:	a902      	add	r1, sp, #8
   19124:	4826      	ldr	r0, [pc, #152]	; (191c0 <gpiote_event_handler+0xb4>)
   19126:	f7ff ffa9 	bl	1907c <check_level_trigger_pins>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1912a:	a903      	add	r1, sp, #12
		fired_triggers[0] =
   1912c:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
   1912e:	4825      	ldr	r0, [pc, #148]	; (191c4 <gpiote_event_handler+0xb8>)
   19130:	f7ff ffa4 	bl	1907c <check_level_trigger_pins>
		fired_triggers[1] =
   19134:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19136:	f8c6 417c 	str.w	r4, [r6, #380]	; 0x17c
   1913a:	f8d6 317c 	ldr.w	r3, [r6, #380]	; 0x17c
{
   1913e:	4922      	ldr	r1, [pc, #136]	; (191c8 <gpiote_event_handler+0xbc>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   19140:	4c1e      	ldr	r4, [pc, #120]	; (191bc <gpiote_event_handler+0xb0>)
   19142:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   19144:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19146:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   19148:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
   1914c:	fa06 f002 	lsl.w	r0, r6, r2
   19150:	4218      	tst	r0, r3
   19152:	d016      	beq.n	19182 <gpiote_event_handler+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   19154:	680b      	ldr	r3, [r1, #0]
   19156:	b1a3      	cbz	r3, 19182 <gpiote_event_handler+0x76>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   19158:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1915c:	af04      	add	r7, sp, #16
   1915e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   19162:	f8c1 c000 	str.w	ip, [r1]
   19166:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1916a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1916e:	f3c3 2304 	ubfx	r3, r3, #8, #5
   19172:	f850 7c10 	ldr.w	r7, [r0, #-16]
   19176:	fa06 f303 	lsl.w	r3, r6, r3
   1917a:	433b      	orrs	r3, r7
   1917c:	f840 3c10 	str.w	r3, [r0, #-16]
   19180:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19182:	3201      	adds	r2, #1
   19184:	2a08      	cmp	r2, #8
   19186:	f101 0104 	add.w	r1, r1, #4
   1918a:	d1dd      	bne.n	19148 <gpiote_event_handler+0x3c>
	if (fired_triggers[0]) {
   1918c:	9a00      	ldr	r2, [sp, #0]
   1918e:	b122      	cbz	r2, 1919a <gpiote_event_handler+0x8e>
	gpio_fire_callbacks(list, port, pins);
   19190:	4b0e      	ldr	r3, [pc, #56]	; (191cc <gpiote_event_handler+0xc0>)
   19192:	490b      	ldr	r1, [pc, #44]	; (191c0 <gpiote_event_handler+0xb4>)
   19194:	6858      	ldr	r0, [r3, #4]
   19196:	f006 fe2c 	bl	1fdf2 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1919a:	9a01      	ldr	r2, [sp, #4]
   1919c:	b122      	cbz	r2, 191a8 <gpiote_event_handler+0x9c>
	gpio_fire_callbacks(list, port, pins);
   1919e:	4b0c      	ldr	r3, [pc, #48]	; (191d0 <gpiote_event_handler+0xc4>)
   191a0:	4908      	ldr	r1, [pc, #32]	; (191c4 <gpiote_event_handler+0xb8>)
   191a2:	6858      	ldr	r0, [r3, #4]
   191a4:	f006 fe25 	bl	1fdf2 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   191a8:	b12d      	cbz	r5, 191b6 <gpiote_event_handler+0xaa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   191aa:	4805      	ldr	r0, [pc, #20]	; (191c0 <gpiote_event_handler+0xb4>)
   191ac:	f006 fe32 	bl	1fe14 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   191b0:	4804      	ldr	r0, [pc, #16]	; (191c4 <gpiote_event_handler+0xb8>)
   191b2:	f006 fe2f 	bl	1fe14 <cfg_level_pins>
}
   191b6:	b005      	add	sp, #20
   191b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   191ba:	bf00      	nop
   191bc:	40006000 	.word	0x40006000
   191c0:	00020c0c 	.word	0x00020c0c
   191c4:	00020c24 	.word	0x00020c24
   191c8:	40006100 	.word	0x40006100
   191cc:	200026f4 	.word	0x200026f4
   191d0:	20002710 	.word	0x20002710

000191d4 <gpio_nrfx_pin_interrupt_configure>:
{
   191d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   191d6:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   191d8:	6842      	ldr	r2, [r0, #4]
	return port->data;
   191da:	6907      	ldr	r7, [r0, #16]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   191dc:	7a12      	ldrb	r2, [r2, #8]
   191de:	f001 051f 	and.w	r5, r1, #31
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   191e2:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   191e6:	460e      	mov	r6, r1
   191e8:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
   191ec:	d110      	bne.n	19210 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   191ee:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   191f0:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   191f2:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   191f6:	4961      	ldr	r1, [pc, #388]	; (1937c <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   191f8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   191fc:	bf18      	it	ne
   191fe:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   19202:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   19206:	07d0      	lsls	r0, r2, #31
   19208:	d507      	bpl.n	1921a <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   1920a:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1920e:	e09a      	b.n	19346 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19210:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   19214:	68f9      	ldr	r1, [r7, #12]
   19216:	f000 8098 	beq.w	1934a <gpio_nrfx_pin_interrupt_configure+0x176>
   1921a:	68fa      	ldr	r2, [r7, #12]
   1921c:	2101      	movs	r1, #1
   1921e:	40b1      	lsls	r1, r6
   19220:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   19222:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   19224:	60f9      	str	r1, [r7, #12]
   19226:	2101      	movs	r1, #1
   19228:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1922a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1922e:	bf0c      	ite	eq
   19230:	430a      	orreq	r2, r1
   19232:	438a      	bicne	r2, r1
   19234:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   19236:	69ba      	ldr	r2, [r7, #24]
   19238:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1923c:	bf0c      	ite	eq
   1923e:	430a      	orreq	r2, r1
   19240:	438a      	bicne	r2, r1
   19242:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   19244:	693a      	ldr	r2, [r7, #16]
   19246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1924a:	bf0c      	ite	eq
   1924c:	4311      	orreq	r1, r2
   1924e:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   19252:	4a4b      	ldr	r2, [pc, #300]	; (19380 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   19254:	6139      	str	r1, [r7, #16]
   19256:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1925a:	2000      	movs	r0, #0
   1925c:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1925e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   19262:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   19266:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1926a:	428d      	cmp	r5, r1
   1926c:	d172      	bne.n	19354 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   1926e:	fa23 f100 	lsr.w	r1, r3, r0
   19272:	07c9      	lsls	r1, r1, #31
   19274:	d56e      	bpl.n	19354 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   19276:	0083      	lsls	r3, r0, #2
   19278:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1927c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19280:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   19284:	f021 0101 	bic.w	r1, r1, #1
   19288:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1928c:	2301      	movs	r3, #1
   1928e:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   19290:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   19294:	b2c0      	uxtb	r0, r0
   19296:	f000 fd6d 	bl	19d74 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1929a:	4628      	mov	r0, r5
   1929c:	2100      	movs	r1, #0
   1929e:	f7ff fed7 	bl	19050 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   192a2:	68f8      	ldr	r0, [r7, #12]
   192a4:	40f0      	lsrs	r0, r6
   192a6:	f010 0001 	ands.w	r0, r0, #1
   192aa:	d04c      	beq.n	19346 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   192ac:	6978      	ldr	r0, [r7, #20]
   192ae:	40f0      	lsrs	r0, r6
   192b0:	f010 0401 	ands.w	r4, r0, #1
   192b4:	d055      	beq.n	19362 <gpio_nrfx_pin_interrupt_configure+0x18e>
				if (data->double_edge & BIT(pin)) {
   192b6:	69bb      	ldr	r3, [r7, #24]
   192b8:	40f3      	lsrs	r3, r6
   192ba:	07db      	lsls	r3, r3, #31
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   192bc:	bf5f      	itttt	pl
   192be:	6939      	ldrpl	r1, [r7, #16]
   192c0:	fa21 f606 	lsrpl.w	r6, r1, r6
   192c4:	f006 0601 	andpl.w	r6, r6, #1
   192c8:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   192cc:	f10d 0007 	add.w	r0, sp, #7
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
   192d0:	bf54      	ite	pl
   192d2:	b2f6      	uxtbpl	r6, r6
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
   192d4:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   192d6:	f000 fd6d 	bl	19db4 <nrfx_gpiote_channel_alloc>
   192da:	4b2a      	ldr	r3, [pc, #168]	; (19384 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   192dc:	4298      	cmp	r0, r3
   192de:	d13d      	bne.n	1935c <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   192e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   192e4:	0093      	lsls	r3, r2, #2
   192e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   192ea:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   192ee:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   192f0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   192f4:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   192f8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   192fc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   19300:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   19304:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   19308:	430d      	orrs	r5, r1
   1930a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1930e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   19312:	0093      	lsls	r3, r2, #2
   19314:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   19318:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1931c:	2000      	movs	r0, #0
   1931e:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   19320:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19324:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   19326:	008b      	lsls	r3, r1, #2
   19328:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1932c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   19330:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   19334:	f042 0201 	orr.w	r2, r2, #1
   19338:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1933c:	4a10      	ldr	r2, [pc, #64]	; (19380 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1933e:	2301      	movs	r3, #1
   19340:	408b      	lsls	r3, r1
   19342:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   19346:	b003      	add	sp, #12
   19348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1934a:	2201      	movs	r2, #1
   1934c:	40b2      	lsls	r2, r6
   1934e:	ea21 0102 	bic.w	r1, r1, r2
   19352:	e766      	b.n	19222 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   19354:	3001      	adds	r0, #1
   19356:	2808      	cmp	r0, #8
   19358:	d181      	bne.n	1925e <gpio_nrfx_pin_interrupt_configure+0x8a>
   1935a:	e79e      	b.n	1929a <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1935c:	f06f 0012 	mvn.w	r0, #18
   19360:	e7f1      	b.n	19346 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   19362:	6939      	ldr	r1, [r7, #16]
   19364:	40f1      	lsrs	r1, r6
   19366:	f001 0101 	and.w	r1, r1, #1
   1936a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1936e:	4628      	mov	r0, r5
   19370:	b2c9      	uxtb	r1, r1
   19372:	f7ff fe6d 	bl	19050 <nrf_gpio_cfg_sense_set>
	int res = 0;
   19376:	4620      	mov	r0, r4
   19378:	e7e5      	b.n	19346 <gpio_nrfx_pin_interrupt_configure+0x172>
   1937a:	bf00      	nop
   1937c:	50000300 	.word	0x50000300
   19380:	40006000 	.word	0x40006000
   19384:	0bad0000 	.word	0x0bad0000

00019388 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   19388:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1938a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1938e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   19390:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   19392:	6002      	str	r2, [r0, #0]
}
   19394:	4802      	ldr	r0, [pc, #8]	; (193a0 <nrf_gpio_pin_port_decode+0x18>)
   19396:	bf18      	it	ne
   19398:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1939c:	4770      	bx	lr
   1939e:	bf00      	nop
   193a0:	50000300 	.word	0x50000300

000193a4 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   193a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   193a6:	794b      	ldrb	r3, [r1, #5]
   193a8:	2b01      	cmp	r3, #1
   193aa:	d02a      	beq.n	19402 <uarte_nrfx_configure+0x5e>
   193ac:	2b03      	cmp	r3, #3
   193ae:	d125      	bne.n	193fc <uarte_nrfx_configure+0x58>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   193b0:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   193b2:	798b      	ldrb	r3, [r1, #6]
   193b4:	2b03      	cmp	r3, #3
   193b6:	d121      	bne.n	193fc <uarte_nrfx_configure+0x58>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   193b8:	79cc      	ldrb	r4, [r1, #7]
   193ba:	b12c      	cbz	r4, 193c8 <uarte_nrfx_configure+0x24>
   193bc:	2c01      	cmp	r4, #1
   193be:	d11d      	bne.n	193fc <uarte_nrfx_configure+0x58>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   193c0:	6843      	ldr	r3, [r0, #4]
   193c2:	685b      	ldr	r3, [r3, #4]
   193c4:	079b      	lsls	r3, r3, #30
   193c6:	d019      	beq.n	193fc <uarte_nrfx_configure+0x58>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   193c8:	790a      	ldrb	r2, [r1, #4]
   193ca:	b112      	cbz	r2, 193d2 <uarte_nrfx_configure+0x2e>
   193cc:	2a02      	cmp	r2, #2
   193ce:	d115      	bne.n	193fc <uarte_nrfx_configure+0x58>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   193d0:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   193d2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   193d4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   193d6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   193da:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   193dc:	d065      	beq.n	194aa <uarte_nrfx_configure+0x106>
   193de:	d82d      	bhi.n	1943c <uarte_nrfx_configure+0x98>
   193e0:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   193e4:	d064      	beq.n	194b0 <uarte_nrfx_configure+0x10c>
   193e6:	d816      	bhi.n	19416 <uarte_nrfx_configure+0x72>
   193e8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   193ec:	d062      	beq.n	194b4 <uarte_nrfx_configure+0x110>
   193ee:	d80a      	bhi.n	19406 <uarte_nrfx_configure+0x62>
   193f0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   193f4:	d061      	beq.n	194ba <uarte_nrfx_configure+0x116>
   193f6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   193fa:	d061      	beq.n	194c0 <uarte_nrfx_configure+0x11c>
   193fc:	f06f 0085 	mvn.w	r0, #133	; 0x85
   19400:	e052      	b.n	194a8 <uarte_nrfx_configure+0x104>
	switch (cfg->stop_bits) {
   19402:	2600      	movs	r6, #0
   19404:	e7d5      	b.n	193b2 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   19406:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1940a:	d05c      	beq.n	194c6 <uarte_nrfx_configure+0x122>
   1940c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   19410:	d1f4      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   19412:	4b37      	ldr	r3, [pc, #220]	; (194f0 <uarte_nrfx_configure+0x14c>)
   19414:	e03c      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   19416:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1941a:	d057      	beq.n	194cc <uarte_nrfx_configure+0x128>
   1941c:	d807      	bhi.n	1942e <uarte_nrfx_configure+0x8a>
   1941e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   19422:	d055      	beq.n	194d0 <uarte_nrfx_configure+0x12c>
   19424:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   19428:	d1e8      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1942a:	4b32      	ldr	r3, [pc, #200]	; (194f4 <uarte_nrfx_configure+0x150>)
   1942c:	e030      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1942e:	f647 2712 	movw	r7, #31250	; 0x7a12
   19432:	42bb      	cmp	r3, r7
   19434:	d1e2      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   19436:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1943a:	e029      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1943c:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   19440:	d048      	beq.n	194d4 <uarte_nrfx_configure+0x130>
   19442:	d813      	bhi.n	1946c <uarte_nrfx_configure+0xc8>
   19444:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   19448:	d047      	beq.n	194da <uarte_nrfx_configure+0x136>
   1944a:	d809      	bhi.n	19460 <uarte_nrfx_configure+0xbc>
   1944c:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   19450:	42bb      	cmp	r3, r7
   19452:	d044      	beq.n	194de <uarte_nrfx_configure+0x13a>
   19454:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   19458:	d1d0      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1945a:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1945e:	e017      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   19460:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   19464:	d1ca      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   19466:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1946a:	e011      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   1946c:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   19470:	d038      	beq.n	194e4 <uarte_nrfx_configure+0x140>
   19472:	d808      	bhi.n	19486 <uarte_nrfx_configure+0xe2>
   19474:	4f20      	ldr	r7, [pc, #128]	; (194f8 <uarte_nrfx_configure+0x154>)
   19476:	42bb      	cmp	r3, r7
   19478:	d037      	beq.n	194ea <uarte_nrfx_configure+0x146>
   1947a:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1947e:	d1bd      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   19480:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   19484:	e004      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   19486:	4f1d      	ldr	r7, [pc, #116]	; (194fc <uarte_nrfx_configure+0x158>)
   19488:	42bb      	cmp	r3, r7
   1948a:	d1b7      	bne.n	193fc <uarte_nrfx_configure+0x58>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1948c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   19490:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   19494:	6903      	ldr	r3, [r0, #16]
   19496:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   19498:	4334      	orrs	r4, r6
   1949a:	4322      	orrs	r2, r4
   1949c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1949e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   194a2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   194a6:	2000      	movs	r0, #0
}
   194a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   194aa:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   194ae:	e7ef      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   194b0:	4b13      	ldr	r3, [pc, #76]	; (19500 <uarte_nrfx_configure+0x15c>)
   194b2:	e7ed      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   194b4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   194b8:	e7ea      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = 0x00014000;
   194ba:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   194be:	e7e7      	b.n	19490 <uarte_nrfx_configure+0xec>
	switch (baudrate) {
   194c0:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   194c4:	e7e4      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   194c6:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   194ca:	e7e1      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   194cc:	4b0d      	ldr	r3, [pc, #52]	; (19504 <uarte_nrfx_configure+0x160>)
   194ce:	e7df      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   194d0:	4b0d      	ldr	r3, [pc, #52]	; (19508 <uarte_nrfx_configure+0x164>)
   194d2:	e7dd      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   194d4:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   194d8:	e7da      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   194da:	4b0c      	ldr	r3, [pc, #48]	; (1950c <uarte_nrfx_configure+0x168>)
   194dc:	e7d8      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   194de:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   194e2:	e7d5      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   194e4:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   194e8:	e7d2      	b.n	19490 <uarte_nrfx_configure+0xec>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   194ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   194ee:	e7cf      	b.n	19490 <uarte_nrfx_configure+0xec>
   194f0:	0013b000 	.word	0x0013b000
   194f4:	004ea000 	.word	0x004ea000
   194f8:	0003d090 	.word	0x0003d090
   194fc:	000f4240 	.word	0x000f4240
   19500:	00275000 	.word	0x00275000
   19504:	0075c000 	.word	0x0075c000
   19508:	003af000 	.word	0x003af000
   1950c:	013a9000 	.word	0x013a9000

00019510 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   19510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->data;
   19512:	6906      	ldr	r6, [r0, #16]
{
   19514:	4605      	mov	r5, r0
   19516:	460f      	mov	r7, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   19518:	f006 fe15 	bl	20146 <k_is_in_isr>
   1951c:	b910      	cbnz	r0, 19524 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   1951e:	4b2c      	ldr	r3, [pc, #176]	; (195d0 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
   19520:	781b      	ldrb	r3, [r3, #0]
   19522:	b983      	cbnz	r3, 19546 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   19524:	f04f 0320 	mov.w	r3, #32
   19528:	f3ef 8411 	mrs	r4, BASEPRI
   1952c:	f383 8812 	msr	BASEPRI_MAX, r3
   19530:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   19534:	6868      	ldr	r0, [r5, #4]
   19536:	f006 fcb5 	bl	1fea4 <is_tx_ready.isra.0>
   1953a:	bb28      	cbnz	r0, 19588 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
   1953c:	f384 8811 	msr	BASEPRI, r4
   19540:	f3bf 8f6f 	isb	sy
}
   19544:	e7ee      	b.n	19524 <uarte_nrfx_poll_out+0x14>
{
   19546:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   19548:	6868      	ldr	r0, [r5, #4]
   1954a:	f006 fcab 	bl	1fea4 <is_tx_ready.isra.0>
   1954e:	b970      	cbnz	r0, 1956e <uarte_nrfx_poll_out+0x5e>
   19550:	2001      	movs	r0, #1
   19552:	f006 fcfb 	bl	1ff4c <nrfx_busy_wait>
   19556:	3c01      	subs	r4, #1
   19558:	d1f6      	bne.n	19548 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
   1955a:	2100      	movs	r1, #0
   1955c:	2021      	movs	r0, #33	; 0x21
   1955e:	f001 fd97 	bl	1b090 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   19562:	e7f0      	b.n	19546 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
   19564:	f384 8811 	msr	BASEPRI, r4
   19568:	f3bf 8f6f 	isb	sy
}
   1956c:	e7f5      	b.n	1955a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   1956e:	f04f 0320 	mov.w	r3, #32
   19572:	f3ef 8411 	mrs	r4, BASEPRI
   19576:	f383 8812 	msr	BASEPRI_MAX, r3
   1957a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1957e:	6868      	ldr	r0, [r5, #4]
   19580:	f006 fc90 	bl	1fea4 <is_tx_ready.isra.0>
   19584:	2800      	cmp	r0, #0
   19586:	d0ed      	beq.n	19564 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
   19588:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
   1958c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
   1958e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   19590:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   19592:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19596:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1959a:	2200      	movs	r2, #0
   1959c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   195a0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   195a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   195a8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   195ac:	684a      	ldr	r2, [r1, #4]
   195ae:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   195b0:	bf41      	itttt	mi
   195b2:	2208      	movmi	r2, #8
   195b4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   195b8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
   195bc:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   195c0:	2201      	movs	r2, #1
   195c2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
   195c4:	f384 8811 	msr	BASEPRI, r4
   195c8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
   195cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   195ce:	bf00      	nop
   195d0:	20002e97 	.word	0x20002e97

000195d4 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   195d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   195d8:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   195da:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   195dc:	681c      	ldr	r4, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   195de:	2300      	movs	r3, #0
   195e0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
static int uarte_instance_init(const struct device *dev,
   195e4:	4606      	mov	r6, r0
   195e6:	680b      	ldr	r3, [r1, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   195e8:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   195ea:	a801      	add	r0, sp, #4
   195ec:	9301      	str	r3, [sp, #4]
   195ee:	f7ff fecb 	bl	19388 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   195f2:	9a01      	ldr	r2, [sp, #4]
   195f4:	2301      	movs	r3, #1
   195f6:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   195f8:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   195fc:	680b      	ldr	r3, [r1, #0]
   195fe:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19600:	a801      	add	r0, sp, #4
   19602:	f7ff fec1 	bl	19388 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19606:	9b01      	ldr	r3, [sp, #4]
   19608:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1960c:	2203      	movs	r2, #3
   1960e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   19612:	684b      	ldr	r3, [r1, #4]
static int uarte_instance_init(const struct device *dev,
   19614:	460d      	mov	r5, r1
	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   19616:	1c59      	adds	r1, r3, #1
   19618:	d009      	beq.n	1962e <uarte_instance_init.constprop.0+0x5a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1961a:	a801      	add	r0, sp, #4
   1961c:	9301      	str	r3, [sp, #4]
   1961e:	f7ff feb3 	bl	19388 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19622:	9b01      	ldr	r3, [sp, #4]
   19624:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   19628:	220c      	movs	r2, #12
   1962a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_PULLUP);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1962e:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   19632:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   19636:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1963a:	68ab      	ldr	r3, [r5, #8]
   1963c:	1c5a      	adds	r2, r3, #1
   1963e:	d009      	beq.n	19654 <uarte_instance_init.constprop.0+0x80>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19640:	a801      	add	r0, sp, #4
   19642:	9301      	str	r3, [sp, #4]
   19644:	f7ff fea0 	bl	19388 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19648:	9b01      	ldr	r3, [sp, #4]
   1964a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1964e:	220c      	movs	r2, #12
   19650:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_PULLUP);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   19654:	68eb      	ldr	r3, [r5, #12]
   19656:	1c58      	adds	r0, r3, #1
   19658:	d013      	beq.n	19682 <uarte_instance_init.constprop.0+0xae>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1965a:	a801      	add	r0, sp, #4
   1965c:	9301      	str	r3, [sp, #4]
   1965e:	f7ff fe93 	bl	19388 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   19662:	9a01      	ldr	r2, [sp, #4]
   19664:	2301      	movs	r3, #1
   19666:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   19668:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1966c:	68eb      	ldr	r3, [r5, #12]
   1966e:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   19670:	a801      	add	r0, sp, #4
   19672:	f7ff fe89 	bl	19388 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   19676:	9b01      	ldr	r3, [sp, #4]
   19678:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1967c:	2203      	movs	r2, #3
   1967e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   19682:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   19686:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.RTS = pselrts;
   19688:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1968c:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1968e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   19692:	4630      	mov	r0, r6
   19694:	f7ff fe86 	bl	193a4 <uarte_nrfx_configure>
	if (err) {
   19698:	4680      	mov	r8, r0
   1969a:	b9b0      	cbnz	r0, 196ca <uarte_instance_init.constprop.0+0xf6>
#ifdef CONFIG_PM_DEVICE
	data->pm_state = PM_DEVICE_STATE_ACTIVE;
#endif

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   1969c:	6873      	ldr	r3, [r6, #4]
   1969e:	685b      	ldr	r3, [r3, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   196a0:	0719      	lsls	r1, r3, #28
   196a2:	d529      	bpl.n	196f8 <uarte_instance_init.constprop.0+0x124>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   196a4:	f107 0012 	add.w	r0, r7, #18
   196a8:	f000 fbbc 	bl	19e24 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   196ac:	4b28      	ldr	r3, [pc, #160]	; (19750 <uarte_instance_init.constprop.0+0x17c>)
   196ae:	4298      	cmp	r0, r3
   196b0:	d00f      	beq.n	196d2 <uarte_instance_init.constprop.0+0xfe>
   196b2:	4b28      	ldr	r3, [pc, #160]	; (19754 <uarte_instance_init.constprop.0+0x180>)
   196b4:	4928      	ldr	r1, [pc, #160]	; (19758 <uarte_instance_init.constprop.0+0x184>)
		LOG_ERR("Failed to allocate PPI Channel");
   196b6:	4829      	ldr	r0, [pc, #164]	; (1975c <uarte_instance_init.constprop.0+0x188>)
   196b8:	1ac9      	subs	r1, r1, r3
   196ba:	08c9      	lsrs	r1, r1, #3
   196bc:	0189      	lsls	r1, r1, #6
   196be:	f041 0101 	orr.w	r1, r1, #1
   196c2:	f002 fc96 	bl	1bff2 <log_0>
		return -EIO;
   196c6:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   196ca:	4640      	mov	r0, r8
   196cc:	b002      	add	sp, #8
   196ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   196d2:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   196d4:	00c3      	lsls	r3, r0, #3
   196d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   196da:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   196de:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   196e2:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   196e6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   196ea:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   196ee:	4a1c      	ldr	r2, [pc, #112]	; (19760 <uarte_instance_init.constprop.0+0x18c>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   196f0:	2301      	movs	r3, #1
   196f2:	4083      	lsls	r3, r0
   196f4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   196f8:	2308      	movs	r3, #8
   196fa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   196fe:	686b      	ldr	r3, [r5, #4]
   19700:	3301      	adds	r3, #1
   19702:	d00c      	beq.n	1971e <uarte_instance_init.constprop.0+0x14a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19704:	2300      	movs	r3, #0
   19706:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1970a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1970e:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   19712:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   19716:	2301      	movs	r3, #1
   19718:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1971c:	6023      	str	r3, [r4, #0]
	if (!(get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   1971e:	6873      	ldr	r3, [r6, #4]
   19720:	685b      	ldr	r3, [r3, #4]
   19722:	071a      	lsls	r2, r3, #28
    p_reg->INTENSET = mask;
   19724:	bf5c      	itt	pl
   19726:	f44f 7280 	movpl.w	r2, #256	; 0x100
   1972a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1972e:	06db      	lsls	r3, r3, #27
   19730:	bf44      	itt	mi
   19732:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   19736:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1973a:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
   1973c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1973e:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   19742:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19746:	2301      	movs	r3, #1
   19748:	60a3      	str	r3, [r4, #8]
   1974a:	60e3      	str	r3, [r4, #12]
	return 0;
   1974c:	e7bd      	b.n	196ca <uarte_instance_init.constprop.0+0xf6>
   1974e:	bf00      	nop
   19750:	0bad0000 	.word	0x0bad0000
   19754:	00020e00 	.word	0x00020e00
   19758:	00020f50 	.word	0x00020f50
   1975c:	000246dc 	.word	0x000246dc
   19760:	4001f000 	.word	0x4001f000

00019764 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   19764:	b530      	push	{r4, r5, lr}
   19766:	4b0a      	ldr	r3, [pc, #40]	; (19790 <uarte_1_init+0x2c>)
   19768:	4605      	mov	r5, r0
   1976a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1976c:	b085      	sub	sp, #20
   1976e:	466c      	mov	r4, sp
   19770:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   19774:	2200      	movs	r2, #0
   19776:	2101      	movs	r1, #1
   19778:	2028      	movs	r0, #40	; 0x28
   1977a:	f7ea f9c5 	bl	3b08 <z_arm_irq_priority_set>
   1977e:	2028      	movs	r0, #40	; 0x28
   19780:	f7ea f990 	bl	3aa4 <arch_irq_enable>
   19784:	4621      	mov	r1, r4
   19786:	4628      	mov	r0, r5
   19788:	f7ff ff24 	bl	195d4 <uarte_instance_init.constprop.0>
   1978c:	b005      	add	sp, #20
   1978e:	bd30      	pop	{r4, r5, pc}
   19790:	0002104c 	.word	0x0002104c

00019794 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   19794:	b530      	push	{r4, r5, lr}
   19796:	4b0a      	ldr	r3, [pc, #40]	; (197c0 <uarte_0_init+0x2c>)
   19798:	4605      	mov	r5, r0
   1979a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1979c:	b085      	sub	sp, #20
   1979e:	466c      	mov	r4, sp
   197a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   197a4:	2200      	movs	r2, #0
   197a6:	2101      	movs	r1, #1
   197a8:	2002      	movs	r0, #2
   197aa:	f7ea f9ad 	bl	3b08 <z_arm_irq_priority_set>
   197ae:	2002      	movs	r0, #2
   197b0:	f7ea f978 	bl	3aa4 <arch_irq_enable>
   197b4:	4621      	mov	r1, r4
   197b6:	4628      	mov	r0, r5
   197b8:	f7ff ff0c 	bl	195d4 <uarte_instance_init.constprop.0>
   197bc:	b005      	add	sp, #20
   197be:	bd30      	pop	{r4, r5, pc}
   197c0:	0002105c 	.word	0x0002105c

000197c4 <random_byte_get>:
	__asm__ volatile(
   197c4:	f04f 0320 	mov.w	r3, #32
   197c8:	f3ef 8211 	mrs	r2, BASEPRI
   197cc:	f383 8812 	msr	BASEPRI_MAX, r3
   197d0:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   197d4:	4b09      	ldr	r3, [pc, #36]	; (197fc <random_byte_get+0x38>)
   197d6:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   197da:	b161      	cbz	r1, 197f6 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   197dc:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   197de:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   197e2:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   197e6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   197ea:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   197ec:	f382 8811 	msr	BASEPRI, r2
   197f0:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   197f4:	4770      	bx	lr
	int retval = -EAGAIN;
   197f6:	f06f 000a 	mvn.w	r0, #10
   197fa:	e7f7      	b.n	197ec <random_byte_get+0x28>
   197fc:	4000d000 	.word	0x4000d000

00019800 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   19800:	b5f0      	push	{r4, r5, r6, r7, lr}
   19802:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   19804:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   19806:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   19808:	f04f 0020 	mov.w	r0, #32
   1980c:	f3ef 8e11 	mrs	lr, BASEPRI
   19810:	f380 8812 	msr	BASEPRI_MAX, r0
   19814:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   19818:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1981a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1981e:	1ba4      	subs	r4, r4, r6
   19820:	403c      	ands	r4, r7
	if (available < len) {
   19822:	42a2      	cmp	r2, r4
		len = available;
   19824:	bf88      	it	hi
   19826:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   19828:	18b0      	adds	r0, r6, r2
   1982a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1982c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1982e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   19830:	f38e 8811 	msr	BASEPRI, lr
   19834:	f3bf 8f6f 	isb	sy
   19838:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1983a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1983c:	4290      	cmp	r0, r2
   1983e:	d119      	bne.n	19874 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   19840:	4566      	cmp	r6, ip
   19842:	d10d      	bne.n	19860 <rng_pool_get+0x60>
	__asm__ volatile(
   19844:	f04f 0520 	mov.w	r5, #32
   19848:	f3ef 8011 	mrs	r0, BASEPRI
   1984c:	f385 8812 	msr	BASEPRI_MAX, r5
   19850:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   19854:	781d      	ldrb	r5, [r3, #0]
   19856:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   19858:	f380 8811 	msr	BASEPRI, r0
   1985c:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   19860:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   19862:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   19864:	b290      	uxth	r0, r2
	available = available - len;
   19866:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   19868:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1986a:	bf22      	ittt	cs
   1986c:	4b06      	ldrcs	r3, [pc, #24]	; (19888 <rng_pool_get+0x88>)
   1986e:	2201      	movcs	r2, #1
   19870:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   19872:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   19874:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   19878:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1987a:	f89e e005 	ldrb.w	lr, [lr, #5]
   1987e:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   19882:	403d      	ands	r5, r7
   19884:	e7da      	b.n	1983c <rng_pool_get+0x3c>
   19886:	bf00      	nop
   19888:	4000d000 	.word	0x4000d000

0001988c <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1988c:	43db      	mvns	r3, r3
{
   1988e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   19892:	f013 0501 	ands.w	r5, r3, #1
{
   19896:	460e      	mov	r6, r1
   19898:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1989a:	d004      	beq.n	198a6 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1989c:	4821      	ldr	r0, [pc, #132]	; (19924 <entropy_nrf5_get_entropy_isr+0x98>)
   1989e:	f7ff ffaf 	bl	19800 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   198a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   198a6:	b3a2      	cbz	r2, 19912 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   198a8:	f04f 0320 	mov.w	r3, #32
   198ac:	f3ef 8811 	mrs	r8, BASEPRI
   198b0:	f383 8812 	msr	BASEPRI_MAX, r3
   198b4:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   198b8:	200d      	movs	r0, #13
   198ba:	f7ea f917 	bl	3aec <arch_irq_is_enabled>
   198be:	4607      	mov	r7, r0
		irq_disable(IRQN);
   198c0:	200d      	movs	r0, #13
   198c2:	f7ea f8ff 	bl	3ac4 <arch_irq_disable>
	__asm__ volatile(
   198c6:	f388 8811 	msr	BASEPRI, r8
   198ca:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   198ce:	f8df 8058 	ldr.w	r8, [pc, #88]	; 19928 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   198d2:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1992c <entropy_nrf5_get_entropy_isr+0xa0>
   198d6:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   198da:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   198de:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   198e2:	2301      	movs	r3, #1
   198e4:	f8c8 3000 	str.w	r3, [r8]
   198e8:	4625      	mov	r5, r4
   198ea:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   198ee:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   198f2:	b183      	cbz	r3, 19916 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   198f4:	f7ff ff66 	bl	197c4 <random_byte_get>
			if (byte < 0) {
   198f8:	1e03      	subs	r3, r0, #0
   198fa:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   198fe:	dbf6      	blt.n	198ee <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   19900:	3d01      	subs	r5, #1
   19902:	b2ad      	uxth	r5, r5
   19904:	5573      	strb	r3, [r6, r5]
		} while (len);
   19906:	2d00      	cmp	r5, #0
   19908:	d1f1      	bne.n	198ee <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1990a:	b117      	cbz	r7, 19912 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1990c:	200d      	movs	r0, #13
   1990e:	f7ea f8c9 	bl	3aa4 <arch_irq_enable>
	return cnt;
   19912:	4620      	mov	r0, r4
   19914:	e7c5      	b.n	198a2 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   19916:	f3bf 8f4f 	dsb	sy
				__WFE();
   1991a:	bf20      	wfe
				__SEV();
   1991c:	bf40      	sev
				__WFE();
   1991e:	bf20      	wfe
   19920:	e7e5      	b.n	198ee <entropy_nrf5_get_entropy_isr+0x62>
   19922:	bf00      	nop
   19924:	20002768 	.word	0x20002768
   19928:	4000d000 	.word	0x4000d000
   1992c:	e000e100 	.word	0xe000e100

00019930 <entropy_nrf5_get_entropy>:
{
   19930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   19934:	4f13      	ldr	r7, [pc, #76]	; (19984 <entropy_nrf5_get_entropy+0x54>)
   19936:	460d      	mov	r5, r1
   19938:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1993a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1993e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   19942:	b914      	cbnz	r4, 1994a <entropy_nrf5_get_entropy+0x1a>
}
   19944:	4620      	mov	r0, r4
   19946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1994a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1994e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19952:	4638      	mov	r0, r7
   19954:	f000 fede 	bl	1a714 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   19958:	4622      	mov	r2, r4
   1995a:	4629      	mov	r1, r5
   1995c:	4640      	mov	r0, r8
   1995e:	f7ff ff4f 	bl	19800 <rng_pool_get>
   19962:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   19964:	4638      	mov	r0, r7
   19966:	f000 feaf 	bl	1a6c8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1996a:	b93e      	cbnz	r6, 1997c <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1996c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19974:	4648      	mov	r0, r9
   19976:	f000 fecd 	bl	1a714 <z_impl_k_sem_take>
			continue;
   1997a:	e7e2      	b.n	19942 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1997c:	1ba4      	subs	r4, r4, r6
   1997e:	b2a4      	uxth	r4, r4
		buf += bytes;
   19980:	4435      	add	r5, r6
   19982:	e7de      	b.n	19942 <entropy_nrf5_get_entropy+0x12>
   19984:	20002738 	.word	0x20002738

00019988 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   19988:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1998a:	4c19      	ldr	r4, [pc, #100]	; (199f0 <entropy_nrf5_init+0x68>)
   1998c:	2201      	movs	r2, #1
   1998e:	4611      	mov	r1, r2
   19990:	4620      	mov	r0, r4
   19992:	f006 fcc1 	bl	20318 <z_impl_k_sem_init>
   19996:	2201      	movs	r2, #1
   19998:	2100      	movs	r1, #0
   1999a:	f104 0018 	add.w	r0, r4, #24
   1999e:	f006 fcbb 	bl	20318 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   199a2:	f240 4307 	movw	r3, #1031	; 0x407
   199a6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   199aa:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   199ae:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   199b0:	230c      	movs	r3, #12
   199b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   199b6:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   199b8:	4b0e      	ldr	r3, [pc, #56]	; (199f4 <entropy_nrf5_init+0x6c>)
   199ba:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   199be:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   199c2:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   199c6:	f042 0201 	orr.w	r2, r2, #1
   199ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   199ce:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   199d0:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   199d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   199d8:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   199dc:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   199de:	6019      	str	r1, [r3, #0]
   199e0:	200d      	movs	r0, #13
   199e2:	f7ea f891 	bl	3b08 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   199e6:	200d      	movs	r0, #13
   199e8:	f7ea f85c 	bl	3aa4 <arch_irq_enable>

	return 0;
}
   199ec:	4628      	mov	r0, r5
   199ee:	bd38      	pop	{r3, r4, r5, pc}
   199f0:	20002738 	.word	0x20002738
   199f4:	4000d000 	.word	0x4000d000

000199f8 <isr>:
{
   199f8:	b510      	push	{r4, lr}
	byte = random_byte_get();
   199fa:	f7ff fee3 	bl	197c4 <random_byte_get>
	if (byte < 0) {
   199fe:	2800      	cmp	r0, #0
   19a00:	db20      	blt.n	19a44 <isr+0x4c>
	uint8_t last  = rngp->last;
   19a02:	4b17      	ldr	r3, [pc, #92]	; (19a60 <isr+0x68>)
   19a04:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   19a08:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   19a0c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   19a10:	1a51      	subs	r1, r2, r1
   19a12:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   19a16:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   19a18:	d10d      	bne.n	19a36 <isr+0x3e>
	uint8_t last  = rngp->last;
   19a1a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   19a1e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   19a22:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   19a26:	1a51      	subs	r1, r2, r1
   19a28:	ea34 0101 	bics.w	r1, r4, r1
   19a2c:	d10b      	bne.n	19a46 <isr+0x4e>
   19a2e:	4b0d      	ldr	r3, [pc, #52]	; (19a64 <isr+0x6c>)
   19a30:	2201      	movs	r2, #1
   19a32:	605a      	str	r2, [r3, #4]
}
   19a34:	e00e      	b.n	19a54 <isr+0x5c>
	rngp->buffer[last] = byte;
   19a36:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19a38:	3201      	adds	r2, #1
   19a3a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   19a3c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   19a40:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   19a44:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   19a46:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   19a48:	3201      	adds	r2, #1
   19a4a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   19a4c:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   19a50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   19a54:	4804      	ldr	r0, [pc, #16]	; (19a68 <isr+0x70>)
}
   19a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   19a5a:	f000 be35 	b.w	1a6c8 <z_impl_k_sem_give>
   19a5e:	bf00      	nop
   19a60:	20002738 	.word	0x20002738
   19a64:	4000d000 	.word	0x4000d000
   19a68:	20002750 	.word	0x20002750

00019a6c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19a6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19a70:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   19a74:	2a08      	cmp	r2, #8
   19a76:	d106      	bne.n	19a86 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19a78:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   19a7c:	2b05      	cmp	r3, #5
   19a7e:	d802      	bhi.n	19a86 <nrf52_errata_103+0x1a>
   19a80:	4a02      	ldr	r2, [pc, #8]	; (19a8c <nrf52_errata_103+0x20>)
   19a82:	5cd0      	ldrb	r0, [r2, r3]
   19a84:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   19a86:	2000      	movs	r0, #0
    #endif
}
   19a88:	4770      	bx	lr
   19a8a:	bf00      	nop
   19a8c:	0002471c 	.word	0x0002471c

00019a90 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   19a90:	4a02      	ldr	r2, [pc, #8]	; (19a9c <nvmc_wait+0xc>)
   19a92:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   19a96:	2b00      	cmp	r3, #0
   19a98:	d0fb      	beq.n	19a92 <nvmc_wait+0x2>
}
   19a9a:	4770      	bx	lr
   19a9c:	4001e000 	.word	0x4001e000

00019aa0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   19aa0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   19aa2:	f006 fa49 	bl	1ff38 <nrf52_errata_136>
   19aa6:	b140      	cbz	r0, 19aba <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   19aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19aac:	2200      	movs	r2, #0
   19aae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   19ab2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   19ab6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   19aba:	f006 fa3d 	bl	1ff38 <nrf52_errata_136>
   19abe:	2800      	cmp	r0, #0
   19ac0:	d046      	beq.n	19b50 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   19ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19ac6:	4b60      	ldr	r3, [pc, #384]	; (19c48 <SystemInit+0x1a8>)
   19ac8:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   19acc:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   19ad0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   19ad4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   19ad8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   19adc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   19ae0:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   19ae4:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   19ae8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   19aec:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   19af0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   19af4:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   19af8:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   19afc:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   19b00:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   19b04:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   19b08:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   19b0c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   19b10:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   19b14:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   19b18:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   19b1c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   19b20:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   19b24:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   19b28:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   19b2c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   19b30:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   19b34:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   19b38:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   19b3c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   19b40:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   19b44:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   19b48:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   19b4c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   19b50:	f7ff ff8c 	bl	19a6c <nrf52_errata_103>
   19b54:	b118      	cbz	r0, 19b5e <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   19b56:	4b3d      	ldr	r3, [pc, #244]	; (19c4c <SystemInit+0x1ac>)
   19b58:	4a3d      	ldr	r2, [pc, #244]	; (19c50 <SystemInit+0x1b0>)
   19b5a:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   19b5e:	f7ff ff85 	bl	19a6c <nrf52_errata_103>
   19b62:	b118      	cbz	r0, 19b6c <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   19b64:	4b3b      	ldr	r3, [pc, #236]	; (19c54 <SystemInit+0x1b4>)
   19b66:	22fb      	movs	r2, #251	; 0xfb
   19b68:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   19b6c:	f7ff ff7e 	bl	19a6c <nrf52_errata_103>
   19b70:	b170      	cbz	r0, 19b90 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   19b72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   19b76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   19b7a:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   19b7e:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   19b82:	f022 020f 	bic.w	r2, r2, #15
   19b86:	f003 030f 	and.w	r3, r3, #15
   19b8a:	4313      	orrs	r3, r2
   19b8c:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   19b90:	f7ff ff6c 	bl	19a6c <nrf52_errata_103>
   19b94:	b120      	cbz	r0, 19ba0 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   19b96:	4b30      	ldr	r3, [pc, #192]	; (19c58 <SystemInit+0x1b8>)
   19b98:	f44f 7200 	mov.w	r2, #512	; 0x200
   19b9c:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   19ba0:	f006 f9ca 	bl	1ff38 <nrf52_errata_136>
   19ba4:	b148      	cbz	r0, 19bba <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   19ba6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19baa:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   19bae:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   19bb0:	bf44      	itt	mi
   19bb2:	f06f 0201 	mvnmi.w	r2, #1
   19bb6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   19bba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   19bbe:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   19bc2:	2a08      	cmp	r2, #8
   19bc4:	d10e      	bne.n	19be4 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   19bc6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   19bca:	2b05      	cmp	r3, #5
   19bcc:	d802      	bhi.n	19bd4 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
   19bce:	4a23      	ldr	r2, [pc, #140]	; (19c5c <SystemInit+0x1bc>)
   19bd0:	5cd3      	ldrb	r3, [r2, r3]
   19bd2:	b13b      	cbz	r3, 19be4 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   19bd4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19bd8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   19bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19be0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19be4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   19be8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   19bec:	2a00      	cmp	r2, #0
   19bee:	db03      	blt.n	19bf8 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   19bf0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   19bf4:	2b00      	cmp	r3, #0
   19bf6:	da22      	bge.n	19c3e <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19bf8:	4919      	ldr	r1, [pc, #100]	; (19c60 <SystemInit+0x1c0>)
   19bfa:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19bfc:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19c00:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19c04:	2412      	movs	r4, #18
    nvmc_wait();
   19c06:	f7ff ff43 	bl	19a90 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   19c0a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   19c0e:	f7ff ff3f 	bl	19a90 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   19c12:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   19c16:	f7ff ff3b 	bl	19a90 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   19c1a:	2300      	movs	r3, #0
   19c1c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   19c20:	f7ff ff36 	bl	19a90 <nvmc_wait>
   19c24:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   19c28:	490e      	ldr	r1, [pc, #56]	; (19c64 <SystemInit+0x1c4>)
   19c2a:	4b0f      	ldr	r3, [pc, #60]	; (19c68 <SystemInit+0x1c8>)
   19c2c:	68ca      	ldr	r2, [r1, #12]
   19c2e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   19c32:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   19c34:	60cb      	str	r3, [r1, #12]
   19c36:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   19c3a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   19c3c:	e7fd      	b.n	19c3a <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   19c3e:	4b0b      	ldr	r3, [pc, #44]	; (19c6c <SystemInit+0x1cc>)
   19c40:	4a0b      	ldr	r2, [pc, #44]	; (19c70 <SystemInit+0x1d0>)
   19c42:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   19c44:	bd10      	pop	{r4, pc}
   19c46:	bf00      	nop
   19c48:	4000c000 	.word	0x4000c000
   19c4c:	40005000 	.word	0x40005000
   19c50:	00038148 	.word	0x00038148
   19c54:	4000f000 	.word	0x4000f000
   19c58:	40029000 	.word	0x40029000
   19c5c:	00024716 	.word	0x00024716
   19c60:	4001e000 	.word	0x4001e000
   19c64:	e000ed00 	.word	0xe000ed00
   19c68:	05fa0004 	.word	0x05fa0004
   19c6c:	200005f0 	.word	0x200005f0
   19c70:	03d09000 	.word	0x03d09000

00019c74 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   19c74:	4b04      	ldr	r3, [pc, #16]	; (19c88 <nrfx_clock_init+0x14>)
   19c76:	791a      	ldrb	r2, [r3, #4]
   19c78:	b922      	cbnz	r2, 19c84 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   19c7a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   19c7c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   19c7e:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   19c80:	4802      	ldr	r0, [pc, #8]	; (19c8c <nrfx_clock_init+0x18>)
   19c82:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   19c84:	4802      	ldr	r0, [pc, #8]	; (19c90 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19c86:	4770      	bx	lr
   19c88:	2000278c 	.word	0x2000278c
   19c8c:	0bad0000 	.word	0x0bad0000
   19c90:	0bad000c 	.word	0x0bad000c

00019c94 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   19c94:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   19c96:	b110      	cbz	r0, 19c9e <nrfx_clock_stop+0xa>
   19c98:	2801      	cmp	r0, #1
   19c9a:	d017      	beq.n	19ccc <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   19c9c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   19c9e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   19ca2:	2302      	movs	r3, #2
   19ca4:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19ca8:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   19cac:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19cb0:	2301      	movs	r3, #1
   19cb2:	60e3      	str	r3, [r4, #12]
   19cb4:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19cb8:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   19cbc:	03db      	lsls	r3, r3, #15
   19cbe:	d5ed      	bpl.n	19c9c <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   19cc0:	2001      	movs	r0, #1
   19cc2:	f006 f943 	bl	1ff4c <nrfx_busy_wait>
   19cc6:	3d01      	subs	r5, #1
   19cc8:	d1f6      	bne.n	19cb8 <nrfx_clock_stop+0x24>
   19cca:	e7e7      	b.n	19c9c <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   19ccc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19cd0:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   19cd2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19cd6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   19cda:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19cde:	6060      	str	r0, [r4, #4]
   19ce0:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19ce4:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19ce8:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   19cec:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   19cee:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   19cf2:	d505      	bpl.n	19d00 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   19cf4:	b123      	cbz	r3, 19d00 <nrfx_clock_stop+0x6c>
   19cf6:	2001      	movs	r0, #1
   19cf8:	f006 f928 	bl	1ff4c <nrfx_busy_wait>
   19cfc:	3d01      	subs	r5, #1
   19cfe:	d1f1      	bne.n	19ce4 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   19d00:	4b01      	ldr	r3, [pc, #4]	; (19d08 <nrfx_clock_stop+0x74>)
   19d02:	2200      	movs	r2, #0
   19d04:	715a      	strb	r2, [r3, #5]
   19d06:	e7c9      	b.n	19c9c <nrfx_clock_stop+0x8>
   19d08:	2000278c 	.word	0x2000278c

00019d0c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19d0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   19d10:	b510      	push	{r4, lr}
   19d12:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   19d16:	b16a      	cbz	r2, 19d34 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19d18:	2200      	movs	r2, #0
   19d1a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19d1e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   19d22:	2201      	movs	r2, #1
   19d24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   19d28:	4b11      	ldr	r3, [pc, #68]	; (19d70 <nrfx_power_clock_irq_handler+0x64>)
   19d2a:	7958      	ldrb	r0, [r3, #5]
   19d2c:	b910      	cbnz	r0, 19d34 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   19d2e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   19d30:	681b      	ldr	r3, [r3, #0]
   19d32:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   19d34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   19d38:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   19d3c:	b172      	cbz	r2, 19d5c <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   19d3e:	2200      	movs	r2, #0
   19d40:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   19d44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   19d48:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   19d4c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   19d50:	0792      	lsls	r2, r2, #30
   19d52:	d104      	bne.n	19d5e <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   19d54:	2201      	movs	r2, #1
   19d56:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   19d5a:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   19d5c:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   19d5e:	2202      	movs	r2, #2
   19d60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19d64:	4b02      	ldr	r3, [pc, #8]	; (19d70 <nrfx_power_clock_irq_handler+0x64>)
}
   19d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   19d6a:	681b      	ldr	r3, [r3, #0]
   19d6c:	2001      	movs	r0, #1
   19d6e:	4718      	bx	r3
   19d70:	2000278c 	.word	0x2000278c

00019d74 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   19d74:	2301      	movs	r3, #1
   19d76:	fa03 f000 	lsl.w	r0, r3, r0
   19d7a:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   19d7c:	b193      	cbz	r3, 19da4 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   19d7e:	f04f 0320 	mov.w	r3, #32
   19d82:	f3ef 8111 	mrs	r1, BASEPRI
   19d86:	f383 8812 	msr	BASEPRI_MAX, r3
   19d8a:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   19d8e:	4a06      	ldr	r2, [pc, #24]	; (19da8 <nrfx_gpiote_channel_free+0x34>)
   19d90:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   19d92:	ea23 0000 	bic.w	r0, r3, r0
   19d96:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   19d98:	f381 8811 	msr	BASEPRI, r1
   19d9c:	f3bf 8f6f 	isb	sy
   19da0:	4802      	ldr	r0, [pc, #8]	; (19dac <nrfx_gpiote_channel_free+0x38>)
   19da2:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   19da4:	4802      	ldr	r0, [pc, #8]	; (19db0 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19da6:	4770      	bx	lr
   19da8:	20002794 	.word	0x20002794
   19dac:	0bad0000 	.word	0x0bad0000
   19db0:	0bad0004 	.word	0x0bad0004

00019db4 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   19db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19db8:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   19dba:	f8df e05c 	ldr.w	lr, [pc, #92]	; 19e18 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   19dbe:	4817      	ldr	r0, [pc, #92]	; (19e1c <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   19dc0:	f8df 805c 	ldr.w	r8, [pc, #92]	; 19e20 <nrfx_gpiote_channel_alloc+0x6c>
{
   19dc4:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   19dc6:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   19dc8:	2601      	movs	r6, #1
   19dca:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   19dcc:	f04f 0120 	mov.w	r1, #32
   19dd0:	f3ef 8c11 	mrs	ip, BASEPRI
   19dd4:	f381 8812 	msr	BASEPRI_MAX, r1
   19dd8:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   19ddc:	fa22 f103 	lsr.w	r1, r2, r3
   19de0:	07c9      	lsls	r1, r1, #31
   19de2:	d50a      	bpl.n	19dfa <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   19de4:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   19de8:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   19dec:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   19dee:	bf01      	itttt	eq
   19df0:	4339      	orreq	r1, r7
   19df2:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   19df6:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   19df8:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   19dfa:	f38c 8811 	msr	BASEPRI, ip
   19dfe:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   19e02:	4540      	cmp	r0, r8
   19e04:	d005      	beq.n	19e12 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   19e06:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   19e0a:	439a      	bics	r2, r3
   19e0c:	f104 0401 	add.w	r4, r4, #1
   19e10:	d1db      	bne.n	19dca <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19e16:	bf00      	nop
   19e18:	20002794 	.word	0x20002794
   19e1c:	0bad0002 	.word	0x0bad0002
   19e20:	0bad0000 	.word	0x0bad0000

00019e24 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19e24:	4b18      	ldr	r3, [pc, #96]	; (19e88 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   19e26:	f8df c064 	ldr.w	ip, [pc, #100]	; 19e8c <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19e2a:	681b      	ldr	r3, [r3, #0]
{
   19e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19e30:	43db      	mvns	r3, r3
{
   19e32:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   19e34:	4f16      	ldr	r7, [pc, #88]	; (19e90 <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   19e36:	4817      	ldr	r0, [pc, #92]	; (19e94 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   19e38:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   19e3c:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   19e3e:	f04f 0e01 	mov.w	lr, #1
   19e42:	b2e6      	uxtb	r6, r4
   19e44:	b90b      	cbnz	r3, 19e4a <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   19e46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   19e4a:	f04f 0220 	mov.w	r2, #32
   19e4e:	f3ef 8811 	mrs	r8, BASEPRI
   19e52:	f382 8812 	msr	BASEPRI_MAX, r2
   19e56:	f3bf 8f6f 	isb	sy
   19e5a:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   19e5e:	421a      	tst	r2, r3
   19e60:	d006      	beq.n	19e70 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   19e62:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   19e64:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   19e66:	bf01      	itttt	eq
   19e68:	4311      	orreq	r1, r2
   19e6a:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   19e6c:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   19e6e:	4660      	moveq	r0, ip
	__asm__ volatile(
   19e70:	f388 8811 	msr	BASEPRI, r8
   19e74:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   19e78:	4560      	cmp	r0, ip
   19e7a:	f104 0401 	add.w	r4, r4, #1
   19e7e:	d0e2      	beq.n	19e46 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   19e80:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   19e84:	e7dd      	b.n	19e42 <nrfx_ppi_channel_alloc+0x1e>
   19e86:	bf00      	nop
   19e88:	000225c4 	.word	0x000225c4
   19e8c:	0bad0000 	.word	0x0bad0000
   19e90:	200027f4 	.word	0x200027f4
   19e94:	0bad0002 	.word	0x0bad0002

00019e98 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   19e98:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19e9a:	4c11      	ldr	r4, [pc, #68]	; (19ee0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   19e9c:	4a11      	ldr	r2, [pc, #68]	; (19ee4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   19e9e:	4912      	ldr	r1, [pc, #72]	; (19ee8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   19ea0:	2303      	movs	r3, #3
   19ea2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   19ea4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   19ea6:	4b11      	ldr	r3, [pc, #68]	; (19eec <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   19ea8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   19eaa:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   19eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
   19eb0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   19eb2:	2300      	movs	r3, #0
   19eb4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   19eb6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   19eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   19eba:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   19ebc:	4a0c      	ldr	r2, [pc, #48]	; (19ef0 <_DoInit+0x58>)
   19ebe:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   19ec0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   19ec2:	2210      	movs	r2, #16
   19ec4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   19ec6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   19ec8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   19eca:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   19ecc:	f003 fd55 	bl	1d97a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   19ed0:	4908      	ldr	r1, [pc, #32]	; (19ef4 <_DoInit+0x5c>)
   19ed2:	4620      	mov	r0, r4
   19ed4:	f003 fd51 	bl	1d97a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   19ed8:	2320      	movs	r3, #32
   19eda:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   19edc:	bd10      	pop	{r4, pc}
   19ede:	bf00      	nop
   19ee0:	200027f8 	.word	0x200027f8
   19ee4:	00024722 	.word	0x00024722
   19ee8:	0002472b 	.word	0x0002472b
   19eec:	20002a97 	.word	0x20002a97
   19ef0:	20002a87 	.word	0x20002a87
   19ef4:	0002472f 	.word	0x0002472f

00019ef8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   19efc:	4f23      	ldr	r7, [pc, #140]	; (19f8c <SEGGER_RTT_WriteSkipNoLock+0x94>)
   19efe:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19f02:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   19f04:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19f08:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   19f0a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   19f0c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   19f0e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   19f10:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   19f12:	d834      	bhi.n	19f7e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   19f14:	f8d2 a020 	ldr.w	sl, [r2, #32]
   19f18:	ebaa 0905 	sub.w	r9, sl, r5
   19f1c:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
   19f20:	4294      	cmp	r4, r2
   19f22:	d811      	bhi.n	19f48 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   19f24:	f04f 0918 	mov.w	r9, #24
   19f28:	fb06 9309 	mla	r3, r6, r9, r9
   19f2c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
   19f2e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   19f30:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
   19f32:	4641      	mov	r1, r8
   19f34:	4428      	add	r0, r5
   19f36:	f003 fd69 	bl	1da0c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   19f3a:	fb09 7606 	mla	r6, r9, r6, r7
   19f3e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   19f40:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   19f42:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   19f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   19f48:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   19f4a:	429c      	cmp	r4, r3
   19f4c:	d81b      	bhi.n	19f86 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   19f4e:	fb00 bb0b 	mla	fp, r0, fp, fp
   19f52:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   19f54:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   19f56:	f8db 0004 	ldr.w	r0, [fp, #4]
   19f5a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
   19f5c:	4428      	add	r0, r5
   19f5e:	f003 fd55 	bl	1da0c <memcpy>
      if (NumBytes) {
   19f62:	ebb4 040a 	subs.w	r4, r4, sl
   19f66:	d006      	beq.n	19f76 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
   19f68:	f8db 0004 	ldr.w	r0, [fp, #4]
   19f6c:	4622      	mov	r2, r4
   19f6e:	eb08 0109 	add.w	r1, r8, r9
   19f72:	f003 fd4b 	bl	1da0c <memcpy>
      pRing->WrOff = NumBytes;
   19f76:	2018      	movs	r0, #24
   19f78:	fb00 7606 	mla	r6, r0, r6, r7
   19f7c:	e7e0      	b.n	19f40 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   19f7e:	3b01      	subs	r3, #1
   19f80:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   19f82:	42a3      	cmp	r3, r4
   19f84:	d2ce      	bcs.n	19f24 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   19f86:	2000      	movs	r0, #0
   19f88:	e7dc      	b.n	19f44 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   19f8a:	bf00      	nop
   19f8c:	200027f8 	.word	0x200027f8

00019f90 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   19f90:	4b03      	ldr	r3, [pc, #12]	; (19fa0 <SEGGER_RTT_HasDataUp+0x10>)
   19f92:	2218      	movs	r2, #24
   19f94:	fb02 3300 	mla	r3, r2, r0, r3
   19f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   19f9a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   19f9c:	1a80      	subs	r0, r0, r2
   19f9e:	4770      	bx	lr
   19fa0:	200027f8 	.word	0x200027f8

00019fa4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19fa4:	4b0e      	ldr	r3, [pc, #56]	; (19fe0 <z_sys_init_run_level+0x3c>)
{
   19fa6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19fa8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   19fac:	3001      	adds	r0, #1
   19fae:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   19fb2:	42a6      	cmp	r6, r4
   19fb4:	d800      	bhi.n	19fb8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
   19fb6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   19fb8:	e9d4 3500 	ldrd	r3, r5, [r4]
   19fbc:	4628      	mov	r0, r5
   19fbe:	4798      	blx	r3
		if (dev != NULL) {
   19fc0:	b165      	cbz	r5, 19fdc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
   19fc2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
   19fc4:	b130      	cbz	r0, 19fd4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   19fc6:	2800      	cmp	r0, #0
   19fc8:	bfb8      	it	lt
   19fca:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   19fcc:	28ff      	cmp	r0, #255	; 0xff
   19fce:	bfa8      	it	ge
   19fd0:	20ff      	movge	r0, #255	; 0xff
   19fd2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   19fd4:	785a      	ldrb	r2, [r3, #1]
   19fd6:	f042 0201 	orr.w	r2, r2, #1
   19fda:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   19fdc:	3408      	adds	r4, #8
   19fde:	e7e8      	b.n	19fb2 <z_sys_init_run_level+0xe>
   19fe0:	00022748 	.word	0x00022748

00019fe4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
   19fe4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
   19fe6:	4605      	mov	r5, r0
   19fe8:	b910      	cbnz	r0, 19ff0 <z_impl_device_get_binding+0xc>
		return NULL;
   19fea:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
   19fec:	4620      	mov	r0, r4
   19fee:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   19ff0:	7803      	ldrb	r3, [r0, #0]
   19ff2:	2b00      	cmp	r3, #0
   19ff4:	d0f9      	beq.n	19fea <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   19ff6:	4c0e      	ldr	r4, [pc, #56]	; (1a030 <z_impl_device_get_binding+0x4c>)
   19ff8:	4e0e      	ldr	r6, [pc, #56]	; (1a034 <z_impl_device_get_binding+0x50>)
   19ffa:	42b4      	cmp	r4, r6
   19ffc:	d108      	bne.n	1a010 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
   19ffe:	4c0c      	ldr	r4, [pc, #48]	; (1a030 <z_impl_device_get_binding+0x4c>)
   1a000:	42b4      	cmp	r4, r6
   1a002:	d0f2      	beq.n	19fea <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a004:	4620      	mov	r0, r4
   1a006:	f005 ffe1 	bl	1ffcc <z_device_ready>
   1a00a:	b950      	cbnz	r0, 1a022 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a00c:	3418      	adds	r4, #24
   1a00e:	e7f7      	b.n	1a000 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
   1a010:	4620      	mov	r0, r4
   1a012:	f005 ffdb 	bl	1ffcc <z_device_ready>
   1a016:	b110      	cbz	r0, 1a01e <z_impl_device_get_binding+0x3a>
   1a018:	6823      	ldr	r3, [r4, #0]
   1a01a:	42ab      	cmp	r3, r5
   1a01c:	d0e6      	beq.n	19fec <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   1a01e:	3418      	adds	r4, #24
   1a020:	e7eb      	b.n	19ffa <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1a022:	6821      	ldr	r1, [r4, #0]
   1a024:	4628      	mov	r0, r5
   1a026:	f003 fcd4 	bl	1d9d2 <strcmp>
   1a02a:	2800      	cmp	r0, #0
   1a02c:	d1ee      	bne.n	1a00c <z_impl_device_get_binding+0x28>
   1a02e:	e7dd      	b.n	19fec <z_impl_device_get_binding+0x8>
   1a030:	00020b94 	.word	0x00020b94
   1a034:	00020c3c 	.word	0x00020c3c

0001a038 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1a038:	b510      	push	{r4, lr}
   1a03a:	4604      	mov	r4, r0
	z_impl_log_panic();
   1a03c:	f7e8 fcda 	bl	29f4 <z_impl_log_panic>
   1a040:	4b06      	ldr	r3, [pc, #24]	; (1a05c <k_sys_fatal_error_handler+0x24>)
   1a042:	4907      	ldr	r1, [pc, #28]	; (1a060 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1a044:	4807      	ldr	r0, [pc, #28]	; (1a064 <k_sys_fatal_error_handler+0x2c>)
   1a046:	1ac9      	subs	r1, r1, r3
   1a048:	08c9      	lsrs	r1, r1, #3
   1a04a:	0189      	lsls	r1, r1, #6
   1a04c:	f041 0101 	orr.w	r1, r1, #1
   1a050:	f001 ffcf 	bl	1bff2 <log_0>
	arch_system_halt(reason);
   1a054:	4620      	mov	r0, r4
   1a056:	f005 ffc3 	bl	1ffe0 <arch_system_halt>
   1a05a:	bf00      	nop
   1a05c:	00020e00 	.word	0x00020e00
   1a060:	00020f38 	.word	0x00020f38
   1a064:	00024736 	.word	0x00024736

0001a068 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1a068:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a06c:	4606      	mov	r6, r0
   1a06e:	460f      	mov	r7, r1
	__asm__ volatile(
   1a070:	f04f 0320 	mov.w	r3, #32
   1a074:	f3ef 8811 	mrs	r8, BASEPRI
   1a078:	f383 8812 	msr	BASEPRI_MAX, r3
   1a07c:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1a080:	f001 f820 	bl	1b0c4 <z_impl_k_current_get>
   1a084:	4c1f      	ldr	r4, [pc, #124]	; (1a104 <z_fatal_error+0x9c>)
   1a086:	4b20      	ldr	r3, [pc, #128]	; (1a108 <z_fatal_error+0xa0>)
   1a088:	1ae4      	subs	r4, r4, r3
   1a08a:	2e04      	cmp	r6, #4
   1a08c:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1a090:	bf96      	itet	ls
   1a092:	4a1e      	ldrls	r2, [pc, #120]	; (1a10c <z_fatal_error+0xa4>)
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1a094:	4a1e      	ldrhi	r2, [pc, #120]	; (1a110 <z_fatal_error+0xa8>)
   1a096:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1a09a:	01a4      	lsls	r4, r4, #6
   1a09c:	f044 0301 	orr.w	r3, r4, #1
   1a0a0:	4605      	mov	r5, r0
   1a0a2:	f8ad 3000 	strh.w	r3, [sp]
   1a0a6:	481b      	ldr	r0, [pc, #108]	; (1a114 <z_fatal_error+0xac>)
   1a0a8:	2300      	movs	r3, #0
   1a0aa:	4631      	mov	r1, r6
   1a0ac:	f001 ffdb 	bl	1c066 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1a0b0:	b147      	cbz	r7, 1a0c4 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1a0b2:	69fb      	ldr	r3, [r7, #28]
   1a0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1a0b8:	b123      	cbz	r3, 1a0c4 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1a0ba:	4817      	ldr	r0, [pc, #92]	; (1a118 <z_fatal_error+0xb0>)
   1a0bc:	f044 0101 	orr.w	r1, r4, #1
   1a0c0:	f001 ff97 	bl	1bff2 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1a0c4:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   1a0c8:	b12d      	cbz	r5, 1a0d6 <z_fatal_error+0x6e>
   1a0ca:	4628      	mov	r0, r5
   1a0cc:	f006 f844 	bl	20158 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   1a0d0:	b108      	cbz	r0, 1a0d6 <z_fatal_error+0x6e>
   1a0d2:	7803      	ldrb	r3, [r0, #0]
   1a0d4:	b903      	cbnz	r3, 1a0d8 <z_fatal_error+0x70>
		thread_name = "unknown";
   1a0d6:	4811      	ldr	r0, [pc, #68]	; (1a11c <z_fatal_error+0xb4>)
   1a0d8:	f7e8 fb12 	bl	2700 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   1a0dc:	4623      	mov	r3, r4
   1a0de:	4602      	mov	r2, r0
   1a0e0:	4629      	mov	r1, r5
   1a0e2:	480f      	ldr	r0, [pc, #60]	; (1a120 <z_fatal_error+0xb8>)
   1a0e4:	f001 ffa6 	bl	1c034 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1a0e8:	4639      	mov	r1, r7
   1a0ea:	4630      	mov	r0, r6
   1a0ec:	f7ff ffa4 	bl	1a038 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1a0f0:	f388 8811 	msr	BASEPRI, r8
   1a0f4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1a0f8:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   1a0fa:	b002      	add	sp, #8
   1a0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a100:	f7ea b882 	b.w	4208 <z_impl_k_thread_abort>
   1a104:	00020f38 	.word	0x00020f38
   1a108:	00020e00 	.word	0x00020e00
   1a10c:	00022760 	.word	0x00022760
   1a110:	00024745 	.word	0x00024745
   1a114:	00024753 	.word	0x00024753
   1a118:	0002477b 	.word	0x0002477b
   1a11c:	000232a1 	.word	0x000232a1
   1a120:	0002479c 	.word	0x0002479c

0001a124 <z_bss_zero>:
 * @return N/A
 */
__boot_func
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1a124:	4802      	ldr	r0, [pc, #8]	; (1a130 <z_bss_zero+0xc>)
   1a126:	4a03      	ldr	r2, [pc, #12]	; (1a134 <z_bss_zero+0x10>)
   1a128:	2100      	movs	r1, #0
   1a12a:	1a12      	subs	r2, r2, r0
   1a12c:	f003 bc79 	b.w	1da22 <memset>
   1a130:	200008e8 	.word	0x200008e8
   1a134:	20002e98 	.word	0x20002e98

0001a138 <bg_thread_main>:
 *
 * @return N/A
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1a138:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1a13a:	4b0a      	ldr	r3, [pc, #40]	; (1a164 <bg_thread_main+0x2c>)
   1a13c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a13e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1a140:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1a142:	f7ff ff2f 	bl	19fa4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1a146:	f001 faa9 	bl	1b69c <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1a14a:	2003      	movs	r0, #3
   1a14c:	f7ff ff2a 	bl	19fa4 <z_sys_init_run_level>

	z_init_static_threads();
   1a150:	f000 f95a 	bl	1a408 <z_init_static_threads>
	z_sys_init_run_level(_SYS_INIT_LEVEL_SMP);
#endif

	extern void main(void);

	main();
   1a154:	f7e7 fc86 	bl	1a64 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1a158:	4a03      	ldr	r2, [pc, #12]	; (1a168 <bg_thread_main+0x30>)
   1a15a:	7b13      	ldrb	r3, [r2, #12]
   1a15c:	f023 0301 	bic.w	r3, r3, #1
   1a160:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1a162:	bd08      	pop	{r3, pc}
   1a164:	20002e97 	.word	0x20002e97
   1a168:	200012b8 	.word	0x200012b8

0001a16c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   1a16c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1a170:	b0a7      	sub	sp, #156	; 0x9c
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1a172:	f7e8 f9fd 	bl	2570 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1a176:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 1a260 <z_cstart+0xf4>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1a17a:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1a17e:	4d39      	ldr	r5, [pc, #228]	; (1a264 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   1a180:	4e39      	ldr	r6, [pc, #228]	; (1a268 <z_cstart+0xfc>)
   1a182:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a184:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1a26c <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   1a188:	4f39      	ldr	r7, [pc, #228]	; (1a270 <z_cstart+0x104>)
   1a18a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a18e:	2400      	movs	r4, #0
   1a190:	616b      	str	r3, [r5, #20]
   1a192:	23e0      	movs	r3, #224	; 0xe0
   1a194:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1a198:	77ec      	strb	r4, [r5, #31]
   1a19a:	762c      	strb	r4, [r5, #24]
   1a19c:	766c      	strb	r4, [r5, #25]
   1a19e:	76ac      	strb	r4, [r5, #26]
   1a1a0:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1a1a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1a1a6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1a1aa:	626b      	str	r3, [r5, #36]	; 0x24
   1a1ac:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1a1b0:	f7e9 fff4 	bl	419c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1a1b4:	f7e9 fc20 	bl	39f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1a1b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a1bc:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1a1be:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   1a1c0:	f7ea f8e8 	bl	4394 <z_arm_mpu_init>
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1a1c4:	4d2b      	ldr	r5, [pc, #172]	; (1a274 <z_cstart+0x108>)
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   1a1c6:	f7ea f831 	bl	422c <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   1a1ca:	f240 1301 	movw	r3, #257	; 0x101
   1a1ce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1a1d2:	ab06      	add	r3, sp, #24
   1a1d4:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
   1a1d6:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   1a1da:	f005 fef6 	bl	1ffca <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1a1de:	4620      	mov	r0, r4
   1a1e0:	f7ff fee0 	bl	19fa4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1a1e4:	2001      	movs	r0, #1
   1a1e6:	f7ff fedd 	bl	19fa4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a1ea:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1a1ee:	f000 febb 	bl	1af68 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a1f2:	4b21      	ldr	r3, [pc, #132]	; (1a278 <z_cstart+0x10c>)
	_kernel.ready_q.cache = &z_main_thread;
   1a1f4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1a1f6:	4921      	ldr	r1, [pc, #132]	; (1a27c <z_cstart+0x110>)
   1a1f8:	9305      	str	r3, [sp, #20]
   1a1fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1a1fe:	4653      	mov	r3, sl
   1a200:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1a204:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1a208:	9400      	str	r4, [sp, #0]
   1a20a:	4630      	mov	r0, r6
   1a20c:	f000 f89e 	bl	1a34c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1a210:	7b73      	ldrb	r3, [r6, #13]
   1a212:	4680      	mov	r8, r0
   1a214:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1a218:	4630      	mov	r0, r6
   1a21a:	7373      	strb	r3, [r6, #13]
   1a21c:	f006 f9f7 	bl	2060e <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1a220:	230f      	movs	r3, #15
   1a222:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1a226:	4916      	ldr	r1, [pc, #88]	; (1a280 <z_cstart+0x114>)
   1a228:	4b16      	ldr	r3, [pc, #88]	; (1a284 <z_cstart+0x118>)
   1a22a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1a22e:	e9cd b404 	strd	fp, r4, [sp, #16]
   1a232:	e9cd 5400 	strd	r5, r4, [sp]
   1a236:	4638      	mov	r0, r7
   1a238:	f000 f888 	bl	1a34c <z_setup_new_thread>
   1a23c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1a23e:	60ef      	str	r7, [r5, #12]
   1a240:	f023 0304 	bic.w	r3, r3, #4
   1a244:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1a246:	f105 0318 	add.w	r3, r5, #24
	list->tail = (sys_dnode_t *)list;
   1a24a:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].id = i;
   1a24e:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
   1a250:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1a254:	4652      	mov	r2, sl
   1a256:	4641      	mov	r1, r8
   1a258:	4630      	mov	r0, r6
   1a25a:	f7e9 fd27 	bl	3cac <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1a25e:	bf00      	nop
   1a260:	20004ca0 	.word	0x20004ca0
   1a264:	e000ed00 	.word	0xe000ed00
   1a268:	200012b8 	.word	0x200012b8
   1a26c:	0001a139 	.word	0x0001a139
   1a270:	20001238 	.word	0x20001238
   1a274:	200028a0 	.word	0x200028a0
   1a278:	000247fe 	.word	0x000247fe
   1a27c:	20003f00 	.word	0x20003f00
   1a280:	20004320 	.word	0x20004320
   1a284:	0001a4c1 	.word	0x0001a4c1

0001a288 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   1a288:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a28a:	4c06      	ldr	r4, [pc, #24]	; (1a2a4 <statics_init+0x1c>)
   1a28c:	4d06      	ldr	r5, [pc, #24]	; (1a2a8 <statics_init+0x20>)
   1a28e:	42ac      	cmp	r4, r5
   1a290:	d301      	bcc.n	1a296 <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1a292:	2000      	movs	r0, #0
   1a294:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1a296:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1a29a:	4620      	mov	r0, r4
   1a29c:	f005 fea9 	bl	1fff2 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1a2a0:	3414      	adds	r4, #20
   1a2a2:	e7f4      	b.n	1a28e <statics_init+0x6>
   1a2a4:	20000728 	.word	0x20000728
   1a2a8:	20000728 	.word	0x20000728

0001a2ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1a2ac:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a2ae:	4b0e      	ldr	r3, [pc, #56]	; (1a2e8 <init_mem_slab_module+0x3c>)
   1a2b0:	4c0e      	ldr	r4, [pc, #56]	; (1a2ec <init_mem_slab_module+0x40>)
   1a2b2:	42a3      	cmp	r3, r4
   1a2b4:	d301      	bcc.n	1a2ba <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
   1a2b6:	2000      	movs	r0, #0
	return rc;
}
   1a2b8:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1a2ba:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1a2be:	ea41 0200 	orr.w	r2, r1, r0
   1a2c2:	f012 0203 	ands.w	r2, r2, #3
   1a2c6:	d10b      	bne.n	1a2e0 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1a2c8:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1a2ca:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a2cc:	42aa      	cmp	r2, r5
   1a2ce:	d101      	bne.n	1a2d4 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1a2d0:	331c      	adds	r3, #28
   1a2d2:	e7ee      	b.n	1a2b2 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1a2d4:	695e      	ldr	r6, [r3, #20]
   1a2d6:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1a2d8:	3201      	adds	r2, #1
		slab->free_list = p;
   1a2da:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1a2dc:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1a2de:	e7f5      	b.n	1a2cc <init_mem_slab_module+0x20>
	return rc;
   1a2e0:	f06f 0015 	mvn.w	r0, #21
   1a2e4:	e7e8      	b.n	1a2b8 <init_mem_slab_module+0xc>
   1a2e6:	bf00      	nop
   1a2e8:	200006d4 	.word	0x200006d4
   1a2ec:	20000728 	.word	0x20000728

0001a2f0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1a2f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a2f2:	460c      	mov	r4, r1
	__asm__ volatile(
   1a2f4:	f04f 0520 	mov.w	r5, #32
   1a2f8:	f3ef 8111 	mrs	r1, BASEPRI
   1a2fc:	f385 8812 	msr	BASEPRI_MAX, r5
   1a300:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   1a304:	6945      	ldr	r5, [r0, #20]
   1a306:	b15d      	cbz	r5, 1a320 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1a308:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1a30a:	682b      	ldr	r3, [r5, #0]
   1a30c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1a30e:	6983      	ldr	r3, [r0, #24]
   1a310:	3301      	adds	r3, #1
   1a312:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1a314:	2000      	movs	r0, #0
	__asm__ volatile(
   1a316:	f381 8811 	msr	BASEPRI, r1
   1a31a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   1a31e:	e011      	b.n	1a344 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   1a320:	ea52 0c03 	orrs.w	ip, r2, r3
   1a324:	d103      	bne.n	1a32e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1a326:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1a328:	f06f 000b 	mvn.w	r0, #11
   1a32c:	e7f3      	b.n	1a316 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   1a32e:	e9cd 2300 	strd	r2, r3, [sp]
   1a332:	4602      	mov	r2, r0
   1a334:	3008      	adds	r0, #8
   1a336:	f000 fc9f 	bl	1ac78 <z_pend_curr>
		if (result == 0) {
   1a33a:	b918      	cbnz	r0, 1a344 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1a33c:	4b02      	ldr	r3, [pc, #8]	; (1a348 <k_mem_slab_alloc+0x58>)
   1a33e:	689b      	ldr	r3, [r3, #8]
   1a340:	695b      	ldr	r3, [r3, #20]
   1a342:	6023      	str	r3, [r4, #0]
}
   1a344:	b003      	add	sp, #12
   1a346:	bd30      	pop	{r4, r5, pc}
   1a348:	200028a0 	.word	0x200028a0

0001a34c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   1a34c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
   1a350:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   1a352:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   1a354:	2604      	movs	r6, #4
   1a356:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
   1a358:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   1a35a:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   1a35c:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
   1a360:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a362:	1dd6      	adds	r6, r2, #7
   1a364:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a368:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
   1a36a:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a36c:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   1a370:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
   1a372:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   1a376:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
   1a37a:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
   1a37c:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1a37e:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1a380:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a384:	9202      	str	r2, [sp, #8]
   1a386:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1a388:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   1a38a:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a38c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a38e:	9200      	str	r2, [sp, #0]
   1a390:	4642      	mov	r2, r8
{
   1a392:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1a394:	f7e9 fc58 	bl	3c48 <arch_new_thread>
	if (!_current) {
   1a398:	4b04      	ldr	r3, [pc, #16]	; (1a3ac <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
   1a39a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
   1a39c:	689b      	ldr	r3, [r3, #8]
   1a39e:	b103      	cbz	r3, 1a3a2 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   1a3a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   1a3a2:	6763      	str	r3, [r4, #116]	; 0x74
}
   1a3a4:	4640      	mov	r0, r8
   1a3a6:	b004      	add	sp, #16
   1a3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a3ac:	200028a0 	.word	0x200028a0

0001a3b0 <z_impl_k_thread_create>:
{
   1a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a3b2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3b4:	2700      	movs	r7, #0
   1a3b6:	9705      	str	r7, [sp, #20]
   1a3b8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   1a3ba:	9704      	str	r7, [sp, #16]
   1a3bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   1a3be:	9703      	str	r7, [sp, #12]
   1a3c0:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   1a3c2:	9702      	str	r7, [sp, #8]
{
   1a3c4:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3c8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   1a3ca:	9701      	str	r7, [sp, #4]
   1a3cc:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1a3ce:	9700      	str	r7, [sp, #0]
{
   1a3d0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1a3d2:	f7ff ffbb 	bl	1a34c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1a3d6:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a3da:	bf08      	it	eq
   1a3dc:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1a3e0:	d005      	beq.n	1a3ee <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a3e2:	ea55 0306 	orrs.w	r3, r5, r6
   1a3e6:	d105      	bne.n	1a3f4 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   1a3e8:	4620      	mov	r0, r4
   1a3ea:	f000 fd57 	bl	1ae9c <z_sched_start>
}
   1a3ee:	4620      	mov	r0, r4
   1a3f0:	b007      	add	sp, #28
   1a3f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1a3f4:	4903      	ldr	r1, [pc, #12]	; (1a404 <z_impl_k_thread_create+0x54>)
   1a3f6:	4632      	mov	r2, r6
   1a3f8:	462b      	mov	r3, r5
   1a3fa:	f104 0018 	add.w	r0, r4, #24
   1a3fe:	f000 ff41 	bl	1b284 <z_add_timeout>
   1a402:	e7f4      	b.n	1a3ee <z_impl_k_thread_create+0x3e>
   1a404:	0002062f 	.word	0x0002062f

0001a408 <z_init_static_threads>:
{
   1a408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a40c:	4c29      	ldr	r4, [pc, #164]	; (1a4b4 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   1a40e:	4d2a      	ldr	r5, [pc, #168]	; (1a4b8 <z_init_static_threads+0xb0>)
{
   1a410:	b087      	sub	sp, #28
   1a412:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   1a414:	42ae      	cmp	r6, r5
   1a416:	f104 0430 	add.w	r4, r4, #48	; 0x30
   1a41a:	d30f      	bcc.n	1a43c <z_init_static_threads+0x34>
	k_sched_lock();
   1a41c:	f000 fbba 	bl	1ab94 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a420:	4c24      	ldr	r4, [pc, #144]	; (1a4b4 <z_init_static_threads+0xac>)
   1a422:	f8df 9098 	ldr.w	r9, [pc, #152]	; 1a4bc <z_init_static_threads+0xb4>
   1a426:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1a42a:	f240 37e7 	movw	r7, #999	; 0x3e7
   1a42e:	42ac      	cmp	r4, r5
   1a430:	d320      	bcc.n	1a474 <z_init_static_threads+0x6c>
}
   1a432:	b007      	add	sp, #28
   1a434:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   1a438:	f000 bc64 	b.w	1ad04 <k_sched_unlock>
		z_setup_new_thread(
   1a43c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   1a440:	9305      	str	r3, [sp, #20]
   1a442:	f854 3c10 	ldr.w	r3, [r4, #-16]
   1a446:	9304      	str	r3, [sp, #16]
   1a448:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1a44c:	9303      	str	r3, [sp, #12]
   1a44e:	f854 3c18 	ldr.w	r3, [r4, #-24]
   1a452:	9302      	str	r3, [sp, #8]
   1a454:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1a458:	9301      	str	r3, [sp, #4]
   1a45a:	f854 3c20 	ldr.w	r3, [r4, #-32]
   1a45e:	9300      	str	r3, [sp, #0]
   1a460:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1a464:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   1a468:	f7ff ff70 	bl	1a34c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1a46c:	f854 3c30 	ldr.w	r3, [r4, #-48]
   1a470:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
   1a472:	e7ce      	b.n	1a412 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   1a474:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1a476:	1c5a      	adds	r2, r3, #1
   1a478:	d00d      	beq.n	1a496 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   1a47a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1a47e:	2100      	movs	r1, #0
   1a480:	4638      	mov	r0, r7
   1a482:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a486:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   1a48a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1a48e:	d104      	bne.n	1a49a <z_init_static_threads+0x92>
	z_sched_start(thread);
   1a490:	4640      	mov	r0, r8
   1a492:	f000 fd03 	bl	1ae9c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   1a496:	3430      	adds	r4, #48	; 0x30
   1a498:	e7c9      	b.n	1a42e <z_init_static_threads+0x26>
   1a49a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a49e:	2300      	movs	r3, #0
   1a4a0:	f7e5 fe2e 	bl	100 <__aeabi_uldivmod>
   1a4a4:	4602      	mov	r2, r0
   1a4a6:	460b      	mov	r3, r1
   1a4a8:	f108 0018 	add.w	r0, r8, #24
   1a4ac:	4649      	mov	r1, r9
   1a4ae:	f000 fee9 	bl	1b284 <z_add_timeout>
   1a4b2:	e7f0      	b.n	1a496 <z_init_static_threads+0x8e>
   1a4b4:	200006d3 	.word	0x200006d3
   1a4b8:	200006d3 	.word	0x200006d3
   1a4bc:	0002062f 	.word	0x0002062f

0001a4c0 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
   1a4c0:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
   1a4c2:	4c09      	ldr	r4, [pc, #36]	; (1a4e8 <idle+0x28>)
	__asm__ volatile(
   1a4c4:	f04f 0220 	mov.w	r2, #32
   1a4c8:	f3ef 8311 	mrs	r3, BASEPRI
   1a4cc:	f382 8812 	msr	BASEPRI_MAX, r2
   1a4d0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   1a4d4:	f006 f93d 	bl	20752 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
   1a4d8:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
   1a4da:	f7e8 fe45 	bl	3168 <pm_system_suspend>
   1a4de:	2800      	cmp	r0, #0
   1a4e0:	d1f0      	bne.n	1a4c4 <idle+0x4>
	arch_cpu_idle();
   1a4e2:	f7e9 fa8f 	bl	3a04 <arch_cpu_idle>
}
   1a4e6:	e7ed      	b.n	1a4c4 <idle+0x4>
   1a4e8:	200028a0 	.word	0x200028a0

0001a4ec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1a4ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a4f0:	4604      	mov	r4, r0
   1a4f2:	4617      	mov	r7, r2
   1a4f4:	461e      	mov	r6, r3
   1a4f6:	f04f 0320 	mov.w	r3, #32
   1a4fa:	f3ef 8811 	mrs	r8, BASEPRI
   1a4fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1a502:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1a506:	68c3      	ldr	r3, [r0, #12]
   1a508:	4a32      	ldr	r2, [pc, #200]	; (1a5d4 <z_impl_k_mutex_lock+0xe8>)
   1a50a:	b16b      	cbz	r3, 1a528 <z_impl_k_mutex_lock+0x3c>
   1a50c:	6880      	ldr	r0, [r0, #8]
   1a50e:	6891      	ldr	r1, [r2, #8]
   1a510:	4288      	cmp	r0, r1
   1a512:	d019      	beq.n	1a548 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1a514:	ea57 0306 	orrs.w	r3, r7, r6
   1a518:	d118      	bne.n	1a54c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1a51a:	f388 8811 	msr	BASEPRI, r8
   1a51e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   1a522:	f06f 000f 	mvn.w	r0, #15
   1a526:	e00c      	b.n	1a542 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1a528:	6891      	ldr	r1, [r2, #8]
   1a52a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1a52e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1a530:	3301      	adds	r3, #1
   1a532:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1a534:	6893      	ldr	r3, [r2, #8]
   1a536:	60a3      	str	r3, [r4, #8]
   1a538:	f388 8811 	msr	BASEPRI, r8
   1a53c:	f3bf 8f6f 	isb	sy
		return 0;
   1a540:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   1a542:	b002      	add	sp, #8
   1a544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1a548:	6921      	ldr	r1, [r4, #16]
   1a54a:	e7f0      	b.n	1a52e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1a54c:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1a550:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   1a554:	4299      	cmp	r1, r3
   1a556:	bfa8      	it	ge
   1a558:	4619      	movge	r1, r3
   1a55a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   1a55e:	4291      	cmp	r1, r2
   1a560:	bfb8      	it	lt
   1a562:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1a564:	428b      	cmp	r3, r1
   1a566:	dd2e      	ble.n	1a5c6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
   1a568:	f005 fe01 	bl	2016e <adjust_owner_prio.isra.0>
   1a56c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1a56e:	e9cd 7600 	strd	r7, r6, [sp]
   1a572:	4819      	ldr	r0, [pc, #100]	; (1a5d8 <z_impl_k_mutex_lock+0xec>)
   1a574:	4622      	mov	r2, r4
   1a576:	4641      	mov	r1, r8
   1a578:	f000 fb7e 	bl	1ac78 <z_pend_curr>
	if (got_mutex == 0) {
   1a57c:	2800      	cmp	r0, #0
   1a57e:	d0e0      	beq.n	1a542 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1a580:	f04f 0320 	mov.w	r3, #32
   1a584:	f3ef 8611 	mrs	r6, BASEPRI
   1a588:	f383 8812 	msr	BASEPRI_MAX, r3
   1a58c:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1a590:	6823      	ldr	r3, [r4, #0]
   1a592:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1a594:	429c      	cmp	r4, r3
   1a596:	d00a      	beq.n	1a5ae <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1a598:	b14b      	cbz	r3, 1a5ae <z_impl_k_mutex_lock+0xc2>
   1a59a:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1a59e:	4299      	cmp	r1, r3
   1a5a0:	bfa8      	it	ge
   1a5a2:	4619      	movge	r1, r3
   1a5a4:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   1a5a8:	4299      	cmp	r1, r3
   1a5aa:	bfb8      	it	lt
   1a5ac:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1a5ae:	68a0      	ldr	r0, [r4, #8]
   1a5b0:	f005 fddd 	bl	2016e <adjust_owner_prio.isra.0>
   1a5b4:	b900      	cbnz	r0, 1a5b8 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
   1a5b6:	b145      	cbz	r5, 1a5ca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   1a5b8:	4807      	ldr	r0, [pc, #28]	; (1a5d8 <z_impl_k_mutex_lock+0xec>)
   1a5ba:	4631      	mov	r1, r6
   1a5bc:	f000 fad8 	bl	1ab70 <z_reschedule>
	return -EAGAIN;
   1a5c0:	f06f 000a 	mvn.w	r0, #10
   1a5c4:	e7bd      	b.n	1a542 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1a5c6:	2500      	movs	r5, #0
   1a5c8:	e7d1      	b.n	1a56e <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
   1a5ca:	f386 8811 	msr	BASEPRI, r6
   1a5ce:	f3bf 8f6f 	isb	sy
   1a5d2:	e7f5      	b.n	1a5c0 <z_impl_k_mutex_lock+0xd4>
   1a5d4:	200028a0 	.word	0x200028a0
   1a5d8:	20002e98 	.word	0x20002e98

0001a5dc <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1a5dc:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   1a5de:	6883      	ldr	r3, [r0, #8]
{
   1a5e0:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1a5e2:	2b00      	cmp	r3, #0
   1a5e4:	d032      	beq.n	1a64c <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1a5e6:	4a1c      	ldr	r2, [pc, #112]	; (1a658 <z_impl_k_mutex_unlock+0x7c>)
   1a5e8:	6892      	ldr	r2, [r2, #8]
   1a5ea:	4293      	cmp	r3, r2
   1a5ec:	d131      	bne.n	1a652 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
   1a5ee:	7bda      	ldrb	r2, [r3, #15]
   1a5f0:	3a01      	subs	r2, #1
   1a5f2:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   1a5f4:	68c3      	ldr	r3, [r0, #12]
   1a5f6:	2b01      	cmp	r3, #1
   1a5f8:	d905      	bls.n	1a606 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1a5fa:	3b01      	subs	r3, #1
   1a5fc:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   1a5fe:	f000 fb81 	bl	1ad04 <k_sched_unlock>

	return 0;
   1a602:	2000      	movs	r0, #0
}
   1a604:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1a606:	f04f 0320 	mov.w	r3, #32
   1a60a:	f3ef 8511 	mrs	r5, BASEPRI
   1a60e:	f383 8812 	msr	BASEPRI_MAX, r3
   1a612:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1a616:	6901      	ldr	r1, [r0, #16]
   1a618:	6880      	ldr	r0, [r0, #8]
   1a61a:	f005 fda8 	bl	2016e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1a61e:	4620      	mov	r0, r4
   1a620:	f006 f83c 	bl	2069c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1a624:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1a626:	b158      	cbz	r0, 1a640 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
   1a628:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1a62c:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1a62e:	2200      	movs	r2, #0
   1a630:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   1a632:	f005 ffec 	bl	2060e <z_ready_thread>
		z_reschedule(&lock, key);
   1a636:	4809      	ldr	r0, [pc, #36]	; (1a65c <z_impl_k_mutex_unlock+0x80>)
   1a638:	4629      	mov	r1, r5
   1a63a:	f000 fa99 	bl	1ab70 <z_reschedule>
   1a63e:	e7de      	b.n	1a5fe <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1a640:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1a642:	f385 8811 	msr	BASEPRI, r5
   1a646:	f3bf 8f6f 	isb	sy
   1a64a:	e7d8      	b.n	1a5fe <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1a64c:	f06f 0015 	mvn.w	r0, #21
   1a650:	e7d8      	b.n	1a604 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1a652:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a656:	e7d5      	b.n	1a604 <z_impl_k_mutex_unlock+0x28>
   1a658:	200028a0 	.word	0x200028a0
   1a65c:	20002e98 	.word	0x20002e98

0001a660 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1a660:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1a662:	4611      	mov	r1, r2
	__asm__ volatile(
   1a664:	f04f 0220 	mov.w	r2, #32
   1a668:	f3ef 8511 	mrs	r5, BASEPRI
   1a66c:	f382 8812 	msr	BASEPRI_MAX, r2
   1a670:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1a674:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1a676:	b19c      	cbz	r4, 1a6a0 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a678:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a67a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1a67c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1a680:	4294      	cmp	r4, r2
	list->head = node;
   1a682:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1a684:	bf08      	it	eq
   1a686:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1a688:	2101      	movs	r1, #1
   1a68a:	4620      	mov	r0, r4
   1a68c:	f005 fddb 	bl	20246 <z_queue_node_peek>
   1a690:	4604      	mov	r4, r0
	__asm__ volatile(
   1a692:	f385 8811 	msr	BASEPRI, r5
   1a696:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1a69a:	4620      	mov	r0, r4
   1a69c:	b003      	add	sp, #12
   1a69e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a6a0:	ea51 0203 	orrs.w	r2, r1, r3
   1a6a4:	d0f5      	beq.n	1a692 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1a6a6:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1a6aa:	e9cd 1300 	strd	r1, r3, [sp]
   1a6ae:	4610      	mov	r0, r2
   1a6b0:	4629      	mov	r1, r5
   1a6b2:	f000 fae1 	bl	1ac78 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1a6b6:	2800      	cmp	r0, #0
   1a6b8:	d1ef      	bne.n	1a69a <z_impl_k_queue_get+0x3a>
   1a6ba:	4b02      	ldr	r3, [pc, #8]	; (1a6c4 <z_impl_k_queue_get+0x64>)
   1a6bc:	689b      	ldr	r3, [r3, #8]
   1a6be:	695c      	ldr	r4, [r3, #20]
   1a6c0:	e7eb      	b.n	1a69a <z_impl_k_queue_get+0x3a>
   1a6c2:	bf00      	nop
   1a6c4:	200028a0 	.word	0x200028a0

0001a6c8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   1a6c8:	b538      	push	{r3, r4, r5, lr}
   1a6ca:	4604      	mov	r4, r0
	__asm__ volatile(
   1a6cc:	f04f 0320 	mov.w	r3, #32
   1a6d0:	f3ef 8511 	mrs	r5, BASEPRI
   1a6d4:	f383 8812 	msr	BASEPRI_MAX, r3
   1a6d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   1a6dc:	f005 ffde 	bl	2069c <z_unpend_first_thread>

	if (thread != NULL) {
   1a6e0:	b148      	cbz	r0, 1a6f6 <z_impl_k_sem_give+0x2e>
   1a6e2:	2200      	movs	r2, #0
   1a6e4:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   1a6e6:	f005 ff92 	bl	2060e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   1a6ea:	4629      	mov	r1, r5
   1a6ec:	4808      	ldr	r0, [pc, #32]	; (1a710 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   1a6ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   1a6f2:	f000 ba3d 	b.w	1ab70 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   1a6f6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   1a6fa:	429a      	cmp	r2, r3
   1a6fc:	bf18      	it	ne
   1a6fe:	3301      	addne	r3, #1
   1a700:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   1a702:	2102      	movs	r1, #2
   1a704:	f104 0010 	add.w	r0, r4, #16
   1a708:	f006 f9ec 	bl	20ae4 <z_handle_obj_poll_events>
}
   1a70c:	e7ed      	b.n	1a6ea <z_impl_k_sem_give+0x22>
   1a70e:	bf00      	nop
   1a710:	20002e98 	.word	0x20002e98

0001a714 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   1a714:	b513      	push	{r0, r1, r4, lr}
   1a716:	f04f 0420 	mov.w	r4, #32
   1a71a:	f3ef 8111 	mrs	r1, BASEPRI
   1a71e:	f384 8812 	msr	BASEPRI_MAX, r4
   1a722:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   1a726:	6884      	ldr	r4, [r0, #8]
   1a728:	b144      	cbz	r4, 1a73c <z_impl_k_sem_take+0x28>
		sem->count--;
   1a72a:	3c01      	subs	r4, #1
   1a72c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   1a72e:	f381 8811 	msr	BASEPRI, r1
   1a732:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   1a736:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   1a738:	b002      	add	sp, #8
   1a73a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1a73c:	ea52 0403 	orrs.w	r4, r2, r3
   1a740:	d106      	bne.n	1a750 <z_impl_k_sem_take+0x3c>
   1a742:	f381 8811 	msr	BASEPRI, r1
   1a746:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   1a74a:	f06f 000f 	mvn.w	r0, #15
   1a74e:	e7f3      	b.n	1a738 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1a750:	e9cd 2300 	strd	r2, r3, [sp]
   1a754:	4602      	mov	r2, r0
   1a756:	4802      	ldr	r0, [pc, #8]	; (1a760 <z_impl_k_sem_take+0x4c>)
   1a758:	f000 fa8e 	bl	1ac78 <z_pend_curr>
	return ret;
   1a75c:	e7ec      	b.n	1a738 <z_impl_k_sem_take+0x24>
   1a75e:	bf00      	nop
   1a760:	20002e98 	.word	0x20002e98

0001a764 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   1a764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   1a766:	4b09      	ldr	r3, [pc, #36]	; (1a78c <k_sys_work_q_init+0x28>)
   1a768:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   1a76a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   1a76c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   1a76e:	9300      	str	r3, [sp, #0]
   1a770:	4907      	ldr	r1, [pc, #28]	; (1a790 <k_sys_work_q_init+0x2c>)
   1a772:	4808      	ldr	r0, [pc, #32]	; (1a794 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   1a774:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   1a778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a77c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1a780:	f000 f914 	bl	1a9ac <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1a784:	4620      	mov	r0, r4
   1a786:	b004      	add	sp, #16
   1a788:	bd10      	pop	{r4, pc}
   1a78a:	bf00      	nop
   1a78c:	00024806 	.word	0x00024806
   1a790:	20004ca0 	.word	0x20004ca0
   1a794:	20001338 	.word	0x20001338

0001a798 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
   1a79c:	4e47      	ldr	r6, [pc, #284]	; (1a8bc <work_queue_main+0x124>)
   1a79e:	b085      	sub	sp, #20
   1a7a0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
   1a7a2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1a7a6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	__asm__ volatile(
   1a7aa:	f04f 0320 	mov.w	r3, #32
   1a7ae:	f3ef 8711 	mrs	r7, BASEPRI
   1a7b2:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7b6:	f3bf 8f6f 	isb	sy
   1a7ba:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
Z_GENLIST_GET(slist, snode)
   1a7be:	b98d      	cbnz	r5, 1a7e4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
   1a7c0:	2102      	movs	r1, #2
   1a7c2:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1a7c6:	f005 fdb7 	bl	20338 <flag_test_and_clear>
   1a7ca:	2800      	cmp	r0, #0
   1a7cc:	d135      	bne.n	1a83a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
   1a7ce:	2300      	movs	r3, #0
   1a7d0:	e9cd 8900 	strd	r8, r9, [sp]
   1a7d4:	9302      	str	r3, [sp, #8]
   1a7d6:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1a7da:	4639      	mov	r1, r7
   1a7dc:	4838      	ldr	r0, [pc, #224]	; (1a8c0 <work_queue_main+0x128>)
   1a7de:	f000 fcd9 	bl	1b194 <z_sched_wait>
			continue;
   1a7e2:	e7e2      	b.n	1a7aa <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a7e4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
   1a7e8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
   1a7ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1a7ee:	4295      	cmp	r5, r2
   1a7f0:	d101      	bne.n	1a7f6 <work_queue_main+0x5e>
	list->tail = node;
   1a7f2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
   1a7f6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a7fa:	f043 0302 	orr.w	r3, r3, #2
   1a7fe:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
   1a802:	68eb      	ldr	r3, [r5, #12]
   1a804:	f023 0304 	bic.w	r3, r3, #4
   1a808:	f043 0301 	orr.w	r3, r3, #1
   1a80c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
   1a80e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
   1a810:	f387 8811 	msr	BASEPRI, r7
   1a814:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   1a818:	4628      	mov	r0, r5
   1a81a:	4798      	blx	r3
	__asm__ volatile(
   1a81c:	f04f 0320 	mov.w	r3, #32
   1a820:	f3ef 8b11 	mrs	fp, BASEPRI
   1a824:	f383 8812 	msr	BASEPRI_MAX, r3
   1a828:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   1a82c:	68eb      	ldr	r3, [r5, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a82e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   1a830:	f023 0201 	bic.w	r2, r3, #1
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a834:	d40b      	bmi.n	1a84e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
   1a836:	60ea      	str	r2, [r5, #12]
   1a838:	e00e      	b.n	1a858 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   1a83a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1a83e:	2200      	movs	r2, #0
   1a840:	2101      	movs	r1, #1
   1a842:	4628      	mov	r0, r5
   1a844:	f005 ff52 	bl	206ec <z_sched_wake>
   1a848:	2800      	cmp	r0, #0
   1a84a:	d1f8      	bne.n	1a83e <work_queue_main+0xa6>
   1a84c:	e7bf      	b.n	1a7ce <work_queue_main+0x36>
	return list->head;
   1a84e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
   1a850:	f023 0303 	bic.w	r3, r3, #3
   1a854:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a856:	b970      	cbnz	r0, 1a876 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
   1a858:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1a85c:	f023 0302 	bic.w	r3, r3, #2
   1a860:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
   1a864:	f38b 8811 	msr	BASEPRI, fp
   1a868:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   1a86c:	05d8      	lsls	r0, r3, #23
   1a86e:	d49c      	bmi.n	1a7aa <work_queue_main+0x12>
	z_impl_k_yield();
   1a870:	f000 fb86 	bl	1af80 <z_impl_k_yield>
}
   1a874:	e799      	b.n	1a7aa <work_queue_main+0x12>
	return node->next;
   1a876:	2700      	movs	r7, #0
   1a878:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
   1a87c:	463b      	mov	r3, r7
		if (wc->work == work) {
   1a87e:	6842      	ldr	r2, [r0, #4]
   1a880:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
   1a882:	4601      	mov	r1, r0
		if (wc->work == work) {
   1a884:	d10c      	bne.n	1a8a0 <work_queue_main+0x108>
	return node->next;
   1a886:	6801      	ldr	r1, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a888:	b997      	cbnz	r7, 1a8b0 <work_queue_main+0x118>
   1a88a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
   1a88c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a88e:	4282      	cmp	r2, r0
   1a890:	d100      	bne.n	1a894 <work_queue_main+0xfc>
	list->tail = node;
   1a892:	6071      	str	r1, [r6, #4]
	parent->next = child;
   1a894:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   1a898:	f7ff ff16 	bl	1a6c8 <z_impl_k_sem_give>
}
   1a89c:	4639      	mov	r1, r7
   1a89e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   1a8a0:	f1ba 0f00 	cmp.w	sl, #0
   1a8a4:	d0d8      	beq.n	1a858 <work_queue_main+0xc0>
	return node->next;
   1a8a6:	4650      	mov	r0, sl
   1a8a8:	460f      	mov	r7, r1
   1a8aa:	f8da a000 	ldr.w	sl, [sl]
   1a8ae:	e7e6      	b.n	1a87e <work_queue_main+0xe6>
	return list->tail;
   1a8b0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
   1a8b2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a8b4:	4282      	cmp	r2, r0
	list->tail = node;
   1a8b6:	bf08      	it	eq
   1a8b8:	6077      	streq	r7, [r6, #4]
}
   1a8ba:	e7eb      	b.n	1a894 <work_queue_main+0xfc>
   1a8bc:	200028d0 	.word	0x200028d0
   1a8c0:	20002e98 	.word	0x20002e98

0001a8c4 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   1a8c4:	68c3      	ldr	r3, [r0, #12]
{
   1a8c6:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a8c8:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   1a8cc:	079b      	lsls	r3, r3, #30
{
   1a8ce:	4605      	mov	r5, r0
   1a8d0:	460c      	mov	r4, r1
	if (ret) {
   1a8d2:	d50d      	bpl.n	1a8f0 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   1a8d4:	2201      	movs	r2, #1
   1a8d6:	2100      	movs	r1, #0
   1a8d8:	f104 0008 	add.w	r0, r4, #8
   1a8dc:	f005 fd1c 	bl	20318 <z_impl_k_sem_init>
	parent->next = child;
   1a8e0:	2300      	movs	r3, #0
   1a8e2:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a8e4:	4b05      	ldr	r3, [pc, #20]	; (1a8fc <cancel_sync_locked+0x38>)
	canceler->work = work;
   1a8e6:	6065      	str	r5, [r4, #4]
   1a8e8:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_APPEND(slist, snode)
   1a8ea:	b91a      	cbnz	r2, 1a8f4 <cancel_sync_locked+0x30>
	list->head = node;
   1a8ec:	e9c3 4400 	strd	r4, r4, [r3]
}
   1a8f0:	4630      	mov	r0, r6
   1a8f2:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   1a8f4:	6014      	str	r4, [r2, #0]
	list->tail = node;
   1a8f6:	605c      	str	r4, [r3, #4]
}
   1a8f8:	e7fa      	b.n	1a8f0 <cancel_sync_locked+0x2c>
   1a8fa:	bf00      	nop
   1a8fc:	200028d0 	.word	0x200028d0

0001a900 <submit_to_queue_locked>:
{
   1a900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
   1a902:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a904:	079a      	lsls	r2, r3, #30
{
   1a906:	4604      	mov	r4, r0
   1a908:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   1a90a:	f3c3 0540 	ubfx	r5, r3, #1, #1
   1a90e:	d41f      	bmi.n	1a950 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   1a910:	075f      	lsls	r7, r3, #29
   1a912:	d41f      	bmi.n	1a954 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
   1a914:	680a      	ldr	r2, [r1, #0]
   1a916:	b90a      	cbnz	r2, 1a91c <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   1a918:	6882      	ldr	r2, [r0, #8]
   1a91a:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   1a91c:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
   1a91e:	bf44      	itt	mi
   1a920:	68a3      	ldrmi	r3, [r4, #8]
   1a922:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
   1a924:	6837      	ldr	r7, [r6, #0]
			ret = 2;
   1a926:	bf4c      	ite	mi
   1a928:	2502      	movmi	r5, #2
		ret = 1;
   1a92a:	2501      	movpl	r5, #1
	if (queue == NULL) {
   1a92c:	b37f      	cbz	r7, 1a98e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a92e:	4b1b      	ldr	r3, [pc, #108]	; (1a99c <submit_to_queue_locked+0x9c>)
   1a930:	689b      	ldr	r3, [r3, #8]
   1a932:	42bb      	cmp	r3, r7
   1a934:	d111      	bne.n	1a95a <submit_to_queue_locked+0x5a>
   1a936:	f005 fc06 	bl	20146 <k_is_in_isr>
   1a93a:	f080 0001 	eor.w	r0, r0, #1
   1a93e:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
   1a940:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a944:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   1a946:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   1a94a:	d523      	bpl.n	1a994 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
   1a94c:	b13a      	cbz	r2, 1a95e <submit_to_queue_locked+0x5e>
   1a94e:	b940      	cbnz	r0, 1a962 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
   1a950:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   1a954:	2300      	movs	r3, #0
   1a956:	6033      	str	r3, [r6, #0]
	return ret;
   1a958:	e013      	b.n	1a982 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1a95a:	2000      	movs	r0, #0
   1a95c:	e7f0      	b.n	1a940 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
   1a95e:	071b      	lsls	r3, r3, #28
   1a960:	d4f6      	bmi.n	1a950 <submit_to_queue_locked+0x50>
	parent->next = child;
   1a962:	2300      	movs	r3, #0
   1a964:	6023      	str	r3, [r4, #0]
	return list->tail;
   1a966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
   1a96a:	b963      	cbnz	r3, 1a986 <submit_to_queue_locked+0x86>
	list->head = node;
   1a96c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
   1a970:	4638      	mov	r0, r7
   1a972:	f005 fcfa 	bl	2036a <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
   1a976:	68e3      	ldr	r3, [r4, #12]
   1a978:	f043 0304 	orr.w	r3, r3, #4
   1a97c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   1a97e:	6833      	ldr	r3, [r6, #0]
   1a980:	60a3      	str	r3, [r4, #8]
}
   1a982:	4628      	mov	r0, r5
   1a984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   1a986:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1a988:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
   1a98c:	e7f0      	b.n	1a970 <submit_to_queue_locked+0x70>
		return -EINVAL;
   1a98e:	f06f 0515 	mvn.w	r5, #21
   1a992:	e7df      	b.n	1a954 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
   1a994:	f06f 0512 	mvn.w	r5, #18
   1a998:	e7dc      	b.n	1a954 <submit_to_queue_locked+0x54>
   1a99a:	bf00      	nop
   1a99c:	200028a0 	.word	0x200028a0

0001a9a0 <k_work_submit>:
{
   1a9a0:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   1a9a2:	4801      	ldr	r0, [pc, #4]	; (1a9a8 <k_work_submit+0x8>)
   1a9a4:	f005 bd41 	b.w	2042a <k_work_submit_to_queue>
   1a9a8:	20001338 	.word	0x20001338

0001a9ac <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1a9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a9ae:	b089      	sub	sp, #36	; 0x24
   1a9b0:	4604      	mov	r4, r0
	list->head = NULL;
   1a9b2:	2000      	movs	r0, #0
	list->tail = NULL;
   1a9b4:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
   1a9b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1a9ba:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
   1a9be:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
   1a9c2:	f104 0090 	add.w	r0, r4, #144	; 0x90
   1a9c6:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   1a9ca:	b31d      	cbz	r5, 1aa14 <k_work_queue_start+0x68>
   1a9cc:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   1a9ce:	2800      	cmp	r0, #0
   1a9d0:	f240 1001 	movw	r0, #257	; 0x101
   1a9d4:	bf08      	it	eq
   1a9d6:	2001      	moveq	r0, #1
	*flagp = flags;
   1a9d8:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1a9dc:	2000      	movs	r0, #0
   1a9de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1a9e2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   1a9e6:	e9cd 3003 	strd	r3, r0, [sp, #12]
   1a9ea:	e9cd 0001 	strd	r0, r0, [sp, #4]
   1a9ee:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1a9f2:	4b09      	ldr	r3, [pc, #36]	; (1aa18 <k_work_queue_start+0x6c>)
   1a9f4:	9400      	str	r4, [sp, #0]
   1a9f6:	4620      	mov	r0, r4
   1a9f8:	f7ff fcda 	bl	1a3b0 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   1a9fc:	b125      	cbz	r5, 1aa08 <k_work_queue_start+0x5c>
   1a9fe:	6829      	ldr	r1, [r5, #0]
   1aa00:	b111      	cbz	r1, 1aa08 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
   1aa02:	4620      	mov	r0, r4
   1aa04:	f005 fba5 	bl	20152 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1aa08:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   1aa0a:	b009      	add	sp, #36	; 0x24
   1aa0c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   1aa10:	f005 bba4 	b.w	2015c <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1aa14:	2001      	movs	r0, #1
   1aa16:	e7df      	b.n	1a9d8 <k_work_queue_start+0x2c>
   1aa18:	0001a799 	.word	0x0001a799

0001aa1c <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   1aa1c:	b513      	push	{r0, r1, r4, lr}
   1aa1e:	9001      	str	r0, [sp, #4]
   1aa20:	4608      	mov	r0, r1
	__asm__ volatile(
   1aa22:	f04f 0120 	mov.w	r1, #32
   1aa26:	f3ef 8411 	mrs	r4, BASEPRI
   1aa2a:	f381 8812 	msr	BASEPRI_MAX, r1
   1aa2e:	f3bf 8f6f 	isb	sy
	return *flagp;
   1aa32:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   1aa34:	f011 0f0e 	tst.w	r1, #14
   1aa38:	d116      	bne.n	1aa68 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aa3a:	ea53 0c02 	orrs.w	ip, r3, r2
   1aa3e:	d108      	bne.n	1aa52 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
   1aa40:	a901      	add	r1, sp, #4
   1aa42:	f7ff ff5d 	bl	1a900 <submit_to_queue_locked>
	__asm__ volatile(
   1aa46:	f384 8811 	msr	BASEPRI, r4
   1aa4a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1aa4e:	b002      	add	sp, #8
   1aa50:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
   1aa52:	f041 0108 	orr.w	r1, r1, #8
   1aa56:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
   1aa58:	9901      	ldr	r1, [sp, #4]
   1aa5a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aa5c:	3010      	adds	r0, #16
   1aa5e:	4903      	ldr	r1, [pc, #12]	; (1aa6c <k_work_schedule_for_queue+0x50>)
   1aa60:	f000 fc10 	bl	1b284 <z_add_timeout>
	return ret;
   1aa64:	2001      	movs	r0, #1
   1aa66:	e7ee      	b.n	1aa46 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
   1aa68:	2000      	movs	r0, #0
   1aa6a:	e7ec      	b.n	1aa46 <k_work_schedule_for_queue+0x2a>
   1aa6c:	000203db 	.word	0x000203db

0001aa70 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   1aa70:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   1aa72:	4801      	ldr	r0, [pc, #4]	; (1aa78 <k_work_schedule+0x8>)
   1aa74:	f7ff bfd2 	b.w	1aa1c <k_work_schedule_for_queue>
   1aa78:	20001338 	.word	0x20001338

0001aa7c <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   1aa7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1aa7e:	460c      	mov	r4, r1
   1aa80:	9001      	str	r0, [sp, #4]
   1aa82:	4616      	mov	r6, r2
   1aa84:	461d      	mov	r5, r3
	__asm__ volatile(
   1aa86:	f04f 0320 	mov.w	r3, #32
   1aa8a:	f3ef 8711 	mrs	r7, BASEPRI
   1aa8e:	f383 8812 	msr	BASEPRI_MAX, r3
   1aa92:	f3bf 8f6f 	isb	sy

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   1aa96:	4608      	mov	r0, r1
   1aa98:	f005 fc59 	bl	2034e <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1aa9c:	ea55 0306 	orrs.w	r3, r5, r6
   1aaa0:	d109      	bne.n	1aab6 <k_work_reschedule_for_queue+0x3a>
		return submit_to_queue_locked(work, queuep);
   1aaa2:	a901      	add	r1, sp, #4
   1aaa4:	4620      	mov	r0, r4
   1aaa6:	f7ff ff2b 	bl	1a900 <submit_to_queue_locked>
	__asm__ volatile(
   1aaaa:	f387 8811 	msr	BASEPRI, r7
   1aaae:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   1aab2:	b003      	add	sp, #12
   1aab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   1aab6:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aab8:	4906      	ldr	r1, [pc, #24]	; (1aad4 <k_work_reschedule_for_queue+0x58>)
	*flagp |= BIT(bit);
   1aaba:	f043 0308 	orr.w	r3, r3, #8
   1aabe:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   1aac0:	9b01      	ldr	r3, [sp, #4]
   1aac2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   1aac4:	f104 0010 	add.w	r0, r4, #16
   1aac8:	4632      	mov	r2, r6
   1aaca:	462b      	mov	r3, r5
   1aacc:	f000 fbda 	bl	1b284 <z_add_timeout>
	return ret;
   1aad0:	2001      	movs	r0, #1
   1aad2:	e7ea      	b.n	1aaaa <k_work_reschedule_for_queue+0x2e>
   1aad4:	000203db 	.word	0x000203db

0001aad8 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   1aad8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   1aada:	4801      	ldr	r0, [pc, #4]	; (1aae0 <k_work_reschedule+0x8>)
   1aadc:	f7ff bfce 	b.w	1aa7c <k_work_reschedule_for_queue>
   1aae0:	20001338 	.word	0x20001338

0001aae4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1aae4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1aae6:	4c08      	ldr	r4, [pc, #32]	; (1ab08 <z_reset_time_slice+0x24>)
   1aae8:	6823      	ldr	r3, [r4, #0]
   1aaea:	b15b      	cbz	r3, 1ab04 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1aaec:	f7e8 fe34 	bl	3758 <sys_clock_elapsed>
   1aaf0:	4603      	mov	r3, r0
   1aaf2:	6820      	ldr	r0, [r4, #0]
   1aaf4:	4a05      	ldr	r2, [pc, #20]	; (1ab0c <z_reset_time_slice+0x28>)
   1aaf6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1aaf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   1aafc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   1aafe:	2100      	movs	r1, #0
   1ab00:	f005 be37 	b.w	20772 <z_set_timeout_expiry>
}
   1ab04:	bd10      	pop	{r4, pc}
   1ab06:	bf00      	nop
   1ab08:	200028e0 	.word	0x200028e0
   1ab0c:	200028a0 	.word	0x200028a0

0001ab10 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1ab10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab12:	4604      	mov	r4, r0
   1ab14:	460d      	mov	r5, r1
	__asm__ volatile(
   1ab16:	f04f 0320 	mov.w	r3, #32
   1ab1a:	f3ef 8611 	mrs	r6, BASEPRI
   1ab1e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ab22:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1ab26:	4b0f      	ldr	r3, [pc, #60]	; (1ab64 <k_sched_time_slice_set+0x54>)
   1ab28:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1ab2a:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   1ab2e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1ab32:	6119      	str	r1, [r3, #16]
   1ab34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ab38:	2300      	movs	r3, #0
   1ab3a:	fbe4 0107 	umlal	r0, r1, r4, r7
   1ab3e:	f7e5 fadf 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1ab42:	2c00      	cmp	r4, #0
   1ab44:	4b08      	ldr	r3, [pc, #32]	; (1ab68 <k_sched_time_slice_set+0x58>)
   1ab46:	dc09      	bgt.n	1ab5c <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   1ab48:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   1ab4a:	4b08      	ldr	r3, [pc, #32]	; (1ab6c <k_sched_time_slice_set+0x5c>)
   1ab4c:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1ab4e:	f7ff ffc9 	bl	1aae4 <z_reset_time_slice>
	__asm__ volatile(
   1ab52:	f386 8811 	msr	BASEPRI, r6
   1ab56:	f3bf 8f6f 	isb	sy
	}
}
   1ab5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   1ab5c:	2802      	cmp	r0, #2
   1ab5e:	bfb8      	it	lt
   1ab60:	2002      	movlt	r0, #2
   1ab62:	e7f1      	b.n	1ab48 <k_sched_time_slice_set+0x38>
   1ab64:	200028a0 	.word	0x200028a0
   1ab68:	200028e0 	.word	0x200028e0
   1ab6c:	200028dc 	.word	0x200028dc

0001ab70 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ab70:	b949      	cbnz	r1, 1ab86 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1ab72:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1ab76:	b930      	cbnz	r0, 1ab86 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
   1ab78:	4b05      	ldr	r3, [pc, #20]	; (1ab90 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
   1ab7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1ab7c:	689b      	ldr	r3, [r3, #8]
   1ab7e:	429a      	cmp	r2, r3
   1ab80:	d001      	beq.n	1ab86 <z_reschedule+0x16>
	ret = arch_swap(key);
   1ab82:	f7e9 b80d 	b.w	3ba0 <arch_swap>
   1ab86:	f381 8811 	msr	BASEPRI, r1
   1ab8a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1ab8e:	4770      	bx	lr
   1ab90:	200028a0 	.word	0x200028a0

0001ab94 <k_sched_lock>:
	__asm__ volatile(
   1ab94:	f04f 0320 	mov.w	r3, #32
   1ab98:	f3ef 8111 	mrs	r1, BASEPRI
   1ab9c:	f383 8812 	msr	BASEPRI_MAX, r3
   1aba0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1aba4:	4b04      	ldr	r3, [pc, #16]	; (1abb8 <k_sched_lock+0x24>)
   1aba6:	689a      	ldr	r2, [r3, #8]
   1aba8:	7bd3      	ldrb	r3, [r2, #15]
   1abaa:	3b01      	subs	r3, #1
   1abac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1abae:	f381 8811 	msr	BASEPRI, r1
   1abb2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   1abb6:	4770      	bx	lr
   1abb8:	200028a0 	.word	0x200028a0

0001abbc <update_cache>:
{
   1abbc:	b538      	push	{r3, r4, r5, lr}
   1abbe:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1abc0:	480c      	ldr	r0, [pc, #48]	; (1abf4 <update_cache+0x38>)
   1abc2:	4d0d      	ldr	r5, [pc, #52]	; (1abf8 <update_cache+0x3c>)
   1abc4:	f005 fcf3 	bl	205ae <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   1abc8:	4604      	mov	r4, r0
   1abca:	b900      	cbnz	r0, 1abce <update_cache+0x12>
   1abcc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
   1abce:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
   1abd0:	b94a      	cbnz	r2, 1abe6 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
   1abd2:	7b5a      	ldrb	r2, [r3, #13]
   1abd4:	06d2      	lsls	r2, r2, #27
   1abd6:	d106      	bne.n	1abe6 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1abd8:	69a2      	ldr	r2, [r4, #24]
   1abda:	b922      	cbnz	r2, 1abe6 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
   1abdc:	89da      	ldrh	r2, [r3, #14]
   1abde:	2a7f      	cmp	r2, #127	; 0x7f
   1abe0:	d901      	bls.n	1abe6 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
   1abe2:	626b      	str	r3, [r5, #36]	; 0x24
}
   1abe4:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1abe6:	429c      	cmp	r4, r3
   1abe8:	d001      	beq.n	1abee <update_cache+0x32>
			z_reset_time_slice();
   1abea:	f7ff ff7b 	bl	1aae4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1abee:	626c      	str	r4, [r5, #36]	; 0x24
}
   1abf0:	e7f8      	b.n	1abe4 <update_cache+0x28>
   1abf2:	bf00      	nop
   1abf4:	200028c8 	.word	0x200028c8
   1abf8:	200028a0 	.word	0x200028a0

0001abfc <unready_thread>:
{
   1abfc:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   1abfe:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ac02:	7b43      	ldrb	r3, [r0, #13]
   1ac04:	2a00      	cmp	r2, #0
{
   1ac06:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ac08:	da04      	bge.n	1ac14 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ac0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ac0e:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
   1ac10:	f005 fc78 	bl	20504 <sys_dlist_remove>
	update_cache(thread == _current);
   1ac14:	4b04      	ldr	r3, [pc, #16]	; (1ac28 <unready_thread+0x2c>)
   1ac16:	6898      	ldr	r0, [r3, #8]
   1ac18:	1a43      	subs	r3, r0, r1
   1ac1a:	4258      	negs	r0, r3
   1ac1c:	4158      	adcs	r0, r3
}
   1ac1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   1ac22:	f7ff bfcb 	b.w	1abbc <update_cache>
   1ac26:	bf00      	nop
   1ac28:	200028a0 	.word	0x200028a0

0001ac2c <pend>:
{
   1ac2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ac30:	4606      	mov	r6, r0
   1ac32:	4615      	mov	r5, r2
   1ac34:	461c      	mov	r4, r3
	__asm__ volatile(
   1ac36:	f04f 0320 	mov.w	r3, #32
   1ac3a:	f3ef 8711 	mrs	r7, BASEPRI
   1ac3e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ac42:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1ac46:	f005 fcb8 	bl	205ba <add_to_waitq_locked>
	__asm__ volatile(
   1ac4a:	f387 8811 	msr	BASEPRI, r7
   1ac4e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1ac52:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   1ac56:	bf08      	it	eq
   1ac58:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
   1ac5c:	d008      	beq.n	1ac70 <pend+0x44>
   1ac5e:	462a      	mov	r2, r5
   1ac60:	4623      	mov	r3, r4
   1ac62:	f106 0018 	add.w	r0, r6, #24
   1ac66:	4903      	ldr	r1, [pc, #12]	; (1ac74 <pend+0x48>)
}
   1ac68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ac6c:	f000 bb0a 	b.w	1b284 <z_add_timeout>
   1ac70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ac74:	0002062f 	.word	0x0002062f

0001ac78 <z_pend_curr>:
{
   1ac78:	b510      	push	{r4, lr}
	pending_current = _current;
   1ac7a:	4b07      	ldr	r3, [pc, #28]	; (1ac98 <z_pend_curr+0x20>)
   1ac7c:	6898      	ldr	r0, [r3, #8]
   1ac7e:	4b07      	ldr	r3, [pc, #28]	; (1ac9c <z_pend_curr+0x24>)
{
   1ac80:	460c      	mov	r4, r1
	pending_current = _current;
   1ac82:	6018      	str	r0, [r3, #0]
{
   1ac84:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1ac86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1ac8a:	f7ff ffcf 	bl	1ac2c <pend>
   1ac8e:	4620      	mov	r0, r4
}
   1ac90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1ac94:	f7e8 bf84 	b.w	3ba0 <arch_swap>
   1ac98:	200028a0 	.word	0x200028a0
   1ac9c:	200028d8 	.word	0x200028d8

0001aca0 <z_impl_k_thread_suspend>:
{
   1aca0:	b570      	push	{r4, r5, r6, lr}
   1aca2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1aca4:	3018      	adds	r0, #24
   1aca6:	f005 fd3e 	bl	20726 <z_abort_timeout>
	__asm__ volatile(
   1acaa:	f04f 0320 	mov.w	r3, #32
   1acae:	f3ef 8611 	mrs	r6, BASEPRI
   1acb2:	f383 8812 	msr	BASEPRI_MAX, r3
   1acb6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1acba:	f994 200d 	ldrsb.w	r2, [r4, #13]
   1acbe:	7b63      	ldrb	r3, [r4, #13]
   1acc0:	2a00      	cmp	r2, #0
   1acc2:	da05      	bge.n	1acd0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1acc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1acc8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1acca:	4620      	mov	r0, r4
   1accc:	f005 fc1a 	bl	20504 <sys_dlist_remove>
		update_cache(thread == _current);
   1acd0:	4d0b      	ldr	r5, [pc, #44]	; (1ad00 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1acd2:	7b63      	ldrb	r3, [r4, #13]
   1acd4:	68a8      	ldr	r0, [r5, #8]
   1acd6:	f043 0310 	orr.w	r3, r3, #16
   1acda:	7363      	strb	r3, [r4, #13]
   1acdc:	1b03      	subs	r3, r0, r4
   1acde:	4258      	negs	r0, r3
   1ace0:	4158      	adcs	r0, r3
   1ace2:	f7ff ff6b 	bl	1abbc <update_cache>
	__asm__ volatile(
   1ace6:	f386 8811 	msr	BASEPRI, r6
   1acea:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1acee:	68ab      	ldr	r3, [r5, #8]
   1acf0:	42a3      	cmp	r3, r4
   1acf2:	d103      	bne.n	1acfc <z_impl_k_thread_suspend+0x5c>
}
   1acf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1acf8:	f005 bc4f 	b.w	2059a <z_reschedule_unlocked>
}
   1acfc:	bd70      	pop	{r4, r5, r6, pc}
   1acfe:	bf00      	nop
   1ad00:	200028a0 	.word	0x200028a0

0001ad04 <k_sched_unlock>:
{
   1ad04:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ad06:	f04f 0320 	mov.w	r3, #32
   1ad0a:	f3ef 8411 	mrs	r4, BASEPRI
   1ad0e:	f383 8812 	msr	BASEPRI_MAX, r3
   1ad12:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1ad16:	4b08      	ldr	r3, [pc, #32]	; (1ad38 <k_sched_unlock+0x34>)
   1ad18:	689a      	ldr	r2, [r3, #8]
   1ad1a:	7bd3      	ldrb	r3, [r2, #15]
   1ad1c:	3301      	adds	r3, #1
   1ad1e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1ad20:	2000      	movs	r0, #0
   1ad22:	f7ff ff4b 	bl	1abbc <update_cache>
	__asm__ volatile(
   1ad26:	f384 8811 	msr	BASEPRI, r4
   1ad2a:	f3bf 8f6f 	isb	sy
}
   1ad2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1ad32:	f005 bc32 	b.w	2059a <z_reschedule_unlocked>
   1ad36:	bf00      	nop
   1ad38:	200028a0 	.word	0x200028a0

0001ad3c <move_thread_to_end_of_prio_q>:
{
   1ad3c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ad3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1ad42:	7b43      	ldrb	r3, [r0, #13]
   1ad44:	2a00      	cmp	r2, #0
{
   1ad46:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ad48:	da04      	bge.n	1ad54 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1ad4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ad4e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1ad50:	f005 fbd8 	bl	20504 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1ad54:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
   1ad56:	4a15      	ldr	r2, [pc, #84]	; (1adac <move_thread_to_end_of_prio_q+0x70>)
   1ad58:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ad5c:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
   1ad5e:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ad62:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1ad66:	42ab      	cmp	r3, r5
   1ad68:	d01b      	beq.n	1ada2 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ad6a:	b1d3      	cbz	r3, 1ada2 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
   1ad6c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
   1ad70:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   1ad74:	4286      	cmp	r6, r0
   1ad76:	d00f      	beq.n	1ad98 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
   1ad78:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ad7a:	2800      	cmp	r0, #0
   1ad7c:	dd0c      	ble.n	1ad98 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   1ad7e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
   1ad80:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
   1ad84:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1ad86:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
   1ad88:	6890      	ldr	r0, [r2, #8]
   1ad8a:	1a43      	subs	r3, r0, r1
   1ad8c:	4258      	negs	r0, r3
}
   1ad8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ad92:	4158      	adcs	r0, r3
   1ad94:	f7ff bf12 	b.w	1abbc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ad98:	42a3      	cmp	r3, r4
   1ad9a:	d002      	beq.n	1ada2 <move_thread_to_end_of_prio_q+0x66>
   1ad9c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ad9e:	2b00      	cmp	r3, #0
   1ada0:	d1e6      	bne.n	1ad70 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
   1ada2:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
   1ada6:	6021      	str	r1, [r4, #0]
	list->tail = node;
   1ada8:	62d1      	str	r1, [r2, #44]	; 0x2c
}
   1adaa:	e7ed      	b.n	1ad88 <move_thread_to_end_of_prio_q+0x4c>
   1adac:	200028a0 	.word	0x200028a0

0001adb0 <z_time_slice>:
{
   1adb0:	b538      	push	{r3, r4, r5, lr}
   1adb2:	4601      	mov	r1, r0
	__asm__ volatile(
   1adb4:	f04f 0320 	mov.w	r3, #32
   1adb8:	f3ef 8411 	mrs	r4, BASEPRI
   1adbc:	f383 8812 	msr	BASEPRI_MAX, r3
   1adc0:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1adc4:	4b15      	ldr	r3, [pc, #84]	; (1ae1c <z_time_slice+0x6c>)
   1adc6:	4a16      	ldr	r2, [pc, #88]	; (1ae20 <z_time_slice+0x70>)
   1adc8:	6898      	ldr	r0, [r3, #8]
   1adca:	6815      	ldr	r5, [r2, #0]
   1adcc:	42a8      	cmp	r0, r5
   1adce:	d106      	bne.n	1adde <z_time_slice+0x2e>
			z_reset_time_slice();
   1add0:	f7ff fe88 	bl	1aae4 <z_reset_time_slice>
	__asm__ volatile(
   1add4:	f384 8811 	msr	BASEPRI, r4
   1add8:	f3bf 8f6f 	isb	sy
}
   1addc:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1adde:	2500      	movs	r5, #0
   1ade0:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1ade2:	4a10      	ldr	r2, [pc, #64]	; (1ae24 <z_time_slice+0x74>)
   1ade4:	6812      	ldr	r2, [r2, #0]
   1ade6:	b1ba      	cbz	r2, 1ae18 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1ade8:	89c2      	ldrh	r2, [r0, #14]
   1adea:	2a7f      	cmp	r2, #127	; 0x7f
   1adec:	d814      	bhi.n	1ae18 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1adee:	7b42      	ldrb	r2, [r0, #13]
   1adf0:	06d2      	lsls	r2, r2, #27
   1adf2:	d111      	bne.n	1ae18 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1adf4:	4a0c      	ldr	r2, [pc, #48]	; (1ae28 <z_time_slice+0x78>)
   1adf6:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1adfa:	6812      	ldr	r2, [r2, #0]
   1adfc:	4295      	cmp	r5, r2
   1adfe:	db0b      	blt.n	1ae18 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1ae00:	4a0a      	ldr	r2, [pc, #40]	; (1ae2c <z_time_slice+0x7c>)
   1ae02:	4290      	cmp	r0, r2
   1ae04:	d008      	beq.n	1ae18 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1ae06:	691a      	ldr	r2, [r3, #16]
   1ae08:	428a      	cmp	r2, r1
   1ae0a:	dc02      	bgt.n	1ae12 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1ae0c:	f7ff ff96 	bl	1ad3c <move_thread_to_end_of_prio_q>
   1ae10:	e7de      	b.n	1add0 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1ae12:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1ae14:	611a      	str	r2, [r3, #16]
   1ae16:	e7dd      	b.n	1add4 <z_time_slice+0x24>
   1ae18:	2200      	movs	r2, #0
   1ae1a:	e7fb      	b.n	1ae14 <z_time_slice+0x64>
   1ae1c:	200028a0 	.word	0x200028a0
   1ae20:	200028d8 	.word	0x200028d8
   1ae24:	200028e0 	.word	0x200028e0
   1ae28:	200028dc 	.word	0x200028dc
   1ae2c:	20001238 	.word	0x20001238

0001ae30 <ready_thread>:
{
   1ae30:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1ae32:	f990 200d 	ldrsb.w	r2, [r0, #13]
   1ae36:	7b43      	ldrb	r3, [r0, #13]
   1ae38:	2a00      	cmp	r2, #0
   1ae3a:	db2a      	blt.n	1ae92 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ae3c:	06da      	lsls	r2, r3, #27
   1ae3e:	d128      	bne.n	1ae92 <ready_thread+0x62>
   1ae40:	6982      	ldr	r2, [r0, #24]
   1ae42:	bb32      	cbnz	r2, 1ae92 <ready_thread+0x62>
	return list->head == list;
   1ae44:	4a14      	ldr	r2, [pc, #80]	; (1ae98 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
   1ae46:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ae4a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
   1ae4c:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ae50:	f102 0528 	add.w	r5, r2, #40	; 0x28
   1ae54:	42ab      	cmp	r3, r5
   1ae56:	d017      	beq.n	1ae88 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae58:	b1b3      	cbz	r3, 1ae88 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
   1ae5a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1ae5e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
   1ae62:	428e      	cmp	r6, r1
   1ae64:	d00b      	beq.n	1ae7e <ready_thread+0x4e>
		return b2 - b1;
   1ae66:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1ae68:	2900      	cmp	r1, #0
   1ae6a:	dd08      	ble.n	1ae7e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
   1ae6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ae6e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
   1ae72:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ae74:	6058      	str	r0, [r3, #4]
}
   1ae76:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   1ae78:	2000      	movs	r0, #0
   1ae7a:	f7ff be9f 	b.w	1abbc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ae7e:	42a3      	cmp	r3, r4
   1ae80:	d002      	beq.n	1ae88 <ready_thread+0x58>
   1ae82:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ae84:	2b00      	cmp	r3, #0
   1ae86:	d1ea      	bne.n	1ae5e <ready_thread+0x2e>
	node->prev = tail;
   1ae88:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
   1ae8c:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1ae8e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
   1ae90:	e7f1      	b.n	1ae76 <ready_thread+0x46>
}
   1ae92:	bc70      	pop	{r4, r5, r6}
   1ae94:	4770      	bx	lr
   1ae96:	bf00      	nop
   1ae98:	200028a0 	.word	0x200028a0

0001ae9c <z_sched_start>:
{
   1ae9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ae9e:	f04f 0220 	mov.w	r2, #32
   1aea2:	f3ef 8411 	mrs	r4, BASEPRI
   1aea6:	f382 8812 	msr	BASEPRI_MAX, r2
   1aeaa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1aeae:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1aeb0:	0751      	lsls	r1, r2, #29
   1aeb2:	d404      	bmi.n	1aebe <z_sched_start+0x22>
	__asm__ volatile(
   1aeb4:	f384 8811 	msr	BASEPRI, r4
   1aeb8:	f3bf 8f6f 	isb	sy
}
   1aebc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1aebe:	f022 0204 	bic.w	r2, r2, #4
   1aec2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1aec4:	f7ff ffb4 	bl	1ae30 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1aec8:	4621      	mov	r1, r4
   1aeca:	4802      	ldr	r0, [pc, #8]	; (1aed4 <z_sched_start+0x38>)
}
   1aecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1aed0:	f7ff be4e 	b.w	1ab70 <z_reschedule>
   1aed4:	20002e98 	.word	0x20002e98

0001aed8 <z_set_prio>:
{
   1aed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1aeda:	4604      	mov	r4, r0
	__asm__ volatile(
   1aedc:	f04f 0320 	mov.w	r3, #32
   1aee0:	f3ef 8611 	mrs	r6, BASEPRI
   1aee4:	f383 8812 	msr	BASEPRI_MAX, r3
   1aee8:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1aeec:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1aeee:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
   1aef0:	b249      	sxtb	r1, r1
   1aef2:	d133      	bne.n	1af5c <z_set_prio+0x84>
		if (need_sched) {
   1aef4:	6982      	ldr	r2, [r0, #24]
   1aef6:	bb8a      	cbnz	r2, 1af5c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1aef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1aefc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1aefe:	f005 fb01 	bl	20504 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   1af02:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
   1af04:	4a17      	ldr	r2, [pc, #92]	; (1af64 <z_set_prio+0x8c>)
				thread->base.prio = prio;
   1af06:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   1af08:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1af0c:	7343      	strb	r3, [r0, #13]
   1af0e:	4610      	mov	r0, r2
   1af10:	f850 3f28 	ldr.w	r3, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1af14:	4283      	cmp	r3, r0
   1af16:	d01b      	beq.n	1af50 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1af18:	b1d3      	cbz	r3, 1af50 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
   1af1a:	6ad7      	ldr	r7, [r2, #44]	; 0x2c
	int32_t b2 = thread_2->base.prio;
   1af1c:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
   1af20:	42a9      	cmp	r1, r5
   1af22:	d010      	beq.n	1af46 <z_set_prio+0x6e>
		return b2 - b1;
   1af24:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   1af26:	2d00      	cmp	r5, #0
   1af28:	dd0d      	ble.n	1af46 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
   1af2a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1af2c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1af30:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1af32:	605c      	str	r4, [r3, #4]
			update_cache(1);
   1af34:	2001      	movs	r0, #1
   1af36:	f7ff fe41 	bl	1abbc <update_cache>
   1af3a:	2001      	movs	r0, #1
	__asm__ volatile(
   1af3c:	f386 8811 	msr	BASEPRI, r6
   1af40:	f3bf 8f6f 	isb	sy
}
   1af44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   1af46:	42bb      	cmp	r3, r7
   1af48:	d002      	beq.n	1af50 <z_set_prio+0x78>
   1af4a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1af4c:	2b00      	cmp	r3, #0
   1af4e:	d1e5      	bne.n	1af1c <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
   1af50:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->prev = tail;
   1af52:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
   1af56:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1af58:	62d4      	str	r4, [r2, #44]	; 0x2c
}
   1af5a:	e7eb      	b.n	1af34 <z_set_prio+0x5c>
			thread->base.prio = prio;
   1af5c:	73a1      	strb	r1, [r4, #14]
   1af5e:	2000      	movs	r0, #0
   1af60:	e7ec      	b.n	1af3c <z_set_prio+0x64>
   1af62:	bf00      	nop
   1af64:	200028a0 	.word	0x200028a0

0001af68 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   1af68:	4b04      	ldr	r3, [pc, #16]	; (1af7c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1af6a:	2100      	movs	r1, #0
   1af6c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
   1af70:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
   1af74:	4608      	mov	r0, r1
   1af76:	f7ff bdcb 	b.w	1ab10 <k_sched_time_slice_set>
   1af7a:	bf00      	nop
   1af7c:	200028a0 	.word	0x200028a0

0001af80 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   1af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   1af82:	f04f 0320 	mov.w	r3, #32
   1af86:	f3ef 8511 	mrs	r5, BASEPRI
   1af8a:	f383 8812 	msr	BASEPRI_MAX, r3
   1af8e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(&_kernel.ready_q.runq,
   1af92:	491a      	ldr	r1, [pc, #104]	; (1affc <z_impl_k_yield+0x7c>)
   1af94:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1af96:	7b43      	ldrb	r3, [r0, #13]
   1af98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1af9c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1af9e:	f005 fab1 	bl	20504 <sys_dlist_remove>
			       _current);
	}
	queue_thread(&_kernel.ready_q.runq, _current);
   1afa2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   1afa4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
   1afa6:	4608      	mov	r0, r1
   1afa8:	f062 027f 	orn	r2, r2, #127	; 0x7f
   1afac:	735a      	strb	r2, [r3, #13]
   1afae:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1afb2:	4282      	cmp	r2, r0
   1afb4:	d01c      	beq.n	1aff0 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1afb6:	b1da      	cbz	r2, 1aff0 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
   1afb8:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
   1afba:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
   1afbe:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
   1afc2:	42a6      	cmp	r6, r4
   1afc4:	d00f      	beq.n	1afe6 <z_impl_k_yield+0x66>
		return b2 - b1;
   1afc6:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   1afc8:	2c00      	cmp	r4, #0
   1afca:	dd0c      	ble.n	1afe6 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
   1afcc:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   1afce:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
   1afd2:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   1afd4:	6053      	str	r3, [r2, #4]
	update_cache(1);
   1afd6:	2001      	movs	r0, #1
   1afd8:	f7ff fdf0 	bl	1abbc <update_cache>
   1afdc:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
   1afde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1afe2:	f7e8 bddd 	b.w	3ba0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   1afe6:	42ba      	cmp	r2, r7
   1afe8:	d002      	beq.n	1aff0 <z_impl_k_yield+0x70>
   1afea:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1afec:	2a00      	cmp	r2, #0
   1afee:	d1e6      	bne.n	1afbe <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
   1aff0:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
   1aff2:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
   1aff6:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1aff8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
   1affa:	e7ec      	b.n	1afd6 <z_impl_k_yield+0x56>
   1affc:	200028a0 	.word	0x200028a0

0001b000 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   1b000:	ea50 0301 	orrs.w	r3, r0, r1
{
   1b004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b008:	4605      	mov	r5, r0
   1b00a:	460e      	mov	r6, r1
	if (ticks == 0) {
   1b00c:	d103      	bne.n	1b016 <z_tick_sleep+0x16>
	z_impl_k_yield();
   1b00e:	f7ff ffb7 	bl	1af80 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
   1b012:	2000      	movs	r0, #0
   1b014:	e033      	b.n	1b07e <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1b016:	f06f 0401 	mvn.w	r4, #1
   1b01a:	1a24      	subs	r4, r4, r0
   1b01c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b020:	eb63 0301 	sbc.w	r3, r3, r1
   1b024:	2c01      	cmp	r4, #1
   1b026:	f173 0300 	sbcs.w	r3, r3, #0
   1b02a:	da02      	bge.n	1b032 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   1b02c:	f005 fbbb 	bl	207a6 <sys_clock_tick_get_32>
   1b030:	1944      	adds	r4, r0, r5
   1b032:	f04f 0320 	mov.w	r3, #32
   1b036:	f3ef 8811 	mrs	r8, BASEPRI
   1b03a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b03e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1b042:	4f10      	ldr	r7, [pc, #64]	; (1b084 <z_tick_sleep+0x84>)
   1b044:	4b10      	ldr	r3, [pc, #64]	; (1b088 <z_tick_sleep+0x88>)
   1b046:	68b8      	ldr	r0, [r7, #8]
   1b048:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1b04a:	f7ff fdd7 	bl	1abfc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1b04e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1b050:	490e      	ldr	r1, [pc, #56]	; (1b08c <z_tick_sleep+0x8c>)
   1b052:	462a      	mov	r2, r5
   1b054:	4633      	mov	r3, r6
   1b056:	3018      	adds	r0, #24
   1b058:	f000 f914 	bl	1b284 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   1b05c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1b05e:	7b53      	ldrb	r3, [r2, #13]
   1b060:	f043 0310 	orr.w	r3, r3, #16
   1b064:	7353      	strb	r3, [r2, #13]
   1b066:	4640      	mov	r0, r8
   1b068:	f7e8 fd9a 	bl	3ba0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   1b06c:	f005 fb9b 	bl	207a6 <sys_clock_tick_get_32>
   1b070:	1a20      	subs	r0, r4, r0
   1b072:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
   1b076:	2801      	cmp	r0, #1
   1b078:	f173 0300 	sbcs.w	r3, r3, #0
   1b07c:	dbc9      	blt.n	1b012 <z_tick_sleep+0x12>
}
   1b07e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b082:	bf00      	nop
   1b084:	200028a0 	.word	0x200028a0
   1b088:	200028d8 	.word	0x200028d8
   1b08c:	0002062f 	.word	0x0002062f

0001b090 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b090:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b094:	bf08      	it	eq
   1b096:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1b09a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b09c:	d106      	bne.n	1b0ac <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   1b09e:	4b08      	ldr	r3, [pc, #32]	; (1b0c0 <z_impl_k_sleep+0x30>)
   1b0a0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1b0a2:	f7ff fdfd 	bl	1aca0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   1b0a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   1b0aa:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   1b0ac:	f7ff ffa8 	bl	1b000 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   1b0b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1b0b4:	fb80 0303 	smull	r0, r3, r0, r3
   1b0b8:	0bc0      	lsrs	r0, r0, #15
   1b0ba:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
   1b0be:	e7f4      	b.n	1b0aa <z_impl_k_sleep+0x1a>
   1b0c0:	200028a0 	.word	0x200028a0

0001b0c4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   1b0c4:	4b01      	ldr	r3, [pc, #4]	; (1b0cc <z_impl_k_current_get+0x8>)
   1b0c6:	6898      	ldr	r0, [r3, #8]
   1b0c8:	4770      	bx	lr
   1b0ca:	bf00      	nop
   1b0cc:	200028a0 	.word	0x200028a0

0001b0d0 <z_impl_k_is_preempt_thread>:
   1b0d0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/k_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   1b0d4:	b93b      	cbnz	r3, 1b0e6 <z_impl_k_is_preempt_thread+0x16>
   1b0d6:	4b05      	ldr	r3, [pc, #20]	; (1b0ec <z_impl_k_is_preempt_thread+0x1c>)
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   1b0d8:	689b      	ldr	r3, [r3, #8]
	return !arch_is_in_isr() && is_preempt(_current);
   1b0da:	89d8      	ldrh	r0, [r3, #14]
   1b0dc:	287f      	cmp	r0, #127	; 0x7f
   1b0de:	bf8c      	ite	hi
   1b0e0:	2000      	movhi	r0, #0
   1b0e2:	2001      	movls	r0, #1
   1b0e4:	4770      	bx	lr
   1b0e6:	2000      	movs	r0, #0
}
   1b0e8:	4770      	bx	lr
   1b0ea:	bf00      	nop
   1b0ec:	200028a0 	.word	0x200028a0

0001b0f0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   1b0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b0f4:	4604      	mov	r4, r0
   1b0f6:	f04f 0320 	mov.w	r3, #32
   1b0fa:	f3ef 8611 	mrs	r6, BASEPRI
   1b0fe:	f383 8812 	msr	BASEPRI_MAX, r3
   1b102:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   1b106:	7b43      	ldrb	r3, [r0, #13]
   1b108:	071a      	lsls	r2, r3, #28
   1b10a:	d505      	bpl.n	1b118 <z_thread_abort+0x28>
	__asm__ volatile(
   1b10c:	f386 8811 	msr	BASEPRI, r6
   1b110:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   1b114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b118:	f023 0220 	bic.w	r2, r3, #32
   1b11c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   1b120:	09d2      	lsrs	r2, r2, #7
   1b122:	d120      	bne.n	1b166 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   1b124:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
   1b126:	68a3      	ldr	r3, [r4, #8]
   1b128:	b113      	cbz	r3, 1b130 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
   1b12a:	4620      	mov	r0, r4
   1b12c:	f005 f9f2 	bl	20514 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   1b130:	f104 0018 	add.w	r0, r4, #24
   1b134:	f005 faf7 	bl	20726 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1b138:	f104 0758 	add.w	r7, r4, #88	; 0x58
   1b13c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   1b140:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b142:	42bd      	cmp	r5, r7
   1b144:	d000      	beq.n	1b148 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1b146:	b9b5      	cbnz	r5, 1b176 <z_thread_abort+0x86>
		update_cache(1);
   1b148:	2001      	movs	r0, #1
   1b14a:	f7ff fd37 	bl	1abbc <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
   1b14e:	4b10      	ldr	r3, [pc, #64]	; (1b190 <z_thread_abort+0xa0>)
   1b150:	689b      	ldr	r3, [r3, #8]
   1b152:	42a3      	cmp	r3, r4
   1b154:	d1da      	bne.n	1b10c <z_thread_abort+0x1c>
   1b156:	f3ef 8305 	mrs	r3, IPSR
   1b15a:	2b00      	cmp	r3, #0
   1b15c:	d1d6      	bne.n	1b10c <z_thread_abort+0x1c>
   1b15e:	4630      	mov	r0, r6
   1b160:	f7e8 fd1e 	bl	3ba0 <arch_swap>
	return ret;
   1b164:	e7d2      	b.n	1b10c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1b166:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   1b16a:	f043 0308 	orr.w	r3, r3, #8
   1b16e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
   1b170:	f005 f9c8 	bl	20504 <sys_dlist_remove>
}
   1b174:	e7d7      	b.n	1b126 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
   1b176:	4628      	mov	r0, r5
   1b178:	f005 f9cc 	bl	20514 <unpend_thread_no_timeout>
   1b17c:	f105 0018 	add.w	r0, r5, #24
   1b180:	f005 fad1 	bl	20726 <z_abort_timeout>
   1b184:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
   1b188:	4628      	mov	r0, r5
   1b18a:	f7ff fe51 	bl	1ae30 <ready_thread>
   1b18e:	e7d7      	b.n	1b140 <z_thread_abort+0x50>
   1b190:	200028a0 	.word	0x200028a0

0001b194 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   1b194:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b196:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   1b19a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   1b19c:	e9cd 6700 	strd	r6, r7, [sp]
   1b1a0:	f7ff fd6a 	bl	1ac78 <z_pend_curr>

	if (data != NULL) {
   1b1a4:	b11c      	cbz	r4, 1b1ae <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   1b1a6:	4b03      	ldr	r3, [pc, #12]	; (1b1b4 <z_sched_wait+0x20>)
   1b1a8:	689b      	ldr	r3, [r3, #8]
   1b1aa:	695b      	ldr	r3, [r3, #20]
   1b1ac:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1b1ae:	b002      	add	sp, #8
   1b1b0:	bdd0      	pop	{r4, r6, r7, pc}
   1b1b2:	bf00      	nop
   1b1b4:	200028a0 	.word	0x200028a0

0001b1b8 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   1b1b8:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1b1ba:	4806      	ldr	r0, [pc, #24]	; (1b1d4 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1b1bc:	4a06      	ldr	r2, [pc, #24]	; (1b1d8 <z_data_copy+0x20>)
   1b1be:	4907      	ldr	r1, [pc, #28]	; (1b1dc <z_data_copy+0x24>)
   1b1c0:	1a12      	subs	r2, r2, r0
   1b1c2:	f002 fc23 	bl	1da0c <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1b1c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1b1ca:	4a05      	ldr	r2, [pc, #20]	; (1b1e0 <z_data_copy+0x28>)
   1b1cc:	4905      	ldr	r1, [pc, #20]	; (1b1e4 <z_data_copy+0x2c>)
   1b1ce:	4806      	ldr	r0, [pc, #24]	; (1b1e8 <z_data_copy+0x30>)
   1b1d0:	f002 bc1c 	b.w	1da0c <memcpy>
   1b1d4:	20000000 	.word	0x20000000
   1b1d8:	200008e4 	.word	0x200008e4
   1b1dc:	00024858 	.word	0x00024858
   1b1e0:	00000000 	.word	0x00000000
   1b1e4:	00024858 	.word	0x00024858
   1b1e8:	20000000 	.word	0x20000000

0001b1ec <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   1b1ec:	4b03      	ldr	r3, [pc, #12]	; (1b1fc <elapsed+0x10>)
   1b1ee:	681b      	ldr	r3, [r3, #0]
   1b1f0:	b90b      	cbnz	r3, 1b1f6 <elapsed+0xa>
   1b1f2:	f7e8 bab1 	b.w	3758 <sys_clock_elapsed>
}
   1b1f6:	2000      	movs	r0, #0
   1b1f8:	4770      	bx	lr
   1b1fa:	bf00      	nop
   1b1fc:	200028e4 	.word	0x200028e4

0001b200 <next_timeout>:
	return list->head == list;
   1b200:	4b11      	ldr	r3, [pc, #68]	; (1b248 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   1b202:	b510      	push	{r4, lr}
   1b204:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b206:	429c      	cmp	r4, r3
   1b208:	bf08      	it	eq
   1b20a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1b20c:	f7ff ffee 	bl	1b1ec <elapsed>
   1b210:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   1b212:	b16c      	cbz	r4, 1b230 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1b214:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   1b218:	1ac0      	subs	r0, r0, r3
   1b21a:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1b21e:	2801      	cmp	r0, #1
   1b220:	f173 0200 	sbcs.w	r2, r3, #0
   1b224:	db0d      	blt.n	1b242 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   1b226:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   1b22a:	f173 0300 	sbcs.w	r3, r3, #0
   1b22e:	db01      	blt.n	1b234 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   1b230:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   1b234:	4b05      	ldr	r3, [pc, #20]	; (1b24c <next_timeout+0x4c>)
   1b236:	691b      	ldr	r3, [r3, #16]
   1b238:	b113      	cbz	r3, 1b240 <next_timeout+0x40>
   1b23a:	4298      	cmp	r0, r3
   1b23c:	bfa8      	it	ge
   1b23e:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1b240:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   1b242:	2000      	movs	r0, #0
   1b244:	e7f6      	b.n	1b234 <next_timeout+0x34>
   1b246:	bf00      	nop
   1b248:	200005f4 	.word	0x200005f4
   1b24c:	200028a0 	.word	0x200028a0

0001b250 <remove_timeout>:
{
   1b250:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   1b252:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1b254:	b168      	cbz	r0, 1b272 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   1b256:	4a0a      	ldr	r2, [pc, #40]	; (1b280 <remove_timeout+0x30>)
   1b258:	6852      	ldr	r2, [r2, #4]
   1b25a:	4290      	cmp	r0, r2
   1b25c:	d009      	beq.n	1b272 <remove_timeout+0x22>
	if (next(t) != NULL) {
   1b25e:	b143      	cbz	r3, 1b272 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   1b260:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   1b264:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b268:	1912      	adds	r2, r2, r4
   1b26a:	eb41 0105 	adc.w	r1, r1, r5
   1b26e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   1b272:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
   1b274:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b276:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b278:	2300      	movs	r3, #0
	node->prev = NULL;
   1b27a:	e9c0 3300 	strd	r3, r3, [r0]
}
   1b27e:	bd30      	pop	{r4, r5, pc}
   1b280:	200005f4 	.word	0x200005f4

0001b284 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b288:	bf08      	it	eq
   1b28a:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   1b28e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b290:	4604      	mov	r4, r0
   1b292:	461f      	mov	r7, r3
   1b294:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1b296:	d067      	beq.n	1b368 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   1b298:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
   1b29a:	f04f 0320 	mov.w	r3, #32
   1b29e:	f3ef 8611 	mrs	r6, BASEPRI
   1b2a2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b2a6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1b2aa:	f06f 0201 	mvn.w	r2, #1
   1b2ae:	1b53      	subs	r3, r2, r5
   1b2b0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   1b2b4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1b2b8:	2b00      	cmp	r3, #0
   1b2ba:	db1b      	blt.n	1b2f4 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   1b2bc:	4b2b      	ldr	r3, [pc, #172]	; (1b36c <z_add_timeout+0xe8>)
   1b2be:	e9d3 1300 	ldrd	r1, r3, [r3]
   1b2c2:	1a52      	subs	r2, r2, r1
   1b2c4:	eb6c 0303 	sbc.w	r3, ip, r3
   1b2c8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
   1b2ca:	eb63 0307 	sbc.w	r3, r3, r7
   1b2ce:	2d01      	cmp	r5, #1
   1b2d0:	f173 0200 	sbcs.w	r2, r3, #0
   1b2d4:	bfbc      	itt	lt
   1b2d6:	2501      	movlt	r5, #1
   1b2d8:	2300      	movlt	r3, #0
   1b2da:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
   1b2de:	4824      	ldr	r0, [pc, #144]	; (1b370 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
   1b2e0:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b2e4:	4283      	cmp	r3, r0
   1b2e6:	d118      	bne.n	1b31a <z_add_timeout+0x96>
	node->prev = tail;
   1b2e8:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
   1b2ec:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
   1b2f0:	6044      	str	r4, [r0, #4]
}
   1b2f2:	e026      	b.n	1b342 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1b2f4:	f7ff ff7a 	bl	1b1ec <elapsed>
   1b2f8:	3501      	adds	r5, #1
   1b2fa:	f147 0700 	adc.w	r7, r7, #0
   1b2fe:	182d      	adds	r5, r5, r0
   1b300:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
   1b304:	e9c4 5704 	strd	r5, r7, [r4, #16]
   1b308:	e7e9      	b.n	1b2de <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   1b30a:	1a52      	subs	r2, r2, r1
   1b30c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
   1b310:	4563      	cmp	r3, ip
   1b312:	e9c4 2504 	strd	r2, r5, [r4, #16]
   1b316:	d0e7      	beq.n	1b2e8 <z_add_timeout+0x64>
   1b318:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   1b31a:	2b00      	cmp	r3, #0
   1b31c:	d0e4      	beq.n	1b2e8 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
   1b31e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
   1b322:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
   1b326:	428a      	cmp	r2, r1
   1b328:	eb75 0e07 	sbcs.w	lr, r5, r7
   1b32c:	daed      	bge.n	1b30a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
   1b32e:	1a8a      	subs	r2, r1, r2
   1b330:	eb67 0505 	sbc.w	r5, r7, r5
   1b334:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   1b338:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1b33a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   1b33e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1b340:	605c      	str	r4, [r3, #4]
	return list->head == list;
   1b342:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b344:	4283      	cmp	r3, r0
   1b346:	d00b      	beq.n	1b360 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   1b348:	429c      	cmp	r4, r3
   1b34a:	d109      	bne.n	1b360 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1b34c:	f7ff ff58 	bl	1b200 <next_timeout>

			if (next_time == 0 ||
   1b350:	b118      	cbz	r0, 1b35a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
   1b352:	4b08      	ldr	r3, [pc, #32]	; (1b374 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
   1b354:	691b      	ldr	r3, [r3, #16]
   1b356:	4283      	cmp	r3, r0
   1b358:	d002      	beq.n	1b360 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
   1b35a:	2100      	movs	r1, #0
   1b35c:	f7e8 f9ca 	bl	36f4 <sys_clock_set_timeout>
	__asm__ volatile(
   1b360:	f386 8811 	msr	BASEPRI, r6
   1b364:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   1b368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b36a:	bf00      	nop
   1b36c:	200013d8 	.word	0x200013d8
   1b370:	200005f4 	.word	0x200005f4
   1b374:	200028a0 	.word	0x200028a0

0001b378 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1b378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b37c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   1b37e:	f7ff fd17 	bl	1adb0 <z_time_slice>
	__asm__ volatile(
   1b382:	f04f 0320 	mov.w	r3, #32
   1b386:	f3ef 8411 	mrs	r4, BASEPRI
   1b38a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b38e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1b392:	4e24      	ldr	r6, [pc, #144]	; (1b424 <sys_clock_announce+0xac>)
	return list->head == list;
   1b394:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1b428 <sys_clock_announce+0xb0>
   1b398:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   1b39a:	4d24      	ldr	r5, [pc, #144]	; (1b42c <sys_clock_announce+0xb4>)
   1b39c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b3a0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b3a2:	4540      	cmp	r0, r8
		curr_tick += dt;
   1b3a4:	e9d5 1e00 	ldrd	r1, lr, [r5]
   1b3a8:	ea4f 77e2 	mov.w	r7, r2, asr #31
   1b3ac:	d00b      	beq.n	1b3c6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   1b3ae:	b150      	cbz	r0, 1b3c6 <sys_clock_announce+0x4e>
   1b3b0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   1b3b4:	429a      	cmp	r2, r3
   1b3b6:	eb77 090c 	sbcs.w	r9, r7, ip
   1b3ba:	da16      	bge.n	1b3ea <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   1b3bc:	1a9b      	subs	r3, r3, r2
   1b3be:	eb6c 0c07 	sbc.w	ip, ip, r7
   1b3c2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   1b3c6:	1852      	adds	r2, r2, r1
   1b3c8:	eb4e 0707 	adc.w	r7, lr, r7
   1b3cc:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   1b3d0:	2500      	movs	r5, #0
   1b3d2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
   1b3d4:	f7ff ff14 	bl	1b200 <next_timeout>
   1b3d8:	4629      	mov	r1, r5
   1b3da:	f7e8 f98b 	bl	36f4 <sys_clock_set_timeout>
	__asm__ volatile(
   1b3de:	f384 8811 	msr	BASEPRI, r4
   1b3e2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   1b3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   1b3ea:	1859      	adds	r1, r3, r1
   1b3ec:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   1b3f0:	1ad3      	subs	r3, r2, r3
   1b3f2:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   1b3f4:	2200      	movs	r2, #0
   1b3f6:	2300      	movs	r3, #0
   1b3f8:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   1b3fc:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   1b400:	f7ff ff26 	bl	1b250 <remove_timeout>
   1b404:	f384 8811 	msr	BASEPRI, r4
   1b408:	f3bf 8f6f 	isb	sy
		t->fn(t);
   1b40c:	6883      	ldr	r3, [r0, #8]
   1b40e:	4798      	blx	r3
	__asm__ volatile(
   1b410:	f04f 0320 	mov.w	r3, #32
   1b414:	f3ef 8411 	mrs	r4, BASEPRI
   1b418:	f383 8812 	msr	BASEPRI_MAX, r3
   1b41c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1b420:	e7bc      	b.n	1b39c <sys_clock_announce+0x24>
   1b422:	bf00      	nop
   1b424:	200028e4 	.word	0x200028e4
   1b428:	200005f4 	.word	0x200005f4
   1b42c:	200013d8 	.word	0x200013d8

0001b430 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   1b430:	b510      	push	{r4, lr}
   1b432:	f04f 0320 	mov.w	r3, #32
   1b436:	f3ef 8411 	mrs	r4, BASEPRI
   1b43a:	f383 8812 	msr	BASEPRI_MAX, r3
   1b43e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   1b442:	f7e8 f989 	bl	3758 <sys_clock_elapsed>
   1b446:	4a05      	ldr	r2, [pc, #20]	; (1b45c <sys_clock_tick_get+0x2c>)
   1b448:	e9d2 3100 	ldrd	r3, r1, [r2]
   1b44c:	18c0      	adds	r0, r0, r3
   1b44e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   1b452:	f384 8811 	msr	BASEPRI, r4
   1b456:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   1b45a:	bd10      	pop	{r4, pc}
   1b45c:	200013d8 	.word	0x200013d8

0001b460 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1b460:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1b462:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   1b466:	3301      	adds	r3, #1
   1b468:	f142 0200 	adc.w	r2, r2, #0
   1b46c:	2b02      	cmp	r3, #2
   1b46e:	f172 0300 	sbcs.w	r3, r2, #0
{
   1b472:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1b474:	d304      	bcc.n	1b480 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b476:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   1b47a:	490d      	ldr	r1, [pc, #52]	; (1b4b0 <z_timer_expiration_handler+0x50>)
   1b47c:	f7ff ff02 	bl	1b284 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1b480:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1b482:	3301      	adds	r3, #1
   1b484:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1b486:	6a23      	ldr	r3, [r4, #32]
   1b488:	b10b      	cbz	r3, 1b48e <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   1b48a:	4620      	mov	r0, r4
   1b48c:	4798      	blx	r3
	return list->head == list;
   1b48e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1b492:	42a5      	cmp	r5, r4
   1b494:	d00a      	beq.n	1b4ac <z_timer_expiration_handler+0x4c>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   1b496:	b14d      	cbz	r5, 1b4ac <z_timer_expiration_handler+0x4c>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   1b498:	4628      	mov	r0, r5
   1b49a:	f005 f84e 	bl	2053a <z_unpend_thread_no_timeout>
   1b49e:	2300      	movs	r3, #0
   1b4a0:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);

	z_ready_thread(thread);
   1b4a2:	4628      	mov	r0, r5
}
   1b4a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_ready_thread(thread);
   1b4a8:	f005 b8b1 	b.w	2060e <z_ready_thread>
}
   1b4ac:	bd38      	pop	{r3, r4, r5, pc}
   1b4ae:	bf00      	nop
   1b4b0:	0001b461 	.word	0x0001b461

0001b4b4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   1b4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4b8:	4611      	mov	r1, r2
   1b4ba:	4605      	mov	r5, r0
   1b4bc:	4618      	mov	r0, r3
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b4be:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1b4c2:	bf08      	it	eq
   1b4c4:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
   1b4c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   1b4cc:	4688      	mov	r8, r1
   1b4ce:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   1b4d0:	d03c      	beq.n	1b54c <z_impl_k_timer_start+0x98>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1b4d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1b4d6:	bf08      	it	eq
   1b4d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   1b4dc:	4614      	mov	r4, r2
   1b4de:	461e      	mov	r6, r3
   1b4e0:	d013      	beq.n	1b50a <z_impl_k_timer_start+0x56>
   1b4e2:	431a      	orrs	r2, r3
   1b4e4:	d011      	beq.n	1b50a <z_impl_k_timer_start+0x56>
	    Z_TICK_ABS(period.ticks) < 0) {
   1b4e6:	f06f 0201 	mvn.w	r2, #1
   1b4ea:	1b12      	subs	r2, r2, r4
   1b4ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b4f0:	eb62 0203 	sbc.w	r2, r2, r3
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1b4f4:	2a00      	cmp	r2, #0
   1b4f6:	da08      	bge.n	1b50a <z_impl_k_timer_start+0x56>
		period.ticks = MAX(period.ticks - 1, 1);
   1b4f8:	3c01      	subs	r4, #1
   1b4fa:	f163 0600 	sbc.w	r6, r3, #0
   1b4fe:	2c01      	cmp	r4, #1
   1b500:	f176 0300 	sbcs.w	r3, r6, #0
   1b504:	bfbc      	itt	lt
   1b506:	2401      	movlt	r4, #1
   1b508:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1b50a:	f06f 0301 	mvn.w	r3, #1
   1b50e:	1a5b      	subs	r3, r3, r1
   1b510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b514:	eb63 0300 	sbc.w	r3, r3, r0
   1b518:	2b00      	cmp	r3, #0
   1b51a:	da08      	bge.n	1b52e <z_impl_k_timer_start+0x7a>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1b51c:	1e4a      	subs	r2, r1, #1
   1b51e:	f160 0700 	sbc.w	r7, r0, #0
   1b522:	2f00      	cmp	r7, #0
   1b524:	4690      	mov	r8, r2
   1b526:	bfbc      	itt	lt
   1b528:	f04f 0800 	movlt.w	r8, #0
   1b52c:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   1b52e:	4628      	mov	r0, r5
   1b530:	f005 f8f9 	bl	20726 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   1b534:	2300      	movs	r3, #0
   1b536:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   1b538:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b53c:	4642      	mov	r2, r8
   1b53e:	463b      	mov	r3, r7
   1b540:	4628      	mov	r0, r5
   1b542:	4903      	ldr	r1, [pc, #12]	; (1b550 <z_impl_k_timer_start+0x9c>)
		     duration);
}
   1b544:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   1b548:	f7ff be9c 	b.w	1b284 <z_add_timeout>
}
   1b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b550:	0001b461 	.word	0x0001b461

0001b554 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   1b554:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1b558:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   1b55a:	4b29      	ldr	r3, [pc, #164]	; (1b600 <z_impl_k_poll+0xac>)
   1b55c:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   1b55e:	2301      	movs	r3, #1
   1b560:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	poller->mode = MODE_POLL;
   1b564:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	SYS_PORT_TRACING_FUNC_ENTER(k_poll_api, poll, events);

	events_registered = register_events(events, num_events, poller,
   1b568:	ea52 0305 	orrs.w	r3, r2, r5
{
   1b56c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   1b56e:	bf0c      	ite	eq
   1b570:	2301      	moveq	r3, #1
   1b572:	2300      	movne	r3, #0
   1b574:	f107 0260 	add.w	r2, r7, #96	; 0x60
{
   1b578:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   1b57a:	f005 f9a4 	bl	208c6 <register_events>
   1b57e:	4681      	mov	r9, r0
	__asm__ volatile(
   1b580:	f04f 0320 	mov.w	r3, #32
   1b584:	f3ef 8a11 	mrs	sl, BASEPRI
   1b588:	f383 8812 	msr	BASEPRI_MAX, r3
   1b58c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   1b590:	f897 4060 	ldrb.w	r4, [r7, #96]	; 0x60
   1b594:	b964      	cbnz	r4, 1b5b0 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   1b596:	4601      	mov	r1, r0
   1b598:	4652      	mov	r2, sl
   1b59a:	4640      	mov	r0, r8
   1b59c:	f005 fa64 	bl	20a68 <clear_event_registrations>
	__asm__ volatile(
   1b5a0:	f38a 8811 	msr	BASEPRI, sl
   1b5a4:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_FUNC_EXIT(k_poll_api, poll, events, swap_rc);

	return swap_rc;
}
   1b5a8:	4620      	mov	r0, r4
   1b5aa:	b002      	add	sp, #8
   1b5ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   1b5b0:	2300      	movs	r3, #0
   1b5b2:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1b5b6:	ea56 0305 	orrs.w	r3, r6, r5
   1b5ba:	d106      	bne.n	1b5ca <z_impl_k_poll+0x76>
   1b5bc:	f38a 8811 	msr	BASEPRI, sl
   1b5c0:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   1b5c4:	f06f 040a 	mvn.w	r4, #10
   1b5c8:	e7ee      	b.n	1b5a8 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   1b5ca:	e9cd 6500 	strd	r6, r5, [sp]
   1b5ce:	4a0d      	ldr	r2, [pc, #52]	; (1b604 <z_impl_k_poll+0xb0>)
   1b5d0:	480d      	ldr	r0, [pc, #52]	; (1b608 <z_impl_k_poll+0xb4>)
   1b5d2:	4651      	mov	r1, sl
   1b5d4:	f7ff fb50 	bl	1ac78 <z_pend_curr>
   1b5d8:	4604      	mov	r4, r0
	__asm__ volatile(
   1b5da:	f04f 0320 	mov.w	r3, #32
   1b5de:	f3ef 8511 	mrs	r5, BASEPRI
   1b5e2:	f383 8812 	msr	BASEPRI_MAX, r3
   1b5e6:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   1b5ea:	462a      	mov	r2, r5
   1b5ec:	4649      	mov	r1, r9
   1b5ee:	4640      	mov	r0, r8
   1b5f0:	f005 fa3a 	bl	20a68 <clear_event_registrations>
	__asm__ volatile(
   1b5f4:	f385 8811 	msr	BASEPRI, r5
   1b5f8:	f3bf 8f6f 	isb	sy
	return swap_rc;
   1b5fc:	e7d4      	b.n	1b5a8 <z_impl_k_poll+0x54>
   1b5fe:	bf00      	nop
   1b600:	200028a0 	.word	0x200028a0
   1b604:	200005fc 	.word	0x200005fc
   1b608:	20002e98 	.word	0x20002e98

0001b60c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
   1b60c:	b538      	push	{r3, r4, r5, lr}
   1b60e:	4603      	mov	r3, r0
	__asm__ volatile(
   1b610:	f04f 0220 	mov.w	r2, #32
   1b614:	f3ef 8511 	mrs	r5, BASEPRI
   1b618:	f382 8812 	msr	BASEPRI_MAX, r2
   1b61c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
   1b620:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
   1b622:	2101      	movs	r1, #1
   1b624:	6081      	str	r1, [r0, #8]
	return list->head == list;
   1b626:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   1b628:	4283      	cmp	r3, r0
   1b62a:	d106      	bne.n	1b63a <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   1b62c:	f385 8811 	msr	BASEPRI, r5
   1b630:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
   1b634:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
   1b636:	4620      	mov	r0, r4
   1b638:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
   1b63a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   1b63e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   1b640:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1b642:	2300      	movs	r3, #0
	node->prev = NULL;
   1b644:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b648:	f005 f9b4 	bl	209b4 <signal_poll_event>
	z_reschedule(&lock, key);
   1b64c:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   1b64e:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   1b650:	4801      	ldr	r0, [pc, #4]	; (1b658 <z_impl_k_poll_signal_raise+0x4c>)
   1b652:	f7ff fa8d 	bl	1ab70 <z_reschedule>
	return rc;
   1b656:	e7ee      	b.n	1b636 <z_impl_k_poll_signal_raise+0x2a>
   1b658:	20002e98 	.word	0x20002e98

0001b65c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   1b65c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1b65e:	4606      	mov	r6, r0
   1b660:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   1b662:	f004 fd70 	bl	20146 <k_is_in_isr>
   1b666:	b978      	cbnz	r0, 1b688 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   1b668:	4b0b      	ldr	r3, [pc, #44]	; (1b698 <z_thread_aligned_alloc+0x3c>)
   1b66a:	689b      	ldr	r3, [r3, #8]
   1b66c:	6f5c      	ldr	r4, [r3, #116]	; 0x74
	}

	if (heap != NULL) {
   1b66e:	b17c      	cbz	r4, 1b690 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1b670:	1d2a      	adds	r2, r5, #4
   1b672:	d209      	bcs.n	1b688 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   1b674:	2000      	movs	r0, #0
   1b676:	2100      	movs	r1, #0
   1b678:	e9cd 0100 	strd	r0, r1, [sp]
   1b67c:	f046 0104 	orr.w	r1, r6, #4
   1b680:	4620      	mov	r0, r4
   1b682:	f004 fcbe 	bl	20002 <k_heap_aligned_alloc>
	if (mem == NULL) {
   1b686:	b908      	cbnz	r0, 1b68c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   1b688:	2400      	movs	r4, #0
	}

	return ret;
   1b68a:	e001      	b.n	1b690 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   1b68c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   1b68e:	1d04      	adds	r4, r0, #4
}
   1b690:	4620      	mov	r0, r4
   1b692:	b002      	add	sp, #8
   1b694:	bd70      	pop	{r4, r5, r6, pc}
   1b696:	bf00      	nop
   1b698:	200028a0 	.word	0x200028a0

0001b69c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   1b69c:	4a02      	ldr	r2, [pc, #8]	; (1b6a8 <boot_banner+0xc>)
   1b69e:	4903      	ldr	r1, [pc, #12]	; (1b6ac <boot_banner+0x10>)
   1b6a0:	4803      	ldr	r0, [pc, #12]	; (1b6b0 <boot_banner+0x14>)
   1b6a2:	f000 b867 	b.w	1b774 <printk>
   1b6a6:	bf00      	nop
   1b6a8:	00022a7c 	.word	0x00022a7c
   1b6ac:	0002480f 	.word	0x0002480f
   1b6b0:	00024830 	.word	0x00024830

0001b6b4 <gpio_pin_configure.constprop.0>:
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}


extern int z_impl_gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);
static inline int gpio_pin_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
   1b6b4:	b430      	push	{r4, r5}
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1b6b6:	6904      	ldr	r4, [r0, #16]
	const struct gpio_driver_api *api =
   1b6b8:	6885      	ldr	r5, [r0, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1b6ba:	2301      	movs	r3, #1
   1b6bc:	fa03 f201 	lsl.w	r2, r3, r1
   1b6c0:	6823      	ldr	r3, [r4, #0]
   1b6c2:	4313      	orrs	r3, r2
   1b6c4:	6023      	str	r3, [r4, #0]
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
	}

	return api->pin_configure(port, pin, flags);
   1b6c6:	f240 6201 	movw	r2, #1537	; 0x601
   1b6ca:	682b      	ldr	r3, [r5, #0]
		return (int) arch_syscall_invoke3(*(uintptr_t *)&port, *(uintptr_t *)&pin, *(uintptr_t *)&flags, K_SYSCALL_GPIO_PIN_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_configure(port, pin, flags);
}
   1b6cc:	bc30      	pop	{r4, r5}
   1b6ce:	4718      	bx	r3

0001b6d0 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   1b6d0:	2301      	movs	r3, #1
   1b6d2:	fa03 f101 	lsl.w	r1, r3, r1
   1b6d6:	6903      	ldr	r3, [r0, #16]
   1b6d8:	681b      	ldr	r3, [r3, #0]
   1b6da:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   1b6dc:	bf18      	it	ne
   1b6de:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   1b6e2:	b112      	cbz	r2, 1b6ea <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   1b6e4:	6883      	ldr	r3, [r0, #8]
   1b6e6:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   1b6e8:	4718      	bx	r3
   1b6ea:	6883      	ldr	r3, [r0, #8]
   1b6ec:	691b      	ldr	r3, [r3, #16]
   1b6ee:	e7fb      	b.n	1b6e8 <gpio_pin_set.isra.0+0x18>

0001b6f0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   1b6f0:	4603      	mov	r3, r0
   1b6f2:	b140      	cbz	r0, 1b706 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b6f4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b6f6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1b6fa:	2a02      	cmp	r2, #2
   1b6fc:	d006      	beq.n	1b70c <sys_notify_validate+0x1c>
   1b6fe:	2a03      	cmp	r2, #3
   1b700:	d004      	beq.n	1b70c <sys_notify_validate+0x1c>
   1b702:	2a01      	cmp	r2, #1
   1b704:	d005      	beq.n	1b712 <sys_notify_validate+0x22>
		return -EINVAL;
   1b706:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   1b70a:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   1b70c:	681a      	ldr	r2, [r3, #0]
   1b70e:	2a00      	cmp	r2, #0
   1b710:	d0f9      	beq.n	1b706 <sys_notify_validate+0x16>
		notify->result = 0;
   1b712:	2000      	movs	r0, #0
   1b714:	6098      	str	r0, [r3, #8]
   1b716:	4770      	bx	lr

0001b718 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1b718:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   1b71a:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   1b71e:	2a02      	cmp	r2, #2
{
   1b720:	b510      	push	{r4, lr}
   1b722:	4603      	mov	r3, r0
	notify->result = res;
   1b724:	6081      	str	r1, [r0, #8]
	switch (method) {
   1b726:	d00a      	beq.n	1b73e <sys_notify_finalize+0x26>
   1b728:	2a03      	cmp	r2, #3
   1b72a:	d10b      	bne.n	1b744 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   1b72c:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   1b72e:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   1b730:	2200      	movs	r2, #0
   1b732:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   1b734:	b108      	cbz	r0, 1b73a <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(sig, result);
   1b736:	f7ff ff69 	bl	1b60c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   1b73a:	4620      	mov	r0, r4
   1b73c:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   1b73e:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   1b740:	2400      	movs	r4, #0
		break;
   1b742:	e7f5      	b.n	1b730 <sys_notify_finalize+0x18>
	switch (method) {
   1b744:	2400      	movs	r4, #0
   1b746:	4620      	mov	r0, r4
   1b748:	e7f2      	b.n	1b730 <sys_notify_finalize+0x18>

0001b74a <arch_printk_char_out>:
}
   1b74a:	2000      	movs	r0, #0
   1b74c:	4770      	bx	lr

0001b74e <str_out>:
{
   1b74e:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b750:	688a      	ldr	r2, [r1, #8]
   1b752:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   1b754:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   1b756:	b114      	cbz	r4, 1b75e <str_out+0x10>
   1b758:	684b      	ldr	r3, [r1, #4]
   1b75a:	4293      	cmp	r3, r2
   1b75c:	dc01      	bgt.n	1b762 <str_out+0x14>
		ctx->count++;
   1b75e:	608d      	str	r5, [r1, #8]
}
   1b760:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   1b762:	3b01      	subs	r3, #1
   1b764:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   1b766:	bf08      	it	eq
   1b768:	2200      	moveq	r2, #0
   1b76a:	608d      	str	r5, [r1, #8]
   1b76c:	bf0c      	ite	eq
   1b76e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   1b770:	54a0      	strbne	r0, [r4, r2]
   1b772:	e7f5      	b.n	1b760 <str_out+0x12>

0001b774 <printk>:
{
   1b774:	b40f      	push	{r0, r1, r2, r3}
   1b776:	b507      	push	{r0, r1, r2, lr}
   1b778:	a904      	add	r1, sp, #16
   1b77a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   1b77e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1b780:	f7e6 f9fe 	bl	1b80 <vprintk>
}
   1b784:	b003      	add	sp, #12
   1b786:	f85d eb04 	ldr.w	lr, [sp], #4
   1b78a:	b004      	add	sp, #16
   1b78c:	4770      	bx	lr

0001b78e <snprintk>:
{
   1b78e:	b40c      	push	{r2, r3}
   1b790:	b507      	push	{r0, r1, r2, lr}
   1b792:	ab04      	add	r3, sp, #16
   1b794:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   1b798:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   1b79a:	f7e6 f9ff 	bl	1b9c <vsnprintk>
}
   1b79e:	b003      	add	sp, #12
   1b7a0:	f85d eb04 	ldr.w	lr, [sp], #4
   1b7a4:	b002      	add	sp, #8
   1b7a6:	4770      	bx	lr

0001b7a8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b7a8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   1b7aa:	f013 0307 	ands.w	r3, r3, #7
   1b7ae:	d105      	bne.n	1b7bc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   1b7b0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   1b7b2:	2b00      	cmp	r3, #0
   1b7b4:	bf0c      	ite	eq
   1b7b6:	2000      	moveq	r0, #0
   1b7b8:	2003      	movne	r0, #3
   1b7ba:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   1b7bc:	2b02      	cmp	r3, #2
   1b7be:	d105      	bne.n	1b7cc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   1b7c0:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   1b7c2:	2b00      	cmp	r3, #0
   1b7c4:	bf14      	ite	ne
   1b7c6:	2000      	movne	r0, #0
   1b7c8:	2004      	moveq	r0, #4
   1b7ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   1b7cc:	2b01      	cmp	r3, #1
   1b7ce:	d105      	bne.n	1b7dc <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   1b7d0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   1b7d2:	2b00      	cmp	r3, #0
   1b7d4:	bf0c      	ite	eq
   1b7d6:	2000      	moveq	r0, #0
   1b7d8:	2005      	movne	r0, #5
   1b7da:	4770      	bx	lr
	int evt = EVT_NOP;
   1b7dc:	2000      	movs	r0, #0
}
   1b7de:	4770      	bx	lr

0001b7e0 <notify_one>:
{
   1b7e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b7e4:	460d      	mov	r5, r1
   1b7e6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b7e8:	4619      	mov	r1, r3
   1b7ea:	1d28      	adds	r0, r5, #4
{
   1b7ec:	4690      	mov	r8, r2
   1b7ee:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   1b7f0:	f7ff ff92 	bl	1b718 <sys_notify_finalize>
	if (cb) {
   1b7f4:	4604      	mov	r4, r0
   1b7f6:	b138      	cbz	r0, 1b808 <notify_one+0x28>
		cb(mgr, cli, state, res);
   1b7f8:	4633      	mov	r3, r6
   1b7fa:	4642      	mov	r2, r8
   1b7fc:	4629      	mov	r1, r5
   1b7fe:	4638      	mov	r0, r7
   1b800:	46a4      	mov	ip, r4
}
   1b802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   1b806:	4760      	bx	ip
}
   1b808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b80c <transition_complete>:
{
   1b80c:	b410      	push	{r4}
	__asm__ volatile(
   1b80e:	f04f 0420 	mov.w	r4, #32
   1b812:	f3ef 8211 	mrs	r2, BASEPRI
   1b816:	f384 8812 	msr	BASEPRI_MAX, r4
   1b81a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   1b81e:	6141      	str	r1, [r0, #20]
}
   1b820:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   1b822:	2101      	movs	r1, #1
   1b824:	f7e6 b9ce 	b.w	1bc4 <process_event>

0001b828 <validate_args>:
{
   1b828:	b510      	push	{r4, lr}
   1b82a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   1b82c:	b140      	cbz	r0, 1b840 <validate_args+0x18>
   1b82e:	b139      	cbz	r1, 1b840 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   1b830:	1d08      	adds	r0, r1, #4
   1b832:	f7ff ff5d 	bl	1b6f0 <sys_notify_validate>
	if ((rv == 0)
   1b836:	b928      	cbnz	r0, 1b844 <validate_args+0x1c>
	    && ((cli->notify.flags
   1b838:	68a3      	ldr	r3, [r4, #8]
   1b83a:	f033 0303 	bics.w	r3, r3, #3
   1b83e:	d001      	beq.n	1b844 <validate_args+0x1c>
		rv = -EINVAL;
   1b840:	f06f 0015 	mvn.w	r0, #21
}
   1b844:	bd10      	pop	{r4, pc}

0001b846 <onoff_manager_init>:
{
   1b846:	b538      	push	{r3, r4, r5, lr}
   1b848:	460c      	mov	r4, r1
	if ((mgr == NULL)
   1b84a:	4605      	mov	r5, r0
   1b84c:	b158      	cbz	r0, 1b866 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   1b84e:	b151      	cbz	r1, 1b866 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   1b850:	680b      	ldr	r3, [r1, #0]
   1b852:	b143      	cbz	r3, 1b866 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   1b854:	684b      	ldr	r3, [r1, #4]
   1b856:	b133      	cbz	r3, 1b866 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   1b858:	221c      	movs	r2, #28
   1b85a:	2100      	movs	r1, #0
   1b85c:	f002 f8e1 	bl	1da22 <memset>
   1b860:	612c      	str	r4, [r5, #16]
	return 0;
   1b862:	2000      	movs	r0, #0
}
   1b864:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b866:	f06f 0015 	mvn.w	r0, #21
   1b86a:	e7fb      	b.n	1b864 <onoff_manager_init+0x1e>

0001b86c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   1b86c:	b570      	push	{r4, r5, r6, lr}
   1b86e:	4604      	mov	r4, r0
   1b870:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   1b872:	f7ff ffd9 	bl	1b828 <validate_args>

	if (rv < 0) {
   1b876:	1e05      	subs	r5, r0, #0
   1b878:	db31      	blt.n	1b8de <onoff_request+0x72>
   1b87a:	f04f 0320 	mov.w	r3, #32
   1b87e:	f3ef 8111 	mrs	r1, BASEPRI
   1b882:	f383 8812 	msr	BASEPRI_MAX, r3
   1b886:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   1b88a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b88c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   1b88e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   1b892:	42ab      	cmp	r3, r5
   1b894:	f000 0207 	and.w	r2, r0, #7
   1b898:	d02e      	beq.n	1b8f8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   1b89a:	2a02      	cmp	r2, #2
   1b89c:	d10e      	bne.n	1b8bc <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   1b89e:	3301      	adds	r3, #1
   1b8a0:	8363      	strh	r3, [r4, #26]
	rv = state;
   1b8a2:	4615      	mov	r5, r2
		notify = true;
   1b8a4:	2301      	movs	r3, #1
	__asm__ volatile(
   1b8a6:	f381 8811 	msr	BASEPRI, r1
   1b8aa:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1b8ae:	b1b3      	cbz	r3, 1b8de <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   1b8b0:	2300      	movs	r3, #0
   1b8b2:	4631      	mov	r1, r6
   1b8b4:	4620      	mov	r0, r4
   1b8b6:	f7ff ff93 	bl	1b7e0 <notify_one>
   1b8ba:	e010      	b.n	1b8de <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   1b8bc:	0783      	lsls	r3, r0, #30
   1b8be:	d001      	beq.n	1b8c4 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   1b8c0:	2a06      	cmp	r2, #6
   1b8c2:	d10e      	bne.n	1b8e2 <onoff_request+0x76>
	parent->next = child;
   1b8c4:	2300      	movs	r3, #0
   1b8c6:	6033      	str	r3, [r6, #0]
	return list->tail;
   1b8c8:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1b8ca:	b993      	cbnz	r3, 1b8f2 <onoff_request+0x86>
	list->head = node;
   1b8cc:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   1b8d0:	4615      	mov	r5, r2
   1b8d2:	b962      	cbnz	r2, 1b8ee <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   1b8d4:	460a      	mov	r2, r1
   1b8d6:	4620      	mov	r0, r4
   1b8d8:	2102      	movs	r1, #2
   1b8da:	f7e6 f973 	bl	1bc4 <process_event>
		}
	}

	return rv;
}
   1b8de:	4628      	mov	r0, r5
   1b8e0:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   1b8e2:	2a05      	cmp	r2, #5
   1b8e4:	bf0c      	ite	eq
   1b8e6:	f06f 0585 	mvneq.w	r5, #133	; 0x85
   1b8ea:	f06f 0504 	mvnne.w	r5, #4
   1b8ee:	2300      	movs	r3, #0
   1b8f0:	e7d9      	b.n	1b8a6 <onoff_request+0x3a>
	parent->next = child;
   1b8f2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   1b8f4:	6066      	str	r6, [r4, #4]
}
   1b8f6:	e7eb      	b.n	1b8d0 <onoff_request+0x64>
		rv = -EAGAIN;
   1b8f8:	f06f 050a 	mvn.w	r5, #10
   1b8fc:	e7f7      	b.n	1b8ee <onoff_request+0x82>

0001b8fe <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   1b8fe:	b510      	push	{r4, lr}
	__asm__ volatile(
   1b900:	f04f 0320 	mov.w	r3, #32
   1b904:	f3ef 8211 	mrs	r2, BASEPRI
   1b908:	f383 8812 	msr	BASEPRI_MAX, r3
   1b90c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   1b910:	8b04      	ldrh	r4, [r0, #24]
   1b912:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   1b916:	2c02      	cmp	r4, #2
   1b918:	d00a      	beq.n	1b930 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   1b91a:	2c01      	cmp	r4, #1
   1b91c:	bf0c      	ite	eq
   1b91e:	f06f 0004 	mvneq.w	r0, #4
   1b922:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
   1b926:	f382 8811 	msr	BASEPRI, r2
   1b92a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   1b92e:	e008      	b.n	1b942 <onoff_release+0x44>
	mgr->refs -= 1U;
   1b930:	8b43      	ldrh	r3, [r0, #26]
   1b932:	3b01      	subs	r3, #1
   1b934:	b29b      	uxth	r3, r3
   1b936:	8343      	strh	r3, [r0, #26]
	if (stop) {
   1b938:	b923      	cbnz	r3, 1b944 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   1b93a:	4621      	mov	r1, r4
   1b93c:	f7e6 f942 	bl	1bc4 <process_event>
	int rv = state;
   1b940:	4620      	mov	r0, r4
}
   1b942:	bd10      	pop	{r4, pc}
	int rv = state;
   1b944:	4620      	mov	r0, r4
   1b946:	e7ee      	b.n	1b926 <onoff_release+0x28>

0001b948 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1b948:	4604      	mov	r4, r0
   1b94a:	b508      	push	{r3, lr}
   1b94c:	4608      	mov	r0, r1
   1b94e:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   1b950:	461a      	mov	r2, r3
   1b952:	47a0      	blx	r4
	return z_impl_k_current_get();
   1b954:	f7ff fbb6 	bl	1b0c4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   1b958:	f7e8 fc56 	bl	4208 <z_impl_k_thread_abort>

0001b95c <chunk_field>:
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1b95c:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   1b95e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1b962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   1b966:	bf2c      	ite	cs
   1b968:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   1b96c:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   1b970:	4770      	bx	lr

0001b972 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   1b972:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   1b976:	6880      	ldr	r0, [r0, #8]
   1b978:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   1b97c:	bf2c      	ite	cs
   1b97e:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   1b982:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1b986:	4770      	bx	lr

0001b988 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1b988:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1b98a:	2201      	movs	r2, #1
   1b98c:	f7ff ffe6 	bl	1b95c <chunk_field>
}
   1b990:	40d0      	lsrs	r0, r2
   1b992:	bd08      	pop	{r3, pc}

0001b994 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1b994:	6883      	ldr	r3, [r0, #8]
   1b996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1b99a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1b99e:	d308      	bcc.n	1b9b2 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b9a0:	684b      	ldr	r3, [r1, #4]
		if (used) {
   1b9a2:	b11a      	cbz	r2, 1b9ac <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b9a4:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b9a8:	604b      	str	r3, [r1, #4]
   1b9aa:	4770      	bx	lr
   1b9ac:	f023 0301 	bic.w	r3, r3, #1
   1b9b0:	e7fa      	b.n	1b9a8 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b9b2:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   1b9b4:	b11a      	cbz	r2, 1b9be <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1b9b6:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b9ba:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1b9bc:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1b9be:	f023 0301 	bic.w	r3, r3, #1
   1b9c2:	e7fa      	b.n	1b9ba <set_chunk_used+0x26>

0001b9c4 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1b9c4:	0053      	lsls	r3, r2, #1
   1b9c6:	2201      	movs	r2, #1
   1b9c8:	f7ff bfd3 	b.w	1b972 <chunk_set>

0001b9cc <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1b9cc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1b9d0:	bf2c      	ite	cs
   1b9d2:	2008      	movcs	r0, #8
   1b9d4:	2004      	movcc	r0, #4
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1b9d6:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1b9d8:	3008      	adds	r0, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   1b9da:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   1b9de:	fab0 f080 	clz	r0, r0
}
   1b9e2:	f1c0 001f 	rsb	r0, r0, #31
   1b9e6:	4770      	bx	lr

0001b9e8 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1b9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b9ec:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1b9ee:	2203      	movs	r2, #3
   1b9f0:	460e      	mov	r6, r1
   1b9f2:	4604      	mov	r4, r0
   1b9f4:	f7ff ffb2 	bl	1b95c <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   1b9f8:	4286      	cmp	r6, r0
   1b9fa:	4605      	mov	r5, r0
   1b9fc:	f107 0804 	add.w	r8, r7, #4
   1ba00:	d10b      	bne.n	1ba1a <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   1ba02:	2301      	movs	r3, #1
   1ba04:	fa03 f707 	lsl.w	r7, r3, r7
   1ba08:	68e3      	ldr	r3, [r4, #12]
   1ba0a:	ea23 0307 	bic.w	r3, r3, r7
   1ba0e:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1ba10:	2300      	movs	r3, #0
   1ba12:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1ba16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1ba1a:	4631      	mov	r1, r6
   1ba1c:	2202      	movs	r2, #2
   1ba1e:	4620      	mov	r0, r4
   1ba20:	f7ff ff9c 	bl	1b95c <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1ba24:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1ba26:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1ba28:	4601      	mov	r1, r0
		b->next = second;
   1ba2a:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1ba2e:	4620      	mov	r0, r4
   1ba30:	2203      	movs	r2, #3
   1ba32:	f7ff ff9e 	bl	1b972 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1ba36:	4633      	mov	r3, r6
   1ba38:	4629      	mov	r1, r5
   1ba3a:	4620      	mov	r0, r4
   1ba3c:	2202      	movs	r2, #2
}
   1ba3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ba42:	f7ff bf96 	b.w	1b972 <chunk_set>

0001ba46 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   1ba46:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->end_chunk);
   1ba48:	6886      	ldr	r6, [r0, #8]
   1ba4a:	460d      	mov	r5, r1
   1ba4c:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1ba4e:	f7ff ff9b 	bl	1b988 <chunk_size>
   1ba52:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1ba56:	4601      	mov	r1, r0
   1ba58:	d301      	bcc.n	1ba5e <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1ba5a:	2801      	cmp	r0, #1
   1ba5c:	d009      	beq.n	1ba72 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ba5e:	4630      	mov	r0, r6
   1ba60:	f7ff ffb4 	bl	1b9cc <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   1ba64:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1ba66:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1ba68:	4620      	mov	r0, r4
	}
}
   1ba6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   1ba6e:	f7ff bfbb 	b.w	1b9e8 <free_list_remove_bidx>
}
   1ba72:	bd70      	pop	{r4, r5, r6, pc}

0001ba74 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   1ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba78:	4605      	mov	r5, r0
	int bi = bucket_idx(h, sz);
   1ba7a:	6880      	ldr	r0, [r0, #8]
{
   1ba7c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1ba7e:	f7ff ffa5 	bl	1b9cc <bucket_idx.isra.0>
   1ba82:	eb05 0a80 	add.w	sl, r5, r0, lsl #2
   1ba86:	4606      	mov	r6, r0
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   1ba88:	f8da 9010 	ldr.w	r9, [sl, #16]
   1ba8c:	f1b9 0f00 	cmp.w	r9, #0
   1ba90:	d01b      	beq.n	1baca <alloc_chunk+0x56>
   1ba92:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
   1ba94:	f8da 4010 	ldr.w	r4, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1ba98:	4628      	mov	r0, r5
   1ba9a:	4621      	mov	r1, r4
   1ba9c:	f7ff ff74 	bl	1b988 <chunk_size>
   1baa0:	4540      	cmp	r0, r8
   1baa2:	d307      	bcc.n	1bab4 <alloc_chunk+0x40>
				free_list_remove_bidx(h, c, bi);
   1baa4:	4632      	mov	r2, r6

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
   1baa6:	4621      	mov	r1, r4
   1baa8:	4628      	mov	r0, r5
   1baaa:	f7ff ff9d 	bl	1b9e8 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1baae:	4620      	mov	r0, r4
   1bab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return chunk_field(h, c, FREE_NEXT);
   1bab4:	2203      	movs	r2, #3
   1bab6:	4621      	mov	r1, r4
   1bab8:	4628      	mov	r0, r5
   1baba:	f7ff ff4f 	bl	1b95c <chunk_field>
		} while (--i && b->next != first);
   1babe:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1bac0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1bac4:	d001      	beq.n	1baca <alloc_chunk+0x56>
   1bac6:	4581      	cmp	r9, r0
   1bac8:	d1e4      	bne.n	1ba94 <alloc_chunk+0x20>
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1baca:	68e9      	ldr	r1, [r5, #12]
   1bacc:	3601      	adds	r6, #1
   1bace:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1bad2:	40b4      	lsls	r4, r6
	if (bmask != 0U) {
   1bad4:	400c      	ands	r4, r1
   1bad6:	d0ea      	beq.n	1baae <alloc_chunk+0x3a>
		int minbucket = __builtin_ctz(bmask);
   1bad8:	fa94 f2a4 	rbit	r2, r4
   1badc:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1bae0:	1d13      	adds	r3, r2, #4
   1bae2:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
   1bae6:	e7de      	b.n	1baa6 <alloc_chunk+0x32>

0001bae8 <split_chunks>:
{
   1bae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1baec:	4614      	mov	r4, r2
   1baee:	4605      	mov	r5, r0
   1baf0:	460e      	mov	r6, r1
	chunksz_t sz0 = chunk_size(h, lc);
   1baf2:	f7ff ff49 	bl	1b988 <chunk_size>
	chunksz_t lsz = rc - lc;
   1baf6:	eba4 0806 	sub.w	r8, r4, r6
	chunksz_t rsz = sz0 - lsz;
   1bafa:	1b37      	subs	r7, r6, r4
   1bafc:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1bafe:	4642      	mov	r2, r8
   1bb00:	4631      	mov	r1, r6
   1bb02:	4628      	mov	r0, r5
   1bb04:	f7ff ff5e 	bl	1b9c4 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1bb08:	463a      	mov	r2, r7
   1bb0a:	4621      	mov	r1, r4
   1bb0c:	4628      	mov	r0, r5
   1bb0e:	f7ff ff59 	bl	1b9c4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bb12:	4643      	mov	r3, r8
   1bb14:	2200      	movs	r2, #0
   1bb16:	4621      	mov	r1, r4
   1bb18:	4628      	mov	r0, r5
   1bb1a:	f7ff ff2a 	bl	1b972 <chunk_set>
	return c + chunk_size(h, c);
   1bb1e:	4621      	mov	r1, r4
   1bb20:	4628      	mov	r0, r5
   1bb22:	f7ff ff31 	bl	1b988 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bb26:	463b      	mov	r3, r7
   1bb28:	1821      	adds	r1, r4, r0
   1bb2a:	2200      	movs	r2, #0
   1bb2c:	4628      	mov	r0, r5
}
   1bb2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bb32:	f7ff bf1e 	b.w	1b972 <chunk_set>

0001bb36 <merge_chunks>:
{
   1bb36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bb3a:	4616      	mov	r6, r2
   1bb3c:	4604      	mov	r4, r0
   1bb3e:	460f      	mov	r7, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1bb40:	f7ff ff22 	bl	1b988 <chunk_size>
   1bb44:	4631      	mov	r1, r6
   1bb46:	4605      	mov	r5, r0
   1bb48:	4620      	mov	r0, r4
   1bb4a:	f7ff ff1d 	bl	1b988 <chunk_size>
   1bb4e:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   1bb50:	462a      	mov	r2, r5
   1bb52:	4639      	mov	r1, r7
   1bb54:	4620      	mov	r0, r4
   1bb56:	f7ff ff35 	bl	1b9c4 <set_chunk_size>
	return c + chunk_size(h, c);
   1bb5a:	4631      	mov	r1, r6
   1bb5c:	4620      	mov	r0, r4
   1bb5e:	f7ff ff13 	bl	1b988 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1bb62:	462b      	mov	r3, r5
   1bb64:	1831      	adds	r1, r6, r0
   1bb66:	2200      	movs	r2, #0
   1bb68:	4620      	mov	r0, r4
}
   1bb6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bb6e:	f7ff bf00 	b.w	1b972 <chunk_set>

0001bb72 <free_list_add>:
{
   1bb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->end_chunk);
   1bb76:	6886      	ldr	r6, [r0, #8]
   1bb78:	460d      	mov	r5, r1
   1bb7a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   1bb7c:	f7ff ff04 	bl	1b988 <chunk_size>
   1bb80:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1bb84:	4601      	mov	r1, r0
   1bb86:	d301      	bcc.n	1bb8c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1bb88:	2801      	cmp	r0, #1
   1bb8a:	d033      	beq.n	1bbf4 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1bb8c:	4630      	mov	r0, r6
   1bb8e:	f7ff ff1d 	bl	1b9cc <bucket_idx.isra.0>
	if (b->next == 0U) {
   1bb92:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1bb96:	6916      	ldr	r6, [r2, #16]
   1bb98:	b99e      	cbnz	r6, 1bbc2 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1bb9a:	2301      	movs	r3, #1
   1bb9c:	fa03 f000 	lsl.w	r0, r3, r0
   1bba0:	68e3      	ldr	r3, [r4, #12]
   1bba2:	4303      	orrs	r3, r0
   1bba4:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1bba6:	4629      	mov	r1, r5
		b->next = c;
   1bba8:	6115      	str	r5, [r2, #16]
   1bbaa:	462b      	mov	r3, r5
   1bbac:	2202      	movs	r2, #2
   1bbae:	4620      	mov	r0, r4
   1bbb0:	f7ff fedf 	bl	1b972 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1bbb4:	2203      	movs	r2, #3
   1bbb6:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1bbb8:	4620      	mov	r0, r4
}
   1bbba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1bbbe:	f7ff bed8 	b.w	1b972 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1bbc2:	2202      	movs	r2, #2
   1bbc4:	4631      	mov	r1, r6
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	f7ff fec8 	bl	1b95c <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1bbcc:	4629      	mov	r1, r5
   1bbce:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1bbd0:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1bbd2:	4620      	mov	r0, r4
   1bbd4:	f7ff fecd 	bl	1b972 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1bbd8:	2203      	movs	r2, #3
   1bbda:	4633      	mov	r3, r6
   1bbdc:	4629      	mov	r1, r5
   1bbde:	4620      	mov	r0, r4
   1bbe0:	f7ff fec7 	bl	1b972 <chunk_set>
   1bbe4:	4639      	mov	r1, r7
   1bbe6:	462b      	mov	r3, r5
   1bbe8:	4620      	mov	r0, r4
   1bbea:	f7ff fec2 	bl	1b972 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1bbee:	2202      	movs	r2, #2
   1bbf0:	4631      	mov	r1, r6
   1bbf2:	e7e1      	b.n	1bbb8 <free_list_add+0x46>
   1bbf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bbf8 <free_chunk>:
{
   1bbf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbfa:	460c      	mov	r4, r1
   1bbfc:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   1bbfe:	f7ff fec3 	bl	1b988 <chunk_size>
   1bc02:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1bc04:	2201      	movs	r2, #1
   1bc06:	4631      	mov	r1, r6
   1bc08:	4628      	mov	r0, r5
   1bc0a:	f7ff fea7 	bl	1b95c <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1bc0e:	07c3      	lsls	r3, r0, #31
   1bc10:	d40c      	bmi.n	1bc2c <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   1bc12:	4631      	mov	r1, r6
   1bc14:	4628      	mov	r0, r5
   1bc16:	f7ff ff16 	bl	1ba46 <free_list_remove>
	return c + chunk_size(h, c);
   1bc1a:	4621      	mov	r1, r4
   1bc1c:	4628      	mov	r0, r5
   1bc1e:	f7ff feb3 	bl	1b988 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1bc22:	4621      	mov	r1, r4
   1bc24:	1822      	adds	r2, r4, r0
   1bc26:	4628      	mov	r0, r5
   1bc28:	f7ff ff85 	bl	1bb36 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1bc2c:	2200      	movs	r2, #0
   1bc2e:	4621      	mov	r1, r4
   1bc30:	4628      	mov	r0, r5
   1bc32:	f7ff fe93 	bl	1b95c <chunk_field>
   1bc36:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1bc38:	2201      	movs	r2, #1
   1bc3a:	4639      	mov	r1, r7
   1bc3c:	4628      	mov	r0, r5
   1bc3e:	f7ff fe8d 	bl	1b95c <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1bc42:	ea10 0602 	ands.w	r6, r0, r2
   1bc46:	d113      	bne.n	1bc70 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   1bc48:	4639      	mov	r1, r7
   1bc4a:	4628      	mov	r0, r5
   1bc4c:	f7ff fefb 	bl	1ba46 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1bc50:	4621      	mov	r1, r4
   1bc52:	4632      	mov	r2, r6
   1bc54:	4628      	mov	r0, r5
   1bc56:	f7ff fe81 	bl	1b95c <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1bc5a:	4622      	mov	r2, r4
   1bc5c:	1a21      	subs	r1, r4, r0
   1bc5e:	4628      	mov	r0, r5
   1bc60:	f7ff ff69 	bl	1bb36 <merge_chunks>
   1bc64:	4621      	mov	r1, r4
   1bc66:	4632      	mov	r2, r6
   1bc68:	4628      	mov	r0, r5
   1bc6a:	f7ff fe77 	bl	1b95c <chunk_field>
   1bc6e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1bc70:	4621      	mov	r1, r4
   1bc72:	4628      	mov	r0, r5
}
   1bc74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1bc78:	f7ff bf7b 	b.w	1bb72 <free_list_add>

0001bc7c <sys_heap_free>:
{
   1bc7c:	b510      	push	{r4, lr}
	if (mem == NULL) {
   1bc7e:	b191      	cbz	r1, 1bca6 <sys_heap_free+0x2a>
   1bc80:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1bc82:	6883      	ldr	r3, [r0, #8]
   1bc84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bc88:	bf2c      	ite	cs
   1bc8a:	2408      	movcs	r4, #8
   1bc8c:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bc8e:	1b0c      	subs	r4, r1, r4
   1bc90:	1a24      	subs	r4, r4, r0
   1bc92:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1bc94:	4621      	mov	r1, r4
   1bc96:	2200      	movs	r2, #0
   1bc98:	f7ff fe7c 	bl	1b994 <set_chunk_used>
	free_chunk(h, c);
   1bc9c:	4621      	mov	r1, r4
}
   1bc9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   1bca2:	f7ff bfa9 	b.w	1bbf8 <free_chunk>
}
   1bca6:	bd10      	pop	{r4, pc}

0001bca8 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1bca8:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   1bcaa:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   1bcac:	b909      	cbnz	r1, 1bcb2 <sys_heap_alloc+0xa>
		return NULL;
   1bcae:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1bcb0:	bd70      	pop	{r4, r5, r6, pc}
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   1bcb2:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   1bcb4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   1bcb8:	d9f9      	bls.n	1bcae <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   1bcba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bcbe:	bf2c      	ite	cs
   1bcc0:	2208      	movcs	r2, #8
   1bcc2:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bcc4:	1dcc      	adds	r4, r1, #7
   1bcc6:	4414      	add	r4, r2
   1bcc8:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1bcca:	4621      	mov	r1, r4
   1bccc:	4630      	mov	r0, r6
   1bcce:	f7ff fed1 	bl	1ba74 <alloc_chunk>
	if (c == 0U) {
   1bcd2:	4605      	mov	r5, r0
   1bcd4:	2800      	cmp	r0, #0
   1bcd6:	d0ea      	beq.n	1bcae <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   1bcd8:	4601      	mov	r1, r0
   1bcda:	4630      	mov	r0, r6
   1bcdc:	f7ff fe54 	bl	1b988 <chunk_size>
   1bce0:	42a0      	cmp	r0, r4
   1bce2:	d909      	bls.n	1bcf8 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   1bce4:	442c      	add	r4, r5
   1bce6:	4629      	mov	r1, r5
   1bce8:	4630      	mov	r0, r6
   1bcea:	4622      	mov	r2, r4
   1bcec:	f7ff fefc 	bl	1bae8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   1bcf0:	4621      	mov	r1, r4
   1bcf2:	4630      	mov	r0, r6
   1bcf4:	f7ff ff3d 	bl	1bb72 <free_list_add>
	set_chunk_used(h, c, true);
   1bcf8:	4629      	mov	r1, r5
   1bcfa:	4630      	mov	r0, r6
   1bcfc:	2201      	movs	r2, #1
   1bcfe:	f7ff fe49 	bl	1b994 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1bd02:	68b3      	ldr	r3, [r6, #8]
   1bd04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bd08:	bf2c      	ite	cs
   1bd0a:	2308      	movcs	r3, #8
   1bd0c:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1bd0e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   1bd12:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1bd14:	e7cc      	b.n	1bcb0 <sys_heap_alloc+0x8>

0001bd16 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   1bd16:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   1bd1a:	6806      	ldr	r6, [r0, #0]
{
   1bd1c:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1bd1e:	424a      	negs	r2, r1
   1bd20:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
   1bd24:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->end_chunk);
   1bd28:	68b5      	ldr	r5, [r6, #8]
{
   1bd2a:	460b      	mov	r3, r1
	if (align != rew) {
   1bd2c:	d00f      	beq.n	1bd4e <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   1bd2e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1bd32:	bf34      	ite	cc
   1bd34:	2104      	movcc	r1, #4
   1bd36:	2108      	movcs	r1, #8
   1bd38:	42b9      	cmp	r1, r7
   1bd3a:	460a      	mov	r2, r1
   1bd3c:	46b9      	mov	r9, r7
   1bd3e:	bf28      	it	cs
   1bd40:	463a      	movcs	r2, r7
		align -= rew;
   1bd42:	1bdf      	subs	r7, r3, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1bd44:	b994      	cbnz	r4, 1bd6c <sys_heap_aligned_alloc+0x56>
		return NULL;
   1bd46:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   1bd48:	4628      	mov	r0, r5
   1bd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1bd4e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1bd52:	bf34      	ite	cc
   1bd54:	2204      	movcc	r2, #4
   1bd56:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   1bd58:	4291      	cmp	r1, r2
   1bd5a:	d804      	bhi.n	1bd66 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   1bd5c:	4621      	mov	r1, r4
}
   1bd5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   1bd62:	f7ff bfa1 	b.w	1bca8 <sys_heap_alloc>
		rew = 0;
   1bd66:	f04f 0900 	mov.w	r9, #0
   1bd6a:	e7eb      	b.n	1bd44 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   1bd6c:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   1bd70:	d9e9      	bls.n	1bd46 <sys_heap_aligned_alloc+0x30>
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1bd72:	1de1      	adds	r1, r4, #7
   1bd74:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1bd78:	4439      	add	r1, r7
   1bd7a:	bf2c      	ite	cs
   1bd7c:	2308      	movcs	r3, #8
   1bd7e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1bd80:	1a89      	subs	r1, r1, r2
   1bd82:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1bd84:	08c9      	lsrs	r1, r1, #3
   1bd86:	4630      	mov	r0, r6
   1bd88:	f7ff fe74 	bl	1ba74 <alloc_chunk>
	if (c0 == 0) {
   1bd8c:	4680      	mov	r8, r0
   1bd8e:	2800      	cmp	r0, #0
   1bd90:	d0d9      	beq.n	1bd46 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   1bd92:	68b3      	ldr	r3, [r6, #8]
   1bd94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bd98:	bf2c      	ite	cs
   1bd9a:	2308      	movcs	r3, #8
   1bd9c:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   1bd9e:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   1bda2:	441d      	add	r5, r3
   1bda4:	1e7a      	subs	r2, r7, #1
   1bda6:	4435      	add	r5, r6
   1bda8:	427f      	negs	r7, r7
   1bdaa:	4415      	add	r5, r2
   1bdac:	403d      	ands	r5, r7
   1bdae:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1bdb2:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bdb4:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1bdb6:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bdb8:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1bdba:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   1bdbe:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   1bdc0:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1bdc4:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   1bdc8:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   1bdcc:	d208      	bcs.n	1bde0 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   1bdce:	4601      	mov	r1, r0
   1bdd0:	463a      	mov	r2, r7
   1bdd2:	4630      	mov	r0, r6
   1bdd4:	f7ff fe88 	bl	1bae8 <split_chunks>
		free_list_add(h, c0);
   1bdd8:	4641      	mov	r1, r8
   1bdda:	4630      	mov	r0, r6
   1bddc:	f7ff fec9 	bl	1bb72 <free_list_add>
	return c + chunk_size(h, c);
   1bde0:	4639      	mov	r1, r7
   1bde2:	4630      	mov	r0, r6
   1bde4:	f7ff fdd0 	bl	1b988 <chunk_size>
   1bde8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   1bdea:	4284      	cmp	r4, r0
   1bdec:	d208      	bcs.n	1be00 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   1bdee:	4639      	mov	r1, r7
   1bdf0:	4630      	mov	r0, r6
   1bdf2:	4622      	mov	r2, r4
   1bdf4:	f7ff fe78 	bl	1bae8 <split_chunks>
		free_list_add(h, c_end);
   1bdf8:	4621      	mov	r1, r4
   1bdfa:	4630      	mov	r0, r6
   1bdfc:	f7ff feb9 	bl	1bb72 <free_list_add>
	set_chunk_used(h, c, true);
   1be00:	2201      	movs	r2, #1
   1be02:	4639      	mov	r1, r7
   1be04:	4630      	mov	r0, r6
   1be06:	f7ff fdc5 	bl	1b994 <set_chunk_used>
	return mem;
   1be0a:	e79d      	b.n	1bd48 <sys_heap_aligned_alloc+0x32>

0001be0c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1be0c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be12:	bf2c      	ite	cs
   1be14:	2408      	movcs	r4, #8
   1be16:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1be18:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1be1a:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1be1c:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1be1e:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1be22:	f024 0407 	bic.w	r4, r4, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1be26:	1ba4      	subs	r4, r4, r6
   1be28:	08e4      	lsrs	r4, r4, #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
   1be2a:	2300      	movs	r3, #0
	heap->heap = h;
   1be2c:	6006      	str	r6, [r0, #0]

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1be2e:	4621      	mov	r1, r4
	h->end_chunk = heap_sz;
   1be30:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   1be32:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1be34:	4620      	mov	r0, r4
   1be36:	f7ff fdc9 	bl	1b9cc <bucket_idx.isra.0>
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1be3a:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1be3c:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1be3e:	1c41      	adds	r1, r0, #1
   1be40:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1be42:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   1be46:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1be48:	428b      	cmp	r3, r1
   1be4a:	db2e      	blt.n	1beaa <sys_heap_init+0x9e>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1be4c:	462a      	mov	r2, r5
   1be4e:	4630      	mov	r0, r6
   1be50:	2100      	movs	r1, #0
   1be52:	f7ff fdb7 	bl	1b9c4 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1be56:	2300      	movs	r3, #0
   1be58:	461a      	mov	r2, r3
   1be5a:	4619      	mov	r1, r3
   1be5c:	4630      	mov	r0, r6
   1be5e:	f7ff fd88 	bl	1b972 <chunk_set>
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1be62:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   1be64:	4619      	mov	r1, r3
   1be66:	4630      	mov	r0, r6
   1be68:	2201      	movs	r2, #1
   1be6a:	f7ff fd93 	bl	1b994 <set_chunk_used>
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   1be6e:	463a      	mov	r2, r7
   1be70:	4629      	mov	r1, r5
   1be72:	f7ff fda7 	bl	1b9c4 <set_chunk_size>
   1be76:	462b      	mov	r3, r5
   1be78:	2200      	movs	r2, #0
   1be7a:	4629      	mov	r1, r5
   1be7c:	4630      	mov	r0, r6
   1be7e:	f7ff fd78 	bl	1b972 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
   1be82:	4621      	mov	r1, r4
   1be84:	4630      	mov	r0, r6
   1be86:	f7ff fd9d 	bl	1b9c4 <set_chunk_size>
   1be8a:	463b      	mov	r3, r7
   1be8c:	4621      	mov	r1, r4
   1be8e:	4630      	mov	r0, r6
   1be90:	2200      	movs	r2, #0
   1be92:	f7ff fd6e 	bl	1b972 <chunk_set>
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);
   1be96:	4621      	mov	r1, r4
   1be98:	4630      	mov	r0, r6
   1be9a:	2201      	movs	r2, #1
   1be9c:	f7ff fd7a 	bl	1b994 <set_chunk_used>

	free_list_add(h, chunk0_size);
   1bea0:	4629      	mov	r1, r5
}
   1bea2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1bea6:	f7ff be64 	b.w	1bb72 <free_list_add>
		h->buckets[i].next = 0;
   1beaa:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1beae:	3301      	adds	r3, #1
   1beb0:	e7ca      	b.n	1be48 <sys_heap_init+0x3c>

0001beb2 <encode_uint>:
{
   1beb2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1beb6:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   1beb8:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   1beba:	2b6f      	cmp	r3, #111	; 0x6f
{
   1bebc:	4680      	mov	r8, r0
   1bebe:	460f      	mov	r7, r1
   1bec0:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1bec2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   1bec6:	d029      	beq.n	1bf1c <encode_uint+0x6a>
   1bec8:	d824      	bhi.n	1bf14 <encode_uint+0x62>
		return 16;
   1beca:	2b58      	cmp	r3, #88	; 0x58
   1becc:	bf14      	ite	ne
   1bece:	260a      	movne	r6, #10
   1bed0:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   1bed2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   1bed6:	4632      	mov	r2, r6
   1bed8:	2300      	movs	r3, #0
   1beda:	4640      	mov	r0, r8
   1bedc:	4639      	mov	r1, r7
   1bede:	f7e4 f90f 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bee2:	2a09      	cmp	r2, #9
   1bee4:	b2d4      	uxtb	r4, r2
   1bee6:	d81e      	bhi.n	1bf26 <encode_uint+0x74>
   1bee8:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   1beea:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1beec:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   1beee:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bef2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   1bef6:	d301      	bcc.n	1befc <encode_uint+0x4a>
   1bef8:	45d1      	cmp	r9, sl
   1befa:	d811      	bhi.n	1bf20 <encode_uint+0x6e>
	if (conv->flag_hash) {
   1befc:	782b      	ldrb	r3, [r5, #0]
   1befe:	069b      	lsls	r3, r3, #26
   1bf00:	d505      	bpl.n	1bf0e <encode_uint+0x5c>
		if (radix == 8) {
   1bf02:	2e08      	cmp	r6, #8
   1bf04:	d115      	bne.n	1bf32 <encode_uint+0x80>
			conv->altform_0 = true;
   1bf06:	78ab      	ldrb	r3, [r5, #2]
   1bf08:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   1bf0c:	70ab      	strb	r3, [r5, #2]
}
   1bf0e:	4648      	mov	r0, r9
   1bf10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   1bf14:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   1bf18:	2b70      	cmp	r3, #112	; 0x70
   1bf1a:	e7d7      	b.n	1becc <encode_uint+0x1a>
	switch (specifier) {
   1bf1c:	2608      	movs	r6, #8
   1bf1e:	e7d8      	b.n	1bed2 <encode_uint+0x20>
		value /= radix;
   1bf20:	4680      	mov	r8, r0
   1bf22:	460f      	mov	r7, r1
   1bf24:	e7d7      	b.n	1bed6 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   1bf26:	f1bb 0f19 	cmp.w	fp, #25
   1bf2a:	bf94      	ite	ls
   1bf2c:	3437      	addls	r4, #55	; 0x37
   1bf2e:	3457      	addhi	r4, #87	; 0x57
   1bf30:	e7db      	b.n	1beea <encode_uint+0x38>
		} else if (radix == 16) {
   1bf32:	2e10      	cmp	r6, #16
   1bf34:	d1eb      	bne.n	1bf0e <encode_uint+0x5c>
			conv->altform_0c = true;
   1bf36:	78ab      	ldrb	r3, [r5, #2]
   1bf38:	f043 0310 	orr.w	r3, r3, #16
   1bf3c:	e7e6      	b.n	1bf0c <encode_uint+0x5a>

0001bf3e <outs>:
{
   1bf3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bf42:	4607      	mov	r7, r0
   1bf44:	4688      	mov	r8, r1
   1bf46:	4615      	mov	r5, r2
   1bf48:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1bf4a:	4614      	mov	r4, r2
   1bf4c:	42b4      	cmp	r4, r6
   1bf4e:	eba4 0005 	sub.w	r0, r4, r5
   1bf52:	d302      	bcc.n	1bf5a <outs+0x1c>
   1bf54:	b93e      	cbnz	r6, 1bf66 <outs+0x28>
   1bf56:	7823      	ldrb	r3, [r4, #0]
   1bf58:	b12b      	cbz	r3, 1bf66 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   1bf5a:	f814 0b01 	ldrb.w	r0, [r4], #1
   1bf5e:	4641      	mov	r1, r8
   1bf60:	47b8      	blx	r7
		if (rc < 0) {
   1bf62:	2800      	cmp	r0, #0
   1bf64:	daf2      	bge.n	1bf4c <outs+0xe>
}
   1bf66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001bf6a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1bf6a:	4770      	bx	lr

0001bf6c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   1bf6c:	2300      	movs	r3, #0
	list->head = NULL;
   1bf6e:	e9c0 3300 	strd	r3, r3, [r0]
}
   1bf72:	4770      	bx	lr

0001bf74 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   1bf74:	6803      	ldr	r3, [r0, #0]
   1bf76:	b923      	cbnz	r3, 1bf82 <log_list_add_tail+0xe>
		list->head = msg;
   1bf78:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   1bf7a:	2300      	movs	r3, #0
	list->tail = msg;
   1bf7c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   1bf7e:	600b      	str	r3, [r1, #0]
}
   1bf80:	4770      	bx	lr
		list->tail->next = msg;
   1bf82:	6843      	ldr	r3, [r0, #4]
   1bf84:	6019      	str	r1, [r3, #0]
   1bf86:	e7f8      	b.n	1bf7a <log_list_add_tail+0x6>

0001bf88 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   1bf88:	6800      	ldr	r0, [r0, #0]
   1bf8a:	4770      	bx	lr

0001bf8c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   1bf8c:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   1bf8e:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   1bf90:	b108      	cbz	r0, 1bf96 <log_list_head_get+0xa>
		list->head = list->head->next;
   1bf92:	6802      	ldr	r2, [r0, #0]
   1bf94:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   1bf96:	4770      	bx	lr

0001bf98 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   1bf98:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1bf9a:	f7e6 fd8b 	bl	2ab4 <log_msg_chunk_alloc>

	if (msg != NULL) {
   1bf9e:	b118      	cbz	r0, 1bfa8 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   1bfa0:	2301      	movs	r3, #1
   1bfa2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1bfa4:	2300      	movs	r3, #0
   1bfa6:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   1bfa8:	bd08      	pop	{r3, pc}

0001bfaa <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   1bfaa:	f7e7 bbe3 	b.w	3774 <sys_clock_cycle_get_32>

0001bfae <dummy_timestamp>:
   1bfae:	2000      	movs	r0, #0
   1bfb0:	4770      	bx	lr

0001bfb2 <z_log_get_s_mask>:
{
   1bfb2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfb4:	4605      	mov	r5, r0
	uint32_t mask = 0U;
   1bfb6:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   1bfb8:	4603      	mov	r3, r0
	bool arm = false;
   1bfba:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1bfbc:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1bfbe:	f815 4b01 	ldrb.w	r4, [r5], #1
   1bfc2:	b10c      	cbz	r4, 1bfc8 <z_log_get_s_mask+0x16>
   1bfc4:	428b      	cmp	r3, r1
   1bfc6:	d300      	bcc.n	1bfca <z_log_get_s_mask+0x18>
}
   1bfc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   1bfca:	2c25      	cmp	r4, #37	; 0x25
   1bfcc:	d102      	bne.n	1bfd4 <z_log_get_s_mask+0x22>
			arm = !arm;
   1bfce:	f082 0201 	eor.w	r2, r2, #1
   1bfd2:	e7f4      	b.n	1bfbe <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1bfd4:	2a00      	cmp	r2, #0
   1bfd6:	d0f2      	beq.n	1bfbe <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1bfd8:	f044 0620 	orr.w	r6, r4, #32
   1bfdc:	3e61      	subs	r6, #97	; 0x61
   1bfde:	2e19      	cmp	r6, #25
   1bfe0:	d8ed      	bhi.n	1bfbe <z_log_get_s_mask+0xc>
			if (curr == 's') {
   1bfe2:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   1bfe4:	bf04      	itt	eq
   1bfe6:	fa07 f203 	lsleq.w	r2, r7, r3
   1bfea:	4310      	orreq	r0, r2
			arg++;
   1bfec:	3301      	adds	r3, #1
			arm = false;
   1bfee:	2200      	movs	r2, #0
   1bff0:	e7e5      	b.n	1bfbe <z_log_get_s_mask+0xc>

0001bff2 <log_0>:
{
   1bff2:	b538      	push	{r3, r4, r5, lr}
   1bff4:	4605      	mov	r5, r0
   1bff6:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   1bff8:	f7ff ffce 	bl	1bf98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1bffc:	b128      	cbz	r0, 1c00a <log_0+0x18>
		msg->str = str;
   1bffe:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   1c000:	4621      	mov	r1, r4
}
   1c002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   1c006:	f7e6 bc93 	b.w	2930 <msg_finalize>
}
   1c00a:	bd38      	pop	{r3, r4, r5, pc}

0001c00c <log_1>:
{
   1c00c:	b570      	push	{r4, r5, r6, lr}
   1c00e:	4606      	mov	r6, r0
   1c010:	460d      	mov	r5, r1
   1c012:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c014:	f7ff ffc0 	bl	1bf98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c018:	b158      	cbz	r0, 1c032 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   1c01a:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   1c01c:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   1c01e:	2101      	movs	r1, #1
   1c020:	f361 1207 	bfi	r2, r1, #4, #4
   1c024:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   1c026:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   1c028:	4621      	mov	r1, r4
}
   1c02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   1c02e:	f7e6 bc7f 	b.w	2930 <msg_finalize>
}
   1c032:	bd70      	pop	{r4, r5, r6, pc}

0001c034 <log_2>:
{
   1c034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c038:	4680      	mov	r8, r0
   1c03a:	460f      	mov	r7, r1
   1c03c:	4616      	mov	r6, r2
   1c03e:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c040:	f7ff ffaa 	bl	1bf98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c044:	b168      	cbz	r0, 1c062 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   1c046:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c048:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   1c04c:	2202      	movs	r2, #2
   1c04e:	f362 1307 	bfi	r3, r2, #4, #4
   1c052:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c054:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   1c058:	4629      	mov	r1, r5
}
   1c05a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   1c05e:	f7e6 bc67 	b.w	2930 <msg_finalize>
}
   1c062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c066 <log_3>:
{
   1c066:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c06a:	4680      	mov	r8, r0
   1c06c:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1c070:	460f      	mov	r7, r1
   1c072:	4616      	mov	r6, r2
   1c074:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   1c076:	f7ff ff8f 	bl	1bf98 <z_log_msg_std_alloc>

	if (msg != NULL) {
   1c07a:	b170      	cbz	r0, 1c09a <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   1c07c:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   1c07e:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   1c082:	2203      	movs	r2, #3
   1c084:	f362 1307 	bfi	r3, r2, #4, #4
   1c088:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   1c08a:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   1c08e:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   1c090:	4649      	mov	r1, r9
}
   1c092:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   1c096:	f7e6 bc4b 	b.w	2930 <msg_finalize>
}
   1c09a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c09e <log_n>:
{
   1c09e:	b510      	push	{r4, lr}
   1c0a0:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   1c0a2:	f000 f8a1 	bl	1c1e8 <log_msg_create_n>
		if (msg == NULL) {
   1c0a6:	b120      	cbz	r0, 1c0b2 <log_n+0x14>
		msg_finalize(msg, src_level);
   1c0a8:	4621      	mov	r1, r4
}
   1c0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   1c0ae:	f7e6 bc3f 	b.w	2930 <msg_finalize>
}
   1c0b2:	bd10      	pop	{r4, pc}

0001c0b4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   1c0b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c0b8:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c0ba:	8903      	ldrh	r3, [r0, #8]
{
   1c0bc:	f89d 7020 	ldrb.w	r7, [sp, #32]
   1c0c0:	460e      	mov	r6, r1
   1c0c2:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   1c0c4:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   1c0c8:	42a2      	cmp	r2, r4
   1c0ca:	d803      	bhi.n	1c0d4 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   1c0cc:	2300      	movs	r3, #0
   1c0ce:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1c0d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   1c0d4:	680b      	ldr	r3, [r1, #0]
   1c0d6:	4423      	add	r3, r4
   1c0d8:	4293      	cmp	r3, r2
		*length = available_len - offset;
   1c0da:	bf84      	itt	hi
   1c0dc:	1b13      	subhi	r3, r2, r4
   1c0de:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c0e0:	2a0c      	cmp	r2, #12
	req_len = *length;
   1c0e2:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   1c0e6:	d92a      	bls.n	1c13e <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   1c0e8:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   1c0ea:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   1c0ee:	d82d      	bhi.n	1c14c <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   1c0f0:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   1c0f2:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c0f4:	454a      	cmp	r2, r9
   1c0f6:	bf28      	it	cs
   1c0f8:	464a      	movcs	r2, r9
   1c0fa:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c0fc:	4420      	add	r0, r4
		if (put_op) {
   1c0fe:	b317      	cbz	r7, 1c146 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   1c100:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c102:	f001 fc83 	bl	1da0c <memcpy>
		req_len -= cpy_len;
   1c106:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   1c10a:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   1c10c:	f1b9 0f00 	cmp.w	r9, #0
   1c110:	d0de      	beq.n	1c0d0 <log_msg_hexdump_data_op+0x1c>
   1c112:	f1b8 0f00 	cmp.w	r8, #0
   1c116:	d0db      	beq.n	1c0d0 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   1c118:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   1c11c:	454d      	cmp	r5, r9
   1c11e:	bf28      	it	cs
   1c120:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   1c122:	1d20      	adds	r0, r4, #4
   1c124:	4440      	add	r0, r8
   1c126:	462a      	mov	r2, r5
		if (put_op) {
   1c128:	b1bf      	cbz	r7, 1c15a <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   1c12a:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c12c:	f001 fc6e 	bl	1da0c <memcpy>
		req_len -= cpy_len;
   1c130:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   1c134:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   1c138:	442e      	add	r6, r5
		offset = 0;
   1c13a:	2400      	movs	r4, #0
   1c13c:	e7e6      	b.n	1c10c <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   1c13e:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   1c140:	f04f 0800 	mov.w	r8, #0
   1c144:	e7d6      	b.n	1c0f4 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   1c146:	4601      	mov	r1, r0
   1c148:	4630      	mov	r0, r6
   1c14a:	e7da      	b.n	1c102 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   1c14c:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   1c14e:	2c1b      	cmp	r4, #27
   1c150:	d9dc      	bls.n	1c10c <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   1c152:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   1c156:	3c1c      	subs	r4, #28
   1c158:	e7f9      	b.n	1c14e <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   1c15a:	4601      	mov	r1, r0
   1c15c:	4630      	mov	r0, r6
   1c15e:	e7e5      	b.n	1c12c <log_msg_hexdump_data_op+0x78>

0001c160 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c160:	3004      	adds	r0, #4
   1c162:	f3bf 8f5b 	dmb	ish
   1c166:	e850 3f00 	ldrex	r3, [r0]
   1c16a:	3301      	adds	r3, #1
   1c16c:	e840 3200 	strex	r2, r3, [r0]
   1c170:	2a00      	cmp	r2, #0
   1c172:	d1f8      	bne.n	1c166 <log_msg_get+0x6>
   1c174:	f3bf 8f5b 	dmb	ish
}
   1c178:	4770      	bx	lr

0001c17a <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1c17a:	7a40      	ldrb	r0, [r0, #9]
}
   1c17c:	0900      	lsrs	r0, r0, #4
   1c17e:	4770      	bx	lr

0001c180 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   1c180:	7a43      	ldrb	r3, [r0, #9]
   1c182:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1c186:	ea4f 1213 	mov.w	r2, r3, lsr #4
   1c18a:	d216      	bcs.n	1c1ba <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c18c:	2a03      	cmp	r2, #3
   1c18e:	d803      	bhi.n	1c198 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   1c190:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1c194:	6940      	ldr	r0, [r0, #20]
   1c196:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1c198:	2901      	cmp	r1, #1
   1c19a:	d803      	bhi.n	1c1a4 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   1c19c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1c1a0:	6980      	ldr	r0, [r0, #24]
   1c1a2:	4770      	bx	lr
	cont = msg->payload.ext.next;
   1c1a4:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c1a6:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   1c1a8:	2906      	cmp	r1, #6
   1c1aa:	d803      	bhi.n	1c1b4 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   1c1ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1c1b0:	6848      	ldr	r0, [r1, #4]
   1c1b2:	4770      	bx	lr
		cont = cont->next;
   1c1b4:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   1c1b6:	3907      	subs	r1, #7
		cont = cont->next;
   1c1b8:	e7f6      	b.n	1c1a8 <log_msg_arg_get+0x28>
		return 0;
   1c1ba:	2000      	movs	r0, #0
}
   1c1bc:	4770      	bx	lr

0001c1be <log_msg_put>:
{
   1c1be:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c1c0:	1d02      	adds	r2, r0, #4
   1c1c2:	f3bf 8f5b 	dmb	ish
   1c1c6:	e852 1f00 	ldrex	r1, [r2]
   1c1ca:	3901      	subs	r1, #1
   1c1cc:	e842 1c00 	strex	ip, r1, [r2]
   1c1d0:	f1bc 0f00 	cmp.w	ip, #0
   1c1d4:	d1f7      	bne.n	1c1c6 <log_msg_put+0x8>
   1c1d6:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   1c1da:	685b      	ldr	r3, [r3, #4]
   1c1dc:	b90b      	cbnz	r3, 1c1e2 <log_msg_put+0x24>
		msg_free(msg);
   1c1de:	f7e6 bc7d 	b.w	2adc <msg_free>
}
   1c1e2:	4770      	bx	lr

0001c1e4 <log_msg_str_get>:
}
   1c1e4:	6900      	ldr	r0, [r0, #16]
   1c1e6:	4770      	bx	lr

0001c1e8 <log_msg_create_n>:
{
   1c1e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c1ec:	4680      	mov	r8, r0
   1c1ee:	460f      	mov	r7, r1
   1c1f0:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   1c1f2:	f7e6 fc5f 	bl	2ab4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   1c1f6:	4604      	mov	r4, r0
   1c1f8:	b358      	cbz	r0, 1c252 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   1c1fa:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   1c1fc:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c200:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   1c202:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   1c204:	f8a0 a008 	strh.w	sl, [r0, #8]
   1c208:	d90c      	bls.n	1c224 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   1c20a:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   1c20c:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   1c210:	f043 0302 	orr.w	r3, r3, #2
   1c214:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c216:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   1c21a:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   1c21e:	f1b9 0f00 	cmp.w	r9, #0
   1c222:	dc0e      	bgt.n	1c242 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   1c224:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   1c226:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   1c22a:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c22e:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   1c230:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1c232:	d819      	bhi.n	1c268 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   1c234:	00aa      	lsls	r2, r5, #2
   1c236:	4639      	mov	r1, r7
   1c238:	f104 0014 	add.w	r0, r4, #20
   1c23c:	f001 fbe6 	bl	1da0c <memcpy>
	while (nargs != 0U) {
   1c240:	e007      	b.n	1c252 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1c242:	f7e6 fc37 	bl	2ab4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   1c246:	4606      	mov	r6, r0
   1c248:	b930      	cbnz	r0, 1c258 <log_msg_create_n+0x70>
			msg_free(msg);
   1c24a:	4620      	mov	r0, r4
   1c24c:	f7e6 fc46 	bl	2adc <msg_free>
			return NULL;
   1c250:	4634      	mov	r4, r6
}
   1c252:	4620      	mov	r0, r4
   1c254:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   1c258:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   1c25c:	f1a9 0907 	sub.w	r9, r9, #7
   1c260:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   1c264:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   1c266:	e7da      	b.n	1c21e <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   1c268:	4639      	mov	r1, r7
   1c26a:	2208      	movs	r2, #8
   1c26c:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   1c270:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   1c274:	f001 fbca 	bl	1da0c <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1c278:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1c27a:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1c27c:	2d07      	cmp	r5, #7
   1c27e:	462e      	mov	r6, r5
   1c280:	bf28      	it	cs
   1c282:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   1c284:	ea4f 0986 	mov.w	r9, r6, lsl #2
   1c288:	4639      	mov	r1, r7
   1c28a:	f108 0004 	add.w	r0, r8, #4
   1c28e:	464a      	mov	r2, r9
   1c290:	f001 fbbc 	bl	1da0c <memcpy>
	while (nargs != 0U) {
   1c294:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   1c296:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   1c29a:	444f      	add	r7, r9
	while (nargs != 0U) {
   1c29c:	d1ee      	bne.n	1c27c <log_msg_create_n+0x94>
   1c29e:	e7d8      	b.n	1c252 <log_msg_create_n+0x6a>

0001c2a0 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1c2a0:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1c2a2:	2400      	movs	r4, #0
   1c2a4:	9400      	str	r4, [sp, #0]
   1c2a6:	f7ff ff05 	bl	1c0b4 <log_msg_hexdump_data_op>
}
   1c2aa:	b002      	add	sp, #8
   1c2ac:	bd10      	pop	{r4, pc}

0001c2ae <buffer_write>:
{
   1c2ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c2b0:	4606      	mov	r6, r0
   1c2b2:	460d      	mov	r5, r1
   1c2b4:	4614      	mov	r4, r2
   1c2b6:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   1c2b8:	4621      	mov	r1, r4
   1c2ba:	4628      	mov	r0, r5
   1c2bc:	463a      	mov	r2, r7
   1c2be:	47b0      	blx	r6
	} while (len != 0);
   1c2c0:	1a24      	subs	r4, r4, r0
		buf += processed;
   1c2c2:	4405      	add	r5, r0
	} while (len != 0);
   1c2c4:	d1f8      	bne.n	1c2b8 <buffer_write+0xa>
}
   1c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c2c8 <std_print>:
{
   1c2c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c2cc:	b08e      	sub	sp, #56	; 0x38
   1c2ce:	af0e      	add	r7, sp, #56	; 0x38
   1c2d0:	4680      	mov	r8, r0
   1c2d2:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   1c2d4:	f7ff ff86 	bl	1c1e4 <log_msg_str_get>
   1c2d8:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   1c2da:	4640      	mov	r0, r8
   1c2dc:	f7ff ff4d 	bl	1c17a <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1c2e0:	0083      	lsls	r3, r0, #2
   1c2e2:	3307      	adds	r3, #7
   1c2e4:	f023 0307 	bic.w	r3, r3, #7
   1c2e8:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   1c2ec:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1c2ee:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1c2f0:	f04f 0900 	mov.w	r9, #0
   1c2f4:	45d1      	cmp	r9, sl
   1c2f6:	d116      	bne.n	1c326 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   1c2f8:	4640      	mov	r0, r8
   1c2fa:	f7ff ff3e 	bl	1c17a <log_msg_nargs_get>
   1c2fe:	280f      	cmp	r0, #15
   1c300:	d81e      	bhi.n	1c340 <std_print+0x78>
   1c302:	e8df f010 	tbh	[pc, r0, lsl #1]
   1c306:	0019      	.short	0x0019
   1c308:	00260020 	.word	0x00260020
   1c30c:	0036002d 	.word	0x0036002d
   1c310:	004e0041 	.word	0x004e0041
   1c314:	006e005d 	.word	0x006e005d
   1c318:	00960081 	.word	0x00960081
   1c31c:	00c600ad 	.word	0x00c600ad
   1c320:	00fe00e1 	.word	0x00fe00e1
   1c324:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
   1c326:	4649      	mov	r1, r9
   1c328:	4640      	mov	r0, r8
   1c32a:	f7ff ff29 	bl	1c180 <log_msg_arg_get>
   1c32e:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   1c332:	f109 0901 	add.w	r9, r9, #1
   1c336:	e7dd      	b.n	1c2f4 <std_print+0x2c>
		print_formatted(output, str);
   1c338:	4631      	mov	r1, r6
   1c33a:	4628      	mov	r0, r5
   1c33c:	f7e6 fc0c 	bl	2b58 <print_formatted>
}
   1c340:	46bd      	mov	sp, r7
   1c342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1c346:	6822      	ldr	r2, [r4, #0]
   1c348:	4631      	mov	r1, r6
   1c34a:	4628      	mov	r0, r5
   1c34c:	f7e6 fc04 	bl	2b58 <print_formatted>
		break;
   1c350:	e7f6      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   1c352:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c356:	4631      	mov	r1, r6
   1c358:	4628      	mov	r0, r5
   1c35a:	f7e6 fbfd 	bl	2b58 <print_formatted>
		break;
   1c35e:	e7ef      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   1c360:	68a3      	ldr	r3, [r4, #8]
   1c362:	9300      	str	r3, [sp, #0]
   1c364:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c368:	4631      	mov	r1, r6
   1c36a:	4628      	mov	r0, r5
   1c36c:	f7e6 fbf4 	bl	2b58 <print_formatted>
		break;
   1c370:	e7e6      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c372:	68e3      	ldr	r3, [r4, #12]
   1c374:	9301      	str	r3, [sp, #4]
   1c376:	68a3      	ldr	r3, [r4, #8]
   1c378:	9300      	str	r3, [sp, #0]
   1c37a:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c37e:	4631      	mov	r1, r6
   1c380:	4628      	mov	r0, r5
   1c382:	f7e6 fbe9 	bl	2b58 <print_formatted>
		break;
   1c386:	e7db      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c388:	6923      	ldr	r3, [r4, #16]
   1c38a:	9302      	str	r3, [sp, #8]
   1c38c:	68e3      	ldr	r3, [r4, #12]
   1c38e:	9301      	str	r3, [sp, #4]
   1c390:	68a3      	ldr	r3, [r4, #8]
   1c392:	9300      	str	r3, [sp, #0]
   1c394:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c398:	4631      	mov	r1, r6
   1c39a:	4628      	mov	r0, r5
   1c39c:	f7e6 fbdc 	bl	2b58 <print_formatted>
		break;
   1c3a0:	e7ce      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c3a2:	6963      	ldr	r3, [r4, #20]
   1c3a4:	9303      	str	r3, [sp, #12]
   1c3a6:	6923      	ldr	r3, [r4, #16]
   1c3a8:	9302      	str	r3, [sp, #8]
   1c3aa:	68e3      	ldr	r3, [r4, #12]
   1c3ac:	9301      	str	r3, [sp, #4]
   1c3ae:	68a3      	ldr	r3, [r4, #8]
   1c3b0:	9300      	str	r3, [sp, #0]
   1c3b2:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c3b6:	4631      	mov	r1, r6
   1c3b8:	4628      	mov	r0, r5
   1c3ba:	f7e6 fbcd 	bl	2b58 <print_formatted>
		break;
   1c3be:	e7bf      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c3c0:	69a3      	ldr	r3, [r4, #24]
   1c3c2:	9304      	str	r3, [sp, #16]
   1c3c4:	6963      	ldr	r3, [r4, #20]
   1c3c6:	9303      	str	r3, [sp, #12]
   1c3c8:	6923      	ldr	r3, [r4, #16]
   1c3ca:	9302      	str	r3, [sp, #8]
   1c3cc:	68e3      	ldr	r3, [r4, #12]
   1c3ce:	9301      	str	r3, [sp, #4]
   1c3d0:	68a3      	ldr	r3, [r4, #8]
   1c3d2:	9300      	str	r3, [sp, #0]
   1c3d4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c3d8:	4631      	mov	r1, r6
   1c3da:	4628      	mov	r0, r5
   1c3dc:	f7e6 fbbc 	bl	2b58 <print_formatted>
		break;
   1c3e0:	e7ae      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c3e2:	69e3      	ldr	r3, [r4, #28]
   1c3e4:	9305      	str	r3, [sp, #20]
   1c3e6:	69a3      	ldr	r3, [r4, #24]
   1c3e8:	9304      	str	r3, [sp, #16]
   1c3ea:	6963      	ldr	r3, [r4, #20]
   1c3ec:	9303      	str	r3, [sp, #12]
   1c3ee:	6923      	ldr	r3, [r4, #16]
   1c3f0:	9302      	str	r3, [sp, #8]
   1c3f2:	68e3      	ldr	r3, [r4, #12]
   1c3f4:	9301      	str	r3, [sp, #4]
   1c3f6:	68a3      	ldr	r3, [r4, #8]
   1c3f8:	9300      	str	r3, [sp, #0]
   1c3fa:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c3fe:	4631      	mov	r1, r6
   1c400:	4628      	mov	r0, r5
   1c402:	f7e6 fba9 	bl	2b58 <print_formatted>
		break;
   1c406:	e79b      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c408:	6a23      	ldr	r3, [r4, #32]
   1c40a:	9306      	str	r3, [sp, #24]
   1c40c:	69e3      	ldr	r3, [r4, #28]
   1c40e:	9305      	str	r3, [sp, #20]
   1c410:	69a3      	ldr	r3, [r4, #24]
   1c412:	9304      	str	r3, [sp, #16]
   1c414:	6963      	ldr	r3, [r4, #20]
   1c416:	9303      	str	r3, [sp, #12]
   1c418:	6923      	ldr	r3, [r4, #16]
   1c41a:	9302      	str	r3, [sp, #8]
   1c41c:	68e3      	ldr	r3, [r4, #12]
   1c41e:	9301      	str	r3, [sp, #4]
   1c420:	68a3      	ldr	r3, [r4, #8]
   1c422:	9300      	str	r3, [sp, #0]
   1c424:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c428:	4631      	mov	r1, r6
   1c42a:	4628      	mov	r0, r5
   1c42c:	f7e6 fb94 	bl	2b58 <print_formatted>
		break;
   1c430:	e786      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c432:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c434:	9307      	str	r3, [sp, #28]
   1c436:	6a23      	ldr	r3, [r4, #32]
   1c438:	9306      	str	r3, [sp, #24]
   1c43a:	69e3      	ldr	r3, [r4, #28]
   1c43c:	9305      	str	r3, [sp, #20]
   1c43e:	69a3      	ldr	r3, [r4, #24]
   1c440:	9304      	str	r3, [sp, #16]
   1c442:	6963      	ldr	r3, [r4, #20]
   1c444:	9303      	str	r3, [sp, #12]
   1c446:	6923      	ldr	r3, [r4, #16]
   1c448:	9302      	str	r3, [sp, #8]
   1c44a:	68e3      	ldr	r3, [r4, #12]
   1c44c:	9301      	str	r3, [sp, #4]
   1c44e:	68a3      	ldr	r3, [r4, #8]
   1c450:	9300      	str	r3, [sp, #0]
   1c452:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c456:	4631      	mov	r1, r6
   1c458:	4628      	mov	r0, r5
   1c45a:	f7e6 fb7d 	bl	2b58 <print_formatted>
		break;
   1c45e:	e76f      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c460:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c462:	9308      	str	r3, [sp, #32]
   1c464:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c466:	9307      	str	r3, [sp, #28]
   1c468:	6a23      	ldr	r3, [r4, #32]
   1c46a:	9306      	str	r3, [sp, #24]
   1c46c:	69e3      	ldr	r3, [r4, #28]
   1c46e:	9305      	str	r3, [sp, #20]
   1c470:	69a3      	ldr	r3, [r4, #24]
   1c472:	9304      	str	r3, [sp, #16]
   1c474:	6963      	ldr	r3, [r4, #20]
   1c476:	9303      	str	r3, [sp, #12]
   1c478:	6923      	ldr	r3, [r4, #16]
   1c47a:	9302      	str	r3, [sp, #8]
   1c47c:	68e3      	ldr	r3, [r4, #12]
   1c47e:	9301      	str	r3, [sp, #4]
   1c480:	68a3      	ldr	r3, [r4, #8]
   1c482:	9300      	str	r3, [sp, #0]
   1c484:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c488:	4631      	mov	r1, r6
   1c48a:	4628      	mov	r0, r5
   1c48c:	f7e6 fb64 	bl	2b58 <print_formatted>
		break;
   1c490:	e756      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c492:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c494:	9309      	str	r3, [sp, #36]	; 0x24
   1c496:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c498:	9308      	str	r3, [sp, #32]
   1c49a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c49c:	9307      	str	r3, [sp, #28]
   1c49e:	6a23      	ldr	r3, [r4, #32]
   1c4a0:	9306      	str	r3, [sp, #24]
   1c4a2:	69e3      	ldr	r3, [r4, #28]
   1c4a4:	9305      	str	r3, [sp, #20]
   1c4a6:	69a3      	ldr	r3, [r4, #24]
   1c4a8:	9304      	str	r3, [sp, #16]
   1c4aa:	6963      	ldr	r3, [r4, #20]
   1c4ac:	9303      	str	r3, [sp, #12]
   1c4ae:	6923      	ldr	r3, [r4, #16]
   1c4b0:	9302      	str	r3, [sp, #8]
   1c4b2:	68e3      	ldr	r3, [r4, #12]
   1c4b4:	9301      	str	r3, [sp, #4]
   1c4b6:	68a3      	ldr	r3, [r4, #8]
   1c4b8:	9300      	str	r3, [sp, #0]
   1c4ba:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c4be:	4631      	mov	r1, r6
   1c4c0:	4628      	mov	r0, r5
   1c4c2:	f7e6 fb49 	bl	2b58 <print_formatted>
		break;
   1c4c6:	e73b      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c4c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c4ca:	930a      	str	r3, [sp, #40]	; 0x28
   1c4cc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c4ce:	9309      	str	r3, [sp, #36]	; 0x24
   1c4d0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c4d2:	9308      	str	r3, [sp, #32]
   1c4d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c4d6:	9307      	str	r3, [sp, #28]
   1c4d8:	6a23      	ldr	r3, [r4, #32]
   1c4da:	9306      	str	r3, [sp, #24]
   1c4dc:	69e3      	ldr	r3, [r4, #28]
   1c4de:	9305      	str	r3, [sp, #20]
   1c4e0:	69a3      	ldr	r3, [r4, #24]
   1c4e2:	9304      	str	r3, [sp, #16]
   1c4e4:	6963      	ldr	r3, [r4, #20]
   1c4e6:	9303      	str	r3, [sp, #12]
   1c4e8:	6923      	ldr	r3, [r4, #16]
   1c4ea:	9302      	str	r3, [sp, #8]
   1c4ec:	68e3      	ldr	r3, [r4, #12]
   1c4ee:	9301      	str	r3, [sp, #4]
   1c4f0:	68a3      	ldr	r3, [r4, #8]
   1c4f2:	9300      	str	r3, [sp, #0]
   1c4f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c4f8:	4631      	mov	r1, r6
   1c4fa:	4628      	mov	r0, r5
   1c4fc:	f7e6 fb2c 	bl	2b58 <print_formatted>
		break;
   1c500:	e71e      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c502:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c504:	930b      	str	r3, [sp, #44]	; 0x2c
   1c506:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c508:	930a      	str	r3, [sp, #40]	; 0x28
   1c50a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c50c:	9309      	str	r3, [sp, #36]	; 0x24
   1c50e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c510:	9308      	str	r3, [sp, #32]
   1c512:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c514:	9307      	str	r3, [sp, #28]
   1c516:	6a23      	ldr	r3, [r4, #32]
   1c518:	9306      	str	r3, [sp, #24]
   1c51a:	69e3      	ldr	r3, [r4, #28]
   1c51c:	9305      	str	r3, [sp, #20]
   1c51e:	69a3      	ldr	r3, [r4, #24]
   1c520:	9304      	str	r3, [sp, #16]
   1c522:	6963      	ldr	r3, [r4, #20]
   1c524:	9303      	str	r3, [sp, #12]
   1c526:	6923      	ldr	r3, [r4, #16]
   1c528:	9302      	str	r3, [sp, #8]
   1c52a:	68e3      	ldr	r3, [r4, #12]
   1c52c:	9301      	str	r3, [sp, #4]
   1c52e:	68a3      	ldr	r3, [r4, #8]
   1c530:	9300      	str	r3, [sp, #0]
   1c532:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c536:	4631      	mov	r1, r6
   1c538:	4628      	mov	r0, r5
   1c53a:	f7e6 fb0d 	bl	2b58 <print_formatted>
		break;
   1c53e:	e6ff      	b.n	1c340 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   1c540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1c542:	930c      	str	r3, [sp, #48]	; 0x30
   1c544:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c546:	930b      	str	r3, [sp, #44]	; 0x2c
   1c548:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c54a:	930a      	str	r3, [sp, #40]	; 0x28
   1c54c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c54e:	9309      	str	r3, [sp, #36]	; 0x24
   1c550:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c552:	9308      	str	r3, [sp, #32]
   1c554:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1c556:	9307      	str	r3, [sp, #28]
   1c558:	6a23      	ldr	r3, [r4, #32]
   1c55a:	9306      	str	r3, [sp, #24]
   1c55c:	69e3      	ldr	r3, [r4, #28]
   1c55e:	9305      	str	r3, [sp, #20]
   1c560:	69a3      	ldr	r3, [r4, #24]
   1c562:	9304      	str	r3, [sp, #16]
   1c564:	6963      	ldr	r3, [r4, #20]
   1c566:	9303      	str	r3, [sp, #12]
   1c568:	6923      	ldr	r3, [r4, #16]
   1c56a:	9302      	str	r3, [sp, #8]
   1c56c:	68e3      	ldr	r3, [r4, #12]
   1c56e:	9301      	str	r3, [sp, #4]
   1c570:	68a3      	ldr	r3, [r4, #8]
   1c572:	9300      	str	r3, [sp, #0]
   1c574:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c578:	4631      	mov	r1, r6
   1c57a:	4628      	mov	r0, r5
   1c57c:	f7e6 faec 	bl	2b58 <print_formatted>
}
   1c580:	e6de      	b.n	1c340 <std_print+0x78>

0001c582 <log_output_flush>:
		     output->control_block->offset,
   1c582:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1c584:	6881      	ldr	r1, [r0, #8]
{
   1c586:	b510      	push	{r4, lr}
   1c588:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   1c58a:	e9d2 2300 	ldrd	r2, r3, [r2]
   1c58e:	6800      	ldr	r0, [r0, #0]
   1c590:	f7ff fe8d 	bl	1c2ae <buffer_write>
	output->control_block->offset = 0;
   1c594:	6863      	ldr	r3, [r4, #4]
   1c596:	2200      	movs	r2, #0
   1c598:	601a      	str	r2, [r3, #0]
}
   1c59a:	bd10      	pop	{r4, pc}

0001c59c <out_func>:
{
   1c59c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c59e:	684b      	ldr	r3, [r1, #4]
   1c5a0:	681a      	ldr	r2, [r3, #0]
   1c5a2:	68cb      	ldr	r3, [r1, #12]
   1c5a4:	429a      	cmp	r2, r3
{
   1c5a6:	4605      	mov	r5, r0
   1c5a8:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   1c5aa:	d102      	bne.n	1c5b2 <out_func+0x16>
		log_output_flush(out_ctx);
   1c5ac:	4608      	mov	r0, r1
   1c5ae:	f7ff ffe8 	bl	1c582 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c5b2:	6863      	ldr	r3, [r4, #4]
   1c5b4:	f3bf 8f5b 	dmb	ish
   1c5b8:	e853 2f00 	ldrex	r2, [r3]
   1c5bc:	1c51      	adds	r1, r2, #1
   1c5be:	e843 1000 	strex	r0, r1, [r3]
   1c5c2:	2800      	cmp	r0, #0
   1c5c4:	d1f8      	bne.n	1c5b8 <out_func+0x1c>
   1c5c6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1c5ca:	68a3      	ldr	r3, [r4, #8]
   1c5cc:	549d      	strb	r5, [r3, r2]
}
   1c5ce:	2000      	movs	r0, #0
   1c5d0:	bd38      	pop	{r3, r4, r5, pc}

0001c5d2 <read_str>:
{
   1c5d2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1c5d6:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1c5da:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1c5dc:	4640      	mov	r0, r8
{
   1c5de:	461f      	mov	r7, r3
   1c5e0:	460c      	mov	r4, r1
   1c5e2:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1c5e4:	f001 f9e5 	bl	1d9b2 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1c5e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c5ec:	9300      	str	r3, [sp, #0]
   1c5ee:	b280      	uxth	r0, r0
   1c5f0:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1c5f4:	463b      	mov	r3, r7
   1c5f6:	4632      	mov	r2, r6
   1c5f8:	4621      	mov	r1, r4
   1c5fa:	4628      	mov	r0, r5
   1c5fc:	f002 fe42 	bl	1f284 <bt_gatt_attr_read>
}
   1c600:	b004      	add	sp, #16
   1c602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001c606 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   1c606:	2200      	movs	r2, #0
   1c608:	e9c0 2200 	strd	r2, r2, [r0]
   1c60c:	6082      	str	r2, [r0, #8]
}
   1c60e:	4770      	bx	lr

0001c610 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1c610:	6903      	ldr	r3, [r0, #16]
   1c612:	b2c9      	uxtb	r1, r1
   1c614:	220c      	movs	r2, #12
   1c616:	fb01 3302 	mla	r3, r1, r2, r3
   1c61a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   1c61c:	f000 0007 	and.w	r0, r0, #7
   1c620:	4770      	bx	lr

0001c622 <set_on_state>:
	__asm__ volatile(
   1c622:	f04f 0320 	mov.w	r3, #32
   1c626:	f3ef 8211 	mrs	r2, BASEPRI
   1c62a:	f383 8812 	msr	BASEPRI_MAX, r3
   1c62e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1c632:	6803      	ldr	r3, [r0, #0]
   1c634:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1c638:	f043 0302 	orr.w	r3, r3, #2
   1c63c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1c63e:	f382 8811 	msr	BASEPRI, r2
   1c642:	f3bf 8f6f 	isb	sy
}
   1c646:	4770      	bx	lr

0001c648 <stop>:
{
   1c648:	4603      	mov	r3, r0
   1c64a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   1c64c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   1c64e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1c650:	f04f 0420 	mov.w	r4, #32
   1c654:	f3ef 8611 	mrs	r6, BASEPRI
   1c658:	f384 8812 	msr	BASEPRI_MAX, r4
   1c65c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c660:	250c      	movs	r5, #12
   1c662:	fb05 0401 	mla	r4, r5, r1, r0
   1c666:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1c668:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   1c66c:	d001      	beq.n	1c672 <stop+0x2a>
   1c66e:	42a2      	cmp	r2, r4
   1c670:	d111      	bne.n	1c696 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1c672:	fb05 0001 	mla	r0, r5, r1, r0
   1c676:	2201      	movs	r2, #1
   1c678:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   1c67a:	2000      	movs	r0, #0
	__asm__ volatile(
   1c67c:	f386 8811 	msr	BASEPRI, r6
   1c680:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1c684:	b930      	cbnz	r0, 1c694 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   1c686:	685b      	ldr	r3, [r3, #4]
   1c688:	220c      	movs	r2, #12
   1c68a:	fb02 3101 	mla	r1, r2, r1, r3
   1c68e:	684b      	ldr	r3, [r1, #4]
   1c690:	4798      	blx	r3
	return 0;
   1c692:	2000      	movs	r0, #0
}
   1c694:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   1c696:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1c69a:	e7ef      	b.n	1c67c <stop+0x34>

0001c69c <api_stop>:
	return stop(dev, subsys, CTX_API);
   1c69c:	2280      	movs	r2, #128	; 0x80
   1c69e:	f7ff bfd3 	b.w	1c648 <stop>

0001c6a2 <async_start>:
{
   1c6a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c6a4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   1c6a6:	6904      	ldr	r4, [r0, #16]
{
   1c6a8:	4605      	mov	r5, r0
   1c6aa:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   1c6ac:	f04f 0020 	mov.w	r0, #32
   1c6b0:	f3ef 8c11 	mrs	ip, BASEPRI
   1c6b4:	f380 8812 	msr	BASEPRI_MAX, r0
   1c6b8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1c6bc:	260c      	movs	r6, #12
   1c6be:	fb06 4601 	mla	r6, r6, r1, r4
   1c6c2:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1c6c4:	f000 0e07 	and.w	lr, r0, #7
   1c6c8:	f1be 0f01 	cmp.w	lr, #1
   1c6cc:	d110      	bne.n	1c6f0 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1c6ce:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   1c6d0:	2600      	movs	r6, #0
	__asm__ volatile(
   1c6d2:	f38c 8811 	msr	BASEPRI, ip
   1c6d6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   1c6da:	b93e      	cbnz	r6, 1c6ec <async_start+0x4a>
	subdata->cb = cb;
   1c6dc:	200c      	movs	r0, #12
   1c6de:	4341      	muls	r1, r0
   1c6e0:	440c      	add	r4, r1
	subdata->user_data = user_data;
   1c6e2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   1c6e6:	686b      	ldr	r3, [r5, #4]
   1c6e8:	585b      	ldr	r3, [r3, r1]
   1c6ea:	4798      	blx	r3
}
   1c6ec:	4630      	mov	r0, r6
   1c6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1c6f0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   1c6f4:	4287      	cmp	r7, r0
   1c6f6:	bf14      	ite	ne
   1c6f8:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
   1c6fc:	f06f 0677 	mvneq.w	r6, #119	; 0x77
   1c700:	e7e7      	b.n	1c6d2 <async_start+0x30>

0001c702 <api_start>:
{
   1c702:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   1c704:	2480      	movs	r4, #128	; 0x80
   1c706:	9400      	str	r4, [sp, #0]
   1c708:	f7ff ffcb 	bl	1c6a2 <async_start>
}
   1c70c:	b002      	add	sp, #8
   1c70e:	bd10      	pop	{r4, pc}

0001c710 <onoff_started_callback>:
	return &data->mgr[type];
   1c710:	6900      	ldr	r0, [r0, #16]
{
   1c712:	b410      	push	{r4}
	return &data->mgr[type];
   1c714:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1c716:	241c      	movs	r4, #28
   1c718:	fb03 0004 	mla	r0, r3, r4, r0
   1c71c:	2100      	movs	r1, #0
}
   1c71e:	bc10      	pop	{r4}
	notify(mgr, 0);
   1c720:	4710      	bx	r2

0001c722 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1c722:	2000      	movs	r0, #0
   1c724:	f003 bc1e 	b.w	1ff64 <nrfx_clock_start>

0001c728 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1c728:	2000      	movs	r0, #0
   1c72a:	f7fd bab3 	b.w	19c94 <nrfx_clock_stop>

0001c72e <blocking_start_callback>:
{
   1c72e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1c730:	f7fd bfca 	b.w	1a6c8 <z_impl_k_sem_give>

0001c734 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1c734:	4770      	bx	lr

0001c736 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1c736:	4770      	bx	lr

0001c738 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1c738:	b538      	push	{r3, r4, r5, lr}
   1c73a:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1c73c:	42ab      	cmp	r3, r5
{
   1c73e:	4611      	mov	r1, r2
   1c740:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1c742:	d804      	bhi.n	1c74e <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1c744:	461a      	mov	r2, r3
   1c746:	f001 f961 	bl	1da0c <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1c74a:	4620      	mov	r0, r4
   1c74c:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1c74e:	2400      	movs	r4, #0
   1c750:	e7fb      	b.n	1c74a <_copy+0x12>

0001c752 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1c752:	f001 b966 	b.w	1da22 <memset>

0001c756 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1c756:	09c3      	lsrs	r3, r0, #7
   1c758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1c75c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1c760:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1c764:	b2c0      	uxtb	r0, r0
   1c766:	4770      	bx	lr

0001c768 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1c768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c76c:	4606      	mov	r6, r0
   1c76e:	b0a9      	sub	sp, #164	; 0xa4
   1c770:	4688      	mov	r8, r1
   1c772:	4614      	mov	r4, r2
   1c774:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c776:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1c77a:	f7e7 f815 	bl	37a8 <uECC_get_rng>
		if (!rng_function ||
   1c77e:	4603      	mov	r3, r0
   1c780:	2800      	cmp	r0, #0
   1c782:	d03e      	beq.n	1c802 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1c784:	2140      	movs	r1, #64	; 0x40
   1c786:	a808      	add	r0, sp, #32
   1c788:	4798      	blx	r3
		if (!rng_function ||
   1c78a:	b3d0      	cbz	r0, 1c802 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1c78c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1c790:	f112 031f 	adds.w	r3, r2, #31
   1c794:	bf48      	it	mi
   1c796:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1c79a:	466d      	mov	r5, sp
   1c79c:	464a      	mov	r2, r9
   1c79e:	a908      	add	r1, sp, #32
   1c7a0:	4628      	mov	r0, r5
   1c7a2:	f343 1347 	sbfx	r3, r3, #5, #8
   1c7a6:	f000 f9fa 	bl	1cb9e <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1c7aa:	4622      	mov	r2, r4
   1c7ac:	4629      	mov	r1, r5
   1c7ae:	a818      	add	r0, sp, #96	; 0x60
   1c7b0:	f000 fe0f 	bl	1d3d2 <EccPoint_compute_public_key>
   1c7b4:	b318      	cbz	r0, 1c7fe <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1c7b6:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1c7ba:	1dd9      	adds	r1, r3, #7
   1c7bc:	bf48      	it	mi
   1c7be:	f103 010e 	addmi.w	r1, r3, #14
   1c7c2:	462a      	mov	r2, r5
   1c7c4:	4640      	mov	r0, r8
   1c7c6:	10c9      	asrs	r1, r1, #3
   1c7c8:	f000 fe2b 	bl	1d422 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1c7cc:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1c7d0:	aa18      	add	r2, sp, #96	; 0x60
   1c7d2:	4630      	mov	r0, r6
   1c7d4:	f000 fe25 	bl	1d422 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1c7d8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1c7dc:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1c7e0:	ab18      	add	r3, sp, #96	; 0x60
   1c7e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1c7e6:	1870      	adds	r0, r6, r1
   1c7e8:	f000 fe1b 	bl	1d422 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1c7ec:	2220      	movs	r2, #32
   1c7ee:	2100      	movs	r1, #0
   1c7f0:	4628      	mov	r0, r5
   1c7f2:	f001 f916 	bl	1da22 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1c7f6:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1c7f8:	b029      	add	sp, #164	; 0xa4
   1c7fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1c7fe:	3f01      	subs	r7, #1
   1c800:	d1bb      	bne.n	1c77a <uECC_make_key+0x12>
        		return 0;
   1c802:	2000      	movs	r0, #0
   1c804:	e7f8      	b.n	1c7f8 <uECC_make_key+0x90>

0001c806 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1c806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c80a:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1c80c:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1c810:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1c814:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1c818:	b0a4      	sub	sp, #144	; 0x90
   1c81a:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1c81c:	1dda      	adds	r2, r3, #7
   1c81e:	bf48      	it	mi
   1c820:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1c824:	ad04      	add	r5, sp, #16
{
   1c826:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1c828:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1c82a:	4628      	mov	r0, r5
   1c82c:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1c82e:	9502      	str	r5, [sp, #8]
   1c830:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1c832:	f000 fe0a 	bl	1d44a <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1c836:	463a      	mov	r2, r7
   1c838:	4649      	mov	r1, r9
   1c83a:	a814      	add	r0, sp, #80	; 0x50
   1c83c:	f000 fe05 	bl	1d44a <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1c840:	ab14      	add	r3, sp, #80	; 0x50
   1c842:	eb09 0107 	add.w	r1, r9, r7
   1c846:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1c84a:	463a      	mov	r2, r7
   1c84c:	f000 fdfd 	bl	1d44a <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1c850:	4623      	mov	r3, r4
   1c852:	4632      	mov	r2, r6
   1c854:	4629      	mov	r1, r5
   1c856:	4628      	mov	r0, r5
   1c858:	f000 fd8f 	bl	1d37a <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1c85c:	fab0 f380 	clz	r3, r0
   1c860:	9401      	str	r4, [sp, #4]
   1c862:	aa24      	add	r2, sp, #144	; 0x90
   1c864:	095b      	lsrs	r3, r3, #5
   1c866:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   1c86a:	8863      	ldrh	r3, [r4, #2]
   1c86c:	3301      	adds	r3, #1
   1c86e:	b21b      	sxth	r3, r3
   1c870:	9300      	str	r3, [sp, #0]
   1c872:	f851 2c88 	ldr.w	r2, [r1, #-136]
   1c876:	a914      	add	r1, sp, #80	; 0x50
   1c878:	2300      	movs	r3, #0
   1c87a:	4608      	mov	r0, r1
   1c87c:	f000 fcb0 	bl	1d1e0 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1c880:	aa14      	add	r2, sp, #80	; 0x50
   1c882:	4639      	mov	r1, r7
   1c884:	4640      	mov	r0, r8
   1c886:	f000 fdcc 	bl	1d422 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1c88a:	4621      	mov	r1, r4
   1c88c:	a814      	add	r0, sp, #80	; 0x50
   1c88e:	f000 fc1c 	bl	1d0ca <EccPoint_isZero>
   1c892:	af02      	add	r7, sp, #8
   1c894:	4604      	mov	r4, r0
   1c896:	2208      	movs	r2, #8
   1c898:	2100      	movs	r1, #0
   1c89a:	4638      	mov	r0, r7
   1c89c:	f001 f8c1 	bl	1da22 <memset>
   1c8a0:	2220      	movs	r2, #32
   1c8a2:	2100      	movs	r1, #0
   1c8a4:	4630      	mov	r0, r6
   1c8a6:	f001 f8bc 	bl	1da22 <memset>
   1c8aa:	2220      	movs	r2, #32
   1c8ac:	2100      	movs	r1, #0
   1c8ae:	4628      	mov	r0, r5
   1c8b0:	f001 f8b7 	bl	1da22 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1c8b4:	fab4 f084 	clz	r0, r4
   1c8b8:	0940      	lsrs	r0, r0, #5
   1c8ba:	b024      	add	sp, #144	; 0x90
   1c8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001c8c0 <uECC_vli_add>:
{
   1c8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1c8c2:	2400      	movs	r4, #0
{
   1c8c4:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1c8c6:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1c8c8:	b265      	sxtb	r5, r4
   1c8ca:	42ab      	cmp	r3, r5
   1c8cc:	dc00      	bgt.n	1c8d0 <uECC_vli_add+0x10>
}
   1c8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1c8d0:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1c8d4:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1c8d8:	443d      	add	r5, r7
   1c8da:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   1c8dc:	42af      	cmp	r7, r5
   1c8de:	f000 0001 	and.w	r0, r0, #1
   1c8e2:	bf18      	it	ne
   1c8e4:	2000      	movne	r0, #0
		result[i] = sum;
   1c8e6:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1c8ea:	bf88      	it	hi
   1c8ec:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1c8f0:	3401      	adds	r4, #1
   1c8f2:	e7e9      	b.n	1c8c8 <uECC_vli_add+0x8>

0001c8f4 <uECC_vli_rshift1>:
	vli += num_words;
   1c8f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1c8f8:	2300      	movs	r3, #0
	while (vli-- > end) {
   1c8fa:	4288      	cmp	r0, r1
   1c8fc:	d300      	bcc.n	1c900 <uECC_vli_rshift1+0xc>
}
   1c8fe:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1c900:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1c904:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1c908:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1c90a:	07d3      	lsls	r3, r2, #31
   1c90c:	e7f5      	b.n	1c8fa <uECC_vli_rshift1+0x6>

0001c90e <vli_modInv_update>:
	if (!EVEN(uv)) {
   1c90e:	6803      	ldr	r3, [r0, #0]
{
   1c910:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1c912:	f013 0601 	ands.w	r6, r3, #1
{
   1c916:	4605      	mov	r5, r0
   1c918:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1c91a:	d005      	beq.n	1c928 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1c91c:	4613      	mov	r3, r2
   1c91e:	460a      	mov	r2, r1
   1c920:	4601      	mov	r1, r0
   1c922:	f7ff ffcd 	bl	1c8c0 <uECC_vli_add>
   1c926:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1c928:	4621      	mov	r1, r4
   1c92a:	4628      	mov	r0, r5
   1c92c:	f7ff ffe2 	bl	1c8f4 <uECC_vli_rshift1>
	if (carry) {
   1c930:	b146      	cbz	r6, 1c944 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1c932:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1c936:	3a01      	subs	r2, #1
   1c938:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1c93c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1c940:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1c944:	bd70      	pop	{r4, r5, r6, pc}

0001c946 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   1c946:	f04f 0c00 	mov.w	ip, #0
{
   1c94a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   1c94e:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   1c950:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   1c952:	fa4f f98c 	sxtb.w	r9, ip
   1c956:	454b      	cmp	r3, r9
   1c958:	dc16      	bgt.n	1c988 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1c95a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1c95e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   1c962:	9600      	str	r6, [sp, #0]
   1c964:	f04f 0800 	mov.w	r8, #0
   1c968:	9f00      	ldr	r7, [sp, #0]
   1c96a:	fa53 fe88 	uxtab	lr, r3, r8
   1c96e:	fa4f fe8e 	sxtb.w	lr, lr
   1c972:	45be      	cmp	lr, r7
   1c974:	fa5f f688 	uxtb.w	r6, r8
   1c978:	db26      	blt.n	1c9c8 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   1c97a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1c97e:	f840 4c04 	str.w	r4, [r0, #-4]
}
   1c982:	b003      	add	sp, #12
   1c984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   1c988:	f04f 0e00 	mov.w	lr, #0
   1c98c:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   1c990:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c992:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1c996:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c99a:	fba6 6707 	umull	r6, r7, r6, r7
   1c99e:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   1c9a0:	f10e 0e01 	add.w	lr, lr, #1
   1c9a4:	417d      	adcs	r5, r7
   1c9a6:	fa4f f68e 	sxtb.w	r6, lr
   1c9aa:	f04f 0b00 	mov.w	fp, #0
   1c9ae:	bf28      	it	cs
   1c9b0:	f04f 0b01 	movcs.w	fp, #1
   1c9b4:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   1c9b6:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   1c9b8:	ddeb      	ble.n	1c992 <uECC_vli_mult+0x4c>
		result[k] = r0;
   1c9ba:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1c9be:	462c      	mov	r4, r5
   1c9c0:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1c9c4:	4645      	mov	r5, r8
   1c9c6:	e7c4      	b.n	1c952 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1c9c8:	3601      	adds	r6, #1
   1c9ca:	fa4f fc86 	sxtb.w	ip, r6
   1c9ce:	ebae 0a0c 	sub.w	sl, lr, ip
   1c9d2:	46a9      	mov	r9, r5
   1c9d4:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   1c9d8:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   1c9dc:	2500      	movs	r5, #0
   1c9de:	459c      	cmp	ip, r3
   1c9e0:	db05      	blt.n	1c9ee <uECC_vli_mult+0xa8>
		result[k] = r0;
   1c9e2:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1c9e6:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   1c9ea:	464c      	mov	r4, r9
   1c9ec:	e7bc      	b.n	1c968 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1c9ee:	f856 bb04 	ldr.w	fp, [r6], #4
   1c9f2:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1c9f6:	fbab 7b07 	umull	r7, fp, fp, r7
   1c9fa:	f8cd b004 	str.w	fp, [sp, #4]
   1c9fe:	193c      	adds	r4, r7, r4
   1ca00:	9f01      	ldr	r7, [sp, #4]
   1ca02:	eb57 0909 	adcs.w	r9, r7, r9
   1ca06:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ca0a:	f10c 0c01 	add.w	ip, ip, #1
   1ca0e:	bf28      	it	cs
   1ca10:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   1ca14:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1ca16:	fa4f fc8c 	sxtb.w	ip, ip
   1ca1a:	e7e0      	b.n	1c9de <uECC_vli_mult+0x98>

0001ca1c <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1ca1c:	2300      	movs	r3, #0
{
   1ca1e:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1ca20:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1ca22:	b25a      	sxtb	r2, r3
   1ca24:	4291      	cmp	r1, r2
   1ca26:	dc00      	bgt.n	1ca2a <uECC_vli_clear+0xe>
}
   1ca28:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1ca2a:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1ca2e:	3301      	adds	r3, #1
   1ca30:	e7f7      	b.n	1ca22 <uECC_vli_clear+0x6>

0001ca32 <uECC_vli_isZero>:
{
   1ca32:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1ca34:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1ca36:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1ca38:	b25c      	sxtb	r4, r3
   1ca3a:	42a1      	cmp	r1, r4
   1ca3c:	dc03      	bgt.n	1ca46 <uECC_vli_isZero+0x14>
}
   1ca3e:	fab2 f082 	clz	r0, r2
   1ca42:	0940      	lsrs	r0, r0, #5
   1ca44:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1ca46:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1ca4a:	3301      	adds	r3, #1
   1ca4c:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1ca4e:	e7f3      	b.n	1ca38 <uECC_vli_isZero+0x6>

0001ca50 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ca50:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ca52:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ca54:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1ca58:	f001 011f 	and.w	r1, r1, #31
   1ca5c:	fa03 f101 	lsl.w	r1, r3, r1
}
   1ca60:	4008      	ands	r0, r1
   1ca62:	4770      	bx	lr

0001ca64 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ca64:	3901      	subs	r1, #1
   1ca66:	b24b      	sxtb	r3, r1
{
   1ca68:	4602      	mov	r2, r0
   1ca6a:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ca6e:	2b00      	cmp	r3, #0
   1ca70:	da03      	bge.n	1ca7a <uECC_vli_numBits+0x16>
	return (i + 1);
   1ca72:	3301      	adds	r3, #1
   1ca74:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1ca76:	b938      	cbnz	r0, 1ca88 <uECC_vli_numBits+0x24>
   1ca78:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1ca7a:	f851 0904 	ldr.w	r0, [r1], #-4
   1ca7e:	2800      	cmp	r0, #0
   1ca80:	d1f7      	bne.n	1ca72 <uECC_vli_numBits+0xe>
   1ca82:	3b01      	subs	r3, #1
   1ca84:	b25b      	sxtb	r3, r3
   1ca86:	e7f2      	b.n	1ca6e <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1ca88:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1ca8c:	3b01      	subs	r3, #1
   1ca8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1ca92:	2300      	movs	r3, #0
   1ca94:	b922      	cbnz	r2, 1caa0 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1ca96:	3801      	subs	r0, #1
   1ca98:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1ca9c:	b200      	sxth	r0, r0
}
   1ca9e:	4770      	bx	lr
		digit >>= 1;
   1caa0:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1caa2:	3301      	adds	r3, #1
   1caa4:	e7f6      	b.n	1ca94 <uECC_vli_numBits+0x30>

0001caa6 <uECC_vli_set>:
{
   1caa6:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1caa8:	2300      	movs	r3, #0
   1caaa:	b25c      	sxtb	r4, r3
   1caac:	42a2      	cmp	r2, r4
   1caae:	dc00      	bgt.n	1cab2 <uECC_vli_set+0xc>
}
   1cab0:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1cab2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1cab6:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1caba:	3301      	adds	r3, #1
   1cabc:	e7f5      	b.n	1caaa <uECC_vli_set+0x4>

0001cabe <uECC_vli_cmp_unsafe>:
{
   1cabe:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1cac0:	3a01      	subs	r2, #1
   1cac2:	b253      	sxtb	r3, r2
   1cac4:	009a      	lsls	r2, r3, #2
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	da01      	bge.n	1cace <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1caca:	2000      	movs	r0, #0
}
   1cacc:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1cace:	5885      	ldr	r5, [r0, r2]
   1cad0:	588c      	ldr	r4, [r1, r2]
   1cad2:	42a5      	cmp	r5, r4
   1cad4:	d805      	bhi.n	1cae2 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1cad6:	f1a2 0204 	sub.w	r2, r2, #4
   1cada:	d304      	bcc.n	1cae6 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1cadc:	3b01      	subs	r3, #1
   1cade:	b25b      	sxtb	r3, r3
   1cae0:	e7f1      	b.n	1cac6 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1cae2:	2001      	movs	r0, #1
   1cae4:	e7f2      	b.n	1cacc <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1cae6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1caea:	e7ef      	b.n	1cacc <uECC_vli_cmp_unsafe+0xe>

0001caec <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1caec:	3a01      	subs	r2, #1
   1caee:	b253      	sxtb	r3, r2
{
   1caf0:	b570      	push	{r4, r5, r6, lr}
   1caf2:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1caf4:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1caf6:	2b00      	cmp	r3, #0
   1caf8:	da03      	bge.n	1cb02 <uECC_vli_equal+0x16>
}
   1cafa:	1e20      	subs	r0, r4, #0
   1cafc:	bf18      	it	ne
   1cafe:	2001      	movne	r0, #1
   1cb00:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1cb02:	5885      	ldr	r5, [r0, r2]
   1cb04:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1cb06:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1cb08:	4075      	eors	r5, r6
   1cb0a:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1cb0c:	b25b      	sxtb	r3, r3
   1cb0e:	3a04      	subs	r2, #4
   1cb10:	e7f1      	b.n	1caf6 <uECC_vli_equal+0xa>

0001cb12 <uECC_vli_sub>:
{
   1cb12:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1cb14:	2400      	movs	r4, #0
{
   1cb16:	4606      	mov	r6, r0
   1cb18:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1cb1a:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1cb1c:	b265      	sxtb	r5, r4
   1cb1e:	4565      	cmp	r5, ip
   1cb20:	db00      	blt.n	1cb24 <uECC_vli_sub+0x12>
}
   1cb22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1cb24:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1cb28:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1cb2c:	1a3d      	subs	r5, r7, r0
   1cb2e:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   1cb30:	42af      	cmp	r7, r5
   1cb32:	f000 0001 	and.w	r0, r0, #1
   1cb36:	bf18      	it	ne
   1cb38:	2000      	movne	r0, #0
		result[i] = diff;
   1cb3a:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1cb3e:	bf38      	it	cc
   1cb40:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   1cb44:	3401      	adds	r4, #1
   1cb46:	e7e9      	b.n	1cb1c <uECC_vli_sub+0xa>

0001cb48 <uECC_vli_modAdd>:
{
   1cb48:	b570      	push	{r4, r5, r6, lr}
   1cb4a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1cb4e:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1cb50:	4633      	mov	r3, r6
{
   1cb52:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1cb54:	f7ff feb4 	bl	1c8c0 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1cb58:	b930      	cbnz	r0, 1cb68 <uECC_vli_modAdd+0x20>
   1cb5a:	4632      	mov	r2, r6
   1cb5c:	4621      	mov	r1, r4
   1cb5e:	4628      	mov	r0, r5
   1cb60:	f7ff ffad 	bl	1cabe <uECC_vli_cmp_unsafe>
   1cb64:	2801      	cmp	r0, #1
   1cb66:	d007      	beq.n	1cb78 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1cb68:	4633      	mov	r3, r6
   1cb6a:	462a      	mov	r2, r5
   1cb6c:	4621      	mov	r1, r4
   1cb6e:	4620      	mov	r0, r4
}
   1cb70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1cb74:	f7ff bfcd 	b.w	1cb12 <uECC_vli_sub>
}
   1cb78:	bd70      	pop	{r4, r5, r6, pc}

0001cb7a <uECC_vli_modSub>:
{
   1cb7a:	b570      	push	{r4, r5, r6, lr}
   1cb7c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1cb80:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1cb82:	4633      	mov	r3, r6
{
   1cb84:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1cb86:	f7ff ffc4 	bl	1cb12 <uECC_vli_sub>
	if (l_borrow) {
   1cb8a:	b138      	cbz	r0, 1cb9c <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1cb8c:	4633      	mov	r3, r6
   1cb8e:	462a      	mov	r2, r5
   1cb90:	4621      	mov	r1, r4
   1cb92:	4620      	mov	r0, r4
}
   1cb94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1cb98:	f7ff be92 	b.w	1c8c0 <uECC_vli_add>
}
   1cb9c:	bd70      	pop	{r4, r5, r6, pc}

0001cb9e <uECC_vli_mmod>:
{
   1cb9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cba2:	b0a5      	sub	sp, #148	; 0x94
   1cba4:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1cba6:	ab14      	add	r3, sp, #80	; 0x50
   1cba8:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1cbac:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1cbae:	4629      	mov	r1, r5
   1cbb0:	4610      	mov	r0, r2
{
   1cbb2:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   1cbb4:	f7ff ff56 	bl	1ca64 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1cbb8:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1cbbc:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1cbbe:	2c00      	cmp	r4, #0
   1cbc0:	4621      	mov	r1, r4
   1cbc2:	bfb8      	it	lt
   1cbc4:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1cbc8:	4263      	negs	r3, r4
   1cbca:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1cbce:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1cbd2:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1cbd6:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1cbd8:	bf58      	it	pl
   1cbda:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1cbdc:	f7ff ff1e 	bl	1ca1c <uECC_vli_clear>
	if (bit_shift > 0) {
   1cbe0:	2e00      	cmp	r6, #0
   1cbe2:	b208      	sxth	r0, r1
   1cbe4:	dd2b      	ble.n	1cc3e <uECC_vli_mmod+0xa0>
   1cbe6:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1cbe8:	2200      	movs	r2, #0
   1cbea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1cbee:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1cbf2:	4613      	mov	r3, r2
   1cbf4:	429d      	cmp	r5, r3
   1cbf6:	d817      	bhi.n	1cc28 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1cbf8:	006b      	lsls	r3, r5, #1
   1cbfa:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cbfc:	ab04      	add	r3, sp, #16
   1cbfe:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cc02:	1e6f      	subs	r7, r5, #1
   1cc04:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cc06:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cc08:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1cc0c:	2c00      	cmp	r4, #0
   1cc0e:	da54      	bge.n	1ccba <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1cc10:	ab24      	add	r3, sp, #144	; 0x90
   1cc12:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1cc16:	462a      	mov	r2, r5
   1cc18:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1cc1c:	4640      	mov	r0, r8
   1cc1e:	f7ff ff42 	bl	1caa6 <uECC_vli_set>
}
   1cc22:	b025      	add	sp, #148	; 0x94
   1cc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1cc28:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   1cc2c:	fa0c f106 	lsl.w	r1, ip, r6
   1cc30:	430a      	orrs	r2, r1
   1cc32:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1cc36:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1cc38:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1cc3c:	e7da      	b.n	1cbf4 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1cc3e:	ab04      	add	r3, sp, #16
   1cc40:	462a      	mov	r2, r5
   1cc42:	4639      	mov	r1, r7
   1cc44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1cc48:	f7ff ff2d 	bl	1caa6 <uECC_vli_set>
   1cc4c:	e7d4      	b.n	1cbf8 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1cc4e:	fa0f fe82 	sxth.w	lr, r2
   1cc52:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1cc56:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1cc5a:	ab24      	add	r3, sp, #144	; 0x90
   1cc5c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1cc60:	3001      	adds	r0, #1
   1cc62:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1cc66:	440b      	add	r3, r1
   1cc68:	ebbb 0303 	subs.w	r3, fp, r3
   1cc6c:	bf34      	ite	cc
   1cc6e:	2201      	movcc	r2, #1
   1cc70:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1cc72:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1cc74:	bf18      	it	ne
   1cc76:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1cc78:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1cc7c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1cc80:	9b01      	ldr	r3, [sp, #4]
   1cc82:	b242      	sxtb	r2, r0
   1cc84:	429a      	cmp	r2, r3
   1cc86:	dbe2      	blt.n	1cc4e <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1cc88:	1a73      	subs	r3, r6, r1
   1cc8a:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1cc8c:	4629      	mov	r1, r5
   1cc8e:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1cc90:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1cc92:	f7ff fe2f 	bl	1c8f4 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cc96:	ab24      	add	r3, sp, #144	; 0x90
   1cc98:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1cc9c:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1cc9e:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1cca2:	f857 3c80 	ldr.w	r3, [r7, #-128]
   1cca6:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   1ccaa:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ccae:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   1ccb0:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ccb2:	f7ff fe1f 	bl	1c8f4 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1ccb6:	b224      	sxth	r4, r4
   1ccb8:	e7a8      	b.n	1cc0c <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ccba:	ab24      	add	r3, sp, #144	; 0x90
   1ccbc:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1ccbe:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1ccc2:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ccc4:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1ccc8:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1cccc:	e7d8      	b.n	1cc80 <uECC_vli_mmod+0xe2>

0001ccce <uECC_vli_modMult_fast>:
{
   1ccce:	b530      	push	{r4, r5, lr}
   1ccd0:	461c      	mov	r4, r3
   1ccd2:	b091      	sub	sp, #68	; 0x44
   1ccd4:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1ccd6:	f993 3000 	ldrsb.w	r3, [r3]
   1ccda:	4668      	mov	r0, sp
   1ccdc:	f7ff fe33 	bl	1c946 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1cce0:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1cce4:	4669      	mov	r1, sp
   1cce6:	4628      	mov	r0, r5
   1cce8:	4798      	blx	r3
}
   1ccea:	b011      	add	sp, #68	; 0x44
   1ccec:	bd30      	pop	{r4, r5, pc}

0001ccee <uECC_vli_modSquare_fast>:
{
   1ccee:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1ccf0:	460a      	mov	r2, r1
   1ccf2:	f7ff bfec 	b.w	1ccce <uECC_vli_modMult_fast>

0001ccf6 <double_jacobian_default>:
{
   1ccf6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1ccfa:	f993 6000 	ldrsb.w	r6, [r3]
{
   1ccfe:	b092      	sub	sp, #72	; 0x48
   1cd00:	4604      	mov	r4, r0
   1cd02:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1cd04:	4610      	mov	r0, r2
   1cd06:	4631      	mov	r1, r6
{
   1cd08:	4615      	mov	r5, r2
   1cd0a:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1cd0c:	f7ff fe91 	bl	1ca32 <uECC_vli_isZero>
   1cd10:	2800      	cmp	r0, #0
   1cd12:	f040 8091 	bne.w	1ce38 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1cd16:	463a      	mov	r2, r7
   1cd18:	4649      	mov	r1, r9
   1cd1a:	a802      	add	r0, sp, #8
   1cd1c:	f7ff ffe7 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1cd20:	463b      	mov	r3, r7
   1cd22:	aa02      	add	r2, sp, #8
   1cd24:	4621      	mov	r1, r4
   1cd26:	a80a      	add	r0, sp, #40	; 0x28
   1cd28:	f7ff ffd1 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1cd2c:	a902      	add	r1, sp, #8
   1cd2e:	4608      	mov	r0, r1
   1cd30:	463a      	mov	r2, r7
   1cd32:	f7ff ffdc 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1cd36:	463b      	mov	r3, r7
   1cd38:	462a      	mov	r2, r5
   1cd3a:	4649      	mov	r1, r9
   1cd3c:	4648      	mov	r0, r9
   1cd3e:	f7ff ffc6 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cd42:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1cd46:	463a      	mov	r2, r7
   1cd48:	4629      	mov	r1, r5
   1cd4a:	4628      	mov	r0, r5
   1cd4c:	f7ff ffcf 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1cd50:	4643      	mov	r3, r8
   1cd52:	462a      	mov	r2, r5
   1cd54:	4621      	mov	r1, r4
   1cd56:	4620      	mov	r0, r4
   1cd58:	9600      	str	r6, [sp, #0]
   1cd5a:	f7ff fef5 	bl	1cb48 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1cd5e:	4643      	mov	r3, r8
   1cd60:	462a      	mov	r2, r5
   1cd62:	4629      	mov	r1, r5
   1cd64:	4628      	mov	r0, r5
   1cd66:	9600      	str	r6, [sp, #0]
   1cd68:	f7ff feee 	bl	1cb48 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1cd6c:	4643      	mov	r3, r8
   1cd6e:	462a      	mov	r2, r5
   1cd70:	4621      	mov	r1, r4
   1cd72:	4628      	mov	r0, r5
   1cd74:	9600      	str	r6, [sp, #0]
   1cd76:	f7ff ff00 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1cd7a:	463b      	mov	r3, r7
   1cd7c:	462a      	mov	r2, r5
   1cd7e:	4621      	mov	r1, r4
   1cd80:	4620      	mov	r0, r4
   1cd82:	f7ff ffa4 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1cd86:	4643      	mov	r3, r8
   1cd88:	4622      	mov	r2, r4
   1cd8a:	4621      	mov	r1, r4
   1cd8c:	4628      	mov	r0, r5
   1cd8e:	9600      	str	r6, [sp, #0]
   1cd90:	f7ff feda 	bl	1cb48 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1cd94:	4643      	mov	r3, r8
   1cd96:	9600      	str	r6, [sp, #0]
   1cd98:	462a      	mov	r2, r5
   1cd9a:	4621      	mov	r1, r4
   1cd9c:	4620      	mov	r0, r4
   1cd9e:	f7ff fed3 	bl	1cb48 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1cda2:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1cda4:	07db      	lsls	r3, r3, #31
   1cda6:	d54a      	bpl.n	1ce3e <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cda8:	4633      	mov	r3, r6
   1cdaa:	4642      	mov	r2, r8
   1cdac:	4621      	mov	r1, r4
   1cdae:	4620      	mov	r0, r4
   1cdb0:	f7ff fd86 	bl	1c8c0 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1cdb4:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1cdb6:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1cdb8:	4620      	mov	r0, r4
   1cdba:	f7ff fd9b 	bl	1c8f4 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1cdbe:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1cdc2:	3b01      	subs	r3, #1
   1cdc4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1cdc8:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1cdcc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1cdd0:	463a      	mov	r2, r7
   1cdd2:	4621      	mov	r1, r4
   1cdd4:	4628      	mov	r0, r5
   1cdd6:	f7ff ff8a 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1cdda:	4643      	mov	r3, r8
   1cddc:	aa0a      	add	r2, sp, #40	; 0x28
   1cdde:	4629      	mov	r1, r5
   1cde0:	4628      	mov	r0, r5
   1cde2:	9600      	str	r6, [sp, #0]
   1cde4:	f7ff fec9 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1cde8:	4643      	mov	r3, r8
   1cdea:	aa0a      	add	r2, sp, #40	; 0x28
   1cdec:	4629      	mov	r1, r5
   1cdee:	4628      	mov	r0, r5
   1cdf0:	9600      	str	r6, [sp, #0]
   1cdf2:	f7ff fec2 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1cdf6:	a90a      	add	r1, sp, #40	; 0x28
   1cdf8:	4608      	mov	r0, r1
   1cdfa:	4643      	mov	r3, r8
   1cdfc:	462a      	mov	r2, r5
   1cdfe:	9600      	str	r6, [sp, #0]
   1ce00:	f7ff febb 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1ce04:	463b      	mov	r3, r7
   1ce06:	aa0a      	add	r2, sp, #40	; 0x28
   1ce08:	4621      	mov	r1, r4
   1ce0a:	4620      	mov	r0, r4
   1ce0c:	f7ff ff5f 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1ce10:	aa02      	add	r2, sp, #8
   1ce12:	4643      	mov	r3, r8
   1ce14:	4610      	mov	r0, r2
   1ce16:	4621      	mov	r1, r4
   1ce18:	9600      	str	r6, [sp, #0]
   1ce1a:	f7ff feae 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1ce1e:	4632      	mov	r2, r6
   1ce20:	4629      	mov	r1, r5
   1ce22:	4620      	mov	r0, r4
   1ce24:	f7ff fe3f 	bl	1caa6 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1ce28:	4649      	mov	r1, r9
   1ce2a:	4628      	mov	r0, r5
   1ce2c:	f7ff fe3b 	bl	1caa6 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1ce30:	a902      	add	r1, sp, #8
   1ce32:	4648      	mov	r0, r9
   1ce34:	f7ff fe37 	bl	1caa6 <uECC_vli_set>
}
   1ce38:	b012      	add	sp, #72	; 0x48
   1ce3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1ce3e:	4631      	mov	r1, r6
   1ce40:	4620      	mov	r0, r4
   1ce42:	f7ff fd57 	bl	1c8f4 <uECC_vli_rshift1>
   1ce46:	e7c3      	b.n	1cdd0 <double_jacobian_default+0xda>

0001ce48 <x_side_default>:
{
   1ce48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce4c:	4615      	mov	r5, r2
   1ce4e:	b08a      	sub	sp, #40	; 0x28
   1ce50:	4604      	mov	r4, r0
   1ce52:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ce54:	221c      	movs	r2, #28
   1ce56:	2100      	movs	r1, #0
   1ce58:	a803      	add	r0, sp, #12
   1ce5a:	f000 fde2 	bl	1da22 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1ce5e:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1ce60:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ce64:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1ce66:	462a      	mov	r2, r5
   1ce68:	4631      	mov	r1, r6
   1ce6a:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ce6c:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1ce6e:	f7ff ff3e 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1ce72:	463b      	mov	r3, r7
   1ce74:	aa02      	add	r2, sp, #8
   1ce76:	4621      	mov	r1, r4
   1ce78:	4620      	mov	r0, r4
   1ce7a:	f8cd 8000 	str.w	r8, [sp]
   1ce7e:	f7ff fe7c 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1ce82:	462b      	mov	r3, r5
   1ce84:	4632      	mov	r2, r6
   1ce86:	4621      	mov	r1, r4
   1ce88:	4620      	mov	r0, r4
   1ce8a:	f7ff ff20 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1ce8e:	f8cd 8000 	str.w	r8, [sp]
   1ce92:	463b      	mov	r3, r7
   1ce94:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1ce98:	4621      	mov	r1, r4
   1ce9a:	4620      	mov	r0, r4
   1ce9c:	f7ff fe54 	bl	1cb48 <uECC_vli_modAdd>
}
   1cea0:	b00a      	add	sp, #40	; 0x28
   1cea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001cea6 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1cea6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ceaa:	b09a      	sub	sp, #104	; 0x68
   1ceac:	4616      	mov	r6, r2
   1ceae:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1ceb2:	4644      	mov	r4, r8
{
   1ceb4:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1ceb6:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1ceba:	9500      	str	r5, [sp, #0]
{
   1cebc:	4607      	mov	r7, r0
   1cebe:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1cec0:	4623      	mov	r3, r4
   1cec2:	4602      	mov	r2, r0
   1cec4:	4631      	mov	r1, r6
   1cec6:	a802      	add	r0, sp, #8
   1cec8:	f7ff fe57 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1cecc:	a902      	add	r1, sp, #8
   1cece:	4642      	mov	r2, r8
   1ced0:	4608      	mov	r0, r1
   1ced2:	f7ff ff0c 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1ced6:	4643      	mov	r3, r8
   1ced8:	aa02      	add	r2, sp, #8
   1ceda:	4639      	mov	r1, r7
   1cedc:	4638      	mov	r0, r7
   1cede:	f7ff fef6 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1cee2:	4643      	mov	r3, r8
   1cee4:	aa02      	add	r2, sp, #8
   1cee6:	4631      	mov	r1, r6
   1cee8:	4630      	mov	r0, r6
   1ceea:	f7ff fef0 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1ceee:	4623      	mov	r3, r4
   1cef0:	4652      	mov	r2, sl
   1cef2:	4649      	mov	r1, r9
   1cef4:	a802      	add	r0, sp, #8
   1cef6:	9500      	str	r5, [sp, #0]
   1cef8:	f7ff fe26 	bl	1cb48 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1cefc:	4623      	mov	r3, r4
   1cefe:	4652      	mov	r2, sl
   1cf00:	4649      	mov	r1, r9
   1cf02:	4648      	mov	r0, r9
   1cf04:	9500      	str	r5, [sp, #0]
   1cf06:	f7ff fe38 	bl	1cb7a <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1cf0a:	4623      	mov	r3, r4
   1cf0c:	463a      	mov	r2, r7
   1cf0e:	4631      	mov	r1, r6
   1cf10:	a80a      	add	r0, sp, #40	; 0x28
   1cf12:	9500      	str	r5, [sp, #0]
   1cf14:	f7ff fe31 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1cf18:	4643      	mov	r3, r8
   1cf1a:	aa0a      	add	r2, sp, #40	; 0x28
   1cf1c:	4651      	mov	r1, sl
   1cf1e:	4650      	mov	r0, sl
   1cf20:	f7ff fed5 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1cf24:	4623      	mov	r3, r4
   1cf26:	4632      	mov	r2, r6
   1cf28:	4639      	mov	r1, r7
   1cf2a:	a80a      	add	r0, sp, #40	; 0x28
   1cf2c:	9500      	str	r5, [sp, #0]
   1cf2e:	f7ff fe0b 	bl	1cb48 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1cf32:	4642      	mov	r2, r8
   1cf34:	4649      	mov	r1, r9
   1cf36:	4630      	mov	r0, r6
   1cf38:	f7ff fed9 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1cf3c:	4623      	mov	r3, r4
   1cf3e:	aa0a      	add	r2, sp, #40	; 0x28
   1cf40:	4631      	mov	r1, r6
   1cf42:	4630      	mov	r0, r6
   1cf44:	9500      	str	r5, [sp, #0]
   1cf46:	f7ff fe18 	bl	1cb7a <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1cf4a:	4623      	mov	r3, r4
   1cf4c:	4632      	mov	r2, r6
   1cf4e:	4639      	mov	r1, r7
   1cf50:	a812      	add	r0, sp, #72	; 0x48
   1cf52:	9500      	str	r5, [sp, #0]
   1cf54:	f7ff fe11 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1cf58:	4643      	mov	r3, r8
   1cf5a:	aa12      	add	r2, sp, #72	; 0x48
   1cf5c:	4649      	mov	r1, r9
   1cf5e:	4648      	mov	r0, r9
   1cf60:	f7ff feb5 	bl	1ccce <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1cf64:	4623      	mov	r3, r4
   1cf66:	4652      	mov	r2, sl
   1cf68:	4649      	mov	r1, r9
   1cf6a:	4648      	mov	r0, r9
   1cf6c:	9500      	str	r5, [sp, #0]
   1cf6e:	f7ff fe04 	bl	1cb7a <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1cf72:	4642      	mov	r2, r8
   1cf74:	a902      	add	r1, sp, #8
   1cf76:	a812      	add	r0, sp, #72	; 0x48
   1cf78:	f7ff feb9 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1cf7c:	a912      	add	r1, sp, #72	; 0x48
   1cf7e:	4623      	mov	r3, r4
   1cf80:	aa0a      	add	r2, sp, #40	; 0x28
   1cf82:	4608      	mov	r0, r1
   1cf84:	9500      	str	r5, [sp, #0]
   1cf86:	f7ff fdf8 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1cf8a:	4623      	mov	r3, r4
   1cf8c:	463a      	mov	r2, r7
   1cf8e:	a912      	add	r1, sp, #72	; 0x48
   1cf90:	a80a      	add	r0, sp, #40	; 0x28
   1cf92:	9500      	str	r5, [sp, #0]
   1cf94:	f7ff fdf1 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1cf98:	a90a      	add	r1, sp, #40	; 0x28
   1cf9a:	4643      	mov	r3, r8
   1cf9c:	aa02      	add	r2, sp, #8
   1cf9e:	4608      	mov	r0, r1
   1cfa0:	f7ff fe95 	bl	1ccce <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1cfa4:	4623      	mov	r3, r4
   1cfa6:	4652      	mov	r2, sl
   1cfa8:	a90a      	add	r1, sp, #40	; 0x28
   1cfaa:	4650      	mov	r0, sl
   1cfac:	9500      	str	r5, [sp, #0]
   1cfae:	f7ff fde4 	bl	1cb7a <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1cfb2:	462a      	mov	r2, r5
   1cfb4:	a912      	add	r1, sp, #72	; 0x48
   1cfb6:	4638      	mov	r0, r7
   1cfb8:	f7ff fd75 	bl	1caa6 <uECC_vli_set>
}
   1cfbc:	b01a      	add	sp, #104	; 0x68
   1cfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001cfc2 <uECC_vli_modInv>:
{
   1cfc2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1cfc4:	460f      	mov	r7, r1
   1cfc6:	b0a1      	sub	sp, #132	; 0x84
   1cfc8:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1cfca:	4619      	mov	r1, r3
   1cfcc:	4638      	mov	r0, r7
{
   1cfce:	4615      	mov	r5, r2
   1cfd0:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1cfd2:	f7ff fd2e 	bl	1ca32 <uECC_vli_isZero>
   1cfd6:	b128      	cbz	r0, 1cfe4 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   1cfd8:	4630      	mov	r0, r6
}
   1cfda:	b021      	add	sp, #132	; 0x84
   1cfdc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   1cfe0:	f7ff bd1c 	b.w	1ca1c <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   1cfe4:	4622      	mov	r2, r4
   1cfe6:	4639      	mov	r1, r7
   1cfe8:	4668      	mov	r0, sp
   1cfea:	f7ff fd5c 	bl	1caa6 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1cfee:	4629      	mov	r1, r5
   1cff0:	a808      	add	r0, sp, #32
   1cff2:	f7ff fd58 	bl	1caa6 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1cff6:	a810      	add	r0, sp, #64	; 0x40
   1cff8:	4621      	mov	r1, r4
   1cffa:	f7ff fd0f 	bl	1ca1c <uECC_vli_clear>
	u[0] = 1;
   1cffe:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1d000:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1d002:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1d004:	f7ff fd0a 	bl	1ca1c <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1d008:	4622      	mov	r2, r4
   1d00a:	a908      	add	r1, sp, #32
   1d00c:	4668      	mov	r0, sp
   1d00e:	f7ff fd56 	bl	1cabe <uECC_vli_cmp_unsafe>
   1d012:	b930      	cbnz	r0, 1d022 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   1d014:	4622      	mov	r2, r4
   1d016:	a910      	add	r1, sp, #64	; 0x40
   1d018:	4630      	mov	r0, r6
   1d01a:	f7ff fd44 	bl	1caa6 <uECC_vli_set>
}
   1d01e:	b021      	add	sp, #132	; 0x84
   1d020:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   1d022:	9b00      	ldr	r3, [sp, #0]
   1d024:	07da      	lsls	r2, r3, #31
   1d026:	d409      	bmi.n	1d03c <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   1d028:	4621      	mov	r1, r4
   1d02a:	4668      	mov	r0, sp
   1d02c:	f7ff fc62 	bl	1c8f4 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1d030:	4622      	mov	r2, r4
   1d032:	4629      	mov	r1, r5
   1d034:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1d036:	f7ff fc6a 	bl	1c90e <vli_modInv_update>
   1d03a:	e7e5      	b.n	1d008 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   1d03c:	9b08      	ldr	r3, [sp, #32]
   1d03e:	07db      	lsls	r3, r3, #31
   1d040:	d407      	bmi.n	1d052 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   1d042:	4621      	mov	r1, r4
   1d044:	a808      	add	r0, sp, #32
   1d046:	f7ff fc55 	bl	1c8f4 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1d04a:	4622      	mov	r2, r4
   1d04c:	4629      	mov	r1, r5
   1d04e:	a818      	add	r0, sp, #96	; 0x60
   1d050:	e7f1      	b.n	1d036 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   1d052:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1d054:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1d056:	dd1c      	ble.n	1d092 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   1d058:	aa08      	add	r2, sp, #32
   1d05a:	4669      	mov	r1, sp
   1d05c:	4668      	mov	r0, sp
   1d05e:	f7ff fd58 	bl	1cb12 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1d062:	4621      	mov	r1, r4
   1d064:	4668      	mov	r0, sp
   1d066:	f7ff fc45 	bl	1c8f4 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1d06a:	4622      	mov	r2, r4
   1d06c:	a918      	add	r1, sp, #96	; 0x60
   1d06e:	a810      	add	r0, sp, #64	; 0x40
   1d070:	f7ff fd25 	bl	1cabe <uECC_vli_cmp_unsafe>
   1d074:	2800      	cmp	r0, #0
   1d076:	da05      	bge.n	1d084 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   1d078:	a910      	add	r1, sp, #64	; 0x40
   1d07a:	4623      	mov	r3, r4
   1d07c:	462a      	mov	r2, r5
   1d07e:	4608      	mov	r0, r1
   1d080:	f7ff fc1e 	bl	1c8c0 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1d084:	a910      	add	r1, sp, #64	; 0x40
   1d086:	4623      	mov	r3, r4
   1d088:	aa18      	add	r2, sp, #96	; 0x60
   1d08a:	4608      	mov	r0, r1
   1d08c:	f7ff fd41 	bl	1cb12 <uECC_vli_sub>
   1d090:	e7ce      	b.n	1d030 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   1d092:	466a      	mov	r2, sp
   1d094:	a808      	add	r0, sp, #32
   1d096:	f7ff fd3c 	bl	1cb12 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1d09a:	4621      	mov	r1, r4
   1d09c:	a808      	add	r0, sp, #32
   1d09e:	f7ff fc29 	bl	1c8f4 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1d0a2:	4622      	mov	r2, r4
   1d0a4:	a910      	add	r1, sp, #64	; 0x40
   1d0a6:	a818      	add	r0, sp, #96	; 0x60
   1d0a8:	f7ff fd09 	bl	1cabe <uECC_vli_cmp_unsafe>
   1d0ac:	2800      	cmp	r0, #0
   1d0ae:	da05      	bge.n	1d0bc <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   1d0b0:	a918      	add	r1, sp, #96	; 0x60
   1d0b2:	4623      	mov	r3, r4
   1d0b4:	462a      	mov	r2, r5
   1d0b6:	4608      	mov	r0, r1
   1d0b8:	f7ff fc02 	bl	1c8c0 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1d0bc:	a918      	add	r1, sp, #96	; 0x60
   1d0be:	4623      	mov	r3, r4
   1d0c0:	aa10      	add	r2, sp, #64	; 0x40
   1d0c2:	4608      	mov	r0, r1
   1d0c4:	f7ff fd25 	bl	1cb12 <uECC_vli_sub>
   1d0c8:	e7bf      	b.n	1d04a <uECC_vli_modInv+0x88>

0001d0ca <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1d0ca:	7809      	ldrb	r1, [r1, #0]
   1d0cc:	0049      	lsls	r1, r1, #1
   1d0ce:	b249      	sxtb	r1, r1
   1d0d0:	f7ff bcaf 	b.w	1ca32 <uECC_vli_isZero>

0001d0d4 <apply_z>:
{
   1d0d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0d6:	4615      	mov	r5, r2
   1d0d8:	b089      	sub	sp, #36	; 0x24
   1d0da:	461c      	mov	r4, r3
   1d0dc:	4607      	mov	r7, r0
   1d0de:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1d0e0:	461a      	mov	r2, r3
   1d0e2:	4629      	mov	r1, r5
   1d0e4:	4668      	mov	r0, sp
   1d0e6:	f7ff fe02 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1d0ea:	4623      	mov	r3, r4
   1d0ec:	466a      	mov	r2, sp
   1d0ee:	4639      	mov	r1, r7
   1d0f0:	4638      	mov	r0, r7
   1d0f2:	f7ff fdec 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1d0f6:	4623      	mov	r3, r4
   1d0f8:	462a      	mov	r2, r5
   1d0fa:	4669      	mov	r1, sp
   1d0fc:	4668      	mov	r0, sp
   1d0fe:	f7ff fde6 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1d102:	4623      	mov	r3, r4
   1d104:	466a      	mov	r2, sp
   1d106:	4631      	mov	r1, r6
   1d108:	4630      	mov	r0, r6
   1d10a:	f7ff fde0 	bl	1ccce <uECC_vli_modMult_fast>
}
   1d10e:	b009      	add	sp, #36	; 0x24
   1d110:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d112 <XYcZ_add>:
{
   1d112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d116:	b08a      	sub	sp, #40	; 0x28
   1d118:	4614      	mov	r4, r2
   1d11a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1d11e:	4655      	mov	r5, sl
{
   1d120:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1d122:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d126:	9600      	str	r6, [sp, #0]
{
   1d128:	4680      	mov	r8, r0
   1d12a:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1d12c:	462b      	mov	r3, r5
   1d12e:	4602      	mov	r2, r0
   1d130:	4621      	mov	r1, r4
   1d132:	a802      	add	r0, sp, #8
   1d134:	f7ff fd21 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1d138:	a902      	add	r1, sp, #8
   1d13a:	4652      	mov	r2, sl
   1d13c:	4608      	mov	r0, r1
   1d13e:	f7ff fdd6 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1d142:	4653      	mov	r3, sl
   1d144:	aa02      	add	r2, sp, #8
   1d146:	4641      	mov	r1, r8
   1d148:	4640      	mov	r0, r8
   1d14a:	f7ff fdc0 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1d14e:	4653      	mov	r3, sl
   1d150:	aa02      	add	r2, sp, #8
   1d152:	4621      	mov	r1, r4
   1d154:	4620      	mov	r0, r4
   1d156:	f7ff fdba 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1d15a:	462b      	mov	r3, r5
   1d15c:	464a      	mov	r2, r9
   1d15e:	4639      	mov	r1, r7
   1d160:	4638      	mov	r0, r7
   1d162:	9600      	str	r6, [sp, #0]
   1d164:	f7ff fd09 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1d168:	4652      	mov	r2, sl
   1d16a:	4639      	mov	r1, r7
   1d16c:	a802      	add	r0, sp, #8
   1d16e:	f7ff fdbe 	bl	1ccee <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1d172:	a902      	add	r1, sp, #8
   1d174:	462b      	mov	r3, r5
   1d176:	4642      	mov	r2, r8
   1d178:	4608      	mov	r0, r1
   1d17a:	9600      	str	r6, [sp, #0]
   1d17c:	f7ff fcfd 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1d180:	a902      	add	r1, sp, #8
   1d182:	462b      	mov	r3, r5
   1d184:	4622      	mov	r2, r4
   1d186:	4608      	mov	r0, r1
   1d188:	9600      	str	r6, [sp, #0]
   1d18a:	f7ff fcf6 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1d18e:	462b      	mov	r3, r5
   1d190:	4642      	mov	r2, r8
   1d192:	4621      	mov	r1, r4
   1d194:	4620      	mov	r0, r4
   1d196:	9600      	str	r6, [sp, #0]
   1d198:	f7ff fcef 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1d19c:	4653      	mov	r3, sl
   1d19e:	4622      	mov	r2, r4
   1d1a0:	4649      	mov	r1, r9
   1d1a2:	4648      	mov	r0, r9
   1d1a4:	f7ff fd93 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1d1a8:	462b      	mov	r3, r5
   1d1aa:	aa02      	add	r2, sp, #8
   1d1ac:	4641      	mov	r1, r8
   1d1ae:	4620      	mov	r0, r4
   1d1b0:	9600      	str	r6, [sp, #0]
   1d1b2:	f7ff fce2 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1d1b6:	4653      	mov	r3, sl
   1d1b8:	4622      	mov	r2, r4
   1d1ba:	4639      	mov	r1, r7
   1d1bc:	4638      	mov	r0, r7
   1d1be:	f7ff fd86 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1d1c2:	462b      	mov	r3, r5
   1d1c4:	464a      	mov	r2, r9
   1d1c6:	4639      	mov	r1, r7
   1d1c8:	4638      	mov	r0, r7
   1d1ca:	9600      	str	r6, [sp, #0]
   1d1cc:	f7ff fcd5 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1d1d0:	4632      	mov	r2, r6
   1d1d2:	a902      	add	r1, sp, #8
   1d1d4:	4620      	mov	r0, r4
   1d1d6:	f7ff fc66 	bl	1caa6 <uECC_vli_set>
}
   1d1da:	b00a      	add	sp, #40	; 0x28
   1d1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d1e0 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1d1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1e4:	b0b1      	sub	sp, #196	; 0xc4
   1d1e6:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1d1ea:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1d1ec:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1d1f0:	a818      	add	r0, sp, #96	; 0x60
{
   1d1f2:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1d1f4:	463a      	mov	r2, r7
{
   1d1f6:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   1d1f8:	f7ff fc55 	bl	1caa6 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1d1fc:	00bb      	lsls	r3, r7, #2
   1d1fe:	9305      	str	r3, [sp, #20]
   1d200:	9b04      	ldr	r3, [sp, #16]
   1d202:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1d206:	4619      	mov	r1, r3
   1d208:	a828      	add	r0, sp, #160	; 0xa0
   1d20a:	9302      	str	r3, [sp, #8]
   1d20c:	f7ff fc4b 	bl	1caa6 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1d210:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   1d214:	2d00      	cmp	r5, #0
   1d216:	f000 8086 	beq.w	1d326 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   1d21a:	4632      	mov	r2, r6
   1d21c:	4629      	mov	r1, r5
   1d21e:	a808      	add	r0, sp, #32
   1d220:	f7ff fc41 	bl	1caa6 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1d224:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1d228:	4632      	mov	r2, r6
   1d22a:	a918      	add	r1, sp, #96	; 0x60
   1d22c:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1d22e:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1d232:	f7ff fc38 	bl	1caa6 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1d236:	a928      	add	r1, sp, #160	; 0xa0
   1d238:	4648      	mov	r0, r9
   1d23a:	f7ff fc34 	bl	1caa6 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1d23e:	4623      	mov	r3, r4
   1d240:	aa08      	add	r2, sp, #32
   1d242:	a818      	add	r0, sp, #96	; 0x60
   1d244:	f7ff ff46 	bl	1d0d4 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1d248:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1d24c:	4623      	mov	r3, r4
   1d24e:	aa08      	add	r2, sp, #32
   1d250:	a928      	add	r1, sp, #160	; 0xa0
   1d252:	a818      	add	r0, sp, #96	; 0x60
   1d254:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1d256:	4623      	mov	r3, r4
   1d258:	aa08      	add	r2, sp, #32
   1d25a:	4649      	mov	r1, r9
   1d25c:	4640      	mov	r0, r8
   1d25e:	f7ff ff39 	bl	1d0d4 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1d262:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1d266:	3d02      	subs	r5, #2
   1d268:	b22d      	sxth	r5, r5
   1d26a:	2d00      	cmp	r5, #0
   1d26c:	dc62      	bgt.n	1d334 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d26e:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d272:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1d274:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d278:	ab10      	add	r3, sp, #64	; 0x40
   1d27a:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1d27e:	43ed      	mvns	r5, r5
   1d280:	ab20      	add	r3, sp, #128	; 0x80
   1d282:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1d286:	f005 0501 	and.w	r5, r5, #1
   1d28a:	ab10      	add	r3, sp, #64	; 0x40
   1d28c:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1d290:	ab20      	add	r3, sp, #128	; 0x80
   1d292:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   1d296:	462b      	mov	r3, r5
   1d298:	464a      	mov	r2, r9
   1d29a:	4631      	mov	r1, r6
   1d29c:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d29e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d2a2:	f7ff fe00 	bl	1cea6 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1d2a6:	4653      	mov	r3, sl
   1d2a8:	aa10      	add	r2, sp, #64	; 0x40
   1d2aa:	a918      	add	r1, sp, #96	; 0x60
   1d2ac:	a808      	add	r0, sp, #32
   1d2ae:	9700      	str	r7, [sp, #0]
   1d2b0:	f7ff fc63 	bl	1cb7a <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1d2b4:	a908      	add	r1, sp, #32
   1d2b6:	4623      	mov	r3, r4
   1d2b8:	4632      	mov	r2, r6
   1d2ba:	4608      	mov	r0, r1
   1d2bc:	f7ff fd07 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1d2c0:	a908      	add	r1, sp, #32
   1d2c2:	9a04      	ldr	r2, [sp, #16]
   1d2c4:	4623      	mov	r3, r4
   1d2c6:	4608      	mov	r0, r1
   1d2c8:	f7ff fd01 	bl	1ccce <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1d2cc:	a908      	add	r1, sp, #32
   1d2ce:	463b      	mov	r3, r7
   1d2d0:	4652      	mov	r2, sl
   1d2d2:	4608      	mov	r0, r1
   1d2d4:	f7ff fe75 	bl	1cfc2 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1d2d8:	a908      	add	r1, sp, #32
   1d2da:	9a02      	ldr	r2, [sp, #8]
   1d2dc:	4623      	mov	r3, r4
   1d2de:	4608      	mov	r0, r1
   1d2e0:	f7ff fcf5 	bl	1ccce <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1d2e4:	a908      	add	r1, sp, #32
   1d2e6:	4623      	mov	r3, r4
   1d2e8:	4642      	mov	r2, r8
   1d2ea:	4608      	mov	r0, r1
   1d2ec:	f7ff fcef 	bl	1ccce <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d2f0:	4633      	mov	r3, r6
   1d2f2:	4642      	mov	r2, r8
   1d2f4:	4629      	mov	r1, r5
   1d2f6:	4648      	mov	r0, r9
   1d2f8:	9400      	str	r4, [sp, #0]
   1d2fa:	f7ff ff0a 	bl	1d112 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1d2fe:	4623      	mov	r3, r4
   1d300:	aa08      	add	r2, sp, #32
   1d302:	a920      	add	r1, sp, #128	; 0x80
   1d304:	a810      	add	r0, sp, #64	; 0x40
   1d306:	f7ff fee5 	bl	1d0d4 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1d30a:	9803      	ldr	r0, [sp, #12]
   1d30c:	463a      	mov	r2, r7
   1d30e:	a910      	add	r1, sp, #64	; 0x40
   1d310:	f7ff fbc9 	bl	1caa6 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1d314:	9803      	ldr	r0, [sp, #12]
   1d316:	9b05      	ldr	r3, [sp, #20]
   1d318:	a920      	add	r1, sp, #128	; 0x80
   1d31a:	4418      	add	r0, r3
   1d31c:	f7ff fbc3 	bl	1caa6 <uECC_vli_set>
}
   1d320:	b031      	add	sp, #196	; 0xc4
   1d322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1d326:	4631      	mov	r1, r6
   1d328:	a808      	add	r0, sp, #32
   1d32a:	f7ff fb77 	bl	1ca1c <uECC_vli_clear>
		z[0] = 1;
   1d32e:	2301      	movs	r3, #1
   1d330:	9308      	str	r3, [sp, #32]
   1d332:	e777      	b.n	1d224 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1d334:	4629      	mov	r1, r5
   1d336:	4650      	mov	r0, sl
   1d338:	f7ff fb8a 	bl	1ca50 <uECC_vli_testBit>
   1d33c:	fab0 f680 	clz	r6, r0
   1d340:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1d342:	f1c6 0101 	rsb	r1, r6, #1
   1d346:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1d34a:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1d34e:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1d352:	4633      	mov	r3, r6
   1d354:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1d358:	465a      	mov	r2, fp
   1d35a:	9400      	str	r4, [sp, #0]
   1d35c:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1d360:	f7ff fda1 	bl	1cea6 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1d364:	9907      	ldr	r1, [sp, #28]
   1d366:	9806      	ldr	r0, [sp, #24]
   1d368:	9400      	str	r4, [sp, #0]
   1d36a:	460b      	mov	r3, r1
   1d36c:	4602      	mov	r2, r0
   1d36e:	4631      	mov	r1, r6
   1d370:	4658      	mov	r0, fp
   1d372:	f7ff fece 	bl	1d112 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1d376:	3d01      	subs	r5, #1
   1d378:	e776      	b.n	1d268 <EccPoint_mult+0x88>

0001d37a <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1d37a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d37e:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1d382:	f119 081f 	adds.w	r8, r9, #31
{
   1d386:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d388:	bf48      	it	mi
   1d38a:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1d38e:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1d390:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d394:	3524      	adds	r5, #36	; 0x24
   1d396:	4601      	mov	r1, r0
{
   1d398:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d39a:	4643      	mov	r3, r8
   1d39c:	462a      	mov	r2, r5
   1d39e:	4630      	mov	r0, r6
   1d3a0:	f7ff fa8e 	bl	1c8c0 <uECC_vli_add>
   1d3a4:	4604      	mov	r4, r0
   1d3a6:	b990      	cbnz	r0, 1d3ce <regularize_k+0x54>
   1d3a8:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1d3ac:	da06      	bge.n	1d3bc <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1d3ae:	4649      	mov	r1, r9
   1d3b0:	4630      	mov	r0, r6
   1d3b2:	f7ff fb4d 	bl	1ca50 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1d3b6:	1e04      	subs	r4, r0, #0
   1d3b8:	bf18      	it	ne
   1d3ba:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1d3bc:	4643      	mov	r3, r8
   1d3be:	462a      	mov	r2, r5
   1d3c0:	4631      	mov	r1, r6
   1d3c2:	4638      	mov	r0, r7
   1d3c4:	f7ff fa7c 	bl	1c8c0 <uECC_vli_add>

	return carry;
}
   1d3c8:	4620      	mov	r0, r4
   1d3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1d3ce:	2401      	movs	r4, #1
   1d3d0:	e7f4      	b.n	1d3bc <regularize_k+0x42>

0001d3d2 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1d3d2:	b530      	push	{r4, r5, lr}
   1d3d4:	4614      	mov	r4, r2
   1d3d6:	b095      	sub	sp, #84	; 0x54
   1d3d8:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d3da:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d3dc:	4623      	mov	r3, r4
{
   1d3de:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1d3e0:	a904      	add	r1, sp, #16
   1d3e2:	9102      	str	r1, [sp, #8]
   1d3e4:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1d3e6:	f7ff ffc8 	bl	1d37a <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1d3ea:	fab0 f380 	clz	r3, r0
   1d3ee:	095b      	lsrs	r3, r3, #5
   1d3f0:	aa14      	add	r2, sp, #80	; 0x50
   1d3f2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1d3f6:	8863      	ldrh	r3, [r4, #2]
   1d3f8:	9401      	str	r4, [sp, #4]
   1d3fa:	3301      	adds	r3, #1
   1d3fc:	b21b      	sxth	r3, r3
   1d3fe:	9300      	str	r3, [sp, #0]
   1d400:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1d404:	2300      	movs	r3, #0
   1d406:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1d40a:	4628      	mov	r0, r5
   1d40c:	f7ff fee8 	bl	1d1e0 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1d410:	4621      	mov	r1, r4
   1d412:	4628      	mov	r0, r5
   1d414:	f7ff fe59 	bl	1d0ca <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1d418:	fab0 f080 	clz	r0, r0
   1d41c:	0940      	lsrs	r0, r0, #5
   1d41e:	b015      	add	sp, #84	; 0x54
   1d420:	bd30      	pop	{r4, r5, pc}

0001d422 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1d422:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1d424:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d426:	1e4f      	subs	r7, r1, #1
   1d428:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1d42a:	428c      	cmp	r4, r1
   1d42c:	f105 0501 	add.w	r5, r5, #1
   1d430:	db00      	blt.n	1d434 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1d432:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d434:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1d436:	f023 0603 	bic.w	r6, r3, #3
   1d43a:	f003 0303 	and.w	r3, r3, #3
   1d43e:	5996      	ldr	r6, [r2, r6]
   1d440:	00db      	lsls	r3, r3, #3
   1d442:	fa26 f303 	lsr.w	r3, r6, r3
   1d446:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1d448:	e7ee      	b.n	1d428 <uECC_vli_nativeToBytes+0x6>

0001d44a <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1d44a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d44c:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d44e:	1cd1      	adds	r1, r2, #3
   1d450:	bf48      	it	mi
   1d452:	1d91      	addmi	r1, r2, #6
   1d454:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1d458:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1d45a:	f7ff fadf 	bl	1ca1c <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1d45e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1d460:	1e67      	subs	r7, r4, #1
   1d462:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1d464:	42a2      	cmp	r2, r4
   1d466:	f105 0501 	add.w	r5, r5, #1
   1d46a:	db00      	blt.n	1d46e <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1d46c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1d46e:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1d470:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1d474:	5cb2      	ldrb	r2, [r6, r2]
   1d476:	f003 0303 	and.w	r3, r3, #3
   1d47a:	00db      	lsls	r3, r3, #3
   1d47c:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1d480:	5842      	ldr	r2, [r0, r1]
   1d482:	431a      	orrs	r2, r3
   1d484:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1d486:	e7ec      	b.n	1d462 <uECC_vli_bytesToNative+0x18>

0001d488 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1d488:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d48a:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1d48c:	f991 6000 	ldrsb.w	r6, [r1]
{
   1d490:	4605      	mov	r5, r0
   1d492:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1d494:	f7ff fe19 	bl	1d0ca <EccPoint_isZero>
   1d498:	bb28      	cbnz	r0, 1d4e6 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d49a:	1d27      	adds	r7, r4, #4
   1d49c:	4632      	mov	r2, r6
   1d49e:	4629      	mov	r1, r5
   1d4a0:	4638      	mov	r0, r7
   1d4a2:	f7ff fb0c 	bl	1cabe <uECC_vli_cmp_unsafe>
   1d4a6:	2801      	cmp	r0, #1
   1d4a8:	d120      	bne.n	1d4ec <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1d4aa:	4632      	mov	r2, r6
   1d4ac:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1d4b0:	4638      	mov	r0, r7
   1d4b2:	f7ff fb04 	bl	1cabe <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1d4b6:	2801      	cmp	r0, #1
   1d4b8:	d118      	bne.n	1d4ec <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1d4ba:	4622      	mov	r2, r4
   1d4bc:	4668      	mov	r0, sp
   1d4be:	f7ff fc16 	bl	1ccee <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1d4c2:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1d4c6:	4622      	mov	r2, r4
   1d4c8:	4629      	mov	r1, r5
   1d4ca:	a808      	add	r0, sp, #32
   1d4cc:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1d4ce:	4632      	mov	r2, r6
   1d4d0:	a908      	add	r1, sp, #32
   1d4d2:	4668      	mov	r0, sp
   1d4d4:	f7ff fb0a 	bl	1caec <uECC_vli_equal>
		return -3;
   1d4d8:	2800      	cmp	r0, #0
   1d4da:	bf0c      	ite	eq
   1d4dc:	2000      	moveq	r0, #0
   1d4de:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1d4e2:	b011      	add	sp, #68	; 0x44
   1d4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1d4e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d4ea:	e7fa      	b.n	1d4e2 <uECC_valid_point+0x5a>
		return -2;
   1d4ec:	f06f 0001 	mvn.w	r0, #1
   1d4f0:	e7f7      	b.n	1d4e2 <uECC_valid_point+0x5a>

0001d4f2 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1d4f2:	b570      	push	{r4, r5, r6, lr}
   1d4f4:	460c      	mov	r4, r1
   1d4f6:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1d4f8:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d4fa:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1d4fe:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1d500:	4601      	mov	r1, r0
   1d502:	4668      	mov	r0, sp
   1d504:	f7ff ffa1 	bl	1d44a <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1d508:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1d50c:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1d510:	18a9      	adds	r1, r5, r2
   1d512:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1d516:	f7ff ff98 	bl	1d44a <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1d51a:	2210      	movs	r2, #16
   1d51c:	4631      	mov	r1, r6
   1d51e:	4668      	mov	r0, sp
   1d520:	f7ff facd 	bl	1cabe <uECC_vli_cmp_unsafe>
   1d524:	b128      	cbz	r0, 1d532 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1d526:	4621      	mov	r1, r4
   1d528:	4668      	mov	r0, sp
   1d52a:	f7ff ffad 	bl	1d488 <uECC_valid_point>
}
   1d52e:	b010      	add	sp, #64	; 0x40
   1d530:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1d532:	f06f 0003 	mvn.w	r0, #3
   1d536:	e7fa      	b.n	1d52e <uECC_valid_public_key+0x3c>

0001d538 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1d538:	78cb      	ldrb	r3, [r1, #3]
   1d53a:	7802      	ldrb	r2, [r0, #0]
   1d53c:	4053      	eors	r3, r2
   1d53e:	7003      	strb	r3, [r0, #0]
   1d540:	884b      	ldrh	r3, [r1, #2]
   1d542:	7842      	ldrb	r2, [r0, #1]
   1d544:	4053      	eors	r3, r2
   1d546:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1d548:	680a      	ldr	r2, [r1, #0]
   1d54a:	7883      	ldrb	r3, [r0, #2]
   1d54c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d550:	7083      	strb	r3, [r0, #2]
   1d552:	680a      	ldr	r2, [r1, #0]
   1d554:	78c3      	ldrb	r3, [r0, #3]
   1d556:	4053      	eors	r3, r2
   1d558:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1d55a:	79cb      	ldrb	r3, [r1, #7]
   1d55c:	7902      	ldrb	r2, [r0, #4]
   1d55e:	4053      	eors	r3, r2
   1d560:	7103      	strb	r3, [r0, #4]
   1d562:	88cb      	ldrh	r3, [r1, #6]
   1d564:	7942      	ldrb	r2, [r0, #5]
   1d566:	4053      	eors	r3, r2
   1d568:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1d56a:	684a      	ldr	r2, [r1, #4]
   1d56c:	7983      	ldrb	r3, [r0, #6]
   1d56e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d572:	7183      	strb	r3, [r0, #6]
   1d574:	684a      	ldr	r2, [r1, #4]
   1d576:	79c3      	ldrb	r3, [r0, #7]
   1d578:	4053      	eors	r3, r2
   1d57a:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1d57c:	7acb      	ldrb	r3, [r1, #11]
   1d57e:	7a02      	ldrb	r2, [r0, #8]
   1d580:	4053      	eors	r3, r2
   1d582:	7203      	strb	r3, [r0, #8]
   1d584:	7a42      	ldrb	r2, [r0, #9]
   1d586:	894b      	ldrh	r3, [r1, #10]
   1d588:	4053      	eors	r3, r2
   1d58a:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1d58c:	688a      	ldr	r2, [r1, #8]
   1d58e:	7a83      	ldrb	r3, [r0, #10]
   1d590:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d594:	7283      	strb	r3, [r0, #10]
   1d596:	688a      	ldr	r2, [r1, #8]
   1d598:	7ac3      	ldrb	r3, [r0, #11]
   1d59a:	4053      	eors	r3, r2
   1d59c:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1d59e:	7bcb      	ldrb	r3, [r1, #15]
   1d5a0:	7b02      	ldrb	r2, [r0, #12]
   1d5a2:	4053      	eors	r3, r2
   1d5a4:	7303      	strb	r3, [r0, #12]
   1d5a6:	89cb      	ldrh	r3, [r1, #14]
   1d5a8:	7b42      	ldrb	r2, [r0, #13]
   1d5aa:	4053      	eors	r3, r2
   1d5ac:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1d5ae:	68ca      	ldr	r2, [r1, #12]
   1d5b0:	7b83      	ldrb	r3, [r0, #14]
   1d5b2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1d5b6:	7383      	strb	r3, [r0, #14]
   1d5b8:	68ca      	ldr	r2, [r1, #12]
   1d5ba:	7bc3      	ldrb	r3, [r0, #15]
   1d5bc:	4053      	eors	r3, r2
   1d5be:	73c3      	strb	r3, [r0, #15]
}
   1d5c0:	4770      	bx	lr

0001d5c2 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   1d5c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1d5c4:	7802      	ldrb	r2, [r0, #0]
   1d5c6:	f88d 2000 	strb.w	r2, [sp]
   1d5ca:	7942      	ldrb	r2, [r0, #5]
   1d5cc:	f88d 2001 	strb.w	r2, [sp, #1]
   1d5d0:	7a82      	ldrb	r2, [r0, #10]
   1d5d2:	f88d 2002 	strb.w	r2, [sp, #2]
   1d5d6:	7bc2      	ldrb	r2, [r0, #15]
   1d5d8:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1d5dc:	7902      	ldrb	r2, [r0, #4]
   1d5de:	f88d 2004 	strb.w	r2, [sp, #4]
   1d5e2:	7a42      	ldrb	r2, [r0, #9]
   1d5e4:	f88d 2005 	strb.w	r2, [sp, #5]
   1d5e8:	7b82      	ldrb	r2, [r0, #14]
   1d5ea:	f88d 2006 	strb.w	r2, [sp, #6]
   1d5ee:	78c2      	ldrb	r2, [r0, #3]
   1d5f0:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1d5f4:	7a02      	ldrb	r2, [r0, #8]
   1d5f6:	f88d 2008 	strb.w	r2, [sp, #8]
   1d5fa:	7b42      	ldrb	r2, [r0, #13]
   1d5fc:	f88d 2009 	strb.w	r2, [sp, #9]
   1d600:	7882      	ldrb	r2, [r0, #2]
   1d602:	f88d 200a 	strb.w	r2, [sp, #10]
   1d606:	79c2      	ldrb	r2, [r0, #7]
   1d608:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1d60c:	7b02      	ldrb	r2, [r0, #12]
   1d60e:	f88d 200c 	strb.w	r2, [sp, #12]
   1d612:	7842      	ldrb	r2, [r0, #1]
   1d614:	7ac3      	ldrb	r3, [r0, #11]
   1d616:	f88d 200d 	strb.w	r2, [sp, #13]
   1d61a:	7982      	ldrb	r2, [r0, #6]
   1d61c:	f88d 200e 	strb.w	r2, [sp, #14]
   1d620:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d624:	2310      	movs	r3, #16
   1d626:	466a      	mov	r2, sp
   1d628:	4619      	mov	r1, r3
   1d62a:	f7ff f885 	bl	1c738 <_copy>
}
   1d62e:	b005      	add	sp, #20
   1d630:	f85d fb04 	ldr.w	pc, [sp], #4

0001d634 <mult_row_column>:
{
   1d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d636:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d638:	7808      	ldrb	r0, [r1, #0]
{
   1d63a:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1d63c:	f7ff f88b 	bl	1c756 <_double_byte>
   1d640:	4605      	mov	r5, r0
   1d642:	7860      	ldrb	r0, [r4, #1]
   1d644:	f7ff f887 	bl	1c756 <_double_byte>
   1d648:	78a2      	ldrb	r2, [r4, #2]
   1d64a:	7863      	ldrb	r3, [r4, #1]
   1d64c:	4053      	eors	r3, r2
   1d64e:	78e2      	ldrb	r2, [r4, #3]
   1d650:	4053      	eors	r3, r2
   1d652:	405d      	eors	r5, r3
   1d654:	4045      	eors	r5, r0
   1d656:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1d658:	7860      	ldrb	r0, [r4, #1]
   1d65a:	7827      	ldrb	r7, [r4, #0]
   1d65c:	f7ff f87b 	bl	1c756 <_double_byte>
   1d660:	4605      	mov	r5, r0
   1d662:	78a0      	ldrb	r0, [r4, #2]
   1d664:	f7ff f877 	bl	1c756 <_double_byte>
   1d668:	78a3      	ldrb	r3, [r4, #2]
   1d66a:	405f      	eors	r7, r3
   1d66c:	78e3      	ldrb	r3, [r4, #3]
   1d66e:	405f      	eors	r7, r3
   1d670:	407d      	eors	r5, r7
   1d672:	4045      	eors	r5, r0
   1d674:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1d676:	78a0      	ldrb	r0, [r4, #2]
   1d678:	7865      	ldrb	r5, [r4, #1]
   1d67a:	7827      	ldrb	r7, [r4, #0]
   1d67c:	f7ff f86b 	bl	1c756 <_double_byte>
   1d680:	406f      	eors	r7, r5
   1d682:	4605      	mov	r5, r0
   1d684:	78e0      	ldrb	r0, [r4, #3]
   1d686:	f7ff f866 	bl	1c756 <_double_byte>
   1d68a:	78e3      	ldrb	r3, [r4, #3]
   1d68c:	405f      	eors	r7, r3
   1d68e:	407d      	eors	r5, r7
   1d690:	4045      	eors	r5, r0
   1d692:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1d694:	7820      	ldrb	r0, [r4, #0]
   1d696:	f7ff f85e 	bl	1c756 <_double_byte>
   1d69a:	7863      	ldrb	r3, [r4, #1]
   1d69c:	7825      	ldrb	r5, [r4, #0]
   1d69e:	405d      	eors	r5, r3
   1d6a0:	78a3      	ldrb	r3, [r4, #2]
   1d6a2:	405d      	eors	r5, r3
   1d6a4:	4045      	eors	r5, r0
   1d6a6:	78e0      	ldrb	r0, [r4, #3]
   1d6a8:	f7ff f855 	bl	1c756 <_double_byte>
   1d6ac:	b2ed      	uxtb	r5, r5
   1d6ae:	4045      	eors	r5, r0
   1d6b0:	70f5      	strb	r5, [r6, #3]
}
   1d6b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d6b4 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   1d6b4:	b570      	push	{r4, r5, r6, lr}
   1d6b6:	4614      	mov	r4, r2
   1d6b8:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   1d6ba:	4605      	mov	r5, r0
   1d6bc:	2800      	cmp	r0, #0
   1d6be:	d049      	beq.n	1d754 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1d6c0:	2900      	cmp	r1, #0
   1d6c2:	d049      	beq.n	1d758 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   1d6c4:	2a00      	cmp	r2, #0
   1d6c6:	d049      	beq.n	1d75c <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1d6c8:	2310      	movs	r3, #16
   1d6ca:	460a      	mov	r2, r1
   1d6cc:	4668      	mov	r0, sp
   1d6ce:	4619      	mov	r1, r3
   1d6d0:	f7ff f832 	bl	1c738 <_copy>
	add_round_key(state, s->words);
   1d6d4:	4621      	mov	r1, r4
   1d6d6:	4668      	mov	r0, sp
   1d6d8:	f7ff ff2e 	bl	1d538 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   1d6dc:	3410      	adds	r4, #16
   1d6de:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   1d6e2:	4668      	mov	r0, sp
   1d6e4:	f7e6 f92a 	bl	393c <sub_bytes>
		shift_rows(state);
   1d6e8:	4668      	mov	r0, sp
   1d6ea:	f7ff ff6a 	bl	1d5c2 <shift_rows>
	mult_row_column(t, s);
   1d6ee:	4669      	mov	r1, sp
   1d6f0:	a804      	add	r0, sp, #16
   1d6f2:	f7ff ff9f 	bl	1d634 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   1d6f6:	a901      	add	r1, sp, #4
   1d6f8:	a805      	add	r0, sp, #20
   1d6fa:	f7ff ff9b 	bl	1d634 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   1d6fe:	a902      	add	r1, sp, #8
   1d700:	a806      	add	r0, sp, #24
   1d702:	f7ff ff97 	bl	1d634 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   1d706:	a903      	add	r1, sp, #12
   1d708:	a807      	add	r0, sp, #28
   1d70a:	f7ff ff93 	bl	1d634 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1d70e:	2310      	movs	r3, #16
   1d710:	4619      	mov	r1, r3
   1d712:	eb0d 0203 	add.w	r2, sp, r3
   1d716:	4668      	mov	r0, sp
   1d718:	f7ff f80e 	bl	1c738 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   1d71c:	4621      	mov	r1, r4
   1d71e:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   1d720:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   1d722:	f7ff ff09 	bl	1d538 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   1d726:	42a6      	cmp	r6, r4
   1d728:	d1db      	bne.n	1d6e2 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   1d72a:	f7e6 f907 	bl	393c <sub_bytes>
	shift_rows(state);
   1d72e:	4668      	mov	r0, sp
   1d730:	f7ff ff47 	bl	1d5c2 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   1d734:	4631      	mov	r1, r6
   1d736:	4668      	mov	r0, sp
   1d738:	f7ff fefe 	bl	1d538 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   1d73c:	2310      	movs	r3, #16
   1d73e:	4619      	mov	r1, r3
   1d740:	466a      	mov	r2, sp
   1d742:	4628      	mov	r0, r5
   1d744:	f7fe fff8 	bl	1c738 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   1d748:	4668      	mov	r0, sp
   1d74a:	2210      	movs	r2, #16
   1d74c:	2100      	movs	r1, #0
   1d74e:	f7ff f800 	bl	1c752 <_set>

	return TC_CRYPTO_SUCCESS;
   1d752:	2001      	movs	r0, #1
}
   1d754:	b008      	add	sp, #32
   1d756:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d758:	4608      	mov	r0, r1
   1d75a:	e7fb      	b.n	1d754 <tc_aes_encrypt+0xa0>
   1d75c:	4610      	mov	r0, r2
   1d75e:	e7f9      	b.n	1d754 <tc_aes_encrypt+0xa0>

0001d760 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1d760:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d762:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1d764:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1d766:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1d76a:	2b00      	cmp	r3, #0
   1d76c:	bfb4      	ite	lt
   1d76e:	2387      	movlt	r3, #135	; 0x87
   1d770:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1d772:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1d776:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1d77a:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1d77c:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1d780:	d002      	beq.n	1d788 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1d782:	7813      	ldrb	r3, [r2, #0]
   1d784:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1d786:	e7f4      	b.n	1d772 <gf_double+0x12>
	}
}
   1d788:	bd10      	pop	{r4, pc}

0001d78a <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1d78a:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1d78c:	b120      	cbz	r0, 1d798 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1d78e:	2258      	movs	r2, #88	; 0x58
   1d790:	2100      	movs	r1, #0
   1d792:	f7fe ffde 	bl	1c752 <_set>
   1d796:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d798:	bd08      	pop	{r3, pc}

0001d79a <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1d79a:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d79c:	4604      	mov	r4, r0
   1d79e:	b188      	cbz	r0, 1d7c4 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d7a0:	2210      	movs	r2, #16
   1d7a2:	2100      	movs	r1, #0
   1d7a4:	f7fe ffd5 	bl	1c752 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1d7a8:	2210      	movs	r2, #16
   1d7aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d7ae:	2100      	movs	r1, #0
   1d7b0:	f7fe ffcf 	bl	1c752 <_set>
	s->leftover_offset = 0;
   1d7b4:	2300      	movs	r3, #0
   1d7b6:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1d7b8:	2200      	movs	r2, #0
   1d7ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1d7be:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1d7c2:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1d7c4:	bd10      	pop	{r4, pc}

0001d7c6 <tc_cmac_setup>:
{
   1d7c6:	b570      	push	{r4, r5, r6, lr}
   1d7c8:	460d      	mov	r5, r1
   1d7ca:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1d7cc:	4604      	mov	r4, r0
   1d7ce:	b310      	cbz	r0, 1d816 <tc_cmac_setup+0x50>
   1d7d0:	b311      	cbz	r1, 1d818 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1d7d2:	2258      	movs	r2, #88	; 0x58
   1d7d4:	2100      	movs	r1, #0
   1d7d6:	f7fe ffbc 	bl	1c752 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1d7da:	4629      	mov	r1, r5
	s->sched = sched;
   1d7dc:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1d7de:	4630      	mov	r0, r6
   1d7e0:	f7e6 f8b8 	bl	3954 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1d7e4:	2210      	movs	r2, #16
   1d7e6:	2100      	movs	r1, #0
   1d7e8:	4620      	mov	r0, r4
   1d7ea:	f7fe ffb2 	bl	1c752 <_set>
	gf_double (s->K1, s->iv);
   1d7ee:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d7f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d7f4:	4621      	mov	r1, r4
   1d7f6:	4620      	mov	r0, r4
   1d7f8:	f7ff ff5c 	bl	1d6b4 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1d7fc:	4621      	mov	r1, r4
   1d7fe:	4628      	mov	r0, r5
   1d800:	f7ff ffae 	bl	1d760 <gf_double>
	gf_double (s->K2, s->K1);
   1d804:	4629      	mov	r1, r5
   1d806:	f104 0020 	add.w	r0, r4, #32
   1d80a:	f7ff ffa9 	bl	1d760 <gf_double>
	tc_cmac_init(s);
   1d80e:	4620      	mov	r0, r4
   1d810:	f7ff ffc3 	bl	1d79a <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1d814:	2001      	movs	r0, #1
}
   1d816:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1d818:	4608      	mov	r0, r1
   1d81a:	e7fc      	b.n	1d816 <tc_cmac_setup+0x50>

0001d81c <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1d81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d820:	460d      	mov	r5, r1
   1d822:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1d824:	4604      	mov	r4, r0
   1d826:	2800      	cmp	r0, #0
   1d828:	d061      	beq.n	1d8ee <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1d82a:	b912      	cbnz	r2, 1d832 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1d82c:	2001      	movs	r0, #1
}
   1d82e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1d832:	2900      	cmp	r1, #0
   1d834:	d05b      	beq.n	1d8ee <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   1d836:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   1d83a:	ea53 0102 	orrs.w	r1, r3, r2
   1d83e:	d056      	beq.n	1d8ee <tc_cmac_update+0xd2>
	s->countdown--;
   1d840:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   1d842:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   1d846:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   1d84a:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1d84e:	f1b8 0f00 	cmp.w	r8, #0
   1d852:	d02a      	beq.n	1d8aa <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1d854:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d858:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   1d85c:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d85e:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   1d860:	d208      	bcs.n	1d874 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1d862:	462a      	mov	r2, r5
   1d864:	4633      	mov	r3, r6
   1d866:	4631      	mov	r1, r6
   1d868:	f7fe ff66 	bl	1c738 <_copy>
			s->leftover_offset += data_length;
   1d86c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1d86e:	4432      	add	r2, r6
   1d870:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1d872:	e7db      	b.n	1d82c <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1d874:	463b      	mov	r3, r7
   1d876:	462a      	mov	r2, r5
   1d878:	4639      	mov	r1, r7
   1d87a:	f7fe ff5d 	bl	1c738 <_copy>
		data_length -= remaining_space;
   1d87e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1d880:	2300      	movs	r3, #0
   1d882:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1d884:	4446      	add	r6, r8
		data += remaining_space;
   1d886:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d888:	1e63      	subs	r3, r4, #1
   1d88a:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1d88e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d892:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d896:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1d898:	ea82 0200 	eor.w	r2, r2, r0
   1d89c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d89e:	d1f6      	bne.n	1d88e <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d8a0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d8a2:	4621      	mov	r1, r4
   1d8a4:	4620      	mov	r0, r4
   1d8a6:	f7ff ff05 	bl	1d6b4 <tc_aes_encrypt>
   1d8aa:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1d8ae:	2e10      	cmp	r6, #16
   1d8b0:	d80a      	bhi.n	1d8c8 <tc_cmac_update+0xac>
	if (data_length > 0) {
   1d8b2:	2e00      	cmp	r6, #0
   1d8b4:	d0ba      	beq.n	1d82c <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1d8b6:	4633      	mov	r3, r6
   1d8b8:	462a      	mov	r2, r5
   1d8ba:	4631      	mov	r1, r6
   1d8bc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1d8c0:	f7fe ff3a 	bl	1c738 <_copy>
		s->leftover_offset = data_length;
   1d8c4:	6466      	str	r6, [r4, #68]	; 0x44
   1d8c6:	e7b1      	b.n	1d82c <tc_cmac_update+0x10>
   1d8c8:	1e63      	subs	r3, r4, #1
   1d8ca:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1d8cc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d8d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d8d4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1d8d6:	ea82 0200 	eor.w	r2, r2, r0
   1d8da:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d8dc:	d1f6      	bne.n	1d8cc <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1d8de:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d8e0:	4621      	mov	r1, r4
   1d8e2:	4620      	mov	r0, r4
   1d8e4:	f7ff fee6 	bl	1d6b4 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1d8e8:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1d8ea:	3e10      	subs	r6, #16
   1d8ec:	e7df      	b.n	1d8ae <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   1d8ee:	2000      	movs	r0, #0
   1d8f0:	e79d      	b.n	1d82e <tc_cmac_update+0x12>

0001d8f2 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1d8f2:	b570      	push	{r4, r5, r6, lr}
   1d8f4:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1d8f6:	4605      	mov	r5, r0
   1d8f8:	b1e8      	cbz	r0, 1d936 <tc_cmac_final+0x44>
   1d8fa:	b369      	cbz	r1, 1d958 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1d8fc:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1d8fe:	2a10      	cmp	r2, #16
   1d900:	d11a      	bne.n	1d938 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1d902:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d904:	1e63      	subs	r3, r4, #1
   1d906:	3901      	subs	r1, #1
   1d908:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d90c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d910:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1d914:	4072      	eors	r2, r6
   1d916:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d91a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1d91c:	ea82 0206 	eor.w	r2, r2, r6
   1d920:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1d922:	d1f3      	bne.n	1d90c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1d924:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1d926:	4621      	mov	r1, r4
   1d928:	4628      	mov	r0, r5
   1d92a:	f7ff fec3 	bl	1d6b4 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1d92e:	4620      	mov	r0, r4
   1d930:	f7ff ff2b 	bl	1d78a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1d934:	2001      	movs	r0, #1
}
   1d936:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1d938:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1d93c:	2100      	movs	r1, #0
   1d93e:	f1c2 0210 	rsb	r2, r2, #16
   1d942:	4420      	add	r0, r4
   1d944:	f7fe ff05 	bl	1c752 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1d948:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1d94a:	4423      	add	r3, r4
   1d94c:	2280      	movs	r2, #128	; 0x80
   1d94e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1d952:	f104 0120 	add.w	r1, r4, #32
   1d956:	e7d5      	b.n	1d904 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1d958:	4608      	mov	r0, r1
   1d95a:	e7ec      	b.n	1d936 <tc_cmac_final+0x44>

0001d95c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1d95c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   1d95e:	6800      	ldr	r0, [r0, #0]
   1d960:	f7e6 b868 	b.w	3a34 <z_arm_fatal_error>

0001d964 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1d964:	2100      	movs	r1, #0
   1d966:	2001      	movs	r0, #1
   1d968:	f7e6 b864 	b.w	3a34 <z_arm_fatal_error>

0001d96c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1d96c:	b508      	push	{r3, lr}
	handler();
   1d96e:	f7e6 f8f1 	bl	3b54 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1d972:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1d976:	f7e6 b9cf 	b.w	3d18 <z_arm_exc_exit>

0001d97a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   1d97a:	3901      	subs	r1, #1
   1d97c:	4603      	mov	r3, r0
   1d97e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d982:	b90a      	cbnz	r2, 1d988 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   1d984:	701a      	strb	r2, [r3, #0]

	return dest;
}
   1d986:	4770      	bx	lr
		*d = *s;
   1d988:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   1d98c:	e7f7      	b.n	1d97e <strcpy+0x4>

0001d98e <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   1d98e:	b570      	push	{r4, r5, r6, lr}
   1d990:	4605      	mov	r5, r0
   1d992:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   1d994:	b142      	cbz	r2, 1d9a8 <strncpy+0x1a>
   1d996:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   1d99a:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   1d99c:	b92c      	cbnz	r4, 1d9aa <strncpy+0x1c>
   1d99e:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   1d9a0:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   1d9a4:	429a      	cmp	r2, r3
   1d9a6:	d1fb      	bne.n	1d9a0 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   1d9a8:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   1d9aa:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   1d9ae:	4632      	mov	r2, r6
   1d9b0:	e7ef      	b.n	1d992 <strncpy+0x4>

0001d9b2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1d9b2:	4603      	mov	r3, r0
	size_t n = 0;
   1d9b4:	2000      	movs	r0, #0

	while (*s != '\0') {
   1d9b6:	5c1a      	ldrb	r2, [r3, r0]
   1d9b8:	b902      	cbnz	r2, 1d9bc <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1d9ba:	4770      	bx	lr
		n++;
   1d9bc:	3001      	adds	r0, #1
   1d9be:	e7fa      	b.n	1d9b6 <strlen+0x4>

0001d9c0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   1d9c0:	4603      	mov	r3, r0
	size_t n = 0;
   1d9c2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   1d9c4:	5c1a      	ldrb	r2, [r3, r0]
   1d9c6:	b10a      	cbz	r2, 1d9cc <strnlen+0xc>
   1d9c8:	4288      	cmp	r0, r1
   1d9ca:	d100      	bne.n	1d9ce <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   1d9cc:	4770      	bx	lr
		n++;
   1d9ce:	3001      	adds	r0, #1
   1d9d0:	e7f8      	b.n	1d9c4 <strnlen+0x4>

0001d9d2 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1d9d2:	1e43      	subs	r3, r0, #1
   1d9d4:	3901      	subs	r1, #1
   1d9d6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1d9da:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1d9de:	4282      	cmp	r2, r0
   1d9e0:	d101      	bne.n	1d9e6 <strcmp+0x14>
   1d9e2:	2a00      	cmp	r2, #0
   1d9e4:	d1f7      	bne.n	1d9d6 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1d9e6:	1a10      	subs	r0, r2, r0
   1d9e8:	4770      	bx	lr

0001d9ea <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1d9ea:	b510      	push	{r4, lr}
   1d9ec:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1d9ee:	b15a      	cbz	r2, 1da08 <memcmp+0x1e>
   1d9f0:	3901      	subs	r1, #1
   1d9f2:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1d9f4:	f813 0b01 	ldrb.w	r0, [r3], #1
   1d9f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   1d9fc:	42a3      	cmp	r3, r4
   1d9fe:	d001      	beq.n	1da04 <memcmp+0x1a>
   1da00:	4290      	cmp	r0, r2
   1da02:	d0f7      	beq.n	1d9f4 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1da04:	1a80      	subs	r0, r0, r2
}
   1da06:	bd10      	pop	{r4, pc}
		return 0;
   1da08:	4610      	mov	r0, r2
   1da0a:	e7fc      	b.n	1da06 <memcmp+0x1c>

0001da0c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1da0c:	b510      	push	{r4, lr}
   1da0e:	1e43      	subs	r3, r0, #1
   1da10:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
   1da12:	4291      	cmp	r1, r2
   1da14:	d100      	bne.n	1da18 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1da16:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
   1da18:	f811 4b01 	ldrb.w	r4, [r1], #1
   1da1c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1da20:	e7f7      	b.n	1da12 <memcpy+0x6>

0001da22 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1da22:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
   1da24:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
   1da26:	4603      	mov	r3, r0
	while (n > 0) {
   1da28:	4293      	cmp	r3, r2
   1da2a:	d100      	bne.n	1da2e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1da2c:	4770      	bx	lr
		*(d_byte++) = c_byte;
   1da2e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1da32:	e7f9      	b.n	1da28 <memset+0x6>

0001da34 <_stdout_hook_default>:
}
   1da34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1da38:	4770      	bx	lr

0001da3a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   1da3a:	b084      	sub	sp, #16
   1da3c:	ab04      	add	r3, sp, #16
   1da3e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   1da42:	f89d 3004 	ldrb.w	r3, [sp, #4]
   1da46:	2b06      	cmp	r3, #6
   1da48:	d108      	bne.n	1da5c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   1da4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1da4e:	2201      	movs	r2, #1
   1da50:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   1da54:	f3bf 8f4f 	dsb	sy
        __WFE();
   1da58:	bf20      	wfe
    while (true)
   1da5a:	e7fd      	b.n	1da58 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   1da5c:	b004      	add	sp, #16
   1da5e:	4770      	bx	lr

0001da60 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   1da60:	b084      	sub	sp, #16
   1da62:	ab04      	add	r3, sp, #16
   1da64:	e903 0007 	stmdb	r3, {r0, r1, r2}
   1da68:	2300      	movs	r3, #0
   1da6a:	f383 8811 	msr	BASEPRI, r3
   1da6e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   1da72:	b004      	add	sp, #16
   1da74:	4770      	bx	lr

0001da76 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1da76:	b530      	push	{r4, r5, lr}
   1da78:	b085      	sub	sp, #20
   1da7a:	4604      	mov	r4, r0
   1da7c:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1da7e:	4668      	mov	r0, sp
   1da80:	2203      	movs	r2, #3
   1da82:	f7ff ffc3 	bl	1da0c <memcpy>
	(void)memset(res + 3, 0, 13);
   1da86:	220d      	movs	r2, #13
   1da88:	2100      	movs	r1, #0
   1da8a:	f10d 0003 	add.w	r0, sp, #3
   1da8e:	f7ff ffc8 	bl	1da22 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1da92:	4620      	mov	r0, r4
   1da94:	466a      	mov	r2, sp
   1da96:	4669      	mov	r1, sp
   1da98:	f7f0 fd2e 	bl	e4f8 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1da9c:	4604      	mov	r4, r0
   1da9e:	b920      	cbnz	r0, 1daaa <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1daa0:	2203      	movs	r2, #3
   1daa2:	4669      	mov	r1, sp
   1daa4:	4628      	mov	r0, r5
   1daa6:	f7ff ffb1 	bl	1da0c <memcpy>

	return 0;
}
   1daaa:	4620      	mov	r0, r4
   1daac:	b005      	add	sp, #20
   1daae:	bd30      	pop	{r4, r5, pc}

0001dab0 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1dab0:	b513      	push	{r0, r1, r4, lr}
   1dab2:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1dab4:	aa01      	add	r2, sp, #4
   1dab6:	3103      	adds	r1, #3
   1dab8:	f7ff ffdd 	bl	1da76 <ah>
	if (err) {
   1dabc:	b948      	cbnz	r0, 1dad2 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1dabe:	2203      	movs	r2, #3
   1dac0:	a901      	add	r1, sp, #4
   1dac2:	4620      	mov	r0, r4
   1dac4:	f7ff ff91 	bl	1d9ea <memcmp>
   1dac8:	fab0 f080 	clz	r0, r0
   1dacc:	0940      	lsrs	r0, r0, #5
}
   1dace:	b002      	add	sp, #8
   1dad0:	bd10      	pop	{r4, pc}
		return false;
   1dad2:	2000      	movs	r0, #0
   1dad4:	e7fb      	b.n	1dace <bt_rpa_irk_matches+0x1e>

0001dad6 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1dad6:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1dad8:	1cce      	adds	r6, r1, #3
{
   1dada:	4605      	mov	r5, r0
   1dadc:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1dade:	4630      	mov	r0, r6
   1dae0:	2103      	movs	r1, #3
   1dae2:	f7f0 fd07 	bl	e4f4 <bt_rand>
	if (err) {
   1dae6:	b960      	cbnz	r0, 1db02 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1dae8:	7963      	ldrb	r3, [r4, #5]
   1daea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1daee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1daf2:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1daf4:	4622      	mov	r2, r4
   1daf6:	4631      	mov	r1, r6
   1daf8:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1dafa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1dafe:	f7ff bfba 	b.w	1da76 <ah>
}
   1db02:	bd70      	pop	{r4, r5, r6, pc}

0001db04 <send_cmd_status>:
{
   1db04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1db08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1db0c:	4606      	mov	r6, r0
   1db0e:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1db10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1db14:	2100      	movs	r1, #0
   1db16:	200f      	movs	r0, #15
   1db18:	f7e6 ff2a 	bl	4970 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1db1c:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   1db1e:	f100 0808 	add.w	r8, r0, #8
   1db22:	4604      	mov	r4, r0
   1db24:	7507      	strb	r7, [r0, #20]
   1db26:	2102      	movs	r1, #2
   1db28:	4640      	mov	r0, r8
   1db2a:	f002 f8ce 	bl	1fcca <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1db2e:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1db30:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1db32:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1db34:	7041      	strb	r1, [r0, #1]
   1db36:	4640      	mov	r0, r8
   1db38:	f002 f8c7 	bl	1fcca <net_buf_simple_add>
	evt->ncmd = 1U;
   1db3c:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1db3e:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1db40:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1db42:	4620      	mov	r0, r4
}
   1db44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1db48:	f7e8 b840 	b.w	5bcc <bt_recv_prio>

0001db4c <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1db4c:	f101 0320 	add.w	r3, r1, #32
   1db50:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1db52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1db56:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1db5a:	428b      	cmp	r3, r1
   1db5c:	d1f9      	bne.n	1db52 <sys_memcpy_swap.constprop.0+0x6>
}
   1db5e:	4770      	bx	lr

0001db60 <bt_hci_ecc_supported_commands>:
	supported_commands[34] |= BIT(2);
   1db60:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
   1db64:	f043 0306 	orr.w	r3, r3, #6
   1db68:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
	supported_commands[41] |= BIT(2);
   1db6c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   1db70:	f043 0304 	orr.w	r3, r3, #4
   1db74:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
}
   1db78:	4770      	bx	lr

0001db7a <default_CSPRNG>:
{
   1db7a:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1db7c:	f7f0 fcba 	bl	e4f4 <bt_rand>
}
   1db80:	fab0 f080 	clz	r0, r0
   1db84:	0940      	lsrs	r0, r0, #5
   1db86:	bd08      	pop	{r3, pc}

0001db88 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1db88:	b510      	push	{r4, lr}
   1db8a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1db8c:	7801      	ldrb	r1, [r0, #0]
   1db8e:	7822      	ldrb	r2, [r4, #0]
   1db90:	428a      	cmp	r2, r1
{
   1db92:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1db94:	d00f      	beq.n	1dbb6 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   1db96:	4669      	mov	r1, sp
   1db98:	f7e6 fe7e 	bl	4898 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1db9c:	a905      	add	r1, sp, #20
   1db9e:	4620      	mov	r0, r4
   1dba0:	f7e6 fe7a 	bl	4898 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1dba4:	2210      	movs	r2, #16
   1dba6:	f10d 0115 	add.w	r1, sp, #21
   1dbaa:	f10d 0001 	add.w	r0, sp, #1
   1dbae:	f7ff ff1c 	bl	1d9ea <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   1dbb2:	b00a      	add	sp, #40	; 0x28
   1dbb4:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   1dbb6:	2a01      	cmp	r2, #1
   1dbb8:	d006      	beq.n	1dbc8 <bt_uuid_cmp+0x40>
   1dbba:	2a02      	cmp	r2, #2
   1dbbc:	d007      	beq.n	1dbce <bt_uuid_cmp+0x46>
   1dbbe:	b972      	cbnz	r2, 1dbde <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1dbc0:	8840      	ldrh	r0, [r0, #2]
   1dbc2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1dbc4:	1ac0      	subs	r0, r0, r3
   1dbc6:	e7f4      	b.n	1dbb2 <bt_uuid_cmp+0x2a>
   1dbc8:	6840      	ldr	r0, [r0, #4]
   1dbca:	6863      	ldr	r3, [r4, #4]
   1dbcc:	e7fa      	b.n	1dbc4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dbce:	2210      	movs	r2, #16
   1dbd0:	1c61      	adds	r1, r4, #1
   1dbd2:	3001      	adds	r0, #1
}
   1dbd4:	b00a      	add	sp, #40	; 0x28
   1dbd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1dbda:	f7ff bf06 	b.w	1d9ea <memcmp>
	switch (u1->type) {
   1dbde:	f06f 0015 	mvn.w	r0, #21
   1dbe2:	e7e6      	b.n	1dbb2 <bt_uuid_cmp+0x2a>

0001dbe4 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1dbe4:	2a04      	cmp	r2, #4
{
   1dbe6:	b510      	push	{r4, lr}
	switch (data_len) {
   1dbe8:	d00a      	beq.n	1dc00 <bt_uuid_create+0x1c>
   1dbea:	2a10      	cmp	r2, #16
   1dbec:	d00d      	beq.n	1dc0a <bt_uuid_create+0x26>
   1dbee:	2a02      	cmp	r2, #2
   1dbf0:	f04f 0300 	mov.w	r3, #0
   1dbf4:	d10f      	bne.n	1dc16 <bt_uuid_create+0x32>
	case BT_UUID_SIZE_16:
		uuid->type = BT_UUID_TYPE_16;
   1dbf6:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1dbf8:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1dbfa:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1dbfc:	2001      	movs	r0, #1
}
   1dbfe:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   1dc00:	2301      	movs	r3, #1
   1dc02:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1dc04:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1dc06:	6042      	str	r2, [r0, #4]
		break;
   1dc08:	e7f8      	b.n	1dbfc <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   1dc0a:	2302      	movs	r3, #2
   1dc0c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1dc10:	f7ff fefc 	bl	1da0c <memcpy>
		break;
   1dc14:	e7f2      	b.n	1dbfc <bt_uuid_create+0x18>
	switch (data_len) {
   1dc16:	4618      	mov	r0, r3
   1dc18:	e7f1      	b.n	1dbfe <bt_uuid_create+0x1a>

0001dc1a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   1dc1a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   1dc1c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1dc1e:	2106      	movs	r1, #6
{
   1dc20:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1dc22:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1dc26:	f7f0 fc65 	bl	e4f4 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   1dc2a:	b918      	cbnz	r0, 1dc34 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   1dc2c:	79a3      	ldrb	r3, [r4, #6]
   1dc2e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1dc32:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   1dc34:	bd10      	pop	{r4, pc}

0001dc36 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1dc36:	280f      	cmp	r0, #15
   1dc38:	d806      	bhi.n	1dc48 <bt_hci_evt_get_flags+0x12>
   1dc3a:	280d      	cmp	r0, #13
   1dc3c:	d80b      	bhi.n	1dc56 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1dc3e:	2805      	cmp	r0, #5
   1dc40:	bf14      	ite	ne
   1dc42:	2002      	movne	r0, #2
   1dc44:	2003      	moveq	r0, #3
   1dc46:	4770      	bx	lr
	switch (evt) {
   1dc48:	2813      	cmp	r0, #19
   1dc4a:	d004      	beq.n	1dc56 <bt_hci_evt_get_flags+0x20>
   1dc4c:	281a      	cmp	r0, #26
   1dc4e:	bf14      	ite	ne
   1dc50:	2002      	movne	r0, #2
   1dc52:	2001      	moveq	r0, #1
   1dc54:	4770      	bx	lr
   1dc56:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1dc58:	4770      	bx	lr

0001dc5a <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1dc5a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1dc5e:	b193      	cbz	r3, 1dc86 <update_sec_level+0x2c>
   1dc60:	7b5a      	ldrb	r2, [r3, #13]
   1dc62:	07d1      	lsls	r1, r2, #31
   1dc64:	d50f      	bpl.n	1dc86 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1dc66:	06d2      	lsls	r2, r2, #27
   1dc68:	d50b      	bpl.n	1dc82 <update_sec_level+0x28>
   1dc6a:	7b1b      	ldrb	r3, [r3, #12]
   1dc6c:	2b10      	cmp	r3, #16
   1dc6e:	d108      	bne.n	1dc82 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   1dc70:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1dc72:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   1dc74:	7a82      	ldrb	r2, [r0, #10]
   1dc76:	7a40      	ldrb	r0, [r0, #9]
}
   1dc78:	4282      	cmp	r2, r0
   1dc7a:	bf8c      	ite	hi
   1dc7c:	2000      	movhi	r0, #0
   1dc7e:	2001      	movls	r0, #1
   1dc80:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   1dc82:	2303      	movs	r3, #3
   1dc84:	e7f5      	b.n	1dc72 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   1dc86:	2302      	movs	r3, #2
   1dc88:	e7f3      	b.n	1dc72 <update_sec_level+0x18>

0001dc8a <sys_put_le64>:
	dst[1] = val >> 8;
   1dc8a:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1dc8e:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1dc90:	0e00      	lsrs	r0, r0, #24
   1dc92:	7053      	strb	r3, [r2, #1]
   1dc94:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1dc96:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1dc98:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1dc9c:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1dc9e:	7093      	strb	r3, [r2, #2]
   1dca0:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1dca2:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1dca4:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1dca6:	71d1      	strb	r1, [r2, #7]
}
   1dca8:	4770      	bx	lr

0001dcaa <bt_hci_disconnect>:
{
   1dcaa:	b570      	push	{r4, r5, r6, lr}
   1dcac:	4606      	mov	r6, r0
   1dcae:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1dcb0:	f240 4006 	movw	r0, #1030	; 0x406
   1dcb4:	2103      	movs	r1, #3
   1dcb6:	f7e7 fa51 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1dcba:	4604      	mov	r4, r0
   1dcbc:	b168      	cbz	r0, 1dcda <bt_hci_disconnect+0x30>
   1dcbe:	2103      	movs	r1, #3
   1dcc0:	3008      	adds	r0, #8
   1dcc2:	f002 f802 	bl	1fcca <net_buf_simple_add>
	disconn->reason = reason;
   1dcc6:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1dcc8:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dcca:	4621      	mov	r1, r4
   1dccc:	2200      	movs	r2, #0
}
   1dcce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   1dcd2:	f240 4006 	movw	r0, #1030	; 0x406
   1dcd6:	f7e7 bc03 	b.w	54e0 <bt_hci_cmd_send_sync>
}
   1dcda:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dcde:	bd70      	pop	{r4, r5, r6, pc}

0001dce0 <bt_le_set_data_len>:
{
   1dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1dce2:	4607      	mov	r7, r0
   1dce4:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1dce6:	f242 0022 	movw	r0, #8226	; 0x2022
   1dcea:	2106      	movs	r1, #6
{
   1dcec:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1dcee:	f7e7 fa35 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1dcf2:	4604      	mov	r4, r0
   1dcf4:	b170      	cbz	r0, 1dd14 <bt_le_set_data_len+0x34>
   1dcf6:	2106      	movs	r1, #6
   1dcf8:	3008      	adds	r0, #8
   1dcfa:	f001 ffe6 	bl	1fcca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dcfe:	883b      	ldrh	r3, [r7, #0]
   1dd00:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1dd02:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1dd04:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1dd06:	4621      	mov	r1, r4
   1dd08:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1dd0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1dd10:	f7e7 ba5e 	b.w	51d0 <bt_hci_cmd_send>
}
   1dd14:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dd18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001dd1a <bt_le_set_phy>:
{
   1dd1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1dd1e:	4680      	mov	r8, r0
   1dd20:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1dd22:	f242 0032 	movw	r0, #8242	; 0x2032
   1dd26:	2107      	movs	r1, #7
{
   1dd28:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1dd2c:	4616      	mov	r6, r2
   1dd2e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1dd30:	f7e7 fa14 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1dd34:	4604      	mov	r4, r0
   1dd36:	b190      	cbz	r0, 1dd5e <bt_le_set_phy+0x44>
   1dd38:	2107      	movs	r1, #7
   1dd3a:	3008      	adds	r0, #8
   1dd3c:	f001 ffc5 	bl	1fcca <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dd40:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1dd44:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1dd46:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1dd48:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1dd4a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1dd4c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1dd50:	4621      	mov	r1, r4
   1dd52:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1dd56:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1dd5a:	f7e7 ba39 	b.w	51d0 <bt_hci_cmd_send>
}
   1dd5e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1dd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001dd66 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   1dd66:	6880      	ldr	r0, [r0, #8]
   1dd68:	f7e7 bc6c 	b.w	5644 <bt_hci_le_enh_conn_complete>

0001dd6c <le_legacy_conn_complete>:
{
   1dd6c:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   1dd6e:	6881      	ldr	r1, [r0, #8]
{
   1dd70:	b08a      	sub	sp, #40	; 0x28
	enh.status         = evt->status;
   1dd72:	780b      	ldrb	r3, [r1, #0]
   1dd74:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   1dd78:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   1dd7c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   1dd80:	78cb      	ldrb	r3, [r1, #3]
   1dd82:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   1dd86:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   1dd8a:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   1dd8e:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   1dd92:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   1dd96:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   1dd9a:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   1dd9e:	7c4b      	ldrb	r3, [r1, #17]
   1dda0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	memcpy(dst, src, sizeof(*dst));
   1dda4:	2207      	movs	r2, #7
   1dda6:	3104      	adds	r1, #4
   1dda8:	a803      	add	r0, sp, #12
   1ddaa:	f7ff fe2f 	bl	1da0c <memcpy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   1ddae:	2400      	movs	r4, #0
	memcpy(dst, src, sizeof(*dst));
   1ddb0:	4669      	mov	r1, sp
   1ddb2:	2206      	movs	r2, #6
   1ddb4:	f10d 0013 	add.w	r0, sp, #19
   1ddb8:	9400      	str	r4, [sp, #0]
   1ddba:	f8ad 4004 	strh.w	r4, [sp, #4]
   1ddbe:	f7ff fe25 	bl	1da0c <memcpy>
   1ddc2:	2206      	movs	r2, #6
   1ddc4:	4669      	mov	r1, sp
   1ddc6:	f10d 0019 	add.w	r0, sp, #25
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   1ddca:	9400      	str	r4, [sp, #0]
   1ddcc:	f8ad 4004 	strh.w	r4, [sp, #4]
   1ddd0:	f7ff fe1c 	bl	1da0c <memcpy>
	bt_hci_le_enh_conn_complete(evt);
   1ddd4:	a802      	add	r0, sp, #8
   1ddd6:	f7e7 fc35 	bl	5644 <bt_hci_le_enh_conn_complete>
}
   1ddda:	b00a      	add	sp, #40	; 0x28
   1dddc:	bd10      	pop	{r4, pc}

0001ddde <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1ddde:	8803      	ldrh	r3, [r0, #0]
   1dde0:	8842      	ldrh	r2, [r0, #2]
   1dde2:	4293      	cmp	r3, r2
{
   1dde4:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1dde6:	d819      	bhi.n	1de1c <bt_le_conn_params_valid+0x3e>
   1dde8:	2b05      	cmp	r3, #5
   1ddea:	d917      	bls.n	1de1c <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1ddec:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   1ddf0:	d814      	bhi.n	1de1c <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   1ddf2:	8883      	ldrh	r3, [r0, #4]
   1ddf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1ddf8:	d210      	bcs.n	1de1c <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1ddfa:	88c0      	ldrh	r0, [r0, #6]
   1ddfc:	f1a0 010a 	sub.w	r1, r0, #10
   1de00:	b289      	uxth	r1, r1
   1de02:	f640 4476 	movw	r4, #3190	; 0xc76
   1de06:	42a1      	cmp	r1, r4
   1de08:	d808      	bhi.n	1de1c <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   1de0a:	3301      	adds	r3, #1
   1de0c:	b29b      	uxth	r3, r3
   1de0e:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   1de10:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   1de14:	bf34      	ite	cc
   1de16:	2001      	movcc	r0, #1
   1de18:	2000      	movcs	r0, #0
}
   1de1a:	bd10      	pop	{r4, pc}
		return false;
   1de1c:	2000      	movs	r0, #0
   1de1e:	e7fc      	b.n	1de1a <bt_le_conn_params_valid+0x3c>

0001de20 <bt_send>:
		return bt_hci_ecc_send(buf);
   1de20:	f7e6 bca8 	b.w	4774 <bt_hci_ecc_send>

0001de24 <bt_addr_le_is_bonded>:

bool bt_addr_le_is_bonded(uint8_t id, const bt_addr_le_t *addr)
{
   1de24:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_BT_SMP)) {
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1de26:	f7ed fc3b 	bl	b6a0 <bt_keys_find_addr>

		/* if there are any keys stored then device is bonded */
		return keys && keys->keys;
   1de2a:	b118      	cbz	r0, 1de34 <bt_addr_le_is_bonded+0x10>
   1de2c:	89c0      	ldrh	r0, [r0, #14]
   1de2e:	3800      	subs	r0, #0
   1de30:	bf18      	it	ne
   1de32:	2001      	movne	r0, #1
	} else {
		return false;
	}
}
   1de34:	bd08      	pop	{r3, pc}

0001de36 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1de36:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1de38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1de3c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1de3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de42:	2100      	movs	r1, #0
{
   1de44:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1de46:	f7e6 fd93 	bl	4970 <bt_buf_get_evt>
   1de4a:	2102      	movs	r1, #2
   1de4c:	4604      	mov	r4, r0
   1de4e:	3008      	adds	r0, #8
   1de50:	f001 ff3b 	bl	1fcca <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   1de54:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1de56:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1de58:	4620      	mov	r0, r4
   1de5a:	bd70      	pop	{r4, r5, r6, pc}

0001de5c <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1de5c:	3103      	adds	r1, #3
{
   1de5e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1de60:	b2c9      	uxtb	r1, r1
{
   1de62:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1de64:	200e      	movs	r0, #14
   1de66:	f7ff ffe6 	bl	1de36 <bt_hci_evt_create>
   1de6a:	2103      	movs	r1, #3
   1de6c:	4604      	mov	r4, r0
   1de6e:	3008      	adds	r0, #8
   1de70:	f001 ff2b 	bl	1fcca <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   1de74:	2301      	movs	r3, #1
   1de76:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1de78:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1de7c:	4620      	mov	r0, r4
   1de7e:	bd38      	pop	{r3, r4, r5, pc}

0001de80 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1de80:	b570      	push	{r4, r5, r6, lr}
   1de82:	4605      	mov	r5, r0
   1de84:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1de86:	200f      	movs	r0, #15
   1de88:	2104      	movs	r1, #4
   1de8a:	f7ff ffd4 	bl	1de36 <bt_hci_evt_create>
   1de8e:	2104      	movs	r1, #4
   1de90:	4604      	mov	r4, r0
   1de92:	3008      	adds	r0, #8
   1de94:	f001 ff19 	bl	1fcca <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   1de98:	2201      	movs	r2, #1
	cs->status = status;
   1de9a:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1de9c:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1de9e:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1dea0:	4620      	mov	r0, r4
   1dea2:	bd70      	pop	{r4, r5, r6, pc}

0001dea4 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1dea4:	2207      	movs	r2, #7
   1dea6:	f7ff bdb1 	b.w	1da0c <memcpy>

0001deaa <hci_id_add.constprop.0>:
static int hci_id_add(uint8_t id, const bt_addr_le_t *addr, uint8_t peer_irk[16])
   1deaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1deac:	4607      	mov	r7, r0
   1deae:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
   1deb0:	f242 0027 	movw	r0, #8231	; 0x2027
   1deb4:	2127      	movs	r1, #39	; 0x27
   1deb6:	f7e7 f951 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1deba:	4604      	mov	r4, r0
   1debc:	b1d0      	cbz	r0, 1def4 <hci_id_add.constprop.0+0x4a>
   1debe:	2127      	movs	r1, #39	; 0x27
   1dec0:	3008      	adds	r0, #8
   1dec2:	f001 ff02 	bl	1fcca <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
   1dec6:	4639      	mov	r1, r7
   1dec8:	4605      	mov	r5, r0
   1deca:	f7ff ffeb 	bl	1dea4 <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
   1dece:	4631      	mov	r1, r6
   1ded0:	2210      	movs	r2, #16
   1ded2:	1de8      	adds	r0, r5, #7
   1ded4:	f7ff fd9a 	bl	1da0c <memcpy>
	(void)memset(cp->local_irk, 0, 16);
   1ded8:	2210      	movs	r2, #16
   1deda:	2100      	movs	r1, #0
   1dedc:	f105 0017 	add.w	r0, r5, #23
   1dee0:	f7ff fd9f 	bl	1da22 <memset>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1dee4:	4621      	mov	r1, r4
   1dee6:	2200      	movs	r2, #0
}
   1dee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
   1deec:	f242 0027 	movw	r0, #8231	; 0x2027
   1def0:	f7e7 baf6 	b.w	54e0 <bt_hci_cmd_send_sync>
}
   1def4:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1def8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001defa <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1defa:	7a03      	ldrb	r3, [r0, #8]
   1defc:	075b      	lsls	r3, r3, #29
   1defe:	d504      	bpl.n	1df0a <keys_add_id+0x10>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1df00:	f100 012a 	add.w	r1, r0, #42	; 0x2a
   1df04:	3001      	adds	r0, #1
   1df06:	f7ff bfd0 	b.w	1deaa <hci_id_add.constprop.0>
}
   1df0a:	4770      	bx	lr

0001df0c <adv_unpause_enabled>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df0c:	f100 0310 	add.w	r3, r0, #16
   1df10:	f3bf 8f5b 	dmb	ish
   1df14:	e853 2f00 	ldrex	r2, [r3]
   1df18:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   1df1c:	e843 1c00 	strex	ip, r1, [r3]
   1df20:	f1bc 0f00 	cmp.w	ip, #0
   1df24:	d1f6      	bne.n	1df14 <adv_unpause_enabled+0x8>
   1df26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1df2a:	0493      	lsls	r3, r2, #18
   1df2c:	d502      	bpl.n	1df34 <adv_unpause_enabled+0x28>
		bt_le_adv_set_enable(adv, true);
   1df2e:	2101      	movs	r1, #1
   1df30:	f000 b93f 	b.w	1e1b2 <bt_le_adv_set_enable>
}
   1df34:	4770      	bx	lr

0001df36 <addr_res_enable>:
{
   1df36:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1df38:	2101      	movs	r1, #1
{
   1df3a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1df3c:	f242 002d 	movw	r0, #8237	; 0x202d
   1df40:	f7e7 f90c 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1df44:	4604      	mov	r4, r0
   1df46:	b158      	cbz	r0, 1df60 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   1df48:	4629      	mov	r1, r5
   1df4a:	3008      	adds	r0, #8
   1df4c:	f001 fecc 	bl	1fce8 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1df50:	4621      	mov	r1, r4
   1df52:	2200      	movs	r2, #0
}
   1df54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1df58:	f242 002d 	movw	r0, #8237	; 0x202d
   1df5c:	f7e7 bac0 	b.w	54e0 <bt_hci_cmd_send_sync>
}
   1df60:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1df64:	bd38      	pop	{r3, r4, r5, pc}

0001df66 <adv_pause_enabled>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1df66:	f3bf 8f5b 	dmb	ish
   1df6a:	6903      	ldr	r3, [r0, #16]
   1df6c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1df70:	065b      	lsls	r3, r3, #25
   1df72:	f100 0210 	add.w	r2, r0, #16
   1df76:	d50e      	bpl.n	1df96 <adv_pause_enabled+0x30>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1df78:	f3bf 8f5b 	dmb	ish
   1df7c:	e852 3f00 	ldrex	r3, [r2]
   1df80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   1df84:	e842 3100 	strex	r1, r3, [r2]
   1df88:	2900      	cmp	r1, #0
   1df8a:	d1f7      	bne.n	1df7c <adv_pause_enabled+0x16>
   1df8c:	f3bf 8f5b 	dmb	ish
		bt_le_adv_set_enable(adv, false);
   1df90:	2100      	movs	r1, #0
   1df92:	f000 b90e 	b.w	1e1b2 <bt_le_adv_set_enable>
}
   1df96:	4770      	bx	lr

0001df98 <bt_lookup_id_addr>:
{
   1df98:	b510      	push	{r4, lr}
   1df9a:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1df9c:	f7ed fb48 	bl	b630 <bt_keys_find_irk>
		if (keys) {
   1dfa0:	b100      	cbz	r0, 1dfa4 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1dfa2:	1c44      	adds	r4, r0, #1
}
   1dfa4:	4620      	mov	r0, r4
   1dfa6:	bd10      	pop	{r4, pc}

0001dfa8 <bt_id_set_adv_private_addr>:
{
   1dfa8:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   1dfaa:	2106      	movs	r1, #6
   1dfac:	4668      	mov	r0, sp
   1dfae:	f7f0 faa1 	bl	e4f4 <bt_rand>
	if (err) {
   1dfb2:	b940      	cbnz	r0, 1dfc6 <bt_id_set_adv_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   1dfb4:	f89d 3005 	ldrb.w	r3, [sp, #5]
		return set_random_address(addr);
   1dfb8:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   1dfba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1dfbe:	f88d 3005 	strb.w	r3, [sp, #5]
		return set_random_address(addr);
   1dfc2:	f7e7 ff6d 	bl	5ea0 <set_random_address>
}
   1dfc6:	b003      	add	sp, #12
   1dfc8:	f85d fb04 	ldr.w	pc, [sp], #4

0001dfcc <bt_id_adv_random_addr_check>:
}
   1dfcc:	2001      	movs	r0, #1
   1dfce:	4770      	bx	lr

0001dfd0 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1dfd0:	7a03      	ldrb	r3, [r0, #8]
   1dfd2:	07d9      	lsls	r1, r3, #31
   1dfd4:	d504      	bpl.n	1dfe0 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1dfd6:	f023 0301 	bic.w	r3, r3, #1
   1dfda:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1dfdc:	f7e7 bfd4 	b.w	5f88 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1dfe0:	0799      	lsls	r1, r3, #30
   1dfe2:	d504      	bpl.n	1dfee <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1dfe4:	f023 0302 	bic.w	r3, r3, #2
   1dfe8:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1dfea:	f7e8 b8a3 	b.w	6134 <bt_id_del>
}
   1dfee:	4770      	bx	lr

0001dff0 <get_adv_channel_map>:
{
   1dff0:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   1dff2:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1dff6:	bf0c      	ite	eq
   1dff8:	2007      	moveq	r0, #7
   1dffa:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   1dffc:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   1dffe:	bf48      	it	mi
   1e000:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   1e004:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   1e006:	bf48      	it	mi
   1e008:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   1e00c:	4770      	bx	lr

0001e00e <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e00e:	f3bf 8f5b 	dmb	ish
   1e012:	6800      	ldr	r0, [r0, #0]
   1e014:	f3bf 8f5b 	dmb	ish
}
   1e018:	4770      	bx	lr

0001e01a <atomic_and>:
{
   1e01a:	4603      	mov	r3, r0
}
   1e01c:	f3bf 8f5b 	dmb	ish
   1e020:	e853 0f00 	ldrex	r0, [r3]
   1e024:	ea00 0201 	and.w	r2, r0, r1
   1e028:	e843 2c00 	strex	ip, r2, [r3]
   1e02c:	f1bc 0f00 	cmp.w	ip, #0
   1e030:	d1f6      	bne.n	1e020 <atomic_and+0x6>
   1e032:	f3bf 8f5b 	dmb	ish
   1e036:	4770      	bx	lr

0001e038 <atomic_set_bit_to>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e038:	2301      	movs	r3, #1
{
   1e03a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1e03c:	fa03 f101 	lsl.w	r1, r3, r1
{
   1e040:	4604      	mov	r4, r0
	if (val) {
   1e042:	b162      	cbz	r2, 1e05e <atomic_set_bit_to+0x26>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e044:	f3bf 8f5b 	dmb	ish
   1e048:	e854 3f00 	ldrex	r3, [r4]
   1e04c:	430b      	orrs	r3, r1
   1e04e:	e844 3200 	strex	r2, r3, [r4]
   1e052:	2a00      	cmp	r2, #0
   1e054:	d1f8      	bne.n	1e048 <atomic_set_bit_to+0x10>
   1e056:	f3bf 8f5b 	dmb	ish
	}
}
   1e05a:	bc10      	pop	{r4}
   1e05c:	4770      	bx	lr
   1e05e:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e060:	43c9      	mvns	r1, r1
   1e062:	f7ff bfda 	b.w	1e01a <atomic_and>

0001e066 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e06a:	b087      	sub	sp, #28
   1e06c:	4605      	mov	r5, r0
   1e06e:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
   1e072:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
   1e076:	f89d 804c 	ldrb.w	r8, [sp, #76]	; 0x4c
   1e07a:	460c      	mov	r4, r1
   1e07c:	4693      	mov	fp, r2
	struct bt_ad d[2] = {};
   1e07e:	2100      	movs	r1, #0
   1e080:	2210      	movs	r2, #16
   1e082:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
   1e084:	461e      	mov	r6, r3
	struct bt_ad d[2] = {};
   1e086:	f7ff fccc 	bl	1da22 <memset>
	if (use_name) {
   1e08a:	b187      	cbz	r7, 1e0ae <le_adv_update.constprop.0+0x48>
		const char *name = bt_get_name();
   1e08c:	f7e7 feea 	bl	5e64 <bt_get_name>
   1e090:	4681      	mov	r9, r0
		if ((ad && ad_has_name(ad, ad_len)) ||
   1e092:	2c00      	cmp	r4, #0
   1e094:	d13e      	bne.n	1e114 <le_adv_update.constprop.0+0xae>
   1e096:	2e00      	cmp	r6, #0
   1e098:	d148      	bne.n	1e12c <le_adv_update.constprop.0+0xc6>
		data = (struct bt_data)BT_DATA(
   1e09a:	4648      	mov	r0, r9
   1e09c:	f7ff fc89 	bl	1d9b2 <strlen>
   1e0a0:	2209      	movs	r2, #9
   1e0a2:	f88d 2000 	strb.w	r2, [sp]
   1e0a6:	f88d 0001 	strb.w	r0, [sp, #1]
   1e0aa:	f8cd 9004 	str.w	r9, [sp, #4]
		d[0].len = ad_len;
   1e0ae:	e9cd 4b02 	strd	r4, fp, [sp, #8]
		if (use_name && (!scannable || force_name_in_ad)) {
   1e0b2:	2f00      	cmp	r7, #0
   1e0b4:	d03c      	beq.n	1e130 <le_adv_update.constprop.0+0xca>
   1e0b6:	f1ba 0f00 	cmp.w	sl, #0
   1e0ba:	d002      	beq.n	1e0c2 <le_adv_update.constprop.0+0x5c>
   1e0bc:	f1b8 0f00 	cmp.w	r8, #0
   1e0c0:	d036      	beq.n	1e130 <le_adv_update.constprop.0+0xca>
			d[1].len = 1;
   1e0c2:	2301      	movs	r3, #1
			d[1].data = &data;
   1e0c4:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e0c8:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1e0ca:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
   1e0cc:	a902      	add	r1, sp, #8
   1e0ce:	f242 0008 	movw	r0, #8200	; 0x2008
   1e0d2:	f7e8 fadb 	bl	668c <hci_set_ad>
		if (err) {
   1e0d6:	4604      	mov	r4, r0
   1e0d8:	b978      	cbnz	r0, 1e0fa <le_adv_update.constprop.0+0x94>
	if (scannable) {
   1e0da:	f1ba 0f00 	cmp.w	sl, #0
   1e0de:	d129      	bne.n	1e134 <le_adv_update.constprop.0+0xce>
   1e0e0:	3510      	adds	r5, #16
   1e0e2:	f3bf 8f5b 	dmb	ish
   1e0e6:	e855 3f00 	ldrex	r3, [r5]
   1e0ea:	f043 0304 	orr.w	r3, r3, #4
   1e0ee:	e845 3200 	strex	r2, r3, [r5]
   1e0f2:	2a00      	cmp	r2, #0
   1e0f4:	d1f7      	bne.n	1e0e6 <le_adv_update.constprop.0+0x80>
   1e0f6:	f3bf 8f5b 	dmb	ish
}
   1e0fa:	4620      	mov	r0, r4
   1e0fc:	b007      	add	sp, #28
   1e0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e102:	f814 1032 	ldrb.w	r1, [r4, r2, lsl #3]
   1e106:	3908      	subs	r1, #8
   1e108:	2901      	cmp	r1, #1
   1e10a:	d92a      	bls.n	1e162 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1e10c:	3201      	adds	r2, #1
   1e10e:	4593      	cmp	fp, r2
   1e110:	d1f7      	bne.n	1e102 <le_adv_update.constprop.0+0x9c>
   1e112:	e7c0      	b.n	1e096 <le_adv_update.constprop.0+0x30>
   1e114:	2200      	movs	r2, #0
   1e116:	e7fa      	b.n	1e10e <le_adv_update.constprop.0+0xa8>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
   1e118:	f816 1032 	ldrb.w	r1, [r6, r2, lsl #3]
   1e11c:	3908      	subs	r1, #8
   1e11e:	2901      	cmp	r1, #1
   1e120:	d91f      	bls.n	1e162 <le_adv_update.constprop.0+0xfc>
	for (i = 0; i < ad_len; i++) {
   1e122:	3201      	adds	r2, #1
   1e124:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1e126:	4293      	cmp	r3, r2
   1e128:	d1f6      	bne.n	1e118 <le_adv_update.constprop.0+0xb2>
   1e12a:	e7b6      	b.n	1e09a <le_adv_update.constprop.0+0x34>
   1e12c:	2200      	movs	r2, #0
   1e12e:	e7f9      	b.n	1e124 <le_adv_update.constprop.0+0xbe>
		d_len = 1;
   1e130:	2201      	movs	r2, #1
   1e132:	e7cb      	b.n	1e0cc <le_adv_update.constprop.0+0x66>
		d[0].len = sd_len;
   1e134:	9b10      	ldr	r3, [sp, #64]	; 0x40
		d[0].data = sd;
   1e136:	9602      	str	r6, [sp, #8]
		d[0].len = sd_len;
   1e138:	9303      	str	r3, [sp, #12]
		if (use_name && !force_name_in_ad) {
   1e13a:	b187      	cbz	r7, 1e15e <le_adv_update.constprop.0+0xf8>
   1e13c:	f1b8 0f00 	cmp.w	r8, #0
   1e140:	d10d      	bne.n	1e15e <le_adv_update.constprop.0+0xf8>
			d[1].len = 1;
   1e142:	2301      	movs	r3, #1
			d[1].data = &data;
   1e144:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
   1e148:	9305      	str	r3, [sp, #20]
			d_len = 2;
   1e14a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
   1e14c:	a902      	add	r1, sp, #8
   1e14e:	f242 0009 	movw	r0, #8201	; 0x2009
   1e152:	f7e8 fa9b 	bl	668c <hci_set_ad>
		if (err) {
   1e156:	2800      	cmp	r0, #0
   1e158:	d0c2      	beq.n	1e0e0 <le_adv_update.constprop.0+0x7a>
   1e15a:	4604      	mov	r4, r0
   1e15c:	e7cd      	b.n	1e0fa <le_adv_update.constprop.0+0x94>
		d_len = 1;
   1e15e:	2201      	movs	r2, #1
   1e160:	e7f4      	b.n	1e14c <le_adv_update.constprop.0+0xe6>
			return -EINVAL;
   1e162:	f06f 0415 	mvn.w	r4, #21
   1e166:	e7c8      	b.n	1e0fa <le_adv_update.constprop.0+0x94>

0001e168 <bt_le_adv_set_enable_legacy>:
{
   1e168:	b570      	push	{r4, r5, r6, lr}
   1e16a:	4606      	mov	r6, r0
   1e16c:	b086      	sub	sp, #24
   1e16e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
   1e170:	f242 000a 	movw	r0, #8202	; 0x200a
   1e174:	2101      	movs	r1, #1
   1e176:	f7e6 fff1 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1e17a:	4604      	mov	r4, r0
   1e17c:	b1b0      	cbz	r0, 1e1ac <bt_le_adv_set_enable_legacy+0x44>
   1e17e:	3008      	adds	r0, #8
	if (enable) {
   1e180:	b195      	cbz	r5, 1e1a8 <bt_le_adv_set_enable_legacy+0x40>
   1e182:	2101      	movs	r1, #1
   1e184:	f001 fdb0 	bl	1fce8 <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(buf, &state, adv->flags, BT_ADV_ENABLED, enable);
   1e188:	f106 0210 	add.w	r2, r6, #16
   1e18c:	a903      	add	r1, sp, #12
   1e18e:	4620      	mov	r0, r4
   1e190:	9500      	str	r5, [sp, #0]
   1e192:	2306      	movs	r3, #6
   1e194:	f7e6 ffd0 	bl	5138 <bt_hci_cmd_state_set_init>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
   1e198:	2200      	movs	r2, #0
   1e19a:	4621      	mov	r1, r4
   1e19c:	f242 000a 	movw	r0, #8202	; 0x200a
   1e1a0:	f7e7 f99e 	bl	54e0 <bt_hci_cmd_send_sync>
}
   1e1a4:	b006      	add	sp, #24
   1e1a6:	bd70      	pop	{r4, r5, r6, pc}
   1e1a8:	4629      	mov	r1, r5
   1e1aa:	e7eb      	b.n	1e184 <bt_le_adv_set_enable_legacy+0x1c>
		return -ENOBUFS;
   1e1ac:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e1b0:	e7f8      	b.n	1e1a4 <bt_le_adv_set_enable_legacy+0x3c>

0001e1b2 <bt_le_adv_set_enable>:
	return bt_le_adv_set_enable_legacy(adv, enable);
   1e1b2:	f7ff bfd9 	b.w	1e168 <bt_le_adv_set_enable_legacy>

0001e1b6 <atomic_and>:
{
   1e1b6:	4603      	mov	r3, r0
}
   1e1b8:	f3bf 8f5b 	dmb	ish
   1e1bc:	e853 0f00 	ldrex	r0, [r3]
   1e1c0:	ea00 0201 	and.w	r2, r0, r1
   1e1c4:	e843 2c00 	strex	ip, r2, [r3]
   1e1c8:	f1bc 0f00 	cmp.w	ip, #0
   1e1cc:	d1f6      	bne.n	1e1bc <atomic_and+0x6>
   1e1ce:	f3bf 8f5b 	dmb	ish
   1e1d2:	4770      	bx	lr

0001e1d4 <tx_notify>:
{
   1e1d4:	b570      	push	{r4, r5, r6, lr}
   1e1d6:	4604      	mov	r4, r0
	__asm__ volatile(
   1e1d8:	f04f 0220 	mov.w	r2, #32
   1e1dc:	f3ef 8311 	mrs	r3, BASEPRI
   1e1e0:	f382 8812 	msr	BASEPRI_MAX, r2
   1e1e4:	f3bf 8f6f 	isb	sy
	return list->head;
   1e1e8:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1e1ea:	b920      	cbnz	r0, 1e1f6 <tx_notify+0x22>
	__asm__ volatile(
   1e1ec:	f383 8811 	msr	BASEPRI, r3
   1e1f0:	f3bf 8f6f 	isb	sy
}
   1e1f4:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e1f6:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   1e1f8:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e1fa:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e1fc:	4288      	cmp	r0, r1
	list->tail = node;
   1e1fe:	bf08      	it	eq
   1e200:	6262      	streq	r2, [r4, #36]	; 0x24
   1e202:	f383 8811 	msr	BASEPRI, r3
   1e206:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1e20a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1e20e:	f7e8 fdd9 	bl	6dc4 <tx_free>
		cb(conn, user_data);
   1e212:	4631      	mov	r1, r6
   1e214:	4620      	mov	r0, r4
   1e216:	47a8      	blx	r5
	while (1) {
   1e218:	e7de      	b.n	1e1d8 <tx_notify+0x4>

0001e21a <tx_complete_work>:
	tx_notify(conn);
   1e21a:	3828      	subs	r0, #40	; 0x28
   1e21c:	f7ff bfda 	b.w	1e1d4 <tx_notify>

0001e220 <bt_conn_reset_rx_state>:
{
   1e220:	b510      	push	{r4, lr}
   1e222:	4604      	mov	r4, r0
	if (!conn->rx) {
   1e224:	6900      	ldr	r0, [r0, #16]
   1e226:	b118      	cbz	r0, 1e230 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1e228:	f7fa fe66 	bl	18ef8 <net_buf_unref>
	conn->rx = NULL;
   1e22c:	2300      	movs	r3, #0
   1e22e:	6123      	str	r3, [r4, #16]
}
   1e230:	bd10      	pop	{r4, pc}

0001e232 <conn_cleanup>:
{
   1e232:	b570      	push	{r4, r5, r6, lr}
   1e234:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1e236:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1e23a:	2200      	movs	r2, #0
   1e23c:	2300      	movs	r3, #0
   1e23e:	4630      	mov	r0, r6
   1e240:	f001 fce6 	bl	1fc10 <net_buf_get>
   1e244:	4605      	mov	r5, r0
   1e246:	b950      	cbnz	r0, 1e25e <conn_cleanup+0x2c>
	bt_conn_reset_rx_state(conn);
   1e248:	4620      	mov	r0, r4
   1e24a:	f7ff ffe9 	bl	1e220 <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e24e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   1e252:	2200      	movs	r2, #0
}
   1e254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1e258:	2300      	movs	r3, #0
   1e25a:	f7fc bc3d 	b.w	1aad8 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1e25e:	6968      	ldr	r0, [r5, #20]
   1e260:	b108      	cbz	r0, 1e266 <conn_cleanup+0x34>
			tx_free(tx_data(buf)->tx);
   1e262:	f7e8 fdaf 	bl	6dc4 <tx_free>
		net_buf_unref(buf);
   1e266:	4628      	mov	r0, r5
   1e268:	f7fa fe46 	bl	18ef8 <net_buf_unref>
   1e26c:	e7e5      	b.n	1e23a <conn_cleanup+0x8>

0001e26e <bt_conn_ref>:
{
   1e26e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   1e270:	f100 02c4 	add.w	r2, r0, #196	; 0xc4
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e274:	f3bf 8f5b 	dmb	ish
   1e278:	6813      	ldr	r3, [r2, #0]
   1e27a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   1e27e:	b17b      	cbz	r3, 1e2a0 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1e280:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   1e284:	1c59      	adds	r1, r3, #1
   1e286:	e852 4f00 	ldrex	r4, [r2]
   1e28a:	429c      	cmp	r4, r3
   1e28c:	d104      	bne.n	1e298 <bt_conn_ref+0x2a>
   1e28e:	e842 1c00 	strex	ip, r1, [r2]
   1e292:	f1bc 0f00 	cmp.w	ip, #0
   1e296:	d1f6      	bne.n	1e286 <bt_conn_ref+0x18>
   1e298:	f3bf 8f5b 	dmb	ish
   1e29c:	d1ea      	bne.n	1e274 <bt_conn_ref+0x6>
}
   1e29e:	bd10      	pop	{r4, pc}
			return NULL;
   1e2a0:	4618      	mov	r0, r3
   1e2a2:	e7fc      	b.n	1e29e <bt_conn_ref+0x30>

0001e2a4 <bt_conn_unref>:
	old = atomic_dec(&conn->ref);
   1e2a4:	f100 03c4 	add.w	r3, r0, #196	; 0xc4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1e2a8:	f3bf 8f5b 	dmb	ish
   1e2ac:	e853 2f00 	ldrex	r2, [r3]
   1e2b0:	3a01      	subs	r2, #1
   1e2b2:	e843 2100 	strex	r1, r2, [r3]
   1e2b6:	2900      	cmp	r1, #0
   1e2b8:	d1f8      	bne.n	1e2ac <bt_conn_unref+0x8>
   1e2ba:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->type == BT_CONN_TYPE_LE &&
   1e2be:	7883      	ldrb	r3, [r0, #2]
   1e2c0:	2b01      	cmp	r3, #1
   1e2c2:	d108      	bne.n	1e2d6 <bt_conn_unref+0x32>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e2c4:	f3bf 8f5b 	dmb	ish
   1e2c8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1e2cc:	f3bf 8f5b 	dmb	ish
   1e2d0:	b90b      	cbnz	r3, 1e2d6 <bt_conn_unref+0x32>
		bt_le_adv_resume();
   1e2d2:	f7e8 bbdb 	b.w	6a8c <bt_le_adv_resume>
}
   1e2d6:	4770      	bx	lr

0001e2d8 <conn_lookup_handle>:
{
   1e2d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1e2dc:	4607      	mov	r7, r0
   1e2de:	460e      	mov	r6, r1
   1e2e0:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   1e2e2:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e2e4:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   1e2e8:	42b4      	cmp	r4, r6
   1e2ea:	d103      	bne.n	1e2f4 <conn_lookup_handle+0x1c>
	return NULL;
   1e2ec:	2300      	movs	r3, #0
}
   1e2ee:	4618      	mov	r0, r3
   1e2f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   1e2f4:	fb09 7004 	mla	r0, r9, r4, r7
   1e2f8:	f7ff ffb9 	bl	1e26e <bt_conn_ref>
   1e2fc:	4603      	mov	r3, r0
		if (!conn) {
   1e2fe:	b158      	cbz	r0, 1e318 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   1e300:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1e302:	2d01      	cmp	r5, #1
   1e304:	d002      	beq.n	1e30c <conn_lookup_handle+0x34>
   1e306:	3d07      	subs	r5, #7
   1e308:	2d01      	cmp	r5, #1
   1e30a:	d803      	bhi.n	1e314 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   1e30c:	881a      	ldrh	r2, [r3, #0]
   1e30e:	4542      	cmp	r2, r8
   1e310:	d0ed      	beq.n	1e2ee <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   1e312:	4618      	mov	r0, r3
   1e314:	f7ff ffc6 	bl	1e2a4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   1e318:	3401      	adds	r4, #1
   1e31a:	e7e5      	b.n	1e2e8 <conn_lookup_handle+0x10>

0001e31c <bt_conn_connected>:
{
   1e31c:	b510      	push	{r4, lr}
   1e31e:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   1e320:	f7e9 fb5a 	bl	79d8 <bt_l2cap_connected>
	notify_connected(conn);
   1e324:	4620      	mov	r0, r4
}
   1e326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   1e32a:	f7e8 bd55 	b.w	6dd8 <notify_connected>

0001e32e <bt_conn_disconnect>:
{
   1e32e:	b538      	push	{r3, r4, r5, lr}
   1e330:	7b43      	ldrb	r3, [r0, #13]
   1e332:	3b02      	subs	r3, #2
   1e334:	4604      	mov	r4, r0
   1e336:	2b06      	cmp	r3, #6
   1e338:	d805      	bhi.n	1e346 <bt_conn_disconnect+0x18>
   1e33a:	e8df f003 	tbb	[pc, r3]
   1e33e:	0408      	.short	0x0408
   1e340:	0e0c0404 	.word	0x0e0c0404
   1e344:	0c          	.byte	0x0c
   1e345:	00          	.byte	0x00
	switch (conn->state) {
   1e346:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   1e34a:	4628      	mov	r0, r5
   1e34c:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1e34e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1e350:	2100      	movs	r1, #0
   1e352:	f7e8 ff51 	bl	71f8 <bt_conn_set_state>
		return 0;
   1e356:	2500      	movs	r5, #0
   1e358:	e7f7      	b.n	1e34a <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   1e35a:	8800      	ldrh	r0, [r0, #0]
   1e35c:	f7ff fca5 	bl	1dcaa <bt_hci_disconnect>
	if (err) {
   1e360:	4605      	mov	r5, r0
   1e362:	2800      	cmp	r0, #0
   1e364:	d1f1      	bne.n	1e34a <bt_conn_disconnect+0x1c>
	if (conn->state == BT_CONN_CONNECTED) {
   1e366:	7b63      	ldrb	r3, [r4, #13]
   1e368:	2b07      	cmp	r3, #7
   1e36a:	d1ee      	bne.n	1e34a <bt_conn_disconnect+0x1c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1e36c:	2108      	movs	r1, #8
   1e36e:	4620      	mov	r0, r4
   1e370:	f7e8 ff42 	bl	71f8 <bt_conn_set_state>
   1e374:	e7e9      	b.n	1e34a <bt_conn_disconnect+0x1c>

0001e376 <bt_conn_set_security>:
{
   1e376:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1e378:	7b43      	ldrb	r3, [r0, #13]
   1e37a:	2b07      	cmp	r3, #7
{
   1e37c:	4604      	mov	r4, r0
   1e37e:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   1e380:	d124      	bne.n	1e3cc <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1e382:	7a43      	ldrb	r3, [r0, #9]
   1e384:	428b      	cmp	r3, r1
   1e386:	d224      	bcs.n	1e3d2 <bt_conn_set_security+0x5c>
   1e388:	7a83      	ldrb	r3, [r0, #10]
   1e38a:	428b      	cmp	r3, r1
   1e38c:	d221      	bcs.n	1e3d2 <bt_conn_set_security+0x5c>
	if (val) {
   1e38e:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1e390:	f100 0004 	add.w	r0, r0, #4
   1e394:	d515      	bpl.n	1e3c2 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e396:	f3bf 8f5b 	dmb	ish
   1e39a:	e850 3f00 	ldrex	r3, [r0]
   1e39e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   1e3a2:	e840 3200 	strex	r2, r3, [r0]
   1e3a6:	2a00      	cmp	r2, #0
   1e3a8:	d1f7      	bne.n	1e39a <bt_conn_set_security+0x24>
   1e3aa:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1e3ae:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   1e3b2:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   1e3b4:	4620      	mov	r0, r4
   1e3b6:	f7ec fb7d 	bl	aab4 <bt_smp_start_security>
	if (err) {
   1e3ba:	b108      	cbz	r0, 1e3c0 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   1e3bc:	7a63      	ldrb	r3, [r4, #9]
   1e3be:	72a3      	strb	r3, [r4, #10]
}
   1e3c0:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1e3c2:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   1e3c6:	f7ff fef6 	bl	1e1b6 <atomic_and>
   1e3ca:	e7f0      	b.n	1e3ae <bt_conn_set_security+0x38>
		return -ENOTCONN;
   1e3cc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e3d0:	e7f6      	b.n	1e3c0 <bt_conn_set_security+0x4a>
		return 0;
   1e3d2:	2000      	movs	r0, #0
   1e3d4:	e7f4      	b.n	1e3c0 <bt_conn_set_security+0x4a>

0001e3d6 <bt_conn_get_security>:
}
   1e3d6:	7a40      	ldrb	r0, [r0, #9]
   1e3d8:	4770      	bx	lr

0001e3da <bt_conn_is_peer_addr_le>:
{
   1e3da:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1e3dc:	7a03      	ldrb	r3, [r0, #8]
   1e3de:	428b      	cmp	r3, r1
{
   1e3e0:	4604      	mov	r4, r0
   1e3e2:	4615      	mov	r5, r2
	if (id != conn->id) {
   1e3e4:	d115      	bne.n	1e412 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1e3e6:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1e3ea:	2207      	movs	r2, #7
   1e3ec:	4628      	mov	r0, r5
   1e3ee:	f7ff fafc 	bl	1d9ea <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1e3f2:	b180      	cbz	r0, 1e416 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1e3f4:	78e3      	ldrb	r3, [r4, #3]
   1e3f6:	2207      	movs	r2, #7
   1e3f8:	b943      	cbnz	r3, 1e40c <bt_conn_is_peer_addr_le+0x32>
   1e3fa:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1e3fe:	4628      	mov	r0, r5
   1e400:	f7ff faf3 	bl	1d9ea <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1e404:	fab0 f080 	clz	r0, r0
   1e408:	0940      	lsrs	r0, r0, #5
}
   1e40a:	bd38      	pop	{r3, r4, r5, pc}
   1e40c:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e410:	e7f5      	b.n	1e3fe <bt_conn_is_peer_addr_le+0x24>
		return false;
   1e412:	2000      	movs	r0, #0
   1e414:	e7f9      	b.n	1e40a <bt_conn_is_peer_addr_le+0x30>
		return true;
   1e416:	2001      	movs	r0, #1
   1e418:	e7f7      	b.n	1e40a <bt_conn_is_peer_addr_le+0x30>

0001e41a <bt_conn_le_data_len_update>:
{
   1e41a:	460b      	mov	r3, r1
	if (conn->le.data_len.tx_max_len == param->tx_max_len &&
   1e41c:	8809      	ldrh	r1, [r1, #0]
	    conn->le.data_len.tx_max_time == param->tx_max_time) {
   1e41e:	885a      	ldrh	r2, [r3, #2]
	if (conn->le.data_len.tx_max_len == param->tx_max_len &&
   1e420:	f8b0 30ba 	ldrh.w	r3, [r0, #186]	; 0xba
   1e424:	428b      	cmp	r3, r1
   1e426:	d103      	bne.n	1e430 <bt_conn_le_data_len_update+0x16>
   1e428:	f8b0 30bc 	ldrh.w	r3, [r0, #188]	; 0xbc
   1e42c:	4293      	cmp	r3, r2
   1e42e:	d001      	beq.n	1e434 <bt_conn_le_data_len_update+0x1a>
	return bt_le_set_data_len(conn, param->tx_max_len, param->tx_max_time);
   1e430:	f7ff bc56 	b.w	1dce0 <bt_le_set_data_len>
}
   1e434:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1e438:	4770      	bx	lr

0001e43a <bt_conn_le_phy_update>:
{
   1e43a:	b513      	push	{r0, r1, r4, lr}
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   1e43c:	880c      	ldrh	r4, [r1, #0]
   1e43e:	f004 0203 	and.w	r2, r4, #3
   1e442:	2a03      	cmp	r2, #3
{
   1e444:	460b      	mov	r3, r1
	if ((param->options & BT_CONN_LE_PHY_OPT_CODED_S2) &&
   1e446:	d010      	beq.n	1e46a <bt_conn_le_phy_update+0x30>
	} else if (param->options & BT_CONN_LE_PHY_OPT_CODED_S2) {
   1e448:	07e2      	lsls	r2, r4, #31
   1e44a:	d410      	bmi.n	1e46e <bt_conn_le_phy_update+0x34>
		phy_opts = BT_HCI_LE_PHY_CODED_S8;
   1e44c:	f004 0402 	and.w	r4, r4, #2
	if (param->pref_tx_phy == BT_GAP_LE_PHY_NONE) {
   1e450:	789a      	ldrb	r2, [r3, #2]
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   1e452:	78db      	ldrb	r3, [r3, #3]
		all_phys |= BT_HCI_LE_PHY_TX_ANY;
   1e454:	fab2 f182 	clz	r1, r2
   1e458:	0949      	lsrs	r1, r1, #5
	if (param->pref_rx_phy == BT_GAP_LE_PHY_NONE) {
   1e45a:	b90b      	cbnz	r3, 1e460 <bt_conn_le_phy_update+0x26>
		all_phys |= BT_HCI_LE_PHY_RX_ANY;
   1e45c:	f041 0102 	orr.w	r1, r1, #2
	return bt_le_set_phy(conn, all_phys, param->pref_tx_phy,
   1e460:	9400      	str	r4, [sp, #0]
   1e462:	f7ff fc5a 	bl	1dd1a <bt_le_set_phy>
}
   1e466:	b002      	add	sp, #8
   1e468:	bd10      	pop	{r4, pc}
		phy_opts = BT_HCI_LE_PHY_CODED_ANY;
   1e46a:	2400      	movs	r4, #0
   1e46c:	e7f0      	b.n	1e450 <bt_conn_le_phy_update+0x16>
		phy_opts = BT_HCI_LE_PHY_CODED_S2;
   1e46e:	2401      	movs	r4, #1
   1e470:	e7ee      	b.n	1e450 <bt_conn_le_phy_update+0x16>

0001e472 <bt_conn_le_conn_update>:
{
   1e472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e474:	4607      	mov	r7, r0
   1e476:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1e478:	f242 0013 	movw	r0, #8211	; 0x2013
   1e47c:	210e      	movs	r1, #14
   1e47e:	f7e6 fe6d 	bl	515c <bt_hci_cmd_create>
	if (!buf) {
   1e482:	4606      	mov	r6, r0
   1e484:	b1d0      	cbz	r0, 1e4bc <bt_conn_le_conn_update+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1e486:	210e      	movs	r1, #14
   1e488:	3008      	adds	r0, #8
   1e48a:	f001 fc1e 	bl	1fcca <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1e48e:	220e      	movs	r2, #14
   1e490:	4604      	mov	r4, r0
   1e492:	2100      	movs	r1, #0
   1e494:	f7ff fac5 	bl	1da22 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1e498:	883b      	ldrh	r3, [r7, #0]
   1e49a:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1e49c:	882b      	ldrh	r3, [r5, #0]
   1e49e:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1e4a0:	886b      	ldrh	r3, [r5, #2]
   1e4a2:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1e4a4:	88ab      	ldrh	r3, [r5, #4]
   1e4a6:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1e4a8:	88eb      	ldrh	r3, [r5, #6]
   1e4aa:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e4ac:	4631      	mov	r1, r6
   1e4ae:	2200      	movs	r2, #0
}
   1e4b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1e4b4:	f242 0013 	movw	r0, #8211	; 0x2013
   1e4b8:	f7e7 b812 	b.w	54e0 <bt_hci_cmd_send_sync>
}
   1e4bc:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1e4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001e4c2 <l2cap_connected>:
}
   1e4c2:	4770      	bx	lr

0001e4c4 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   1e4c4:	3010      	adds	r0, #16
   1e4c6:	f001 bfd9 	b.w	2047c <k_work_cancel_delayable>

0001e4ca <bt_l2cap_chan_remove>:
	return list->head;
   1e4ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e4cc:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e4ce:	b17b      	cbz	r3, 1e4f0 <bt_l2cap_chan_remove+0x26>
   1e4d0:	3b08      	subs	r3, #8
   1e4d2:	2200      	movs	r2, #0
   1e4d4:	b163      	cbz	r3, 1e4f0 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1e4d6:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   1e4d8:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   1e4dc:	d10e      	bne.n	1e4fc <bt_l2cap_chan_remove+0x32>
	return node->next;
   1e4de:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   1e4e0:	6d45      	ldr	r5, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   1e4e2:	b932      	cbnz	r2, 1e4f2 <bt_l2cap_chan_remove+0x28>
   1e4e4:	42ac      	cmp	r4, r5
	list->head = node;
   1e4e6:	6501      	str	r1, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   1e4e8:	d100      	bne.n	1e4ec <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1e4ea:	6541      	str	r1, [r0, #84]	; 0x54
	parent->next = child;
   1e4ec:	2200      	movs	r2, #0
   1e4ee:	609a      	str	r2, [r3, #8]
}
   1e4f0:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e4f2:	42ac      	cmp	r4, r5
	parent->next = child;
   1e4f4:	6011      	str	r1, [r2, #0]
	list->tail = node;
   1e4f6:	bf08      	it	eq
   1e4f8:	6542      	streq	r2, [r0, #84]	; 0x54
}
   1e4fa:	e7f7      	b.n	1e4ec <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e4fc:	2c00      	cmp	r4, #0
   1e4fe:	d0f7      	beq.n	1e4f0 <bt_l2cap_chan_remove+0x26>
	return node->next;
   1e500:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e502:	2b00      	cmp	r3, #0
   1e504:	d0f4      	beq.n	1e4f0 <bt_l2cap_chan_remove+0x26>
   1e506:	3b08      	subs	r3, #8
   1e508:	4622      	mov	r2, r4
   1e50a:	e7e3      	b.n	1e4d4 <bt_l2cap_chan_remove+0xa>

0001e50c <bt_l2cap_chan_del>:
{
   1e50c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1e50e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1e512:	4604      	mov	r4, r0
	if (!chan->conn) {
   1e514:	b123      	cbz	r3, 1e520 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1e516:	686b      	ldr	r3, [r5, #4]
   1e518:	b103      	cbz	r3, 1e51c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1e51a:	4798      	blx	r3
	chan->conn = NULL;
   1e51c:	2300      	movs	r3, #0
   1e51e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1e520:	68e3      	ldr	r3, [r4, #12]
   1e522:	b10b      	cbz	r3, 1e528 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1e524:	4620      	mov	r0, r4
   1e526:	4798      	blx	r3
	if (ops->released) {
   1e528:	69eb      	ldr	r3, [r5, #28]
   1e52a:	b11b      	cbz	r3, 1e534 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1e52c:	4620      	mov	r0, r4
}
   1e52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1e532:	4718      	bx	r3
}
   1e534:	bd70      	pop	{r4, r5, r6, pc}

0001e536 <bt_l2cap_disconnected>:
	return list->head;
   1e536:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
   1e538:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e53a:	b18b      	cbz	r3, 1e560 <bt_l2cap_disconnected+0x2a>
   1e53c:	f1b3 0008 	subs.w	r0, r3, #8
   1e540:	d00e      	beq.n	1e560 <bt_l2cap_disconnected+0x2a>
	return node->next;
   1e542:	681c      	ldr	r4, [r3, #0]
   1e544:	b104      	cbz	r4, 1e548 <bt_l2cap_disconnected+0x12>
   1e546:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1e548:	f7ff ffe0 	bl	1e50c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e54c:	b144      	cbz	r4, 1e560 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e54e:	f114 0308 	adds.w	r3, r4, #8
   1e552:	d002      	beq.n	1e55a <bt_l2cap_disconnected+0x24>
	return node->next;
   1e554:	68a3      	ldr	r3, [r4, #8]
   1e556:	b103      	cbz	r3, 1e55a <bt_l2cap_disconnected+0x24>
   1e558:	3b08      	subs	r3, #8
{
   1e55a:	4620      	mov	r0, r4
   1e55c:	461c      	mov	r4, r3
   1e55e:	e7f3      	b.n	1e548 <bt_l2cap_disconnected+0x12>
}
   1e560:	bd10      	pop	{r4, pc}

0001e562 <bt_l2cap_security_changed>:
{
   1e562:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   1e564:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1e566:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e568:	b1a3      	cbz	r3, 1e594 <bt_l2cap_security_changed+0x32>
   1e56a:	f1b3 0008 	subs.w	r0, r3, #8
   1e56e:	d011      	beq.n	1e594 <bt_l2cap_security_changed+0x32>
	return node->next;
   1e570:	681c      	ldr	r4, [r3, #0]
   1e572:	b104      	cbz	r4, 1e576 <bt_l2cap_security_changed+0x14>
   1e574:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1e576:	6843      	ldr	r3, [r0, #4]
   1e578:	689b      	ldr	r3, [r3, #8]
   1e57a:	b10b      	cbz	r3, 1e580 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1e57c:	4629      	mov	r1, r5
   1e57e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1e580:	b144      	cbz	r4, 1e594 <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e582:	f114 0308 	adds.w	r3, r4, #8
   1e586:	d002      	beq.n	1e58e <bt_l2cap_security_changed+0x2c>
	return node->next;
   1e588:	68a3      	ldr	r3, [r4, #8]
   1e58a:	b103      	cbz	r3, 1e58e <bt_l2cap_security_changed+0x2c>
   1e58c:	3b08      	subs	r3, #8
{
   1e58e:	4620      	mov	r0, r4
   1e590:	461c      	mov	r4, r3
   1e592:	e7f0      	b.n	1e576 <bt_l2cap_security_changed+0x14>
}
   1e594:	bd38      	pop	{r3, r4, r5, pc}

0001e596 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1e596:	3104      	adds	r1, #4
   1e598:	f7e9 b8d6 	b.w	7748 <bt_conn_create_pdu_timeout>

0001e59c <bt_l2cap_send_cb>:
{
   1e59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e5a0:	4614      	mov	r4, r2
   1e5a2:	4605      	mov	r5, r0
   1e5a4:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   1e5a6:	f102 0008 	add.w	r0, r2, #8
   1e5aa:	2104      	movs	r1, #4
   1e5ac:	461e      	mov	r6, r3
   1e5ae:	f8dd 8018 	ldr.w	r8, [sp, #24]
   1e5b2:	f001 fba1 	bl	1fcf8 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e5b6:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1e5b8:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1e5ba:	3a04      	subs	r2, #4
   1e5bc:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e5be:	4643      	mov	r3, r8
   1e5c0:	4632      	mov	r2, r6
   1e5c2:	4621      	mov	r1, r4
   1e5c4:	4628      	mov	r0, r5
}
   1e5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1e5ca:	f7e8 bd73 	b.w	70b4 <bt_conn_send_cb>

0001e5ce <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   1e5ce:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e5d0:	b160      	cbz	r0, 1e5ec <bt_l2cap_le_lookup_tx_cid+0x1e>
   1e5d2:	3808      	subs	r0, #8
   1e5d4:	b900      	cbnz	r0, 1e5d8 <bt_l2cap_le_lookup_tx_cid+0xa>
   1e5d6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1e5d8:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
   1e5dc:	428b      	cmp	r3, r1
   1e5de:	d005      	beq.n	1e5ec <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e5e0:	f110 0308 	adds.w	r3, r0, #8
   1e5e4:	d001      	beq.n	1e5ea <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   1e5e6:	6880      	ldr	r0, [r0, #8]
   1e5e8:	e7f2      	b.n	1e5d0 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1e5ea:	4618      	mov	r0, r3
}
   1e5ec:	4770      	bx	lr

0001e5ee <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   1e5ee:	6d00      	ldr	r0, [r0, #80]	; 0x50
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1e5f0:	b160      	cbz	r0, 1e60c <bt_l2cap_le_lookup_rx_cid+0x1e>
   1e5f2:	3808      	subs	r0, #8
   1e5f4:	b900      	cbnz	r0, 1e5f8 <bt_l2cap_le_lookup_rx_cid+0xa>
   1e5f6:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1e5f8:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   1e5fc:	428b      	cmp	r3, r1
   1e5fe:	d005      	beq.n	1e60c <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e600:	f110 0308 	adds.w	r3, r0, #8
   1e604:	d001      	beq.n	1e60a <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   1e606:	6880      	ldr	r0, [r0, #8]
   1e608:	e7f2      	b.n	1e5f0 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1e60a:	4618      	mov	r0, r3
}
   1e60c:	4770      	bx	lr

0001e60e <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1e60e:	4770      	bx	lr

0001e610 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1e610:	4603      	mov	r3, r0
	return list->head;
   1e612:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1e614:	b128      	cbz	r0, 1e622 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e616:	6859      	ldr	r1, [r3, #4]
	return node->next;
   1e618:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1e61a:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1e61c:	4288      	cmp	r0, r1
	list->tail = node;
   1e61e:	bf08      	it	eq
   1e620:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1e622:	4770      	bx	lr

0001e624 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1e624:	4603      	mov	r3, r0
	size_t bytes = 0;
   1e626:	2000      	movs	r0, #0

	while (buf) {
   1e628:	b903      	cbnz	r3, 1e62c <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1e62a:	4770      	bx	lr
		bytes += buf->len;
   1e62c:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1e62e:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1e630:	4410      	add	r0, r2
		buf = buf->frags;
   1e632:	e7f9      	b.n	1e628 <net_buf_frags_len+0x4>

0001e634 <att_sent>:
	if (chan->ops->sent) {
   1e634:	684b      	ldr	r3, [r1, #4]
   1e636:	695b      	ldr	r3, [r3, #20]
{
   1e638:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1e63a:	b103      	cbz	r3, 1e63e <att_sent+0xa>
		chan->ops->sent(chan);
   1e63c:	4718      	bx	r3
}
   1e63e:	4770      	bx	lr

0001e640 <attr_read_type_cb>:
{
   1e640:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1e642:	68d4      	ldr	r4, [r2, #12]
   1e644:	7823      	ldrb	r3, [r4, #0]
   1e646:	3102      	adds	r1, #2
   1e648:	b913      	cbnz	r3, 1e650 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1e64a:	7021      	strb	r1, [r4, #0]
	return true;
   1e64c:	2001      	movs	r0, #1
   1e64e:	e006      	b.n	1e65e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1e650:	428b      	cmp	r3, r1
   1e652:	d0fb      	beq.n	1e64c <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1e654:	8983      	ldrh	r3, [r0, #12]
   1e656:	3b02      	subs	r3, #2
   1e658:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1e65a:	2000      	movs	r0, #0
   1e65c:	6110      	str	r0, [r2, #16]
}
   1e65e:	bd10      	pop	{r4, pc}

0001e660 <att_op_get_type>:
	switch (op) {
   1e660:	281e      	cmp	r0, #30
   1e662:	d816      	bhi.n	1e692 <att_op_get_type+0x32>
   1e664:	b308      	cbz	r0, 1e6aa <att_op_get_type+0x4a>
   1e666:	1e43      	subs	r3, r0, #1
   1e668:	2b1d      	cmp	r3, #29
   1e66a:	d81e      	bhi.n	1e6aa <att_op_get_type+0x4a>
   1e66c:	e8df f003 	tbb	[pc, r3]
   1e670:	23172317 	.word	0x23172317
   1e674:	23172317 	.word	0x23172317
   1e678:	23172317 	.word	0x23172317
   1e67c:	23172317 	.word	0x23172317
   1e680:	1d172317 	.word	0x1d172317
   1e684:	2317231d 	.word	0x2317231d
   1e688:	1d191d17 	.word	0x1d191d17
   1e68c:	0f1b      	.short	0x0f1b
   1e68e:	2004      	movs	r0, #4
   1e690:	4770      	bx	lr
   1e692:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1e696:	2b52      	cmp	r3, #82	; 0x52
   1e698:	d107      	bne.n	1e6aa <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1e69a:	2000      	movs	r0, #0
}
   1e69c:	4770      	bx	lr
		return ATT_RESPONSE;
   1e69e:	2002      	movs	r0, #2
   1e6a0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1e6a2:	2003      	movs	r0, #3
   1e6a4:	4770      	bx	lr
		return ATT_INDICATION;
   1e6a6:	2005      	movs	r0, #5
   1e6a8:	4770      	bx	lr
		return ATT_COMMAND;
   1e6aa:	f010 0f40 	tst.w	r0, #64	; 0x40
   1e6ae:	bf0c      	ite	eq
   1e6b0:	2006      	moveq	r0, #6
   1e6b2:	2000      	movne	r0, #0
   1e6b4:	4770      	bx	lr
		return ATT_REQUEST;
   1e6b6:	2001      	movs	r0, #1
   1e6b8:	4770      	bx	lr

0001e6ba <bt_gatt_foreach_attr>:
{
   1e6ba:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1e6bc:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1e6c0:	2300      	movs	r3, #0
   1e6c2:	9300      	str	r3, [sp, #0]
   1e6c4:	461a      	mov	r2, r3
   1e6c6:	f7ea fd77 	bl	91b8 <bt_gatt_foreach_attr_type>
}
   1e6ca:	b005      	add	sp, #20
   1e6cc:	f85d fb04 	ldr.w	pc, [sp], #4

0001e6d0 <find_info_cb>:
{
   1e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1e6d2:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1e6d4:	6817      	ldr	r7, [r2, #0]
{
   1e6d6:	4605      	mov	r5, r0
   1e6d8:	460e      	mov	r6, r1
   1e6da:	4614      	mov	r4, r2
	if (!data->rsp) {
   1e6dc:	b963      	cbnz	r3, 1e6f8 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   1e6de:	6850      	ldr	r0, [r2, #4]
   1e6e0:	2101      	movs	r1, #1
   1e6e2:	3008      	adds	r0, #8
   1e6e4:	f001 faf1 	bl	1fcca <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e6e8:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1e6ea:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1e6ec:	781b      	ldrb	r3, [r3, #0]
   1e6ee:	2b00      	cmp	r3, #0
   1e6f0:	bf0c      	ite	eq
   1e6f2:	2301      	moveq	r3, #1
   1e6f4:	2302      	movne	r3, #2
   1e6f6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1e6f8:	68a3      	ldr	r3, [r4, #8]
   1e6fa:	781b      	ldrb	r3, [r3, #0]
   1e6fc:	2b01      	cmp	r3, #1
   1e6fe:	d003      	beq.n	1e708 <find_info_cb+0x38>
   1e700:	2b02      	cmp	r3, #2
   1e702:	d019      	beq.n	1e738 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1e704:	2000      	movs	r0, #0
   1e706:	e016      	b.n	1e736 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1e708:	682b      	ldr	r3, [r5, #0]
   1e70a:	781b      	ldrb	r3, [r3, #0]
   1e70c:	2b00      	cmp	r3, #0
   1e70e:	d1f9      	bne.n	1e704 <find_info_cb+0x34>
   1e710:	6860      	ldr	r0, [r4, #4]
   1e712:	2104      	movs	r1, #4
   1e714:	3008      	adds	r0, #8
   1e716:	f001 fad8 	bl	1fcca <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e71a:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1e71c:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1e71e:	885b      	ldrh	r3, [r3, #2]
   1e720:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1e722:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1e724:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1e726:	899b      	ldrh	r3, [r3, #12]
   1e728:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e72c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e72e:	2804      	cmp	r0, #4
   1e730:	bf94      	ite	ls
   1e732:	2000      	movls	r0, #0
   1e734:	2001      	movhi	r0, #1
}
   1e736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1e738:	682b      	ldr	r3, [r5, #0]
   1e73a:	781b      	ldrb	r3, [r3, #0]
   1e73c:	2b02      	cmp	r3, #2
   1e73e:	d1e1      	bne.n	1e704 <find_info_cb+0x34>
   1e740:	6860      	ldr	r0, [r4, #4]
   1e742:	2112      	movs	r1, #18
   1e744:	3008      	adds	r0, #8
   1e746:	f001 fac0 	bl	1fcca <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e74a:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1e74c:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e74e:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1e750:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1e754:	3101      	adds	r1, #1
   1e756:	f7ff f959 	bl	1da0c <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1e75a:	6863      	ldr	r3, [r4, #4]
   1e75c:	f8b7 0086 	ldrh.w	r0, [r7, #134]	; 0x86
   1e760:	899b      	ldrh	r3, [r3, #12]
   1e762:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1e764:	2812      	cmp	r0, #18
   1e766:	e7e3      	b.n	1e730 <find_info_cb+0x60>

0001e768 <att_chan_mtu_updated>:
{
   1e768:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   1e76a:	6806      	ldr	r6, [r0, #0]
	return list->head;
   1e76c:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e76e:	b30b      	cbz	r3, 1e7b4 <att_chan_mtu_updated+0x4c>
   1e770:	f5b3 74a2 	subs.w	r4, r3, #324	; 0x144
   1e774:	d01d      	beq.n	1e7b2 <att_chan_mtu_updated+0x4a>
	return node->next;
   1e776:	681a      	ldr	r2, [r3, #0]
   1e778:	b10a      	cbz	r2, 1e77e <att_chan_mtu_updated+0x16>
   1e77a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
{
   1e77e:	2300      	movs	r3, #0
   1e780:	4619      	mov	r1, r3
		if (chan == updated_chan) {
   1e782:	42a0      	cmp	r0, r4
   1e784:	d009      	beq.n	1e79a <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e786:	f8b4 5086 	ldrh.w	r5, [r4, #134]	; 0x86
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e78a:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   1e78e:	42a9      	cmp	r1, r5
   1e790:	bf38      	it	cc
   1e792:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   1e794:	42a3      	cmp	r3, r4
   1e796:	bf38      	it	cc
   1e798:	4623      	movcc	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1e79a:	b162      	cbz	r2, 1e7b6 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1e79c:	f512 75a2 	adds.w	r5, r2, #324	; 0x144
   1e7a0:	d004      	beq.n	1e7ac <att_chan_mtu_updated+0x44>
	return node->next;
   1e7a2:	f8d2 5144 	ldr.w	r5, [r2, #324]	; 0x144
   1e7a6:	b10d      	cbz	r5, 1e7ac <att_chan_mtu_updated+0x44>
   1e7a8:	f5a5 75a2 	sub.w	r5, r5, #324	; 0x144
{
   1e7ac:	4614      	mov	r4, r2
   1e7ae:	462a      	mov	r2, r5
   1e7b0:	e7e7      	b.n	1e782 <att_chan_mtu_updated+0x1a>
   1e7b2:	4623      	mov	r3, r4
   1e7b4:	4619      	mov	r1, r3
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e7b6:	f8b0 4086 	ldrh.w	r4, [r0, #134]	; 0x86
	    (updated_chan->chan.rx.mtu > max_rx)) {
   1e7ba:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   1e7be:	428c      	cmp	r4, r1
   1e7c0:	d801      	bhi.n	1e7c6 <att_chan_mtu_updated+0x5e>
   1e7c2:	429a      	cmp	r2, r3
   1e7c4:	d909      	bls.n	1e7da <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e7c6:	429a      	cmp	r2, r3
   1e7c8:	bf38      	it	cc
   1e7ca:	461a      	movcc	r2, r3
   1e7cc:	42a1      	cmp	r1, r4
   1e7ce:	6830      	ldr	r0, [r6, #0]
   1e7d0:	bf38      	it	cc
   1e7d2:	4621      	movcc	r1, r4
}
   1e7d4:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   1e7d6:	f7eb b8db 	b.w	9990 <bt_gatt_att_max_mtu_changed>
}
   1e7da:	bc70      	pop	{r4, r5, r6}
   1e7dc:	4770      	bx	lr

0001e7de <attr_read_group_cb>:
	if (!data->rsp->len) {
   1e7de:	68d0      	ldr	r0, [r2, #12]
   1e7e0:	7803      	ldrb	r3, [r0, #0]
   1e7e2:	3104      	adds	r1, #4
   1e7e4:	b913      	cbnz	r3, 1e7ec <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1e7e6:	7001      	strb	r1, [r0, #0]
	return true;
   1e7e8:	2001      	movs	r0, #1
}
   1e7ea:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1e7ec:	428b      	cmp	r3, r1
   1e7ee:	d0fb      	beq.n	1e7e8 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1e7f0:	6891      	ldr	r1, [r2, #8]
   1e7f2:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1e7f4:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1e7f6:	3b04      	subs	r3, #4
   1e7f8:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1e7fa:	6110      	str	r0, [r2, #16]
		return false;
   1e7fc:	4770      	bx	lr

0001e7fe <chan_req_sent>:
	if (chan->req) {
   1e7fe:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1e802:	b133      	cbz	r3, 1e812 <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   1e804:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1e808:	2300      	movs	r3, #0
   1e80a:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1e80e:	f7fc b963 	b.w	1aad8 <k_work_reschedule>
}
   1e812:	4770      	bx	lr

0001e814 <write_cb>:
{
   1e814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e816:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e818:	4601      	mov	r1, r0
{
   1e81a:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1e81c:	222a      	movs	r2, #42	; 0x2a
   1e81e:	6820      	ldr	r0, [r4, #0]
   1e820:	f000 fda2 	bl	1f368 <bt_gatt_check_perm>
   1e824:	4605      	mov	r5, r0
   1e826:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1e828:	bb00      	cbnz	r0, 1e86c <write_cb+0x58>
	if (!data->req) {
   1e82a:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1e82c:	68b7      	ldr	r7, [r6, #8]
   1e82e:	68e2      	ldr	r2, [r4, #12]
   1e830:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1e832:	2b00      	cmp	r3, #0
   1e834:	bf14      	ite	ne
   1e836:	2300      	movne	r3, #0
   1e838:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1e83a:	9301      	str	r3, [sp, #4]
   1e83c:	8a63      	ldrh	r3, [r4, #18]
   1e83e:	9300      	str	r3, [sp, #0]
   1e840:	4631      	mov	r1, r6
   1e842:	8a23      	ldrh	r3, [r4, #16]
   1e844:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1e846:	1e03      	subs	r3, r0, #0
   1e848:	db05      	blt.n	1e856 <write_cb+0x42>
   1e84a:	8a22      	ldrh	r2, [r4, #16]
   1e84c:	4293      	cmp	r3, r2
   1e84e:	d10b      	bne.n	1e868 <write_cb+0x54>
	data->err = 0U;
   1e850:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1e852:	2501      	movs	r5, #1
   1e854:	e005      	b.n	1e862 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1e856:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1e85a:	d305      	bcc.n	1e868 <write_cb+0x54>
		return -err;
   1e85c:	425b      	negs	r3, r3
   1e85e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1e860:	7523      	strb	r3, [r4, #20]
}
   1e862:	4628      	mov	r0, r5
   1e864:	b003      	add	sp, #12
   1e866:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1e868:	230e      	movs	r3, #14
   1e86a:	e7f9      	b.n	1e860 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1e86c:	2500      	movs	r5, #0
   1e86e:	e7f8      	b.n	1e862 <write_cb+0x4e>

0001e870 <chan_req_send>:
{
   1e870:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e872:	688e      	ldr	r6, [r1, #8]
{
   1e874:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e876:	4630      	mov	r0, r6
   1e878:	f7ff fed4 	bl	1e624 <net_buf_frags_len>
   1e87c:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
   1e880:	4283      	cmp	r3, r0
{
   1e882:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1e884:	d30a      	bcc.n	1e89c <chan_req_send+0x2c>
	req->buf = NULL;
   1e886:	2200      	movs	r2, #0
	chan->req = req;
   1e888:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
	err = chan_send(chan, buf, NULL);
   1e88c:	4628      	mov	r0, r5
	req->buf = NULL;
   1e88e:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   1e890:	4631      	mov	r1, r6
   1e892:	f7e9 faf5 	bl	7e80 <chan_send>
	if (err) {
   1e896:	b100      	cbz	r0, 1e89a <chan_req_send+0x2a>
		req->buf = buf;
   1e898:	60a6      	str	r6, [r4, #8]
}
   1e89a:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1e89c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   1e8a0:	e7fb      	b.n	1e89a <chan_req_send+0x2a>

0001e8a2 <process_queue>:
{
   1e8a2:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1e8a4:	2200      	movs	r2, #0
{
   1e8a6:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1e8a8:	2300      	movs	r3, #0
   1e8aa:	4608      	mov	r0, r1
{
   1e8ac:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1e8ae:	f001 f9af 	bl	1fc10 <net_buf_get>
	if (buf) {
   1e8b2:	4605      	mov	r5, r0
   1e8b4:	b160      	cbz	r0, 1e8d0 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1e8b6:	4601      	mov	r1, r0
   1e8b8:	2200      	movs	r2, #0
   1e8ba:	4620      	mov	r0, r4
   1e8bc:	f7e9 fae0 	bl	7e80 <chan_send>
		if (err) {
   1e8c0:	4604      	mov	r4, r0
   1e8c2:	b118      	cbz	r0, 1e8cc <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1e8c4:	4629      	mov	r1, r5
   1e8c6:	4630      	mov	r0, r6
   1e8c8:	f001 fce0 	bl	2028c <k_queue_prepend>
}
   1e8cc:	4620      	mov	r0, r4
   1e8ce:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1e8d0:	f06f 0401 	mvn.w	r4, #1
   1e8d4:	e7fa      	b.n	1e8cc <process_queue+0x2a>

0001e8d6 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e8d6:	b510      	push	{r4, lr}
	return list->head;
   1e8d8:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e8da:	2200      	movs	r2, #0
   1e8dc:	b153      	cbz	r3, 1e8f4 <sys_slist_find_and_remove.isra.0+0x1e>
   1e8de:	428b      	cmp	r3, r1
   1e8e0:	d10e      	bne.n	1e900 <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   1e8e2:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   1e8e4:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e8e6:	b932      	cbnz	r2, 1e8f6 <sys_slist_find_and_remove.isra.0+0x20>
   1e8e8:	42a1      	cmp	r1, r4
	list->head = node;
   1e8ea:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e8ec:	d100      	bne.n	1e8f0 <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   1e8ee:	6043      	str	r3, [r0, #4]
	parent->next = child;
   1e8f0:	2300      	movs	r3, #0
   1e8f2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e8f4:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   1e8f6:	42a1      	cmp	r1, r4
	parent->next = child;
   1e8f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1e8fa:	bf08      	it	eq
   1e8fc:	6042      	streq	r2, [r0, #4]
}
   1e8fe:	e7f7      	b.n	1e8f0 <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   1e900:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e902:	681b      	ldr	r3, [r3, #0]
   1e904:	e7ea      	b.n	1e8dc <sys_slist_find_and_remove.isra.0+0x6>

0001e906 <att_chan_read>:
{
   1e906:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e90a:	4680      	mov	r8, r0
   1e90c:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e90e:	4610      	mov	r0, r2
{
   1e910:	4699      	mov	r9, r3
   1e912:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e914:	f7ff fe86 	bl	1e624 <net_buf_frags_len>
   1e918:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
   1e91c:	4283      	cmp	r3, r0
{
   1e91e:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1e920:	d97a      	bls.n	1ea18 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1e922:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1e926:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1e928:	4630      	mov	r0, r6
   1e92a:	f001 f9a0 	bl	1fc6e <net_buf_frag_last>
	size_t len, total = 0;
   1e92e:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1e932:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e934:	4630      	mov	r0, r6
   1e936:	f7ff fe75 	bl	1e624 <net_buf_frags_len>
   1e93a:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
	return net_buf_simple_tailroom(&buf->b);
   1e93e:	f105 0708 	add.w	r7, r5, #8
   1e942:	1a24      	subs	r4, r4, r0
   1e944:	4638      	mov	r0, r7
   1e946:	f001 f9fb 	bl	1fd40 <net_buf_simple_tailroom>
   1e94a:	4284      	cmp	r4, r0
   1e94c:	d211      	bcs.n	1e972 <att_chan_read+0x6c>
   1e94e:	4630      	mov	r0, r6
   1e950:	f7ff fe68 	bl	1e624 <net_buf_frags_len>
   1e954:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e958:	1a24      	subs	r4, r4, r0
		if (!len) {
   1e95a:	bb34      	cbnz	r4, 1e9aa <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1e95c:	79b0      	ldrb	r0, [r6, #6]
   1e95e:	f7fa fa0d 	bl	18d7c <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1e962:	2200      	movs	r2, #0
   1e964:	2300      	movs	r3, #0
   1e966:	f001 f94e 	bl	1fc06 <net_buf_alloc_fixed>
			if (!frag) {
   1e96a:	4605      	mov	r5, r0
   1e96c:	b930      	cbnz	r0, 1e97c <att_chan_read+0x76>
	return total;
   1e96e:	4657      	mov	r7, sl
   1e970:	e02c      	b.n	1e9cc <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   1e972:	4638      	mov	r0, r7
   1e974:	f001 f9e4 	bl	1fd40 <net_buf_simple_tailroom>
   1e978:	4604      	mov	r4, r0
   1e97a:	e7ee      	b.n	1e95a <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1e97c:	4601      	mov	r1, r0
   1e97e:	4630      	mov	r0, r6
   1e980:	f001 f986 	bl	1fc90 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1e984:	4630      	mov	r0, r6
   1e986:	f7ff fe4d 	bl	1e624 <net_buf_frags_len>
   1e98a:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e98e:	f105 0708 	add.w	r7, r5, #8
   1e992:	1a24      	subs	r4, r4, r0
   1e994:	4638      	mov	r0, r7
   1e996:	f001 f9d3 	bl	1fd40 <net_buf_simple_tailroom>
   1e99a:	4284      	cmp	r4, r0
   1e99c:	d21a      	bcs.n	1e9d4 <att_chan_read+0xce>
   1e99e:	4630      	mov	r0, r6
   1e9a0:	f7ff fe40 	bl	1e624 <net_buf_frags_len>
   1e9a4:	f8b8 4086 	ldrh.w	r4, [r8, #134]	; 0x86
   1e9a8:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1e9aa:	68a9      	ldr	r1, [r5, #8]
   1e9ac:	89aa      	ldrh	r2, [r5, #12]
   1e9ae:	f8db 7004 	ldr.w	r7, [fp, #4]
   1e9b2:	9803      	ldr	r0, [sp, #12]
   1e9b4:	f8cd 9000 	str.w	r9, [sp]
   1e9b8:	440a      	add	r2, r1
   1e9ba:	b2a3      	uxth	r3, r4
   1e9bc:	4659      	mov	r1, fp
   1e9be:	47b8      	blx	r7
		if (read < 0) {
   1e9c0:	1e07      	subs	r7, r0, #0
   1e9c2:	da0c      	bge.n	1e9de <att_chan_read+0xd8>
				return total;
   1e9c4:	f1ba 0f00 	cmp.w	sl, #0
   1e9c8:	bf18      	it	ne
   1e9ca:	4657      	movne	r7, sl
}
   1e9cc:	4638      	mov	r0, r7
   1e9ce:	b005      	add	sp, #20
   1e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9d4:	4638      	mov	r0, r7
   1e9d6:	f001 f9b3 	bl	1fd40 <net_buf_simple_tailroom>
   1e9da:	4604      	mov	r4, r0
   1e9dc:	e7e5      	b.n	1e9aa <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1e9de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1e9e0:	b993      	cbnz	r3, 1ea08 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   1e9e2:	4639      	mov	r1, r7
   1e9e4:	f105 0008 	add.w	r0, r5, #8
   1e9e8:	f001 f96f 	bl	1fcca <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e9ec:	4630      	mov	r0, r6
   1e9ee:	f7ff fe19 	bl	1e624 <net_buf_frags_len>
   1e9f2:	f8b8 3086 	ldrh.w	r3, [r8, #134]	; 0x86
		offset += read;
   1e9f6:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1e9f8:	4283      	cmp	r3, r0
		total += read;
   1e9fa:	44ba      	add	sl, r7
		offset += read;
   1e9fc:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1ea00:	d9b5      	bls.n	1e96e <att_chan_read+0x68>
   1ea02:	42a7      	cmp	r7, r4
   1ea04:	d096      	beq.n	1e934 <att_chan_read+0x2e>
   1ea06:	e7b2      	b.n	1e96e <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1ea08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1ea0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1ea0c:	4639      	mov	r1, r7
   1ea0e:	4628      	mov	r0, r5
   1ea10:	4798      	blx	r3
   1ea12:	2800      	cmp	r0, #0
   1ea14:	d1e5      	bne.n	1e9e2 <att_chan_read+0xdc>
   1ea16:	e7aa      	b.n	1e96e <att_chan_read+0x68>
		return 0;
   1ea18:	2700      	movs	r7, #0
   1ea1a:	e7d7      	b.n	1e9cc <att_chan_read+0xc6>

0001ea1c <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ea1c:	30f0      	adds	r0, #240	; 0xf0
   1ea1e:	f3bf 8f5b 	dmb	ish
   1ea22:	e850 3f00 	ldrex	r3, [r0]
   1ea26:	f023 0302 	bic.w	r3, r3, #2
   1ea2a:	e840 3200 	strex	r2, r3, [r0]
   1ea2e:	2a00      	cmp	r2, #0
   1ea30:	d1f7      	bne.n	1ea22 <chan_cfm_sent+0x6>
   1ea32:	f3bf 8f5b 	dmb	ish
}
   1ea36:	4770      	bx	lr

0001ea38 <chan_rsp_sent>:
   1ea38:	30f0      	adds	r0, #240	; 0xf0
   1ea3a:	f3bf 8f5b 	dmb	ish
   1ea3e:	e850 3f00 	ldrex	r3, [r0]
   1ea42:	f023 0301 	bic.w	r3, r3, #1
   1ea46:	e840 3200 	strex	r2, r3, [r0]
   1ea4a:	2a00      	cmp	r2, #0
   1ea4c:	d1f7      	bne.n	1ea3e <chan_rsp_sent+0x6>
   1ea4e:	f3bf 8f5b 	dmb	ish
}
   1ea52:	4770      	bx	lr

0001ea54 <read_cb>:
{
   1ea54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1ea58:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ea5c:	4606      	mov	r6, r0
	data->err = 0x00;
   1ea5e:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1ea60:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1ea64:	7317      	strb	r7, [r2, #12]
{
   1ea66:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ea68:	4631      	mov	r1, r6
   1ea6a:	2215      	movs	r2, #21
   1ea6c:	f000 fc7c 	bl	1f368 <bt_gatt_check_perm>
   1ea70:	4604      	mov	r4, r0
   1ea72:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1ea74:	b9a0      	cbnz	r0, 1eaa0 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ea76:	e9cd 0000 	strd	r0, r0, [sp]
   1ea7a:	88ab      	ldrh	r3, [r5, #4]
   1ea7c:	68aa      	ldr	r2, [r5, #8]
   1ea7e:	4631      	mov	r1, r6
   1ea80:	4640      	mov	r0, r8
   1ea82:	f7ff ff40 	bl	1e906 <att_chan_read>
	if (ret < 0) {
   1ea86:	1e03      	subs	r3, r0, #0
   1ea88:	da0c      	bge.n	1eaa4 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1ea8a:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1ea8e:	bf26      	itte	cs
   1ea90:	425b      	negcs	r3, r3
   1ea92:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1ea94:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1ea96:	732b      	strb	r3, [r5, #12]
}
   1ea98:	4620      	mov	r0, r4
   1ea9a:	b002      	add	sp, #8
   1ea9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1eaa0:	463c      	mov	r4, r7
   1eaa2:	e7f9      	b.n	1ea98 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1eaa4:	2401      	movs	r4, #1
   1eaa6:	e7f7      	b.n	1ea98 <read_cb+0x44>

0001eaa8 <bt_att_sent>:
{
   1eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1eaaa:	f8d0 3138 	ldr.w	r3, [r0, #312]	; 0x138
	struct bt_att *att = chan->att;
   1eaae:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   1eab2:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1eab4:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1eab8:	b10b      	cbz	r3, 1eabe <bt_att_sent+0x16>
		chan->sent(chan);
   1eaba:	4638      	mov	r0, r7
   1eabc:	4798      	blx	r3
   1eabe:	f3bf 8f5b 	dmb	ish
   1eac2:	f105 03e8 	add.w	r3, r5, #232	; 0xe8
   1eac6:	e853 2f00 	ldrex	r2, [r3]
   1eaca:	f022 0210 	bic.w	r2, r2, #16
   1eace:	e843 2100 	strex	r1, r2, [r3]
   1ead2:	2900      	cmp	r1, #0
   1ead4:	d1f7      	bne.n	1eac6 <bt_att_sent+0x1e>
   1ead6:	f3bf 8f5b 	dmb	ish
	if (!att) {
   1eada:	b30c      	cbz	r4, 1eb20 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1eadc:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1eae0:	b98b      	cbnz	r3, 1eb06 <bt_att_sent+0x5e>
   1eae2:	6863      	ldr	r3, [r4, #4]
   1eae4:	b17b      	cbz	r3, 1eb06 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1eae6:	1d20      	adds	r0, r4, #4
   1eae8:	f7ff fd92 	bl	1e610 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1eaec:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1eaee:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1eaf0:	4638      	mov	r0, r7
   1eaf2:	f7ff febd 	bl	1e870 <chan_req_send>
   1eaf6:	2800      	cmp	r0, #0
   1eaf8:	da12      	bge.n	1eb20 <bt_att_sent+0x78>
	parent->next = child;
   1eafa:	6863      	ldr	r3, [r4, #4]
   1eafc:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1eafe:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   1eb00:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   1eb02:	b903      	cbnz	r3, 1eb06 <bt_att_sent+0x5e>
	list->tail = node;
   1eb04:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   1eb06:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   1eb0a:	4638      	mov	r0, r7
   1eb0c:	f7ff fec9 	bl	1e8a2 <process_queue>
	if (!err) {
   1eb10:	b130      	cbz	r0, 1eb20 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   1eb12:	f104 010c 	add.w	r1, r4, #12
   1eb16:	4638      	mov	r0, r7
}
   1eb18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   1eb1c:	f7ff bec1 	b.w	1e8a2 <process_queue>
}
   1eb20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001eb22 <att_req_send_process>:
{
   1eb22:	b570      	push	{r4, r5, r6, lr}
   1eb24:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   1eb26:	3004      	adds	r0, #4
   1eb28:	f7ff fd72 	bl	1e610 <sys_slist_get>
	if (!node) {
   1eb2c:	4606      	mov	r6, r0
   1eb2e:	b1c0      	cbz	r0, 1eb62 <att_req_send_process+0x40>
	return list->head;
   1eb30:	6beb      	ldr	r3, [r5, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1eb32:	b153      	cbz	r3, 1eb4a <att_req_send_process+0x28>
   1eb34:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1eb38:	d007      	beq.n	1eb4a <att_req_send_process+0x28>
	return node->next;
   1eb3a:	681c      	ldr	r4, [r3, #0]
   1eb3c:	b10c      	cbz	r4, 1eb42 <att_req_send_process+0x20>
   1eb3e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
		if (!chan->req) {
   1eb42:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   1eb46:	b13b      	cbz	r3, 1eb58 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1eb48:	b964      	cbnz	r4, 1eb64 <att_req_send_process+0x42>
	parent->next = child;
   1eb4a:	686b      	ldr	r3, [r5, #4]
   1eb4c:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1eb4e:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1eb50:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1eb52:	b933      	cbnz	r3, 1eb62 <att_req_send_process+0x40>
	list->tail = node;
   1eb54:	60ae      	str	r6, [r5, #8]
}
   1eb56:	e004      	b.n	1eb62 <att_req_send_process+0x40>
	return chan_req_send(chan, req);
   1eb58:	4631      	mov	r1, r6
   1eb5a:	f7ff fe89 	bl	1e870 <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1eb5e:	2800      	cmp	r0, #0
   1eb60:	dbf2      	blt.n	1eb48 <att_req_send_process+0x26>
}
   1eb62:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb64:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1eb68:	d004      	beq.n	1eb74 <att_req_send_process+0x52>
	return node->next;
   1eb6a:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1eb6e:	b10b      	cbz	r3, 1eb74 <att_req_send_process+0x52>
   1eb70:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1eb74:	4620      	mov	r0, r4
   1eb76:	461c      	mov	r4, r3
   1eb78:	e7e3      	b.n	1eb42 <att_req_send_process+0x20>

0001eb7a <bt_att_status>:
{
   1eb7a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1eb7c:	f3bf 8f5b 	dmb	ish
   1eb80:	680b      	ldr	r3, [r1, #0]
   1eb82:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1eb86:	07db      	lsls	r3, r3, #31
{
   1eb88:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1eb8a:	d519      	bpl.n	1ebc0 <bt_att_status+0x46>
	if (!chan->att) {
   1eb8c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1eb90:	b1b0      	cbz	r0, 1ebc0 <bt_att_status+0x46>
	if (chan->req) {
   1eb92:	f8d5 30ec 	ldr.w	r3, [r5, #236]	; 0xec
   1eb96:	b99b      	cbnz	r3, 1ebc0 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   1eb98:	3004      	adds	r0, #4
   1eb9a:	f7ff fd39 	bl	1e610 <sys_slist_get>
	if (!node) {
   1eb9e:	4604      	mov	r4, r0
   1eba0:	b170      	cbz	r0, 1ebc0 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   1eba2:	4601      	mov	r1, r0
   1eba4:	f1a5 0008 	sub.w	r0, r5, #8
   1eba8:	f7ff fe62 	bl	1e870 <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1ebac:	2800      	cmp	r0, #0
   1ebae:	da07      	bge.n	1ebc0 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   1ebb0:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   1ebb4:	685a      	ldr	r2, [r3, #4]
   1ebb6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1ebb8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1ebba:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1ebbc:	b902      	cbnz	r2, 1ebc0 <bt_att_status+0x46>
	list->tail = node;
   1ebbe:	609c      	str	r4, [r3, #8]
}
   1ebc0:	bd38      	pop	{r3, r4, r5, pc}

0001ebc2 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ebc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ebc6:	4688      	mov	r8, r1
   1ebc8:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ebca:	2101      	movs	r1, #1
   1ebcc:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1ebce:	4605      	mov	r5, r0
   1ebd0:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1ebd2:	f7e9 fb5d 	bl	8290 <bt_att_chan_create_pdu>
	if (!buf) {
   1ebd6:	4604      	mov	r4, r0
   1ebd8:	b170      	cbz	r0, 1ebf8 <send_err_rsp.part.0+0x36>
   1ebda:	2104      	movs	r1, #4
   1ebdc:	3008      	adds	r0, #8
   1ebde:	f001 f874 	bl	1fcca <net_buf_simple_add>
	rsp->request = req;
   1ebe2:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1ebe6:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1ebe8:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1ebec:	4621      	mov	r1, r4
   1ebee:	4628      	mov	r0, r5
}
   1ebf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1ebf4:	f7e9 b9b2 	b.w	7f5c <bt_att_chan_send_rsp.constprop.0>
}
   1ebf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ebfc <att_write_cmd>:
{
   1ebfc:	b530      	push	{r4, r5, lr}
   1ebfe:	460c      	mov	r4, r1
   1ec00:	b085      	sub	sp, #20
   1ec02:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   1ec04:	f101 0008 	add.w	r0, r1, #8
   1ec08:	f001 f88e 	bl	1fd28 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1ec0c:	89a2      	ldrh	r2, [r4, #12]
   1ec0e:	9202      	str	r2, [sp, #8]
   1ec10:	68a2      	ldr	r2, [r4, #8]
   1ec12:	9201      	str	r2, [sp, #4]
   1ec14:	2200      	movs	r2, #0
   1ec16:	4603      	mov	r3, r0
   1ec18:	9200      	str	r2, [sp, #0]
   1ec1a:	4611      	mov	r1, r2
   1ec1c:	4628      	mov	r0, r5
   1ec1e:	f7e9 fc2b 	bl	8478 <att_write_rsp>
}
   1ec22:	b005      	add	sp, #20
   1ec24:	bd30      	pop	{r4, r5, pc}

0001ec26 <att_write_req>:
{
   1ec26:	b530      	push	{r4, r5, lr}
   1ec28:	460c      	mov	r4, r1
   1ec2a:	b085      	sub	sp, #20
   1ec2c:	4605      	mov	r5, r0
   1ec2e:	f101 0008 	add.w	r0, r1, #8
   1ec32:	f001 f879 	bl	1fd28 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1ec36:	89a2      	ldrh	r2, [r4, #12]
   1ec38:	9202      	str	r2, [sp, #8]
   1ec3a:	68a2      	ldr	r2, [r4, #8]
   1ec3c:	9201      	str	r2, [sp, #4]
   1ec3e:	2200      	movs	r2, #0
   1ec40:	4603      	mov	r3, r0
   1ec42:	9200      	str	r2, [sp, #0]
   1ec44:	2112      	movs	r1, #18
   1ec46:	2213      	movs	r2, #19
   1ec48:	4628      	mov	r0, r5
   1ec4a:	f7e9 fc15 	bl	8478 <att_write_rsp>
}
   1ec4e:	b005      	add	sp, #20
   1ec50:	bd30      	pop	{r4, r5, pc}

0001ec52 <att_exec_write_req>:
{
   1ec52:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   1ec56:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ec58:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   1ec5a:	f893 8000 	ldrb.w	r8, [r3]
{
   1ec5e:	4606      	mov	r6, r0
	uint8_t err = 0U;
   1ec60:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   1ec62:	6830      	ldr	r0, [r6, #0]
   1ec64:	2200      	movs	r2, #0
   1ec66:	2300      	movs	r3, #0
   1ec68:	3024      	adds	r0, #36	; 0x24
   1ec6a:	f000 ffd1 	bl	1fc10 <net_buf_get>
   1ec6e:	4605      	mov	r5, r0
   1ec70:	b970      	cbnz	r0, 1ec90 <att_exec_write_req+0x3e>
	if (err) {
   1ec72:	bb4c      	cbnz	r4, 1ecc8 <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   1ec74:	2119      	movs	r1, #25
   1ec76:	4622      	mov	r2, r4
   1ec78:	4638      	mov	r0, r7
   1ec7a:	f7e9 fc9f 	bl	85bc <bt_att_create_pdu>
	if (!buf) {
   1ec7e:	4601      	mov	r1, r0
   1ec80:	b320      	cbz	r0, 1eccc <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1ec82:	4630      	mov	r0, r6
   1ec84:	f7e9 f96a 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
}
   1ec88:	4620      	mov	r0, r4
   1ec8a:	b004      	add	sp, #16
   1ec8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   1ec90:	b9b4      	cbnz	r4, 1ecc0 <att_exec_write_req+0x6e>
   1ec92:	f1b8 0f01 	cmp.w	r8, #1
   1ec96:	d113      	bne.n	1ecc0 <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   1ec98:	89aa      	ldrh	r2, [r5, #12]
   1ec9a:	8aab      	ldrh	r3, [r5, #20]
   1ec9c:	9202      	str	r2, [sp, #8]
   1ec9e:	68aa      	ldr	r2, [r5, #8]
   1eca0:	9201      	str	r2, [sp, #4]
   1eca2:	8aea      	ldrh	r2, [r5, #22]
   1eca4:	9200      	str	r2, [sp, #0]
   1eca6:	2118      	movs	r1, #24
   1eca8:	4622      	mov	r2, r4
   1ecaa:	4630      	mov	r0, r6
   1ecac:	f7e9 fbe4 	bl	8478 <att_write_rsp>
			if (err) {
   1ecb0:	4604      	mov	r4, r0
   1ecb2:	b128      	cbz	r0, 1ecc0 <att_exec_write_req+0x6e>
	if (!req) {
   1ecb4:	4603      	mov	r3, r0
   1ecb6:	8aaa      	ldrh	r2, [r5, #20]
   1ecb8:	2118      	movs	r1, #24
   1ecba:	4630      	mov	r0, r6
   1ecbc:	f7ff ff81 	bl	1ebc2 <send_err_rsp.part.0>
		net_buf_unref(buf);
   1ecc0:	4628      	mov	r0, r5
   1ecc2:	f7fa f919 	bl	18ef8 <net_buf_unref>
   1ecc6:	e7cc      	b.n	1ec62 <att_exec_write_req+0x10>
		return 0;
   1ecc8:	4604      	mov	r4, r0
   1ecca:	e7dd      	b.n	1ec88 <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   1eccc:	240e      	movs	r4, #14
   1ecce:	e7db      	b.n	1ec88 <att_exec_write_req+0x36>

0001ecd0 <att_read_blob_req>:
{
   1ecd0:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1ecd2:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1ecd4:	8813      	ldrh	r3, [r2, #0]
   1ecd6:	8852      	ldrh	r2, [r2, #2]
   1ecd8:	9200      	str	r2, [sp, #0]
   1ecda:	210c      	movs	r1, #12
   1ecdc:	220d      	movs	r2, #13
   1ecde:	f7e9 fddf 	bl	88a0 <att_read_rsp>
}
   1ece2:	b003      	add	sp, #12
   1ece4:	f85d fb04 	ldr.w	pc, [sp], #4

0001ece8 <att_read_req>:
{
   1ece8:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1ecea:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1ecec:	2200      	movs	r2, #0
   1ecee:	881b      	ldrh	r3, [r3, #0]
   1ecf0:	9200      	str	r2, [sp, #0]
   1ecf2:	210a      	movs	r1, #10
   1ecf4:	220b      	movs	r2, #11
   1ecf6:	f7e9 fdd3 	bl	88a0 <att_read_rsp>
}
   1ecfa:	b003      	add	sp, #12
   1ecfc:	f85d fb04 	ldr.w	pc, [sp], #4

0001ed00 <att_mtu_req>:
{
   1ed00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1ed02:	6803      	ldr	r3, [r0, #0]
{
   1ed04:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1ed06:	6818      	ldr	r0, [r3, #0]
   1ed08:	f3bf 8f5b 	dmb	ish
   1ed0c:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1ed10:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1ed14:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1ed18:	071b      	lsls	r3, r3, #28
   1ed1a:	d420      	bmi.n	1ed5e <att_mtu_req+0x5e>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1ed1c:	688b      	ldr	r3, [r1, #8]
   1ed1e:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1ed20:	2e16      	cmp	r6, #22
   1ed22:	d91e      	bls.n	1ed62 <att_mtu_req+0x62>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1ed24:	2202      	movs	r2, #2
   1ed26:	2103      	movs	r1, #3
   1ed28:	f7e9 fc48 	bl	85bc <bt_att_create_pdu>
	if (!pdu) {
   1ed2c:	4607      	mov	r7, r0
   1ed2e:	b1d0      	cbz	r0, 1ed66 <att_mtu_req+0x66>
	return net_buf_simple_add(&buf->b, len);
   1ed30:	2102      	movs	r1, #2
   1ed32:	3008      	adds	r0, #8
   1ed34:	f000 ffc9 	bl	1fcca <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1ed38:	2341      	movs	r3, #65	; 0x41
   1ed3a:	7003      	strb	r3, [r0, #0]
   1ed3c:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1ed3e:	4639      	mov	r1, r7
   1ed40:	4620      	mov	r0, r4
   1ed42:	f7e9 f90b 	bl	7f5c <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1ed46:	2e41      	cmp	r6, #65	; 0x41
   1ed48:	bf28      	it	cs
   1ed4a:	2641      	movcs	r6, #65	; 0x41
	att_chan_mtu_updated(chan);
   1ed4c:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1ed4e:	f8a4 607a 	strh.w	r6, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1ed52:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
	att_chan_mtu_updated(chan);
   1ed56:	f7ff fd07 	bl	1e768 <att_chan_mtu_updated>
	return 0;
   1ed5a:	4628      	mov	r0, r5
}
   1ed5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1ed5e:	2006      	movs	r0, #6
   1ed60:	e7fc      	b.n	1ed5c <att_mtu_req+0x5c>
		return BT_ATT_ERR_INVALID_PDU;
   1ed62:	2004      	movs	r0, #4
   1ed64:	e7fa      	b.n	1ed5c <att_mtu_req+0x5c>
		return BT_ATT_ERR_UNLIKELY;
   1ed66:	200e      	movs	r0, #14
   1ed68:	e7f8      	b.n	1ed5c <att_mtu_req+0x5c>

0001ed6a <bt_att_init>:
	bt_gatt_init();
   1ed6a:	f7ea b991 	b.w	9090 <bt_gatt_init>

0001ed6e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1ed6e:	898a      	ldrh	r2, [r1, #12]
   1ed70:	6889      	ldr	r1, [r1, #8]
   1ed72:	2300      	movs	r3, #0
   1ed74:	f7e9 bf06 	b.w	8b84 <att_handle_rsp>

0001ed78 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   1ed78:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   1ed7c:	b570      	push	{r4, r5, r6, lr}
   1ed7e:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1ed80:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   1ed84:	2b00      	cmp	r3, #0
   1ed86:	d037      	beq.n	1edf8 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   1ed88:	b171      	cbz	r1, 1eda8 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   1ed8a:	f8d0 30ec 	ldr.w	r3, [r0, #236]	; 0xec
   1ed8e:	2b00      	cmp	r3, #0
   1ed90:	d032      	beq.n	1edf8 <bt_att_encrypt_change+0x80>
   1ed92:	7c1b      	ldrb	r3, [r3, #16]
   1ed94:	07da      	lsls	r2, r3, #31
   1ed96:	d52f      	bpl.n	1edf8 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   1ed98:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   1ed9a:	2200      	movs	r2, #0
   1ed9c:	4630      	mov	r0, r6
   1ed9e:	4611      	mov	r1, r2
}
   1eda0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   1eda4:	f7e9 beee 	b.w	8b84 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   1eda8:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   1edaa:	4628      	mov	r0, r5
   1edac:	f7ea fe06 	bl	99bc <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   1edb0:	7a6b      	ldrb	r3, [r5, #9]
   1edb2:	2b01      	cmp	r3, #1
   1edb4:	d020      	beq.n	1edf8 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   1edb6:	f8d4 40ec 	ldr.w	r4, [r4, #236]	; 0xec
   1edba:	b1ec      	cbz	r4, 1edf8 <bt_att_encrypt_change+0x80>
   1edbc:	7c23      	ldrb	r3, [r4, #16]
   1edbe:	07db      	lsls	r3, r3, #31
   1edc0:	d51a      	bpl.n	1edf8 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   1edc2:	68e3      	ldr	r3, [r4, #12]
   1edc4:	2b00      	cmp	r3, #0
   1edc6:	d0e7      	beq.n	1ed98 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   1edc8:	6962      	ldr	r2, [r4, #20]
   1edca:	7c61      	ldrb	r1, [r4, #17]
   1edcc:	4630      	mov	r0, r6
   1edce:	f7e9 fa5f 	bl	8290 <bt_att_chan_create_pdu>
	if (!buf) {
   1edd2:	4605      	mov	r5, r0
   1edd4:	b140      	cbz	r0, 1ede8 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   1edd6:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   1edda:	68e3      	ldr	r3, [r4, #12]
   1eddc:	4798      	blx	r3
   1edde:	4602      	mov	r2, r0
   1ede0:	b120      	cbz	r0, 1edec <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   1ede2:	4628      	mov	r0, r5
   1ede4:	f7fa f888 	bl	18ef8 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   1ede8:	230e      	movs	r3, #14
   1edea:	e7d6      	b.n	1ed9a <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   1edec:	4629      	mov	r1, r5
   1edee:	4630      	mov	r0, r6
   1edf0:	f7e9 f846 	bl	7e80 <chan_send>
   1edf4:	2800      	cmp	r0, #0
   1edf6:	d1f4      	bne.n	1ede2 <bt_att_encrypt_change+0x6a>
}
   1edf8:	bd70      	pop	{r4, r5, r6, pc}

0001edfa <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1edfa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1edfe:	4607      	mov	r7, r0
   1ee00:	460d      	mov	r5, r1
   1ee02:	4616      	mov	r6, r2
   1ee04:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1ee06:	f7e8 ff3d 	bl	7c84 <att_get>
	if (!att) {
   1ee0a:	4604      	mov	r4, r0
   1ee0c:	b938      	cbnz	r0, 1ee1e <bt_att_send+0x24>
		net_buf_unref(buf);
   1ee0e:	4628      	mov	r0, r5
   1ee10:	f7fa f872 	bl	18ef8 <net_buf_unref>
		return -ENOTCONN;
   1ee14:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1ee18:	b002      	add	sp, #8
   1ee1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1ee1e:	b146      	cbz	r6, 1ee32 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1ee20:	f8cd 8000 	str.w	r8, [sp]
   1ee24:	4633      	mov	r3, r6
   1ee26:	462a      	mov	r2, r5
   1ee28:	2104      	movs	r1, #4
   1ee2a:	4638      	mov	r0, r7
   1ee2c:	f7ff fbb6 	bl	1e59c <bt_l2cap_send_cb>
   1ee30:	e7f2      	b.n	1ee18 <bt_att_send+0x1e>
	net_buf_put(&att->tx_queue, buf);
   1ee32:	f100 060c 	add.w	r6, r0, #12
   1ee36:	4629      	mov	r1, r5
   1ee38:	4630      	mov	r0, r6
   1ee3a:	f000 ff07 	bl	1fc4c <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1ee3e:	2200      	movs	r2, #0
   1ee40:	2300      	movs	r3, #0
   1ee42:	4630      	mov	r0, r6
   1ee44:	f000 fee4 	bl	1fc10 <net_buf_get>
	if (!buf) {
   1ee48:	4605      	mov	r5, r0
   1ee4a:	b908      	cbnz	r0, 1ee50 <bt_att_send+0x56>
	return 0;
   1ee4c:	2000      	movs	r0, #0
   1ee4e:	e7e3      	b.n	1ee18 <bt_att_send+0x1e>
	return list->head;
   1ee50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee52:	b1c3      	cbz	r3, 1ee86 <bt_att_send+0x8c>
   1ee54:	f5b3 70a2 	subs.w	r0, r3, #324	; 0x144
   1ee58:	d015      	beq.n	1ee86 <bt_att_send+0x8c>
	return node->next;
   1ee5a:	681c      	ldr	r4, [r3, #0]
   1ee5c:	b10c      	cbz	r4, 1ee62 <bt_att_send+0x68>
   1ee5e:	f5a4 74a2 	sub.w	r4, r4, #324	; 0x144
	return chan_send(chan, buf, cb);
   1ee62:	2200      	movs	r2, #0
   1ee64:	4629      	mov	r1, r5
   1ee66:	f7e9 f80b 	bl	7e80 <chan_send>
		if (err >= 0) {
   1ee6a:	2800      	cmp	r0, #0
   1ee6c:	daee      	bge.n	1ee4c <bt_att_send+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ee6e:	b154      	cbz	r4, 1ee86 <bt_att_send+0x8c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee70:	f514 73a2 	adds.w	r3, r4, #324	; 0x144
   1ee74:	d004      	beq.n	1ee80 <bt_att_send+0x86>
	return node->next;
   1ee76:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
   1ee7a:	b10b      	cbz	r3, 1ee80 <bt_att_send+0x86>
   1ee7c:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
{
   1ee80:	4620      	mov	r0, r4
   1ee82:	461c      	mov	r4, r3
   1ee84:	e7ed      	b.n	1ee62 <bt_att_send+0x68>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1ee86:	4629      	mov	r1, r5
   1ee88:	4630      	mov	r0, r6
   1ee8a:	f001 f9ff 	bl	2028c <k_queue_prepend>
   1ee8e:	e7dd      	b.n	1ee4c <bt_att_send+0x52>

0001ee90 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1ee90:	b510      	push	{r4, lr}
   1ee92:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1ee94:	f7e8 fef6 	bl	7c84 <att_get>
	if (!att) {
   1ee98:	b160      	cbz	r0, 1eeb4 <bt_att_req_send+0x24>
	parent->next = child;
   1ee9a:	2300      	movs	r3, #0
   1ee9c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1ee9e:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1eea0:	b92b      	cbnz	r3, 1eeae <bt_att_req_send+0x1e>
	list->head = node;
   1eea2:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1eea6:	f7ff fe3c 	bl	1eb22 <att_req_send_process>

	return 0;
   1eeaa:	2000      	movs	r0, #0
}
   1eeac:	bd10      	pop	{r4, pc}
	parent->next = child;
   1eeae:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1eeb0:	6084      	str	r4, [r0, #8]
}
   1eeb2:	e7f8      	b.n	1eea6 <bt_att_req_send+0x16>
		return -ENOTCONN;
   1eeb4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1eeb8:	e7f8      	b.n	1eeac <bt_att_req_send+0x1c>

0001eeba <gatt_ccc_changed>:
{
   1eeba:	460b      	mov	r3, r1
   1eebc:	8909      	ldrh	r1, [r1, #8]
   1eebe:	8a5a      	ldrh	r2, [r3, #18]
   1eec0:	4291      	cmp	r1, r2
   1eec2:	bf38      	it	cc
   1eec4:	4611      	movcc	r1, r2
	if (value != ccc->value) {
   1eec6:	8a9a      	ldrh	r2, [r3, #20]
   1eec8:	428a      	cmp	r2, r1
   1eeca:	d003      	beq.n	1eed4 <gatt_ccc_changed+0x1a>
		ccc->value = value;
   1eecc:	8299      	strh	r1, [r3, #20]
		if (ccc->cfg_changed) {
   1eece:	699b      	ldr	r3, [r3, #24]
   1eed0:	b103      	cbz	r3, 1eed4 <gatt_ccc_changed+0x1a>
			ccc->cfg_changed(attr, value);
   1eed2:	4718      	bx	r3
}
   1eed4:	4770      	bx	lr

0001eed6 <gatt_indicate_rsp>:
{
   1eed6:	b510      	push	{r4, lr}
   1eed8:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   1eeda:	68a3      	ldr	r3, [r4, #8]
{
   1eedc:	460a      	mov	r2, r1
	if (params->func) {
   1eede:	b10b      	cbz	r3, 1eee4 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   1eee0:	4621      	mov	r1, r4
   1eee2:	4798      	blx	r3
	params->_ref--;
   1eee4:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1eee6:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   1eee8:	3b01      	subs	r3, #1
   1eeea:	b2db      	uxtb	r3, r3
   1eeec:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   1eeee:	b122      	cbz	r2, 1eefa <gatt_indicate_rsp+0x24>
   1eef0:	b91b      	cbnz	r3, 1eefa <gatt_indicate_rsp+0x24>
		params->destroy(params);
   1eef2:	4620      	mov	r0, r4
}
   1eef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   1eef8:	4710      	bx	r2
}
   1eefa:	bd10      	pop	{r4, pc}

0001eefc <match_uuid>:
	data->attr = attr;
   1eefc:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1eefe:	8091      	strh	r1, [r2, #4]
}
   1ef00:	2000      	movs	r0, #0
   1ef02:	4770      	bx	lr

0001ef04 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1ef04:	2207      	movs	r2, #7
   1ef06:	f7fe bd81 	b.w	1da0c <memcpy>

0001ef0a <write_name>:
{
   1ef0a:	b570      	push	{r4, r5, r6, lr}
   1ef0c:	b092      	sub	sp, #72	; 0x48
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1ef0e:	2100      	movs	r1, #0
{
   1ef10:	f8bd 5058 	ldrh.w	r5, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1ef14:	9101      	str	r1, [sp, #4]
{
   1ef16:	4616      	mov	r6, r2
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1ef18:	a802      	add	r0, sp, #8
   1ef1a:	223d      	movs	r2, #61	; 0x3d
{
   1ef1c:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   1ef1e:	f7fe fd80 	bl	1da22 <memset>
	if (offset >= sizeof(value)) {
   1ef22:	2d40      	cmp	r5, #64	; 0x40
   1ef24:	d80d      	bhi.n	1ef42 <write_name+0x38>
	if (offset + len >= sizeof(value)) {
   1ef26:	4425      	add	r5, r4
   1ef28:	2d40      	cmp	r5, #64	; 0x40
   1ef2a:	dc0d      	bgt.n	1ef48 <write_name+0x3e>
	memcpy(value, buf, len);
   1ef2c:	4622      	mov	r2, r4
   1ef2e:	4631      	mov	r1, r6
   1ef30:	a801      	add	r0, sp, #4
   1ef32:	f7fe fd6b 	bl	1da0c <memcpy>
	bt_set_name(value);
   1ef36:	a801      	add	r0, sp, #4
   1ef38:	f7e6 fefc 	bl	5d34 <bt_set_name>
}
   1ef3c:	4620      	mov	r0, r4
   1ef3e:	b012      	add	sp, #72	; 0x48
   1ef40:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1ef42:	f06f 0406 	mvn.w	r4, #6
   1ef46:	e7f9      	b.n	1ef3c <write_name+0x32>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1ef48:	f06f 040c 	mvn.w	r4, #12
   1ef4c:	e7f6      	b.n	1ef3c <write_name+0x32>

0001ef4e <gen_hash_m>:
{
   1ef4e:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ef50:	6807      	ldr	r7, [r0, #0]
   1ef52:	783d      	ldrb	r5, [r7, #0]
{
   1ef54:	b089      	sub	sp, #36	; 0x24
   1ef56:	4606      	mov	r6, r0
   1ef58:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   1ef5a:	b10d      	cbz	r5, 1ef60 <gen_hash_m+0x12>
	switch (u16->val) {
   1ef5c:	2501      	movs	r5, #1
   1ef5e:	e014      	b.n	1ef8a <gen_hash_m+0x3c>
   1ef60:	887b      	ldrh	r3, [r7, #2]
   1ef62:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   1ef66:	d004      	beq.n	1ef72 <gen_hash_m+0x24>
   1ef68:	d812      	bhi.n	1ef90 <gen_hash_m+0x42>
   1ef6a:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   1ef6e:	2b03      	cmp	r3, #3
   1ef70:	d8f4      	bhi.n	1ef5c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ef72:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1ef76:	2202      	movs	r2, #2
   1ef78:	f10d 010e 	add.w	r1, sp, #14
   1ef7c:	4620      	mov	r0, r4
   1ef7e:	f7fe fc4d 	bl	1d81c <tc_cmac_update>
   1ef82:	b9e0      	cbnz	r0, 1efbe <gen_hash_m+0x70>
			state->err = -EINVAL;
   1ef84:	f06f 0315 	mvn.w	r3, #21
   1ef88:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1ef8a:	4628      	mov	r0, r5
   1ef8c:	b009      	add	sp, #36	; 0x24
   1ef8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   1ef90:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   1ef94:	33ff      	adds	r3, #255	; 0xff
   1ef96:	b29b      	uxth	r3, r3
   1ef98:	2b04      	cmp	r3, #4
   1ef9a:	d8df      	bhi.n	1ef5c <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   1ef9c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1efa0:	2202      	movs	r2, #2
   1efa2:	f10d 010e 	add.w	r1, sp, #14
   1efa6:	4620      	mov	r0, r4
   1efa8:	f7fe fc38 	bl	1d81c <tc_cmac_update>
   1efac:	2800      	cmp	r0, #0
   1efae:	d0e9      	beq.n	1ef84 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   1efb0:	887b      	ldrh	r3, [r7, #2]
   1efb2:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1efb6:	2202      	movs	r2, #2
   1efb8:	f10d 010e 	add.w	r1, sp, #14
   1efbc:	e017      	b.n	1efee <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   1efbe:	887b      	ldrh	r3, [r7, #2]
   1efc0:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1efc4:	2202      	movs	r2, #2
   1efc6:	f10d 010e 	add.w	r1, sp, #14
   1efca:	4620      	mov	r0, r4
   1efcc:	f7fe fc26 	bl	1d81c <tc_cmac_update>
   1efd0:	2800      	cmp	r0, #0
   1efd2:	d0d7      	beq.n	1ef84 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   1efd4:	2000      	movs	r0, #0
   1efd6:	2310      	movs	r3, #16
   1efd8:	eb0d 0203 	add.w	r2, sp, r3
   1efdc:	6877      	ldr	r7, [r6, #4]
   1efde:	9000      	str	r0, [sp, #0]
   1efe0:	4631      	mov	r1, r6
   1efe2:	47b8      	blx	r7
		if (len < 0) {
   1efe4:	1e02      	subs	r2, r0, #0
   1efe6:	da01      	bge.n	1efec <gen_hash_m+0x9e>
			state->err = len;
   1efe8:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   1efea:	e7ce      	b.n	1ef8a <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   1efec:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   1efee:	4620      	mov	r0, r4
   1eff0:	f7fe fc14 	bl	1d81c <tc_cmac_update>
   1eff4:	2800      	cmp	r0, #0
   1eff6:	d1b1      	bne.n	1ef5c <gen_hash_m+0xe>
   1eff8:	e7c4      	b.n	1ef84 <gen_hash_m+0x36>

0001effa <clear_cf_cfg>:
{
   1effa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1effc:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1effe:	2500      	movs	r5, #0
   1f000:	4669      	mov	r1, sp
   1f002:	3001      	adds	r0, #1
   1f004:	9500      	str	r5, [sp, #0]
   1f006:	f8cd 5003 	str.w	r5, [sp, #3]
   1f00a:	f7ff ff7b 	bl	1ef04 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   1f00e:	f104 0008 	add.w	r0, r4, #8
   1f012:	2201      	movs	r2, #1
   1f014:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f016:	340c      	adds	r4, #12
   1f018:	f7fe fd03 	bl	1da22 <memset>
   1f01c:	f3bf 8f5b 	dmb	ish
   1f020:	e854 3f00 	ldrex	r3, [r4]
   1f024:	e844 5200 	strex	r2, r5, [r4]
   1f028:	2a00      	cmp	r2, #0
   1f02a:	d1f9      	bne.n	1f020 <clear_cf_cfg+0x26>
   1f02c:	f3bf 8f5b 	dmb	ish
}
   1f030:	b003      	add	sp, #12
   1f032:	bd30      	pop	{r4, r5, pc}

0001f034 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f034:	2301      	movs	r3, #1
   1f036:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f038:	f3bf 8f5b 	dmb	ish
   1f03c:	e850 2f00 	ldrex	r2, [r0]
   1f040:	431a      	orrs	r2, r3
   1f042:	e840 2100 	strex	r1, r2, [r0]
   1f046:	2900      	cmp	r1, #0
   1f048:	d1f8      	bne.n	1f03c <atomic_set_bit+0x8>
   1f04a:	f3bf 8f5b 	dmb	ish
}
   1f04e:	4770      	bx	lr

0001f050 <sc_restore_rsp>:
{
   1f050:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   1f052:	f7e9 fe59 	bl	8d08 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1f056:	b140      	cbz	r0, 1f06a <sc_restore_rsp+0x1a>
   1f058:	7a03      	ldrb	r3, [r0, #8]
   1f05a:	07db      	lsls	r3, r3, #31
   1f05c:	d505      	bpl.n	1f06a <sc_restore_rsp+0x1a>
}
   1f05e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1f062:	2100      	movs	r1, #0
   1f064:	300c      	adds	r0, #12
   1f066:	f7ff bfe5 	b.w	1f034 <atomic_set_bit>
}
   1f06a:	bd08      	pop	{r3, pc}

0001f06c <read_ppcp>:
{
   1f06c:	b513      	push	{r0, r1, r4, lr}
   1f06e:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1f070:	2218      	movs	r2, #24
{
   1f072:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   1f076:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   1f07a:	2228      	movs	r2, #40	; 0x28
   1f07c:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   1f080:	2200      	movs	r2, #0
   1f082:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   1f086:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   1f088:	f04f 022a 	mov.w	r2, #42	; 0x2a
   1f08c:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f090:	d80b      	bhi.n	1f0aa <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   1f092:	f1c1 0408 	rsb	r4, r1, #8
   1f096:	429c      	cmp	r4, r3
   1f098:	bfa8      	it	ge
   1f09a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f09c:	4622      	mov	r2, r4
   1f09e:	4469      	add	r1, sp
   1f0a0:	f7fe fcb4 	bl	1da0c <memcpy>
}
   1f0a4:	4620      	mov	r0, r4
   1f0a6:	b002      	add	sp, #8
   1f0a8:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f0aa:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   1f0ae:	e7f9      	b.n	1f0a4 <read_ppcp+0x38>

0001f0b0 <read_appearance>:
{
   1f0b0:	b513      	push	{r0, r1, r4, lr}
   1f0b2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f0b6:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f0b8:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1f0ba:	f240 3241 	movw	r2, #833	; 0x341
   1f0be:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1f0c2:	d80d      	bhi.n	1f0e0 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1f0c4:	f1c1 0402 	rsb	r4, r1, #2
   1f0c8:	429c      	cmp	r4, r3
   1f0ca:	bfa8      	it	ge
   1f0cc:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f0ce:	f10d 0306 	add.w	r3, sp, #6
   1f0d2:	4622      	mov	r2, r4
   1f0d4:	4419      	add	r1, r3
   1f0d6:	f7fe fc99 	bl	1da0c <memcpy>
}
   1f0da:	4620      	mov	r0, r4
   1f0dc:	b002      	add	sp, #8
   1f0de:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f0e0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1f0e4:	e7f9      	b.n	1f0da <read_appearance+0x2a>

0001f0e6 <read_name>:
{
   1f0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f0ea:	4698      	mov	r8, r3
   1f0ec:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1f0f0:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1f0f2:	f7e6 feb7 	bl	5e64 <bt_get_name>
   1f0f6:	4607      	mov	r7, r0
				 strlen(name));
   1f0f8:	f7fe fc5b 	bl	1d9b2 <strlen>
	if (offset > value_len) {
   1f0fc:	b283      	uxth	r3, r0
   1f0fe:	42b3      	cmp	r3, r6
   1f100:	d30c      	bcc.n	1f11c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1f102:	1b9c      	subs	r4, r3, r6
   1f104:	4544      	cmp	r4, r8
   1f106:	bfa8      	it	ge
   1f108:	4644      	movge	r4, r8
   1f10a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1f10c:	4622      	mov	r2, r4
   1f10e:	19b9      	adds	r1, r7, r6
   1f110:	4628      	mov	r0, r5
   1f112:	f7fe fc7b 	bl	1da0c <memcpy>
}
   1f116:	4620      	mov	r0, r4
   1f118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f11c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1f120:	e7f9      	b.n	1f116 <read_name+0x30>

0001f122 <cf_read>:
{
   1f122:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f124:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   1f126:	2300      	movs	r3, #0
{
   1f128:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   1f12c:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f130:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   1f132:	f7e9 fde9 	bl	8d08 <find_cf_cfg>
	if (cfg) {
   1f136:	b128      	cbz	r0, 1f144 <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   1f138:	f100 0108 	add.w	r1, r0, #8
   1f13c:	2201      	movs	r2, #1
   1f13e:	a801      	add	r0, sp, #4
   1f140:	f7fe fc64 	bl	1da0c <memcpy>
	if (offset > value_len) {
   1f144:	2e01      	cmp	r6, #1
   1f146:	d80d      	bhi.n	1f164 <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   1f148:	f1c6 0401 	rsb	r4, r6, #1
   1f14c:	42bc      	cmp	r4, r7
   1f14e:	bfa8      	it	ge
   1f150:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f152:	ab01      	add	r3, sp, #4
   1f154:	4622      	mov	r2, r4
   1f156:	1999      	adds	r1, r3, r6
   1f158:	4628      	mov	r0, r5
   1f15a:	f7fe fc57 	bl	1da0c <memcpy>
}
   1f15e:	4620      	mov	r0, r4
   1f160:	b003      	add	sp, #12
   1f162:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f164:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   1f168:	e7f9      	b.n	1f15e <cf_read+0x3c>

0001f16a <bt_gatt_attr_read_service>:
{
   1f16a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1f16c:	68c9      	ldr	r1, [r1, #12]
{
   1f16e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1f172:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1f174:	780b      	ldrb	r3, [r1, #0]
{
   1f176:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1f178:	b993      	cbnz	r3, 1f1a0 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1f17a:	884b      	ldrh	r3, [r1, #2]
   1f17c:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1f180:	2d02      	cmp	r5, #2
   1f182:	d819      	bhi.n	1f1b8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f184:	f1c5 0202 	rsb	r2, r5, #2
   1f188:	4294      	cmp	r4, r2
   1f18a:	bfa8      	it	ge
   1f18c:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f18e:	f10d 0306 	add.w	r3, sp, #6
   1f192:	4622      	mov	r2, r4
   1f194:	1959      	adds	r1, r3, r5
   1f196:	f7fe fc39 	bl	1da0c <memcpy>
}
   1f19a:	4620      	mov	r0, r4
   1f19c:	b003      	add	sp, #12
   1f19e:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1f1a0:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1f1a2:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1f1a6:	d807      	bhi.n	1f1b8 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1f1a8:	f1c5 0210 	rsb	r2, r5, #16
   1f1ac:	4294      	cmp	r4, r2
   1f1ae:	bfa8      	it	ge
   1f1b0:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1f1b2:	4622      	mov	r2, r4
   1f1b4:	4429      	add	r1, r5
   1f1b6:	e7ee      	b.n	1f196 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f1b8:	f06f 0406 	mvn.w	r4, #6
   1f1bc:	e7ed      	b.n	1f19a <bt_gatt_attr_read_service+0x30>

0001f1be <find_ccc_cfg>:
{
   1f1be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1f1c0:	4606      	mov	r6, r0
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f1c2:	1c4c      	adds	r4, r1, #1
   1f1c4:	f101 0515 	add.w	r5, r1, #21
		struct bt_gatt_ccc_cfg *cfg = &ccc->cfg[i];
   1f1c8:	1e67      	subs	r7, r4, #1
		if (conn) {
   1f1ca:	b14e      	cbz	r6, 1f1e0 <find_ccc_cfg+0x22>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1f1cc:	f814 1c01 	ldrb.w	r1, [r4, #-1]
   1f1d0:	4622      	mov	r2, r4
   1f1d2:	4630      	mov	r0, r6
   1f1d4:	f7ff f901 	bl	1e3da <bt_conn_is_peer_addr_le>
   1f1d8:	b160      	cbz	r0, 1f1f4 <find_ccc_cfg+0x36>
}
   1f1da:	4638      	mov	r0, r7
   1f1dc:	b003      	add	sp, #12
   1f1de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return memcmp(a, b, sizeof(*a));
   1f1e0:	2207      	movs	r2, #7
   1f1e2:	4669      	mov	r1, sp
   1f1e4:	4620      	mov	r0, r4
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1f1e6:	9600      	str	r6, [sp, #0]
   1f1e8:	f8cd 6003 	str.w	r6, [sp, #3]
   1f1ec:	f7fe fbfd 	bl	1d9ea <memcmp>
   1f1f0:	2800      	cmp	r0, #0
   1f1f2:	d0f2      	beq.n	1f1da <find_ccc_cfg+0x1c>
	for (size_t i = 0; i < ARRAY_SIZE(ccc->cfg); i++) {
   1f1f4:	340a      	adds	r4, #10
   1f1f6:	42ac      	cmp	r4, r5
   1f1f8:	d1e6      	bne.n	1f1c8 <find_ccc_cfg+0xa>
	return NULL;
   1f1fa:	2700      	movs	r7, #0
   1f1fc:	e7ed      	b.n	1f1da <find_ccc_cfg+0x1c>

0001f1fe <bt_gatt_attr_read_ccc>:
{
   1f1fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1f200:	68c9      	ldr	r1, [r1, #12]
{
   1f202:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1f206:	4615      	mov	r5, r2
   1f208:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1f20a:	f7ff ffd8 	bl	1f1be <find_ccc_cfg>
	if (cfg) {
   1f20e:	b100      	cbz	r0, 1f212 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1f210:	8900      	ldrh	r0, [r0, #8]
   1f212:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1f216:	2e02      	cmp	r6, #2
   1f218:	d80e      	bhi.n	1f238 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1f21a:	f1c6 0402 	rsb	r4, r6, #2
   1f21e:	42bc      	cmp	r4, r7
   1f220:	bfa8      	it	ge
   1f222:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1f224:	f10d 0306 	add.w	r3, sp, #6
   1f228:	4622      	mov	r2, r4
   1f22a:	1999      	adds	r1, r3, r6
   1f22c:	4628      	mov	r0, r5
   1f22e:	f7fe fbed 	bl	1da0c <memcpy>
}
   1f232:	4620      	mov	r0, r4
   1f234:	b003      	add	sp, #12
   1f236:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f238:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1f23c:	e7f9      	b.n	1f232 <bt_gatt_attr_read_ccc+0x34>

0001f23e <sc_clear>:
{
   1f23e:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f240:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1f244:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f246:	4631      	mov	r1, r6
   1f248:	7a00      	ldrb	r0, [r0, #8]
   1f24a:	f7fe fdeb 	bl	1de24 <bt_addr_le_is_bonded>
   1f24e:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1f250:	4631      	mov	r1, r6
   1f252:	f7e9 fe37 	bl	8ec4 <find_sc_cfg>
	if (!cfg) {
   1f256:	b128      	cbz	r0, 1f264 <sc_clear+0x26>
}
   1f258:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1f25c:	220c      	movs	r2, #12
   1f25e:	2100      	movs	r1, #0
   1f260:	f7fe bbdf 	b.w	1da22 <memset>
}
   1f264:	bd70      	pop	{r4, r5, r6, pc}

0001f266 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1f266:	2a02      	cmp	r2, #2
{
   1f268:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1f26a:	d108      	bne.n	1f27e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1f26c:	2300      	movs	r3, #0
   1f26e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1f272:	461a      	mov	r2, r3
   1f274:	7a00      	ldrb	r0, [r0, #8]
   1f276:	f7e9 fe47 	bl	8f08 <sc_save>
}
   1f27a:	2002      	movs	r0, #2
   1f27c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1f27e:	f7ff ffde 	bl	1f23e <sc_clear>
   1f282:	e7fa      	b.n	1f27a <sc_ccc_cfg_write+0x14>

0001f284 <bt_gatt_attr_read>:
{
   1f284:	b538      	push	{r3, r4, r5, lr}
   1f286:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f28a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1f28e:	42a9      	cmp	r1, r5
{
   1f290:	4610      	mov	r0, r2
	if (offset > value_len) {
   1f292:	d80b      	bhi.n	1f2ac <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1f294:	1a6d      	subs	r5, r5, r1
   1f296:	429d      	cmp	r5, r3
   1f298:	bfa8      	it	ge
   1f29a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1f29c:	9b05      	ldr	r3, [sp, #20]
   1f29e:	b2ad      	uxth	r5, r5
   1f2a0:	462a      	mov	r2, r5
   1f2a2:	4419      	add	r1, r3
   1f2a4:	f7fe fbb2 	bl	1da0c <memcpy>
}
   1f2a8:	4628      	mov	r0, r5
   1f2aa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f2ac:	f06f 0506 	mvn.w	r5, #6
   1f2b0:	e7fa      	b.n	1f2a8 <bt_gatt_attr_read+0x24>

0001f2b2 <bt_gatt_attr_value_handle>:
{
   1f2b2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f2b4:	4604      	mov	r4, r0
   1f2b6:	b910      	cbnz	r0, 1f2be <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   1f2b8:	2000      	movs	r0, #0
}
   1f2ba:	b002      	add	sp, #8
   1f2bc:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   1f2be:	2300      	movs	r3, #0
   1f2c0:	f88d 3004 	strb.w	r3, [sp, #4]
   1f2c4:	6800      	ldr	r0, [r0, #0]
   1f2c6:	f642 0303 	movw	r3, #10243	; 0x2803
   1f2ca:	a901      	add	r1, sp, #4
   1f2cc:	f8ad 3006 	strh.w	r3, [sp, #6]
   1f2d0:	f7fe fc5a 	bl	1db88 <bt_uuid_cmp>
   1f2d4:	2800      	cmp	r0, #0
   1f2d6:	d1ef      	bne.n	1f2b8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   1f2d8:	68e3      	ldr	r3, [r4, #12]
   1f2da:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   1f2dc:	2800      	cmp	r0, #0
   1f2de:	d1ec      	bne.n	1f2ba <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   1f2e0:	4620      	mov	r0, r4
   1f2e2:	f7e9 ff39 	bl	9158 <bt_gatt_attr_get_handle>
   1f2e6:	3001      	adds	r0, #1
   1f2e8:	b280      	uxth	r0, r0
	return handle;
   1f2ea:	e7e6      	b.n	1f2ba <bt_gatt_attr_value_handle+0x8>

0001f2ec <bt_gatt_attr_read_chrc>:
{
   1f2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1f2ee:	68cf      	ldr	r7, [r1, #12]
{
   1f2f0:	b087      	sub	sp, #28
   1f2f2:	4608      	mov	r0, r1
   1f2f4:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1f2f6:	79bb      	ldrb	r3, [r7, #6]
   1f2f8:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1f2fc:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1f300:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f302:	f7ff ffd6 	bl	1f2b2 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f306:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1f308:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1f30c:	780b      	ldrb	r3, [r1, #0]
   1f30e:	b99b      	cbnz	r3, 1f338 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1f310:	884b      	ldrh	r3, [r1, #2]
   1f312:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1f316:	2105      	movs	r1, #5
	if (offset > value_len) {
   1f318:	42b1      	cmp	r1, r6
   1f31a:	d315      	bcc.n	1f348 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1f31c:	1b89      	subs	r1, r1, r6
   1f31e:	42a1      	cmp	r1, r4
   1f320:	bfa8      	it	ge
   1f322:	4621      	movge	r1, r4
   1f324:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1f326:	ab01      	add	r3, sp, #4
   1f328:	4622      	mov	r2, r4
   1f32a:	1999      	adds	r1, r3, r6
   1f32c:	4628      	mov	r0, r5
   1f32e:	f7fe fb6d 	bl	1da0c <memcpy>
}
   1f332:	4620      	mov	r0, r4
   1f334:	b007      	add	sp, #28
   1f336:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1f338:	3101      	adds	r1, #1
   1f33a:	2210      	movs	r2, #16
   1f33c:	f10d 0007 	add.w	r0, sp, #7
   1f340:	f7fe fb64 	bl	1da0c <memcpy>
		value_len += 16U;
   1f344:	2113      	movs	r1, #19
   1f346:	e7e7      	b.n	1f318 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1f348:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1f34c:	e7f1      	b.n	1f332 <bt_gatt_attr_read_chrc+0x46>

0001f34e <bt_gatt_foreach_attr>:
{
   1f34e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1f350:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1f354:	2300      	movs	r3, #0
   1f356:	9300      	str	r3, [sp, #0]
   1f358:	461a      	mov	r2, r3
   1f35a:	f7e9 ff2d 	bl	91b8 <bt_gatt_foreach_attr_type>
}
   1f35e:	b005      	add	sp, #20
   1f360:	f85d fb04 	ldr.w	pc, [sp], #4

0001f364 <db_hash_process>:
	db_hash_gen(true);
   1f364:	f7e9 bf82 	b.w	926c <db_hash_gen.constprop.0>

0001f368 <bt_gatt_check_perm>:
{
   1f368:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1f36a:	07d4      	lsls	r4, r2, #31
{
   1f36c:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f36e:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1f370:	d504      	bpl.n	1f37c <bt_gatt_check_perm+0x14>
   1f372:	f010 0f15 	tst.w	r0, #21
   1f376:	d01e      	beq.n	1f3b6 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1f378:	684b      	ldr	r3, [r1, #4]
   1f37a:	b1e3      	cbz	r3, 1f3b6 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1f37c:	0793      	lsls	r3, r2, #30
   1f37e:	d504      	bpl.n	1f38a <bt_gatt_check_perm+0x22>
   1f380:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1f384:	d019      	beq.n	1f3ba <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1f386:	688b      	ldr	r3, [r1, #8]
   1f388:	b1bb      	cbz	r3, 1f3ba <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1f38a:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1f38e:	f014 0f30 	tst.w	r4, #48	; 0x30
   1f392:	d103      	bne.n	1f39c <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1f394:	f014 000c 	ands.w	r0, r4, #12
   1f398:	d107      	bne.n	1f3aa <bt_gatt_check_perm+0x42>
}
   1f39a:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1f39c:	4628      	mov	r0, r5
   1f39e:	f7ff f81a 	bl	1e3d6 <bt_conn_get_security>
   1f3a2:	2802      	cmp	r0, #2
   1f3a4:	d8f6      	bhi.n	1f394 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1f3a6:	2005      	movs	r0, #5
   1f3a8:	e7f7      	b.n	1f39a <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1f3aa:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1f3ac:	2b00      	cmp	r3, #0
   1f3ae:	bf14      	ite	ne
   1f3b0:	2000      	movne	r0, #0
   1f3b2:	200f      	moveq	r0, #15
   1f3b4:	e7f1      	b.n	1f39a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1f3b6:	2002      	movs	r0, #2
   1f3b8:	e7ef      	b.n	1f39a <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1f3ba:	2003      	movs	r0, #3
   1f3bc:	e7ed      	b.n	1f39a <bt_gatt_check_perm+0x32>

0001f3be <bt_gatt_change_aware>:
{
   1f3be:	b510      	push	{r4, lr}
   1f3c0:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   1f3c2:	f7e9 fca1 	bl	8d08 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f3c6:	4603      	mov	r3, r0
   1f3c8:	b910      	cbnz	r0, 1f3d0 <bt_gatt_change_aware+0x12>
		return true;
   1f3ca:	2401      	movs	r4, #1
}
   1f3cc:	4620      	mov	r0, r4
   1f3ce:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   1f3d0:	7a02      	ldrb	r2, [r0, #8]
   1f3d2:	07d2      	lsls	r2, r2, #31
   1f3d4:	d5f9      	bpl.n	1f3ca <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f3d6:	f3bf 8f5b 	dmb	ish
   1f3da:	68d9      	ldr	r1, [r3, #12]
   1f3dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   1f3e0:	f011 0101 	ands.w	r1, r1, #1
   1f3e4:	f100 000c 	add.w	r0, r0, #12
   1f3e8:	d1ef      	bne.n	1f3ca <bt_gatt_change_aware+0xc>
	if (!req) {
   1f3ea:	2c00      	cmp	r4, #0
   1f3ec:	d0ee      	beq.n	1f3cc <bt_gatt_change_aware+0xe>
   1f3ee:	f3bf 8f5b 	dmb	ish
   1f3f2:	68db      	ldr	r3, [r3, #12]
   1f3f4:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f3f8:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   1f3fc:	079b      	lsls	r3, r3, #30
   1f3fe:	d50e      	bpl.n	1f41e <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f400:	f3bf 8f5b 	dmb	ish
   1f404:	e850 3f00 	ldrex	r3, [r0]
   1f408:	f023 0302 	bic.w	r3, r3, #2
   1f40c:	e840 3200 	strex	r2, r3, [r0]
   1f410:	2a00      	cmp	r2, #0
   1f412:	d1f7      	bne.n	1f404 <bt_gatt_change_aware+0x46>
   1f414:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f418:	f7ff fe0c 	bl	1f034 <atomic_set_bit>
	return false;
   1f41c:	e7d6      	b.n	1f3cc <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   1f41e:	2101      	movs	r1, #1
   1f420:	e7fa      	b.n	1f418 <bt_gatt_change_aware+0x5a>

0001f422 <sys_memcpy_swap>:
	psrc += length - 1;
   1f422:	1e53      	subs	r3, r2, #1
   1f424:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1f426:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1f428:	f811 3901 	ldrb.w	r3, [r1], #-1
   1f42c:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1f430:	4290      	cmp	r0, r2
   1f432:	d1f9      	bne.n	1f428 <sys_memcpy_swap+0x6>
}
   1f434:	4770      	bx	lr

0001f436 <sys_mem_swap>:
{
   1f436:	b510      	push	{r4, lr}
   1f438:	1843      	adds	r3, r0, r1
   1f43a:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1f43e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   1f442:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1f444:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   1f448:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1f44a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1f44c:	d1f7      	bne.n	1f43e <sys_mem_swap+0x8>
	}
}
   1f44e:	bd10      	pop	{r4, pc}

0001f450 <smp_pairing_rsp>:
}
   1f450:	2007      	movs	r0, #7
   1f452:	4770      	bx	lr

0001f454 <bt_smp_aes_cmac>:
{
   1f454:	b570      	push	{r4, r5, r6, lr}
   1f456:	b0c2      	sub	sp, #264	; 0x108
   1f458:	460d      	mov	r5, r1
   1f45a:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f45c:	4601      	mov	r1, r0
   1f45e:	aa16      	add	r2, sp, #88	; 0x58
   1f460:	4668      	mov	r0, sp
{
   1f462:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1f464:	f7fe f9af 	bl	1d7c6 <tc_cmac_setup>
   1f468:	b150      	cbz	r0, 1f480 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1f46a:	4632      	mov	r2, r6
   1f46c:	4629      	mov	r1, r5
   1f46e:	4668      	mov	r0, sp
   1f470:	f7fe f9d4 	bl	1d81c <tc_cmac_update>
   1f474:	b120      	cbz	r0, 1f480 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1f476:	4669      	mov	r1, sp
   1f478:	4620      	mov	r0, r4
   1f47a:	f7fe fa3a 	bl	1d8f2 <tc_cmac_final>
   1f47e:	b918      	cbnz	r0, 1f488 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1f480:	f06f 0004 	mvn.w	r0, #4
}
   1f484:	b042      	add	sp, #264	; 0x108
   1f486:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1f488:	2000      	movs	r0, #0
   1f48a:	e7fb      	b.n	1f484 <bt_smp_aes_cmac+0x30>

0001f48c <smp_f4>:
{
   1f48c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f48e:	b097      	sub	sp, #92	; 0x5c
   1f490:	4614      	mov	r4, r2
   1f492:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1f494:	2220      	movs	r2, #32
   1f496:	4601      	mov	r1, r0
   1f498:	a805      	add	r0, sp, #20
{
   1f49a:	461d      	mov	r5, r3
   1f49c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1f49e:	f7ff ffc0 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1f4a2:	2220      	movs	r2, #32
   1f4a4:	4631      	mov	r1, r6
   1f4a6:	a80d      	add	r0, sp, #52	; 0x34
   1f4a8:	f7ff ffbb 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1f4ac:	4621      	mov	r1, r4
   1f4ae:	2210      	movs	r2, #16
   1f4b0:	a801      	add	r0, sp, #4
	m[64] = z;
   1f4b2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1f4b6:	f7ff ffb4 	bl	1f422 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1f4ba:	463b      	mov	r3, r7
   1f4bc:	2241      	movs	r2, #65	; 0x41
   1f4be:	a905      	add	r1, sp, #20
   1f4c0:	a801      	add	r0, sp, #4
   1f4c2:	f7ff ffc7 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
   1f4c6:	4604      	mov	r4, r0
   1f4c8:	b918      	cbnz	r0, 1f4d2 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   1f4ca:	2110      	movs	r1, #16
   1f4cc:	4638      	mov	r0, r7
   1f4ce:	f7ff ffb2 	bl	1f436 <sys_mem_swap>
}
   1f4d2:	4620      	mov	r0, r4
   1f4d4:	b017      	add	sp, #92	; 0x5c
   1f4d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f4d8 <smp_f6>:
{
   1f4d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4da:	b097      	sub	sp, #92	; 0x5c
   1f4dc:	4605      	mov	r5, r0
   1f4de:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1f4e0:	a805      	add	r0, sp, #20
   1f4e2:	2210      	movs	r2, #16
{
   1f4e4:	461c      	mov	r4, r3
   1f4e6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1f4e8:	f7ff ff9b 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1f4ec:	2210      	movs	r2, #16
   1f4ee:	4631      	mov	r1, r6
   1f4f0:	a809      	add	r0, sp, #36	; 0x24
   1f4f2:	f7ff ff96 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1f4f6:	4621      	mov	r1, r4
   1f4f8:	2210      	movs	r2, #16
   1f4fa:	a80d      	add	r0, sp, #52	; 0x34
   1f4fc:	f7ff ff91 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1f500:	991c      	ldr	r1, [sp, #112]	; 0x70
   1f502:	2203      	movs	r2, #3
   1f504:	a811      	add	r0, sp, #68	; 0x44
   1f506:	f7ff ff8c 	bl	1f422 <sys_memcpy_swap>
	m[51] = a1->type;
   1f50a:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1f50c:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f510:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1f514:	4621      	mov	r1, r4
   1f516:	2206      	movs	r2, #6
   1f518:	a812      	add	r0, sp, #72	; 0x48
   1f51a:	f7fe fa77 	bl	1da0c <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1f51e:	4621      	mov	r1, r4
   1f520:	2206      	movs	r2, #6
   1f522:	a812      	add	r0, sp, #72	; 0x48
   1f524:	f7ff ff7d 	bl	1f422 <sys_memcpy_swap>
	m[58] = a2->type;
   1f528:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1f52a:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f52e:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1f532:	4621      	mov	r1, r4
   1f534:	2206      	movs	r2, #6
   1f536:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1f53a:	f7fe fa67 	bl	1da0c <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1f53e:	4621      	mov	r1, r4
   1f540:	2206      	movs	r2, #6
   1f542:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1f546:	f7ff ff6c 	bl	1f422 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1f54a:	2210      	movs	r2, #16
   1f54c:	4629      	mov	r1, r5
   1f54e:	a801      	add	r0, sp, #4
   1f550:	f7ff ff67 	bl	1f422 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1f554:	463b      	mov	r3, r7
   1f556:	2241      	movs	r2, #65	; 0x41
   1f558:	a905      	add	r1, sp, #20
   1f55a:	a801      	add	r0, sp, #4
   1f55c:	f7ff ff7a 	bl	1f454 <bt_smp_aes_cmac>
	if (err) {
   1f560:	4604      	mov	r4, r0
   1f562:	b918      	cbnz	r0, 1f56c <smp_f6+0x94>
	sys_mem_swap(check, 16);
   1f564:	2110      	movs	r1, #16
   1f566:	4638      	mov	r0, r7
   1f568:	f7ff ff65 	bl	1f436 <sys_mem_swap>
}
   1f56c:	4620      	mov	r0, r4
   1f56e:	b017      	add	sp, #92	; 0x5c
   1f570:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f572 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f572:	2301      	movs	r3, #1
   1f574:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f576:	43db      	mvns	r3, r3
   1f578:	f3bf 8f5b 	dmb	ish
   1f57c:	e850 2f00 	ldrex	r2, [r0]
   1f580:	401a      	ands	r2, r3
   1f582:	e840 2100 	strex	r1, r2, [r0]
   1f586:	2900      	cmp	r1, #0
   1f588:	d1f8      	bne.n	1f57c <atomic_clear_bit+0xa>
   1f58a:	f3bf 8f5b 	dmb	ish
}
   1f58e:	4770      	bx	lr

0001f590 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f592:	4613      	mov	r3, r2
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f594:	2200      	movs	r2, #0
   1f596:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
   1f598:	4604      	mov	r4, r0
   1f59a:	460d      	mov	r5, r1
	if (bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL)) {
   1f59c:	460a      	mov	r2, r1
   1f59e:	f8d0 00f0 	ldr.w	r0, [r0, #240]	; 0xf0
   1f5a2:	2106      	movs	r1, #6
   1f5a4:	f7fe fffa 	bl	1e59c <bt_l2cap_send_cb>
   1f5a8:	b128      	cbz	r0, 1f5b6 <smp_send.constprop.0+0x26>
		net_buf_unref(buf);
   1f5aa:	4628      	mov	r0, r5
}
   1f5ac:	b003      	add	sp, #12
   1f5ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   1f5b2:	f7f9 bca1 	b.w	18ef8 <net_buf_unref>
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f5b6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f5ba:	2300      	movs	r3, #0
   1f5bc:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
}
   1f5c0:	b003      	add	sp, #12
   1f5c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	k_work_reschedule(&smp->work, SMP_TIMEOUT);
   1f5c6:	f7fb ba87 	b.w	1aad8 <k_work_reschedule>

0001f5ca <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f5ca:	2301      	movs	r3, #1
   1f5cc:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1f5ce:	f3bf 8f5b 	dmb	ish
   1f5d2:	e850 2f00 	ldrex	r2, [r0]
   1f5d6:	431a      	orrs	r2, r3
   1f5d8:	e840 2100 	strex	r1, r2, [r0]
   1f5dc:	2900      	cmp	r1, #0
   1f5de:	d1f8      	bne.n	1f5d2 <atomic_set_bit+0x8>
   1f5e0:	f3bf 8f5b 	dmb	ish
}
   1f5e4:	4770      	bx	lr

0001f5e6 <smp_keypress_notif>:
{
   1f5e6:	b508      	push	{r3, lr}
	atomic_set_bit(smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   1f5e8:	210e      	movs	r1, #14
   1f5ea:	f7ff ffee 	bl	1f5ca <atomic_set_bit>
}
   1f5ee:	2000      	movs	r0, #0
   1f5f0:	bd08      	pop	{r3, pc}

0001f5f2 <smp_security_request>:
   1f5f2:	2007      	movs	r0, #7
   1f5f4:	4770      	bx	lr

0001f5f6 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f5f6:	f3bf 8f5b 	dmb	ish
   1f5fa:	6800      	ldr	r0, [r0, #0]
   1f5fc:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1f600:	4108      	asrs	r0, r1
}
   1f602:	f000 0001 	and.w	r0, r0, #1
   1f606:	4770      	bx	lr

0001f608 <update_keys_check>:
{
   1f608:	b510      	push	{r4, lr}
   1f60a:	4603      	mov	r3, r0
	if (!keys ||
   1f60c:	b1d9      	cbz	r1, 1f646 <update_keys_check+0x3e>
	    !(keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
   1f60e:	89c8      	ldrh	r0, [r1, #14]
	if (!keys ||
   1f610:	f010 0f24 	tst.w	r0, #36	; 0x24
   1f614:	d017      	beq.n	1f646 <update_keys_check+0x3e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f616:	7d1a      	ldrb	r2, [r3, #20]
   1f618:	7b5c      	ldrb	r4, [r3, #13]
	if (keys->enc_size > get_encryption_key_size(smp)) {
   1f61a:	7b09      	ldrb	r1, [r1, #12]
   1f61c:	42a2      	cmp	r2, r4
   1f61e:	bf28      	it	cs
   1f620:	4622      	movcs	r2, r4
   1f622:	4291      	cmp	r1, r2
   1f624:	d901      	bls.n	1f62a <update_keys_check+0x22>
		return false;
   1f626:	2000      	movs	r0, #0
}
   1f628:	bd10      	pop	{r4, pc}
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f62a:	0682      	lsls	r2, r0, #26
   1f62c:	d404      	bmi.n	1f638 <update_keys_check+0x30>
	if ((keys->flags & BT_KEYS_AUTHENTICATED) &&
   1f62e:	7a18      	ldrb	r0, [r3, #8]
   1f630:	3800      	subs	r0, #0
   1f632:	bf18      	it	ne
   1f634:	2001      	movne	r0, #1
   1f636:	e7f7      	b.n	1f628 <update_keys_check+0x20>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1f638:	2105      	movs	r1, #5
   1f63a:	1d18      	adds	r0, r3, #4
   1f63c:	f7ff ffdb 	bl	1f5f6 <atomic_test_bit>
	if ((keys->keys & BT_KEYS_LTK_P256) &&
   1f640:	2800      	cmp	r0, #0
   1f642:	d1f4      	bne.n	1f62e <update_keys_check+0x26>
   1f644:	e7ef      	b.n	1f626 <update_keys_check+0x1e>
		return true;
   1f646:	2001      	movs	r0, #1
   1f648:	e7ee      	b.n	1f628 <update_keys_check+0x20>

0001f64a <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f64a:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f64c:	1d05      	adds	r5, r0, #4
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1f64e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1f650:	4628      	mov	r0, r5
   1f652:	2104      	movs	r1, #4
   1f654:	f7ff ffcf 	bl	1f5f6 <atomic_test_bit>
   1f658:	b168      	cbz	r0, 1f676 <smp_create_pdu.constprop.0+0x2c>
		timeout = K_NO_WAIT;
   1f65a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f65c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1f65e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1f660:	4608      	mov	r0, r1
   1f662:	f7fe ff98 	bl	1e596 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1f666:	4604      	mov	r4, r0
   1f668:	b940      	cbnz	r0, 1f67c <smp_create_pdu.constprop.0+0x32>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1f66a:	2104      	movs	r1, #4
   1f66c:	4628      	mov	r0, r5
   1f66e:	f7ff ffac 	bl	1f5ca <atomic_set_bit>
}
   1f672:	4620      	mov	r0, r4
   1f674:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1f676:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1f67a:	e7ef      	b.n	1f65c <smp_create_pdu.constprop.0+0x12>
   1f67c:	2101      	movs	r1, #1
   1f67e:	3008      	adds	r0, #8
   1f680:	f000 fb23 	bl	1fcca <net_buf_simple_add>
	hdr->code = op;
   1f684:	7006      	strb	r6, [r0, #0]
	return buf;
   1f686:	e7f4      	b.n	1f672 <smp_create_pdu.constprop.0+0x28>

0001f688 <send_pairing_rsp>:
{
   1f688:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1f68a:	2102      	movs	r1, #2
{
   1f68c:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1f68e:	f7ff ffdc 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1f692:	4604      	mov	r4, r0
   1f694:	b178      	cbz	r0, 1f6b6 <send_pairing_rsp+0x2e>
   1f696:	2106      	movs	r1, #6
   1f698:	3008      	adds	r0, #8
   1f69a:	f000 fb16 	bl	1fcca <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1f69e:	2206      	movs	r2, #6
   1f6a0:	f105 0111 	add.w	r1, r5, #17
   1f6a4:	f7fe f9b2 	bl	1da0c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1f6a8:	4628      	mov	r0, r5
   1f6aa:	2200      	movs	r2, #0
   1f6ac:	4621      	mov	r1, r4
   1f6ae:	f7ff ff6f 	bl	1f590 <smp_send.constprop.0>
	return 0;
   1f6b2:	2000      	movs	r0, #0
}
   1f6b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f6b6:	2008      	movs	r0, #8
   1f6b8:	e7fc      	b.n	1f6b4 <send_pairing_rsp+0x2c>

0001f6ba <smp_send_pairing_random>:
{
   1f6ba:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f6bc:	2104      	movs	r1, #4
{
   1f6be:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1f6c0:	f7ff ffc3 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   1f6c4:	4604      	mov	r4, r0
   1f6c6:	b178      	cbz	r0, 1f6e8 <smp_send_pairing_random+0x2e>
   1f6c8:	2110      	movs	r1, #16
   1f6ca:	3008      	adds	r0, #8
   1f6cc:	f000 fafd 	bl	1fcca <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1f6d0:	2210      	movs	r2, #16
   1f6d2:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1f6d6:	f7fe f999 	bl	1da0c <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1f6da:	4628      	mov	r0, r5
   1f6dc:	2200      	movs	r2, #0
   1f6de:	4621      	mov	r1, r4
   1f6e0:	f7ff ff56 	bl	1f590 <smp_send.constprop.0>
	return 0;
   1f6e4:	2000      	movs	r0, #0
}
   1f6e6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1f6e8:	2008      	movs	r0, #8
   1f6ea:	e7fc      	b.n	1f6e6 <smp_send_pairing_random+0x2c>

0001f6ec <smp_dhkey_check>:
{
   1f6ec:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1f6ee:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1f6f2:	78db      	ldrb	r3, [r3, #3]
   1f6f4:	2b01      	cmp	r3, #1
{
   1f6f6:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1f6f8:	d114      	bne.n	1f724 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1f6fa:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1f6fc:	1d05      	adds	r5, r0, #4
   1f6fe:	2110      	movs	r1, #16
   1f700:	4628      	mov	r0, r5
   1f702:	f7ff ff36 	bl	1f572 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1f706:	4631      	mov	r1, r6
   1f708:	2210      	movs	r2, #16
   1f70a:	f104 00b7 	add.w	r0, r4, #183	; 0xb7
   1f70e:	f7fe f97d 	bl	1da0c <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1f712:	2107      	movs	r1, #7
   1f714:	4628      	mov	r0, r5
   1f716:	f7ff ff6e 	bl	1f5f6 <atomic_test_bit>
   1f71a:	b128      	cbz	r0, 1f728 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1f71c:	2109      	movs	r1, #9
   1f71e:	4628      	mov	r0, r5
   1f720:	f7ff ff53 	bl	1f5ca <atomic_set_bit>
}
   1f724:	2000      	movs	r0, #0
   1f726:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f728:	210a      	movs	r1, #10
   1f72a:	4628      	mov	r0, r5
   1f72c:	f7ff ff63 	bl	1f5f6 <atomic_test_bit>
   1f730:	2800      	cmp	r0, #0
   1f732:	d1f3      	bne.n	1f71c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1f734:	4620      	mov	r0, r4
}
   1f736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1f73a:	f7ea bce7 	b.w	a10c <compute_and_check_and_send_slave_dhcheck>

0001f73e <atomic_test_and_clear_bit>:
{
   1f73e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1f740:	2301      	movs	r3, #1
   1f742:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1f746:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f748:	f3bf 8f5b 	dmb	ish
   1f74c:	e850 3f00 	ldrex	r3, [r0]
   1f750:	ea03 0c02 	and.w	ip, r3, r2
   1f754:	e840 ce00 	strex	lr, ip, [r0]
   1f758:	f1be 0f00 	cmp.w	lr, #0
   1f75c:	d1f6      	bne.n	1f74c <atomic_test_and_clear_bit+0xe>
   1f75e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1f762:	420b      	tst	r3, r1
}
   1f764:	bf14      	ite	ne
   1f766:	2001      	movne	r0, #1
   1f768:	2000      	moveq	r0, #0
   1f76a:	f85d fb04 	ldr.w	pc, [sp], #4

0001f76e <smp_reset>:
{
   1f76e:	b538      	push	{r3, r4, r5, lr}
   1f770:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1f772:	1d03      	adds	r3, r0, #4
   1f774:	2500      	movs	r5, #0
   1f776:	f3bf 8f5b 	dmb	ish
   1f77a:	e853 2f00 	ldrex	r2, [r3]
   1f77e:	e843 5100 	strex	r1, r5, [r3]
   1f782:	2900      	cmp	r1, #0
   1f784:	d1f9      	bne.n	1f77a <smp_reset+0xc>
   1f786:	f3bf 8f5b 	dmb	ish
	(void)k_work_cancel_delayable(&smp->work);
   1f78a:	f504 70ec 	add.w	r0, r4, #472	; 0x1d8
   1f78e:	f000 fe75 	bl	2047c <k_work_cancel_delayable>
	smp->method = JUST_WORKS;
   1f792:	7225      	strb	r5, [r4, #8]
   1f794:	f3bf 8f5b 	dmb	ish
   1f798:	e854 3f00 	ldrex	r3, [r4]
   1f79c:	e844 5200 	strex	r2, r5, [r4]
   1f7a0:	2a00      	cmp	r2, #0
   1f7a2:	d1f9      	bne.n	1f798 <smp_reset+0x2a>
   1f7a4:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f7a8:	4620      	mov	r0, r4
   1f7aa:	2101      	movs	r1, #1
}
   1f7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1f7b0:	f7ff bf0b 	b.w	1f5ca <atomic_set_bit>

0001f7b4 <smp_c1>:
{
   1f7b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f7b8:	b089      	sub	sp, #36	; 0x24
   1f7ba:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1f7be:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1f7c0:	783b      	ldrb	r3, [r7, #0]
{
   1f7c2:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1f7c4:	f88d 3000 	strb.w	r3, [sp]
{
   1f7c8:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1f7ca:	f898 3000 	ldrb.w	r3, [r8]
   1f7ce:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1f7d2:	4611      	mov	r1, r2
   1f7d4:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1f7d6:	2207      	movs	r2, #7
   1f7d8:	f10d 0002 	add.w	r0, sp, #2
   1f7dc:	f7fe f916 	bl	1da0c <memcpy>
	memcpy(p1 + 9, pres, 7);
   1f7e0:	2207      	movs	r2, #7
   1f7e2:	4649      	mov	r1, r9
   1f7e4:	f10d 0009 	add.w	r0, sp, #9
   1f7e8:	f7fe f910 	bl	1da0c <memcpy>
	while (len--) {
   1f7ec:	f104 0010 	add.w	r0, r4, #16
   1f7f0:	4629      	mov	r1, r5
   1f7f2:	466a      	mov	r2, sp
   1f7f4:	42a0      	cmp	r0, r4
   1f7f6:	d127      	bne.n	1f848 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1f7f8:	462a      	mov	r2, r5
   1f7fa:	4629      	mov	r1, r5
   1f7fc:	4630      	mov	r0, r6
   1f7fe:	f7ee fe7b 	bl	e4f8 <bt_encrypt_le>
	if (err) {
   1f802:	4604      	mov	r4, r0
   1f804:	b9e0      	cbnz	r0, 1f840 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1f806:	2206      	movs	r2, #6
   1f808:	f108 0101 	add.w	r1, r8, #1
   1f80c:	a804      	add	r0, sp, #16
   1f80e:	f7fe f8fd 	bl	1da0c <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1f812:	2206      	movs	r2, #6
   1f814:	1c79      	adds	r1, r7, #1
   1f816:	f10d 0016 	add.w	r0, sp, #22
   1f81a:	f7fe f8f7 	bl	1da0c <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1f81e:	2204      	movs	r2, #4
   1f820:	4621      	mov	r1, r4
   1f822:	a807      	add	r0, sp, #28
   1f824:	f7fe f8fd 	bl	1da22 <memset>
	while (len--) {
   1f828:	f105 0010 	add.w	r0, r5, #16
   1f82c:	462a      	mov	r2, r5
   1f82e:	ab04      	add	r3, sp, #16
   1f830:	4282      	cmp	r2, r0
   1f832:	d112      	bne.n	1f85a <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1f834:	462a      	mov	r2, r5
   1f836:	4629      	mov	r1, r5
   1f838:	4630      	mov	r0, r6
   1f83a:	f7ee fe5d 	bl	e4f8 <bt_encrypt_le>
   1f83e:	4604      	mov	r4, r0
}
   1f840:	4620      	mov	r0, r4
   1f842:	b009      	add	sp, #36	; 0x24
   1f844:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1f848:	f814 3b01 	ldrb.w	r3, [r4], #1
   1f84c:	f812 cb01 	ldrb.w	ip, [r2], #1
   1f850:	ea83 030c 	eor.w	r3, r3, ip
   1f854:	f801 3b01 	strb.w	r3, [r1], #1
   1f858:	e7cc      	b.n	1f7f4 <smp_c1+0x40>
   1f85a:	f812 1b01 	ldrb.w	r1, [r2], #1
   1f85e:	f813 4b01 	ldrb.w	r4, [r3], #1
   1f862:	4061      	eors	r1, r4
   1f864:	f802 1c01 	strb.w	r1, [r2, #-1]
   1f868:	e7e2      	b.n	1f830 <smp_c1+0x7c>

0001f86a <legacy_pairing_confirm>:
{
   1f86a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f86c:	1d07      	adds	r7, r0, #4
{
   1f86e:	b085      	sub	sp, #20
   1f870:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1f872:	210a      	movs	r1, #10
   1f874:	4638      	mov	r0, r7
   1f876:	f7ff febe 	bl	1f5f6 <atomic_test_bit>
   1f87a:	bb88      	cbnz	r0, 1f8e0 <legacy_pairing_confirm+0x76>
			atomic_set_bit(smp->allowed_cmds,
   1f87c:	2104      	movs	r1, #4
   1f87e:	4628      	mov	r0, r5
   1f880:	f7ff fea3 	bl	1f5ca <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1f884:	2103      	movs	r1, #3
	struct bt_conn *conn = smp->chan.chan.conn;
   1f886:	f8d5 40f0 	ldr.w	r4, [r5, #240]	; 0xf0
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1f88a:	f7ff fede 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!buf) {
   1f88e:	4606      	mov	r6, r0
   1f890:	b1c0      	cbz	r0, 1f8c4 <legacy_pairing_confirm+0x5a>
   1f892:	2110      	movs	r1, #16
   1f894:	3008      	adds	r0, #8
   1f896:	f000 fa18 	bl	1fcca <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1f89a:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1f89e:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1f8a0:	9002      	str	r0, [sp, #8]
   1f8a2:	9301      	str	r3, [sp, #4]
   1f8a4:	9400      	str	r4, [sp, #0]
   1f8a6:	f105 0310 	add.w	r3, r5, #16
   1f8aa:	f105 0209 	add.w	r2, r5, #9
   1f8ae:	f105 0127 	add.w	r1, r5, #39	; 0x27
   1f8b2:	f105 0047 	add.w	r0, r5, #71	; 0x47
   1f8b6:	f7ff ff7d 	bl	1f7b4 <smp_c1>
   1f8ba:	4604      	mov	r4, r0
   1f8bc:	b120      	cbz	r0, 1f8c8 <legacy_pairing_confirm+0x5e>
		net_buf_unref(buf);
   1f8be:	4630      	mov	r0, r6
   1f8c0:	f7f9 fb1a 	bl	18ef8 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1f8c4:	2008      	movs	r0, #8
   1f8c6:	e009      	b.n	1f8dc <legacy_pairing_confirm+0x72>
	smp_send(smp, buf, NULL, NULL);
   1f8c8:	4602      	mov	r2, r0
   1f8ca:	4631      	mov	r1, r6
   1f8cc:	4628      	mov	r0, r5
   1f8ce:	f7ff fe5f 	bl	1f590 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f8d2:	4621      	mov	r1, r4
   1f8d4:	4638      	mov	r0, r7
   1f8d6:	f7ff fe4c 	bl	1f572 <atomic_clear_bit>
	return 0;
   1f8da:	2000      	movs	r0, #0
}
   1f8dc:	b005      	add	sp, #20
   1f8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1f8e0:	2100      	movs	r1, #0
   1f8e2:	4638      	mov	r0, r7
   1f8e4:	f7ff fe71 	bl	1f5ca <atomic_set_bit>
   1f8e8:	e7f7      	b.n	1f8da <legacy_pairing_confirm+0x70>

0001f8ea <bt_smp_request_ltk>:
{
   1f8ea:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1f8ee:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   1f8f2:	e9cd 2300 	strd	r2, r3, [sp]
   1f8f6:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1f8f8:	f7ea f936 	bl	9b68 <smp_chan_get>
	if (!smp) {
   1f8fc:	4605      	mov	r5, r0
   1f8fe:	2800      	cmp	r0, #0
   1f900:	f000 8090 	beq.w	1fa24 <bt_smp_request_ltk+0x13a>
	if (ediv == 0U && rand == 0U &&
   1f904:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f908:	1d07      	adds	r7, r0, #4
	if (ediv == 0U && rand == 0U &&
   1f90a:	f1b9 0f00 	cmp.w	r9, #0
   1f90e:	d12a      	bne.n	1f966 <bt_smp_request_ltk+0x7c>
   1f910:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f914:	4313      	orrs	r3, r2
   1f916:	d126      	bne.n	1f966 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f918:	2103      	movs	r1, #3
   1f91a:	4638      	mov	r0, r7
   1f91c:	f7ff fe6b 	bl	1f5f6 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1f920:	b308      	cbz	r0, 1f966 <bt_smp_request_ltk+0x7c>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1f922:	2101      	movs	r1, #1
   1f924:	4638      	mov	r0, r7
   1f926:	f7ff fe66 	bl	1f5f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1f92a:	4606      	mov	r6, r0
   1f92c:	b1d8      	cbz	r0, 1f966 <bt_smp_request_ltk+0x7c>
	return MIN(req->max_key_size, rsp->max_key_size);
   1f92e:	7d2c      	ldrb	r4, [r5, #20]
   1f930:	7b6b      	ldrb	r3, [r5, #13]
   1f932:	429c      	cmp	r4, r3
   1f934:	bf28      	it	cs
   1f936:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1f938:	4622      	mov	r2, r4
   1f93a:	f105 0147 	add.w	r1, r5, #71	; 0x47
   1f93e:	4640      	mov	r0, r8
   1f940:	f7fe f864 	bl	1da0c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f944:	2c0f      	cmp	r4, #15
   1f946:	d806      	bhi.n	1f956 <bt_smp_request_ltk+0x6c>
			(void)memset(ltk + enc_size, 0,
   1f948:	f1c4 0210 	rsb	r2, r4, #16
   1f94c:	4649      	mov	r1, r9
   1f94e:	eb08 0004 	add.w	r0, r8, r4
   1f952:	f7fe f866 	bl	1da22 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f956:	2101      	movs	r1, #1
   1f958:	4638      	mov	r0, r7
   1f95a:	f7ff fe36 	bl	1f5ca <atomic_set_bit>
}
   1f95e:	4630      	mov	r0, r6
   1f960:	b003      	add	sp, #12
   1f962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1f966:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1f96a:	b983      	cbnz	r3, 1f98e <bt_smp_request_ltk+0xa4>
					     &conn->le.dst);
   1f96c:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1f970:	7a21      	ldrb	r1, [r4, #8]
   1f972:	4632      	mov	r2, r6
   1f974:	2020      	movs	r0, #32
   1f976:	f7eb fe45 	bl	b604 <bt_keys_find>
   1f97a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1f97e:	b930      	cbnz	r0, 1f98e <bt_smp_request_ltk+0xa4>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1f980:	7a21      	ldrb	r1, [r4, #8]
   1f982:	4632      	mov	r2, r6
   1f984:	2001      	movs	r0, #1
   1f986:	f7eb fe3d 	bl	b604 <bt_keys_find>
   1f98a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1f98e:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1f992:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1f996:	b9ee      	cbnz	r6, 1f9d4 <bt_smp_request_ltk+0xea>
   1f998:	e9dd 2300 	ldrd	r2, r3, [sp]
   1f99c:	4313      	orrs	r3, r2
   1f99e:	d119      	bne.n	1f9d4 <bt_smp_request_ltk+0xea>
   1f9a0:	b388      	cbz	r0, 1fa06 <bt_smp_request_ltk+0x11c>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1f9a2:	89c3      	ldrh	r3, [r0, #14]
   1f9a4:	069a      	lsls	r2, r3, #26
   1f9a6:	d516      	bpl.n	1f9d6 <bt_smp_request_ltk+0xec>
		enc_size = conn->le.keys->enc_size;
   1f9a8:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1f9aa:	f100 011a 	add.w	r1, r0, #26
   1f9ae:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1f9b0:	4640      	mov	r0, r8
   1f9b2:	f7fe f82b 	bl	1da0c <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1f9b6:	2c0f      	cmp	r4, #15
   1f9b8:	d806      	bhi.n	1f9c8 <bt_smp_request_ltk+0xde>
			(void)memset(ltk + enc_size, 0,
   1f9ba:	f1c4 0210 	rsb	r2, r4, #16
   1f9be:	4631      	mov	r1, r6
   1f9c0:	eb08 0004 	add.w	r0, r8, r4
   1f9c4:	f7fe f82d 	bl	1da22 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1f9c8:	2101      	movs	r1, #1
   1f9ca:	4638      	mov	r0, r7
   1f9cc:	f7ff fdfd 	bl	1f5ca <atomic_set_bit>
		return true;
   1f9d0:	2601      	movs	r6, #1
   1f9d2:	e7c4      	b.n	1f95e <bt_smp_request_ltk+0x74>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1f9d4:	b1b8      	cbz	r0, 1fa06 <bt_smp_request_ltk+0x11c>
   1f9d6:	89c3      	ldrh	r3, [r0, #14]
   1f9d8:	07db      	lsls	r3, r3, #31
   1f9da:	d514      	bpl.n	1fa06 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1f9dc:	2208      	movs	r2, #8
   1f9de:	4669      	mov	r1, sp
   1f9e0:	3068      	adds	r0, #104	; 0x68
   1f9e2:	f7fe f802 	bl	1d9ea <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1f9e6:	b970      	cbnz	r0, 1fa06 <bt_smp_request_ltk+0x11c>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1f9e8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1f9ec:	2202      	movs	r2, #2
   1f9ee:	a90a      	add	r1, sp, #40	; 0x28
   1f9f0:	3070      	adds	r0, #112	; 0x70
   1f9f2:	f7fd fffa 	bl	1d9ea <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1f9f6:	4606      	mov	r6, r0
   1f9f8:	b928      	cbnz	r0, 1fa06 <bt_smp_request_ltk+0x11c>
		enc_size = conn->le.keys->enc_size;
   1f9fa:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1f9fe:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1fa00:	3172      	adds	r1, #114	; 0x72
   1fa02:	4622      	mov	r2, r4
   1fa04:	e7d4      	b.n	1f9b0 <bt_smp_request_ltk+0xc6>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fa06:	210f      	movs	r1, #15
   1fa08:	4638      	mov	r0, r7
   1fa0a:	f7ff fdf4 	bl	1f5f6 <atomic_test_bit>
   1fa0e:	b120      	cbz	r0, 1fa1a <bt_smp_request_ltk+0x130>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1fa10:	2202      	movs	r2, #2
   1fa12:	2106      	movs	r1, #6
   1fa14:	4620      	mov	r0, r4
   1fa16:	f7e7 fd73 	bl	7500 <bt_conn_security_changed>
	smp_reset(smp);
   1fa1a:	4628      	mov	r0, r5
   1fa1c:	f7ff fea7 	bl	1f76e <smp_reset>
	return false;
   1fa20:	2600      	movs	r6, #0
   1fa22:	e79c      	b.n	1f95e <bt_smp_request_ltk+0x74>
		return false;
   1fa24:	4606      	mov	r6, r0
   1fa26:	e79a      	b.n	1f95e <bt_smp_request_ltk+0x74>

0001fa28 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa28:	1d03      	adds	r3, r0, #4
{
   1fa2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fa2c:	4605      	mov	r5, r0
   1fa2e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa30:	4618      	mov	r0, r3
   1fa32:	2103      	movs	r1, #3
   1fa34:	f7ff fddf 	bl	1f5f6 <atomic_test_bit>
   1fa38:	b1f0      	cbz	r0, 1fa78 <smp_error+0x50>
		smp_pairing_complete(smp, reason);
   1fa3a:	4631      	mov	r1, r6
   1fa3c:	4628      	mov	r0, r5
   1fa3e:	f7eb f8f9 	bl	ac34 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1fa42:	2105      	movs	r1, #5
   1fa44:	4628      	mov	r0, r5
   1fa46:	f7ff fe00 	bl	1f64a <smp_create_pdu.constprop.0>
	if (!buf) {
   1fa4a:	4604      	mov	r4, r0
   1fa4c:	b308      	cbz	r0, 1fa92 <smp_error+0x6a>
   1fa4e:	2101      	movs	r1, #1
   1fa50:	3008      	adds	r0, #8
   1fa52:	f000 f93a 	bl	1fcca <net_buf_simple_add>
	rsp->reason = reason;
   1fa56:	7006      	strb	r6, [r0, #0]
   1fa58:	2600      	movs	r6, #0
   1fa5a:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
   1fa5e:	9600      	str	r6, [sp, #0]
   1fa60:	4633      	mov	r3, r6
   1fa62:	4622      	mov	r2, r4
   1fa64:	2106      	movs	r1, #6
   1fa66:	f7fe fd99 	bl	1e59c <bt_l2cap_send_cb>
	if (bt_l2cap_send(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf)) {
   1fa6a:	b118      	cbz	r0, 1fa74 <smp_error+0x4c>
		net_buf_unref(buf);
   1fa6c:	4620      	mov	r0, r4
   1fa6e:	f7f9 fa43 	bl	18ef8 <net_buf_unref>
	return 0;
   1fa72:	4630      	mov	r0, r6
}
   1fa74:	b002      	add	sp, #8
   1fa76:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fa78:	2101      	movs	r1, #1
   1fa7a:	4618      	mov	r0, r3
   1fa7c:	f7ff fdbb 	bl	1f5f6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fa80:	2800      	cmp	r0, #0
   1fa82:	d1da      	bne.n	1fa3a <smp_error+0x12>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fa84:	210f      	movs	r1, #15
   1fa86:	4618      	mov	r0, r3
   1fa88:	f7ff fdb5 	bl	1f5f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fa8c:	2800      	cmp	r0, #0
   1fa8e:	d1d4      	bne.n	1fa3a <smp_error+0x12>
   1fa90:	e7d7      	b.n	1fa42 <smp_error+0x1a>
		return -ENOBUFS;
   1fa92:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1fa96:	e7ed      	b.n	1fa74 <smp_error+0x4c>

0001fa98 <bt_smp_dhkey_ready>:
{
   1fa98:	b570      	push	{r4, r5, r6, lr}
   1fa9a:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   1fa9c:	2008      	movs	r0, #8
   1fa9e:	f7ea f903 	bl	9ca8 <smp_find>
	if (smp) {
   1faa2:	4604      	mov	r4, r0
   1faa4:	b1b8      	cbz	r0, 1fad6 <bt_smp_dhkey_ready+0x3e>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   1faa6:	1d05      	adds	r5, r0, #4
   1faa8:	2108      	movs	r1, #8
   1faaa:	4628      	mov	r0, r5
   1faac:	f7ff fd61 	bl	1f572 <atomic_clear_bit>
	if (!dhkey) {
   1fab0:	b38e      	cbz	r6, 1fb16 <bt_smp_dhkey_ready+0x7e>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   1fab2:	2107      	movs	r1, #7
   1fab4:	f7ff fd5d 	bl	1f572 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   1fab8:	4631      	mov	r1, r6
   1faba:	2220      	movs	r2, #32
   1fabc:	f104 0097 	add.w	r0, r4, #151	; 0x97
   1fac0:	f7fd ffa4 	bl	1da0c <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1fac4:	210a      	movs	r1, #10
   1fac6:	4628      	mov	r0, r5
   1fac8:	f7ff fd95 	bl	1f5f6 <atomic_test_bit>
   1facc:	b168      	cbz	r0, 1faea <bt_smp_dhkey_ready+0x52>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1face:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1fad0:	4628      	mov	r0, r5
   1fad2:	f7ff fd7a 	bl	1f5ca <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   1fad6:	2007      	movs	r0, #7
   1fad8:	f7ea f8e6 	bl	9ca8 <smp_find>
		if (smp) {
   1fadc:	4604      	mov	r4, r0
   1fade:	b118      	cbz	r0, 1fae8 <bt_smp_dhkey_ready+0x50>
			err = smp_dhkey_generate(smp);
   1fae0:	f7ea f8bc 	bl	9c5c <smp_dhkey_generate>
			if (err) {
   1fae4:	4601      	mov	r1, r0
   1fae6:	b990      	cbnz	r0, 1fb0e <bt_smp_dhkey_ready+0x76>
}
   1fae8:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1faea:	2110      	movs	r1, #16
   1faec:	4628      	mov	r0, r5
   1faee:	f7ff fd82 	bl	1f5f6 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1faf2:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   1faf4:	2800      	cmp	r0, #0
   1faf6:	d1eb      	bne.n	1fad0 <bt_smp_dhkey_ready+0x38>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   1faf8:	4628      	mov	r0, r5
   1fafa:	f7ff fd7c 	bl	1f5f6 <atomic_test_bit>
   1fafe:	2800      	cmp	r0, #0
   1fb00:	d0e9      	beq.n	1fad6 <bt_smp_dhkey_ready+0x3e>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   1fb02:	4620      	mov	r0, r4
   1fb04:	f7ea fb02 	bl	a10c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   1fb08:	4601      	mov	r1, r0
   1fb0a:	2800      	cmp	r0, #0
   1fb0c:	d0e3      	beq.n	1fad6 <bt_smp_dhkey_ready+0x3e>
			smp_error(smp, err);
   1fb0e:	4620      	mov	r0, r4
   1fb10:	f7ff ff8a 	bl	1fa28 <smp_error>
   1fb14:	e7df      	b.n	1fad6 <bt_smp_dhkey_ready+0x3e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   1fb16:	210b      	movs	r1, #11
   1fb18:	e7f9      	b.n	1fb0e <bt_smp_dhkey_ready+0x76>

0001fb1a <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   1fb1a:	b510      	push	{r4, lr}
   1fb1c:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1fb1e:	2106      	movs	r1, #6
   1fb20:	f7fe fd55 	bl	1e5ce <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1fb24:	f810 3c08 	ldrb.w	r3, [r0, #-8]
   1fb28:	ea23 0104 	bic.w	r1, r3, r4
   1fb2c:	f800 1c08 	strb.w	r1, [r0, #-8]
		if (!smp->local_dist && !smp->remote_dist) {
   1fb30:	f830 1c08 	ldrh.w	r1, [r0, #-8]
   1fb34:	b921      	cbnz	r1, 1fb40 <smp_check_complete.part.0+0x26>
}
   1fb36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1fb3a:	38f0      	subs	r0, #240	; 0xf0
   1fb3c:	f7eb b87a 	b.w	ac34 <smp_pairing_complete>
}
   1fb40:	bd10      	pop	{r4, pc}

0001fb42 <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1fb42:	7883      	ldrb	r3, [r0, #2]
   1fb44:	2b01      	cmp	r3, #1
   1fb46:	d102      	bne.n	1fb4e <smp_sign_info_sent+0xc>
   1fb48:	2104      	movs	r1, #4
   1fb4a:	f7ff bfe6 	b.w	1fb1a <smp_check_complete.part.0>
}
   1fb4e:	4770      	bx	lr

0001fb50 <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1fb50:	7881      	ldrb	r1, [r0, #2]
   1fb52:	2901      	cmp	r1, #1
   1fb54:	d101      	bne.n	1fb5a <smp_ident_sent+0xa>
   1fb56:	f7ff bfe0 	b.w	1fb1a <smp_check_complete.part.0>
}
   1fb5a:	4770      	bx	lr

0001fb5c <bt_smp_disconnected>:
{
   1fb5c:	b570      	push	{r4, r5, r6, lr}
   1fb5e:	4604      	mov	r4, r0
	struct bt_smp *smp = CONTAINER_OF(chan, struct bt_smp, chan);
   1fb60:	f1a0 06f0 	sub.w	r6, r0, #240	; 0xf0
	struct bt_keys *keys = chan->conn->le.keys;
   1fb64:	f850 3be8 	ldr.w	r3, [r0], #232
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fb68:	3cec      	subs	r4, #236	; 0xec
	struct bt_keys *keys = chan->conn->le.keys;
   1fb6a:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	(void)k_work_cancel_delayable(&smp->work);
   1fb6e:	f000 fc85 	bl	2047c <k_work_cancel_delayable>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fb72:	2103      	movs	r1, #3
   1fb74:	4620      	mov	r0, r4
   1fb76:	f7ff fd3e 	bl	1f5f6 <atomic_test_bit>
   1fb7a:	b1a0      	cbz	r0, 1fba6 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1fb7c:	2108      	movs	r1, #8
   1fb7e:	4630      	mov	r0, r6
   1fb80:	f7eb f858 	bl	ac34 <smp_pairing_complete>
	if (keys) {
   1fb84:	b13d      	cbz	r5, 1fb96 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1fb86:	89eb      	ldrh	r3, [r5, #14]
   1fb88:	b113      	cbz	r3, 1fb90 <bt_smp_disconnected+0x34>
   1fb8a:	7b6b      	ldrb	r3, [r5, #13]
   1fb8c:	079b      	lsls	r3, r3, #30
   1fb8e:	d502      	bpl.n	1fb96 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   1fb90:	4628      	mov	r0, r5
   1fb92:	f000 f829 	bl	1fbe8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1fb96:	4630      	mov	r0, r6
   1fb98:	f44f 7202 	mov.w	r2, #520	; 0x208
}
   1fb9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1fba0:	2100      	movs	r1, #0
   1fba2:	f7fd bf3e 	b.w	1da22 <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fba6:	2101      	movs	r1, #1
   1fba8:	4620      	mov	r0, r4
   1fbaa:	f7ff fd24 	bl	1f5f6 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   1fbae:	2800      	cmp	r0, #0
   1fbb0:	d1e4      	bne.n	1fb7c <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1fbb2:	210f      	movs	r1, #15
   1fbb4:	4620      	mov	r0, r4
   1fbb6:	f7ff fd1e 	bl	1f5f6 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   1fbba:	2800      	cmp	r0, #0
   1fbbc:	d1de      	bne.n	1fb7c <bt_smp_disconnected+0x20>
   1fbbe:	e7e1      	b.n	1fb84 <bt_smp_disconnected+0x28>

0001fbc0 <bt_keys_get_type>:
{
   1fbc0:	b570      	push	{r4, r5, r6, lr}
   1fbc2:	4604      	mov	r4, r0
   1fbc4:	460d      	mov	r5, r1
   1fbc6:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1fbc8:	f7eb fd1c 	bl	b604 <bt_keys_find>
	if (keys) {
   1fbcc:	b938      	cbnz	r0, 1fbde <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1fbce:	4631      	mov	r1, r6
   1fbd0:	4628      	mov	r0, r5
   1fbd2:	f7eb fce1 	bl	b598 <bt_keys_get_addr>
	if (!keys) {
   1fbd6:	b110      	cbz	r0, 1fbde <bt_keys_get_type+0x1e>

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
   1fbd8:	89c3      	ldrh	r3, [r0, #14]
   1fbda:	431c      	orrs	r4, r3
   1fbdc:	81c4      	strh	r4, [r0, #14]
}
   1fbde:	bd70      	pop	{r4, r5, r6, pc}

0001fbe0 <bt_keys_add_type>:
	keys->keys |= type;
   1fbe0:	89c3      	ldrh	r3, [r0, #14]
   1fbe2:	4319      	orrs	r1, r3
   1fbe4:	81c1      	strh	r1, [r0, #14]
}
   1fbe6:	4770      	bx	lr

0001fbe8 <bt_keys_clear>:

void bt_keys_clear(struct bt_keys *keys)
{
   1fbe8:	b510      	push	{r4, lr}
	BT_DBG("%s (keys 0x%04x)", bt_addr_le_str(&keys->addr), keys->keys);

	if (keys->state & BT_KEYS_ID_ADDED) {
   1fbea:	7a03      	ldrb	r3, [r0, #8]
   1fbec:	075b      	lsls	r3, r3, #29
{
   1fbee:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1fbf0:	d501      	bpl.n	1fbf6 <bt_keys_clear+0xe>
		bt_id_del(keys);
   1fbf2:	f7e6 fa9f 	bl	6134 <bt_id_del>

		BT_DBG("Deleting key %s", log_strdup(key));
		settings_delete(key);
	}

	(void)memset(keys, 0, sizeof(*keys));
   1fbf6:	4620      	mov	r0, r4
   1fbf8:	2284      	movs	r2, #132	; 0x84
}
   1fbfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1fbfe:	2100      	movs	r1, #0
   1fc00:	f7fd bf0f 	b.w	1da22 <memset>

0001fc04 <fixed_data_unref>:
}
   1fc04:	4770      	bx	lr

0001fc06 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc06:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1fc08:	6849      	ldr	r1, [r1, #4]
   1fc0a:	6809      	ldr	r1, [r1, #0]
   1fc0c:	f7f9 b8e6 	b.w	18ddc <net_buf_alloc_len>

0001fc10 <net_buf_get>:
{
   1fc10:	b570      	push	{r4, r5, r6, lr}
   1fc12:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1fc14:	f7fa fd24 	bl	1a660 <z_impl_k_queue_get>
	if (!buf) {
   1fc18:	4605      	mov	r5, r0
   1fc1a:	b128      	cbz	r0, 1fc28 <net_buf_get+0x18>
   1fc1c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fc1e:	7963      	ldrb	r3, [r4, #5]
   1fc20:	f013 0301 	ands.w	r3, r3, #1
   1fc24:	d102      	bne.n	1fc2c <net_buf_get+0x1c>
	frag->frags = NULL;
   1fc26:	6023      	str	r3, [r4, #0]
}
   1fc28:	4628      	mov	r0, r5
   1fc2a:	bd70      	pop	{r4, r5, r6, pc}
   1fc2c:	2300      	movs	r3, #0
   1fc2e:	2200      	movs	r2, #0
   1fc30:	4630      	mov	r0, r6
   1fc32:	f7fa fd15 	bl	1a660 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1fc36:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1fc38:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1fc3a:	f023 0301 	bic.w	r3, r3, #1
   1fc3e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fc40:	4604      	mov	r4, r0
   1fc42:	e7ec      	b.n	1fc1e <net_buf_get+0xe>

0001fc44 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1fc44:	6883      	ldr	r3, [r0, #8]
   1fc46:	440b      	add	r3, r1
   1fc48:	6003      	str	r3, [r0, #0]
}
   1fc4a:	4770      	bx	lr

0001fc4c <net_buf_put>:
{
   1fc4c:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1fc4e:	460a      	mov	r2, r1
   1fc50:	6814      	ldr	r4, [r2, #0]
   1fc52:	b914      	cbnz	r4, 1fc5a <net_buf_put+0xe>
}
   1fc54:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1fc56:	f000 bb23 	b.w	202a0 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1fc5a:	7953      	ldrb	r3, [r2, #5]
   1fc5c:	f043 0301 	orr.w	r3, r3, #1
   1fc60:	7153      	strb	r3, [r2, #5]
   1fc62:	4622      	mov	r2, r4
   1fc64:	e7f4      	b.n	1fc50 <net_buf_put+0x4>

0001fc66 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1fc66:	7902      	ldrb	r2, [r0, #4]
   1fc68:	3201      	adds	r2, #1
   1fc6a:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1fc6c:	4770      	bx	lr

0001fc6e <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1fc6e:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1fc70:	4618      	mov	r0, r3
   1fc72:	681b      	ldr	r3, [r3, #0]
   1fc74:	2b00      	cmp	r3, #0
   1fc76:	d1fb      	bne.n	1fc70 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1fc78:	4770      	bx	lr

0001fc7a <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1fc7a:	6802      	ldr	r2, [r0, #0]
{
   1fc7c:	b510      	push	{r4, lr}
	if (parent->frags) {
   1fc7e:	b12a      	cbz	r2, 1fc8c <net_buf_frag_insert+0x12>
   1fc80:	460b      	mov	r3, r1
	while (buf->frags) {
   1fc82:	461c      	mov	r4, r3
   1fc84:	681b      	ldr	r3, [r3, #0]
   1fc86:	2b00      	cmp	r3, #0
   1fc88:	d1fb      	bne.n	1fc82 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1fc8a:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1fc8c:	6001      	str	r1, [r0, #0]
}
   1fc8e:	bd10      	pop	{r4, pc}

0001fc90 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1fc90:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1fc92:	4604      	mov	r4, r0
   1fc94:	b920      	cbnz	r0, 1fca0 <net_buf_frag_add+0x10>
	buf->ref++;
   1fc96:	790b      	ldrb	r3, [r1, #4]
   1fc98:	3301      	adds	r3, #1
   1fc9a:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1fc9c:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1fc9e:	bd10      	pop	{r4, pc}
   1fca0:	4603      	mov	r3, r0
	while (buf->frags) {
   1fca2:	4618      	mov	r0, r3
   1fca4:	681b      	ldr	r3, [r3, #0]
   1fca6:	2b00      	cmp	r3, #0
   1fca8:	d1fb      	bne.n	1fca2 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1fcaa:	f7ff ffe6 	bl	1fc7a <net_buf_frag_insert>
   1fcae:	4620      	mov	r0, r4
   1fcb0:	e7f5      	b.n	1fc9e <net_buf_frag_add+0xe>

0001fcb2 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1fcb2:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	__ASSERT_NO_MSG(frag);

	if (parent) {
   1fcb4:	b108      	cbz	r0, 1fcba <net_buf_frag_del+0x8>
		__ASSERT_NO_MSG(parent->frags);
		__ASSERT_NO_MSG(parent->frags == frag);
		parent->frags = frag->frags;
   1fcb6:	680b      	ldr	r3, [r1, #0]
   1fcb8:	6003      	str	r3, [r0, #0]
	}

	next_frag = frag->frags;
   1fcba:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1fcbc:	2300      	movs	r3, #0

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1fcbe:	4608      	mov	r0, r1
	frag->frags = NULL;
   1fcc0:	600b      	str	r3, [r1, #0]
	net_buf_unref(frag);
   1fcc2:	f7f9 f919 	bl	18ef8 <net_buf_unref>
#endif

	return next_frag;
}
   1fcc6:	4620      	mov	r0, r4
   1fcc8:	bd10      	pop	{r4, pc}

0001fcca <net_buf_simple_add>:
	return buf->data + buf->len;
   1fcca:	8883      	ldrh	r3, [r0, #4]
   1fccc:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1fcce:	4419      	add	r1, r3
   1fcd0:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1fcd2:	18d0      	adds	r0, r2, r3
   1fcd4:	4770      	bx	lr

0001fcd6 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1fcd6:	b430      	push	{r4, r5}
   1fcd8:	8884      	ldrh	r4, [r0, #4]
   1fcda:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1fcdc:	18a3      	adds	r3, r4, r2
   1fcde:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fce0:	1928      	adds	r0, r5, r4
}
   1fce2:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1fce4:	f7fd be92 	b.w	1da0c <memcpy>

0001fce8 <net_buf_simple_add_u8>:
   1fce8:	8883      	ldrh	r3, [r0, #4]
   1fcea:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1fcec:	b510      	push	{r4, lr}
	buf->len += len;
   1fcee:	1c5c      	adds	r4, r3, #1
   1fcf0:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1fcf2:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1fcf4:	18d0      	adds	r0, r2, r3
   1fcf6:	bd10      	pop	{r4, pc}

0001fcf8 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1fcf8:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1fcfa:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1fcfc:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1fcfe:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1fd00:	4411      	add	r1, r2
	buf->data -= len;
   1fd02:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1fd04:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1fd06:	4770      	bx	lr

0001fd08 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fd08:	8882      	ldrh	r2, [r0, #4]
   1fd0a:	1a52      	subs	r2, r2, r1
{
   1fd0c:	4603      	mov	r3, r0
	buf->len -= len;
   1fd0e:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1fd10:	6800      	ldr	r0, [r0, #0]
   1fd12:	4408      	add	r0, r1
   1fd14:	6018      	str	r0, [r3, #0]
}
   1fd16:	4770      	bx	lr

0001fd18 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1fd18:	4603      	mov	r3, r0
	void *data = buf->data;
   1fd1a:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1fd1c:	889a      	ldrh	r2, [r3, #4]
   1fd1e:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1fd20:	4401      	add	r1, r0
	buf->len -= len;
   1fd22:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1fd24:	6019      	str	r1, [r3, #0]

	return data;
}
   1fd26:	4770      	bx	lr

0001fd28 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1fd28:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1fd2a:	6803      	ldr	r3, [r0, #0]
   1fd2c:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1fd2e:	2102      	movs	r1, #2
   1fd30:	f7ff ffea 	bl	1fd08 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1fd34:	4620      	mov	r0, r4
   1fd36:	bd10      	pop	{r4, pc}

0001fd38 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1fd38:	6802      	ldr	r2, [r0, #0]
   1fd3a:	6880      	ldr	r0, [r0, #8]
}
   1fd3c:	1a10      	subs	r0, r2, r0
   1fd3e:	4770      	bx	lr

0001fd40 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1fd40:	8883      	ldrh	r3, [r0, #4]
   1fd42:	88c2      	ldrh	r2, [r0, #6]
   1fd44:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1fd46:	6803      	ldr	r3, [r0, #0]
   1fd48:	6880      	ldr	r0, [r0, #8]
   1fd4a:	1a18      	subs	r0, r3, r0
}
   1fd4c:	1a10      	subs	r0, r2, r0
   1fd4e:	4770      	bx	lr

0001fd50 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd50:	6843      	ldr	r3, [r0, #4]
   1fd52:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1fd54:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1fd58:	600b      	str	r3, [r1, #0]
}
   1fd5a:	2000      	movs	r0, #0
   1fd5c:	4770      	bx	lr

0001fd5e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd5e:	6843      	ldr	r3, [r0, #4]
   1fd60:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1fd62:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1fd66:	4042      	eors	r2, r0
   1fd68:	400a      	ands	r2, r1
   1fd6a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1fd6c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1fd70:	2000      	movs	r0, #0
   1fd72:	4770      	bx	lr

0001fd74 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd74:	6843      	ldr	r3, [r0, #4]
   1fd76:	685b      	ldr	r3, [r3, #4]
}
   1fd78:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1fd7a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1fd7e:	4770      	bx	lr

0001fd80 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd80:	6843      	ldr	r3, [r0, #4]
   1fd82:	685b      	ldr	r3, [r3, #4]
}
   1fd84:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1fd86:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1fd8a:	4770      	bx	lr

0001fd8c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1fd8c:	6843      	ldr	r3, [r0, #4]
   1fd8e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1fd90:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1fd94:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1fd96:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1fd9a:	2000      	movs	r0, #0
   1fd9c:	4770      	bx	lr

0001fd9e <gpio_nrfx_manage_callback>:
	return port->data;
   1fd9e:	6903      	ldr	r3, [r0, #16]
	return list->head;
   1fda0:	6858      	ldr	r0, [r3, #4]
{
   1fda2:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   1fda4:	b158      	cbz	r0, 1fdbe <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fda6:	2400      	movs	r4, #0
   1fda8:	4281      	cmp	r1, r0
   1fdaa:	d112      	bne.n	1fdd2 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   1fdac:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   1fdae:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   1fdb0:	b954      	cbnz	r4, 1fdc8 <gpio_nrfx_manage_callback+0x2a>
   1fdb2:	428d      	cmp	r5, r1
	list->head = node;
   1fdb4:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1fdb6:	d100      	bne.n	1fdba <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1fdb8:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1fdba:	2000      	movs	r0, #0
   1fdbc:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   1fdbe:	b96a      	cbnz	r2, 1fddc <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   1fdc0:	2000      	movs	r0, #0
}
   1fdc2:	bd30      	pop	{r4, r5, pc}
   1fdc4:	4628      	mov	r0, r5
   1fdc6:	e7ef      	b.n	1fda8 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   1fdc8:	428d      	cmp	r5, r1
	parent->next = child;
   1fdca:	6020      	str	r0, [r4, #0]
	list->tail = node;
   1fdcc:	bf08      	it	eq
   1fdce:	609c      	streq	r4, [r3, #8]
}
   1fdd0:	e7f3      	b.n	1fdba <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   1fdd2:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1fdd4:	4604      	mov	r4, r0
   1fdd6:	2d00      	cmp	r5, #0
   1fdd8:	d1f4      	bne.n	1fdc4 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1fdda:	b13a      	cbz	r2, 1fdec <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   1fddc:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   1fdde:	685a      	ldr	r2, [r3, #4]
   1fde0:	600a      	str	r2, [r1, #0]
	list->head = node;
   1fde2:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1fde4:	2800      	cmp	r0, #0
   1fde6:	d1eb      	bne.n	1fdc0 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1fde8:	6099      	str	r1, [r3, #8]
}
   1fdea:	e7ea      	b.n	1fdc2 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1fdec:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1fdf0:	e7e7      	b.n	1fdc2 <gpio_nrfx_manage_callback+0x24>

0001fdf2 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   1fdf2:	b570      	push	{r4, r5, r6, lr}
   1fdf4:	460e      	mov	r6, r1
   1fdf6:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fdf8:	4601      	mov	r1, r0
   1fdfa:	b150      	cbz	r0, 1fe12 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   1fdfc:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   1fdfe:	688a      	ldr	r2, [r1, #8]
   1fe00:	402a      	ands	r2, r5
   1fe02:	d002      	beq.n	1fe0a <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1fe04:	684b      	ldr	r3, [r1, #4]
   1fe06:	4630      	mov	r0, r6
   1fe08:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1fe0a:	b114      	cbz	r4, 1fe12 <gpio_fire_callbacks.isra.0+0x20>
   1fe0c:	4621      	mov	r1, r4
   1fe0e:	6824      	ldr	r4, [r4, #0]
   1fe10:	e7f5      	b.n	1fdfe <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   1fe12:	bd70      	pop	{r4, r5, r6, pc}

0001fe14 <cfg_level_pins>:
{
   1fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   1fe18:	6907      	ldr	r7, [r0, #16]
	return port->config;
   1fe1a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1fe1e:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1fe20:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1fe24:	4313      	orrs	r3, r2
   1fe26:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1fe2a:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1fe2c:	2500      	movs	r5, #0
	while (level_pins) {
   1fe2e:	b90c      	cbnz	r4, 1fe34 <cfg_level_pins+0x20>
}
   1fe30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1fe34:	4226      	tst	r6, r4
   1fe36:	d010      	beq.n	1fe5a <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1fe38:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fe3a:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1fe3e:	40e9      	lsrs	r1, r5
   1fe40:	f001 0101 	and.w	r1, r1, #1
   1fe44:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1fe48:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1fe4c:	b2c9      	uxtb	r1, r1
   1fe4e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1fe52:	f7f9 f8fd 	bl	19050 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1fe56:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1fe5a:	3501      	adds	r5, #1
		bit <<= 1;
   1fe5c:	0076      	lsls	r6, r6, #1
   1fe5e:	e7e6      	b.n	1fe2e <cfg_level_pins+0x1a>

0001fe60 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   1fe60:	6902      	ldr	r2, [r0, #16]
{
   1fe62:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   1fe64:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   1fe68:	e883 0003 	stmia.w	r3, {r0, r1}
}
   1fe6c:	2000      	movs	r0, #0
   1fe6e:	4770      	bx	lr

0001fe70 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   1fe70:	6843      	ldr	r3, [r0, #4]
   1fe72:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   1fe74:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   1fe78:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   1fe7c:	4770      	bx	lr

0001fe7e <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   1fe7e:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1fe80:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   1fe82:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fe84:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1fe88:	b148      	cbz	r0, 1fe9e <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   1fe8a:	7c52      	ldrb	r2, [r2, #17]
   1fe8c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1fe8e:	2000      	movs	r0, #0
   1fe90:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   1fe94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fe98:	2201      	movs	r2, #1
   1fe9a:	601a      	str	r2, [r3, #0]
	return 0;
   1fe9c:	4770      	bx	lr
		return -1;
   1fe9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1fea2:	4770      	bx	lr

0001fea4 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   1fea4:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   1fea6:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fea8:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1feac:	b940      	cbnz	r0, 1fec0 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   1feae:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   1feb0:	071b      	lsls	r3, r3, #28
   1feb2:	d406      	bmi.n	1fec2 <is_tx_ready.isra.0+0x1e>
   1feb4:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   1feb8:	3800      	subs	r0, #0
   1feba:	bf18      	it	ne
   1febc:	2001      	movne	r0, #1
   1febe:	4770      	bx	lr
   1fec0:	2001      	movs	r0, #1
}
   1fec2:	4770      	bx	lr

0001fec4 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   1fec4:	6843      	ldr	r3, [r0, #4]
   1fec6:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   1fec8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1fecc:	05d1      	lsls	r1, r2, #23
   1fece:	d518      	bpl.n	1ff02 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1fed0:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   1fed4:	b1aa      	cbz	r2, 1ff02 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   1fed6:	f04f 0120 	mov.w	r1, #32
   1feda:	f3ef 8211 	mrs	r2, BASEPRI
   1fede:	f381 8812 	msr	BASEPRI_MAX, r1
   1fee2:	f3bf 8f6f 	isb	sy
   1fee6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   1feea:	b131      	cbz	r1, 1fefa <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1feec:	2100      	movs	r1, #0
   1feee:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1fef2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1fef6:	2101      	movs	r1, #1
   1fef8:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   1fefa:	f382 8811 	msr	BASEPRI, r2
   1fefe:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1ff02:	6842      	ldr	r2, [r0, #4]
   1ff04:	6852      	ldr	r2, [r2, #4]
   1ff06:	06d2      	lsls	r2, r2, #27
   1ff08:	d515      	bpl.n	1ff36 <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
   1ff0a:	f04f 0120 	mov.w	r1, #32
   1ff0e:	f3ef 8211 	mrs	r2, BASEPRI
   1ff12:	f381 8812 	msr	BASEPRI_MAX, r1
   1ff16:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1ff1a:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   1ff1e:	b111      	cbz	r1, 1ff26 <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1ff20:	2100      	movs	r1, #0
   1ff22:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
   1ff26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1ff2a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
   1ff2e:	f382 8811 	msr	BASEPRI, r2
   1ff32:	f3bf 8f6f 	isb	sy
}
   1ff36:	4770      	bx	lr

0001ff38 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1ff38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
   1ff3c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
   1ff40:	f1a0 0308 	sub.w	r3, r0, #8
   1ff44:	4258      	negs	r0, r3
   1ff46:	4158      	adcs	r0, r3
   1ff48:	4770      	bx	lr

0001ff4a <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1ff4a:	4700      	bx	r0

0001ff4c <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1ff4c:	f000 bc31 	b.w	207b2 <z_impl_k_busy_wait>

0001ff50 <nrfx_clock_enable>:
{
   1ff50:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1ff52:	2000      	movs	r0, #0
   1ff54:	f7e3 fdca 	bl	3aec <arch_irq_is_enabled>
   1ff58:	b918      	cbnz	r0, 1ff62 <nrfx_clock_enable+0x12>
}
   1ff5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1ff5e:	f7e3 bda1 	b.w	3aa4 <arch_irq_enable>
   1ff62:	bd08      	pop	{r3, pc}

0001ff64 <nrfx_clock_start>:
    switch (domain)
   1ff64:	b110      	cbz	r0, 1ff6c <nrfx_clock_start+0x8>
   1ff66:	2801      	cmp	r0, #1
   1ff68:	d01d      	beq.n	1ffa6 <nrfx_clock_start+0x42>
   1ff6a:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ff6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ff70:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ff74:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   1ff78:	03c9      	lsls	r1, r1, #15
   1ff7a:	d512      	bpl.n	1ffa2 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   1ff7c:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1ff80:	2a01      	cmp	r2, #1
   1ff82:	d10e      	bne.n	1ffa2 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ff84:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ff88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ff8c:	2200      	movs	r2, #0
   1ff8e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ff92:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   1ff96:	2202      	movs	r2, #2
   1ff98:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ff9c:	2201      	movs	r2, #1
   1ff9e:	609a      	str	r2, [r3, #8]
}
   1ffa0:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ffa2:	2200      	movs	r2, #0
   1ffa4:	e7ee      	b.n	1ff84 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ffa6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ffaa:	2200      	movs	r2, #0
   1ffac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ffb0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ffb4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ffb8:	6018      	str	r0, [r3, #0]
}
   1ffba:	4770      	bx	lr

0001ffbc <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   1ffbc:	f7f9 bf6c 	b.w	19e98 <_DoInit>

0001ffc0 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   1ffc0:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   1ffc2:	f7ff fffb 	bl	1ffbc <SEGGER_RTT_Init>

	return 0;
}
   1ffc6:	2000      	movs	r0, #0
   1ffc8:	bd08      	pop	{r3, pc}

0001ffca <z_device_state_init>:
}
   1ffca:	4770      	bx	lr

0001ffcc <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1ffcc:	b138      	cbz	r0, 1ffde <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   1ffce:	68c3      	ldr	r3, [r0, #12]
   1ffd0:	8818      	ldrh	r0, [r3, #0]
   1ffd2:	f3c0 0008 	ubfx	r0, r0, #0, #9
   1ffd6:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   1ffda:	4258      	negs	r0, r3
   1ffdc:	4158      	adcs	r0, r3
}
   1ffde:	4770      	bx	lr

0001ffe0 <arch_system_halt>:
	__asm__ volatile(
   1ffe0:	f04f 0220 	mov.w	r2, #32
   1ffe4:	f3ef 8311 	mrs	r3, BASEPRI
   1ffe8:	f382 8812 	msr	BASEPRI_MAX, r2
   1ffec:	f3bf 8f6f 	isb	sy
	for (;;) {
   1fff0:	e7fe      	b.n	1fff0 <arch_system_halt+0x10>

0001fff2 <k_heap_init>:
{
   1fff2:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   1fff4:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1fff8:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1fffc:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1fffe:	f7fb bf05 	b.w	1be0c <sys_heap_init>

00020002 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   20002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20006:	b085      	sub	sp, #20
   20008:	4606      	mov	r6, r0
   2000a:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2000c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   20010:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   20012:	f000 fbd2 	bl	207ba <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   20016:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   2001a:	4605      	mov	r5, r0
   2001c:	460f      	mov	r7, r1
   2001e:	f04f 0320 	mov.w	r3, #32
   20022:	f3ef 8411 	mrs	r4, BASEPRI
   20026:	f383 8812 	msr	BASEPRI_MAX, r3
   2002a:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   2002e:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   20032:	464a      	mov	r2, r9
   20034:	4641      	mov	r1, r8
   20036:	4630      	mov	r0, r6
   20038:	f7fb fe6d 	bl	1bd16 <sys_heap_aligned_alloc>
   2003c:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
   2003e:	f7fb f9f7 	bl	1b430 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   20042:	9b03      	ldr	r3, [sp, #12]
   20044:	b13b      	cbz	r3, 20056 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   20046:	f384 8811 	msr	BASEPRI, r4
   2004a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   2004e:	4618      	mov	r0, r3
   20050:	b005      	add	sp, #20
   20052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   20056:	1a28      	subs	r0, r5, r0
   20058:	eb67 0101 	sbc.w	r1, r7, r1
   2005c:	2801      	cmp	r0, #1
   2005e:	f171 0200 	sbcs.w	r2, r1, #0
   20062:	dbf0      	blt.n	20046 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   20064:	e9cd 0100 	strd	r0, r1, [sp]
   20068:	465a      	mov	r2, fp
   2006a:	4621      	mov	r1, r4
   2006c:	4650      	mov	r0, sl
   2006e:	f7fa fe03 	bl	1ac78 <z_pend_curr>
	__asm__ volatile(
   20072:	f04f 0320 	mov.w	r3, #32
   20076:	f3ef 8411 	mrs	r4, BASEPRI
   2007a:	f383 8812 	msr	BASEPRI_MAX, r3
   2007e:	f3bf 8f6f 	isb	sy
   20082:	e7d6      	b.n	20032 <k_heap_aligned_alloc+0x30>

00020084 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   20084:	b538      	push	{r3, r4, r5, lr}
   20086:	4604      	mov	r4, r0
   20088:	f04f 0320 	mov.w	r3, #32
   2008c:	f3ef 8511 	mrs	r5, BASEPRI
   20090:	f383 8812 	msr	BASEPRI_MAX, r3
   20094:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   20098:	f7fb fdf0 	bl	1bc7c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   2009c:	f104 000c 	add.w	r0, r4, #12
   200a0:	f000 fb14 	bl	206cc <z_unpend_all>
   200a4:	b130      	cbz	r0, 200b4 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   200a6:	4629      	mov	r1, r5
   200a8:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   200ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   200b0:	f7fa bd5e 	b.w	1ab70 <z_reschedule>
	__asm__ volatile(
   200b4:	f385 8811 	msr	BASEPRI, r5
   200b8:	f3bf 8f6f 	isb	sy
}
   200bc:	bd38      	pop	{r3, r4, r5, pc}

000200be <k_mem_slab_init>:
{
   200be:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   200c0:	2400      	movs	r4, #0
   200c2:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   200c4:	ea41 0402 	orr.w	r4, r1, r2
   200c8:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   200cc:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   200d0:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   200d2:	d10c      	bne.n	200ee <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   200d4:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   200d6:	42a3      	cmp	r3, r4
   200d8:	d103      	bne.n	200e2 <k_mem_slab_init+0x24>
   200da:	e9c0 0000 	strd	r0, r0, [r0]
}
   200de:	2000      	movs	r0, #0
}
   200e0:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   200e2:	6945      	ldr	r5, [r0, #20]
   200e4:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   200e6:	3401      	adds	r4, #1
		slab->free_list = p;
   200e8:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   200ea:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   200ec:	e7f3      	b.n	200d6 <k_mem_slab_init+0x18>
		return -EINVAL;
   200ee:	f06f 0015 	mvn.w	r0, #21
	return rc;
   200f2:	e7f5      	b.n	200e0 <k_mem_slab_init+0x22>

000200f4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   200f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   200f6:	4604      	mov	r4, r0
   200f8:	460d      	mov	r5, r1
	__asm__ volatile(
   200fa:	f04f 0320 	mov.w	r3, #32
   200fe:	f3ef 8611 	mrs	r6, BASEPRI
   20102:	f383 8812 	msr	BASEPRI_MAX, r3
   20106:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   2010a:	6947      	ldr	r7, [r0, #20]
   2010c:	b977      	cbnz	r7, 2012c <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   2010e:	f000 fac5 	bl	2069c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   20112:	b158      	cbz	r0, 2012c <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   20114:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   20116:	6142      	str	r2, [r0, #20]
   20118:	67c7      	str	r7, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
   2011a:	f000 fa78 	bl	2060e <z_ready_thread>
			z_reschedule(&slab->lock, key);
   2011e:	4631      	mov	r1, r6
   20120:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   20124:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
   20128:	f7fa bd22 	b.w	1ab70 <z_reschedule>
	**(char ***) mem = slab->free_list;
   2012c:	682b      	ldr	r3, [r5, #0]
   2012e:	6962      	ldr	r2, [r4, #20]
   20130:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   20132:	682b      	ldr	r3, [r5, #0]
   20134:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   20136:	69a3      	ldr	r3, [r4, #24]
   20138:	3b01      	subs	r3, #1
   2013a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   2013c:	f386 8811 	msr	BASEPRI, r6
   20140:	f3bf 8f6f 	isb	sy
}
   20144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020146 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   20146:	f3ef 8005 	mrs	r0, IPSR
}
   2014a:	3800      	subs	r0, #0
   2014c:	bf18      	it	ne
   2014e:	2001      	movne	r0, #1
   20150:	4770      	bx	lr

00020152 <z_impl_k_thread_name_set>:
}
   20152:	f06f 0057 	mvn.w	r0, #87	; 0x57
   20156:	4770      	bx	lr

00020158 <k_thread_name_get>:
}
   20158:	2000      	movs	r0, #0
   2015a:	4770      	bx	lr

0002015c <z_impl_k_thread_start>:
	z_sched_start(thread);
   2015c:	f7fa be9e 	b.w	1ae9c <z_sched_start>

00020160 <z_pm_save_idle_exit>:
{
   20160:	b508      	push	{r3, lr}
	pm_system_resume();
   20162:	f7e2 ffdb 	bl	311c <pm_system_resume>
}
   20166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2016a:	f7fc bae4 	b.w	1c736 <sys_clock_idle_exit>

0002016e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   2016e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   20172:	428b      	cmp	r3, r1
   20174:	d001      	beq.n	2017a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   20176:	f7fa beaf 	b.w	1aed8 <z_set_prio>
}
   2017a:	2000      	movs	r0, #0
   2017c:	4770      	bx	lr

0002017e <queue_insert>:
{
   2017e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20182:	4699      	mov	r9, r3
   20184:	4604      	mov	r4, r0
   20186:	f89d 3020 	ldrb.w	r3, [sp, #32]
   2018a:	460d      	mov	r5, r1
   2018c:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   2018e:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   20192:	f04f 0220 	mov.w	r2, #32
   20196:	f3ef 8711 	mrs	r7, BASEPRI
   2019a:	f382 8812 	msr	BASEPRI_MAX, r2
   2019e:	f3bf 8f6f 	isb	sy
	if (is_append) {
   201a2:	b103      	cbz	r3, 201a6 <queue_insert+0x28>
	return list->tail;
   201a4:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   201a6:	4630      	mov	r0, r6
   201a8:	f000 fa78 	bl	2069c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   201ac:	b158      	cbz	r0, 201c6 <queue_insert+0x48>
   201ae:	2400      	movs	r4, #0
   201b0:	67c4      	str	r4, [r0, #124]	; 0x7c
   201b2:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   201b6:	f000 fa2a 	bl	2060e <z_ready_thread>
	z_reschedule(&queue->lock, key);
   201ba:	4630      	mov	r0, r6
   201bc:	4639      	mov	r1, r7
   201be:	f7fa fcd7 	bl	1ab70 <z_reschedule>
	return 0;
   201c2:	2000      	movs	r0, #0
   201c4:	e00c      	b.n	201e0 <queue_insert+0x62>
	if (alloc) {
   201c6:	f1b9 0f00 	cmp.w	r9, #0
   201ca:	d01b      	beq.n	20204 <queue_insert+0x86>
	return z_thread_aligned_alloc(0, size);
   201cc:	2108      	movs	r1, #8
   201ce:	f7fb fa45 	bl	1b65c <z_thread_aligned_alloc>
		if (anode == NULL) {
   201d2:	b938      	cbnz	r0, 201e4 <queue_insert+0x66>
	__asm__ volatile(
   201d4:	f387 8811 	msr	BASEPRI, r7
   201d8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   201dc:	f06f 000b 	mvn.w	r0, #11
}
   201e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   201e4:	2301      	movs	r3, #1
		anode->data = data;
   201e6:	f8c0 8004 	str.w	r8, [r0, #4]
   201ea:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   201ec:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   201ee:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   201f2:	b95d      	cbnz	r5, 2020c <queue_insert+0x8e>
	parent->next_and_flags = cur_flags | (unative_t)child;
   201f4:	6823      	ldr	r3, [r4, #0]
   201f6:	4313      	orrs	r3, r2
   201f8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   201fa:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   201fc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   201fe:	b973      	cbnz	r3, 2021e <queue_insert+0xa0>
	list->tail = node;
   20200:	6060      	str	r0, [r4, #4]
}
   20202:	e00c      	b.n	2021e <queue_insert+0xa0>
	node->next_and_flags = flags;
   20204:	f8c8 9000 	str.w	r9, [r8]
}
   20208:	4640      	mov	r0, r8
   2020a:	e7ef      	b.n	201ec <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   2020c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   2020e:	f033 0303 	bics.w	r3, r3, #3
   20212:	d110      	bne.n	20236 <queue_insert+0xb8>
	parent->next_and_flags = cur_flags | (unative_t)child;
   20214:	6002      	str	r2, [r0, #0]
	return list->tail;
   20216:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   20218:	b93a      	cbnz	r2, 2022a <queue_insert+0xac>
	list->head = node;
   2021a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   2021e:	2104      	movs	r1, #4
   20220:	f104 0010 	add.w	r0, r4, #16
   20224:	f000 fc5e 	bl	20ae4 <z_handle_obj_poll_events>
   20228:	e7c7      	b.n	201ba <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2022a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2022c:	f003 0303 	and.w	r3, r3, #3
   20230:	4303      	orrs	r3, r0
   20232:	6013      	str	r3, [r2, #0]
   20234:	e7e4      	b.n	20200 <queue_insert+0x82>
   20236:	4313      	orrs	r3, r2
   20238:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2023a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2023c:	f003 0303 	and.w	r3, r3, #3
   20240:	4303      	orrs	r3, r0
   20242:	602b      	str	r3, [r5, #0]
}
   20244:	e7eb      	b.n	2021e <queue_insert+0xa0>

00020246 <z_queue_node_peek>:
{
   20246:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   20248:	4604      	mov	r4, r0
   2024a:	b130      	cbz	r0, 2025a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2024c:	6802      	ldr	r2, [r0, #0]
   2024e:	0793      	lsls	r3, r2, #30
   20250:	d003      	beq.n	2025a <z_queue_node_peek+0x14>
		ret = anode->data;
   20252:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   20254:	b109      	cbz	r1, 2025a <z_queue_node_peek+0x14>
			k_free(anode);
   20256:	f000 fc53 	bl	20b00 <k_free>
}
   2025a:	4620      	mov	r0, r4
   2025c:	bd10      	pop	{r4, pc}

0002025e <z_impl_k_queue_init>:
	list->head = NULL;
   2025e:	2300      	movs	r3, #0
	list->tail = NULL;
   20260:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   20264:	f100 0308 	add.w	r3, r0, #8
   20268:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   2026c:	f100 0310 	add.w	r3, r0, #16
   20270:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   20274:	4770      	bx	lr

00020276 <k_queue_append>:
{
   20276:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   20278:	2301      	movs	r3, #1
   2027a:	9300      	str	r3, [sp, #0]
   2027c:	2300      	movs	r3, #0
{
   2027e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   20280:	4619      	mov	r1, r3
   20282:	f7ff ff7c 	bl	2017e <queue_insert>
}
   20286:	b003      	add	sp, #12
   20288:	f85d fb04 	ldr.w	pc, [sp], #4

0002028c <k_queue_prepend>:
{
   2028c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2028e:	2300      	movs	r3, #0
{
   20290:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   20292:	9300      	str	r3, [sp, #0]
   20294:	4619      	mov	r1, r3
   20296:	f7ff ff72 	bl	2017e <queue_insert>
}
   2029a:	b003      	add	sp, #12
   2029c:	f85d fb04 	ldr.w	pc, [sp], #4

000202a0 <k_queue_append_list>:
{
   202a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202a4:	4605      	mov	r5, r0
   202a6:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   202a8:	460c      	mov	r4, r1
   202aa:	b391      	cbz	r1, 20312 <k_queue_append_list+0x72>
   202ac:	b38a      	cbz	r2, 20312 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   202ae:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   202b2:	f04f 0320 	mov.w	r3, #32
   202b6:	f3ef 8811 	mrs	r8, BASEPRI
   202ba:	f383 8812 	msr	BASEPRI_MAX, r3
   202be:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   202c2:	4638      	mov	r0, r7
   202c4:	f000 f9ea 	bl	2069c <z_unpend_first_thread>
   202c8:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   202cc:	b920      	cbnz	r0, 202d8 <k_queue_append_list+0x38>
	return list->tail;
   202ce:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   202d0:	b9ca      	cbnz	r2, 20306 <k_queue_append_list+0x66>
	list->head = node;
   202d2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   202d4:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   202d6:	e00a      	b.n	202ee <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   202d8:	6144      	str	r4, [r0, #20]
   202da:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   202de:	f000 f996 	bl	2060e <z_ready_thread>
		head = *(void **)head;
   202e2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   202e4:	4638      	mov	r0, r7
   202e6:	f000 f9d9 	bl	2069c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   202ea:	2c00      	cmp	r4, #0
   202ec:	d1ee      	bne.n	202cc <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   202ee:	2104      	movs	r1, #4
   202f0:	f105 0010 	add.w	r0, r5, #16
   202f4:	f000 fbf6 	bl	20ae4 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   202f8:	4638      	mov	r0, r7
   202fa:	4641      	mov	r1, r8
   202fc:	f7fa fc38 	bl	1ab70 <z_reschedule>
	return 0;
   20300:	2000      	movs	r0, #0
}
   20302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   20306:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   20308:	f003 0303 	and.w	r3, r3, #3
   2030c:	431c      	orrs	r4, r3
   2030e:	6014      	str	r4, [r2, #0]
}
   20310:	e7e0      	b.n	202d4 <k_queue_append_list+0x34>
		return -EINVAL;
   20312:	f06f 0015 	mvn.w	r0, #21
   20316:	e7f4      	b.n	20302 <k_queue_append_list+0x62>

00020318 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   20318:	b15a      	cbz	r2, 20332 <z_impl_k_sem_init+0x1a>
   2031a:	428a      	cmp	r2, r1
   2031c:	d309      	bcc.n	20332 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2031e:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   20322:	e9c0 1202 	strd	r1, r2, [r0, #8]
   20326:	e9c0 0000 	strd	r0, r0, [r0]
   2032a:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2032e:	2000      	movs	r0, #0
   20330:	4770      	bx	lr
		return -EINVAL;
   20332:	f06f 0015 	mvn.w	r0, #21
}
   20336:	4770      	bx	lr

00020338 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
   20338:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
   2033a:	2301      	movs	r3, #1
   2033c:	408b      	lsls	r3, r1
   2033e:	ea22 0303 	bic.w	r3, r2, r3
   20342:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
   20344:	fa22 f001 	lsr.w	r0, r2, r1
}
   20348:	f000 0001 	and.w	r0, r0, #1
   2034c:	4770      	bx	lr

0002034e <unschedule_locked>:
{
   2034e:	b538      	push	{r3, r4, r5, lr}
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20350:	2103      	movs	r1, #3
{
   20352:	4605      	mov	r5, r0
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   20354:	300c      	adds	r0, #12
   20356:	f7ff ffef 	bl	20338 <flag_test_and_clear>
   2035a:	4604      	mov	r4, r0
   2035c:	b118      	cbz	r0, 20366 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2035e:	f105 0010 	add.w	r0, r5, #16
   20362:	f000 f9e0 	bl	20726 <z_abort_timeout>
}
   20366:	4620      	mov	r0, r4
   20368:	bd38      	pop	{r3, r4, r5, pc}

0002036a <notify_queue_locked.isra.0>:
	if (queue != NULL) {
   2036a:	b120      	cbz	r0, 20376 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2036c:	2200      	movs	r2, #0
   2036e:	4611      	mov	r1, r2
   20370:	3088      	adds	r0, #136	; 0x88
   20372:	f000 b9bb 	b.w	206ec <z_sched_wake>
}
   20376:	4770      	bx	lr

00020378 <cancel_async_locked>:
	return (*flagp & BIT(bit)) != 0U;
   20378:	68c3      	ldr	r3, [r0, #12]
{
   2037a:	b570      	push	{r4, r5, r6, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2037c:	f3c3 0540 	ubfx	r5, r3, #1, #1
   20380:	079b      	lsls	r3, r3, #30
{
   20382:	4604      	mov	r4, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   20384:	d416      	bmi.n	203b4 <cancel_async_locked+0x3c>
		queue_remove_locked(work->queue, work);
   20386:	6886      	ldr	r6, [r0, #8]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   20388:	2102      	movs	r1, #2
   2038a:	300c      	adds	r0, #12
   2038c:	f7ff ffd4 	bl	20338 <flag_test_and_clear>
   20390:	b180      	cbz	r0, 203b4 <cancel_async_locked+0x3c>
	return list->head;
   20392:	f8d6 2080 	ldr.w	r2, [r6, #128]	; 0x80
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20396:	b16a      	cbz	r2, 203b4 <cancel_async_locked+0x3c>
   20398:	4294      	cmp	r4, r2
   2039a:	d11b      	bne.n	203d4 <cancel_async_locked+0x5c>
	return node->next;
   2039c:	6822      	ldr	r2, [r4, #0]
	return list->tail;
   2039e:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
Z_GENLIST_REMOVE(slist, snode)
   203a2:	b98d      	cbnz	r5, 203c8 <cancel_async_locked+0x50>
   203a4:	428c      	cmp	r4, r1
	list->head = node;
   203a6:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
Z_GENLIST_REMOVE(slist, snode)
   203aa:	d101      	bne.n	203b0 <cancel_async_locked+0x38>
	list->tail = node;
   203ac:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	parent->next = child;
   203b0:	2300      	movs	r3, #0
   203b2:	6023      	str	r3, [r4, #0]
	return *flagp;
   203b4:	68e3      	ldr	r3, [r4, #12]
	if (ret != 0) {
   203b6:	f013 000f 	ands.w	r0, r3, #15
	*flagp |= BIT(bit);
   203ba:	bf1e      	ittt	ne
   203bc:	f043 0302 	orrne.w	r3, r3, #2
   203c0:	60e3      	strne	r3, [r4, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   203c2:	f003 000f 	andne.w	r0, r3, #15
}
   203c6:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_REMOVE(slist, snode)
   203c8:	428c      	cmp	r4, r1
	parent->next = child;
   203ca:	602a      	str	r2, [r5, #0]
	list->tail = node;
   203cc:	bf08      	it	eq
   203ce:	f8c6 5084 	streq.w	r5, [r6, #132]	; 0x84
}
   203d2:	e7ed      	b.n	203b0 <cancel_async_locked+0x38>
	return node->next;
   203d4:	4615      	mov	r5, r2
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   203d6:	6812      	ldr	r2, [r2, #0]
   203d8:	e7dd      	b.n	20396 <cancel_async_locked+0x1e>

000203da <work_timeout>:
{
   203da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   203dc:	4604      	mov	r4, r0
   203de:	f04f 0320 	mov.w	r3, #32
   203e2:	f3ef 8511 	mrs	r5, BASEPRI
   203e6:	f383 8812 	msr	BASEPRI_MAX, r3
   203ea:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
   203ee:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   203f0:	f1a0 0610 	sub.w	r6, r0, #16
   203f4:	2103      	movs	r1, #3
   203f6:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
   203f8:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   203fa:	f7ff ff9d 	bl	20338 <flag_test_and_clear>
   203fe:	b128      	cbz	r0, 2040c <work_timeout+0x32>
		queue = dw->queue;
   20400:	69a3      	ldr	r3, [r4, #24]
   20402:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   20404:	a901      	add	r1, sp, #4
   20406:	4630      	mov	r0, r6
   20408:	f7fa fa7a 	bl	1a900 <submit_to_queue_locked>
	__asm__ volatile(
   2040c:	f385 8811 	msr	BASEPRI, r5
   20410:	f3bf 8f6f 	isb	sy
}
   20414:	b002      	add	sp, #8
   20416:	bd70      	pop	{r4, r5, r6, pc}

00020418 <k_work_init>:
{
   20418:	b538      	push	{r3, r4, r5, lr}
   2041a:	4604      	mov	r4, r0
   2041c:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   2041e:	2210      	movs	r2, #16
   20420:	2100      	movs	r1, #0
   20422:	f7fd fafe 	bl	1da22 <memset>
   20426:	6065      	str	r5, [r4, #4]
}
   20428:	bd38      	pop	{r3, r4, r5, pc}

0002042a <k_work_submit_to_queue>:
{
   2042a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2042c:	9001      	str	r0, [sp, #4]
   2042e:	4608      	mov	r0, r1
	__asm__ volatile(
   20430:	f04f 0320 	mov.w	r3, #32
   20434:	f3ef 8511 	mrs	r5, BASEPRI
   20438:	f383 8812 	msr	BASEPRI_MAX, r3
   2043c:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   20440:	a901      	add	r1, sp, #4
   20442:	f7fa fa5d 	bl	1a900 <submit_to_queue_locked>
   20446:	4604      	mov	r4, r0
	__asm__ volatile(
   20448:	f385 8811 	msr	BASEPRI, r5
   2044c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   20450:	2800      	cmp	r0, #0
   20452:	dd04      	ble.n	2045e <k_work_submit_to_queue+0x34>
	return z_impl_k_is_preempt_thread();
   20454:	f7fa fe3c 	bl	1b0d0 <z_impl_k_is_preempt_thread>
   20458:	b108      	cbz	r0, 2045e <k_work_submit_to_queue+0x34>
	z_impl_k_yield();
   2045a:	f7fa fd91 	bl	1af80 <z_impl_k_yield>
}
   2045e:	4620      	mov	r0, r4
   20460:	b003      	add	sp, #12
   20462:	bd30      	pop	{r4, r5, pc}

00020464 <k_work_init_delayable>:
{
   20464:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
   20466:	2230      	movs	r2, #48	; 0x30
{
   20468:	4604      	mov	r4, r0
   2046a:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
   2046c:	2100      	movs	r1, #0
   2046e:	f7fd fad8 	bl	1da22 <memset>
   20472:	f44f 7380 	mov.w	r3, #256	; 0x100
   20476:	6065      	str	r5, [r4, #4]
   20478:	60e3      	str	r3, [r4, #12]
}
   2047a:	bd38      	pop	{r3, r4, r5, pc}

0002047c <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   2047c:	b538      	push	{r3, r4, r5, lr}
   2047e:	4604      	mov	r4, r0
	__asm__ volatile(
   20480:	f04f 0320 	mov.w	r3, #32
   20484:	f3ef 8511 	mrs	r5, BASEPRI
   20488:	f383 8812 	msr	BASEPRI_MAX, r3
   2048c:	f3bf 8f6f 	isb	sy
	(void)unschedule_locked(dwork);
   20490:	f7ff ff5d 	bl	2034e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   20494:	4620      	mov	r0, r4
   20496:	f7ff ff6f 	bl	20378 <cancel_async_locked>
	__asm__ volatile(
   2049a:	f385 8811 	msr	BASEPRI, r5
   2049e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   204a2:	bd38      	pop	{r3, r4, r5, pc}

000204a4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   204a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   204a6:	4604      	mov	r4, r0
   204a8:	460d      	mov	r5, r1
	__asm__ volatile(
   204aa:	f04f 0320 	mov.w	r3, #32
   204ae:	f3ef 8711 	mrs	r7, BASEPRI
   204b2:	f383 8812 	msr	BASEPRI_MAX, r3
   204b6:	f3bf 8f6f 	isb	sy
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   204ba:	f3bf 8f5b 	dmb	ish
   204be:	68c3      	ldr	r3, [r0, #12]
   204c0:	f3bf 8f5b 	dmb	ish
	return atomic_get(&dwork->work.flags) & K_WORK_MASK;
   204c4:	f003 030f 	and.w	r3, r3, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   204c8:	2b00      	cmp	r3, #0
   204ca:	bf14      	ite	ne
   204cc:	2601      	movne	r6, #1
   204ce:	2600      	moveq	r6, #0
	bool need_wait = false;

	if (pending) {
   204d0:	d009      	beq.n	204e6 <k_work_cancel_delayable_sync+0x42>
	(void)unschedule_locked(dwork);
   204d2:	f7ff ff3c 	bl	2034e <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   204d6:	4620      	mov	r0, r4
   204d8:	f7ff ff4e 	bl	20378 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   204dc:	4629      	mov	r1, r5
   204de:	4620      	mov	r0, r4
   204e0:	f7fa f9f0 	bl	1a8c4 <cancel_sync_locked>
   204e4:	4603      	mov	r3, r0
	__asm__ volatile(
   204e6:	f387 8811 	msr	BASEPRI, r7
   204ea:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   204ee:	b13b      	cbz	r3, 20500 <k_work_cancel_delayable_sync+0x5c>
	return z_impl_k_sem_take(sem, timeout);
   204f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   204f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   204f8:	f105 0008 	add.w	r0, r5, #8
   204fc:	f7fa f90a 	bl	1a714 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   20500:	4630      	mov	r0, r6
   20502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00020504 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
   20504:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20508:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2050a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2050c:	2300      	movs	r3, #0
	node->prev = NULL;
   2050e:	e9c0 3300 	strd	r3, r3, [r0]
}
   20512:	4770      	bx	lr

00020514 <unpend_thread_no_timeout>:
{
   20514:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
   20516:	f7ff fff5 	bl	20504 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2051a:	7b43      	ldrb	r3, [r0, #13]
   2051c:	f023 0302 	bic.w	r3, r3, #2
   20520:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
   20522:	2300      	movs	r3, #0
   20524:	6083      	str	r3, [r0, #8]
}
   20526:	bd08      	pop	{r3, pc}

00020528 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   20528:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2052c:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   20530:	4283      	cmp	r3, r0
		return b2 - b1;
   20532:	bf14      	ite	ne
   20534:	1ac0      	subne	r0, r0, r3
	return 0;
   20536:	2000      	moveq	r0, #0
}
   20538:	4770      	bx	lr

0002053a <z_unpend_thread_no_timeout>:
{
   2053a:	b508      	push	{r3, lr}
	__asm__ volatile(
   2053c:	f04f 0320 	mov.w	r3, #32
   20540:	f3ef 8111 	mrs	r1, BASEPRI
   20544:	f383 8812 	msr	BASEPRI_MAX, r3
   20548:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2054c:	f7ff ffe2 	bl	20514 <unpend_thread_no_timeout>
	__asm__ volatile(
   20550:	f381 8811 	msr	BASEPRI, r1
   20554:	f3bf 8f6f 	isb	sy
}
   20558:	bd08      	pop	{r3, pc}

0002055a <z_unpend_thread>:
{
   2055a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2055c:	f04f 0320 	mov.w	r3, #32
   20560:	f3ef 8411 	mrs	r4, BASEPRI
   20564:	f383 8812 	msr	BASEPRI_MAX, r3
   20568:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   2056c:	f7ff ffd2 	bl	20514 <unpend_thread_no_timeout>
	__asm__ volatile(
   20570:	f384 8811 	msr	BASEPRI, r4
   20574:	f3bf 8f6f 	isb	sy
}
   20578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2057c:	3018      	adds	r0, #24
   2057e:	f000 b8d2 	b.w	20726 <z_abort_timeout>

00020582 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   20582:	4603      	mov	r3, r0
   20584:	b920      	cbnz	r0, 20590 <z_reschedule_irqlock+0xe>
   20586:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2058a:	b90a      	cbnz	r2, 20590 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
   2058c:	f7e3 bb08 	b.w	3ba0 <arch_swap>
   20590:	f383 8811 	msr	BASEPRI, r3
   20594:	f3bf 8f6f 	isb	sy
}
   20598:	4770      	bx	lr

0002059a <z_reschedule_unlocked>:
	__asm__ volatile(
   2059a:	f04f 0320 	mov.w	r3, #32
   2059e:	f3ef 8011 	mrs	r0, BASEPRI
   205a2:	f383 8812 	msr	BASEPRI_MAX, r3
   205a6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   205aa:	f7ff bfea 	b.w	20582 <z_reschedule_irqlock>

000205ae <z_priq_dumb_best>:
{
   205ae:	4603      	mov	r3, r0
	return list->head == list;
   205b0:	6800      	ldr	r0, [r0, #0]
}
   205b2:	4283      	cmp	r3, r0
   205b4:	bf08      	it	eq
   205b6:	2000      	moveq	r0, #0
   205b8:	4770      	bx	lr

000205ba <add_to_waitq_locked>:
{
   205ba:	b538      	push	{r3, r4, r5, lr}
   205bc:	4604      	mov	r4, r0
   205be:	460d      	mov	r5, r1
	unready_thread(thread);
   205c0:	f7fa fb1c 	bl	1abfc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   205c4:	7b63      	ldrb	r3, [r4, #13]
   205c6:	f043 0302 	orr.w	r3, r3, #2
   205ca:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   205cc:	b195      	cbz	r5, 205f4 <add_to_waitq_locked+0x3a>
   205ce:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   205d0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   205d2:	429d      	cmp	r5, r3
   205d4:	d015      	beq.n	20602 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205d6:	b1a3      	cbz	r3, 20602 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
   205d8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   205dc:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   205e0:	4291      	cmp	r1, r2
   205e2:	d008      	beq.n	205f6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
   205e4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   205e6:	2a00      	cmp	r2, #0
   205e8:	dd05      	ble.n	205f6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
   205ea:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   205ec:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   205f0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   205f2:	605c      	str	r4, [r3, #4]
}
   205f4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   205f6:	686a      	ldr	r2, [r5, #4]
   205f8:	4293      	cmp	r3, r2
   205fa:	d002      	beq.n	20602 <add_to_waitq_locked+0x48>
   205fc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   205fe:	2b00      	cmp	r3, #0
   20600:	d1ec      	bne.n	205dc <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
   20602:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   20604:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   20608:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2060a:	606c      	str	r4, [r5, #4]
}
   2060c:	e7f2      	b.n	205f4 <add_to_waitq_locked+0x3a>

0002060e <z_ready_thread>:
{
   2060e:	b510      	push	{r4, lr}
   20610:	f04f 0320 	mov.w	r3, #32
   20614:	f3ef 8411 	mrs	r4, BASEPRI
   20618:	f383 8812 	msr	BASEPRI_MAX, r3
   2061c:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
   20620:	f7fa fc06 	bl	1ae30 <ready_thread>
	__asm__ volatile(
   20624:	f384 8811 	msr	BASEPRI, r4
   20628:	f3bf 8f6f 	isb	sy
}
   2062c:	bd10      	pop	{r4, pc}

0002062e <z_thread_timeout>:
{
   2062e:	b510      	push	{r4, lr}
   20630:	4601      	mov	r1, r0
	__asm__ volatile(
   20632:	f04f 0320 	mov.w	r3, #32
   20636:	f3ef 8411 	mrs	r4, BASEPRI
   2063a:	f383 8812 	msr	BASEPRI_MAX, r3
   2063e:	f3bf 8f6f 	isb	sy
		if (!killed) {
   20642:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
   20646:	f013 0f28 	tst.w	r3, #40	; 0x28
   2064a:	d10d      	bne.n	20668 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
   2064c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   20650:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
   20652:	b10b      	cbz	r3, 20658 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
   20654:	f7ff ff5e 	bl	20514 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   20658:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
   2065c:	f023 0314 	bic.w	r3, r3, #20
   20660:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
   20664:	f7fa fbe4 	bl	1ae30 <ready_thread>
	__asm__ volatile(
   20668:	f384 8811 	msr	BASEPRI, r4
   2066c:	f3bf 8f6f 	isb	sy
}
   20670:	bd10      	pop	{r4, pc}

00020672 <z_unpend1_no_timeout>:
{
   20672:	b510      	push	{r4, lr}
	__asm__ volatile(
   20674:	f04f 0320 	mov.w	r3, #32
   20678:	f3ef 8411 	mrs	r4, BASEPRI
   2067c:	f383 8812 	msr	BASEPRI_MAX, r3
   20680:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   20684:	f7ff ff93 	bl	205ae <z_priq_dumb_best>
		if (thread != NULL) {
   20688:	4601      	mov	r1, r0
   2068a:	b108      	cbz	r0, 20690 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   2068c:	f7ff ff42 	bl	20514 <unpend_thread_no_timeout>
	__asm__ volatile(
   20690:	f384 8811 	msr	BASEPRI, r4
   20694:	f3bf 8f6f 	isb	sy
}
   20698:	4608      	mov	r0, r1
   2069a:	bd10      	pop	{r4, pc}

0002069c <z_unpend_first_thread>:
{
   2069c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2069e:	f04f 0320 	mov.w	r3, #32
   206a2:	f3ef 8511 	mrs	r5, BASEPRI
   206a6:	f383 8812 	msr	BASEPRI_MAX, r3
   206aa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   206ae:	f7ff ff7e 	bl	205ae <z_priq_dumb_best>
		if (thread != NULL) {
   206b2:	4604      	mov	r4, r0
   206b4:	b120      	cbz	r0, 206c0 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
   206b6:	f7ff ff2d 	bl	20514 <unpend_thread_no_timeout>
   206ba:	3018      	adds	r0, #24
   206bc:	f000 f833 	bl	20726 <z_abort_timeout>
	__asm__ volatile(
   206c0:	f385 8811 	msr	BASEPRI, r5
   206c4:	f3bf 8f6f 	isb	sy
}
   206c8:	4620      	mov	r0, r4
   206ca:	bd38      	pop	{r3, r4, r5, pc}

000206cc <z_unpend_all>:
{
   206cc:	b538      	push	{r3, r4, r5, lr}
   206ce:	4605      	mov	r5, r0
	int need_sched = 0;
   206d0:	2000      	movs	r0, #0
	return list->head == list;
   206d2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   206d4:	42a5      	cmp	r5, r4
   206d6:	d000      	beq.n	206da <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   206d8:	b904      	cbnz	r4, 206dc <z_unpend_all+0x10>
}
   206da:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   206dc:	4620      	mov	r0, r4
   206de:	f7ff ff3c 	bl	2055a <z_unpend_thread>
		z_ready_thread(thread);
   206e2:	4620      	mov	r0, r4
   206e4:	f7ff ff93 	bl	2060e <z_ready_thread>
		need_sched = 1;
   206e8:	2001      	movs	r0, #1
   206ea:	e7f2      	b.n	206d2 <z_unpend_all+0x6>

000206ec <z_sched_wake>:
{
   206ec:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   206ee:	f04f 0320 	mov.w	r3, #32
   206f2:	f3ef 8511 	mrs	r5, BASEPRI
   206f6:	f383 8812 	msr	BASEPRI_MAX, r3
   206fa:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   206fe:	f7ff ff56 	bl	205ae <z_priq_dumb_best>
		if (thread != NULL) {
   20702:	4604      	mov	r4, r0
   20704:	b150      	cbz	r0, 2071c <z_sched_wake+0x30>
   20706:	67c1      	str	r1, [r0, #124]	; 0x7c
   20708:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
   2070a:	f7ff ff03 	bl	20514 <unpend_thread_no_timeout>
   2070e:	3018      	adds	r0, #24
   20710:	f000 f809 	bl	20726 <z_abort_timeout>
			ready_thread(thread);
   20714:	4620      	mov	r0, r4
   20716:	f7fa fb8b 	bl	1ae30 <ready_thread>
			ret = true;
   2071a:	2001      	movs	r0, #1
	__asm__ volatile(
   2071c:	f385 8811 	msr	BASEPRI, r5
   20720:	f3bf 8f6f 	isb	sy
}
   20724:	bd38      	pop	{r3, r4, r5, pc}

00020726 <z_abort_timeout>:
{
   20726:	b510      	push	{r4, lr}
	__asm__ volatile(
   20728:	f04f 0220 	mov.w	r2, #32
   2072c:	f3ef 8411 	mrs	r4, BASEPRI
   20730:	f382 8812 	msr	BASEPRI_MAX, r2
   20734:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   20738:	6803      	ldr	r3, [r0, #0]
   2073a:	b13b      	cbz	r3, 2074c <z_abort_timeout+0x26>
			remove_timeout(to);
   2073c:	f7fa fd88 	bl	1b250 <remove_timeout>
			ret = 0;
   20740:	2000      	movs	r0, #0
	__asm__ volatile(
   20742:	f384 8811 	msr	BASEPRI, r4
   20746:	f3bf 8f6f 	isb	sy
}
   2074a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   2074c:	f06f 0015 	mvn.w	r0, #21
   20750:	e7f7      	b.n	20742 <z_abort_timeout+0x1c>

00020752 <z_get_next_timeout_expiry>:
{
   20752:	b510      	push	{r4, lr}
	__asm__ volatile(
   20754:	f04f 0320 	mov.w	r3, #32
   20758:	f3ef 8411 	mrs	r4, BASEPRI
   2075c:	f383 8812 	msr	BASEPRI_MAX, r3
   20760:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   20764:	f7fa fd4c 	bl	1b200 <next_timeout>
	__asm__ volatile(
   20768:	f384 8811 	msr	BASEPRI, r4
   2076c:	f3bf 8f6f 	isb	sy
}
   20770:	bd10      	pop	{r4, pc}

00020772 <z_set_timeout_expiry>:
{
   20772:	b570      	push	{r4, r5, r6, lr}
   20774:	4604      	mov	r4, r0
   20776:	460d      	mov	r5, r1
	__asm__ volatile(
   20778:	f04f 0320 	mov.w	r3, #32
   2077c:	f3ef 8611 	mrs	r6, BASEPRI
   20780:	f383 8812 	msr	BASEPRI_MAX, r3
   20784:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   20788:	f7fa fd3a 	bl	1b200 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   2078c:	2801      	cmp	r0, #1
   2078e:	dd05      	ble.n	2079c <z_set_timeout_expiry+0x2a>
   20790:	42a0      	cmp	r0, r4
   20792:	db03      	blt.n	2079c <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   20794:	4629      	mov	r1, r5
   20796:	4620      	mov	r0, r4
   20798:	f7e2 ffac 	bl	36f4 <sys_clock_set_timeout>
	__asm__ volatile(
   2079c:	f386 8811 	msr	BASEPRI, r6
   207a0:	f3bf 8f6f 	isb	sy
}
   207a4:	bd70      	pop	{r4, r5, r6, pc}

000207a6 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   207a6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   207a8:	f7fa fe42 	bl	1b430 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   207ac:	bd08      	pop	{r3, pc}

000207ae <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   207ae:	f7fa be3f 	b.w	1b430 <sys_clock_tick_get>

000207b2 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   207b2:	b108      	cbz	r0, 207b8 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   207b4:	f7e3 be3c 	b.w	4430 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   207b8:	4770      	bx	lr

000207ba <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207ba:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   207be:	bf08      	it	eq
   207c0:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   207c4:	b538      	push	{r3, r4, r5, lr}
   207c6:	4605      	mov	r5, r0
   207c8:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   207ca:	d01d      	beq.n	20808 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   207cc:	ea51 0300 	orrs.w	r3, r1, r0
   207d0:	d103      	bne.n	207da <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   207d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   207d6:	f7fa be2b 	b.w	1b430 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   207da:	f06f 0301 	mvn.w	r3, #1
   207de:	1a18      	subs	r0, r3, r0
   207e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   207e4:	eb63 0101 	sbc.w	r1, r3, r1
   207e8:	2900      	cmp	r1, #0
   207ea:	da0c      	bge.n	20806 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
   207ec:	f7fa fe20 	bl	1b430 <sys_clock_tick_get>
   207f0:	2d01      	cmp	r5, #1
   207f2:	4622      	mov	r2, r4
   207f4:	f174 0400 	sbcs.w	r4, r4, #0
   207f8:	462b      	mov	r3, r5
   207fa:	bfbc      	itt	lt
   207fc:	2301      	movlt	r3, #1
   207fe:	2200      	movlt	r2, #0
   20800:	1818      	adds	r0, r3, r0
   20802:	eb41 0102 	adc.w	r1, r1, r2
}
   20806:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   20808:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2080c:	4601      	mov	r1, r0
   2080e:	e7fa      	b.n	20806 <sys_clock_timeout_end_calc+0x4c>

00020810 <k_timer_init>:
	timer->status = 0U;
   20810:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   20812:	e9c0 1208 	strd	r1, r2, [r0, #32]
   20816:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2081a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2081e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   20822:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   20824:	6343      	str	r3, [r0, #52]	; 0x34
}
   20826:	4770      	bx	lr

00020828 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   20828:	b510      	push	{r4, lr}
   2082a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2082c:	f7ff ff7b 	bl	20726 <z_abort_timeout>

	if (inactive) {
   20830:	b9b0      	cbnz	r0, 20860 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   20832:	6a63      	ldr	r3, [r4, #36]	; 0x24
   20834:	b10b      	cbz	r3, 2083a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   20836:	4620      	mov	r0, r4
   20838:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2083a:	f104 0018 	add.w	r0, r4, #24
   2083e:	f7ff ff18 	bl	20672 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   20842:	b168      	cbz	r0, 20860 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   20844:	f7ff fee3 	bl	2060e <z_ready_thread>
	__asm__ volatile(
   20848:	f04f 0320 	mov.w	r3, #32
   2084c:	f3ef 8011 	mrs	r0, BASEPRI
   20850:	f383 8812 	msr	BASEPRI_MAX, r3
   20854:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   20858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2085c:	f7ff be91 	b.w	20582 <z_reschedule_irqlock>
   20860:	bd10      	pop	{r4, pc}

00020862 <add_event>:
{
   20862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20864:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   20866:	e9d0 2300 	ldrd	r2, r3, [r0]
   2086a:	4290      	cmp	r0, r2
   2086c:	4604      	mov	r4, r0
   2086e:	460d      	mov	r5, r1
   20870:	d105      	bne.n	2087e <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   20872:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   20874:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   20878:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2087a:	6065      	str	r5, [r4, #4]
}
   2087c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2087e:	2b00      	cmp	r3, #0
   20880:	d0f7      	beq.n	20872 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   20882:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20884:	b100      	cbz	r0, 20888 <add_event+0x26>
   20886:	3860      	subs	r0, #96	; 0x60
   20888:	b107      	cbz	r7, 2088c <add_event+0x2a>
   2088a:	3f60      	subs	r7, #96	; 0x60
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2088c:	4639      	mov	r1, r7
   2088e:	f7ff fe4b 	bl	20528 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   20892:	2800      	cmp	r0, #0
   20894:	dced      	bgt.n	20872 <add_event+0x10>
	return list->head == list;
   20896:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20898:	42b4      	cmp	r4, r6
   2089a:	d0ea      	beq.n	20872 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2089c:	2e00      	cmp	r6, #0
   2089e:	d0e8      	beq.n	20872 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   208a0:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   208a2:	b101      	cbz	r1, 208a6 <add_event+0x44>
   208a4:	3960      	subs	r1, #96	; 0x60
		if (z_sched_prio_cmp(poller_thread(poller),
   208a6:	4638      	mov	r0, r7
   208a8:	f7ff fe3e 	bl	20528 <z_sched_prio_cmp>
   208ac:	2800      	cmp	r0, #0
   208ae:	dd05      	ble.n	208bc <add_event+0x5a>
	sys_dnode_t *const prev = successor->prev;
   208b0:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   208b2:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   208b6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   208b8:	6075      	str	r5, [r6, #4]
			return;
   208ba:	e7df      	b.n	2087c <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   208bc:	6863      	ldr	r3, [r4, #4]
   208be:	429e      	cmp	r6, r3
   208c0:	d0d7      	beq.n	20872 <add_event+0x10>
   208c2:	6836      	ldr	r6, [r6, #0]
   208c4:	e7ea      	b.n	2089c <add_event+0x3a>

000208c6 <register_events>:
{
   208c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   208ca:	2500      	movs	r5, #0
{
   208cc:	468b      	mov	fp, r1
   208ce:	4614      	mov	r4, r2
   208d0:	461f      	mov	r7, r3
   208d2:	4682      	mov	sl, r0
	int events_registered = 0;
   208d4:	462e      	mov	r6, r5
	event->poller = NULL;
   208d6:	46a8      	mov	r8, r5
	for (int ii = 0; ii < num_events; ii++) {
   208d8:	455d      	cmp	r5, fp
   208da:	db02      	blt.n	208e2 <register_events+0x1c>
}
   208dc:	4630      	mov	r0, r6
   208de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208e2:	f04f 0320 	mov.w	r3, #32
   208e6:	f3ef 8911 	mrs	r9, BASEPRI
   208ea:	f383 8812 	msr	BASEPRI_MAX, r3
   208ee:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   208f2:	f89a 300d 	ldrb.w	r3, [sl, #13]
   208f6:	f003 031f 	and.w	r3, r3, #31
   208fa:	3b01      	subs	r3, #1
   208fc:	2b07      	cmp	r3, #7
   208fe:	d80f      	bhi.n	20920 <register_events+0x5a>
   20900:	e8df f003 	tbb	[pc, r3]
   20904:	0a0e041e 	.word	0x0a0e041e
   20908:	250e0e0e 	.word	0x250e0e0e
		if (k_sem_count_get(event->sem) > 0U) {
   2090c:	f8da 3010 	ldr.w	r3, [sl, #16]
   20910:	689b      	ldr	r3, [r3, #8]
   20912:	b12b      	cbz	r3, 20920 <register_events+0x5a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   20914:	2302      	movs	r3, #2
   20916:	e020      	b.n	2095a <register_events+0x94>
		if (!k_queue_is_empty(event->queue)) {
   20918:	f8da 3010 	ldr.w	r3, [sl, #16]
   2091c:	681b      	ldr	r3, [r3, #0]
   2091e:	bb8b      	cbnz	r3, 20984 <register_events+0xbe>
		} else if (!just_check && poller->is_polling) {
   20920:	bb47      	cbnz	r7, 20974 <register_events+0xae>
   20922:	7823      	ldrb	r3, [r4, #0]
   20924:	b333      	cbz	r3, 20974 <register_events+0xae>
	switch (event->type) {
   20926:	f89a 300d 	ldrb.w	r3, [sl, #13]
   2092a:	f003 031f 	and.w	r3, r3, #31
   2092e:	3b01      	subs	r3, #1
   20930:	2b07      	cmp	r3, #7
   20932:	d830      	bhi.n	20996 <register_events+0xd0>
   20934:	e8df f003 	tbb	[pc, r3]
   20938:	282f2833 	.word	0x282f2833
   2093c:	382f2f2f 	.word	0x382f2f2f
		if (event->signal->signaled != 0U) {
   20940:	f8da 3010 	ldr.w	r3, [sl, #16]
   20944:	689b      	ldr	r3, [r3, #8]
   20946:	2b00      	cmp	r3, #0
   20948:	d0ea      	beq.n	20920 <register_events+0x5a>
			*state = K_POLL_STATE_SIGNALED;
   2094a:	2301      	movs	r3, #1
   2094c:	e005      	b.n	2095a <register_events+0x94>
		if (event->msgq->used_msgs > 0) {
   2094e:	f8da 3010 	ldr.w	r3, [sl, #16]
   20952:	6a1b      	ldr	r3, [r3, #32]
   20954:	2b00      	cmp	r3, #0
   20956:	d0e3      	beq.n	20920 <register_events+0x5a>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   20958:	2310      	movs	r3, #16
	event->state |= state;
   2095a:	f8da 200c 	ldr.w	r2, [sl, #12]
	event->poller = NULL;
   2095e:	f8ca 8008 	str.w	r8, [sl, #8]
	event->state |= state;
   20962:	f3c2 3145 	ubfx	r1, r2, #13, #6
   20966:	430b      	orrs	r3, r1
   20968:	f363 3252 	bfi	r2, r3, #13, #6
   2096c:	f8ca 200c 	str.w	r2, [sl, #12]
			poller->is_polling = false;
   20970:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   20974:	f389 8811 	msr	BASEPRI, r9
   20978:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   2097c:	3501      	adds	r5, #1
   2097e:	f10a 0a14 	add.w	sl, sl, #20
   20982:	e7a9      	b.n	208d8 <register_events+0x12>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   20984:	2304      	movs	r3, #4
   20986:	e7e8      	b.n	2095a <register_events+0x94>
		add_event(&event->queue->poll_events, event, poller);
   20988:	f8da 0010 	ldr.w	r0, [sl, #16]
   2098c:	4622      	mov	r2, r4
   2098e:	4651      	mov	r1, sl
   20990:	3010      	adds	r0, #16
		add_event(&event->msgq->poll_events, event, poller);
   20992:	f7ff ff66 	bl	20862 <add_event>
	event->poller = poller;
   20996:	f8ca 4008 	str.w	r4, [sl, #8]
			events_registered += 1;
   2099a:	3601      	adds	r6, #1
   2099c:	e7ea      	b.n	20974 <register_events+0xae>
		add_event(&event->signal->poll_events, event, poller);
   2099e:	f8da 0010 	ldr.w	r0, [sl, #16]
   209a2:	4622      	mov	r2, r4
   209a4:	4651      	mov	r1, sl
   209a6:	e7f4      	b.n	20992 <register_events+0xcc>
		add_event(&event->msgq->poll_events, event, poller);
   209a8:	f8da 0010 	ldr.w	r0, [sl, #16]
   209ac:	4622      	mov	r2, r4
   209ae:	4651      	mov	r1, sl
   209b0:	3024      	adds	r0, #36	; 0x24
   209b2:	e7ee      	b.n	20992 <register_events+0xcc>

000209b4 <signal_poll_event>:
{
   209b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   209b8:	6884      	ldr	r4, [r0, #8]
{
   209ba:	4605      	mov	r5, r0
   209bc:	460e      	mov	r6, r1
	if (poller != NULL) {
   209be:	b144      	cbz	r4, 209d2 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   209c0:	7863      	ldrb	r3, [r4, #1]
   209c2:	2b01      	cmp	r3, #1
   209c4:	d136      	bne.n	20a34 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   209c6:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   209ca:	f013 0302 	ands.w	r3, r3, #2
   209ce:	d10a      	bne.n	209e6 <signal_poll_event+0x32>
		poller->is_polling = false;
   209d0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   209d2:	68eb      	ldr	r3, [r5, #12]
   209d4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   209d8:	430e      	orrs	r6, r1
	event->poller = NULL;
   209da:	2000      	movs	r0, #0
	event->state |= state;
   209dc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   209e0:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   209e2:	60eb      	str	r3, [r5, #12]
	return retcode;
   209e4:	e00b      	b.n	209fe <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   209e6:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
   209ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   209ee:	bf08      	it	eq
   209f0:	f112 0f02 	cmneq.w	r2, #2
   209f4:	d105      	bne.n	20a02 <signal_poll_event+0x4e>
		poller->is_polling = false;
   209f6:	2300      	movs	r3, #0
   209f8:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   209fa:	f06f 000a 	mvn.w	r0, #10
}
   209fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   20a02:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
   20a06:	4640      	mov	r0, r8
   20a08:	f7ff fda7 	bl	2055a <z_unpend_thread>
	arch_thread_return_value_set(thread,
   20a0c:	2e08      	cmp	r6, #8
   20a0e:	bf0c      	ite	eq
   20a10:	f06f 0303 	mvneq.w	r3, #3
   20a14:	2300      	movne	r3, #0
   20a16:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20a18:	f814 3c53 	ldrb.w	r3, [r4, #-83]
   20a1c:	06db      	lsls	r3, r3, #27
   20a1e:	d102      	bne.n	20a26 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   20a20:	f854 7c48 	ldr.w	r7, [r4, #-72]
   20a24:	b10f      	cbz	r7, 20a2a <signal_poll_event+0x76>
		poller->is_polling = false;
   20a26:	2300      	movs	r3, #0
   20a28:	e7d2      	b.n	209d0 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   20a2a:	4640      	mov	r0, r8
   20a2c:	f7ff fdef 	bl	2060e <z_ready_thread>
		poller->is_polling = false;
   20a30:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   20a32:	e7ce      	b.n	209d2 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   20a34:	2b02      	cmp	r3, #2
   20a36:	d1f6      	bne.n	20a26 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   20a38:	7823      	ldrb	r3, [r4, #0]
   20a3a:	2b00      	cmp	r3, #0
   20a3c:	d0c9      	beq.n	209d2 <signal_poll_event+0x1e>
   20a3e:	f854 7c04 	ldr.w	r7, [r4, #-4]
   20a42:	2f00      	cmp	r7, #0
   20a44:	d0f4      	beq.n	20a30 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   20a46:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   20a4a:	f1a4 0914 	sub.w	r9, r4, #20
   20a4e:	f104 0014 	add.w	r0, r4, #20
   20a52:	f7ff fe68 	bl	20726 <z_abort_timeout>
		twork->poll_result = 0;
   20a56:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   20a5a:	4649      	mov	r1, r9
   20a5c:	4638      	mov	r0, r7
   20a5e:	f7ff fce4 	bl	2042a <k_work_submit_to_queue>
		poller->is_polling = false;
   20a62:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   20a66:	e7b4      	b.n	209d2 <signal_poll_event+0x1e>

00020a68 <clear_event_registrations>:
	while (num_events--) {
   20a68:	2314      	movs	r3, #20
{
   20a6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   20a6c:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   20a70:	2400      	movs	r4, #0
   20a72:	2601      	movs	r6, #1
	while (num_events--) {
   20a74:	b901      	cbnz	r1, 20a78 <clear_event_registrations+0x10>
}
   20a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (event->type) {
   20a78:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   20a7c:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   20a80:	f003 031f 	and.w	r3, r3, #31
   20a84:	2b08      	cmp	r3, #8
   20a86:	f1a0 0714 	sub.w	r7, r0, #20
   20a8a:	d80d      	bhi.n	20aa8 <clear_event_registrations+0x40>
   20a8c:	fa06 f303 	lsl.w	r3, r6, r3
   20a90:	f413 7f8b 	tst.w	r3, #278	; 0x116
   20a94:	d008      	beq.n	20aa8 <clear_event_registrations+0x40>
	return node->next != NULL;
   20a96:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   20a9a:	b12b      	cbz	r3, 20aa8 <clear_event_registrations+0x40>
	sys_dnode_t *const prev = node->prev;
   20a9c:	f850 5c10 	ldr.w	r5, [r0, #-16]
	prev->next = next;
   20aa0:	602b      	str	r3, [r5, #0]
	next->prev = prev;
   20aa2:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   20aa4:	e940 4405 	strd	r4, r4, [r0, #-20]
   20aa8:	f382 8811 	msr	BASEPRI, r2
   20aac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20ab0:	f04f 0320 	mov.w	r3, #32
   20ab4:	f3ef 8211 	mrs	r2, BASEPRI
   20ab8:	f383 8812 	msr	BASEPRI_MAX, r3
   20abc:	f3bf 8f6f 	isb	sy
   20ac0:	3901      	subs	r1, #1
   20ac2:	4638      	mov	r0, r7
   20ac4:	e7d6      	b.n	20a74 <clear_event_registrations+0xc>

00020ac6 <k_poll_event_init>:
{
   20ac6:	b510      	push	{r4, lr}
	event->type = type;
   20ac8:	04d2      	lsls	r2, r2, #19
   20aca:	0209      	lsls	r1, r1, #8
   20acc:	f401 51f8 	and.w	r1, r1, #7936	; 0x1f00
   20ad0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
   20ad4:	430a      	orrs	r2, r1
   20ad6:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   20ad8:	2400      	movs	r4, #0
	event->type = type;
   20ada:	430a      	orrs	r2, r1
	event->obj = obj;
   20adc:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   20ae0:	6084      	str	r4, [r0, #8]
}
   20ae2:	bd10      	pop	{r4, pc}

00020ae4 <z_handle_obj_poll_events>:
{
   20ae4:	4603      	mov	r3, r0
	return list->head == list;
   20ae6:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   20ae8:	4283      	cmp	r3, r0
   20aea:	d008      	beq.n	20afe <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   20aec:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   20af0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   20af2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20af4:	2300      	movs	r3, #0
	node->prev = NULL;
   20af6:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   20afa:	f7ff bf5b 	b.w	209b4 <signal_poll_event>
}
   20afe:	4770      	bx	lr

00020b00 <k_free>:
	if (ptr != NULL) {
   20b00:	b120      	cbz	r0, 20b0c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   20b02:	1f01      	subs	r1, r0, #4
   20b04:	f850 0c04 	ldr.w	r0, [r0, #-4]
   20b08:	f7ff babc 	b.w	20084 <k_heap_free>
}
   20b0c:	4770      	bx	lr

00020b0e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   20b0e:	4770      	bx	lr

00020b10 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   20b10:	f7f8 bfc6 	b.w	19aa0 <SystemInit>
